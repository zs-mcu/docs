(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{1434:function(t,e,s){"use strict";s.r(e);var a=s(4),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"websocket-3-1-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket-3-1-介绍"}},[t._v("#")]),t._v(" websocket--3.1.介绍")]),t._v(" "),e("p",[t._v("WebSocket 协议"),e("a",{attrs:{href:"http://tools.ietf.org/html/rfc6455",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 6455"),e("OutboundLink")],1),t._v("提供了一种标准化方法，通过单个 TCP 连接在客户端和服务器之间建立全双工、双向通信通道。它是与 HTTP 不同的 TCP 协议，但设计为通过 HTTP 工作，使用端口 80 和 443，并允许重复使用现有的防火墙规则。")]),t._v(" "),e("p",[t._v("WebSocket 交互从 HTTP 请求开始，该请求使用 HTTP"),e("code",[t._v("Upgrade")]),t._v("标头进行升级，或者在本例中切换到 WebSocket 协议。下面的例子展示了这样的交互：")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[t._v("GET /spring"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("websocket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("portfolio/portfolio HTTP/1.1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Upgrade")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" websocket ①\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Upgrade ②\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sec-WebSocket-Key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Uc9l9TMkWGbHFD2qnFHltg==\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sec-WebSocket-Protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v10.stomp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v11.stomp\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sec-WebSocket-Version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Origin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n")])])]),e("p",[t._v("①标"),e("code",[t._v("Upgrade")]),t._v("头。")]),t._v(" "),e("p",[t._v("②使用"),e("code",[t._v("Upgrade")]),t._v("连接。")]),t._v(" "),e("p",[t._v("支持 WebSocket 的服务器返回类似于以下内容的输出，而不是通常的 200 状态代码：")]),t._v(" "),e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[t._v("HTTP/1.1 101 Switching Protocols ①\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Upgrade")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" websocket\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Upgrade\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sec-WebSocket-Accept")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1qVdfYHU9hPOl4JYYNXF623Gzn0=\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sec-WebSocket-Protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v10.stomp\n")])])]),e("p",[t._v("①协议切换")])]),t._v(" "),e("p",[t._v("成功握手后，HTTP 升级请求底层的 TCP 套接字保持打开状态，以便客户端和服务器继续发送和接收消息。")]),t._v(" "),e("p",[t._v("请注意，如果 WebSocket 服务器在 Web 服务器（例如 nginx）后面运行，您可能需要将其配置为将 WebSocket 升级请求传递到 WebSocket 服务器。同样，如果应用程序在云环境中运行，请检查云提供商与 WebSocket 支持相关的说明。")]),t._v(" "),e("h2",{attrs:{id:"http-与-websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-与-websocket"}},[t._v("#")]),t._v(" HTTP 与 WebSocket")]),t._v(" "),e("p",[t._v("尽管 WebSocket 被设计为与 HTTP 兼容并以 HTTP 请求启动，但重要的是要了解这两种协议会导致非常不同的体系结构和应用程序编程模型。")]),t._v(" "),e("p",[t._v("在 HTTP 和 REST 中，应用程序被建模为许多 URL。为了与应用程序交互，客户端以请求-响应方式访问这些 URL。服务器根据 HTTP URL、方法和标头将请求路由到适当的处理程序。")]),t._v(" "),e("p",[t._v("相比之下，在 WebSocket 中，初始连接通常只有一个 URL。随后，所有应用程序消息都在同一 TCP 连接上流动。这指向完全不同的异步、事件驱动的消息传递架构。")]),t._v(" "),e("p",[t._v("WebSocket 也是一种低级传输协议，与 HTTP 不同，它不对消息内容规定任何语义。这意味着除非客户端和服务器就消息语义达成一致，否则无法路由或处理消息。")]),t._v(" "),e("p",[e("code",[t._v("Sec-WebSocket-Protocol")]),t._v("WebSocket 客户端和服务器可以通过HTTP 握手请求上的标头协商使用更高级别的消息传递协议（例如 STOMP） 。如果没有，他们需要制定自己的惯例。")]),t._v(" "),e("h2",{attrs:{id:"websocket诞生"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket诞生"}},[t._v("#")]),t._v(" websocket诞生")]),t._v(" "),e("p",[t._v("http通信的痛点")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("单向通信")]),t._v(" "),e("p",[t._v("http的连接是单向的，即客户端可以给服务端主动发送消息，服务端做起响应。但是服务端无法主动向客户端发送消息。")])]),t._v(" "),e("li",[e("p",[t._v("多次建立tcp连接")]),t._v(" "),e("p",[t._v("另外http在每次客户端和服务端的交互中需要在基于tcp的基础上进行握手和挥手的环节，必然会造成额外资源的开销。")])])]),t._v(" "),e("p",[t._v("历史解决方案")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("http长链接解决多次tcp连接问题")]),t._v(" "),e("p",[t._v("在http1.1中，出现了http长连接，其特点是保持连接特性，当一次http交互完后该TCP通道并不会关闭，而是会保持一段时间(在不同服务器上时间不一样，可以设置)，如果在这段时间内再次发起了http请求就可以直接复用，而不用重新进行握手，从而减少了资源浪费。目前http1.1中，都是默认使用长连接，在请求头中加上"),e("br"),t._v("\nconnection：keep-alive"),e("br"),t._v("\n长连接默认保持连接有效时间是2h")])]),t._v(" "),e("li",[e("p",[t._v("轮询解决单向通信问题")]),t._v(" "),e("p",[t._v("由客户端主动每间断一些时间便向服务端发起请求，询问服务端是否有消息进行同步。从而在一定的时间容错范围内，让服务端的消息同步给客户端。")])]),t._v(" "),e("li",[e("p",[t._v("阻塞式响应解决单向通信问题")]),t._v(" "),e("p",[t._v("客户端主动发起请求，服务端收到请求后如果没有响应消息，则进行阻塞，知道服务端有需要响应的信息之后，返回给客户端。然后客户端收到响应之后再次发送消息给服务端进行阻塞，如此反复。")])]),t._v(" "),e("li",[e("p",[t._v("websocket方案")]),t._v(" "),e("p",[t._v("websocket是一种全双工通信的解决方案，即客户端和服务端均可以主动发送消息。")])])]),t._v(" "),e("p",[t._v("实现原理：客户端和服务器之间维持一个 TCP/IP 长连接，全双工通道。")]),t._v(" "),e("h2",{attrs:{id:"websocket建立连接过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket建立连接过程"}},[t._v("#")]),t._v(" websocket建立连接过程")]),t._v(" "),e("img",{staticStyle:{zoom:"25%"},attrs:{src:s(811),alt:"image-20240126110009654"}}),t._v(" "),e("img",{staticStyle:{zoom:"25%"},attrs:{src:s(812),alt:"image-20240126110030629"}}),t._v(" "),e("img",{staticStyle:{zoom:"25%"},attrs:{src:s(813),alt:"image-20240126110048990"}}),t._v(" "),e("img",{staticStyle:{zoom:"25%"},attrs:{src:s(814),alt:"image-20240126110105039"}}),t._v(" "),e("img",{staticStyle:{zoom:"25%"},attrs:{src:s(815),alt:"image-20240126110133183"}}),t._v(" "),e("img",{staticStyle:{zoom:"25%"},attrs:{src:s(816),alt:"image-20240126110156486"}}),t._v(" "),e("h2",{attrs:{id:"websocket协议分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket协议分析"}},[t._v("#")]),t._v(" websocket协议分析")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://tools.ietf.org/html/rfc6455",title:"RFC6455",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC6455"),e("OutboundLink")],1),t._v("  https://www.rfc-editor.org/rfc/rfc6455.txt\n"),e("a",{attrs:{href:"https://blog.csdn.net/aigoogle/article/details/122281445",title:"RFC6455中文版",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC6455中文版"),e("OutboundLink")],1),e("br"),t._v(" "),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/407711596",title:"ws协议分析",target:"_blank",rel:"noopener noreferrer"}},[t._v("ws协议分析"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("RFC6455中定义了webscoket基于tcp以及http的握手、挥手以及协议帧信息")]),t._v(" "),e("ul",[e("li",[t._v("协议帧")])]),t._v(" "),e("img",{staticStyle:{zoom:"25%"},attrs:{src:s(817),alt:"image-20240126110216602"}}),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:s(818),alt:"image-20240126111602646"}}),t._v(" "),e("p",[t._v("https://www.rfc-editor.org/rfc/rfc6455.txt")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" FIN:  1 bit\n    指示这是消息中的最后一个片段。第一个片段也可以是最终片段。\n      \n  RSV1, RSV2, RSV3:  1 bit each\n  \t必须为0，除非协商了定义含义的扩展对于非零值。如果接收到非零值，并且协商的扩展定义了这样一个非零的含义值，\n  \t则接收端点必须向WebSocket发送MUST _Fail）连接_。\n\n\nOpcode:  4 bits 指定数据包类型\n\t定义“有效载荷数据”的解释。如果接收到未知操作码，则接收端点必须向WebSocket连接_。定义了以下值。\n\n*  %x0 表示连续帧\n*  %x1 表示文本帧\n*  %x2 二进制\n*  %x3-7 为其他非控制帧保留\n*  %x8 关闭连接信号\n*  %x9 ping\n*  %xA pong\n*  %xB-F 为进一步的控制帧保留\n\n\nPayload length:  7 bits, 7+16 bits, or 7+64 bits\n\n有效载荷长度：7位、7+16位或7+64位\n以字节为单位：如果0-125，则为有效载荷长度。如果是126，则以下2个字节被解释为6位无符号整数是有效载荷长度。\n如果127后面的8个字节被解释为64位无符号整数（最高有效位必须是0）是有效载荷长度。\n多字节长度量以网络字节顺序表示。请注意\n")])])]),e("blockquote",[e("p",[t._v("握手")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("客户端")]),t._v(" "),e("p",[t._v("GET /chat HTTP/1.1"),e("br"),t._v("\nHost: server.example.com"),e("br"),t._v("\nUpgrade: webSocket"),e("br"),t._v("\nConnection: Upgrade"),e("br"),t._v("\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ=="),e("br"),t._v("\nOrigin: "),e("a",{attrs:{href:"http://example.com/",title:"http://example.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://example.com"),e("OutboundLink")],1),e("br"),t._v("\nSec-WebSocket-Protocol: websocket"),e("br"),t._v("\nSec-WebSocket-Version: 13"),e("br"),t._v("\n在http的基础上进行升级（upgrade），升级成websocket协议，websocket协议的版本是13。"),e("br"),t._v("\nSec-WebSocket-Key 此参数为客户端传递的密钥，会由此生成服务端产生的密钥，并由客户端判断是否进行connection。")])]),t._v(" "),e("li",[e("p",[t._v("服务端")]),t._v(" "),e("p",[t._v("HTTP/1.1 101 Switching Protocols"),e("br"),t._v("\nUpgrade: websocket"),e("br"),t._v("\nConnection: Upgrade"),e("br"),t._v("\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo="),e("br"),t._v("\nSec-WebSocket-Protocol: websocket")])])]),t._v(" "),e("p",[t._v("HTTP状态码响应为101 代表websocket协议升级成功。"),e("br"),t._v("\nSec-WebSocket-Accept：表示服务器是否接收这个连接，如果有这个字段，这个字段的值必须为客户端提供的|Sec-WebSocket-Key|字段的值与预先定义好的GUID值进行哈希，在进行base64编码。任何其他的值都表明服务器没有接受客户端发起的请求。")]),t._v(" "),e("blockquote",[e("p",[t._v("挥手")])]),t._v(" "),e("p",[t._v("挥手过程要比打开过程简单的多。 任何一端都可以发送一个Close帧来开始挥手过程，Close帧可能带有部分数据（比如描述关闭的原因以及状态码）。任何一端收到一个Close帧，如果之前没有回复过的话，需要发送Close帧。主动关闭的一端在收到对端返回的响应后，在确定没有数据需要继续接收之后，开始关闭底层连接（shutdown）。")]),t._v(" "),e("h2",{attrs:{id:"websocket支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket支持"}},[t._v("#")]),t._v(" websocket支持")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("前端")]),t._v(" "),e("p",[t._v("websocket基础需要依赖于html5。之前的版本并没有对websocket进行支持。"),e("br"),t._v("\n目前，支持Html5的浏览器包括Firefox（火狐浏览器）、IE9及其更高版本、Chrome（谷歌浏览器）、Safari、Opera等；国内的傲游浏览器（Maxthon）、以及基于IE或Chromium（Chrome的工程版或称实验版）所推出的360浏览器、搜狗浏览器、QQ浏览器、猎豹浏览器等国产浏览器同样具备支持HTML5的能力。")])]),t._v(" "),e("li",[e("p",[t._v("后端")]),t._v(" "),e("p",[t._v("tomcat 接入了websocket，并支持jsr356规范。可以通过war包的方式或者springboot项目的形式去集成websocket。")])])]),t._v(" "),e("h2",{attrs:{id:"jsr356"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsr356"}},[t._v("#")]),t._v(" JSR356")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.oracle.com/technical-resources/articles/java/jsr356.html",title:"JSR356",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSR356"),e("OutboundLink")],1),e("br"),t._v("\nJSR356 是一种java语言的websocket协议实现规范。"),e("br"),t._v("\n典型的如tomcat遵循了JSR356协议。")]),t._v(" "),e("h2",{attrs:{id:"思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[t._v("#")]),t._v(" 思考")]),t._v(" "),e("p",[t._v("当浏览器不支持websocket时，如何处理"),e("br"),t._v("\n点对点消息如何主动发送"),e("br"),t._v("\n广播消息如何主动发送"),e("br"),t._v("\n分布式如何处理上述问题"),e("br"),t._v("\n如何进行鉴权")])])}),[],!1,null,null,null);e.default=r.exports},811:function(t,e,s){t.exports=s.p+"assets/img/image-20240126110009654.b82c9289.png"},812:function(t,e,s){t.exports=s.p+"assets/img/image-20240126110030629.3a0cacc1.png"},813:function(t,e,s){t.exports=s.p+"assets/img/image-20240126110048990.f85d8b76.png"},814:function(t,e,s){t.exports=s.p+"assets/img/image-20240126110105039.a40369b5.png"},815:function(t,e,s){t.exports=s.p+"assets/img/image-20240126110133183.d25c9971.png"},816:function(t,e,s){t.exports=s.p+"assets/img/image-20240126110156486.4b2215d5.png"},817:function(t,e,s){t.exports=s.p+"assets/img/image-20240126110216602.9cbb6c86.png"},818:function(t,e,s){t.exports=s.p+"assets/img/image-20240126111602646.2d059d86.png"}}]);