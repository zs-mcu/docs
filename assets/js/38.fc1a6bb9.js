(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{1375:function(t,v,_){"use strict";_.r(v);var e=_(4),s=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"se基础-反射机制-2-class信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#se基础-反射机制-2-class信息"}},[t._v("#")]),t._v(" se基础--反射机制--2.Class信息")]),t._v(" "),v("h2",{attrs:{id:"class方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class方法"}},[t._v("#")]),t._v(" class方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法名")]),t._v(" "),v("th",[t._v("功能")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("一个静态方法获取字节码对象")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("static Class forName(String name)")])]),t._v(" "),v("td",[t._v("返回指定类名 name 的 Class 对象")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("获取类加载器对象")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("ClassLoader getClassLoader()")])]),t._v(" "),v("td",[t._v("返回该类的类加载器")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("获取类相关信息")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("getName()")]),v("br"),v("code",[t._v("getCanonicalName()")])]),t._v(" "),v("td",[t._v("完整类名")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("getSimpleName()")])]),t._v(" "),v("td",[t._v("类名")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Class getSuperClass()")])]),t._v(" "),v("td",[t._v("获得父类的Class对象")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Class getSuperclass()")])]),t._v(" "),v("td",[t._v("获取超类的Class对象")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Class [] getInterfaces()")])]),t._v(" "),v("td",[t._v("返回实现类class数组")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("isInterface()")])]),t._v(" "),v("td",[t._v("判断是否是接口")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Package getPackage()")])]),t._v(" "),v("td",[v("strong",[t._v("类所在的包")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("isInstance()")])]),t._v(" "),v("td",[t._v("判断是否可以强制类型转换")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("cast()")])]),t._v(" "),v("td",[t._v("强制类型转换")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("获取实例对象")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Object newInstance()")])]),t._v(" "),v("td",[t._v('"虚拟构造器"。使用'),v("code",[t._v("newInstance()")]),t._v("来创建的类，"),v("br"),t._v("必须带有无参数的构造器，通常设置为public")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("构造器 Constructor")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("getConstructors()")]),v("br"),v("code",[t._v("getDeclaredConstructors()")]),v("br"),v("code",[t._v("getConstructor()")]),v("br"),v("code",[t._v("getDeclaredConstructor()")])]),t._v(" "),v("td",[t._v("获取构造器")])]),t._v(" "),v("tr",[v("td",[t._v("Constructor类中")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public int getModifiers();")])]),t._v(" "),v("td",[t._v("取得修饰符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public String getName();")])]),t._v(" "),v("td",[t._v("取得方法名称")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public Class<?>[] getParameterTypes();")])]),t._v(" "),v("td",[t._v("取得参数的类型")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("成员变量 Field")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("getFields()")]),v("br"),v("code",[t._v("getDeclaredFields()")]),v("br"),v("code",[t._v("getField(String name)")]),v("br"),v("code",[t._v("getDeclaredField(String name)")])]),t._v(" "),v("td",[t._v("获取成员变量")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Method getMethod(String name,Class … paramTypes)")])]),t._v(" "),v("td",[t._v("返回一个Method对象，此对象的形参类型为paramType")])]),t._v(" "),v("tr",[v("td",[t._v("Field 类中")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public int getModifiers()")])]),t._v(" "),v("td",[t._v("以整数形式返回此Field的修饰符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public Class<?> getType()")])]),t._v(" "),v("td",[t._v("得到Field的属性类型")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public String getName()")])]),t._v(" "),v("td",[t._v("返回Field的名称。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public Object get(Object obj)")])]),t._v(" "),v("td",[t._v("取得指定对象obj上此Field的属性内容")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public void set(Object obj,Object value)")])]),t._v(" "),v("td",[t._v("设置指定对象obj上此Field的属性内容")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("成员方法 Method")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Method[] getMethods()")])]),t._v(" "),v("td",[t._v("返回所有成员方法对象的数组（只能拿public的）")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Method[] getDeclaredMethods()")])]),t._v(" "),v("td",[t._v("返回所有成员方法对象的数组，存在就能拿到")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Method getMethod(String name, Class<?>... parameterTypes)")])]),t._v(" "),v("td",[t._v("返回单个成员方法对象（只能拿public的）")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Method getDeclaredMethod(String name, Class<?>... parameterTypes)")])]),t._v(" "),v("td",[t._v("返回单个成员方法对象，存在就能拿到")])]),t._v(" "),v("tr",[v("td",[t._v("Method 类中")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public Class<?> getReturnType()")])]),t._v(" "),v("td",[t._v("取得全部的返回值")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public Class<?>[] getParameterTypes()")])]),t._v(" "),v("td",[t._v("取得全部的参数")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public int getModifiers()")])]),t._v(" "),v("td",[t._v("取得修饰符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("public Class<?>[] getExceptionTypes()")])]),t._v(" "),v("td",[t._v("取得异常信息")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Annotation相关")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("get Annotation(Class<T> annotationClass)")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("getDeclaredAnnotations()")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("泛型相关")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Type getGenericSuperclass()")])]),t._v(" "),v("td",[t._v("获取父类泛型类型")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("ParameterizedType")])]),t._v(" "),v("td",[t._v("泛型类型")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("getActualTypeArguments()")])]),t._v(" "),v("td",[t._v("获取实际的泛型类型参数数组")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("调用指定方法")])]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("Object invoke(Object obj, Object[] args)")])]),t._v(" "),v("td",[t._v("若原方法无返回值，此时返回null"),v("br"),t._v("若原方法若为静态方法，此时形参Object obj可为null"),v("br"),t._v("若原方法形参列表为空，则Object[] args为null"),v("br"),t._v("若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("setAccessible")])]),t._v(" "),v("td",[t._v("Method和Field、Constructor对象都有setAccessible()方法"),v("br"),t._v("setAccessible启动和禁用访问安全检查的开关。")])])])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(589),alt:"image-20240118155552721"}}),t._v(" "),v("h2",{attrs:{id:"哪些类型可以有class对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哪些类型可以有class对象"}},[t._v("#")]),t._v(" 哪些类型可以有Class对象")]),t._v(" "),v("p",[t._v("（1）class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类\n（2）interface：接口\n（3）[]：数组\n（4）enum：枚举\n（5）annotation：注解@interface\n（6）primitive type：基本数据类型\n（7）void")]),t._v(" "),v("h2",{attrs:{id:"类加载过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[t._v("#")]),t._v(" 类加载过程")]),t._v(" "),v("p",[t._v("源文件---\x3eclass文件---\x3e加载")]),t._v(" "),v("p",[t._v("类的加载：将字节码文件加载到内存的过程\n运行时类：加载到内存中的类，此运行时类作为Class的实例")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(590),alt:"image-20240118152810551"}}),t._v(" "),v("p",[v("strong",[t._v("类加载器的作用：")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("**类加载的作用：**将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。")])]),t._v(" "),v("li",[v("p",[t._v("**类缓存：**标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。")])])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(591),alt:"image-20240118152838938"}}),t._v(" "),v("ul",[v("li",[v("p",[t._v("加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。")])]),t._v(" "),v("li",[v("p",[t._v("链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题")])]),t._v(" "),v("li",[v("p",[t._v("准备：正式为类变量（static）分配内存并"),v("strong",[t._v("设置类变量默认初始值")]),t._v("的阶段，这些内存都将在方法区中进行分配。")])]),t._v(" "),v("li",[v("p",[t._v("解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。")])])])]),t._v(" "),v("li",[v("p",[t._v("初始化：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("执行类构造器"),v("code",[t._v("<clinit>()")]),t._v("方法的过程。类构造器"),v("code",[t._v("<clinit>()")]),t._v("方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。")])]),t._v(" "),v("li",[v("p",[t._v("当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。")])]),t._v(" "),v("li",[v("p",[t._v("虚拟机会保证一个类的"),v("code",[t._v("<clinit>()")]),t._v("方法在多线程环境中被正确加锁和同步。")])])])])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(592),alt:"image-20240118153625070"}}),t._v(" "),v("h2",{attrs:{id:"classloader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#classloader"}},[t._v("#")]),t._v(" ClassLoader")]),t._v(" "),v("p",[t._v("类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的")]),t._v(" "),v("p",[t._v("类的加载器。")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(593),alt:"image-20240118154304613"}}),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(594),alt:"image-20240118154452654"}}),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(595),alt:"image-20240118154529999"}}),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(596),alt:"image-20240118155108778"}}),t._v(" "),v("h2",{attrs:{id:"什么时候会发生类初始化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么时候会发生类初始化"}},[t._v("#")]),t._v(" 什么时候会发生类初始化")]),t._v(" "),v("p",[v("strong",[t._v("类的主动引用（一定会发生类的初始化）")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("当虚拟机启动，先初始化main方法所在的类")])]),t._v(" "),v("li",[v("p",[t._v("new一个类的对象")])]),t._v(" "),v("li",[v("p",[t._v("调用类的静态成员（除了final常量）和静态方法")])]),t._v(" "),v("li",[v("p",[t._v("使用"),v("code",[t._v("java.lang.reflect")]),t._v("包的方法对类进行反射调用")])]),t._v(" "),v("li",[v("p",[t._v("当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类")])])]),t._v(" "),v("p",[v("strong",[t._v("类的被动引用（不会发生类的初始化）")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("当访问一个静态域时，只有真正声明这个域的类才会被初始化")])]),t._v(" "),v("li",[v("p",[t._v("当通过子类引用父类的静态变量，不会导致子类初始化")])]),t._v(" "),v("li",[v("p",[t._v("通过数组定义类引用，不会触发此类的初始化")])]),t._v(" "),v("li",[v("p",[t._v("引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）")])])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:_(597),alt:"image-20240118153954370"}}),t._v(" "),v("h2",{attrs:{id:"类的字面量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的字面量"}},[t._v("#")]),t._v(" 类的字面量")]),t._v(" "),v("p",[v("code",[t._v("类.class")])]),t._v(" "),v("p",[t._v("适用于：普通类、接口、数组、基本数据类型")]),t._v(" "),v("p",[v("code",[t._v("TYPE")])]),t._v(" "),v("p",[t._v("TYPE字段是引用字段，指向对应的基本数据类型的Class对象")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("...等价于...")]),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean.class")]),t._v(" "),v("td",[t._v("Boolean.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("char.class")]),t._v(" "),v("td",[t._v("Character.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("byte.class")]),t._v(" "),v("td",[t._v("Byte.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("short.class")]),t._v(" "),v("td",[t._v("Short.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("int.class")]),t._v(" "),v("td",[t._v("Integer.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("long.class")]),t._v(" "),v("td",[t._v("Long.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("float.class")]),t._v(" "),v("td",[t._v("Float.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("double.class")]),t._v(" "),v("td",[t._v("Double.TYPE")])]),t._v(" "),v("tr",[v("td",[t._v("void.Class")]),t._v(" "),v("td",[t._v("Void.TYPE")])])])])])}),[],!1,null,null,null);v.default=s.exports},589:function(t,v,_){t.exports=_.p+"assets/img/image-20240118155552721.9873b627.png"},590:function(t,v,_){t.exports=_.p+"assets/img/image-20240118152810551.e71a31aa.png"},591:function(t,v,_){t.exports=_.p+"assets/img/image-20240118152838938.6dc253a7.png"},592:function(t,v,_){t.exports=_.p+"assets/img/image-20240118153625070.5c15dc67.png"},593:function(t,v,_){t.exports=_.p+"assets/img/image-20240118154304613.a420e7b3.png"},594:function(t,v,_){t.exports=_.p+"assets/img/image-20240118154452654.ad2a6bac.png"},595:function(t,v,_){t.exports=_.p+"assets/img/image-20240118154529999.daa117ef.png"},596:function(t,v,_){t.exports=_.p+"assets/img/image-20240118155108778.50ce7a77.png"},597:function(t,v,_){t.exports=_.p+"assets/img/image-20240118153954370.b5772c38.png"}}]);