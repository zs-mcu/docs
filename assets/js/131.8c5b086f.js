(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{1324:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("https://github.com/NieZhuZhu/Blog/issues/1")]),t._v(" "),s("p",[s("img",{attrs:{src:a(583),alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"通过需求学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过需求学习"}},[t._v("#")]),t._v(" 通过需求学习")]),t._v(" "),s("p",[t._v("首先我们在开发的过程当中遇到这样一个处理数据的需求")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todayILearn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'今天学习 JSON.stringify()，我很开心！'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("created_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("updated_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("我们需要将上面这个对象处理成下面这个对象")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todayILearn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'今天学习 JSON.stringify()，我很开心！'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("createdAt")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("updatedAt")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("也就是在不改变属性的值的前提下，将对象属性修改一下。 把"),s("code",[t._v("_id")]),t._v(" 改成 "),s("code",[t._v("id")]),t._v("，把 "),s("code",[t._v("updated_at")]),t._v(" 改成 "),s("code",[t._v("updatedAt")]),t._v("，把 "),s("code",[t._v("created_at")]),t._v(" 改成 "),s("code",[t._v("createdAt")]),t._v("。我们现在通过这个小小的需求来见识一下 "),s("code",[t._v("JSON.stringify()")]),t._v(" 的强大吧。")]),t._v(" "),s("p",[t._v("首先要解决这个问题我们有很多的解决方式，我们先提供两种不优雅的解决方案：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("方案一：一次遍历+多声明一个变量")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多一个变量存储")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todayILearnTemp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" todayILearnTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"created_at"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" todayILearnTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"createdAt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"updatedAt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" todayILearnTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"updatedAt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" todayILearnTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todayILearnTemp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { id: 1,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  content: '今天学习 JSON.stringify()，我很开心！',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  updated_at: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n")])])]),s("p",[t._v("方案一完全没有问题可以实现。但是多声明了一个变量又加上一层循环并且还有很多的 "),s("code",[t._v("if")]),t._v(" "),s("code",[t._v("else")]),t._v(" 语句，怎么都显得不太优雅。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("方案二：暴力 "),s("code",[t._v("delete")]),t._v(" 属性和增加属性")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 极致的暴力美学")]),t._v("\ntodayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntodayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("createdAt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("created_at"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntodayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updatedAt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updated_at"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("created_at"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updated_at"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t太暴力😢")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{ ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  content: '今天学习 JSON.stringify()，我很开心！',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  id: 1,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n")])])]),s("p",[t._v("直接 delete 暴力解决太粗鲁了，而且有一个缺点，属性的顺序变了。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("方案三：序列化+ "),s("code",[t._v("replace")]),t._v(" 美学典范")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mapObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("created_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"createdAt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("updated_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"updatedAt"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("_id|created_at|updated_at")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gi")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("matched")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" mapObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("matched"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id: 1,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  content: '今天学习 JSON.stringify()，我很开心！',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n")])])]),s("p",[t._v("瞬间感觉非常优雅和舒服，有木有！如果你这样写，你导师给你 review 代码的时候，你导师肯定会夸赞你的😁。")]),t._v(" "),s("p",[t._v("接下来，正片开始，我们今天将系统的学习或者说是复习一遍 "),s("code",[t._v("JSON.stringify")]),t._v(" 的基础知识，让我们在日常开发中更加的游刃有余。")]),t._v(" "),s("h2",{attrs:{id:"九大特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九大特性"}},[t._v("#")]),t._v(" 九大特性")]),t._v(" "),s("h3",{attrs:{id:"特性1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性1"}},[t._v("#")]),t._v(" 特性1")]),t._v(" "),s("p",[s("strong",[t._v("对于 "),s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 三个特殊的值分别作为对象属性的值、数组元素、单独的值时 "),s("code",[t._v("JSON.stringify()")]),t._v("将返回不同的结果。")])]),t._v(" "),s("p",[t._v("首先，我们来复习一下知识点，看一道非常简单的面试题目：请问下面代码会输出什么？")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：？")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "{"a":"aaa"}"')]),t._v("\n")])])]),s("p",[t._v("很简单这道题目面试官主要考察的知识点是：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 作为对象属性值时 "),s("code",[t._v("JSON.stringify()")]),t._v(" 跳过（忽略）对它们进行序列化")])]),t._v(" "),s("p",[s("strong",[t._v("面试官追问")]),t._v("：假设 "),s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 值作为数组元素会是怎样呢？")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aa")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：？")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "["aaa",null,null,null]"')]),t._v("\n")])])]),s("p",[t._v("知识点是：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 作为数组元素值时，"),s("code",[t._v("JSON.stringify()")]),t._v(" 将会将它们序列化为 "),s("code",[t._v("null")])])]),t._v(" "),s("p",[t._v("我们再发挥动下脑筋，如果单独序列化这些值会是什么样的结果呢？")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),s("p",[t._v("单独转换的结果就是：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 被 "),s("code",[t._v("JSON.stringify()")]),t._v(" 作为单独的值进行序列化时都会返回 "),s("code",[t._v("undefined")])])]),t._v(" "),s("h3",{attrs:{id:"特性1总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性1总结"}},[t._v("#")]),t._v(" 特性1总结")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 作为对象属性值时 "),s("code",[t._v("JSON.stringify()")]),t._v(" 对跳过（忽略）它们进行序列化")]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 作为数组元素值时，"),s("code",[t._v("JSON.stringify()")]),t._v(" 将会将它们序列化为 "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 被 "),s("code",[t._v("JSON.stringify()")]),t._v(" 作为单独的值进行序列化时，都会返回 "),s("code",[t._v("undefined")])])]),t._v(" "),s("h3",{attrs:{id:"特性2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性2"}},[t._v("#")]),t._v(" 特性2")]),t._v(" "),s("p",[t._v("也是在使用过程中必须要非常注意的一个点：")]),t._v(" "),s("ul",[s("li",[t._v("非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("d")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ddd"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：？")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "{"a":"aaa","d":"ddd"}"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aa")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eee"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：？")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "["aaa",null,null,null,"eee"]"')]),t._v("\n")])])]),s("p",[t._v("正如我们在第一特性所说，"),s("code",[t._v("JSON.stringify()")]),t._v(" 序列化时会忽略一些特殊的值，所以不能保证序列化后的字符串还是以特定的顺序出现（数组除外）。")]),t._v(" "),s("h3",{attrs:{id:"特性3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性3"}},[t._v("#")]),t._v(" 特性3")]),t._v(" "),s("ul",[s("li",[t._v("转换值如果有 "),s("code",[t._v("toJSON()")]),t._v(" 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("say")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello JSON.stringify"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toJSON")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"today i learn"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "today i learn"')]),t._v("\n")])])]),s("h3",{attrs:{id:"特性4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性4"}},[t._v("#")]),t._v(" 特性4")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("JSON.stringify()")]),t._v(" 将会正常序列化 "),s("code",[t._v("Date")]),t._v(" 的值。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "{"now":"2019-12-08T07:42:11.973Z"}"')]),t._v("\n")])])]),s("p",[t._v("实际上 "),s("code",[t._v("Date")]),t._v(" 对象自己部署了 "),s("code",[t._v("toJSON()")]),t._v(" 方法（同Date.toISOString()），因此 "),s("code",[t._v("Date")]),t._v(" 对象会被当做字符串处理。")]),t._v(" "),s("h3",{attrs:{id:"特性5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性5"}},[t._v("#")]),t._v(" 特性5")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("NaN")]),t._v(" 和 "),s("code",[t._v("Infinity")]),t._v(" 格式的数值及 "),s("code",[t._v("null")]),t._v(" 都会被当做 "),s("code",[t._v("null")]),t._v("。")])]),t._v(" "),s("p",[t._v("直接上代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "null"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "null"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "null"')]),t._v("\n")])])]),s("h3",{attrs:{id:"特性6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性6"}},[t._v("#")]),t._v(" 特性6")]),t._v(" "),s("p",[t._v("关于基本类型的序列化：")]),t._v(" "),s("ul",[s("li",[t._v("布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[1,"false",false]"')]),t._v("\n")])])]),s("h3",{attrs:{id:"特性7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性7"}},[t._v("#")]),t._v(" 特性7")]),t._v(" "),s("p",[t._v("关于对象属性的是否可枚举：")]),t._v(" "),s("ul",[s("li",[t._v("其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不可枚举的属性默认会被忽略：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n    Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("enumerable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stringify'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("enumerable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "{"y","stringify"}"')]),t._v("\n")])])]),s("h3",{attrs:{id:"特性8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性8"}},[t._v("#")]),t._v(" 特性8")]),t._v(" "),s("p",[t._v("我们都知道实现深拷贝最简单粗暴的方式就是序列化："),s("code",[t._v("JSON.parse(JSON.stringify())")]),t._v("，这个方式实现深拷贝会因为序列化的诸多特性导致诸多的坑点：比如现在我们要说的循环引用问题。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"loopObj"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" loopObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  obj\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象之间形成循环引用，形成闭环")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loopObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" loopObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n VM44:9 Uncaught TypeError: Converting circular structure to JSON\n    --\x3e starting at object with constructor 'Object'\n    |     property 'loopObj' -> object with constructor 'Object'\n    --- property 'obj' closes the circle\n    at JSON.stringify (<anonymous>)\n    at deepClone (<anonymous>:9:26)\n    at <anonymous>:11:13\n */")]),t._v("\n")])])]),s("ul",[s("li",[t._v("对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。")])]),t._v(" "),s("p",[t._v("这也就是为什么用序列化去实现深拷贝时，遇到循环引用的对象会抛出错误的原因。")]),t._v(" "),s("h3",{attrs:{id:"特性9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性9"}},[t._v("#")]),t._v(" 特性9")]),t._v(" "),s("p",[t._v("最后，关于 "),s("code",[t._v("symbol")]),t._v(" 属性还有一点要说的就是：")]),t._v(" "),s("ul",[s("li",[t._v("所有以 "),s("code",[t._v("symbol")]),t._v(" 为属性键的属性都会被完全忽略掉，即便 "),s("code",[t._v("replacer")]),t._v(" 参数中强制指定包含了它们。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"json"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stringify"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"symbol"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),s("p",[t._v("关于 "),s("code",[t._v("replacer")]),t._v(" 是什么呢，它是 "),s("code",[t._v("JSON.stringify()")]),t._v(" 的第二个参数，我们比较少的会用到，所以很多时候我们会忘记 "),s("code",[t._v("JSON.stringify()")]),t._v(" 第二个、第三个参数，场景不多，但是用的好的话会非常的方便，关于 "),s("code",[t._v("JSON.stringify()")]),t._v(" 第九大特性的例子中对 "),s("code",[t._v("replacer")]),t._v(" 参数不明白的同学先别急，其实很简单，我们马上就会在下面的学习中弄懂。")]),t._v(" "),s("h2",{attrs:{id:"第二个参数和第三个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二个参数和第三个参数"}},[t._v("#")]),t._v(" 第二个参数和第三个参数")]),t._v(" "),s("h2",{attrs:{id:"强大的第二个参数-replacer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强大的第二个参数-replacer"}},[t._v("#")]),t._v(" 强大的第二个参数 "),s("code",[t._v("replacer")])]),t._v(" "),s("p",[s("code",[t._v("replacer")]),t._v(" 参数有两种形式，可以是一个函数或者一个数组。作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 "),s("code",[t._v("map")]),t._v("、"),s("code",[t._v("filter")]),t._v(" 等方法的回调函数，对每一个属性值都会执行一次该函数。如果 "),s("code",[t._v("replacer")]),t._v(" 是一个数组，数组的值代表将被序列化成 JSON 字符串的属性名。")]),t._v(" "),s("h3",{attrs:{id:"replacer-作为函数时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replacer-作为函数时"}},[t._v("#")]),t._v(" "),s("code",[t._v("replacer")]),t._v(" 作为函数时")]),t._v(" "),s("p",[t._v("第二个参数"),s("code",[t._v("replacer")]),t._v(" 非常强大， "),s("code",[t._v("replacer")]),t._v(" 作为函数时，我们可以打破九大特性的大多数特性，我们直接来看代码吧。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const data = {\n  a: "aaa",\n  b: undefined,\n  c: Symbol("dd"),\n  fn: function() {\n    return true;\n  }\n};\n// 不用 replacer 参数时\nJSON.stringify(data); \n\n// "{"a":"aaa"}"\n// 使用 replacer 参数作为函数时\nJSON.stringify(data, (key, value) => {\n  switch (true) {\n    case typeof value === "undefined":\n      return "undefined";\n    case typeof value === "symbol":\n      return value.toString();\n    case typeof value === "function":\n      return value.toString();\n    default:\n      break;\n  }\n  return value;\n})\n// "{"a":"aaa","b":"undefined","c":"Symbol(dd)","fn":"function() {\\n    return true;\\n  }"}"\n')])])]),s("p",[t._v("虽然使用 toString() 方法有点耍流氓的意思但是不得不说第二个参数很强大。")]),t._v(" "),s("h4",{attrs:{id:"传入-replacer-函数的第一个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传入-replacer-函数的第一个参数"}},[t._v("#")]),t._v(" 传入 "),s("code",[t._v("replacer")]),t._v(" 函数的第一个参数")]),t._v(" "),s("p",[s("strong",[t._v("需要注意的是，replacer 被传入的函数时，第一个参数不是对象的第一个键值对，而是空字符串作为 key 值，value 值是整个对象的键值对：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const data = {\n  a: 2,\n  b: 3,\n  c: 4,\n  d: 5\n};\nJSON.stringify(data, (key, value) => {\n  console.log(value);\n  return value;\n})\n// 第一个被传入 replacer 函数的是 {"":{a: 2, b: 3, c: 4, d: 5}}\n// {a: 2, b: 3, c: 4, d: 5}   \n// 2\n// 3\n// 4\n// 5\n')])])]),s("h4",{attrs:{id:"实现-map-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-map-函数"}},[t._v("#")]),t._v(" 实现 "),s("code",[t._v("map")]),t._v(" 函数")]),t._v(" "),s("p",[t._v("我们还可以用它来手写实现一个对象的类似 map 的函数。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// 实现一个 map 函数\nconst data = {\n  a: 2,\n  b: 3,\n  c: 4,\n  d: 5\n};\nconst objMap = (obj, fn) => {\n  if (typeof fn !== "function") {\n    throw new TypeError(`${fn} is not a function !`);\n  }\n  return JSON.parse(JSON.stringify(obj, fn));\n};\nobjMap(data, (key, value) => {\n  if (value % 2 === 0) {\n    return value / 2;\n  }\n  return value;\n});\n// {a: 1, b: 3, c: 2, d: 5}\n')])])]),s("h3",{attrs:{id:"replacer-作为数组时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replacer-作为数组时"}},[t._v("#")]),t._v(" "),s("code",[t._v("replacer")]),t._v(" 作为数组时")]),t._v(" "),s("p",[s("code",[t._v("replacer")]),t._v(" 作为数组时，结果非常简单，数组的值就代表了将被序列化成 JSON 字符串的属性名。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const jsonObj = {\n  name: "JSON.stringify",\n  params: "obj,replacer,space"\n};\n\n// 只保留 params 属性的值\nJSON.stringify(jsonObj, ["params"]);\n// "{"params":"obj,replacer,space"}" \n')])])]),s("h2",{attrs:{id:"有意思却没啥用的第三个参数-space"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有意思却没啥用的第三个参数-space"}},[t._v("#")]),t._v(" 有意思却没啥用的第三个参数 "),s("code",[t._v("space")])]),t._v(" "),s("p",[s("code",[t._v("space")]),t._v(" 参数用来控制结果字符串里面的间距。首先看一个例子就是到这东西到底是干啥用的：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tiedan "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"弹铁蛋同学"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("describe")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"今天在学 JSON.stringify()"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("emotion")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"like shit"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tiedan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"🐷"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接下来是输出结果")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "{')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 🐷"name": "弹铁蛋同学",')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 🐷"describe": "今天在学 JSON.stringify()",')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 🐷"emotion": "like shit"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// }"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tiedan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "{')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   "name": "弹铁蛋同学",')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   "describe": "今天在学 JSON.stringify()",')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   "emotion": "like shit"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// }"')]),t._v("\n")])])]),s("p",[t._v("上面代码一眼就能看出第三个参数的作用了，花里胡哨的，其实这个参数还是比较鸡肋的，除了好看没啥特别的用处。我们用 "),s("code",[t._v("\\t")]),t._v("、 "),s("code",[t._v("\\n")]),t._v(" 等缩进能让输出更加格式化，更适于观看。")]),t._v(" "),s("ul",[s("li",[t._v("如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；")]),t._v(" "),s("li",[t._v("如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("h3",{attrs:{id:"九大特性-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九大特性-2"}},[t._v("#")]),t._v(" 九大特性：")]),t._v(" "),s("p",[s("strong",[t._v("一、对于 "),s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 三个特殊的值分别作为对象属性的值、数组元素、单独的值时的不同返回结果。")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 作为对象属性值时 "),s("code",[t._v("JSON.stringify()")]),t._v(" 对跳过（忽略）它们进行序列化")]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 作为数组元素值时，"),s("code",[t._v("JSON.stringify()")]),t._v(" 将会将它们序列化为 "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v("、任意的函数以及 "),s("code",[t._v("symbol")]),t._v(" 被 "),s("code",[t._v("JSON.stringify()")]),t._v(" 作为单独的值进行序列化时都会返回 "),s("code",[t._v("undefined")])])]),t._v(" "),s("p",[t._v("二、"),s("strong",[t._v("非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。")])]),t._v(" "),s("p",[t._v("三、"),s("strong",[t._v("转换值如果有 "),s("code",[t._v("toJSON()")]),t._v(" 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。")])]),t._v(" "),s("p",[t._v("四、"),s("strong",[s("code",[t._v("JSON.stringify()")]),t._v(" 将会正常序列化 "),s("code",[t._v("Date")]),t._v(" 的值。")])]),t._v(" "),s("p",[t._v("五、"),s("strong",[s("code",[t._v("NaN")]),t._v(" 和 "),s("code",[t._v("Infinity")]),t._v(" 格式的数值及 "),s("code",[t._v("null")]),t._v(" 都会被当做 "),s("code",[t._v("null")]),t._v("。")])]),t._v(" "),s("p",[t._v("六、"),s("strong",[t._v("布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。")])]),t._v(" "),s("p",[t._v("七、"),s("strong",[t._v("其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。")])]),t._v(" "),s("p",[t._v("八、"),s("strong",[t._v("对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。")])]),t._v(" "),s("p",[t._v("九、"),s("strong",[t._v("所有以 "),s("code",[t._v("symbol")]),t._v(" 为属性键的属性都会被完全忽略掉，即便 "),s("code",[t._v("replacer")]),t._v(" 参数中强制指定包含了它们。")])]),t._v(" "),s("h3",{attrs:{id:"第二个参数和第三个参数-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二个参数和第三个参数-2"}},[t._v("#")]),t._v(" 第二个参数和第三个参数")]),t._v(" "),s("h4",{attrs:{id:"第二个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二个参数"}},[t._v("#")]),t._v(" 第二个参数：")]),t._v(" "),s("ul",[s("li",[t._v("作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 "),s("code",[t._v("map")]),t._v("、"),s("code",[t._v("filter")]),t._v(" 等方法的回调函数，对每一个属性值都会执行一次该函数（期间我们还简单实现过一个 "),s("code",[t._v("map")]),t._v(" 函数）。")]),t._v(" "),s("li",[t._v("如果 "),s("code",[t._v("replacer")]),t._v(" 是一个数组，数组的值代表将被序列化成 JSON 字符串的属性名。")])]),t._v(" "),s("h4",{attrs:{id:"第三个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三个参数"}},[t._v("#")]),t._v(" 第三个参数：")]),t._v(" "),s("ul",[s("li",[t._v("如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）。")]),t._v(" "),s("li",[t._v("如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。")])]),t._v(" "),s("h4",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意：")]),t._v(" "),s("p",[t._v("第一个例子的方案三，有小伙伴提示说这个方案会有风险，确实是这样的("),s("strong",[t._v("可能会把对象的值给替换掉")]),t._v(")。大家慎用吧，大部分情况下这样使用是 ok 的。小伙伴们提供的第四种方案还是很不错的：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todayILearn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'今天学习 JSON.stringify()，我很开心！'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("created_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("updated_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mapObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("created_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"createdAt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("updated_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"updatedAt"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEntries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todayILearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mapObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id: 1,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  content: '今天学习 JSON.stringify()，我很开心！',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://github.com/NieZhuZhu/Blog/issues/2",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试官连环追问：数组拍平（扁平化） flat 方法实现"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports},583:function(t,s,a){t.exports=a.p+"assets/img/70389976-5a454500-1a01-11ea-81bd-8c12208fbd0e.c9f4ec41.png"}}]);