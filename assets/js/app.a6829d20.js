(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,a,i=e[0],l=e[1],c=e[2],d=0,u=[];d<i.length;d++)a=i[d],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&u.push(o[a][0]),o[a]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(p&&p(e);u.length;)u.shift()();return s.push.apply(s,c||[]),t()}function t(){for(var n,e=0;e<s.length;e++){for(var t=s[e],r=!0,i=1;i<t.length;i++){var l=t[i];0!==o[l]&&(r=!1)}r&&(s.splice(e--,1),n=a(a.s=t[0]))}return n}var r={},o={8:0},s=[];function a(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var s,i=document.createElement("script");i.charset="utf-8",i.timeout=120,a.nc&&i.setAttribute("nonce",a.nc),i.src=function(n){return a.p+"assets/js/"+({9:"vendors~docsearch"}[n]||n)+"."+{1:"031e3fb1",2:"c6f6bbdf",3:"8c7f31fa",4:"44fad7b2",5:"c6a5ec4b",6:"e66f5f3d",7:"786316ca",9:"9b71a2c0",10:"629e9790",11:"7e2f7b1e",12:"6a9a2daa",13:"560c2fb2",14:"4039c63f",15:"3ec0e68c",16:"67bb4dec",17:"6769eb7b",18:"ffa3f118",19:"607b939b",20:"ebde79a9",21:"833b05f6",22:"c8203619",23:"155c8309",24:"ccc684c2",25:"e87bd426",26:"396f3d8f",27:"3639202c",28:"b7dfa493",29:"6673cf67",30:"6a9d5827",31:"9d1975fd",32:"14bfa4f7",33:"65c76d3d",34:"1af31252",35:"5d8eb4d7",36:"3043f3fc",37:"dda48f4a",38:"380aadb5",39:"cbc06d4a",40:"76d129ad",41:"dbe0566a",42:"e8821523",43:"8f5424ac",44:"f944e783",45:"37a57bfa",46:"cb964a69",47:"fe11e50c",48:"41e5c9f8",49:"475e7c89",50:"205e9684",51:"afa92b17",52:"678d9425",53:"8e6af8b0",54:"fa21a995",55:"8de99353",56:"5c911eb8",57:"6fa51139",58:"5af97279",59:"f492f72f",60:"b3c0d8c2",61:"83321bb1",62:"43c8a28a",63:"eb393235",64:"05124f80",65:"c568f18c",66:"b50b8dae",67:"944623ca",68:"d36c0ab5",69:"54bd662f",70:"5822ff15",71:"5baa035e",72:"3dee8012",73:"d8861252",74:"188f3459",75:"3c65e610",76:"0321700b",77:"2ca36acc",78:"9bca4c9b",79:"1b4a3861",80:"a5de17a9",81:"bc32cc65",82:"11f086a1",83:"421bb5b6",84:"710ef3ef",85:"13481e6a",86:"e7dcda53",87:"a38b8097",88:"fcea05c1",89:"5863adfb",90:"d8c64691",91:"ff5ed3d3",92:"b89e7373",93:"3470fdbb",94:"a7687e1e",95:"31c334f5",96:"5812e8b9",97:"2d481614",98:"8234dae3",99:"1a9eeb23",100:"111457b5",101:"8f965f3a",102:"b62c7fcf",103:"e2fb37f9",104:"fa0a28ba",105:"5a6f6581",106:"94398a3b",107:"7edc5477",108:"d02c634d",109:"4c1952f5",110:"d6715873",111:"8c569f62",112:"345209f6",113:"877d77d0",114:"f658e47b",115:"930fbbe1",116:"f36a52b5",117:"13c7e361",118:"927c089b",119:"68be0584",120:"487f02d0",121:"05f9f0c0",122:"e8ca210b",123:"bb593699",124:"6c184347",125:"f006ed21",126:"00aa14a3",127:"a51703d0",128:"7ca07cf7",129:"29c6e8fb",130:"43dd35e1",131:"ff3cc6fb",132:"68741984",133:"c872ced1",134:"aff725ce",135:"f2403b11",136:"c56d51d2",137:"b2780369",138:"023046b4",139:"ea677ee6",140:"1759c3b5",141:"83e98756",142:"f79eb742",143:"11c7da56",144:"7769d9e5",145:"c6e6aca1",146:"05308149",147:"3195c333",148:"31b93e4e",149:"d49e3b90",150:"d5827001",151:"1b2b460a",152:"c0ed2e4f",153:"78ef82be",154:"ed07804f",155:"4b04ea88",156:"0f4b64a5",157:"4de30b65",158:"7683ba53",159:"95db5b7b",160:"ae9187e4",161:"bb7a7044",162:"61f03dbd",163:"68b00930",164:"4189e4d7",165:"e48fc2e0",166:"fba7c80d",167:"74243efb",168:"d19f3e83",169:"960780a6",170:"2100065c",171:"91c03864",172:"c22e4ab5",173:"64482b5f",174:"8161668d",175:"0b35f2d9",176:"11ea6780",177:"0ad34c9f",178:"c48c8d03",179:"9515f9d5",180:"ec40be92",181:"7602bc3a",182:"027b58fa",183:"e58ef424",184:"9aec3738",185:"1c7385d6",186:"f5afd25d",187:"b33e9f2b",188:"c85256ef",189:"a77ea47a",190:"b42be4e7",191:"a99c5c4c",192:"3281c848",193:"69e2a96f",194:"cae16f9f",195:"2d1902dc",196:"6833d0d2",197:"9975b14d",198:"34970453",199:"14af6ef8",200:"540b0cb6",201:"2dfe1909",202:"fb9a53c2",203:"23acda3a",204:"2460513d",205:"9121987a",206:"c6201860",207:"16b5d09d",208:"c132c5c0",209:"8f030de6",210:"7eabeeee",211:"0bce4ec2",212:"8d7a7291",213:"4d92e762",214:"7cbb709a",215:"6aea3770",216:"8c6934ff",217:"3ba1d497",218:"07af10bd",219:"f02a0355",220:"f6795422",221:"dc448b84",222:"ecf1130a",223:"eb99c95f",224:"be84402b",225:"8ef8eb10",226:"d9089264",227:"b8078582",228:"e197a5ae",229:"140118d7",230:"05011c74",231:"51f07d8a",232:"4268a762",233:"1329a497",234:"ef3d32cc",235:"77713277",236:"04b26e26",237:"36d7ce18",238:"ba2e0190",239:"c64d084e",240:"03e8edf5",241:"76f497b0",242:"74129299",243:"609b0698",244:"4c2b911c",245:"f41c383f",246:"4be127cf",247:"7aa90c93",248:"a9dccc64",249:"0fbc8b69",250:"2b5f3532",251:"0fcd1bab",252:"c6e1131c",253:"145d75ba",254:"591d0c9b",255:"c746cdef",256:"7ffeeff7",257:"70390066",258:"2c9e5ce5",259:"e863ef3c",260:"fcdc0e0c",261:"d6d7b14e",262:"47561de7",263:"317cd796",264:"3e2519a2",265:"64e9bc9d",266:"37dd586c",267:"ff759d29",268:"58c96a1f",269:"d6b90603",270:"341d1a4c"}[n]+".js"}(n);var l=new Error;s=function(e){i.onerror=i.onload=null,clearTimeout(c);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+s+")",l.name="ChunkLoadError",l.type=r,l.request=s,t[1](l)}o[n]=void 0}};var c=setTimeout((function(){s({type:"timeout",target:i})}),12e4);i.onerror=i.onload=s,document.head.appendChild(i)}return Promise.all(e)},a.m=n,a.c=r,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)a.d(t,r,function(e){return n[e]}.bind(null,r));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="/",a.oe=function(n){throw console.error(n),n};var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=e,i=i.slice();for(var c=0;c<i.length;c++)e(i[c]);var p=l;s.push([131,0]),t()}([function(n,e,t){"use strict";t.d(e,"d",(function(){return y})),t.d(e,"c",(function(){return v})),t.d(e,"b",(function(){return x})),t.d(e,"e",(function(){return w})),t.d(e,"a",(function(){return E})),t.d(e,"f",(function(){return k})),t.d(e,"g",(function(){return z})),t.d(e,"h",(function(){return S}));t(31),t(157);var r=t(1),o={"components/AlgoliaSearchBox":()=>Promise.all([t.e(0),t.e(42)]).then(t.bind(null,1319)),"components/DropdownLink":()=>Promise.all([t.e(0),t.e(43)]).then(t.bind(null,338)),"components/DropdownTransition":()=>Promise.all([t.e(0),t.e(105)]).then(t.bind(null,325)),"components/Home":()=>Promise.all([t.e(0),t.e(70)]).then(t.bind(null,379)),"components/Navbar":()=>Promise.all([t.e(0),t.e(1),t.e(54)]).then(t.bind(null,380)),"components/NavLink":()=>t.e(135).then(t.bind(null,324)),"components/NavLinks":()=>Promise.all([t.e(0),t.e(31)]).then(t.bind(null,339)),"components/Page":()=>Promise.all([t.e(0),t.e(32)]).then(t.bind(null,381)),"components/PageEdit":()=>Promise.all([t.e(0),t.e(71)]).then(t.bind(null,353)),"components/PageNav":()=>Promise.all([t.e(0),t.e(63)]).then(t.bind(null,354)),"components/Sidebar":()=>Promise.all([t.e(0),t.e(19)]).then(t.bind(null,382)),"components/SidebarButton":()=>Promise.all([t.e(0),t.e(106)]).then(t.bind(null,365)),"components/SidebarGroup":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,352)),"components/SidebarLink":()=>Promise.all([t.e(0),t.e(87)]).then(t.bind(null,341)),"components/SidebarLinks":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,340)),"global-components/Badge":()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,1327)),"global-components/CodeBlock":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,1320)),"global-components/CodeGroup":()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,1321)),"layouts/404":()=>t.e(7).then(t.bind(null,1322)),"layouts/Layout":()=>Promise.all([t.e(0),t.e(1),t.e(2)]).then(t.bind(null,1323)),NotFound:()=>t.e(7).then(t.bind(null,1322)),Layout:()=>Promise.all([t.e(0),t.e(1),t.e(2)]).then(t.bind(null,1323))},s={"v-e6b7fcfa":()=>t.e(44).then(t.bind(null,1328)),"v-9bb2069c":()=>t.e(165).then(t.bind(null,1329)),"v-0699efe9":()=>t.e(164).then(t.bind(null,1324)),"v-21482dfc":()=>t.e(166).then(t.bind(null,1330)),"v-2f2cd45d":()=>t.e(173).then(t.bind(null,1331)),"v-66b8cf2a":()=>t.e(174).then(t.bind(null,1332)),"v-5d14cacd":()=>t.e(108).then(t.bind(null,1333)),"v-0fecc99c":()=>t.e(21).then(t.bind(null,1334)),"v-b8a32b9c":()=>t.e(178).then(t.bind(null,1335)),"v-2a712b8a":()=>t.e(176).then(t.bind(null,1336)),"v-56a9f4d0":()=>t.e(177).then(t.bind(null,1337)),"v-c27a070e":()=>t.e(26).then(t.bind(null,1338)),"v-ba0a6e80":()=>t.e(171).then(t.bind(null,1339)),"v-f85073a0":()=>t.e(139).then(t.bind(null,1340)),"v-8d895560":()=>t.e(172).then(t.bind(null,1341)),"v-ab742efa":()=>t.e(14).then(t.bind(null,1342)),"v-6606fa4b":()=>t.e(170).then(t.bind(null,1343)),"v-39a0cd65":()=>t.e(17).then(t.bind(null,1344)),"v-a4678b48":()=>t.e(45).then(t.bind(null,1345)),"v-06dcd69c":()=>t.e(109).then(t.bind(null,1346)),"v-732234fc":()=>t.e(168).then(t.bind(null,1347)),"v-99f7038c":()=>t.e(138).then(t.bind(null,1348)),"v-7447f441":()=>t.e(110).then(t.bind(null,1325)),"v-ff6c6c1c":()=>t.e(175).then(t.bind(null,1349)),"v-34b82956":()=>t.e(169).then(t.bind(null,1350)),"v-0efc73ec":()=>t.e(46).then(t.bind(null,1351)),"v-2580c912":()=>t.e(20).then(t.bind(null,1352)),"v-93de39aa":()=>t.e(72).then(t.bind(null,1353)),"v-fb163760":()=>t.e(111).then(t.bind(null,1354)),"v-66f72c43":()=>t.e(48).then(t.bind(null,1355)),"v-11b58af6":()=>t.e(47).then(t.bind(null,1356)),"v-4e952ebc":()=>t.e(64).then(t.bind(null,1357)),"v-3ec14aeb":()=>t.e(112).then(t.bind(null,1358)),"v-5dc07559":()=>t.e(179).then(t.bind(null,1359)),"v-2dc2bd7c":()=>t.e(88).then(t.bind(null,1360)),"v-17a63e16":()=>t.e(137).then(t.bind(null,1361)),"v-f216b9a4":()=>t.e(136).then(t.bind(null,1362)),"v-37885679":()=>t.e(16).then(t.bind(null,1363)),"v-3151af92":()=>t.e(167).then(t.bind(null,1364)),"v-0a604b4e":()=>t.e(65).then(t.bind(null,1365)),"v-49aea67d":()=>t.e(90).then(t.bind(null,1366)),"v-40755a2d":()=>t.e(180).then(t.bind(null,1367)),"v-edd31fdc":()=>t.e(182).then(t.bind(null,1368)),"v-1af0953b":()=>t.e(181).then(t.bind(null,1369)),"v-1f309dc7":()=>t.e(183).then(t.bind(null,1370)),"v-de61d7e0":()=>t.e(23).then(t.bind(null,1371)),"v-df26d82c":()=>t.e(184).then(t.bind(null,1372)),"v-db569cb2":()=>t.e(38).then(t.bind(null,1373)),"v-4989ceee":()=>t.e(89).then(t.bind(null,1374)),"v-127c4432":()=>t.e(113).then(t.bind(null,1375)),"v-1f85e204":()=>t.e(141).then(t.bind(null,1376)),"v-6ac8ccd2":()=>t.e(56).then(t.bind(null,1377)),"v-379be5aa":()=>t.e(185).then(t.bind(null,1378)),"v-83ed7e72":()=>t.e(55).then(t.bind(null,1379)),"v-1944b1b2":()=>t.e(33).then(t.bind(null,1380)),"v-085160c4":()=>t.e(140).then(t.bind(null,1381)),"v-ad53b70e":()=>t.e(91).then(t.bind(null,1382)),"v-7925df42":()=>t.e(73).then(t.bind(null,1383)),"v-8a58cf10":()=>t.e(66).then(t.bind(null,1384)),"v-790a347f":()=>t.e(187).then(t.bind(null,1385)),"v-29c3dad9":()=>t.e(92).then(t.bind(null,1386)),"v-32128328":()=>t.e(188).then(t.bind(null,1387)),"v-0d238d66":()=>t.e(190).then(t.bind(null,1388)),"v-d5dff92c":()=>t.e(189).then(t.bind(null,1389)),"v-222c4871":()=>t.e(192).then(t.bind(null,1390)),"v-05c21aa2":()=>t.e(191).then(t.bind(null,1391)),"v-ad01f9a8":()=>t.e(186).then(t.bind(null,1392)),"v-17b8acf5":()=>t.e(193).then(t.bind(null,1393)),"v-1e0b223e":()=>t.e(194).then(t.bind(null,1394)),"v-3374ee87":()=>t.e(195).then(t.bind(null,1395)),"v-9b9ae1c6":()=>t.e(93).then(t.bind(null,1396)),"v-6b64c32f":()=>t.e(57).then(t.bind(null,1397)),"v-5a84ce64":()=>t.e(29).then(t.bind(null,1398)),"v-8d39bce0":()=>t.e(196).then(t.bind(null,1399)),"v-560efacf":()=>t.e(115).then(t.bind(null,1400)),"v-3a157f1b":()=>t.e(116).then(t.bind(null,1401)),"v-2c32d910":()=>t.e(94).then(t.bind(null,1402)),"v-62a025b6":()=>t.e(95).then(t.bind(null,1403)),"v-7680e5a4":()=>t.e(142).then(t.bind(null,1404)),"v-480a0c5d":()=>t.e(18).then(t.bind(null,1405)),"v-23e5c39c":()=>t.e(39).then(t.bind(null,1406)),"v-51c2e62a":()=>t.e(40).then(t.bind(null,1407)),"v-7f68a142":()=>t.e(197).then(t.bind(null,1408)),"v-30ed5bb5":()=>t.e(198).then(t.bind(null,1409)),"v-069b1591":()=>t.e(74).then(t.bind(null,1410)),"v-457e115b":()=>t.e(117).then(t.bind(null,1411)),"v-218406de":()=>t.e(199).then(t.bind(null,1412)),"v-113afd78":()=>t.e(58).then(t.bind(null,1413)),"v-57f0ce7c":()=>t.e(201).then(t.bind(null,1414)),"v-4bb9b0a1":()=>t.e(200).then(t.bind(null,1415)),"v-0df701a2":()=>t.e(143).then(t.bind(null,1416)),"v-157ffd50":()=>t.e(118).then(t.bind(null,1417)),"v-ea0fa4a6":()=>t.e(119).then(t.bind(null,1418)),"v-3cde78c8":()=>t.e(27).then(t.bind(null,1419)),"v-2bdc633a":()=>t.e(202).then(t.bind(null,1420)),"v-22537c84":()=>t.e(144).then(t.bind(null,1421)),"v-2a02e242":()=>t.e(59).then(t.bind(null,1422)),"v-7c7f3f8f":()=>t.e(203).then(t.bind(null,1423)),"v-22146f5c":()=>t.e(75).then(t.bind(null,1424)),"v-1b96b5c0":()=>t.e(76).then(t.bind(null,1425)),"v-8e58323a":()=>t.e(49).then(t.bind(null,1426)),"v-189fdcef":()=>t.e(50).then(t.bind(null,1427)),"v-5d5f3c5b":()=>t.e(204).then(t.bind(null,1428)),"v-69a18e3e":()=>t.e(96).then(t.bind(null,1429)),"v-67381111":()=>t.e(205).then(t.bind(null,1430)),"v-47af8ca6":()=>t.e(97).then(t.bind(null,1431)),"v-17345a4c":()=>t.e(51).then(t.bind(null,1432)),"v-c92ce314":()=>t.e(145).then(t.bind(null,1433)),"v-29c24882":()=>t.e(41).then(t.bind(null,1434)),"v-64bc62a6":()=>t.e(120).then(t.bind(null,1435)),"v-2f7dcd14":()=>t.e(206).then(t.bind(null,1436)),"v-20897ae6":()=>t.e(146).then(t.bind(null,1437)),"v-0486f016":()=>t.e(77).then(t.bind(null,1438)),"v-7d251b33":()=>t.e(121).then(t.bind(null,1439)),"v-e5568d98":()=>t.e(207).then(t.bind(null,1440)),"v-4ab2bff2":()=>t.e(208).then(t.bind(null,1441)),"v-76707720":()=>t.e(211).then(t.bind(null,1442)),"v-00ab95a5":()=>t.e(147).then(t.bind(null,1443)),"v-6d876532":()=>t.e(212).then(t.bind(null,1444)),"v-0810c6b0":()=>t.e(209).then(t.bind(null,1445)),"v-58912756":()=>t.e(210).then(t.bind(null,1446)),"v-14fdb756":()=>t.e(34).then(t.bind(null,1447)),"v-cb48c812":()=>t.e(123).then(t.bind(null,1448)),"v-1237f2f8":()=>t.e(122).then(t.bind(null,1449)),"v-41f90cdf":()=>t.e(214).then(t.bind(null,1450)),"v-6c210082":()=>t.e(215).then(t.bind(null,1451)),"v-f50e4944":()=>t.e(60).then(t.bind(null,1452)),"v-39c71530":()=>t.e(114).then(t.bind(null,1453)),"v-7bc421bc":()=>t.e(213).then(t.bind(null,1454)),"v-619c4001":()=>t.e(217).then(t.bind(null,1455)),"v-5424c0a9":()=>t.e(218).then(t.bind(null,1456)),"v-0315a902":()=>t.e(220).then(t.bind(null,1457)),"v-8bf509d6":()=>t.e(98).then(t.bind(null,1458)),"v-014769c7":()=>t.e(219).then(t.bind(null,1459)),"v-8d9b27fe":()=>t.e(216).then(t.bind(null,1460)),"v-15d56ef3":()=>t.e(124).then(t.bind(null,1461)),"v-0c4470f3":()=>t.e(99).then(t.bind(null,1462)),"v-45319ca0":()=>t.e(224).then(t.bind(null,1463)),"v-52c6f5e5":()=>t.e(222).then(t.bind(null,1464)),"v-c18b606e":()=>t.e(125).then(t.bind(null,1465)),"v-0a482f9e":()=>t.e(223).then(t.bind(null,1466)),"v-10a3b384":()=>t.e(225).then(t.bind(null,1467)),"v-3cc96e1e":()=>t.e(226).then(t.bind(null,1468)),"v-fc369404":()=>t.e(227).then(t.bind(null,1469)),"v-0c1b45be":()=>t.e(229).then(t.bind(null,1470)),"v-72000444":()=>t.e(228).then(t.bind(null,1471)),"v-51368d9e":()=>t.e(230).then(t.bind(null,1472)),"v-f561d168":()=>t.e(232).then(t.bind(null,1473)),"v-8dc82c38":()=>t.e(22).then(t.bind(null,1474)),"v-b1fee73a":()=>t.e(126).then(t.bind(null,1475)),"v-07c14a84":()=>t.e(231).then(t.bind(null,1476)),"v-2e5fd3cf":()=>t.e(13).then(t.bind(null,1477)),"v-926841e0":()=>t.e(11).then(t.bind(null,1478)),"v-362d4c9a":()=>t.e(234).then(t.bind(null,1479)),"v-58bed81c":()=>t.e(235).then(t.bind(null,1480)),"v-07de2942":()=>t.e(148).then(t.bind(null,1481)),"v-2a96af12":()=>t.e(236).then(t.bind(null,1482)),"v-6b3123eb":()=>t.e(149).then(t.bind(null,1483)),"v-097816ab":()=>t.e(238).then(t.bind(null,1484)),"v-a3565de6":()=>t.e(233).then(t.bind(null,1485)),"v-908a0e08":()=>t.e(237).then(t.bind(null,1486)),"v-6b6c3293":()=>t.e(150).then(t.bind(null,1487)),"v-b900f076":()=>t.e(239).then(t.bind(null,1488)),"v-5f28171f":()=>t.e(61).then(t.bind(null,1489)),"v-108860d2":()=>t.e(100).then(t.bind(null,1490)),"v-cfef4fb8":()=>t.e(240).then(t.bind(null,1491)),"v-2c0ab6d6":()=>t.e(78).then(t.bind(null,1492)),"v-078e449c":()=>t.e(101).then(t.bind(null,1493)),"v-0d896b54":()=>t.e(79).then(t.bind(null,1494)),"v-31c11330":()=>t.e(12).then(t.bind(null,1495)),"v-ce96bf66":()=>t.e(241).then(t.bind(null,1496)),"v-737ebd86":()=>t.e(127).then(t.bind(null,1497)),"v-00a43673":()=>t.e(151).then(t.bind(null,1498)),"v-7d25a7c4":()=>t.e(81).then(t.bind(null,1499)),"v-64302dce":()=>t.e(80).then(t.bind(null,1500)),"v-fa92aa00":()=>t.e(25).then(t.bind(null,1501)),"v-823483c8":()=>t.e(28).then(t.bind(null,1502)),"v-44b004af":()=>t.e(30).then(t.bind(null,1503)),"v-16519c4b":()=>t.e(242).then(t.bind(null,1504)),"v-095be634":()=>t.e(82).then(t.bind(null,1505)),"v-b3d34a96":()=>t.e(243).then(t.bind(null,1506)),"v-40ce9bc1":()=>t.e(10).then(t.bind(null,1507)),"v-78c67846":()=>t.e(62).then(t.bind(null,1508)),"v-17596cd2":()=>t.e(35).then(t.bind(null,1509)),"v-3e878b94":()=>t.e(245).then(t.bind(null,1510)),"v-106e935c":()=>t.e(246).then(t.bind(null,1511)),"v-8001c0ce":()=>t.e(36).then(t.bind(null,1512)),"v-351d81a2":()=>t.e(244).then(t.bind(null,1513)),"v-2e4bb12b":()=>t.e(221).then(t.bind(null,1514)),"v-8d1ed816":()=>t.e(249).then(t.bind(null,1515)),"v-267387f4":()=>t.e(248).then(t.bind(null,1516)),"v-aa79f4da":()=>t.e(67).then(t.bind(null,1517)),"v-46446437":()=>t.e(52).then(t.bind(null,1518)),"v-41855c61":()=>t.e(247).then(t.bind(null,1519)),"v-60fd296e":()=>t.e(128).then(t.bind(null,1520)),"v-47349a78":()=>t.e(102).then(t.bind(null,1521)),"v-17ec0b3e":()=>t.e(250).then(t.bind(null,1522)),"v-8f1f1f98":()=>t.e(130).then(t.bind(null,1523)),"v-21c7e80e":()=>t.e(131).then(t.bind(null,1524)),"v-827c4fe8":()=>t.e(251).then(t.bind(null,1525)),"v-132ca422":()=>t.e(129).then(t.bind(null,1526)),"v-6e0ede2e":()=>t.e(152).then(t.bind(null,1527)),"v-3d269228":()=>t.e(153).then(t.bind(null,1528)),"v-3ceb97d9":()=>t.e(37).then(t.bind(null,1529)),"v-93650ac0":()=>t.e(252).then(t.bind(null,1530)),"v-b476cf96":()=>t.e(154).then(t.bind(null,1531)),"v-226822bd":()=>t.e(24).then(t.bind(null,1532)),"v-7ef0dd3a":()=>t.e(255).then(t.bind(null,1533)),"v-50af7204":()=>t.e(155).then(t.bind(null,1534)),"v-150ab307":()=>t.e(256).then(t.bind(null,1535)),"v-4affc9b6":()=>t.e(253).then(t.bind(null,1536)),"v-549e5e1b":()=>t.e(15).then(t.bind(null,1537)),"v-ec77969a":()=>t.e(254).then(t.bind(null,1538)),"v-63b6c8e0":()=>t.e(83).then(t.bind(null,1539)),"v-e4fc2ace":()=>t.e(257).then(t.bind(null,1540)),"v-4aded80a":()=>t.e(258).then(t.bind(null,1541)),"v-0030f45e":()=>t.e(157).then(t.bind(null,1542)),"v-d8dd6670":()=>t.e(159).then(t.bind(null,1543)),"v-3570fadb":()=>Promise.all([t.e(0),t.e(132)]).then(t.bind(null,1544)),"v-41d3c199":()=>t.e(259).then(t.bind(null,1545)),"v-0d21c6f4":()=>t.e(68).then(t.bind(null,1546)),"v-f27a6fa4":()=>t.e(69).then(t.bind(null,1547)),"v-7d6049e6":()=>t.e(260).then(t.bind(null,1548)),"v-21143feb":()=>t.e(156).then(t.bind(null,1549)),"v-c282de34":()=>t.e(84).then(t.bind(null,1550)),"v-b8bdb958":()=>t.e(158).then(t.bind(null,1551)),"v-6b53d6b4":()=>t.e(53).then(t.bind(null,1552)),"v-46ed7c1c":()=>t.e(133).then(t.bind(null,1553)),"v-070625d5":()=>t.e(103).then(t.bind(null,1554)),"v-29dea1fd":()=>t.e(134).then(t.bind(null,1555)),"v-aeb113a2":()=>t.e(261).then(t.bind(null,1556)),"v-1b9042f4":()=>t.e(86).then(t.bind(null,1557)),"v-df51b6ae":()=>t.e(160).then(t.bind(null,1558)),"v-49136d1b":()=>t.e(162).then(t.bind(null,1559)),"v-54089e5c":()=>t.e(85).then(t.bind(null,1560)),"v-7aa4809c":()=>t.e(161).then(t.bind(null,1561)),"v-66068ada":()=>t.e(264).then(t.bind(null,1562)),"v-5dda9bbf":()=>t.e(262).then(t.bind(null,1563)),"v-08b9d524":()=>t.e(265).then(t.bind(null,1564)),"v-07918935":()=>t.e(107).then(t.bind(null,1565)),"v-399fa958":()=>t.e(267).then(t.bind(null,1566)),"v-71f9a1aa":()=>t.e(263).then(t.bind(null,1567)),"v-f324a4b4":()=>t.e(266).then(t.bind(null,1568))};function a(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const i=/-(\w)/g,l=a(n=>n.replace(i,(n,e)=>e?e.toUpperCase():"")),c=/\B([A-Z])/g,p=a(n=>n.replace(c,"-$1").toLowerCase()),d=a(n=>n.charAt(0).toUpperCase()+n.slice(1));function u(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(d(l(e))):n(d(e))||n(p(e))}const m=Object.assign({},o,s),h=n=>m[n],g=n=>s[n],f=n=>o[n],b=n=>r.a.component(n);function y(n){return u(g,n)}function v(n){return u(f,n)}function x(n){return u(h,n)}function w(n){return u(b,n)}function E(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!w(n)&&x(n)){const e=await x(n)();r.a.component(n,e.default)}}))}function k(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}function z(n,e){const{$localePath:t}=n;return"object"==typeof e&&e[t]?e[t]:e}function S(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}},function(n,e,t){"use strict";t.d(e,"a",(function(){return Zt}));
/*!
 * Vue.js v2.7.15
 * (c) 2014-2023 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),o=Array.isArray;function s(n){return null==n}function a(n){return null!=n}function i(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function p(n){return null!==n&&"object"==typeof n}var d=Object.prototype.toString;function u(n){return"[object Object]"===d.call(n)}function m(n){return"[object RegExp]"===d.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function g(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||u(n)&&n.toString===d?JSON.stringify(n,null,2):String(n)}function b(n){var e=parseFloat(n);return isNaN(e)?n:e}function y(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}y("slot,component",!0);var v=y("key,ref,slot,slot-scope,is");function x(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var w=Object.prototype.hasOwnProperty;function E(n,e){return w.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var z=/-(\w)/g,S=k((function(n){return n.replace(z,(function(n,e){return e?e.toUpperCase():""}))})),A=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),B=/\B([A-Z])/g,j=k((function(n){return n.replace(B,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function _(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function T(n,e){for(var t in e)n[t]=e[t];return n}function F(n){for(var e={},t=0;t<n.length;t++)n[t]&&T(e,n[t]);return e}function I(n,e,t){}var D=function(n,e,t){return!1},P=function(n){return n};function L(n,e){if(n===e)return!0;var t=p(n),r=p(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),s=Array.isArray(e);if(o&&s)return n.length===e.length&&n.every((function(n,t){return L(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||s)return!1;var a=Object.keys(n),i=Object.keys(e);return a.length===i.length&&a.every((function(t){return L(n[t],e[t])}))}catch(n){return!1}}function O(n,e){for(var t=0;t<n.length;t++)if(L(n[t],e))return t;return-1}function M(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function $(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var R=["component","directive","filter"],q=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],N={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:D,isReservedAttr:D,isUnknownElement:D,getTagNamespace:I,parsePlatformTagName:P,mustUseProp:D,async:!0,_lifecycleHooks:q},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function U(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function Y(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var Z=new RegExp("[^".concat(H.source,".$_\\d]"));var J="__proto__"in{},X="undefined"!=typeof window,W=X&&window.navigator.userAgent.toLowerCase(),G=W&&/msie|trident/.test(W),Q=W&&W.indexOf("msie 9.0")>0,K=W&&W.indexOf("edge/")>0;W&&W.indexOf("android");var V=W&&/iphone|ipad|ipod|ios/.test(W);W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W);var nn,en=W&&W.match(/firefox\/(\d+)/),tn={}.watch,rn=!1;if(X)try{var on={};Object.defineProperty(on,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var sn=function(){return void 0===nn&&(nn=!X&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},an=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,pn="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);cn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=null;function un(n){void 0===n&&(n=null),n||dn&&dn._scope.off(),dn=n,n&&n._scope.on()}var mn=function(){function n(n,e,t,r,o,s,a,i){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=s,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=i,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),hn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function gn(n){return new mn(void 0,void 0,void 0,String(n))}function fn(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var bn=0,yn=[],vn=function(){function n(){this._pending=!1,this.id=bn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,yn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();vn.target=null;var xn=[];function wn(n){xn.push(n),vn.target=n}function En(){xn.pop(),vn.target=xn[xn.length-1]}var kn=Array.prototype,zn=Object.create(kn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=kn[n];Y(zn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o,s=e.apply(this,t),a=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&a.observeArray(o),a.dep.notify(),s}))}));var Sn=Object.getOwnPropertyNames(zn),An={},Bn=!0;function jn(n){Bn=n}var Cn={notify:I,depend:I,addSub:I,removeSub:I},_n=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?Cn:new vn,this.vmCount=0,Y(n,"__ob__",this),o(n)){if(!t)if(J)n.__proto__=zn;else for(var r=0,s=Sn.length;r<s;r++){Y(n,i=Sn[r],zn[i])}e||this.observeArray(n)}else{var a=Object.keys(n);for(r=0;r<a.length;r++){var i;Fn(n,i=a[r],An,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Tn(n[e],!1,this.mock)},n}();function Tn(n,e,t){return n&&E(n,"__ob__")&&n.__ob__ instanceof _n?n.__ob__:!Bn||!t&&sn()||!o(n)&&!u(n)||!Object.isExtensible(n)||n.__v_skip||$n(n)||n instanceof mn?void 0:new _n(n,e,t)}function Fn(n,e,t,r,s,a){var i=new vn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var c=l&&l.get,p=l&&l.set;c&&!p||t!==An&&2!==arguments.length||(t=n[e]);var d=!s&&Tn(t,!1,a);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return vn.target&&(i.depend(),d&&(d.dep.depend(),o(e)&&Pn(e))),$n(e)&&!s?e.value:e},set:function(e){var r=c?c.call(n):t;if($(r,e)){if(p)p.call(n,e);else{if(c)return;if(!s&&$n(r)&&!$n(e))return void(r.value=e);t=e}d=!s&&Tn(e,!1,a),i.notify()}}}),i}}function In(n,e,t){if(!Mn(n)){var r=n.__ob__;return o(n)&&h(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&Tn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(Fn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Dn(n,e){if(o(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Mn(n)||E(n,e)&&(delete n[e],t&&t.dep.notify())}}function Pn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),o(e)&&Pn(e)}function Ln(n){return On(n,!0),Y(n,"__v_isShallow",!0),n}function On(n,e){if(!Mn(n)){Tn(n,e,sn());0}}function Mn(n){return!(!n||!n.__v_isReadonly)}function $n(n){return!(!n||!0!==n.__v_isRef)}function Rn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if($n(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];$n(r)&&!$n(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var qn;var Nn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=qn,!n&&qn&&(this.index=(qn.scopes||(qn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=qn;try{return qn=this,n()}finally{qn=e}}else 0},n.prototype.on=function(){qn=this},n.prototype.off=function(){qn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Hn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Un=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Yn(n,e){function t(){var n=t.fns;if(!o(n))return Be(n,null,arguments,e,"v-on handler");for(var r=n.slice(),s=0;s<r.length;s++)Be(r[s],null,arguments,e,"v-on handler")}return t.fns=n,t}function Zn(n,e,t,r,o,a){var l,c,p,d;for(l in n)c=n[l],p=e[l],d=Un(l),s(c)||(s(p)?(s(c.fns)&&(c=n[l]=Yn(c,a)),i(d.once)&&(c=n[l]=o(d.name,c,d.capture)),t(d.name,c,d.capture,d.passive,d.params)):c!==p&&(p.fns=c,n[l]=p));for(l in e)s(n[l])&&r((d=Un(l)).name,e[l],d.capture)}function Jn(n,e,t){var r;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function l(){t.apply(this,arguments),x(r.fns,l)}s(o)?r=Yn([l]):a(o.fns)&&i(o.merged)?(r=o).fns.push(l):r=Yn([o,l]),r.merged=!0,n[e]=r}function Xn(n,e,t,r,o){if(a(e)){if(E(e,t))return n[t]=e[t],o||delete e[t],!0;if(E(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function Wn(n){return l(n)?[gn(n)]:o(n)?function n(e,t){var r,c,p,d,u=[];for(r=0;r<e.length;r++)s(c=e[r])||"boolean"==typeof c||(p=u.length-1,d=u[p],o(c)?c.length>0&&(Gn((c=n(c,"".concat(t||"","_").concat(r)))[0])&&Gn(d)&&(u[p]=gn(d.text+c[0].text),c.shift()),u.push.apply(u,c)):l(c)?Gn(d)?u[p]=gn(d.text+c):""!==c&&u.push(gn(c)):Gn(c)&&Gn(d)?u[p]=gn(d.text+c.text):(i(e._isVList)&&a(c.tag)&&s(c.key)&&a(t)&&(c.key="__vlist".concat(t,"_").concat(r,"__")),u.push(c)));return u}(n):void 0}function Gn(n){return a(n)&&a(n.text)&&!1===n.isComment}function Qn(n,e){var t,r,s,i,l=null;if(o(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(p(n))if(pn&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),d=c.next();!d.done;)l.push(e(d.value,l.length)),d=c.next()}else for(s=Object.keys(n),l=new Array(s.length),t=0,r=s.length;t<r;t++)i=s[t],l[t]=e(n[i],i,t);return a(l)||(l=[]),l._isVList=!0,l}function Kn(n,e,t,r){var o,s=this.$scopedSlots[n];s?(t=t||{},r&&(t=T(T({},r),t)),o=s(t)||(c(e)?e():e)):o=this.$slots[n]||(c(e)?e():e);var a=t&&t.slot;return a?this.$createElement("template",{slot:a},o):o}function Vn(n){return _t(this.$options,"filters",n,!0)||P}function ne(n,e){return o(n)?-1===n.indexOf(e):n!==e}function ee(n,e,t,r,o){var s=N.keyCodes[e]||t;return o&&r&&!N.keyCodes[e]?ne(o,r):s?ne(s,n):r?j(r)!==e:void 0===n}function te(n,e,t,r,s){if(t)if(p(t)){o(t)&&(t=F(t));var a=void 0,i=function(o){if("class"===o||"style"===o||v(o))a=n;else{var i=n.attrs&&n.attrs.type;a=r||N.mustUseProp(e,i,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=S(o),c=j(o);l in a||c in a||(a[o]=t[o],s&&((n.on||(n.on={}))["update:".concat(o)]=function(n){t[o]=n}))};for(var l in t)i(l)}else;return n}function re(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||se(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function oe(n,e,t){return se(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function se(n,e,t){if(o(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&ae(n[r],"".concat(e,"_").concat(r),t);else ae(n,e,t)}function ae(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ie(n,e){if(e)if(u(e)){var t=n.on=n.on?T({},n.on):{};for(var r in e){var o=t[r],s=e[r];t[r]=o?[].concat(o,s):s}}else;return n}function le(n,e,t,r){e=e||{$stable:!t};for(var s=0;s<n.length;s++){var a=n[s];o(a)?le(a,e,t):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return r&&(e.$key=r),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function pe(n,e){return"string"==typeof n?e+n:n}function de(n){n._o=oe,n._n=b,n._s=f,n._l=Qn,n._t=Kn,n._q=L,n._i=O,n._m=re,n._f=Vn,n._k=ee,n._b=te,n._v=gn,n._e=hn,n._u=le,n._g=ie,n._d=ce,n._p=pe}function ue(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var s=n[r],a=s.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,s.context!==e&&s.fnContext!==e||!a||null==a.slot)(t.default||(t.default=[])).push(s);else{var i=a.slot,l=t[i]||(t[i]=[]);"template"===s.tag?l.push.apply(l,s.children||[]):l.push(s)}}for(var c in t)t[c].every(me)&&delete t[c];return t}function me(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n){return n.isComment&&n.asyncFactory}function ge(n,e,t,o){var s,a=Object.keys(t).length>0,i=e?!!e.$stable:!a,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&o&&o!==r&&l===o.$key&&!a&&!o.$hasNormal)return o;for(var c in s={},e)e[c]&&"$"!==c[0]&&(s[c]=fe(n,t,c,e[c]))}else s={};for(var p in t)p in s||(s[p]=be(t,p));return e&&Object.isExtensible(e)&&(e._normalized=s),Y(s,"$stable",i),Y(s,"$key",l),Y(s,"$hasNormal",a),s}function fe(n,e,t,r){var s=function(){var e=dn;un(n);var t=arguments.length?r.apply(null,arguments):r({}),s=(t=t&&"object"==typeof t&&!o(t)?[t]:Wn(t))&&t[0];return un(e),t&&(!s||1===t.length&&s.isComment&&!he(s))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:s,enumerable:!0,configurable:!0}),s}function be(n,e){return function(){return n[e]}}function ye(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};Y(e,"_v_attr_proxy",!0),ve(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||ve(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||we(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:C(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Rn(n,e,t)}))}}}function ve(n,e,t,r,o){var s=!1;for(var a in e)a in n?e[a]!==t[a]&&(s=!0):(s=!0,xe(n,a,r,o));for(var a in n)a in e||(s=!0,delete n[a]);return s}function xe(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function we(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var Ee=null;function ke(n,e){return(n.__esModule||pn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),p(n)?e.extend(n):n}function ze(n){if(o(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||he(t)))return t}}function Se(n,e,t,r,d,u){return(o(t)||l(t))&&(d=r,r=t,t=void 0),i(u)&&(d=2),function(n,e,t,r,l){if(a(t)&&a(t.__ob__))return hn();a(t)&&a(t.is)&&(e=t.is);if(!e)return hn();0;o(r)&&c(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Wn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(o(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var d,u;if("string"==typeof e){var m=void 0;u=n.$vnode&&n.$vnode.ns||N.getTagNamespace(e),d=N.isReservedTag(e)?new mn(N.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!a(m=_t(n.$options,"components",e))?new mn(e,t,r,void 0,void 0,n):xt(m,t,n,r,e)}else d=xt(e,t,n,r);return o(d)?d:a(d)?(a(u)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(a(e.children))for(var o=0,l=e.children.length;o<l;o++){var c=e.children[o];a(c.tag)&&(s(c.ns)||i(r)&&"svg"!==c.tag)&&n(c,t,r)}}(d,u),a(t)&&function(n){p(n.style)&&Ne(n.style);p(n.class)&&Ne(n.class)}(t),d):hn()}(n,e,t,r,d)}function Ae(n,e,t){wn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var s=0;s<o.length;s++)try{if(!1===o[s].call(r,n,e,t))return}catch(n){je(n,r,"errorCaptured hook")}}je(n,e,t)}finally{En()}}function Be(n,e,t,r,o){var s;try{(s=t?n.apply(e,t):n.call(e))&&!s._isVue&&g(s)&&!s._handled&&(s.catch((function(n){return Ae(n,r,o+" (Promise/async)")})),s._handled=!0)}catch(n){Ae(n,r,o)}return s}function je(n,e,t){if(N.errorHandler)try{return N.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ce(e,null,"config.errorHandler")}Ce(n,e,t)}function Ce(n,e,t){if(!X||"undefined"==typeof console)throw n;console.error(n)}var _e,Te=!1,Fe=[],Ie=!1;function De(){Ie=!1;var n=Fe.slice(0);Fe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var Pe=Promise.resolve();_e=function(){Pe.then(De),V&&setTimeout(I)},Te=!0}else if(G||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())_e="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(De)}:function(){setTimeout(De,0)};else{var Le=1,Oe=new MutationObserver(De),Me=document.createTextNode(String(Le));Oe.observe(Me,{characterData:!0}),_e=function(){Le=(Le+1)%2,Me.data=String(Le)},Te=!0}function $e(n,e){var t;if(Fe.push((function(){if(n)try{n.call(e)}catch(n){Ae(n,e,"nextTick")}else t&&t(e)})),Ie||(Ie=!0,_e()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Re(n){return function(e,t){if(void 0===t&&(t=dn),t)return function(n,e,t){var r=n.$options;r[e]=At(r[e],t)}(t,n,e)}}Re("beforeMount"),Re("mounted"),Re("beforeUpdate"),Re("updated"),Re("beforeDestroy"),Re("destroyed"),Re("activated"),Re("deactivated"),Re("serverPrefetch"),Re("renderTracked"),Re("renderTriggered"),Re("errorCaptured");var qe=new cn;function Ne(n){return function n(e,t){var r,s,a=o(e);if(!a&&!p(e)||e.__v_skip||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(a)for(r=e.length;r--;)n(e[r],t);else if($n(e))n(e.value,t);else for(s=Object.keys(e),r=s.length;r--;)n(e[s[r]],t)}(n,qe),qe.clear(),n}var He,Ue=0,Ye=function(){function n(n,e,t,r,o){var s,a;s=this,void 0===(a=qn&&!qn._vm?qn:n?n._scope:void 0)&&(a=qn),a&&a.active&&a.effects.push(s),(this.vm=n)&&o&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Ue,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!Z.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=I)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;wn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ae(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Ne(n),En(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():ut(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||p(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Be(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&x(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Ze(n,e){He.$on(n,e)}function Je(n,e){He.$off(n,e)}function Xe(n,e){var t=He;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function We(n,e,t){He=n,Zn(e,t||{},Ze,Je,Xe,n),He=void 0}var Ge=null;function Qe(n){var e=Ge;return Ge=n,function(){Ge=e}}function Ke(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Ve(n,e){if(e){if(n._directInactive=!1,Ke(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Ve(n.$children[t]);nt(n,"activated")}}function nt(n,e,t,r){void 0===r&&(r=!0),wn();var o=dn,s=qn;r&&un(n);var a=n.$options[e],i="".concat(e," hook");if(a)for(var l=0,c=a.length;l<c;l++)Be(a[l],n,t||null,n,i);n._hasHookEvent&&n.$emit("hook:"+e),r&&(un(o),s&&s.on()),En()}var et=[],tt=[],rt={},ot=!1,st=!1,at=0;var it=0,lt=Date.now;if(X&&!G){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var pt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function dt(){var n,e;for(it=lt(),st=!0,et.sort(pt),at=0;at<et.length;at++)(n=et[at]).before&&n.before(),e=n.id,rt[e]=null,n.run();var t=tt.slice(),r=et.slice();at=et.length=tt.length=0,rt={},ot=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Ve(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&nt(r,"updated")}}(r),function(){for(var n=0;n<yn.length;n++){var e=yn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}yn.length=0}(),an&&N.devtools&&an.emit("flush")}function ut(n){var e=n.id;if(null==rt[e]&&(n!==vn.target||!n.noRecurse)){if(rt[e]=!0,st){for(var t=et.length-1;t>at&&et[t].id>n.id;)t--;et.splice(t+1,0,n)}else et.push(n);ot||(ot=!0,$e(dt))}}function mt(n,e){if(n){for(var t=Object.create(null),r=pn?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var s=r[o];if("__ob__"!==s){var a=n[s].from;if(a in e._provided)t[s]=e._provided[a];else if("default"in n[s]){var i=n[s].default;t[s]=c(i)?i.call(e):i}else 0}}return t}}function ht(n,e,t,s,a){var l,c=this,p=a.options;E(s,"_uid")?(l=Object.create(s))._original=s:(l=s,s=s._original);var d=i(p._compiled),u=!d;this.data=n,this.props=e,this.children=t,this.parent=s,this.listeners=n.on||r,this.injections=mt(p.inject,s),this.slots=function(){return c.$slots||ge(s,n.scopedSlots,c.$slots=ue(t,s)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ge(s,n.scopedSlots,this.slots())}}),d&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=ge(s,n.scopedSlots,this.$slots)),p._scopeId?this._c=function(n,e,t,r){var a=Se(l,n,e,t,r,u);return a&&!o(a)&&(a.fnScopeId=p._scopeId,a.fnContext=s),a}:this._c=function(n,e,t,r){return Se(l,n,e,t,r,u)}}function gt(n,e,t,r,o){var s=fn(n);return s.fnContext=t,s.fnOptions=r,e.slot&&((s.data||(s.data={})).slot=e.slot),s}function ft(n,e){for(var t in e)n[S(t)]=e[t]}function bt(n){return n.name||n.__name||n._componentTag}de(ht.prototype);var yt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;yt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;a(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ge)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,o,s){var a=o.data.scopedSlots,i=n.$scopedSlots,l=!!(a&&!a.$stable||i!==r&&!i.$stable||a&&n.$scopedSlots.$key!==a.$key||!a&&n.$scopedSlots.$key),c=!!(s||n.$options._renderChildren||l),p=n.$vnode;n.$options._parentVnode=o,n.$vnode=o,n._vnode&&(n._vnode.parent=o),n.$options._renderChildren=s;var d=o.data.attrs||r;n._attrsProxy&&ve(n._attrsProxy,d,p.data&&p.data.attrs||r,n,"$attrs")&&(c=!0),n.$attrs=d,t=t||r;var u=n.$options._parentListeners;if(n._listenersProxy&&ve(n._listenersProxy,t,u||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,We(n,t,u),e&&n.$options.props){jn(!1);for(var m=n._props,h=n.$options._propKeys||[],g=0;g<h.length;g++){var f=h[g],b=n.$options.props;m[f]=Tt(f,b,e,n)}jn(!0),n.$options.propsData=e}c&&(n.$slots=ue(s,o.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,nt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,tt.push(e)):Ve(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ke(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);nt(e,"deactivated")}}(e,!0):e.$destroy())}},vt=Object.keys(yt);function xt(n,e,t,l,c){if(!s(n)){var d=t.$options._base;if(p(n)&&(n=d.extend(n)),"function"==typeof n){var u;if(s(n.cid)&&void 0===(n=function(n,e){if(i(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=Ee;if(t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),i(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var r=n.owners=[t],o=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var d=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},u=M((function(t){n.resolved=ke(t,e),o?r.length=0:d(!0)})),m=M((function(e){a(n.errorComp)&&(n.error=!0,d(!0))})),h=n(u,m);return p(h)&&(g(h)?s(n.resolved)&&h.then(u,m):g(h.component)&&(h.component.then(u,m),a(h.error)&&(n.errorComp=ke(h.error,e)),a(h.loading)&&(n.loadingComp=ke(h.loading,e),0===h.delay?n.loading=!0:l=setTimeout((function(){l=null,s(n.resolved)&&s(n.error)&&(n.loading=!0,d(!1))}),h.delay||200)),a(h.timeout)&&(c=setTimeout((function(){c=null,s(n.resolved)&&m(null)}),h.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(u=n,d)))return function(n,e,t,r,o){var s=hn();return s.asyncFactory=n,s.asyncMeta={data:e,context:t,children:r,tag:o},s}(u,e,t,l,c);e=e||{},Yt(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var s=e.on||(e.on={}),i=s[r],l=e.model.callback;a(i)?(o(i)?-1===i.indexOf(l):i!==l)&&(s[r]=[l].concat(i)):s[r]=l}(n.options,e);var m=function(n,e,t){var r=e.options.props;if(!s(r)){var o={},i=n.attrs,l=n.props;if(a(i)||a(l))for(var c in r){var p=j(c);Xn(o,l,c,p,!0)||Xn(o,i,c,p,!1)}return o}}(e,n);if(i(n.options.functional))return function(n,e,t,s,i){var l=n.options,c={},p=l.props;if(a(p))for(var d in p)c[d]=Tt(d,p,e||r);else a(t.attrs)&&ft(c,t.attrs),a(t.props)&&ft(c,t.props);var u=new ht(t,c,i,s,n),m=l.render.call(null,u._c,u);if(m instanceof mn)return gt(m,t,u.parent,l,u);if(o(m)){for(var h=Wn(m)||[],g=new Array(h.length),f=0;f<h.length;f++)g[f]=gt(h[f],t,u.parent,l,u);return g}}(n,m,e,t,l);var h=e.on;if(e.on=e.nativeOn,i(n.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<vt.length;t++){var r=vt[t],o=e[r],s=yt[r];o===s||o&&o._merged||(e[r]=o?wt(s,o):s)}}(e);var b=bt(n.options)||c;return new mn("vue-component-".concat(n.cid).concat(b?"-".concat(b):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:h,tag:c,children:l},u)}}}function wt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var Et=I,kt=N.optionMergeStrategies;function zt(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,o,s,a=pn?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++)"__ob__"!==(r=a[i])&&(o=n[r],s=e[r],t&&E(n,r)?o!==s&&u(o)&&u(s)&&zt(o,s):In(n,r,s));return n}function St(n,e,t){return t?function(){var r=c(e)?e.call(t,t):e,o=c(n)?n.call(t,t):n;return r?zt(r,o):o}:e?n?function(){return zt(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function At(n,e){var t=e?n?n.concat(e):o(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Bt(n,e,t,r){var o=Object.create(n||null);return e?T(o,e):o}kt.data=function(n,e,t){return t?St(n,e,t):e&&"function"!=typeof e?n:St(n,e)},q.forEach((function(n){kt[n]=At})),R.forEach((function(n){kt[n+"s"]=Bt})),kt.watch=function(n,e,t,r){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var s={};for(var a in T(s,n),e){var i=s[a],l=e[a];i&&!o(i)&&(i=[i]),s[a]=i?i.concat(l):o(l)?l:[l]}return s},kt.props=kt.methods=kt.inject=kt.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return T(o,n),e&&T(o,e),o},kt.provide=function(n,e){return n?function(){var t=Object.create(null);return zt(t,c(n)?n.call(this):n),e&&zt(t,c(e)?e.call(this):e,!1),t}:e};var jt=function(n,e){return void 0===e?n:e};function Ct(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,s,a={};if(o(t))for(r=t.length;r--;)"string"==typeof(s=t[r])&&(a[S(s)]={type:null});else if(u(t))for(var i in t)s=t[i],a[S(i)]=u(s)?s:{type:s};else 0;n.props=a}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(o(t))for(var s=0;s<t.length;s++)r[t[s]]={from:t[s]};else if(u(t))for(var a in t){var i=t[a];r[a]=u(i)?T({from:a},i):{from:i}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];c(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Ct(n,e.extends,t)),e.mixins))for(var r=0,s=e.mixins.length;r<s;r++)n=Ct(n,e.mixins[r],t);var a,i={};for(a in n)l(a);for(a in e)E(n,a)||l(a);function l(r){var o=kt[r]||jt;i[r]=o(n[r],e[r],t,r)}return i}function _t(n,e,t,r){if("string"==typeof t){var o=n[e];if(E(o,t))return o[t];var s=S(t);if(E(o,s))return o[s];var a=A(s);return E(o,a)?o[a]:o[t]||o[s]||o[a]}}function Tt(n,e,t,r){var o=e[n],s=!E(t,n),a=t[n],i=Pt(Boolean,o.type);if(i>-1)if(s&&!E(o,"default"))a=!1;else if(""===a||a===j(n)){var l=Pt(String,o.type);(l<0||i<l)&&(a=!0)}if(void 0===a){a=function(n,e,t){if(!E(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(r)&&"Function"!==It(e.type)?r.call(n):r}(r,o,n);var p=Bn;jn(!0),Tn(a),jn(p)}return a}var Ft=/^\s*function (\w+)/;function It(n){var e=n&&n.toString().match(Ft);return e?e[1]:""}function Dt(n,e){return It(n)===It(e)}function Pt(n,e){if(!o(e))return Dt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Dt(e[t],n))return t;return-1}var Lt={enumerable:!0,configurable:!0,get:I,set:I};function Ot(n,e,t){Lt.get=function(){return this[e][t]},Lt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Lt)}function Mt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Ln({}),o=n.$options._propKeys=[];n.$parent&&jn(!1);var s=function(s){o.push(s);var a=Tt(s,e,t,n);Fn(r,s,a),s in n||Ot(n,"_props",s)};for(var a in e)s(a);jn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ye(n);un(n),wn();var o=Be(t,null,[n._props||Ln({}),r],n,"setup");if(En(),un(),c(o))e.render=o;else if(p(o))if(n._setupState=o,o.__sfc){var s=n._setupProxy={};for(var a in o)"__sfc"!==a&&Rn(s,o,a)}else for(var a in o)U(a)||Rn(n,o,a);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?I:C(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;u(e=n._data=c(e)?function(n,e){wn();try{return n.call(e,e)}catch(n){return Ae(n,e,"data()"),{}}finally{En()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var s=t[o];0,r&&E(r,s)||U(s)||Ot(n,"_data",s)}var a=Tn(e);a&&a.vmCount++}(n);else{var t=Tn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=sn();for(var o in e){var s=e[o],a=c(s)?s:s.get;0,r||(t[o]=new Ye(n,a||I,I,$t)),o in n||Rt(n,o,s)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var r=e[t];if(o(r))for(var s=0;s<r.length;s++)Ht(n,t,r[s]);else Ht(n,t,r)}}(n,e.watch)}var $t={lazy:!0};function Rt(n,e,t){var r=!sn();c(t)?(Lt.get=r?qt(e):Nt(t),Lt.set=I):(Lt.get=t.get?r&&!1!==t.cache?qt(e):Nt(t.get):I,Lt.set=t.set||I),Object.defineProperty(n,e,Lt)}function qt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),vn.target&&e.depend(),e.value}}function Nt(n){return function(){return n.call(this,this)}}function Ht(n,e,t,r){return u(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ut=0;function Yt(n){var e=n.options;if(n.super){var t=Yt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&T(n.extendOptions,r),(e=n.options=Ct(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Zt(n){this._init(n)}function Jt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var s=bt(n)||bt(t.options);var a=function(n){this._init(n)};return(a.prototype=Object.create(t.prototype)).constructor=a,a.cid=e++,a.options=Ct(t.options,n),a.super=t,a.options.props&&function(n){var e=n.options.props;for(var t in e)Ot(n.prototype,"_props",t)}(a),a.options.computed&&function(n){var e=n.options.computed;for(var t in e)Rt(n.prototype,t,e[t])}(a),a.extend=t.extend,a.mixin=t.mixin,a.use=t.use,R.forEach((function(n){a[n]=t[n]})),s&&(a.options.components[s]=a),a.superOptions=t.options,a.extendOptions=n,a.sealedOptions=T({},a.options),o[r]=a,a}}function Xt(n){return n&&(bt(n.Ctor.options)||n.tag)}function Wt(n,e){return o(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function Gt(n,e){var t=n.cache,r=n.keys,o=n._vnode;for(var s in t){var a=t[s];if(a){var i=a.name;i&&!e(i)&&Qt(t,s,r,o)}}}function Qt(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,x(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ut++,e._isVue=!0,e.__v_skip=!0,e._scope=new Nn(!0),e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Ct(Yt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&We(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,o=t&&t.context;n.$slots=ue(e._renderChildren,o),n.$scopedSlots=t?ge(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,o){return Se(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Se(n,e,t,r,o,!0)};var s=t&&t.data;Fn(n,"$attrs",s&&s.attrs||r,null,!0),Fn(n,"$listeners",e._parentListeners||r,null,!0)}(e),nt(e,"beforeCreate",void 0,!1),function(n){var e=mt(n.$options.inject,n);e&&(jn(!1),Object.keys(e).forEach((function(t){Fn(n,t,e[t])})),jn(!0))}(e),Mt(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!p(t))return;for(var r=Hn(n),o=pn?Reflect.ownKeys(t):Object.keys(t),s=0;s<o.length;s++){var a=o[s];Object.defineProperty(r,a,Object.getOwnPropertyDescriptor(t,a))}}}(e),nt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Zt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=In,n.prototype.$delete=Dn,n.prototype.$watch=function(n,e,t){if(u(e))return Ht(this,n,e,t);(t=t||{}).user=!0;var r=new Ye(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'.concat(r.expression,'"');wn(),Be(e,this,[r.value],this,o),En()}return function(){r.teardown()}}}(Zt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(o(n))for(var s=0,a=n.length;s<a;s++)r.$on(n[s],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(o(n)){for(var r=0,s=n.length;r<s;r++)t.$off(n[r],e);return t}var a,i=t._events[n];if(!i)return t;if(!e)return t._events[n]=null,t;for(var l=i.length;l--;)if((a=i[l])===e||a.fn===e){i.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?_(t):t;for(var r=_(arguments,1),o='event handler for "'.concat(n,'"'),s=0,a=t.length;s<a;s++)Be(t[s],e,r,e,o)}return e}}(Zt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,s=Qe(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),s(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var a=t;a&&a.$vnode&&a.$parent&&a.$vnode===a.$parent._vnode;)a.$parent.$el=a.$el,a=a.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){nt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),nt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Zt),function(n){de(n.prototype),n.prototype.$nextTick=function(n){return $e(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,s=t._parentVnode;s&&e._isMounted&&(e.$scopedSlots=ge(e.$parent,s.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&we(e._slotsProxy,e.$scopedSlots)),e.$vnode=s;try{un(e),Ee=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Ae(t,e,"render"),n=e._vnode}finally{Ee=null,un()}return o(n)&&1===n.length&&(n=n[0]),n instanceof mn||(n=hn()),n.parent=s,n}}(Zt);var Kt=[String,RegExp,Array],Vt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Kt,exclude:Kt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,s=t.componentInstance,a=t.componentOptions;n[r]={name:Xt(a),tag:o,componentInstance:s},e.push(r),this.max&&e.length>parseInt(this.max)&&Qt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Qt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Gt(n,(function(n){return Wt(e,n)}))})),this.$watch("exclude",(function(e){Gt(n,(function(n){return!Wt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=ze(n),t=e&&e.componentOptions;if(t){var r=Xt(t),o=this.include,s=this.exclude;if(o&&(!r||!Wt(o,r))||s&&r&&Wt(s,r))return e;var a=this.cache,i=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;a[l]?(e.componentInstance=a[l].componentInstance,x(i,l),i.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return N}};Object.defineProperty(n,"config",e),n.util={warn:Et,extend:T,mergeOptions:Ct,defineReactive:Fn},n.set=In,n.delete=Dn,n.nextTick=$e,n.observable=function(n){return Tn(n),n},n.options=Object.create(null),R.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,T(n.options.components,Vt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=_(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Ct(this.options,n),this}}(n),Jt(n),function(n){R.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&u(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Zt),Object.defineProperty(Zt.prototype,"$isServer",{get:sn}),Object.defineProperty(Zt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Zt,"FunctionalRenderContext",{value:ht}),Zt.version="2.7.15";var nr=y("style,class"),er=y("input,textarea,option,select,progress"),tr=y("contenteditable,draggable,spellcheck"),rr=y("events,caret,typing,plaintext-only"),or=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),sr="http://www.w3.org/1999/xlink",ar=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},ir=function(n){return ar(n)?n.slice(6,n.length):""},lr=function(n){return null==n||!1===n};function cr(n){for(var e=n.data,t=n,r=n;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=pr(r.data,e));for(;a(t=t.parent);)t&&t.data&&(e=pr(e,t.data));return function(n,e){if(a(n)||a(e))return dr(n,ur(e));return""}(e.staticClass,e.class)}function pr(n,e){return{staticClass:dr(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function dr(n,e){return n?e?n+" "+e:n:e||""}function ur(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)a(e=ur(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):p(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var mr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),gr=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),fr=function(n){return hr(n)||gr(n)};var br=Object.create(null);var yr=y("text,number,password,search,email,tel,url");var vr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(mr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),xr={create:function(n,e){wr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(wr(n,!0),wr(e))},destroy:function(n){wr(n,!0)}};function wr(n,e){var t=n.data.ref;if(a(t)){var r=n.context,s=n.componentInstance||n.elm,i=e?null:s,l=e?void 0:s;if(c(t))Be(t,r,[i],r,"template ref function");else{var p=n.data.refInFor,d="string"==typeof t||"number"==typeof t,u=$n(t),m=r.$refs;if(d||u)if(p){var h=d?m[t]:t.value;e?o(h)&&x(h,s):o(h)?h.includes(s)||h.push(s):d?(m[t]=[s],Er(r,t,m[t])):t.value=[s]}else if(d){if(e&&m[t]!==s)return;m[t]=l,Er(r,t,i)}else if(u){if(e&&t.value!==s)return;t.value=i}else 0}}}function Er(n,e,t){var r=n._setupState;r&&E(r,e)&&($n(r[e])?r[e].value=t:r[e]=t)}var kr=new mn("",{},[]),zr=["create","activate","update","remove","destroy"];function Sr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=a(t=n.data)&&a(t=t.attrs)&&t.type,o=a(t=e.data)&&a(t=t.attrs)&&t.type;return r===o||yr(r)&&yr(o)}(n,e)||i(n.isAsyncPlaceholder)&&s(e.asyncFactory.error))}function Ar(n,e,t){var r,o,s={};for(r=e;r<=t;++r)a(o=n[r].key)&&(s[o]=r);return s}var Br={create:jr,update:jr,destroy:function(n){jr(n,kr)}};function jr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,s=n===kr,a=e===kr,i=_r(n.data.directives,n.context),l=_r(e.data.directives,e.context),c=[],p=[];for(t in l)r=i[t],o=l[t],r?(o.oldValue=r.value,o.oldArg=r.arg,Fr(o,"update",e,n),o.def&&o.def.componentUpdated&&p.push(o)):(Fr(o,"bind",e,n),o.def&&o.def.inserted&&c.push(o));if(c.length){var d=function(){for(var t=0;t<c.length;t++)Fr(c[t],"inserted",e,n)};s?Jn(e,"insert",d):d()}p.length&&Jn(e,"postpatch",(function(){for(var t=0;t<p.length;t++)Fr(p[t],"componentUpdated",e,n)}));if(!s)for(t in i)l[t]||Fr(i[t],"unbind",n,n,a)}(n,e)}var Cr=Object.create(null);function _r(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Cr),o[Tr(r)]=r,e._setupState&&e._setupState.__sfc){var s=r.def||_t(e,"_setupState","v-"+r.name);r.def="function"==typeof s?{bind:s,update:s}:s}r.def=r.def||_t(e.$options,"directives",r.name)}return o}function Tr(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Fr(n,e,t,r,o){var s=n.def&&n.def[e];if(s)try{s(t.elm,n,t,r,o)}catch(r){Ae(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Ir=[xr,Br];function Dr(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||s(n.data.attrs)&&s(e.data.attrs))){var r,o,l=e.elm,c=n.data.attrs||{},p=e.data.attrs||{};for(r in(a(p.__ob__)||i(p._v_attr_proxy))&&(p=e.data.attrs=T({},p)),p)o=p[r],c[r]!==o&&Pr(l,r,o,e.data.pre);for(r in(G||K)&&p.value!==c.value&&Pr(l,"value",p.value),c)s(p[r])&&(ar(r)?l.removeAttributeNS(sr,ir(r)):tr(r)||l.removeAttribute(r))}}function Pr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Lr(n,e,t):or(e)?lr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):tr(e)?n.setAttribute(e,function(n,e){return lr(e)||"false"===e?"false":"contenteditable"===n&&rr(e)?e:"true"}(e,t)):ar(e)?lr(t)?n.removeAttributeNS(sr,ir(e)):n.setAttributeNS(sr,e,t):Lr(n,e,t)}function Lr(n,e,t){if(lr(t))n.removeAttribute(e);else{if(G&&!Q&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Or={create:Dr,update:Dr};function Mr(n,e){var t=e.elm,r=e.data,o=n.data;if(!(s(r.staticClass)&&s(r.class)&&(s(o)||s(o.staticClass)&&s(o.class)))){var i=cr(e),l=t._transitionClasses;a(l)&&(i=dr(i,ur(l))),i!==t._prevClass&&(t.setAttribute("class",i),t._prevClass=i)}}var $r,Rr={create:Mr,update:Mr};function qr(n,e,t){var r=$r;return function o(){var s=e.apply(null,arguments);null!==s&&Ur(n,o,t,r)}}var Nr=Te&&!(en&&Number(en[1])<=53);function Hr(n,e,t,r){if(Nr){var o=it,s=e;e=s._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return s.apply(this,arguments)}}$r.addEventListener(n,e,rn?{capture:t,passive:r}:t)}function Ur(n,e,t,r){(r||$r).removeEventListener(n,e._wrapper||e,t)}function Yr(n,e){if(!s(n.data.on)||!s(e.data.on)){var t=e.data.on||{},r=n.data.on||{};$r=e.elm||n.elm,function(n){if(a(n.__r)){var e=G?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}a(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Zn(t,r,Hr,Ur,qr,e.context),$r=void 0}}var Zr,Jr={create:Yr,update:Yr,destroy:function(n){return Yr(n,kr)}};function Xr(n,e){if(!s(n.data.domProps)||!s(e.data.domProps)){var t,r,o=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(a(c.__ob__)||i(c._v_attr_proxy))&&(c=e.data.domProps=T({},c)),l)t in c||(o[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var p=s(r)?"":String(r);Wr(o,p)&&(o.value=p)}else if("innerHTML"===t&&gr(o.tagName)&&s(o.innerHTML)){(Zr=Zr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var d=Zr.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;d.firstChild;)o.appendChild(d.firstChild)}else if(r!==l[t])try{o[t]=r}catch(n){}}}}function Wr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(a(r)){if(r.number)return b(t)!==b(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Gr={create:Xr,update:Xr},Qr=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Kr(n){var e=Vr(n.style);return n.staticStyle?T(n.staticStyle,e):e}function Vr(n){return Array.isArray(n)?F(n):"string"==typeof n?Qr(n):n}var no,eo=/^--/,to=/\s*!important$/,ro=function(n,e,t){if(eo.test(e))n.style.setProperty(e,t);else if(to.test(t))n.style.setProperty(j(e),t.replace(to,""),"important");else{var r=so(e);if(Array.isArray(t))for(var o=0,s=t.length;o<s;o++)n.style[r]=t[o];else n.style[r]=t}},oo=["Webkit","Moz","ms"],so=k((function(n){if(no=no||document.createElement("div").style,"filter"!==(n=S(n))&&n in no)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<oo.length;t++){var r=oo[t]+e;if(r in no)return r}}));function ao(n,e){var t=e.data,r=n.data;if(!(s(t.staticStyle)&&s(t.style)&&s(r.staticStyle)&&s(r.style))){var o,i,l=e.elm,c=r.staticStyle,p=r.normalizedStyle||r.style||{},d=c||p,u=Vr(e.data.style)||{};e.data.normalizedStyle=a(u.__ob__)?T({},u):u;var m=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Kr(o.data))&&T(r,t);(t=Kr(n.data))&&T(r,t);for(var s=n;s=s.parent;)s.data&&(t=Kr(s.data))&&T(r,t);return r}(e,!0);for(i in d)s(m[i])&&ro(l,i,"");for(i in m)(o=m[i])!==d[i]&&ro(l,i,null==o?"":o)}}var io={create:ao,update:ao},lo=/\s+/;function co(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lo).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function po(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lo).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function uo(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&T(e,mo(n.name||"v")),T(e,n),e}return"string"==typeof n?mo(n):void 0}}var mo=k((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),ho=X&&!Q,go="transition",fo="transitionend",bo="animation",yo="animationend";ho&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(go="WebkitTransition",fo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(bo="WebkitAnimation",yo="webkitAnimationEnd"));var vo=X?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function xo(n){vo((function(){vo(n)}))}function wo(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),co(n,e))}function Eo(n,e){n._transitionClasses&&x(n._transitionClasses,e),po(n,e)}function ko(n,e,t){var r=So(n,e),o=r.type,s=r.timeout,a=r.propCount;if(!o)return t();var i="transition"===o?fo:yo,l=0,c=function(){n.removeEventListener(i,p),t()},p=function(e){e.target===n&&++l>=a&&c()};setTimeout((function(){l<a&&c()}),s+1),n.addEventListener(i,p)}var zo=/\b(transform|all)(,|$)/;function So(n,e){var t,r=window.getComputedStyle(n),o=(r[go+"Delay"]||"").split(", "),s=(r[go+"Duration"]||"").split(", "),a=Ao(o,s),i=(r[bo+"Delay"]||"").split(", "),l=(r[bo+"Duration"]||"").split(", "),c=Ao(i,l),p=0,d=0;return"transition"===e?a>0&&(t="transition",p=a,d=s.length):"animation"===e?c>0&&(t="animation",p=c,d=l.length):d=(t=(p=Math.max(a,c))>0?a>c?"transition":"animation":null)?"transition"===t?s.length:l.length:0,{type:t,timeout:p,propCount:d,hasTransform:"transition"===t&&zo.test(r[go+"Property"])}}function Ao(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Bo(e)+Bo(n[t])})))}function Bo(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function jo(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=uo(n.data.transition);if(!s(r)&&!a(t._enterCb)&&1===t.nodeType){for(var o=r.css,i=r.type,l=r.enterClass,d=r.enterToClass,u=r.enterActiveClass,m=r.appearClass,h=r.appearToClass,g=r.appearActiveClass,f=r.beforeEnter,y=r.enter,v=r.afterEnter,x=r.enterCancelled,w=r.beforeAppear,E=r.appear,k=r.afterAppear,z=r.appearCancelled,S=r.duration,A=Ge,B=Ge.$vnode;B&&B.parent;)A=B.context,B=B.parent;var j=!A._isMounted||!n.isRootInsert;if(!j||E||""===E){var C=j&&m?m:l,_=j&&g?g:u,T=j&&h?h:d,F=j&&w||f,I=j&&c(E)?E:y,D=j&&k||v,P=j&&z||x,L=b(p(S)?S.enter:S);0;var O=!1!==o&&!Q,$=To(I),R=t._enterCb=M((function(){O&&(Eo(t,T),Eo(t,_)),R.cancelled?(O&&Eo(t,C),P&&P(t)):D&&D(t),t._enterCb=null}));n.data.show||Jn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(t,R)})),F&&F(t),O&&(wo(t,C),wo(t,_),xo((function(){Eo(t,C),R.cancelled||(wo(t,T),$||(_o(L)?setTimeout(R,L):ko(t,i,R)))}))),n.data.show&&(e&&e(),I&&I(t,R)),O||$||R()}}}function Co(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=uo(n.data.transition);if(s(r)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var o=r.css,i=r.type,l=r.leaveClass,c=r.leaveToClass,d=r.leaveActiveClass,u=r.beforeLeave,m=r.leave,h=r.afterLeave,g=r.leaveCancelled,f=r.delayLeave,y=r.duration,v=!1!==o&&!Q,x=To(m),w=b(p(y)?y.leave:y);0;var E=t._leaveCb=M((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),v&&(Eo(t,c),Eo(t,d)),E.cancelled?(v&&Eo(t,l),g&&g(t)):(e(),h&&h(t)),t._leaveCb=null}));f?f(k):k()}function k(){E.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),u&&u(t),v&&(wo(t,l),wo(t,d),xo((function(){Eo(t,l),E.cancelled||(wo(t,c),x||(_o(w)?setTimeout(E,w):ko(t,i,E)))}))),m&&m(t,E),v||x||E())}}function _o(n){return"number"==typeof n&&!isNaN(n)}function To(n){if(s(n))return!1;var e=n.fns;return a(e)?To(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Fo(n,e){!0!==e.data.show&&jo(e)}var Io=function(n){var e,t,r={},c=n.modules,p=n.nodeOps;for(e=0;e<zr.length;++e)for(r[zr[e]]=[],t=0;t<c.length;++t)a(c[t][zr[e]])&&r[zr[e]].push(c[t][zr[e]]);function d(n){var e=p.parentNode(n);a(e)&&p.removeChild(e,n)}function u(n,e,t,o,s,l,c){if(a(n.elm)&&a(l)&&(n=l[c]=fn(n)),n.isRootInsert=!s,!function(n,e,t,o){var s=n.data;if(a(s)){var l=a(n.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(n,!1),a(n.componentInstance))return m(n,e),h(t,n.elm,o),i(l)&&function(n,e,t,o){var s,i=n;for(;i.componentInstance;)if(i=i.componentInstance._vnode,a(s=i.data)&&a(s=s.transition)){for(s=0;s<r.activate.length;++s)r.activate[s](kr,i);e.push(i);break}h(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var d=n.data,u=n.children,f=n.tag;a(f)?(n.elm=n.ns?p.createElementNS(n.ns,f):p.createElement(f,n),v(n),g(n,u,e),a(d)&&b(n,e),h(t,n.elm,o)):i(n.isComment)?(n.elm=p.createComment(n.text),h(t,n.elm,o)):(n.elm=p.createTextNode(n.text),h(t,n.elm,o))}}function m(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,f(n)?(b(n,e),v(n)):(wr(n),e.push(n))}function h(n,e,t){a(n)&&(a(t)?p.parentNode(t)===n&&p.insertBefore(n,e,t):p.appendChild(n,e))}function g(n,e,t){if(o(e)){0;for(var r=0;r<e.length;++r)u(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&p.appendChild(n.elm,p.createTextNode(String(n.text)))}function f(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function b(n,t){for(var o=0;o<r.create.length;++o)r.create[o](kr,n);a(e=n.data.hook)&&(a(e.create)&&e.create(kr,n),a(e.insert)&&t.push(n))}function v(n){var e;if(a(e=n.fnScopeId))p.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e),t=t.parent;a(e=Ge)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e)}function x(n,e,t,r,o,s){for(;r<=o;++r)u(t[r],s,n,e,!1,t,r)}function w(n){var e,t,o=n.data;if(a(o))for(a(e=o.hook)&&a(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)w(n.children[t])}function E(n,e,t){for(;e<=t;++e){var r=n[e];a(r)&&(a(r.tag)?(k(r),w(r)):d(r.elm))}}function k(n,e){if(a(e)||a(n.data)){var t,o=r.remove.length+1;for(a(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,o),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else d(n.elm)}function z(n,e,t,r){for(var o=t;o<r;o++){var s=e[o];if(a(s)&&Sr(n,s))return o}}function S(n,e,t,o,l,c){if(n!==e){a(e.elm)&&a(o)&&(e=o[l]=fn(e));var d=e.elm=n.elm;if(i(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?j(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(n.isStatic)&&e.key===n.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,h=e.data;a(h)&&a(m=h.hook)&&a(m=m.prepatch)&&m(n,e);var g=n.children,b=e.children;if(a(h)&&f(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);a(m=h.hook)&&a(m=m.update)&&m(n,e)}s(e.text)?a(g)&&a(b)?g!==b&&function(n,e,t,r,o){var i,l,c,d=0,m=0,h=e.length-1,g=e[0],f=e[h],b=t.length-1,y=t[0],v=t[b],w=!o;for(0;d<=h&&m<=b;)s(g)?g=e[++d]:s(f)?f=e[--h]:Sr(g,y)?(S(g,y,r,t,m),g=e[++d],y=t[++m]):Sr(f,v)?(S(f,v,r,t,b),f=e[--h],v=t[--b]):Sr(g,v)?(S(g,v,r,t,b),w&&p.insertBefore(n,g.elm,p.nextSibling(f.elm)),g=e[++d],v=t[--b]):Sr(f,y)?(S(f,y,r,t,m),w&&p.insertBefore(n,f.elm,g.elm),f=e[--h],y=t[++m]):(s(i)&&(i=Ar(e,d,h)),s(l=a(y.key)?i[y.key]:z(y,e,d,h))?u(y,r,n,g.elm,!1,t,m):Sr(c=e[l],y)?(S(c,y,r,t,m),e[l]=void 0,w&&p.insertBefore(n,c.elm,g.elm)):u(y,r,n,g.elm,!1,t,m),y=t[++m]);d>h?x(n,s(t[b+1])?null:t[b+1].elm,t,m,b,r):m>b&&E(e,d,h)}(d,g,b,t,c):a(b)?(a(n.text)&&p.setTextContent(d,""),x(d,null,b,0,b.length-1,t)):a(g)?E(g,0,g.length-1):a(n.text)&&p.setTextContent(d,""):n.text!==e.text&&p.setTextContent(d,e.text),a(h)&&a(m=h.hook)&&a(m=m.postpatch)&&m(n,e)}}}function A(n,e,t){if(i(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var B=y("attrs,class,staticClass,staticStyle,key");function j(n,e,t,r){var o,s=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,i(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(l)&&(a(o=l.hook)&&a(o=o.init)&&o(e,!0),a(o=e.componentInstance)))return m(e,t),!0;if(a(s)){if(a(c))if(n.hasChildNodes())if(a(o=l)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var p=!0,d=n.firstChild,u=0;u<c.length;u++){if(!d||!j(d,c[u],t,r)){p=!1;break}d=d.nextSibling}if(!p||d)return!1}else g(e,c,t);if(a(l)){var h=!1;for(var f in l)if(!B(f)){h=!0,b(e,t);break}!h&&l.class&&Ne(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!s(e)){var l,c=!1,d=[];if(s(n))c=!0,u(e,d);else{var m=a(n.nodeType);if(!m&&Sr(n,e))S(n,e,d,null,null,o);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),i(t)&&j(n,e,d))return A(e,d,!0),n;l=n,n=new mn(p.tagName(l).toLowerCase(),{},[],void 0,l)}var h=n.elm,g=p.parentNode(h);if(u(e,d,h._leaveCb?null:g,p.nextSibling(h)),a(e.parent))for(var b=e.parent,y=f(e);b;){for(var v=0;v<r.destroy.length;++v)r.destroy[v](b);if(b.elm=e.elm,y){for(var x=0;x<r.create.length;++x)r.create[x](kr,b);var k=b.data.hook.insert;if(k.merged)for(var z=k.fns.slice(1),B=0;B<z.length;B++)z[B]()}else wr(b);b=b.parent}a(g)?E([n],0,0):a(n.tag)&&w(n)}}return A(e,d,c),e.elm}a(n)&&w(n)}}({nodeOps:vr,modules:[Or,Rr,Jr,Gr,io,X?{create:Fo,activate:Fo,remove:function(n,e){!0!==n.data.show?Co(n,e):e()}}:{}].concat(Ir)});Q&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&qo(n,"input")}));var Do={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Jn(t,"postpatch",(function(){Do.componentUpdated(n,e,t)})):Po(n,e,t.context),n._vOptions=[].map.call(n.options,Mo)):("textarea"===t.tag||yr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",$o),n.addEventListener("compositionend",Ro),n.addEventListener("change",Ro),Q&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Po(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,Mo);if(o.some((function(n,e){return!L(n,r[e])})))(n.multiple?e.value.some((function(n){return Oo(n,o)})):e.value!==e.oldValue&&Oo(e.value,o))&&qo(n,"change")}}};function Po(n,e,t){Lo(n,e,t),(G||K)&&setTimeout((function(){Lo(n,e,t)}),0)}function Lo(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var s,a,i=0,l=n.options.length;i<l;i++)if(a=n.options[i],o)s=O(r,Mo(a))>-1,a.selected!==s&&(a.selected=s);else if(L(Mo(a),r))return void(n.selectedIndex!==i&&(n.selectedIndex=i));o||(n.selectedIndex=-1)}}function Oo(n,e){return e.every((function(e){return!L(e,n)}))}function Mo(n){return"_value"in n?n._value:n.value}function $o(n){n.target.composing=!0}function Ro(n){n.target.composing&&(n.target.composing=!1,qo(n.target,"input"))}function qo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function No(n){return!n.componentInstance||n.data&&n.data.transition?n:No(n.componentInstance._vnode)}var Ho={model:Do,show:{bind:function(n,e,t){var r=e.value,o=(t=No(t)).data&&t.data.transition,s=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,jo(t,(function(){n.style.display=s}))):n.style.display=r?s:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=No(t)).data&&t.data.transition?(t.data.show=!0,r?jo(t,(function(){n.style.display=n.__vOriginalDisplay})):Co(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},Uo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Yo(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Yo(ze(e.children)):n}function Zo(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var r in o)e[S(r)]=o[r];return e}function Jo(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Xo=function(n){return n.tag||he(n)},Wo=function(n){return"show"===n.name},Go={name:"transition",props:Uo,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Xo)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var s=Yo(o);if(!s)return o;if(this._leaving)return Jo(n,o);var a="__transition-".concat(this._uid,"-");s.key=null==s.key?s.isComment?a+"comment":a+s.tag:l(s.key)?0===String(s.key).indexOf(a)?s.key:a+s.key:s.key;var i=(s.data||(s.data={})).transition=Zo(this),c=this._vnode,p=Yo(c);if(s.data.directives&&s.data.directives.some(Wo)&&(s.data.show=!0),p&&p.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(s,p)&&!he(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var d=p.data.transition=T({},i);if("out-in"===r)return this._leaving=!0,Jn(d,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Jo(n,o);if("in-out"===r){if(he(s))return c;var u,m=function(){u()};Jn(i,"afterEnter",m),Jn(i,"enterCancelled",m),Jn(d,"delayLeave",(function(n){u=n}))}}return o}}},Qo=T({tag:String,moveClass:String},Uo);function Ko(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Vo(n){n.data.newPos=n.elm.getBoundingClientRect()}function ns(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var s=n.elm.style;s.transform=s.WebkitTransform="translate(".concat(r,"px,").concat(o,"px)"),s.transitionDuration="0s"}}delete Qo.mode;var es={Transition:Go,TransitionGroup:{props:Qo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Qe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],s=this.children=[],a=Zo(this),i=0;i<o.length;i++){if((p=o[i]).tag)if(null!=p.key&&0!==String(p.key).indexOf("__vlist"))s.push(p),t[p.key]=p,(p.data||(p.data={})).transition=a;else;}if(r){var l=[],c=[];for(i=0;i<r.length;i++){var p;(p=r[i]).data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?l.push(p):c.push(p)}this.kept=n(e,null,l),this.removed=c}return n(e,null,s)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Ko),n.forEach(Vo),n.forEach(ns),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;wo(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(fo,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(fo,n),t._moveCb=null,Eo(t,e))})}})))},methods:{hasMove:function(n,e){if(!ho)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){po(t,n)})),co(t,e),t.style.display="none",this.$el.appendChild(t);var r=So(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};Zt.config.mustUseProp=function(n,e,t){return"value"===t&&er(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Zt.config.isReservedTag=fr,Zt.config.isReservedAttr=nr,Zt.config.getTagNamespace=function(n){return gr(n)?"svg":"math"===n?"math":void 0},Zt.config.isUnknownElement=function(n){if(!X)return!0;if(fr(n))return!1;if(n=n.toLowerCase(),null!=br[n])return br[n];var e=document.createElement(n);return n.indexOf("-")>-1?br[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:br[n]=/HTMLUnknownElement/.test(e.toString())},T(Zt.options.directives,Ho),T(Zt.options.components,es),Zt.prototype.__patch__=X?Io:I,Zt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=hn),nt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new Ye(n,r,I,{before:function(){n._isMounted&&!n._isDestroyed&&nt(n,"beforeUpdate")}},!0),t=!1;var o=n._preWatchers;if(o)for(var s=0;s<o.length;s++)o[s].run();return null==n.$vnode&&(n._isMounted=!0,nt(n,"mounted")),n}(this,n=n&&X?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},X&&setTimeout((function(){N.devtools&&an&&an.emit("init",Zt)}),0)},function(n,e,t){"use strict";var r=t(65),o=r.all;n.exports=r.IS_HTMLDDA?function(n){return"function"==typeof n||n===o}:function(n){return"function"==typeof n}},function(n,e,t){"use strict";var r=t(104),o=Object.prototype.toString;function s(n){return"[object Array]"===o.call(n)}function a(n){return void 0===n}function i(n){return null!==n&&"object"==typeof n}function l(n){if("[object Object]"!==o.call(n))return!1;var e=Object.getPrototypeOf(n);return null===e||e===Object.prototype}function c(n){return"[object Function]"===o.call(n)}function p(n,e){if(null!=n)if("object"!=typeof n&&(n=[n]),s(n))for(var t=0,r=n.length;t<r;t++)e.call(null,n[t],t,n);else for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&e.call(null,n[o],o,n)}n.exports={isArray:s,isArrayBuffer:function(n){return"[object ArrayBuffer]"===o.call(n)},isBuffer:function(n){return null!==n&&!a(n)&&null!==n.constructor&&!a(n.constructor)&&"function"==typeof n.constructor.isBuffer&&n.constructor.isBuffer(n)},isFormData:function(n){return"undefined"!=typeof FormData&&n instanceof FormData},isArrayBufferView:function(n){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(n):n&&n.buffer&&n.buffer instanceof ArrayBuffer},isString:function(n){return"string"==typeof n},isNumber:function(n){return"number"==typeof n},isObject:i,isPlainObject:l,isUndefined:a,isDate:function(n){return"[object Date]"===o.call(n)},isFile:function(n){return"[object File]"===o.call(n)},isBlob:function(n){return"[object Blob]"===o.call(n)},isFunction:c,isStream:function(n){return i(n)&&c(n.pipe)},isURLSearchParams:function(n){return"undefined"!=typeof URLSearchParams&&n instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:p,merge:function n(){var e={};function t(t,r){l(e[r])&&l(t)?e[r]=n(e[r],t):l(t)?e[r]=n({},t):s(t)?e[r]=t.slice():e[r]=t}for(var r=0,o=arguments.length;r<o;r++)p(arguments[r],t);return e},extend:function(n,e,t){return p(e,(function(e,o){n[o]=t&&"function"==typeof e?r(e,t):e})),n},trim:function(n){return n.trim?n.trim():n.replace(/^\s+|\s+$/g,"")},stripBOM:function(n){return 65279===n.charCodeAt(0)&&(n=n.slice(1)),n}}},function(n,e,t){"use strict";function r(n,e,t,r,o,s,a,i){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),s&&(c._scopeId="data-v-"+s),a?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(a)},c._ssrRegister=l):o&&(l=i?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var p=c.render;c.render=function(n,e){return l.call(e),p(n,e)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=function(n){return n&&n.Math===Math&&n};n.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";var r=t(34),o=Function.prototype,s=o.call,a=r&&o.bind.bind(s,s);n.exports=r?a:function(n){return function(){return s.apply(n,arguments)}}},function(n,e,t){"use strict";n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";var r=t(7);n.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(79),o="object"==typeof self&&self&&self.Object===Object&&self,s=r||o||Function("return this")();n.exports=s},function(n,e,t){"use strict";var r=t(6),o=t(39),s=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return s(o(n),e)}},function(n,e,t){"use strict";var r=t(2),o=t(65),s=o.all;n.exports=o.IS_HTMLDDA?function(n){return"object"==typeof n?null!==n:r(n)||n===s}:function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(189),o=t(192);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";var r=SyntaxError,o=Function,s=TypeError,a=function(n){try{return o('"use strict"; return ('+n+").constructor;")()}catch(n){}},i=Object.getOwnPropertyDescriptor;if(i)try{i({},"")}catch(n){i=null}var l=function(){throw new s},c=i?function(){try{return l}catch(n){try{return i(arguments,"callee").get}catch(n){return l}}}():l,p=t(272)(),d=t(274)(),u=Object.getPrototypeOf||(d?function(n){return n.__proto__}:null),m={},h="undefined"!=typeof Uint8Array&&u?u(Uint8Array):void 0,g={"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":p&&u?u([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":m,"%AsyncGenerator%":m,"%AsyncGeneratorFunction%":m,"%AsyncIteratorPrototype%":m,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":m,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":p&&u?u(u([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&p&&u?u((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&p&&u?u((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":p&&u?u(""[Symbol.iterator]()):void 0,"%Symbol%":p?Symbol:void 0,"%SyntaxError%":r,"%ThrowTypeError%":c,"%TypedArray%":h,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet};if(u)try{null.error}catch(n){var f=u(u(n));g["%Error.prototype%"]=f}var b={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},y=t(54),v=t(276),x=y.call(Function.call,Array.prototype.concat),w=y.call(Function.apply,Array.prototype.splice),E=y.call(Function.call,String.prototype.replace),k=y.call(Function.call,String.prototype.slice),z=y.call(Function.call,RegExp.prototype.exec),S=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,A=/\\(\\)?/g,B=function(n){var e=k(n,0,1),t=k(n,-1);if("%"===e&&"%"!==t)throw new r("invalid intrinsic syntax, expected closing `%`");if("%"===t&&"%"!==e)throw new r("invalid intrinsic syntax, expected opening `%`");var o=[];return E(n,S,(function(n,e,t,r){o[o.length]=t?E(r,A,"$1"):e||n})),o},j=function(n,e){var t,o=n;if(v(b,o)&&(o="%"+(t=b[o])[0]+"%"),v(g,o)){var i=g[o];if(i===m&&(i=function n(e){var t;if("%AsyncFunction%"===e)t=a("async function () {}");else if("%GeneratorFunction%"===e)t=a("function* () {}");else if("%AsyncGeneratorFunction%"===e)t=a("async function* () {}");else if("%AsyncGenerator%"===e){var r=n("%AsyncGeneratorFunction%");r&&(t=r.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=n("%AsyncGenerator%");o&&u&&(t=u(o.prototype))}return g[e]=t,t}(o)),void 0===i&&!e)throw new s("intrinsic "+n+" exists, but is not available. Please file an issue!");return{alias:t,name:o,value:i}}throw new r("intrinsic "+n+" does not exist!")};n.exports=function(n,e){if("string"!=typeof n||0===n.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new s('"allowMissing" argument must be a boolean');if(null===z(/^%?[^%]*%?$/,n))throw new r("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var t=B(n),o=t.length>0?t[0]:"",a=j("%"+o+"%",e),l=a.name,c=a.value,p=!1,d=a.alias;d&&(o=d[0],w(t,x([0,1],d)));for(var u=1,m=!0;u<t.length;u+=1){var h=t[u],f=k(h,0,1),b=k(h,-1);if(('"'===f||"'"===f||"`"===f||'"'===b||"'"===b||"`"===b)&&f!==b)throw new r("property names with quotes must have matching quotes");if("constructor"!==h&&m||(p=!0),v(g,l="%"+(o+="."+h)+"%"))c=g[l];else if(null!=c){if(!(h in c)){if(!e)throw new s("base intrinsic for "+n+" exists, but the property is not available.");return}if(i&&u+1>=t.length){var y=i(c,h);c=(m=!!y)&&"get"in y&&!("originalValue"in y.get)?y.get:c[h]}else m=v(c,h),c=c[h];m&&!p&&(g[l]=c)}}return c}},function(n,e,t){var r=t(285),o=t(102),s=/[T ]/,a=/:/,i=/^(\d{2})$/,l=[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],c=/^(\d{4})/,p=[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],d=/^-(\d{2})$/,u=/^-?(\d{3})$/,m=/^-?(\d{2})-?(\d{2})$/,h=/^-?W(\d{2})$/,g=/^-?W(\d{2})-?(\d{1})$/,f=/^(\d{2}([.,]\d*)?)$/,b=/^(\d{2}):?(\d{2}([.,]\d*)?)$/,y=/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,v=/([Z+-].*)$/,x=/^(Z)$/,w=/^([+-])(\d{2})$/,E=/^([+-])(\d{2}):?(\d{2})$/;function k(n,e,t){e=e||0,t=t||0;var r=new Date(0);r.setUTCFullYear(n,0,4);var o=7*e+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}n.exports=function(n,e){if(o(n))return new Date(n.getTime());if("string"!=typeof n)return new Date(n);var t=(e||{}).additionalDigits;t=null==t?2:Number(t);var z=function(n){var e,t={},r=n.split(s);a.test(r[0])?(t.date=null,e=r[0]):(t.date=r[0],e=r[1]);if(e){var o=v.exec(e);o?(t.time=e.replace(o[1],""),t.timezone=o[1]):t.time=e}return t}(n),S=function(n,e){var t,r=l[e],o=p[e];if(t=c.exec(n)||o.exec(n)){var s=t[1];return{year:parseInt(s,10),restDateString:n.slice(s.length)}}if(t=i.exec(n)||r.exec(n)){var a=t[1];return{year:100*parseInt(a,10),restDateString:n.slice(a.length)}}return{year:null}}(z.date,t),A=S.year,B=function(n,e){if(null===e)return null;var t,r,o,s;if(0===n.length)return(r=new Date(0)).setUTCFullYear(e),r;if(t=d.exec(n))return r=new Date(0),o=parseInt(t[1],10)-1,r.setUTCFullYear(e,o),r;if(t=u.exec(n)){r=new Date(0);var a=parseInt(t[1],10);return r.setUTCFullYear(e,0,a),r}if(t=m.exec(n)){r=new Date(0),o=parseInt(t[1],10)-1;var i=parseInt(t[2],10);return r.setUTCFullYear(e,o,i),r}if(t=h.exec(n))return s=parseInt(t[1],10)-1,k(e,s);if(t=g.exec(n)){s=parseInt(t[1],10)-1;var l=parseInt(t[2],10)-1;return k(e,s,l)}return null}(S.restDateString,A);if(B){var j,C=B.getTime(),_=0;if(z.time&&(_=function(n){var e,t,r;if(e=f.exec(n))return(t=parseFloat(e[1].replace(",",".")))%24*36e5;if(e=b.exec(n))return t=parseInt(e[1],10),r=parseFloat(e[2].replace(",",".")),t%24*36e5+6e4*r;if(e=y.exec(n)){t=parseInt(e[1],10),r=parseInt(e[2],10);var o=parseFloat(e[3].replace(",","."));return t%24*36e5+6e4*r+1e3*o}return null}(z.time)),z.timezone)j=6e4*function(n){var e,t;if(e=x.exec(n))return 0;if(e=w.exec(n))return t=60*parseInt(e[2],10),"+"===e[1]?-t:t;if(e=E.exec(n))return t=60*parseInt(e[2],10)+parseInt(e[3],10),"+"===e[1]?-t:t;return 0}(z.timezone);else{var T=C+_,F=new Date(T);j=r(F);var I=new Date(T);I.setDate(F.getDate()+1);var D=r(I)-r(F);D>0&&(j+=D)}return new Date(C+_+j)}return new Date(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){"use strict";var r=t(270),o=t(283),s=t(55);n.exports={formats:s,parse:o,stringify:r}},function(n,e,t){"use strict";var r=t(1);e.a=new r.a},function(n,e,t){var r=t(21),o=t(174),s=t(175),a=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":a&&a in Object(n)?o(n):s(n)}},function(n,e,t){"use strict";var r=t(8),o=t(22),s=t(42);n.exports=r?function(n,e,t){return o.f(n,e,s(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(10).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(8),o=t(74),s=t(128),a=t(32),i=t(64),l=TypeError,c=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=r?s?function(n,e,t){if(a(n),e=i(e),a(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(a(n),e=i(e),a(t),o)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw new l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){"use strict";var r=t(6),o=r({}.toString),s=r("".slice);n.exports=function(n){return s(o(n),8,-1)}},function(n,e,t){var r=t(179),o=t(180),s=t(181),a=t(182),i=t(183);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=s,l.prototype.has=a,l.prototype.set=i,n.exports=l},function(n,e,t){var r=t(81);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(13)(Object,"create");n.exports=r},function(n,e,t){var r=t(201);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(52);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,s=/^0o[0-7]+$/i,a=parseInt,i="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=i||l||Function("return this")(),p=Object.prototype.toString,d=Math.max,u=Math.min,m=function(){return c.Date.now()};function h(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==p.call(n)}(n))return NaN;if(h(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=h(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var i=o.test(n);return i||s.test(n)?a(n.slice(2),i?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,s,a,i,l,c=0,p=!1,f=!1,b=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function y(e){var t=r,s=o;return r=o=void 0,c=e,a=n.apply(s,t)}function v(n){return c=n,i=setTimeout(w,e),p?y(n):a}function x(n){var t=n-l;return void 0===l||t>=e||t<0||f&&n-c>=s}function w(){var n=m();if(x(n))return E(n);i=setTimeout(w,function(n){var t=e-(n-l);return f?u(t,s-(n-c)):t}(n))}function E(n){return i=void 0,b&&r?y(n):(r=o=void 0,a)}function k(){var n=m(),t=x(n);if(r=arguments,o=this,l=n,t){if(void 0===i)return v(l);if(f)return i=setTimeout(w,e),y(l)}return void 0===i&&(i=setTimeout(w,e)),a}return e=g(e)||0,h(t)&&(p=!!t.leading,s=(f="maxWait"in t)?d(g(t.maxWait)||0,e):s,b="trailing"in t?!!t.trailing:b),k.cancel=function(){void 0!==i&&clearTimeout(i),c=0,r=l=o=i=void 0},k.flush=function(){return void 0===i?a:E(m())},k}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function s(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),p=r.speed,d=r.easing;return l.offsetWidth,a((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),i(c,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+s(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+s(n)+"%,0)"}:{"margin-left":s(n)+"%"}).transition="all "+e+"ms "+t,o}(n,p,d)),1===n?(i(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){i(l,{transition:"all "+p+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),p)}),p)):setTimeout(e,p)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,a=e.querySelector(r.barSelector),l=n?"-100":s(t.status||0),p=document.querySelector(r.parent);return i(a,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&u(o),p!=document.body&&c(p,"nprogress-custom-parent"),p.appendChild(e),e},t.remove=function(){p(document.documentElement,"nprogress-busy"),p(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&u(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var a=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),i=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,s=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+s)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,s=arguments;if(2==s.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,s[1],s[2])}}();function l(n,e){return("string"==typeof n?n:d(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=d(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function p(n,e){var t,r=d(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function d(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function u(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){"use strict";var r=t(33),o=t(39),s=t(40),a=t(154),i=t(156);r({target:"Array",proto:!0,arity:1,forced:t(7)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=o(this),t=s(e),r=arguments.length;i(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return a(e,t),t}})},function(n,e,t){"use strict";var r=t(12),o=String,s=TypeError;n.exports=function(n){if(r(n))return n;throw new s(o(n)+" is not an object")}},function(n,e,t){"use strict";var r=t(5),o=t(61).f,s=t(20),a=t(122),i=t(44),l=t(75),c=t(150);n.exports=function(n,e){var t,p,d,u,m,h=n.target,g=n.global,f=n.stat;if(t=g?r:f?r[h]||i(h,{}):(r[h]||{}).prototype)for(p in e){if(u=e[p],d=n.dontCallGetSet?(m=o(t,p))&&m.value:t[p],!c(g?p:h+(f?".":"#")+p,n.forced)&&void 0!==d){if(typeof u==typeof d)continue;l(u,d)}(n.sham||d&&d.sham)&&s(u,"sham",!0),a(t,p,u,n)}}},function(n,e,t){"use strict";var r=t(7);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){"use strict";var r=t(58),o=t(62);n.exports=function(n){return r(o(n))}},function(n,e,t){"use strict";var r=t(5),o=t(2),s=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?s(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";var r=t(2),o=t(137),s=TypeError;n.exports=function(n){if(r(n))return n;throw new s(o(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(5),o=t(71),s=t(11),a=t(73),i=t(69),l=t(68),c=r.Symbol,p=o("wks"),d=l?c.for||c:c&&c.withoutSetter||a;n.exports=function(n){return s(p,n)||(p[n]=i&&s(c,n)?c[n]:d("Symbol."+n)),p[n]}},function(n,e,t){"use strict";var r=t(62),o=Object;n.exports=function(n){return o(r(n))}},function(n,e,t){"use strict";var r=t(148);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(34),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e,t){"use strict";n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var r=t(5),o=t(44),s=r["__core-js_shared__"]||o("__core-js_shared__",{});n.exports=s},function(n,e,t){"use strict";var r=t(5),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(173),o=t(16),s=Object.prototype,a=s.hasOwnProperty,i=s.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return o(n)&&a.call(n,"callee")&&!i.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(13)(t(10),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(193),o=t(200),s=t(202),a=t(203),i=t(204);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=s,l.prototype.has=a,l.prototype.set=i,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(9),o=t(52),s=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(a.test(n)||!s.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(19),o=t(16);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(275);n.exports=Function.prototype.bind||r},function(n,e,t){"use strict";var r=String.prototype.replace,o=/%20/g,s="RFC1738",a="RFC3986";n.exports={default:a,formatters:{RFC1738:function(n){return r.call(n,o,"+")},RFC3986:function(n){return String(n)}},RFC1738:s,RFC3986:a}},function(n,e,t){var r=t(290);n.exports=function(n){return r(n,{weekStartsOn:1})}},function(n,e,t){"use strict";var r=t(3),o=t(302),s=t(106),a={"Content-Type":"application/x-www-form-urlencoded"};function i(n,e){!r.isUndefined(n)&&r.isUndefined(n["Content-Type"])&&(n["Content-Type"]=e)}var l,c={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=t(107)),l),transformRequest:[function(n,e){return o(e,"Accept"),o(e,"Content-Type"),r.isFormData(n)||r.isArrayBuffer(n)||r.isBuffer(n)||r.isStream(n)||r.isFile(n)||r.isBlob(n)?n:r.isArrayBufferView(n)?n.buffer:r.isURLSearchParams(n)?(i(e,"application/x-www-form-urlencoded;charset=utf-8"),n.toString()):r.isObject(n)||e&&"application/json"===e["Content-Type"]?(i(e,"application/json"),function(n,e,t){if(r.isString(n))try{return(e||JSON.parse)(n),r.trim(n)}catch(n){if("SyntaxError"!==n.name)throw n}return(t||JSON.stringify)(n)}(n)):n}],transformResponse:[function(n){var e=this.transitional,t=e&&e.silentJSONParsing,o=e&&e.forcedJSONParsing,a=!t&&"json"===this.responseType;if(a||o&&r.isString(n)&&n.length)try{return JSON.parse(n)}catch(n){if(a){if("SyntaxError"===n.name)throw s(n,this,"E_JSON_PARSE");throw n}}return n}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(n){return n>=200&&n<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(n){c.headers[n]={}})),r.forEach(["post","put","patch"],(function(n){c.headers[n]=r.merge(a)})),n.exports=c},function(n,e,t){"use strict";var r=t(6),o=t(7),s=t(23),a=Object,i=r("".split);n.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(n){return"String"===s(n)?i(n,""):a(n)}:a},function(n,e,t){"use strict";n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e,t){"use strict";var r=t(8),o=t(41),s=t(133),a=t(42),i=t(35),l=t(64),c=t(11),p=t(74),d=Object.getOwnPropertyDescriptor;e.f=r?d:function(n,e){if(n=i(n),e=l(e),p)try{return d(n,e)}catch(n){}if(c(n,e))return a(!o(s.f,n,e),n[e])}},function(n,e,t){"use strict";var r=t(63),o=TypeError;n.exports=function(n){if(r(n))throw new o("Can't call method on "+n);return n}},function(n,e,t){"use strict";n.exports=function(n){return null==n}},function(n,e,t){"use strict";var r=t(134),o=t(66);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e,t){"use strict";var r="object"==typeof document&&document.all,o=void 0===r&&void 0!==r;n.exports={all:r,IS_HTMLDDA:o}},function(n,e,t){"use strict";var r=t(36),o=t(2),s=t(67),a=t(68),i=Object;n.exports=a?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return o(e)&&s(e.prototype,i(n))}},function(n,e,t){"use strict";var r=t(6);n.exports=r({}.isPrototypeOf)},function(n,e,t){"use strict";var r=t(69);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){"use strict";var r=t(70),o=t(7),s=t(5).String;n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol("symbol detection");return!s(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){"use strict";var r,o,s=t(5),a=t(135),i=s.process,l=s.Deno,c=i&&i.versions||l&&l.version,p=c&&c.v8;p&&(o=(r=p.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){"use strict";var r=t(72),o=t(43);(n.exports=function(n,e){return o[n]||(o[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.33.3",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.33.3/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){"use strict";n.exports=!1},function(n,e,t){"use strict";var r=t(6),o=0,s=Math.random(),a=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+a(++o+s,36)}},function(n,e,t){"use strict";var r=t(8),o=t(7),s=t(127);n.exports=!r&&!o((function(){return 7!==Object.defineProperty(s("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){"use strict";var r=t(11),o=t(143),s=t(61),a=t(22);n.exports=function(n,e,t){for(var i=o(e),l=a.f,c=s.f,p=0;p<i.length;p++){var d=i[p];r(n,d)||t&&r(t,d)||l(n,d,c(e,d))}}},function(n,e,t){"use strict";var r=t(147);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){"use strict";var r=t(160),o=t(32),s=t(161);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),s(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(24),o=t(184),s=t(185),a=t(186),i=t(187),l=t(188);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=o,c.prototype.delete=s,c.prototype.get=a,c.prototype.has=i,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(19),o=t(47);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(205),o=t(16);n.exports=function n(e,t,s,a,i){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,s,a,n,i))}},function(n,e,t){var r=t(86),o=t(208),s=t(87);n.exports=function(n,e,t,a,i,l){var c=1&t,p=n.length,d=e.length;if(p!=d&&!(c&&d>p))return!1;var u=l.get(n),m=l.get(e);if(u&&m)return u==e&&m==n;var h=-1,g=!0,f=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++h<p;){var b=n[h],y=e[h];if(a)var v=c?a(y,b,h,e,n,l):a(b,y,h,n,e,l);if(void 0!==v){if(v)continue;g=!1;break}if(f){if(!o(e,(function(n,e){if(!s(f,e)&&(b===n||i(b,n,t,a,l)))return f.push(e)}))){g=!1;break}}else if(b!==y&&!i(b,y,t,a,l)){g=!1;break}}return l.delete(n),l.delete(e),g}},function(n,e,t){var r=t(48),o=t(206),s=t(207);function a(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}a.prototype.add=a.prototype.push=o,a.prototype.has=s,n.exports=a},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(218),o=t(224),s=t(92);n.exports=function(n){return s(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(10),o=t(220),s=e&&!e.nodeType&&e,a=s&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===s?r.Buffer:void 0,l=(i?i.isBuffer:void 0)||o;n.exports=l}).call(this,t(60)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(221),o=t(222),s=t(223),a=s&&s.isTypedArray,i=a?o(a):r;n.exports=i},function(n,e,t){var r=t(82),o=t(50);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(13)(t(10),"Set");n.exports=r},function(n,e,t){var r=t(47);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(97),o=t(28);n.exports=function(n,e){for(var t=0,s=(e=r(e,n)).length;null!=n&&t<s;)n=n[o(e[t++])];return t&&t==s?n:void 0}},function(n,e,t){var r=t(9),o=t(51),s=t(235),a=t(238);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:s(a(n))}},function(n,e,t){},function(n,e,t){"use strict";var r=t(14)("%Object.defineProperty%",!0),o=function(){if(r)try{return r({},"a",{value:1}),!0}catch(n){return!1}return!1};o.hasArrayLengthDefineBug=function(){if(!o())return null;try{return 1!==r([],"length",{value:1}).length}catch(n){return!0}},n.exports=o},function(n,e,t){"use strict";var r=t(14)("%Object.getOwnPropertyDescriptor%",!0);if(r)try{r([],"length")}catch(n){r=null}n.exports=r},function(n,e,t){"use strict";var r=t(55),o=Object.prototype.hasOwnProperty,s=Array.isArray,a=function(){for(var n=[],e=0;e<256;++e)n.push("%"+((e<16?"0":"")+e.toString(16)).toUpperCase());return n}(),i=function(n,e){for(var t=e&&e.plainObjects?Object.create(null):{},r=0;r<n.length;++r)void 0!==n[r]&&(t[r]=n[r]);return t};n.exports={arrayToObject:i,assign:function(n,e){return Object.keys(e).reduce((function(n,t){return n[t]=e[t],n}),n)},combine:function(n,e){return[].concat(n,e)},compact:function(n){for(var e=[{obj:{o:n},prop:"o"}],t=[],r=0;r<e.length;++r)for(var o=e[r],a=o.obj[o.prop],i=Object.keys(a),l=0;l<i.length;++l){var c=i[l],p=a[c];"object"==typeof p&&null!==p&&-1===t.indexOf(p)&&(e.push({obj:a,prop:c}),t.push(p))}return function(n){for(;n.length>1;){var e=n.pop(),t=e.obj[e.prop];if(s(t)){for(var r=[],o=0;o<t.length;++o)void 0!==t[o]&&r.push(t[o]);e.obj[e.prop]=r}}}(e),n},decode:function(n,e,t){var r=n.replace(/\+/g," ");if("iso-8859-1"===t)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(n){return r}},encode:function(n,e,t,o,s){if(0===n.length)return n;var i=n;if("symbol"==typeof n?i=Symbol.prototype.toString.call(n):"string"!=typeof n&&(i=String(n)),"iso-8859-1"===t)return escape(i).replace(/%u[0-9a-f]{4}/gi,(function(n){return"%26%23"+parseInt(n.slice(2),16)+"%3B"}));for(var l="",c=0;c<i.length;++c){var p=i.charCodeAt(c);45===p||46===p||95===p||126===p||p>=48&&p<=57||p>=65&&p<=90||p>=97&&p<=122||s===r.RFC1738&&(40===p||41===p)?l+=i.charAt(c):p<128?l+=a[p]:p<2048?l+=a[192|p>>6]+a[128|63&p]:p<55296||p>=57344?l+=a[224|p>>12]+a[128|p>>6&63]+a[128|63&p]:(c+=1,p=65536+((1023&p)<<10|1023&i.charCodeAt(c)),l+=a[240|p>>18]+a[128|p>>12&63]+a[128|p>>6&63]+a[128|63&p])}return l},isBuffer:function(n){return!(!n||"object"!=typeof n)&&!!(n.constructor&&n.constructor.isBuffer&&n.constructor.isBuffer(n))},isRegExp:function(n){return"[object RegExp]"===Object.prototype.toString.call(n)},maybeMap:function(n,e){if(s(n)){for(var t=[],r=0;r<n.length;r+=1)t.push(e(n[r]));return t}return e(n)},merge:function n(e,t,r){if(!t)return e;if("object"!=typeof t){if(s(e))e.push(t);else{if(!e||"object"!=typeof e)return[e,t];(r&&(r.plainObjects||r.allowPrototypes)||!o.call(Object.prototype,t))&&(e[t]=!0)}return e}if(!e||"object"!=typeof e)return[e].concat(t);var a=e;return s(e)&&!s(t)&&(a=i(e,r)),s(e)&&s(t)?(t.forEach((function(t,s){if(o.call(e,s)){var a=e[s];a&&"object"==typeof a&&t&&"object"==typeof t?e[s]=n(a,t,r):e.push(t)}else e[s]=t})),e):Object.keys(t).reduce((function(e,s){var a=t[s];return o.call(e,s)?e[s]=n(e[s],a,r):e[s]=a,e}),a)}}},function(n,e){n.exports=function(n){return n instanceof Date}},function(n,e,t){var r=t(15),o=t(56);n.exports=function(n){var e=r(n),t=e.getFullYear(),s=new Date(0);s.setFullYear(t+1,0,4),s.setHours(0,0,0,0);var a=o(s),i=new Date(0);i.setFullYear(t,0,4),i.setHours(0,0,0,0);var l=o(i);return e.getTime()>=a.getTime()?t+1:e.getTime()>=l.getTime()?t:t-1}},function(n,e,t){"use strict";n.exports=function(n,e){return function(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];return n.apply(e,t)}}},function(n,e,t){"use strict";var r=t(3);function o(n){return encodeURIComponent(n).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}n.exports=function(n,e,t){if(!e)return n;var s;if(t)s=t(e);else if(r.isURLSearchParams(e))s=e.toString();else{var a=[];r.forEach(e,(function(n,e){null!=n&&(r.isArray(n)?e+="[]":n=[n],r.forEach(n,(function(n){r.isDate(n)?n=n.toISOString():r.isObject(n)&&(n=JSON.stringify(n)),a.push(o(e)+"="+o(n))})))})),s=a.join("&")}if(s){var i=n.indexOf("#");-1!==i&&(n=n.slice(0,i)),n+=(-1===n.indexOf("?")?"?":"&")+s}return n}},function(n,e,t){"use strict";n.exports=function(n,e,t,r,o){return n.config=e,t&&(n.code=t),n.request=r,n.response=o,n.isAxiosError=!0,n.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},n}},function(n,e,t){"use strict";var r=t(3),o=t(303),s=t(304),a=t(105),i=t(305),l=t(308),c=t(309),p=t(108);n.exports=function(n){return new Promise((function(e,t){var d=n.data,u=n.headers,m=n.responseType;r.isFormData(d)&&delete u["Content-Type"];var h=new XMLHttpRequest;if(n.auth){var g=n.auth.username||"",f=n.auth.password?unescape(encodeURIComponent(n.auth.password)):"";u.Authorization="Basic "+btoa(g+":"+f)}var b=i(n.baseURL,n.url);function y(){if(h){var r="getAllResponseHeaders"in h?l(h.getAllResponseHeaders()):null,s={data:m&&"text"!==m&&"json"!==m?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:n,request:h};o(e,t,s),h=null}}if(h.open(n.method.toUpperCase(),a(b,n.params,n.paramsSerializer),!0),h.timeout=n.timeout,"onloadend"in h?h.onloadend=y:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(y)},h.onabort=function(){h&&(t(p("Request aborted",n,"ECONNABORTED",h)),h=null)},h.onerror=function(){t(p("Network Error",n,null,h)),h=null},h.ontimeout=function(){var e="timeout of "+n.timeout+"ms exceeded";n.timeoutErrorMessage&&(e=n.timeoutErrorMessage),t(p(e,n,n.transitional&&n.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var v=(n.withCredentials||c(b))&&n.xsrfCookieName?s.read(n.xsrfCookieName):void 0;v&&(u[n.xsrfHeaderName]=v)}"setRequestHeader"in h&&r.forEach(u,(function(n,e){void 0===d&&"content-type"===e.toLowerCase()?delete u[e]:h.setRequestHeader(e,n)})),r.isUndefined(n.withCredentials)||(h.withCredentials=!!n.withCredentials),m&&"json"!==m&&(h.responseType=n.responseType),"function"==typeof n.onDownloadProgress&&h.addEventListener("progress",n.onDownloadProgress),"function"==typeof n.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",n.onUploadProgress),n.cancelToken&&n.cancelToken.promise.then((function(n){h&&(h.abort(),t(n),h=null)})),d||(d=null),h.send(d)}))}},function(n,e,t){"use strict";var r=t(106);n.exports=function(n,e,t,o,s){var a=new Error(n);return r(a,e,t,o,s)}},function(n,e,t){"use strict";n.exports=function(n){return!(!n||!n.__CANCEL__)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){e=e||{};var t={},o=["url","method","data"],s=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],i=["validateStatus"];function l(n,e){return r.isPlainObject(n)&&r.isPlainObject(e)?r.merge(n,e):r.isPlainObject(e)?r.merge({},e):r.isArray(e)?e.slice():e}function c(o){r.isUndefined(e[o])?r.isUndefined(n[o])||(t[o]=l(void 0,n[o])):t[o]=l(n[o],e[o])}r.forEach(o,(function(n){r.isUndefined(e[n])||(t[n]=l(void 0,e[n]))})),r.forEach(s,c),r.forEach(a,(function(o){r.isUndefined(e[o])?r.isUndefined(n[o])||(t[o]=l(void 0,n[o])):t[o]=l(void 0,e[o])})),r.forEach(i,(function(r){r in e?t[r]=l(n[r],e[r]):r in n&&(t[r]=l(void 0,n[r]))}));var p=o.concat(s).concat(a).concat(i),d=Object.keys(n).concat(Object.keys(e)).filter((function(n){return-1===p.indexOf(n)}));return r.forEach(d,c),t}},function(n,e,t){"use strict";function r(n){this.message=n}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,n.exports=r},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(171),o=t(176),s=t(247),a=t(255),i=t(264),l=t(124),c=s((function(n){var e=l(n);return i(e)&&(e=void 0),a(r(n,1,i,!0),o(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var s="",a=0,i=0;for(a=o.index;a<t.length;a++){switch(t.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}i!==a&&(s+=t.substring(i,a)),i=a+1,s+=e}return i!==a?s+t.substring(i,a):s}},function(n,e,t){var r=t(284),o=t(289),s=t(103),a=t(15),i=t(292),l=t(293);var c={M:function(n){return n.getMonth()+1},MM:function(n){return u(n.getMonth()+1,2)},Q:function(n){return Math.ceil((n.getMonth()+1)/3)},D:function(n){return n.getDate()},DD:function(n){return u(n.getDate(),2)},DDD:function(n){return r(n)},DDDD:function(n){return u(r(n),3)},d:function(n){return n.getDay()},E:function(n){return n.getDay()||7},W:function(n){return o(n)},WW:function(n){return u(o(n),2)},YY:function(n){return u(n.getFullYear(),4).substr(2)},YYYY:function(n){return u(n.getFullYear(),4)},GG:function(n){return String(s(n)).substr(2)},GGGG:function(n){return s(n)},H:function(n){return n.getHours()},HH:function(n){return u(n.getHours(),2)},h:function(n){var e=n.getHours();return 0===e?12:e>12?e%12:e},hh:function(n){return u(c.h(n),2)},m:function(n){return n.getMinutes()},mm:function(n){return u(n.getMinutes(),2)},s:function(n){return n.getSeconds()},ss:function(n){return u(n.getSeconds(),2)},S:function(n){return Math.floor(n.getMilliseconds()/100)},SS:function(n){return u(Math.floor(n.getMilliseconds()/10),2)},SSS:function(n){return u(n.getMilliseconds(),3)},Z:function(n){return d(n.getTimezoneOffset(),":")},ZZ:function(n){return d(n.getTimezoneOffset())},X:function(n){return Math.floor(n.getTime()/1e3)},x:function(n){return n.getTime()}};function p(n){return n.match(/\[[\s\S]/)?n.replace(/^\[|]$/g,""):n.replace(/\\/g,"")}function d(n,e){e=e||"";var t=n>0?"-":"+",r=Math.abs(n),o=r%60;return t+u(Math.floor(r/60),2)+e+u(o,2)}function u(n,e){for(var t=Math.abs(n).toString();t.length<e;)t="0"+t;return t}n.exports=function(n,e,t){var r=e?String(e):"YYYY-MM-DDTHH:mm:ss.SSSZ",o=(t||{}).locale,s=l.format.formatters,d=l.format.formattingTokensRegExp;o&&o.format&&o.format.formatters&&(s=o.format.formatters,o.format.formattingTokensRegExp&&(d=o.format.formattingTokensRegExp));var u=a(n);return i(u)?function(n,e,t){var r,o,s=n.match(t),a=s.length;for(r=0;r<a;r++)o=e[s[r]]||c[s[r]],s[r]=o||p(s[r]);return function(n){for(var e="",t=0;t<a;t++)s[t]instanceof Function?e+=s[t](n,c):e+=s[t];return e}}(r,s,d)(u):"Invalid Date"}},function(n,e,t){n.exports=t(297)},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,s=/^0o[0-7]+$/i,a=parseInt,i="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=i||l||Function("return this")(),p=Object.prototype.toString,d=Math.max,u=Math.min,m=function(){return c.Date.now()};function h(n,e,t){var r,o,s,a,i,l,c=0,p=!1,h=!1,b=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function y(e){var t=r,s=o;return r=o=void 0,c=e,a=n.apply(s,t)}function v(n){return c=n,i=setTimeout(w,e),p?y(n):a}function x(n){var t=n-l;return void 0===l||t>=e||t<0||h&&n-c>=s}function w(){var n=m();if(x(n))return E(n);i=setTimeout(w,function(n){var t=e-(n-l);return h?u(t,s-(n-c)):t}(n))}function E(n){return i=void 0,b&&r?y(n):(r=o=void 0,a)}function k(){var n=m(),t=x(n);if(r=arguments,o=this,l=n,t){if(void 0===i)return v(l);if(h)return i=setTimeout(w,e),y(l)}return void 0===i&&(i=setTimeout(w,e)),a}return e=f(e)||0,g(t)&&(p=!!t.leading,s=(h="maxWait"in t)?d(f(t.maxWait)||0,e):s,b="trailing"in t?!!t.trailing:b),k.cancel=function(){void 0!==i&&clearTimeout(i),c=0,r=l=o=i=void 0},k.flush=function(){return void 0===i?a:E(m())},k}function g(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function f(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==p.call(n)}(n))return NaN;if(g(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=g(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var i=o.test(n);return i||s.test(n)?a(n.slice(2),i?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r=!0,o=!0;if("function"!=typeof n)throw new TypeError("Expected a function");return g(t)&&(r="leading"in t?!!t.leading:r,o="trailing"in t?!!t.trailing:o),h(n,e,{leading:r,maxWait:e,trailing:o})}},function(n,e,t){"use strict";var r=t(2),o=t(22),s=t(125),a=t(44);n.exports=function(n,e,t,i){i||(i={});var l=i.enumerable,c=void 0!==i.name?i.name:e;if(r(t)&&s(t,c,i),i.global)l?n[e]=t:a(e,t);else{try{i.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:o.f(n,e,{value:t,enumerable:!1,configurable:!i.nonConfigurable,writable:!i.nonWritable})}return n}},function(n,e,t){"use strict";var r=t(165),o=String;n.exports=function(n){if("Symbol"===r(n))throw new TypeError("Cannot convert a Symbol value to a string");return o(n)}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){"use strict";var r=t(6),o=t(7),s=t(2),a=t(11),i=t(8),l=t(139).CONFIGURABLE,c=t(140),p=t(141),d=p.enforce,u=p.get,m=String,h=Object.defineProperty,g=r("".slice),f=r("".replace),b=r([].join),y=i&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),v=String(String).split("String"),x=n.exports=function(n,e,t){"Symbol("===g(m(e),0,7)&&(e="["+f(m(e),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!a(n,"name")||l&&n.name!==e)&&(i?h(n,"name",{value:e,configurable:!0}):n.name=e),y&&t&&a(t,"arity")&&n.length!==t.arity&&h(n,"length",{value:t.arity});try{t&&a(t,"constructor")&&t.constructor?i&&h(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=d(n);return a(r,"source")||(r.source=b(v,"string"==typeof e?e:"")),n};Function.prototype.toString=x((function(){return s(this)&&u(this).source||c(this)}),"toString")},function(n,e,t){"use strict";n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r=t(5),o=t(12),s=r.document,a=o(s)&&o(s.createElement);n.exports=function(n){return a?s.createElement(n):{}}},function(n,e,t){"use strict";var r=t(8),o=t(7);n.exports=r&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){"use strict";var r=t(71),o=t(73),s=r("keys");n.exports=function(n){return s[n]||(s[n]=o(n))}},function(n,e,t){"use strict";var r=t(6),o=t(11),s=t(35),a=t(145).indexOf,i=t(59),l=r([].push);n.exports=function(n,e){var t,r=s(n),c=0,p=[];for(t in r)!o(i,t)&&o(r,t)&&l(p,t);for(;e.length>c;)o(r,t=e[c++])&&(~a(p,t)||l(p,t));return p}},function(n,e,t){n.exports=t(321)},function(n,e,t){"use strict";var r=t(33),o=t(151).left,s=t(152),a=t(70);r({target:"Array",proto:!0,forced:!t(153)&&a>79&&a<83||!s("reduce")},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,s=o&&!r.call({1:2},1);e.f=s?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){"use strict";var r=t(41),o=t(12),s=t(66),a=t(136),i=t(138),l=t(38),c=TypeError,p=l("toPrimitive");n.exports=function(n,e){if(!o(n)||s(n))return n;var t,l=a(n,p);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!o(t)||s(t))return t;throw new c("Can't convert object to primitive value")}return void 0===e&&(e="number"),i(n,e)}},function(n,e,t){"use strict";n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){"use strict";var r=t(37),o=t(63);n.exports=function(n,e){var t=n[e];return o(t)?void 0:r(t)}},function(n,e,t){"use strict";var r=String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){"use strict";var r=t(41),o=t(2),s=t(12),a=TypeError;n.exports=function(n,e){var t,i;if("string"===e&&o(t=n.toString)&&!s(i=r(t,n)))return i;if(o(t=n.valueOf)&&!s(i=r(t,n)))return i;if("string"!==e&&o(t=n.toString)&&!s(i=r(t,n)))return i;throw new a("Can't convert object to primitive value")}},function(n,e,t){"use strict";var r=t(8),o=t(11),s=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,i=o(s,"name"),l=i&&"something"===function(){}.name,c=i&&(!r||r&&a(s,"name").configurable);n.exports={EXISTS:i,PROPER:l,CONFIGURABLE:c}},function(n,e,t){"use strict";var r=t(6),o=t(2),s=t(43),a=r(Function.toString);o(s.inspectSource)||(s.inspectSource=function(n){return a(n)}),n.exports=s.inspectSource},function(n,e,t){"use strict";var r,o,s,a=t(142),i=t(5),l=t(12),c=t(20),p=t(11),d=t(43),u=t(129),m=t(59),h=i.TypeError,g=i.WeakMap;if(a||d.state){var f=d.state||(d.state=new g);f.get=f.get,f.has=f.has,f.set=f.set,r=function(n,e){if(f.has(n))throw new h("Object already initialized");return e.facade=n,f.set(n,e),e},o=function(n){return f.get(n)||{}},s=function(n){return f.has(n)}}else{var b=u("state");m[b]=!0,r=function(n,e){if(p(n,b))throw new h("Object already initialized");return e.facade=n,c(n,b,e),e},o=function(n){return p(n,b)?n[b]:{}},s=function(n){return p(n,b)}}n.exports={set:r,get:o,has:s,enforce:function(n){return s(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=o(e)).type!==n)throw new h("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(5),o=t(2),s=r.WeakMap;n.exports=o(s)&&/native code/.test(String(s))},function(n,e,t){"use strict";var r=t(36),o=t(6),s=t(144),a=t(149),i=t(32),l=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=s.f(i(n)),t=a.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var r=t(130),o=t(126).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){"use strict";var r=t(35),o=t(146),s=t(40),a=function(n){return function(e,t,a){var i,l=r(e),c=s(l),p=o(a,c);if(n&&t!=t){for(;c>p;)if((i=l[p++])!=i)return!0}else for(;c>p;p++)if((n||p in l)&&l[p]===t)return n||p||0;return!n&&-1}};n.exports={includes:a(!0),indexOf:a(!1)}},function(n,e,t){"use strict";var r=t(76),o=Math.max,s=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):s(t,e)}},function(n,e,t){"use strict";var r=Math.ceil,o=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?o:r)(e)}},function(n,e,t){"use strict";var r=t(76),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,e,t){"use strict";e.f=Object.getOwnPropertySymbols},function(n,e,t){"use strict";var r=t(7),o=t(2),s=/#|\.prototype\./,a=function(n,e){var t=l[i(n)];return t===p||t!==c&&(o(e)?r(e):!!e)},i=a.normalize=function(n){return String(n).replace(s,".").toLowerCase()},l=a.data={},c=a.NATIVE="N",p=a.POLYFILL="P";n.exports=a},function(n,e,t){"use strict";var r=t(37),o=t(39),s=t(58),a=t(40),i=TypeError,l=function(n){return function(e,t,l,c){r(t);var p=o(e),d=s(p),u=a(p),m=n?u-1:0,h=n?-1:1;if(l<2)for(;;){if(m in d){c=d[m],m+=h;break}if(m+=h,n?m<0:u<=m)throw new i("Reduce of empty array with no initial value")}for(;n?m>=0:u>m;m+=h)m in d&&(c=t(c,d[m],m,p));return c}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r=t(7);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var r=t(5),o=t(23);n.exports="process"===o(r.process)},function(n,e,t){"use strict";var r=t(8),o=t(155),s=TypeError,a=Object.getOwnPropertyDescriptor,i=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=i?function(n,e){if(o(n)&&!a(n,"length").writable)throw new s("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){"use strict";var r=t(23);n.exports=Array.isArray||function(n){return"Array"===r(n)}},function(n,e,t){"use strict";var r=TypeError;n.exports=function(n){if(n>9007199254740991)throw r("Maximum allowed index exceeded");return n}},function(n,e,t){"use strict";var r=t(33),o=t(5),s=t(158),a=t(159),i=o.WebAssembly,l=7!==new Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=a(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},p=function(n,e){if(i&&i[n]){var t={};t[n]=a("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return s(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return s(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return s(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return s(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return s(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return s(n,this,arguments)}})),c("URIError",(function(n){return function(e){return s(n,this,arguments)}})),p("CompileError",(function(n){return function(e){return s(n,this,arguments)}})),p("LinkError",(function(n){return function(e){return s(n,this,arguments)}})),p("RuntimeError",(function(n){return function(e){return s(n,this,arguments)}}))},function(n,e,t){"use strict";var r=t(34),o=Function.prototype,s=o.apply,a=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(s):function(){return a.apply(s,arguments)})},function(n,e,t){"use strict";var r=t(36),o=t(11),s=t(20),a=t(67),i=t(77),l=t(75),c=t(162),p=t(163),d=t(164),u=t(167),m=t(168),h=t(8),g=t(72);n.exports=function(n,e,t,f){var b=f?2:1,y=n.split("."),v=y[y.length-1],x=r.apply(null,y);if(x){var w=x.prototype;if(!g&&o(w,"cause")&&delete w.cause,!t)return x;var E=r("Error"),k=e((function(n,e){var t=d(f?e:n,void 0),r=f?new x(n):new x;return void 0!==t&&s(r,"message",t),m(r,k,r.stack,2),this&&a(w,this)&&p(r,this,k),arguments.length>b&&u(r,arguments[b]),r}));if(k.prototype=w,"Error"!==v?i?i(k,E):l(k,E,{name:!0}):h&&"stackTraceLimit"in x&&(c(k,x,"stackTraceLimit"),c(k,x,"prepareStackTrace")),l(k,x),!g)try{w.name!==v&&s(w,"name",v),w.constructor=k}catch(n){}return k}}},function(n,e,t){"use strict";var r=t(6),o=t(37);n.exports=function(n,e,t){try{return r(o(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){"use strict";var r=t(2),o=String,s=TypeError;n.exports=function(n){if("object"==typeof n||r(n))return n;throw new s("Can't set "+o(n)+" as a prototype")}},function(n,e,t){"use strict";var r=t(22).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var r=t(2),o=t(12),s=t(77);n.exports=function(n,e,t){var a,i;return s&&r(a=e.constructor)&&a!==t&&o(i=a.prototype)&&i!==t.prototype&&s(n,i),n}},function(n,e,t){"use strict";var r=t(123);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){"use strict";var r=t(166),o=t(2),s=t(23),a=t(38)("toStringTag"),i=Object,l="Arguments"===s(function(){return arguments}());n.exports=r?s:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=i(n),a))?t:l?s(e):"Object"===(r=s(e))&&o(e.callee)?"Arguments":r}},function(n,e,t){"use strict";var r={};r[t(38)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){"use strict";var r=t(12),o=t(20);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){"use strict";var r=t(20),o=t(169),s=t(170),a=Error.captureStackTrace;n.exports=function(n,e,t,i){s&&(a?a(n,e):r(n,"stack",o(t,i)))}},function(n,e,t){"use strict";var r=t(6),o=Error,s=r("".replace),a=String(new o("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,l=i.test(a);n.exports=function(n,e){if(l&&"string"==typeof n&&!o.prepareStackTrace)for(;e--;)n=s(n,i,"");return n}},function(n,e,t){"use strict";var r=t(7),o=t(42);n.exports=!r((function(){var n=new Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){var r=t(78),o=t(172);n.exports=function n(e,t,s,a,i){var l=-1,c=e.length;for(s||(s=o),i||(i=[]);++l<c;){var p=e[l];t>0&&s(p)?t>1?n(p,t-1,s,a,i):r(i,p):a||(i[i.length]=p)}return i}},function(n,e,t){var r=t(21),o=t(45),s=t(9),a=r?r.isConcatSpreadable:void 0;n.exports=function(n){return s(n)||o(n)||!!(a&&n&&n[a])}},function(n,e,t){var r=t(19),o=t(16);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(21),o=Object.prototype,s=o.hasOwnProperty,a=o.toString,i=r?r.toStringTag:void 0;n.exports=function(n){var e=s.call(n,i),t=n[i];try{n[i]=void 0;var r=!0}catch(n){}var o=a.call(n);return r&&(e?n[i]=t:delete n[i]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(177),o=t(233),s=t(53),a=t(9),i=t(244);n.exports=function(n){return"function"==typeof n?n:null==n?s:"object"==typeof n?a(n)?o(n[0],n[1]):r(n):i(n)}},function(n,e,t){var r=t(178),o=t(232),s=t(95);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?s(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(80),o=t(84);n.exports=function(n,e,t,s){var a=t.length,i=a,l=!s;if(null==n)return!i;for(n=Object(n);a--;){var c=t[a];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++a<i;){var p=(c=t[a])[0],d=n[p],u=c[1];if(l&&c[2]){if(void 0===d&&!(p in n))return!1}else{var m=new r;if(s)var h=s(d,u,p,n,e,m);if(!(void 0===h?o(u,d,3,s,m):h))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(25),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(25);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(25);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(25);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(24);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(24),o=t(46),s=t(48);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var a=t.__data__;if(!o||a.length<199)return a.push([n,e]),this.size=++t.size,this;t=this.__data__=new s(a)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(82),o=t(190),s=t(47),a=t(83),i=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,p=l.toString,d=c.hasOwnProperty,u=RegExp("^"+p.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!s(n)||o(n))&&(r(n)?u:i).test(a(n))}},function(n,e,t){var r,o=t(191),s=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!s&&s in n}},function(n,e,t){var r=t(10)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(194),o=t(24),s=t(46);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(s||o),string:new r}}},function(n,e,t){var r=t(195),o=t(196),s=t(197),a=t(198),i=t(199);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=s,l.prototype.has=a,l.prototype.set=i,n.exports=l},function(n,e,t){var r=t(26);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(26),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(26),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(26);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(27);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(27);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(27);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(27);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(80),o=t(85),s=t(209),a=t(212),i=t(228),l=t(9),c=t(89),p=t(91),d="[object Object]",u=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,h,g){var f=l(n),b=l(e),y=f?"[object Array]":i(n),v=b?"[object Array]":i(e),x=(y="[object Arguments]"==y?d:y)==d,w=(v="[object Arguments]"==v?d:v)==d,E=y==v;if(E&&c(n)){if(!c(e))return!1;f=!0,x=!1}if(E&&!x)return g||(g=new r),f||p(n)?o(n,e,t,m,h,g):s(n,e,y,t,m,h,g);if(!(1&t)){var k=x&&u.call(n,"__wrapped__"),z=w&&u.call(e,"__wrapped__");if(k||z){var S=k?n.value():n,A=z?e.value():e;return g||(g=new r),h(S,A,t,m,g)}}return!!E&&(g||(g=new r),a(n,e,t,m,h,g))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(21),o=t(210),s=t(81),a=t(85),i=t(211),l=t(49),c=r?r.prototype:void 0,p=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,d,u){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!d(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return s(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=i;case"[object Set]":var h=1&r;if(m||(m=l),n.size!=e.size&&!h)return!1;var g=u.get(n);if(g)return g==e;r|=2,u.set(n,e);var f=a(m(n),m(e),r,c,d,u);return u.delete(n),f;case"[object Symbol]":if(p)return p.call(n)==p.call(e)}return!1}},function(n,e,t){var r=t(10).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(213),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,s,a,i){var l=1&t,c=r(n),p=c.length;if(p!=r(e).length&&!l)return!1;for(var d=p;d--;){var u=c[d];if(!(l?u in e:o.call(e,u)))return!1}var m=i.get(n),h=i.get(e);if(m&&h)return m==e&&h==n;var g=!0;i.set(n,e),i.set(e,n);for(var f=l;++d<p;){var b=n[u=c[d]],y=e[u];if(s)var v=l?s(y,b,u,e,n,i):s(b,y,u,n,e,i);if(!(void 0===v?b===y||a(b,y,t,s,i):v)){g=!1;break}f||(f="constructor"==u)}if(g&&!f){var x=n.constructor,w=e.constructor;x==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(g=!1)}return i.delete(n),i.delete(e),g}},function(n,e,t){var r=t(214),o=t(215),s=t(88);n.exports=function(n){return r(n,s,o)}},function(n,e,t){var r=t(78),o=t(9);n.exports=function(n,e,t){var s=e(n);return o(n)?s:r(s,t(n))}},function(n,e,t){var r=t(216),o=t(217),s=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,i=a?function(n){return null==n?[]:(n=Object(n),r(a(n),(function(e){return s.call(n,e)})))}:o;n.exports=i},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,s=[];++t<r;){var a=n[t];e(a,t,n)&&(s[o++]=a)}return s}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(219),o=t(45),s=t(9),a=t(89),i=t(90),l=t(91),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=s(n),p=!t&&o(n),d=!t&&!p&&a(n),u=!t&&!p&&!d&&l(n),m=t||p||d||u,h=m?r(n.length,String):[],g=h.length;for(var f in n)!e&&!c.call(n,f)||m&&("length"==f||d&&("offset"==f||"parent"==f)||u&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||i(f,g))||h.push(f);return h}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(19),o=t(50),s=t(16),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,n.exports=function(n){return s(n)&&o(n.length)&&!!a[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(79),o=e&&!e.nodeType&&e,s=o&&"object"==typeof n&&n&&!n.nodeType&&n,a=s&&s.exports===o&&r.process,i=function(){try{var n=s&&s.require&&s.require("util").types;return n||a&&a.binding&&a.binding("util")}catch(n){}}();n.exports=i}).call(this,t(60)(n))},function(n,e,t){var r=t(225),o=t(226),s=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))s.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(227)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(229),o=t(46),s=t(230),a=t(93),i=t(231),l=t(19),c=t(83),p=c(r),d=c(o),u=c(s),m=c(a),h=c(i),g=l;(r&&"[object DataView]"!=g(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=g(new o)||s&&"[object Promise]"!=g(s.resolve())||a&&"[object Set]"!=g(new a)||i&&"[object WeakMap]"!=g(new i))&&(g=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case p:return"[object DataView]";case d:return"[object Map]";case u:return"[object Promise]";case m:return"[object Set]";case h:return"[object WeakMap]"}return e}),n.exports=g},function(n,e,t){var r=t(13)(t(10),"DataView");n.exports=r},function(n,e,t){var r=t(13)(t(10),"Promise");n.exports=r},function(n,e,t){var r=t(13)(t(10),"WeakMap");n.exports=r},function(n,e,t){var r=t(94),o=t(88);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var s=e[t],a=n[s];e[t]=[s,a,r(a)]}return e}},function(n,e,t){var r=t(84),o=t(234),s=t(241),a=t(51),i=t(94),l=t(95),c=t(28);n.exports=function(n,e){return a(n)&&i(e)?l(c(n),e):function(t){var a=o(t,n);return void 0===a&&a===e?s(t,n):r(e,a,3)}}},function(n,e,t){var r=t(96);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(236),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,s=/\\(\\)?/g,a=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(s,"$1"):t||n)})),e}));n.exports=a},function(n,e,t){var r=t(237);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(48);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],s=t.cache;if(s.has(o))return s.get(o);var a=n.apply(this,r);return t.cache=s.set(o,a)||s,a};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(239);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(21),o=t(240),s=t(9),a=t(52),i=r?r.prototype:void 0,l=i?i.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(s(e))return o(e,n)+"";if(a(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(242),o=t(243);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(97),o=t(45),s=t(9),a=t(90),i=t(50),l=t(28);n.exports=function(n,e,t){for(var c=-1,p=(e=r(e,n)).length,d=!1;++c<p;){var u=l(e[c]);if(!(d=null!=n&&t(n,u)))break;n=n[u]}return d||++c!=p?d:!!(p=null==n?0:n.length)&&i(p)&&a(u,p)&&(s(n)||o(n))}},function(n,e,t){var r=t(245),o=t(246),s=t(51),a=t(28);n.exports=function(n){return s(n)?r(a(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(96);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(53),o=t(248),s=t(250);n.exports=function(n,e){return s(o(n,e,r),n+"")}},function(n,e,t){var r=t(249),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var s=arguments,a=-1,i=o(s.length-e,0),l=Array(i);++a<i;)l[a]=s[e+a];a=-1;for(var c=Array(e+1);++a<e;)c[a]=s[a];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(251),o=t(254)(r);n.exports=o},function(n,e,t){var r=t(252),o=t(253),s=t(53),a=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:s;n.exports=a},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(13),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),s=16-(o-r);if(r=o,s>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(86),o=t(256),s=t(261),a=t(87),i=t(262),l=t(49);n.exports=function(n,e,t){var c=-1,p=o,d=n.length,u=!0,m=[],h=m;if(t)u=!1,p=s;else if(d>=200){var g=e?null:i(n);if(g)return l(g);u=!1,p=a,h=new r}else h=e?[]:m;n:for(;++c<d;){var f=n[c],b=e?e(f):f;if(f=t||0!==f?f:0,u&&b==b){for(var y=h.length;y--;)if(h[y]===b)continue n;e&&h.push(b),m.push(f)}else p(h,b,t)||(h!==m&&h.push(b),m.push(f))}return m}},function(n,e,t){var r=t(257);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(258),o=t(259),s=t(260);n.exports=function(n,e,t){return e==e?s(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,s=t+(r?1:-1);r?s--:++s<o;)if(e(n[s],s,n))return s;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(93),o=t(263),s=t(49),a=r&&1/s(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=a},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(92),o=t(16);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){"use strict";t(98)},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";var r=t(271),o=t(101),s=t(55),a=Object.prototype.hasOwnProperty,i={brackets:function(n){return n+"[]"},comma:"comma",indices:function(n,e){return n+"["+e+"]"},repeat:function(n){return n}},l=Array.isArray,c=String.prototype.split,p=Array.prototype.push,d=function(n,e){p.apply(n,l(e)?e:[e])},u=Date.prototype.toISOString,m=s.default,h={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:m,formatter:s.formatters[m],indices:!1,serializeDate:function(n){return u.call(n)},skipNulls:!1,strictNullHandling:!1},g={},f=function n(e,t,s,a,i,p,u,m,f,b,y,v,x,w,E,k){for(var z,S=e,A=k,B=0,j=!1;void 0!==(A=A.get(g))&&!j;){var C=A.get(e);if(B+=1,void 0!==C){if(C===B)throw new RangeError("Cyclic object value");j=!0}void 0===A.get(g)&&(B=0)}if("function"==typeof m?S=m(t,S):S instanceof Date?S=y(S):"comma"===s&&l(S)&&(S=o.maybeMap(S,(function(n){return n instanceof Date?y(n):n}))),null===S){if(i)return u&&!w?u(t,h.encoder,E,"key",v):t;S=""}if("string"==typeof(z=S)||"number"==typeof z||"boolean"==typeof z||"symbol"==typeof z||"bigint"==typeof z||o.isBuffer(S)){if(u){var _=w?t:u(t,h.encoder,E,"key",v);if("comma"===s&&w){for(var T=c.call(String(S),","),F="",I=0;I<T.length;++I)F+=(0===I?"":",")+x(u(T[I],h.encoder,E,"value",v));return[x(_)+(a&&l(S)&&1===T.length?"[]":"")+"="+F]}return[x(_)+"="+x(u(S,h.encoder,E,"value",v))]}return[x(t)+"="+x(String(S))]}var D,P=[];if(void 0===S)return P;if("comma"===s&&l(S))D=[{value:S.length>0?S.join(",")||null:void 0}];else if(l(m))D=m;else{var L=Object.keys(S);D=f?L.sort(f):L}for(var O=a&&l(S)&&1===S.length?t+"[]":t,M=0;M<D.length;++M){var $=D[M],R="object"==typeof $&&void 0!==$.value?$.value:S[$];if(!p||null!==R){var q=l(S)?"function"==typeof s?s(O,$):O:O+(b?"."+$:"["+$+"]");k.set(e,B);var N=r();N.set(g,k),d(P,n(R,q,s,a,i,p,u,m,f,b,y,v,x,w,E,N))}}return P};n.exports=function(n,e){var t,o=n,c=function(n){if(!n)return h;if(null!==n.encoder&&void 0!==n.encoder&&"function"!=typeof n.encoder)throw new TypeError("Encoder has to be a function.");var e=n.charset||h.charset;if(void 0!==n.charset&&"utf-8"!==n.charset&&"iso-8859-1"!==n.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=s.default;if(void 0!==n.format){if(!a.call(s.formatters,n.format))throw new TypeError("Unknown format option provided.");t=n.format}var r=s.formatters[t],o=h.filter;return("function"==typeof n.filter||l(n.filter))&&(o=n.filter),{addQueryPrefix:"boolean"==typeof n.addQueryPrefix?n.addQueryPrefix:h.addQueryPrefix,allowDots:void 0===n.allowDots?h.allowDots:!!n.allowDots,charset:e,charsetSentinel:"boolean"==typeof n.charsetSentinel?n.charsetSentinel:h.charsetSentinel,delimiter:void 0===n.delimiter?h.delimiter:n.delimiter,encode:"boolean"==typeof n.encode?n.encode:h.encode,encoder:"function"==typeof n.encoder?n.encoder:h.encoder,encodeValuesOnly:"boolean"==typeof n.encodeValuesOnly?n.encodeValuesOnly:h.encodeValuesOnly,filter:o,format:t,formatter:r,serializeDate:"function"==typeof n.serializeDate?n.serializeDate:h.serializeDate,skipNulls:"boolean"==typeof n.skipNulls?n.skipNulls:h.skipNulls,sort:"function"==typeof n.sort?n.sort:null,strictNullHandling:"boolean"==typeof n.strictNullHandling?n.strictNullHandling:h.strictNullHandling}}(e);"function"==typeof c.filter?o=(0,c.filter)("",o):l(c.filter)&&(t=c.filter);var p,u=[];if("object"!=typeof o||null===o)return"";p=e&&e.arrayFormat in i?e.arrayFormat:e&&"indices"in e?e.indices?"indices":"repeat":"indices";var m=i[p];if(e&&"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var g="comma"===m&&e&&e.commaRoundTrip;t||(t=Object.keys(o)),c.sort&&t.sort(c.sort);for(var b=r(),y=0;y<t.length;++y){var v=t[y];c.skipNulls&&null===o[v]||d(u,f(o[v],v,m,g,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.format,c.formatter,c.encodeValuesOnly,c.charset,b))}var x=u.join(c.delimiter),w=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?w+="utf8=%26%2310003%3B&":w+="utf8=%E2%9C%93&"),x.length>0?w+x:""}},function(n,e,t){"use strict";var r=t(14),o=t(277),s=t(281),a=r("%TypeError%"),i=r("%WeakMap%",!0),l=r("%Map%",!0),c=o("WeakMap.prototype.get",!0),p=o("WeakMap.prototype.set",!0),d=o("WeakMap.prototype.has",!0),u=o("Map.prototype.get",!0),m=o("Map.prototype.set",!0),h=o("Map.prototype.has",!0),g=function(n,e){for(var t,r=n;null!==(t=r.next);r=t)if(t.key===e)return r.next=t.next,t.next=n.next,n.next=t,t};n.exports=function(){var n,e,t,r={assert:function(n){if(!r.has(n))throw new a("Side channel does not contain "+s(n))},get:function(r){if(i&&r&&("object"==typeof r||"function"==typeof r)){if(n)return c(n,r)}else if(l){if(e)return u(e,r)}else if(t)return function(n,e){var t=g(n,e);return t&&t.value}(t,r)},has:function(r){if(i&&r&&("object"==typeof r||"function"==typeof r)){if(n)return d(n,r)}else if(l){if(e)return h(e,r)}else if(t)return function(n,e){return!!g(n,e)}(t,r);return!1},set:function(r,o){i&&r&&("object"==typeof r||"function"==typeof r)?(n||(n=new i),p(n,r,o)):l?(e||(e=new l),m(e,r,o)):(t||(t={key:{},next:null}),function(n,e,t){var r=g(n,e);r?r.value=t:n.next={key:e,next:n.next,value:t}}(t,r,o))}};return r}},function(n,e,t){"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=t(273);n.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&o())))}},function(n,e,t){"use strict";n.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var n={},e=Symbol("test"),t=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;for(e in n[e]=42,n)return!1;if("function"==typeof Object.keys&&0!==Object.keys(n).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(n).length)return!1;var r=Object.getOwnPropertySymbols(n);if(1!==r.length||r[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(n,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(n,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},function(n,e,t){"use strict";var r={foo:{}},o=Object;n.exports=function(){return{__proto__:r}.foo===r.foo&&!({__proto__:null}instanceof o)}},function(n,e,t){"use strict";var r="Function.prototype.bind called on incompatible ",o=Object.prototype.toString,s=Math.max,a=function(n,e){for(var t=[],r=0;r<n.length;r+=1)t[r]=n[r];for(var o=0;o<e.length;o+=1)t[o+n.length]=e[o];return t},i=function(n,e){for(var t=[],r=e||0,o=0;r<n.length;r+=1,o+=1)t[o]=n[r];return t},l=function(n,e){for(var t="",r=0;r<n.length;r+=1)t+=n[r],r+1<n.length&&(t+=e);return t};n.exports=function(n){var e=this;if("function"!=typeof e||"[object Function]"!==o.apply(e))throw new TypeError(r+e);for(var t,c=i(arguments,1),p=function(){if(this instanceof t){var r=e.apply(this,a(c,arguments));return Object(r)===r?r:this}return e.apply(n,a(c,arguments))},d=s(0,e.length-c.length),u=[],m=0;m<d;m++)u[m]="$"+m;if(t=Function("binder","return function ("+l(u,",")+"){ return binder.apply(this,arguments); }")(p),e.prototype){var h=function(){};h.prototype=e.prototype,t.prototype=new h,h.prototype=null}return t}},function(n,e,t){"use strict";var r=Function.prototype.call,o=Object.prototype.hasOwnProperty,s=t(54);n.exports=s.call(r,o)},function(n,e,t){"use strict";var r=t(14),o=t(278),s=o(r("String.prototype.indexOf"));n.exports=function(n,e){var t=r(n,!!e);return"function"==typeof t&&s(n,".prototype.")>-1?o(t):t}},function(n,e,t){"use strict";var r=t(54),o=t(14),s=t(279),a=o("%TypeError%"),i=o("%Function.prototype.apply%"),l=o("%Function.prototype.call%"),c=o("%Reflect.apply%",!0)||r.call(l,i),p=o("%Object.defineProperty%",!0),d=o("%Math.max%");if(p)try{p({},"a",{value:1})}catch(n){p=null}n.exports=function(n){if("function"!=typeof n)throw new a("a function is required");var e=c(r,l,arguments);return s(e,1+d(0,n.length-(arguments.length-1)),!0)};var u=function(){return c(r,i,arguments)};p?p(n.exports,"apply",{value:u}):n.exports.apply=u},function(n,e,t){"use strict";var r=t(14),o=t(280),s=t(99)(),a=t(100),i=r("%TypeError%"),l=r("%Math.floor%");n.exports=function(n,e){if("function"!=typeof n)throw new i("`fn` is not a function");if("number"!=typeof e||e<0||e>4294967295||l(e)!==e)throw new i("`length` must be a positive 32-bit integer");var t=arguments.length>2&&!!arguments[2],r=!0,c=!0;if("length"in n&&a){var p=a(n,"length");p&&!p.configurable&&(r=!1),p&&!p.writable&&(c=!1)}return(r||c||!t)&&(s?o(n,"length",e,!0,!0):o(n,"length",e)),n}},function(n,e,t){"use strict";var r=t(99)(),o=t(14),s=r&&o("%Object.defineProperty%",!0);if(s)try{s({},"a",{value:1})}catch(n){s=!1}var a=o("%SyntaxError%"),i=o("%TypeError%"),l=t(100);n.exports=function(n,e,t){if(!n||"object"!=typeof n&&"function"!=typeof n)throw new i("`obj` must be an object or a function`");if("string"!=typeof e&&"symbol"!=typeof e)throw new i("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new i("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new i("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new i("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new i("`loose`, if provided, must be a boolean");var r=arguments.length>3?arguments[3]:null,o=arguments.length>4?arguments[4]:null,c=arguments.length>5?arguments[5]:null,p=arguments.length>6&&arguments[6],d=!!l&&l(n,e);if(s)s(n,e,{configurable:null===c&&d?d.configurable:!c,enumerable:null===r&&d?d.enumerable:!r,value:t,writable:null===o&&d?d.writable:!o});else{if(!p&&(r||o||c))throw new a("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");n[e]=t}}},function(n,e,t){var r="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,s=r&&o&&"function"==typeof o.get?o.get:null,a=r&&Map.prototype.forEach,i="function"==typeof Set&&Set.prototype,l=Object.getOwnPropertyDescriptor&&i?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,c=i&&l&&"function"==typeof l.get?l.get:null,p=i&&Set.prototype.forEach,d="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,u="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,m="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,g=Object.prototype.toString,f=Function.prototype.toString,b=String.prototype.match,y=String.prototype.slice,v=String.prototype.replace,x=String.prototype.toUpperCase,w=String.prototype.toLowerCase,E=RegExp.prototype.test,k=Array.prototype.concat,z=Array.prototype.join,S=Array.prototype.slice,A=Math.floor,B="function"==typeof BigInt?BigInt.prototype.valueOf:null,j=Object.getOwnPropertySymbols,C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,_="function"==typeof Symbol&&"object"==typeof Symbol.iterator,T="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===_||"symbol")?Symbol.toStringTag:null,F=Object.prototype.propertyIsEnumerable,I=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(n){return n.__proto__}:null);function D(n,e){if(n===1/0||n===-1/0||n!=n||n&&n>-1e3&&n<1e3||E.call(/e/,e))return e;var t=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof n){var r=n<0?-A(-n):A(n);if(r!==n){var o=String(r),s=y.call(e,o.length+1);return v.call(o,t,"$&_")+"."+v.call(v.call(s,/([0-9]{3})/g,"$&_"),/_$/,"")}}return v.call(e,t,"$&_")}var P=t(282),L=P.custom,O=N(L)?L:null;function M(n,e,t){var r="double"===(t.quoteStyle||e)?'"':"'";return r+n+r}function $(n){return v.call(String(n),/"/g,"&quot;")}function R(n){return!("[object Array]"!==Y(n)||T&&"object"==typeof n&&T in n)}function q(n){return!("[object RegExp]"!==Y(n)||T&&"object"==typeof n&&T in n)}function N(n){if(_)return n&&"object"==typeof n&&n instanceof Symbol;if("symbol"==typeof n)return!0;if(!n||"object"!=typeof n||!C)return!1;try{return C.call(n),!0}catch(n){}return!1}n.exports=function n(e,t,r,o){var i=t||{};if(U(i,"quoteStyle")&&"single"!==i.quoteStyle&&"double"!==i.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(U(i,"maxStringLength")&&("number"==typeof i.maxStringLength?i.maxStringLength<0&&i.maxStringLength!==1/0:null!==i.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var l=!U(i,"customInspect")||i.customInspect;if("boolean"!=typeof l&&"symbol"!==l)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(U(i,"indent")&&null!==i.indent&&"\t"!==i.indent&&!(parseInt(i.indent,10)===i.indent&&i.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(U(i,"numericSeparator")&&"boolean"!=typeof i.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var g=i.numericSeparator;if(void 0===e)return"undefined";if(null===e)return"null";if("boolean"==typeof e)return e?"true":"false";if("string"==typeof e)return function n(e,t){if(e.length>t.maxStringLength){var r=e.length-t.maxStringLength,o="... "+r+" more character"+(r>1?"s":"");return n(y.call(e,0,t.maxStringLength),t)+o}return M(v.call(v.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,J),"single",t)}(e,i);if("number"==typeof e){if(0===e)return 1/0/e>0?"0":"-0";var x=String(e);return g?D(e,x):x}if("bigint"==typeof e){var E=String(e)+"n";return g?D(e,E):E}var A=void 0===i.depth?5:i.depth;if(void 0===r&&(r=0),r>=A&&A>0&&"object"==typeof e)return R(e)?"[Array]":"[Object]";var j=function(n,e){var t;if("\t"===n.indent)t="\t";else{if(!("number"==typeof n.indent&&n.indent>0))return null;t=z.call(Array(n.indent+1)," ")}return{base:t,prev:z.call(Array(e+1),t)}}(i,r);if(void 0===o)o=[];else if(Z(o,e)>=0)return"[Circular]";function L(e,t,s){if(t&&(o=S.call(o)).push(t),s){var a={depth:i.depth};return U(i,"quoteStyle")&&(a.quoteStyle=i.quoteStyle),n(e,a,r+1,o)}return n(e,i,r+1,o)}if("function"==typeof e&&!q(e)){var H=function(n){if(n.name)return n.name;var e=b.call(f.call(n),/^function\s*([\w$]+)/);if(e)return e[1];return null}(e),V=K(e,L);return"[Function"+(H?": "+H:" (anonymous)")+"]"+(V.length>0?" { "+z.call(V,", ")+" }":"")}if(N(e)){var nn=_?v.call(String(e),/^(Symbol\(.*\))_[^)]*$/,"$1"):C.call(e);return"object"!=typeof e||_?nn:X(nn)}if(function(n){if(!n||"object"!=typeof n)return!1;if("undefined"!=typeof HTMLElement&&n instanceof HTMLElement)return!0;return"string"==typeof n.nodeName&&"function"==typeof n.getAttribute}(e)){for(var en="<"+w.call(String(e.nodeName)),tn=e.attributes||[],rn=0;rn<tn.length;rn++)en+=" "+tn[rn].name+"="+M($(tn[rn].value),"double",i);return en+=">",e.childNodes&&e.childNodes.length&&(en+="..."),en+="</"+w.call(String(e.nodeName))+">"}if(R(e)){if(0===e.length)return"[]";var on=K(e,L);return j&&!function(n){for(var e=0;e<n.length;e++)if(Z(n[e],"\n")>=0)return!1;return!0}(on)?"["+Q(on,j)+"]":"[ "+z.call(on,", ")+" ]"}if(function(n){return!("[object Error]"!==Y(n)||T&&"object"==typeof n&&T in n)}(e)){var sn=K(e,L);return"cause"in Error.prototype||!("cause"in e)||F.call(e,"cause")?0===sn.length?"["+String(e)+"]":"{ ["+String(e)+"] "+z.call(sn,", ")+" }":"{ ["+String(e)+"] "+z.call(k.call("[cause]: "+L(e.cause),sn),", ")+" }"}if("object"==typeof e&&l){if(O&&"function"==typeof e[O]&&P)return P(e,{depth:A-r});if("symbol"!==l&&"function"==typeof e.inspect)return e.inspect()}if(function(n){if(!s||!n||"object"!=typeof n)return!1;try{s.call(n);try{c.call(n)}catch(n){return!0}return n instanceof Map}catch(n){}return!1}(e)){var an=[];return a&&a.call(e,(function(n,t){an.push(L(t,e,!0)+" => "+L(n,e))})),G("Map",s.call(e),an,j)}if(function(n){if(!c||!n||"object"!=typeof n)return!1;try{c.call(n);try{s.call(n)}catch(n){return!0}return n instanceof Set}catch(n){}return!1}(e)){var ln=[];return p&&p.call(e,(function(n){ln.push(L(n,e))})),G("Set",c.call(e),ln,j)}if(function(n){if(!d||!n||"object"!=typeof n)return!1;try{d.call(n,d);try{u.call(n,u)}catch(n){return!0}return n instanceof WeakMap}catch(n){}return!1}(e))return W("WeakMap");if(function(n){if(!u||!n||"object"!=typeof n)return!1;try{u.call(n,u);try{d.call(n,d)}catch(n){return!0}return n instanceof WeakSet}catch(n){}return!1}(e))return W("WeakSet");if(function(n){if(!m||!n||"object"!=typeof n)return!1;try{return m.call(n),!0}catch(n){}return!1}(e))return W("WeakRef");if(function(n){return!("[object Number]"!==Y(n)||T&&"object"==typeof n&&T in n)}(e))return X(L(Number(e)));if(function(n){if(!n||"object"!=typeof n||!B)return!1;try{return B.call(n),!0}catch(n){}return!1}(e))return X(L(B.call(e)));if(function(n){return!("[object Boolean]"!==Y(n)||T&&"object"==typeof n&&T in n)}(e))return X(h.call(e));if(function(n){return!("[object String]"!==Y(n)||T&&"object"==typeof n&&T in n)}(e))return X(L(String(e)));if("undefined"!=typeof window&&e===window)return"{ [object Window] }";if(e===global)return"{ [object globalThis] }";if(!function(n){return!("[object Date]"!==Y(n)||T&&"object"==typeof n&&T in n)}(e)&&!q(e)){var cn=K(e,L),pn=I?I(e)===Object.prototype:e instanceof Object||e.constructor===Object,dn=e instanceof Object?"":"null prototype",un=!pn&&T&&Object(e)===e&&T in e?y.call(Y(e),8,-1):dn?"Object":"",mn=(pn||"function"!=typeof e.constructor?"":e.constructor.name?e.constructor.name+" ":"")+(un||dn?"["+z.call(k.call([],un||[],dn||[]),": ")+"] ":"");return 0===cn.length?mn+"{}":j?mn+"{"+Q(cn,j)+"}":mn+"{ "+z.call(cn,", ")+" }"}return String(e)};var H=Object.prototype.hasOwnProperty||function(n){return n in this};function U(n,e){return H.call(n,e)}function Y(n){return g.call(n)}function Z(n,e){if(n.indexOf)return n.indexOf(e);for(var t=0,r=n.length;t<r;t++)if(n[t]===e)return t;return-1}function J(n){var e=n.charCodeAt(0),t={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return t?"\\"+t:"\\x"+(e<16?"0":"")+x.call(e.toString(16))}function X(n){return"Object("+n+")"}function W(n){return n+" { ? }"}function G(n,e,t,r){return n+" ("+e+") {"+(r?Q(t,r):z.call(t,", "))+"}"}function Q(n,e){if(0===n.length)return"";var t="\n"+e.prev+e.base;return t+z.call(n,","+t)+"\n"+e.prev}function K(n,e){var t=R(n),r=[];if(t){r.length=n.length;for(var o=0;o<n.length;o++)r[o]=U(n,o)?e(n[o],n):""}var s,a="function"==typeof j?j(n):[];if(_){s={};for(var i=0;i<a.length;i++)s["$"+a[i]]=a[i]}for(var l in n)U(n,l)&&(t&&String(Number(l))===l&&l<n.length||_&&s["$"+l]instanceof Symbol||(E.call(/[^\w$]/,l)?r.push(e(l,n)+": "+e(n[l],n)):r.push(l+": "+e(n[l],n))));if("function"==typeof j)for(var c=0;c<a.length;c++)F.call(n,a[c])&&r.push("["+e(a[c])+"]: "+e(n[a[c]],n));return r}},function(n,e){},function(n,e,t){"use strict";var r=t(101),o=Object.prototype.hasOwnProperty,s=Array.isArray,a={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},i=function(n){return n.replace(/&#(\d+);/g,(function(n,e){return String.fromCharCode(parseInt(e,10))}))},l=function(n,e){return n&&"string"==typeof n&&e.comma&&n.indexOf(",")>-1?n.split(","):n},c=function(n,e,t,r){if(n){var s=t.allowDots?n.replace(/\.([^.[]+)/g,"[$1]"):n,a=/(\[[^[\]]*])/g,i=t.depth>0&&/(\[[^[\]]*])/.exec(s),c=i?s.slice(0,i.index):s,p=[];if(c){if(!t.plainObjects&&o.call(Object.prototype,c)&&!t.allowPrototypes)return;p.push(c)}for(var d=0;t.depth>0&&null!==(i=a.exec(s))&&d<t.depth;){if(d+=1,!t.plainObjects&&o.call(Object.prototype,i[1].slice(1,-1))&&!t.allowPrototypes)return;p.push(i[1])}return i&&p.push("["+s.slice(i.index)+"]"),function(n,e,t,r){for(var o=r?e:l(e,t),s=n.length-1;s>=0;--s){var a,i=n[s];if("[]"===i&&t.parseArrays)a=[].concat(o);else{a=t.plainObjects?Object.create(null):{};var c="["===i.charAt(0)&&"]"===i.charAt(i.length-1)?i.slice(1,-1):i,p=parseInt(c,10);t.parseArrays||""!==c?!isNaN(p)&&i!==c&&String(p)===c&&p>=0&&t.parseArrays&&p<=t.arrayLimit?(a=[])[p]=o:"__proto__"!==c&&(a[c]=o):a={0:o}}o=a}return o}(p,e,t,r)}};n.exports=function(n,e){var t=function(n){if(!n)return a;if(null!==n.decoder&&void 0!==n.decoder&&"function"!=typeof n.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==n.charset&&"utf-8"!==n.charset&&"iso-8859-1"!==n.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var e=void 0===n.charset?a.charset:n.charset;return{allowDots:void 0===n.allowDots?a.allowDots:!!n.allowDots,allowPrototypes:"boolean"==typeof n.allowPrototypes?n.allowPrototypes:a.allowPrototypes,allowSparse:"boolean"==typeof n.allowSparse?n.allowSparse:a.allowSparse,arrayLimit:"number"==typeof n.arrayLimit?n.arrayLimit:a.arrayLimit,charset:e,charsetSentinel:"boolean"==typeof n.charsetSentinel?n.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof n.comma?n.comma:a.comma,decoder:"function"==typeof n.decoder?n.decoder:a.decoder,delimiter:"string"==typeof n.delimiter||r.isRegExp(n.delimiter)?n.delimiter:a.delimiter,depth:"number"==typeof n.depth||!1===n.depth?+n.depth:a.depth,ignoreQueryPrefix:!0===n.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof n.interpretNumericEntities?n.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof n.parameterLimit?n.parameterLimit:a.parameterLimit,parseArrays:!1!==n.parseArrays,plainObjects:"boolean"==typeof n.plainObjects?n.plainObjects:a.plainObjects,strictNullHandling:"boolean"==typeof n.strictNullHandling?n.strictNullHandling:a.strictNullHandling}}(e);if(""===n||null==n)return t.plainObjects?Object.create(null):{};for(var p="string"==typeof n?function(n,e){var t,c={},p=e.ignoreQueryPrefix?n.replace(/^\?/,""):n,d=e.parameterLimit===1/0?void 0:e.parameterLimit,u=p.split(e.delimiter,d),m=-1,h=e.charset;if(e.charsetSentinel)for(t=0;t<u.length;++t)0===u[t].indexOf("utf8=")&&("utf8=%E2%9C%93"===u[t]?h="utf-8":"utf8=%26%2310003%3B"===u[t]&&(h="iso-8859-1"),m=t,t=u.length);for(t=0;t<u.length;++t)if(t!==m){var g,f,b=u[t],y=b.indexOf("]="),v=-1===y?b.indexOf("="):y+1;-1===v?(g=e.decoder(b,a.decoder,h,"key"),f=e.strictNullHandling?null:""):(g=e.decoder(b.slice(0,v),a.decoder,h,"key"),f=r.maybeMap(l(b.slice(v+1),e),(function(n){return e.decoder(n,a.decoder,h,"value")}))),f&&e.interpretNumericEntities&&"iso-8859-1"===h&&(f=i(f)),b.indexOf("[]=")>-1&&(f=s(f)?[f]:f),o.call(c,g)?c[g]=r.combine(c[g],f):c[g]=f}return c}(n,t):n,d=t.plainObjects?Object.create(null):{},u=Object.keys(p),m=0;m<u.length;++m){var h=u[m],g=c(h,p[h],t,"string"==typeof n);d=r.merge(d,g,t)}return!0===t.allowSparse?d:r.compact(d)}},function(n,e,t){var r=t(15),o=t(286),s=t(287);n.exports=function(n){var e=r(n);return s(e,o(e))+1}},function(n,e){n.exports=function(n){var e=new Date(n.getTime()),t=e.getTimezoneOffset();return e.setSeconds(0,0),6e4*t+e.getTime()%6e4}},function(n,e,t){var r=t(15);n.exports=function(n){var e=r(n),t=new Date(0);return t.setFullYear(e.getFullYear(),0,1),t.setHours(0,0,0,0),t}},function(n,e,t){var r=t(288);n.exports=function(n,e){var t=r(n),o=r(e),s=t.getTime()-6e4*t.getTimezoneOffset(),a=o.getTime()-6e4*o.getTimezoneOffset();return Math.round((s-a)/864e5)}},function(n,e,t){var r=t(15);n.exports=function(n){var e=r(n);return e.setHours(0,0,0,0),e}},function(n,e,t){var r=t(15),o=t(56),s=t(291);n.exports=function(n){var e=r(n),t=o(e).getTime()-s(e).getTime();return Math.round(t/6048e5)+1}},function(n,e,t){var r=t(15);n.exports=function(n,e){var t=e&&Number(e.weekStartsOn)||0,o=r(n),s=o.getDay(),a=(s<t?7:0)+s-t;return o.setDate(o.getDate()-a),o.setHours(0,0,0,0),o}},function(n,e,t){var r=t(103),o=t(56);n.exports=function(n){var e=r(n),t=new Date(0);return t.setFullYear(e,0,4),t.setHours(0,0,0,0),o(t)}},function(n,e,t){var r=t(102);n.exports=function(n){if(r(n))return!isNaN(n);throw new TypeError(toString.call(n)+" is not an instance of Date")}},function(n,e,t){var r=t(294),o=t(295);n.exports={distanceInWords:r(),format:o()}},function(n,e){n.exports=function(){var n={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};return{localize:function(e,t,r){var o;return r=r||{},o="string"==typeof n[e]?n[e]:1===t?n[e].one:n[e].other.replace("{{count}}",t),r.addSuffix?r.comparison>0?"in "+o:o+" ago":o}}}},function(n,e,t){var r=t(296);n.exports=function(){var n=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],e=["January","February","March","April","May","June","July","August","September","October","November","December"],t=["Su","Mo","Tu","We","Th","Fr","Sa"],o=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],s=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],a=["AM","PM"],i=["am","pm"],l=["a.m.","p.m."],c={MMM:function(e){return n[e.getMonth()]},MMMM:function(n){return e[n.getMonth()]},dd:function(n){return t[n.getDay()]},ddd:function(n){return o[n.getDay()]},dddd:function(n){return s[n.getDay()]},A:function(n){return n.getHours()/12>=1?a[1]:a[0]},a:function(n){return n.getHours()/12>=1?i[1]:i[0]},aa:function(n){return n.getHours()/12>=1?l[1]:l[0]}};return["M","D","DDD","d","Q","W"].forEach((function(n){c[n+"o"]=function(e,t){return function(n){var e=n%100;if(e>20||e<10)switch(e%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"}(t[n](e))}})),{formatters:c,formattingTokensRegExp:r(c)}}},function(n,e){var t=["M","MM","Q","D","DD","DDD","DDDD","d","E","W","WW","YY","YYYY","GG","GGGG","H","HH","h","hh","m","mm","s","ss","S","SS","SSS","Z","ZZ","X","x"];n.exports=function(n){var e=[];for(var r in n)n.hasOwnProperty(r)&&e.push(r);var o=t.concat(e).sort().reverse();return new RegExp("(\\[[^\\[]*\\])|(\\\\)?("+o.join("|")+"|.)","g")}},function(n,e,t){"use strict";var r=t(3),o=t(104),s=t(298),a=t(110);function i(n){var e=new s(n),t=o(s.prototype.request,e);return r.extend(t,s.prototype,e),r.extend(t,e),t}var l=i(t(57));l.Axios=s,l.create=function(n){return i(a(l.defaults,n))},l.Cancel=t(111),l.CancelToken=t(312),l.isCancel=t(109),l.all=function(n){return Promise.all(n)},l.spread=t(313),l.isAxiosError=t(314),n.exports=l,n.exports.default=l},function(n,e,t){"use strict";var r=t(3),o=t(105),s=t(299),a=t(300),i=t(110),l=t(310),c=l.validators;function p(n){this.defaults=n,this.interceptors={request:new s,response:new s}}p.prototype.request=function(n){"string"==typeof n?(n=arguments[1]||{}).url=arguments[0]:n=n||{},(n=i(this.defaults,n)).method?n.method=n.method.toLowerCase():this.defaults.method?n.method=this.defaults.method.toLowerCase():n.method="get";var e=n.transitional;void 0!==e&&l.assertOptions(e,{silentJSONParsing:c.transitional(c.boolean,"1.0.0"),forcedJSONParsing:c.transitional(c.boolean,"1.0.0"),clarifyTimeoutError:c.transitional(c.boolean,"1.0.0")},!1);var t=[],r=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(r=r&&e.synchronous,t.unshift(e.fulfilled,e.rejected))}));var o,s=[];if(this.interceptors.response.forEach((function(n){s.push(n.fulfilled,n.rejected)})),!r){var p=[a,void 0];for(Array.prototype.unshift.apply(p,t),p=p.concat(s),o=Promise.resolve(n);p.length;)o=o.then(p.shift(),p.shift());return o}for(var d=n;t.length;){var u=t.shift(),m=t.shift();try{d=u(d)}catch(n){m(n);break}}try{o=a(d)}catch(n){return Promise.reject(n)}for(;s.length;)o=o.then(s.shift(),s.shift());return o},p.prototype.getUri=function(n){return n=i(this.defaults,n),o(n.url,n.params,n.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(n){p.prototype[n]=function(e,t){return this.request(i(t||{},{method:n,url:e,data:(t||{}).data}))}})),r.forEach(["post","put","patch"],(function(n){p.prototype[n]=function(e,t,r){return this.request(i(r||{},{method:n,url:e,data:t}))}})),n.exports=p},function(n,e,t){"use strict";var r=t(3);function o(){this.handlers=[]}o.prototype.use=function(n,e,t){return this.handlers.push({fulfilled:n,rejected:e,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(n){this.handlers[n]&&(this.handlers[n]=null)},o.prototype.forEach=function(n){r.forEach(this.handlers,(function(e){null!==e&&n(e)}))},n.exports=o},function(n,e,t){"use strict";var r=t(3),o=t(301),s=t(109),a=t(57);function i(n){n.cancelToken&&n.cancelToken.throwIfRequested()}n.exports=function(n){return i(n),n.headers=n.headers||{},n.data=o.call(n,n.data,n.headers,n.transformRequest),n.headers=r.merge(n.headers.common||{},n.headers[n.method]||{},n.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete n.headers[e]})),(n.adapter||a.adapter)(n).then((function(e){return i(n),e.data=o.call(n,e.data,e.headers,n.transformResponse),e}),(function(e){return s(e)||(i(n),e&&e.response&&(e.response.data=o.call(n,e.response.data,e.response.headers,n.transformResponse))),Promise.reject(e)}))}},function(n,e,t){"use strict";var r=t(3),o=t(57);n.exports=function(n,e,t){var s=this||o;return r.forEach(t,(function(t){n=t.call(s,n,e)})),n}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){r.forEach(n,(function(t,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(n[e]=t,delete n[r])}))}},function(n,e,t){"use strict";var r=t(108);n.exports=function(n,e,t){var o=t.config.validateStatus;t.status&&o&&!o(t.status)?e(r("Request failed with status code "+t.status,t.config,null,t.request,t)):n(t)}},function(n,e,t){"use strict";var r=t(3);n.exports=r.isStandardBrowserEnv()?{write:function(n,e,t,o,s,a){var i=[];i.push(n+"="+encodeURIComponent(e)),r.isNumber(t)&&i.push("expires="+new Date(t).toGMTString()),r.isString(o)&&i.push("path="+o),r.isString(s)&&i.push("domain="+s),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read:function(n){var e=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(n,e,t){"use strict";var r=t(306),o=t(307);n.exports=function(n,e){return n&&!r(e)?o(n,e):e}},function(n,e,t){"use strict";n.exports=function(n){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(n)}},function(n,e,t){"use strict";n.exports=function(n,e){return e?n.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):n}},function(n,e,t){"use strict";var r=t(3),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];n.exports=function(n){var e,t,s,a={};return n?(r.forEach(n.split("\n"),(function(n){if(s=n.indexOf(":"),e=r.trim(n.substr(0,s)).toLowerCase(),t=r.trim(n.substr(s+1)),e){if(a[e]&&o.indexOf(e)>=0)return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([t]):a[e]?a[e]+", "+t:t}})),a):a}},function(n,e,t){"use strict";var r=t(3);n.exports=r.isStandardBrowserEnv()?function(){var n,e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function o(n){var r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=o(window.location.href),function(e){var t=r.isString(e)?o(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0}},function(n,e,t){"use strict";var r=t(311),o={};["object","boolean","number","function","string","symbol"].forEach((function(n,e){o[n]=function(t){return typeof t===n||"a"+(e<1?"n ":" ")+n}}));var s={},a=r.version.split(".");function i(n,e){for(var t=e?e.split("."):a,r=n.split("."),o=0;o<3;o++){if(t[o]>r[o])return!0;if(t[o]<r[o])return!1}return!1}o.transitional=function(n,e,t){var o=e&&i(e);function a(n,e){return"[Axios v"+r.version+"] Transitional option '"+n+"'"+e+(t?". "+t:"")}return function(t,r,i){if(!1===n)throw new Error(a(r," has been removed in "+e));return o&&!s[r]&&(s[r]=!0,console.warn(a(r," has been deprecated since v"+e+" and will be removed in the near future"))),!n||n(t,r,i)}},n.exports={isOlderVersion:i,assertOptions:function(n,e,t){if("object"!=typeof n)throw new TypeError("options must be an object");for(var r=Object.keys(n),o=r.length;o-- >0;){var s=r[o],a=e[s];if(a){var i=n[s],l=void 0===i||a(i,s,n);if(!0!==l)throw new TypeError("option "+s+" must be "+l)}else if(!0!==t)throw Error("Unknown option "+s)}},validators:o}},function(n){n.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')},function(n,e,t){"use strict";var r=t(111);function o(n){if("function"!=typeof n)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(n){e=n}));var t=this;n((function(n){t.reason||(t.reason=new r(n),e(t.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var n;return{token:new o((function(e){n=e})),cancel:n}},n.exports=o},function(n,e,t){"use strict";n.exports=function(n){return function(e){return n.apply(null,e)}}},function(n,e,t){"use strict";n.exports=function(n){return"object"==typeof n&&!0===n.isAxiosError}},function(n,e,t){},function(n,e,t){"use strict";t(112)},function(n,e,t){"use strict";t(113)},function(n,e,t){"use strict";t(114)},function(n,e,t){"use strict";t(115)},function(n,e,t){"use strict";t(116)},function(n,e,t){"use strict";t.r(e);var r=t(1);
/*!
  * vue-router v3.6.5
  * (c) 2022 Evan You
  * @license MIT
  */function o(n,e){for(var t in e)n[t]=e[t];return n}var s=/[!'()*]/g,a=function(n){return"%"+n.charCodeAt(0).toString(16)},i=/%2C/g,l=function(n){return encodeURIComponent(n).replace(s,a).replace(i,",")};function c(n){try{return decodeURIComponent(n)}catch(n){0}return n}var p=function(n){return null==n||"object"==typeof n?n:String(n)};function d(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=c(t.shift()),o=t.length>0?c(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function u(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return l(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(l(e)):r.push(l(e)+"="+l(n)))})),r.join("&")}return l(e)+"="+l(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var m=/\/?$/;function h(n,e,t,r){var o=r&&r.options.stringifyQuery,s=e.query||{};try{s=g(s)}catch(n){}var a={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:s,params:e.params||{},fullPath:y(e,o),matched:n?b(n):[]};return t&&(a.redirectedFrom=y(t,o)),Object.freeze(a)}function g(n){if(Array.isArray(n))return n.map(g);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=g(n[t]);return e}return n}var f=h(null,{path:"/"});function b(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function y(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||u)(r)+o}function v(n,e,t){return e===f?n===e:!!e&&(n.path&&e.path?n.path.replace(m,"")===e.path.replace(m,"")&&(t||n.hash===e.hash&&x(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&x(n.query,e.query)&&x(n.params,e.params))))}function x(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var s=n[t];if(r[o]!==t)return!1;var a=e[t];return null==s||null==a?s===a:"object"==typeof s&&"object"==typeof a?x(s,a):String(s)===String(a)}))}function w(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],s=t.enteredCbs[r];if(o&&s){delete t.enteredCbs[r];for(var a=0;a<s.length;a++)o._isBeingDestroyed||s[a](o)}}}}var E={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,s=e.parent,a=e.data;a.routerView=!0;for(var i=s.$createElement,l=t.name,c=s.$route,p=s._routerViewCache||(s._routerViewCache={}),d=0,u=!1;s&&s._routerRoot!==s;){var m=s.$vnode?s.$vnode.data:{};m.routerView&&d++,m.keepAlive&&s._directInactive&&s._inactive&&(u=!0),s=s.$parent}if(a.routerViewDepth=d,u){var h=p[l],g=h&&h.component;return g?(h.configProps&&k(g,a,h.route,h.configProps),i(g,a,r)):i()}var f=c.matched[d],b=f&&f.components[l];if(!f||!b)return p[l]=null,i();p[l]={component:b},a.registerRouteInstance=function(n,e){var t=f.instances[l];(e&&t!==n||!e&&t===n)&&(f.instances[l]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){f.instances[l]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==f.instances[l]&&(f.instances[l]=n.componentInstance),w(c)};var y=f.props&&f.props[l];return y&&(o(p[l],{route:c,configProps:y}),k(b,a,c,y)),i(b,a,r)}};function k(n,e,t,r){var s=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(s){s=e.props=o({},s);var a=e.attrs=e.attrs||{};for(var i in s)n.props&&i in n.props||(a[i]=s[i],delete s[i])}}function z(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var s=n.replace(/^\//,"").split("/"),a=0;a<s.length;a++){var i=s[a];".."===i?o.pop():"."!==i&&o.push(i)}return""!==o[0]&&o.unshift(""),o.join("/")}function S(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var A=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},B=q,j=I,C=function(n,e){return P(I(n,e),e)},_=P,T=R,F=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function I(n,e){for(var t,r=[],o=0,s=0,a="",i=e&&e.delimiter||"/";null!=(t=F.exec(n));){var l=t[0],c=t[1],p=t.index;if(a+=n.slice(s,p),s=p+l.length,c)a+=c[1];else{var d=n[s],u=t[2],m=t[3],h=t[4],g=t[5],f=t[6],b=t[7];a&&(r.push(a),a="");var y=null!=u&&null!=d&&d!==u,v="+"===f||"*"===f,x="?"===f||"*"===f,w=t[2]||i,E=h||g;r.push({name:m||o++,prefix:u||"",delimiter:w,optional:x,repeat:v,partial:y,asterisk:!!b,pattern:E?O(E):b?".*":"[^"+L(w)+"]+?"})}}return s<n.length&&(a+=n.substr(s)),a&&r.push(a),r}function D(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function P(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",$(e)));return function(e,r){for(var o="",s=e||{},a=(r||{}).pretty?D:encodeURIComponent,i=0;i<n.length;i++){var l=n[i];if("string"!=typeof l){var c,p=s[l.name];if(null==p){if(l.optional){l.partial&&(o+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(A(p)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(c=a(p[d]),!t[i].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===d?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(p).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):a(p),!t[i].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');o+=l.prefix+c}}else o+=l}return o}}function L(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function O(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function M(n,e){return n.keys=e,n}function $(n){return n&&n.sensitive?"":"i"}function R(n,e,t){A(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,s="",a=0;a<n.length;a++){var i=n[a];if("string"==typeof i)s+=L(i);else{var l=L(i.prefix),c="(?:"+i.pattern+")";e.push(i),i.repeat&&(c+="(?:"+l+c+")*"),s+=c=i.optional?i.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var p=L(t.delimiter||"/"),d=s.slice(-p.length)===p;return r||(s=(d?s.slice(0,-p.length):s)+"(?:"+p+"(?=$))?"),s+=o?"$":r&&d?"":"(?="+p+"|$)",M(new RegExp("^"+s,$(t)),e)}function q(n,e,t){return A(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return M(n,e)}(n,e):A(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(q(n[o],e,t).source);return M(new RegExp("(?:"+r.join("|")+")",$(t)),e)}(n,e,t):function(n,e,t){return R(I(n,t),e,t)}(n,e,t)}B.parse=j,B.compile=C,B.tokensToFunction=_,B.tokensToRegExp=T;var N=Object.create(null);function H(n,e,t){e=e||{};try{var r=N[n]||(N[n]=B.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function U(n,e,t,r){var s="string"==typeof n?{path:n}:n;if(s._normalized)return s;if(s.name){var a=(s=o({},n)).params;return a&&"object"==typeof a&&(s.params=o({},a)),s}if(!s.path&&s.params&&e){(s=o({},s))._normalized=!0;var i=o(o({},e.params),s.params);if(e.name)s.name=e.name,s.params=i;else if(e.matched.length){var l=e.matched[e.matched.length-1].path;s.path=H(l,i,e.path)}else 0;return s}var c=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(s.path||""),u=e&&e.path||"/",m=c.path?z(c.path,u,t||s.append):u,h=function(n,e,t){void 0===e&&(e={});var r,o=t||d;try{r=o(n||"")}catch(n){r={}}for(var s in e){var a=e[s];r[s]=Array.isArray(a)?a.map(p):p(a)}return r}(c.query,s.query,r&&r.options.parseQuery),g=s.hash||c.hash;return g&&"#"!==g.charAt(0)&&(g="#"+g),{_normalized:!0,path:m,query:h,hash:g}}var Y,Z=function(){},J={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,s=t.resolve(this.to,r,this.append),a=s.location,i=s.route,l=s.href,c={},p=t.options.linkActiveClass,d=t.options.linkExactActiveClass,u=null==p?"router-link-active":p,g=null==d?"router-link-exact-active":d,f=null==this.activeClass?u:this.activeClass,b=null==this.exactActiveClass?g:this.exactActiveClass,y=i.redirectedFrom?h(null,U(i.redirectedFrom),null,t):i;c[b]=v(r,y,this.exactPath),c[f]=this.exact||this.exactPath?c[b]:function(n,e){return 0===n.path.replace(m,"/").indexOf(e.path.replace(m,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,y);var x=c[b]?this.ariaCurrentValue:null,w=function(n){X(n)&&(e.replace?t.replace(a,Z):t.push(a,Z))},E={click:X};Array.isArray(this.event)?this.event.forEach((function(n){E[n]=w})):E[this.event]=w;var k={class:c},z=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:l,route:i,navigate:w,isActive:c[f],isExactActive:c[b]});if(z){if(1===z.length)return z[0];if(z.length>1||!z.length)return 0===z.length?n():n("span",{},z)}if("a"===this.tag)k.on=E,k.attrs={href:l,"aria-current":x};else{var S=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(S){S.isStatic=!1;var A=S.data=o({},S.data);for(var B in A.on=A.on||{},A.on){var j=A.on[B];B in E&&(A.on[B]=Array.isArray(j)?j:[j])}for(var C in E)C in A.on?A.on[C].push(E[C]):A.on[C]=w;var _=S.data.attrs=o({},S.data.attrs);_.href=l,_["aria-current"]=x}else k.on=E}return n(this.tag,k,this.$slots.default)}};function X(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var W="undefined"!=typeof window;function G(n,e,t,r,o){var s=e||[],a=t||Object.create(null),i=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,s,a){var i=o.path,l=o.name;0;var c=o.pathToRegexpOptions||{},p=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return S(e.path+"/"+n)}(i,s,c.strict);"boolean"==typeof o.caseSensitive&&(c.sensitive=o.caseSensitive);var d={path:p,regex:Q(p,c),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:l,parent:s,matchAs:a,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var s=a?S(a+"/"+o.path):void 0;n(e,t,r,o,d,s)}));t[d.path]||(e.push(d.path),t[d.path]=d);if(void 0!==o.alias)for(var u=Array.isArray(o.alias)?o.alias:[o.alias],m=0;m<u.length;++m){0;var h={path:u[m],children:o.children};n(e,t,r,h,s,d.path||"/")}l&&(r[l]||(r[l]=d))}(s,a,i,n,o)}));for(var l=0,c=s.length;l<c;l++)"*"===s[l]&&(s.push(s.splice(l,1)[0]),c--,l--);return{pathList:s,pathMap:a,nameMap:i}}function Q(n,e){return B(n,[],e)}function K(n,e){var t=G(n),r=t.pathList,o=t.pathMap,s=t.nameMap;function a(n,t,a){var i=U(n,t,!1,e),c=i.name;if(c){var p=s[c];if(!p)return l(null,i);var d=p.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof i.params&&(i.params={}),t&&"object"==typeof t.params)for(var u in t.params)!(u in i.params)&&d.indexOf(u)>-1&&(i.params[u]=t.params[u]);return i.path=H(p.path,i.params),l(p,i,a)}if(i.path){i.params={};for(var m=0;m<r.length;m++){var h=r[m],g=o[h];if(V(g.regex,i.path,i.params))return l(g,i,a)}}return l(null,i)}function i(n,t){var r=n.redirect,o="function"==typeof r?r(h(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return l(null,t);var i=o,c=i.name,p=i.path,d=t.query,u=t.hash,m=t.params;if(d=i.hasOwnProperty("query")?i.query:d,u=i.hasOwnProperty("hash")?i.hash:u,m=i.hasOwnProperty("params")?i.params:m,c){s[c];return a({_normalized:!0,name:c,query:d,hash:u,params:m},void 0,t)}if(p){var g=function(n,e){return z(n,e.parent?e.parent.path:"/",!0)}(p,n);return a({_normalized:!0,path:H(g,m),query:d,hash:u},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?i(n,r||t):n&&n.matchAs?function(n,e,t){var r=a({_normalized:!0,path:H(t,e.params)});if(r){var o=r.matched,s=o[o.length-1];return e.params=r.params,l(s,e)}return l(null,e)}(0,t,n.matchAs):h(n,t,r,e)}return{match:a,addRoute:function(n,e){var t="object"!=typeof n?s[n]:void 0;G([e||n],r,o,s,t),t&&t.alias.length&&G(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,s,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){G(n,r,o,s)}}}function V(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,s=r.length;o<s;++o){var a=n.keys[o-1];a&&(t[a.name||"pathMatch"]="string"==typeof r[o]?c(r[o]):r[o])}return!0}var nn=W&&window.performance&&window.performance.now?window.performance:Date;function en(){return nn.now().toFixed(3)}var tn=en();function rn(){return tn}function on(n){return tn=n}var sn=Object.create(null);function an(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=o({},window.history.state);return t.key=rn(),window.history.replaceState(t,"",e),window.addEventListener("popstate",pn),function(){window.removeEventListener("popstate",pn)}}function ln(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var s=function(){var n=rn();if(n)return sn[n]}(),a=o.call(n,e,t,r?s:null);a&&("function"==typeof a.then?a.then((function(n){gn(n,s)})).catch((function(n){0})):gn(a,s))}))}}function cn(){var n=rn();n&&(sn[n]={x:window.pageXOffset,y:window.pageYOffset})}function pn(n){cn(),n.state&&n.state.key&&on(n.state.key)}function dn(n){return mn(n.x)||mn(n.y)}function un(n){return{x:mn(n.x)?n.x:window.pageXOffset,y:mn(n.y)?n.y:window.pageYOffset}}function mn(n){return"number"==typeof n}var hn=/^#\d/;function gn(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=hn.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var s=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,s={x:mn((t=s).x)?t.x:0,y:mn(t.y)?t.y:0})}else dn(n)&&(e=un(n))}else r&&dn(n)&&(e=un(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var fn,bn=W&&((-1===(fn=window.navigator.userAgent).indexOf("Android 2.")&&-1===fn.indexOf("Android 4.0")||-1===fn.indexOf("Mobile Safari")||-1!==fn.indexOf("Chrome")||-1!==fn.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function yn(n,e){cn();var t=window.history;try{if(e){var r=o({},t.state);r.key=rn(),t.replaceState(r,"",n)}else t.pushState({key:on(en())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function vn(n){yn(n,!0)}var xn={redirected:2,aborted:4,cancelled:8,duplicated:16};function wn(n,e){return kn(n,e,xn.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return zn.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function En(n,e){return kn(n,e,xn.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function kn(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var zn=["params","query","hash"];function Sn(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function An(n,e){return Sn(n)&&n._isRouter&&(null==e||n.type===e)}function Bn(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}function jn(n){return function(e,t,r){var o=!1,s=0,a=null;Cn(n,(function(n,e,t,i){if("function"==typeof n&&void 0===n.cid){o=!0,s++;var l,c=Fn((function(e){var o;((o=e).__esModule||Tn&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Y.extend(e),t.components[i]=e,--s<=0&&r()})),p=Fn((function(n){var e="Failed to resolve async component "+i+": "+n;a||(a=Sn(n)?n:new Error(e),r(a))}));try{l=n(c,p)}catch(n){p(n)}if(l)if("function"==typeof l.then)l.then(c,p);else{var d=l.component;d&&"function"==typeof d.then&&d.then(c,p)}}})),o||r()}}function Cn(n,e){return _n(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function _n(n){return Array.prototype.concat.apply([],n)}var Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Fn(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var In=function(n,e){this.router=n,this.base=function(n){if(!n)if(W){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=f,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Dn(n,e,t,r){var o=Cn(n,(function(n,r,o,s){var a=function(n,e){"function"!=typeof n&&(n=Y.extend(n));return n.options[e]}(n,e);if(a)return Array.isArray(a)?a.map((function(n){return t(n,r,o,s)})):t(a,r,o,s)}));return _n(r?o.reverse():o)}function Pn(n,e){if(e)return function(){return n.apply(e,arguments)}}In.prototype.listen=function(n){this.cb=n},In.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},In.prototype.onError=function(n){this.errorCbs.push(n)},In.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var s=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,s)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(An(n,xn.redirected)&&s===f||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},In.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var s=function(n){!An(n)&&Sn(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},a=n.matched.length-1,i=o.matched.length-1;if(v(n,o)&&a===i&&n.matched[a]===o.matched[i])return this.ensureURL(),n.hash&&ln(this.router,o,n,!1),s(function(n,e){var t=kn(n,e,xn.duplicated,'Avoided redundant navigation to current location: "'+n.fullPath+'".');return t.name="NavigationDuplicated",t}(o,n));var l=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),c=l.updated,p=l.deactivated,d=l.activated,u=[].concat(function(n){return Dn(n,"beforeRouteLeave",Pn,!0)}(p),this.router.beforeHooks,function(n){return Dn(n,"beforeRouteUpdate",Pn)}(c),d.map((function(n){return n.beforeEnter})),jn(d)),m=function(e,t){if(r.pending!==n)return s(En(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return kn(n,e,xn.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):Sn(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(wn(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Bn(u,m,(function(){Bn(function(n){return Dn(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,s){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),s(n)}))}}(n,t,r)}))}(d).concat(r.router.resolveHooks),m,(function(){if(r.pending!==n)return s(En(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){w(n)}))}))}))},In.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},In.prototype.setupListeners=function(){},In.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=f,this.pending=null};var Ln=function(n){function e(e,t){n.call(this,e,t),this._startLocation=On(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=bn&&t;r&&this.listeners.push(an());var o=function(){var t=n.current,o=On(n.base);n.current===f&&o===n._startLocation||n.transitionTo(o,(function(n){r&&ln(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){yn(S(r.base+n.fullPath)),ln(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){vn(S(r.base+n.fullPath)),ln(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(On(this.base)!==this.current.fullPath){var e=S(this.base+this.current.fullPath);n?yn(e):vn(e)}},e.prototype.getCurrentLocation=function(){return On(this.base)},e}(In);function On(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(S(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Mn=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=On(n);if(!/^\/#/.test(e))return window.location.replace(S(n+"/#"+e)),!0}(this.base)||$n()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=bn&&e;t&&this.listeners.push(an());var r=function(){var e=n.current;$n()&&n.transitionTo(Rn(),(function(r){t&&ln(n.router,r,e,!0),bn||Hn(r.fullPath)}))},o=bn?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Nn(n.fullPath),ln(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Hn(n.fullPath),ln(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Rn()!==e&&(n?Nn(e):Hn(e))},e.prototype.getCurrentLocation=function(){return Rn()},e}(In);function $n(){var n=Rn();return"/"===n.charAt(0)||(Hn("/"+n),!1)}function Rn(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function qn(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Nn(n){bn?yn(qn(n)):window.location.hash=n}function Hn(n){bn?vn(qn(n)):window.location.replace(qn(n))}var Un=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){An(n,xn.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(In),Yn=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=K(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!bn&&!1!==n.fallback,this.fallback&&(e="hash"),W||(e="abstract"),this.mode=e,e){case"history":this.history=new Ln(this,n.base);break;case"hash":this.history=new Mn(this,n.base,this.fallback);break;case"abstract":this.history=new Un(this,n.base);break;default:0}},Zn={currentRoute:{configurable:!0}};Yn.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Zn.currentRoute.get=function(){return this.history&&this.history.current},Yn.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Ln||t instanceof Mn){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;bn&&o&&"fullPath"in n&&ln(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Yn.prototype.beforeEach=function(n){return Xn(this.beforeHooks,n)},Yn.prototype.beforeResolve=function(n){return Xn(this.resolveHooks,n)},Yn.prototype.afterEach=function(n){return Xn(this.afterHooks,n)},Yn.prototype.onReady=function(n,e){this.history.onReady(n,e)},Yn.prototype.onError=function(n){this.history.onError(n)},Yn.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Yn.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Yn.prototype.go=function(n){this.history.go(n)},Yn.prototype.back=function(){this.go(-1)},Yn.prototype.forward=function(){this.go(1)},Yn.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Yn.prototype.resolve=function(n,e,t){var r=U(n,e=e||this.history.current,t,this),o=this.match(r,e),s=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?S(n+"/"+r):r}(this.history.base,s,this.mode),normalizedTo:r,resolved:o}},Yn.prototype.getRoutes=function(){return this.matcher.getRoutes()},Yn.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==f&&this.history.transitionTo(this.history.getCurrentLocation())},Yn.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==f&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Yn.prototype,Zn);var Jn=Yn;function Xn(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Yn.install=function n(e){if(!n.installed||Y!==e){n.installed=!0,Y=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",E),e.component("RouterLink",J);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Yn.version="3.6.5",Yn.isNavigationFailure=An,Yn.NavigationFailureType=xn,Yn.START_LOCATION=f,W&&window.Vue&&window.Vue.use(Yn);t(132);var Wn=t(0),Gn=t(117),Qn=t.n(Gn),Kn=t(118),Vn=t.n(Kn),ne={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${Vn()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=te(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=re(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return Qn()([{name:"description",content:this.$description}],n,this.siteMeta,oe)},updateCanonicalLink(){ee(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",te(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){re(null,this.currentMetaTags),ee()}};function ee(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function te(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function re(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function oe(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var se=t(29),ae=t.n(se),ie={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:ae()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+t;for(let n=0;n<e.length;n++){const s=e[n],a=e[n+1],i=0===n&&0===t||t>=s.parentElement.offsetTop+10&&(!a||t<a.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(i&&l!==decodeURIComponent(s.hash)){const t=s;if(o===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},le=t(30),ce=t.n(le),pe={mounted(){ce.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||r.a.component(n.name)||ce.a.start(),t()}),this.$router.afterEach(()=>{ce.a.done(),this.isSidebarOpen=!1})}},de=(t(265),Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}),ue=function(n){return"IMG"===n.tagName},me=function(n){return n&&1===n.nodeType},he=function(n){return".svg"===(n.currentSrc||n.src).substr(-4).toLowerCase()},ge=function(n){try{return Array.isArray(n)?n.filter(ue):function(n){return NodeList.prototype.isPrototypeOf(n)}(n)?[].slice.call(n).filter(ue):me(n)?[n].filter(ue):"string"==typeof n?[].slice.call(document.querySelectorAll(n)).filter(ue):[]}catch(n){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},fe=function(n){var e=document.createElement("div");return e.classList.add("medium-zoom-overlay"),e.style.background=n,e},be=function(n){var e=n.getBoundingClientRect(),t=e.top,r=e.left,o=e.width,s=e.height,a=n.cloneNode(),i=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return a.removeAttribute("id"),a.style.position="absolute",a.style.top=t+i+"px",a.style.left=r+l+"px",a.style.width=o+"px",a.style.height=s+"px",a.style.transform="",a},ye=function(n,e){var t=de({bubbles:!1,cancelable:!1,detail:void 0},e);if("function"==typeof window.CustomEvent)return new CustomEvent(n,t);var r=document.createEvent("CustomEvent");return r.initCustomEvent(n,t.bubbles,t.cancelable,t.detail),r};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===t&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=n:o.appendChild(document.createTextNode(n))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var ve=function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=window.Promise||function(n){function e(){}n(e,e)},o=function(n){var e=n.target;e!==S?-1!==v.indexOf(e)&&g({target:e}):h()},s=function(){if(!w&&z.original){var n=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(E-n)>k.scrollOffset&&setTimeout(h,150)}},a=function(n){var e=n.key||n.keyCode;"Escape"!==e&&"Esc"!==e&&27!==e||h()},i=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n;if(n.background&&(S.style.background=n.background),n.container&&n.container instanceof Object&&(e.container=de({},k.container,n.container)),n.template){var t=me(n.template)?n.template:document.querySelector(n.template);e.template=t}return k=de({},k,e),v.forEach((function(n){n.dispatchEvent(ye("medium-zoom:update",{detail:{zoom:A}}))})),A},l=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(de({},k,e))},c=function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];var r=e.reduce((function(n,e){return[].concat(n,ge(e))}),[]);return r.filter((function(n){return-1===v.indexOf(n)})).forEach((function(n){v.push(n),n.classList.add("medium-zoom-image")})),x.forEach((function(n){var e=n.type,t=n.listener,o=n.options;r.forEach((function(n){n.addEventListener(e,t,o)}))})),A},p=function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];z.zoomed&&h();var r=e.length>0?e.reduce((function(n,e){return[].concat(n,ge(e))}),[]):v;return r.forEach((function(n){n.classList.remove("medium-zoom-image"),n.dispatchEvent(ye("medium-zoom:detach",{detail:{zoom:A}}))})),v=v.filter((function(n){return-1===r.indexOf(n)})),A},d=function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(r){r.addEventListener("medium-zoom:"+n,e,t)})),x.push({type:"medium-zoom:"+n,listener:e,options:t}),A},u=function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(r){r.removeEventListener("medium-zoom:"+n,e,t)})),x=x.filter((function(t){return!(t.type==="medium-zoom:"+n&&t.listener.toString()===e.toString())})),A},m=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n.target,t=function(){var n={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},e=void 0,t=void 0;if(k.container)if(k.container instanceof Object)e=(n=de({},n,k.container)).width-n.left-n.right-2*k.margin,t=n.height-n.top-n.bottom-2*k.margin;else{var r=(me(k.container)?k.container:document.querySelector(k.container)).getBoundingClientRect(),o=r.width,s=r.height,a=r.left,i=r.top;n=de({},n,{width:o,height:s,left:a,top:i})}e=e||n.width-2*k.margin,t=t||n.height-2*k.margin;var l=z.zoomedHd||z.original,c=he(l)?e:l.naturalWidth||e,p=he(l)?t:l.naturalHeight||t,d=l.getBoundingClientRect(),u=d.top,m=d.left,h=d.width,g=d.height,f=Math.min(Math.max(h,c),e)/h,b=Math.min(Math.max(g,p),t)/g,y=Math.min(f,b),v="scale("+y+") translate3d("+((e-h)/2-m+k.margin+n.left)/y+"px, "+((t-g)/2-u+k.margin+n.top)/y+"px, 0)";z.zoomed.style.transform=v,z.zoomedHd&&(z.zoomedHd.style.transform=v)};return new r((function(n){if(e&&-1===v.indexOf(e))n(A);else{if(z.zoomed)n(A);else{if(e)z.original=e;else{if(!(v.length>0))return void n(A);var r=v;z.original=r[0]}if(z.original.dispatchEvent(ye("medium-zoom:open",{detail:{zoom:A}})),E=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,w=!0,z.zoomed=be(z.original),document.body.appendChild(S),k.template){var o=me(k.template)?k.template:document.querySelector(k.template);z.template=document.createElement("div"),z.template.appendChild(o.content.cloneNode(!0)),document.body.appendChild(z.template)}if(z.original.parentElement&&"PICTURE"===z.original.parentElement.tagName&&z.original.currentSrc&&(z.zoomed.src=z.original.currentSrc),document.body.appendChild(z.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),z.original.classList.add("medium-zoom-image--hidden"),z.zoomed.classList.add("medium-zoom-image--opened"),z.zoomed.addEventListener("click",h),z.zoomed.addEventListener("transitionend",(function e(){w=!1,z.zoomed.removeEventListener("transitionend",e),z.original.dispatchEvent(ye("medium-zoom:opened",{detail:{zoom:A}})),n(A)})),z.original.getAttribute("data-zoom-src")){z.zoomedHd=z.zoomed.cloneNode(),z.zoomedHd.removeAttribute("srcset"),z.zoomedHd.removeAttribute("sizes"),z.zoomedHd.removeAttribute("loading"),z.zoomedHd.src=z.zoomed.getAttribute("data-zoom-src"),z.zoomedHd.onerror=function(){clearInterval(s),console.warn("Unable to reach the zoom image target "+z.zoomedHd.src),z.zoomedHd=null,t()};var s=setInterval((function(){z.zoomedHd.complete&&(clearInterval(s),z.zoomedHd.classList.add("medium-zoom-image--opened"),z.zoomedHd.addEventListener("click",h),document.body.appendChild(z.zoomedHd),t())}),10)}else if(z.original.hasAttribute("srcset")){z.zoomedHd=z.zoomed.cloneNode(),z.zoomedHd.removeAttribute("sizes"),z.zoomedHd.removeAttribute("loading");var a=z.zoomedHd.addEventListener("load",(function(){z.zoomedHd.removeEventListener("load",a),z.zoomedHd.classList.add("medium-zoom-image--opened"),z.zoomedHd.addEventListener("click",h),document.body.appendChild(z.zoomedHd),t()}))}else t()}}}))},h=function(){return new r((function(n){if(!w&&z.original){w=!0,document.body.classList.remove("medium-zoom--opened"),z.zoomed.style.transform="",z.zoomedHd&&(z.zoomedHd.style.transform=""),z.template&&(z.template.style.transition="opacity 150ms",z.template.style.opacity=0),z.original.dispatchEvent(ye("medium-zoom:close",{detail:{zoom:A}})),z.zoomed.addEventListener("transitionend",(function e(){z.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(z.zoomed),z.zoomedHd&&document.body.removeChild(z.zoomedHd),document.body.removeChild(S),z.zoomed.classList.remove("medium-zoom-image--opened"),z.template&&document.body.removeChild(z.template),w=!1,z.zoomed.removeEventListener("transitionend",e),z.original.dispatchEvent(ye("medium-zoom:closed",{detail:{zoom:A}})),z.original=null,z.zoomed=null,z.zoomedHd=null,z.template=null,n(A)}))}else n(A)}))},g=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n.target;return z.original?h():m({target:e})},f=function(){return k},b=function(){return v},y=function(){return z.original},v=[],x=[],w=!1,E=0,k=t,z={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(e)?k=e:(e||"string"==typeof e)&&c(e),k=de({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},k);var S=fe(k.background);document.addEventListener("click",o),document.addEventListener("keyup",a),document.addEventListener("scroll",s),window.addEventListener("resize",h);var A={open:m,close:h,toggle:g,update:i,clone:l,attach:c,detach:p,on:d,off:u,getOptions:f,getImages:b,getZoomedImage:y};return A},xe={data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=ve("img",{})},1e3)}}},we={props:{parent:Object,code:String,options:{align:String,color:String,backgroundTransition:Boolean,backgroundColor:String,successText:String,staticIcon:Boolean}},data:()=>({success:!1,originalBackground:null,originalTransition:null}),computed:{alignStyle(){let n={};return n[this.options.align]="7.5px",n},iconClass(){return this.options.staticIcon?"":"hover"}},mounted(){this.originalTransition=this.parent.style.transition,this.originalBackground=this.parent.style.background},beforeDestroy(){this.parent.style.transition=this.originalTransition,this.parent.style.background=this.originalBackground},methods:{hexToRgb(n){let e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null},copyToClipboard(n){if(navigator.clipboard)navigator.clipboard.writeText(this.code).then(()=>{this.setSuccessTransitions()},()=>{});else{let n=document.createElement("textarea");document.body.appendChild(n),n.value=this.code,n.select(),document.execCommand("Copy"),n.remove(),this.setSuccessTransitions()}},setSuccessTransitions(){if(clearTimeout(this.successTimeout),this.options.backgroundTransition){this.parent.style.transition="background 350ms";let n=this.hexToRgb(this.options.backgroundColor);this.parent.style.background=`rgba(${n.r}, ${n.g}, ${n.b}, 0.1)`}this.success=!0,this.successTimeout=setTimeout(()=>{this.options.backgroundTransition&&(this.parent.style.background=this.originalBackground,this.parent.style.transition=this.originalTransition),this.success=!1},500)}}},Ee=(t(266),t(4)),ke=Object(Ee.a)(we,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"code-copy"},[e("svg",{class:n.iconClass,style:n.alignStyle,attrs:{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},on:{click:n.copyToClipboard}},[e("path",{attrs:{fill:"none",d:"M0 0h24v24H0z"}}),n._v(" "),e("path",{attrs:{fill:n.options.color,d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z"}})]),n._v(" "),e("span",{class:n.success?"success":"",style:n.alignStyle},[n._v("\n        "+n._s(n.options.successText)+"\n    ")])])}),[],!1,null,"49140617",null).exports,ze=(t(267),[ne,ie,pe,xe,{updated(){this.update()},methods:{update(){setTimeout(()=>{document.querySelectorAll('div[class*="language-"] pre').forEach(n=>{if(n.classList.contains("code-copy-added"))return;let e=new(r.a.extend(ke));e.options={align:"bottom",color:"#27b1ff",backgroundTransition:!0,backgroundColor:"#0075b8",successText:"Copied!",staticIcon:!1},e.code=n.innerText,e.parent=n,e.$mount(),n.classList.add("code-copy-added"),n.appendChild(e.$el)})},100)}}}]),Se={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return Object(Wn.h)("layout",n),r.a.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},Ae=Object(Ee.a)(Se,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;Object(Wn.f)(Ae,"mixins",ze);const Be=[{name:"v-e6b7fcfa",path:"/web/js/js-%E7%B2%BE%E5%BA%A6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-e6b7fcfa").then(t)}},{path:"/web/js/js-精度.html",redirect:"/web/js/js-%E7%B2%BE%E5%BA%A6.html"},{path:"/web/js/js-精度.html",redirect:"/web/js/js-%E7%B2%BE%E5%BA%A6.html"},{name:"v-9bb2069c",path:"/about.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-9bb2069c").then(t)}},{name:"v-0699efe9",path:"/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0699efe9").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-21482dfc",path:"/guide/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-21482dfc").then(t)}},{path:"/guide/index.html",redirect:"/guide/"},{name:"v-2f2cd45d",path:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2f2cd45d").then(t)}},{path:"/zs-ee-框架/mybatis-plus/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/"},{path:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/index.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/"},{path:"/zs-ee-框架/mybatis-plus/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/"},{name:"v-66b8cf2a",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-66b8cf2a").then(t)}},{path:"/zs-ee-框架/spring/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/"},{path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/index.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/"},{path:"/zs-ee-框架/spring/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/"},{name:"v-5d14cacd",path:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/mybatis-plus%E6%97%A5%E5%BF%97.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-5d14cacd").then(t)}},{path:"/zs-ee-框架/mybatis-plus/mybatis-plus日志.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/mybatis-plus%E6%97%A5%E5%BF%97.html"},{path:"/zs-ee-框架/mybatis-plus/mybatis-plus日志.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/mybatis-plus%E6%97%A5%E5%BF%97.html"},{name:"v-0fecc99c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/aop.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0fecc99c").then(t)}},{path:"/zs-ee-框架/spring/aop.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/aop.html"},{path:"/zs-ee-框架/spring/aop.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/aop.html"},{name:"v-b8a32b9c",path:"/zs-resume/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-b8a32b9c").then(t)}},{path:"/zs-resume/index.html",redirect:"/zs-resume/"},{name:"v-2a712b8a",path:"/zs-project/mallchat/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2a712b8a").then(t)}},{path:"/zs-project/mallchat/index.html",redirect:"/zs-project/mallchat/"},{name:"v-56a9f4d0",path:"/zs-project/mallchat/%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E3%80%90%E5%BF%85%E8%AF%BB%E3%80%91.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-56a9f4d0").then(t)}},{path:"/zs-project/mallchat/项目整体介绍【必读】.html",redirect:"/zs-project/mallchat/%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E3%80%90%E5%BF%85%E8%AF%BB%E3%80%91.html"},{path:"/zs-project/mallchat/项目整体介绍【必读】.html",redirect:"/zs-project/mallchat/%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E3%80%90%E5%BF%85%E8%AF%BB%E3%80%91.html"},{name:"v-c27a070e",path:"/zs-se/io/3%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-c27a070e").then(t)}},{path:"/zs-se/io/3、字符流.html",redirect:"/zs-se/io/3%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81.html"},{path:"/zs-se/io/3、字符流.html",redirect:"/zs-se/io/3%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81.html"},{name:"v-ba0a6e80",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--1.%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ba0a6e80").then(t)}},{path:"/zs-ee-框架/cloud-gateway/配置--1.过滤器工厂.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--1.%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82.html"},{path:"/zs-ee-框架/cloud-gateway/配置--1.过滤器工厂.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--1.%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82.html"},{name:"v-f85073a0",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.2.webflux_security.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-f85073a0").then(t)}},{path:"/zs-ee-框架/spring/Spring--3.2.webflux_security.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.2.webflux_security.html"},{path:"/zs-ee-框架/spring/Spring--3.2.webflux_security.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.2.webflux_security.html"},{name:"v-8d895560",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--2.%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8d895560").then(t)}},{path:"/zs-ee-框架/cloud-gateway/配置--2.全局过滤器.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--2.%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8.html"},{path:"/zs-ee-框架/cloud-gateway/配置--2.全局过滤器.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--2.%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8.html"},{name:"v-ab742efa",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.3.bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ab742efa").then(t)}},{path:"/zs-ee-框架/spring/spring--1.3.bean实例化基本流程.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.3.bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html"},{path:"/zs-ee-框架/spring/spring--1.3.bean实例化基本流程.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.3.bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html"},{name:"v-6606fa4b",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--0.%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6606fa4b").then(t)}},{path:"/zs-ee-框架/cloud-gateway/配置--0.断言工厂.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--0.%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.html"},{path:"/zs-ee-框架/cloud-gateway/配置--0.断言工厂.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--0.%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.html"},{name:"v-39a0cd65",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.1.xml_bean%E7%9A%84%E9%85%8D%E7%BD%AE.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-39a0cd65").then(t)}},{path:"/zs-ee-框架/spring/spring--1.1.xml_bean的配置.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.1.xml_bean%E7%9A%84%E9%85%8D%E7%BD%AE.html"},{path:"/zs-ee-框架/spring/spring--1.1.xml_bean的配置.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.1.xml_bean%E7%9A%84%E9%85%8D%E7%BD%AE.html"},{name:"v-a4678b48",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.1.webflux.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-a4678b48").then(t)}},{path:"/zs-ee-框架/spring/Spring--3.1.webflux.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.1.webflux.html"},{path:"/zs-ee-框架/spring/Spring--3.1.webflux.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.1.webflux.html"},{name:"v-06dcd69c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.1.ioc-%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%B9%E5%99%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-06dcd69c").then(t)}},{path:"/zs-ee-框架/spring/spring--6.1.ioc-创建简单的容器.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.1.ioc-%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%B9%E5%99%A8.html"},{path:"/zs-ee-框架/spring/spring--6.1.ioc-创建简单的容器.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.1.ioc-%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%B9%E5%99%A8.html"},{name:"v-732234fc",path:"/zs-ee-%E6%A1%86%E6%9E%B6/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-732234fc").then(t)}},{path:"/zs-ee-框架/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/"},{path:"/zs-ee-%E6%A1%86%E6%9E%B6/index.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/"},{path:"/zs-ee-框架/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/"},{name:"v-99f7038c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E6%A6%82%E8%BF%B0--%E4%BB%8B%E7%BB%8D.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-99f7038c").then(t)}},{path:"/zs-ee-框架/cloud-gateway/概述--介绍.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E6%A6%82%E8%BF%B0--%E4%BB%8B%E7%BB%8D.html"},{path:"/zs-ee-框架/cloud-gateway/概述--介绍.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E6%A6%82%E8%BF%B0--%E4%BB%8B%E7%BB%8D.html"},{name:"v-7447f441",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.2.ioc-%E5%AE%9A%E4%B9%89%E6%B1%A0%E5%92%8C%E5%8D%95%E4%BE%8B%E6%B1%A0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7447f441").then(t)}},{path:"/zs-ee-框架/spring/spring--6.2.ioc-定义池和单例池.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.2.ioc-%E5%AE%9A%E4%B9%89%E6%B1%A0%E5%92%8C%E5%8D%95%E4%BE%8B%E6%B1%A0.html"},{path:"/zs-ee-框架/spring/spring--6.2.ioc-定义池和单例池.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.2.ioc-%E5%AE%9A%E4%B9%89%E6%B1%A0%E5%92%8C%E5%8D%95%E4%BE%8B%E6%B1%A0.html"},{name:"v-ff6c6c1c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.0%E6%89%8B%E5%86%99spring.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ff6c6c1c").then(t)}},{path:"/zs-ee-框架/spring/spring--6.0手写spring.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.0%E6%89%8B%E5%86%99spring.html"},{path:"/zs-ee-框架/spring/spring--6.0手写spring.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.0%E6%89%8B%E5%86%99spring.html"},{name:"v-34b82956",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-34b82956").then(t)}},{path:"/zs-ee-框架/cloud-gateway/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/"},{path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/index.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/"},{path:"/zs-ee-框架/cloud-gateway/",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/"},{name:"v-0efc73ec",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.2.xml_%E5%BA%94%E7%94%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0efc73ec").then(t)}},{path:"/zs-ee-框架/spring/spring--1.2.xml_应用.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.2.xml_%E5%BA%94%E7%94%A8.html"},{path:"/zs-ee-框架/spring/spring--1.2.xml_应用.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.2.xml_%E5%BA%94%E7%94%A8.html"},{name:"v-2580c912",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/%E6%A6%82%E8%BF%B0--01.spring%E6%98%AF%E4%BB%80%E4%B9%88.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2580c912").then(t)}},{path:"/zs-ee-框架/spring/概述--01.spring是什么.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/%E6%A6%82%E8%BF%B0--01.spring%E6%98%AF%E4%BB%80%E4%B9%88.html"},{path:"/zs-ee-框架/spring/概述--01.spring是什么.html",redirect:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/%E6%A6%82%E8%BF%B0--01.spring%E6%98%AF%E4%BB%80%E4%B9%88.html"},{name:"v-93de39aa",path:"/zs-se/io/1%E3%80%81IO%E6%B5%81%E6%A6%82%E8%BF%B0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-93de39aa").then(t)}},{path:"/zs-se/io/1、IO流概述.html",redirect:"/zs-se/io/1%E3%80%81IO%E6%B5%81%E6%A6%82%E8%BF%B0.html"},{path:"/zs-se/io/1、IO流概述.html",redirect:"/zs-se/io/1%E3%80%81IO%E6%B5%81%E6%A6%82%E8%BF%B0.html"},{name:"v-fb163760",path:"/zs-se/io/4%E3%80%81IO%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-fb163760").then(t)}},{path:"/zs-se/io/4、IO异常处理.html",redirect:"/zs-se/io/4%E3%80%81IO%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"},{path:"/zs-se/io/4、IO异常处理.html",redirect:"/zs-se/io/4%E3%80%81IO%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"},{name:"v-66f72c43",path:"/zs-se/io/6%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-66f72c43").then(t)}},{path:"/zs-se/io/6、转换流.html",redirect:"/zs-se/io/6%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81.html"},{path:"/zs-se/io/6、转换流.html",redirect:"/zs-se/io/6%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81.html"},{name:"v-11b58af6",path:"/zs-se/io/2%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-11b58af6").then(t)}},{path:"/zs-se/io/2、字节流.html",redirect:"/zs-se/io/2%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81.html"},{path:"/zs-se/io/2、字节流.html",redirect:"/zs-se/io/2%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81.html"},{name:"v-4e952ebc",path:"/zs-se/io/5%E3%80%81%E7%BC%93%E5%86%B2%E6%B5%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-4e952ebc").then(t)}},{path:"/zs-se/io/5、缓冲流.html",redirect:"/zs-se/io/5%E3%80%81%E7%BC%93%E5%86%B2%E6%B5%81.html"},{path:"/zs-se/io/5、缓冲流.html",redirect:"/zs-se/io/5%E3%80%81%E7%BC%93%E5%86%B2%E6%B5%81.html"},{name:"v-3ec14aeb",path:"/zs-se/io/8%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3ec14aeb").then(t)}},{path:"/zs-se/io/8、打印流.html",redirect:"/zs-se/io/8%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81.html"},{path:"/zs-se/io/8、打印流.html",redirect:"/zs-se/io/8%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81.html"},{name:"v-5dc07559",path:"/zs-se/io/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-5dc07559").then(t)}},{path:"/zs-se/io/index.html",redirect:"/zs-se/io/"},{name:"v-2dc2bd7c",path:"/zs-se/io/9%E3%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2dc2bd7c").then(t)}},{path:"/zs-se/io/9、压缩和解压缩流.html",redirect:"/zs-se/io/9%E3%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81.html"},{path:"/zs-se/io/9、压缩和解压缩流.html",redirect:"/zs-se/io/9%E3%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81.html"},{name:"v-17a63e16",path:"/web/js/JSON-stringify%E5%87%BD%E6%95%B0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-17a63e16").then(t)}},{path:"/web/js/JSON-stringify函数.html",redirect:"/web/js/JSON-stringify%E5%87%BD%E6%95%B0.html"},{path:"/web/js/JSON-stringify函数.html",redirect:"/web/js/JSON-stringify%E5%87%BD%E6%95%B0.html"},{name:"v-f216b9a4",path:"/web/iframe/iframe-%E9%80%9A%E4%BF%A1.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-f216b9a4").then(t)}},{path:"/web/iframe/iframe-通信.html",redirect:"/web/iframe/iframe-%E9%80%9A%E4%BF%A1.html"},{path:"/web/iframe/iframe-通信.html",redirect:"/web/iframe/iframe-%E9%80%9A%E4%BF%A1.html"},{name:"v-37885679",path:"/web/iframe/iframe-%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-37885679").then(t)}},{path:"/web/iframe/iframe-标签属性.html",redirect:"/web/iframe/iframe-%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7.html"},{path:"/web/iframe/iframe-标签属性.html",redirect:"/web/iframe/iframe-%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7.html"},{name:"v-3151af92",path:"/web/iframe/iframe-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3151af92").then(t)}},{path:"/web/iframe/iframe-简单使用.html",redirect:"/web/iframe/iframe-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html"},{path:"/web/iframe/iframe-简单使用.html",redirect:"/web/iframe/iframe-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html"},{name:"v-0a604b4e",path:"/zs-se/io/7%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0a604b4e").then(t)}},{path:"/zs-se/io/7、序列化流.html",redirect:"/zs-se/io/7%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81.html"},{path:"/zs-se/io/7、序列化流.html",redirect:"/zs-se/io/7%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81.html"},{name:"v-49aea67d",path:"/zs-se/io/%E5%B7%A5%E5%85%B7%E5%8C%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-49aea67d").then(t)}},{path:"/zs-se/io/工具包.html",redirect:"/zs-se/io/%E5%B7%A5%E5%85%B7%E5%8C%85.html"},{path:"/zs-se/io/工具包.html",redirect:"/zs-se/io/%E5%B7%A5%E5%85%B7%E5%8C%85.html"},{name:"v-40755a2d",path:"/zs-se/io/commons-io%E6%95%B4%E7%90%86%E7%9A%84%E6%96%87%E6%A1%A3.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-40755a2d").then(t)}},{path:"/zs-se/io/commons-io整理的文档.html",redirect:"/zs-se/io/commons-io%E6%95%B4%E7%90%86%E7%9A%84%E6%96%87%E6%A1%A3.html"},{path:"/zs-se/io/commons-io整理的文档.html",redirect:"/zs-se/io/commons-io%E6%95%B4%E7%90%86%E7%9A%84%E6%96%87%E6%A1%A3.html"},{name:"v-edd31fdc",path:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-01.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-edd31fdc").then(t)}},{path:"/zs-se/基础/JUC--CompletableFuture-01.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-01.html"},{path:"/zs-se/基础/JUC--CompletableFuture-01.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-01.html"},{name:"v-1af0953b",path:"/zs-se/io/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1af0953b").then(t)}},{path:"/zs-se/io/综合练习.html",redirect:"/zs-se/io/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html"},{path:"/zs-se/io/综合练习.html",redirect:"/zs-se/io/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html"},{name:"v-1f309dc7",path:"/zs-se/%E5%9F%BA%E7%A1%80/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1f309dc7").then(t)}},{path:"/zs-se/基础/",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/"},{path:"/zs-se/%E5%9F%BA%E7%A1%80/index.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/"},{path:"/zs-se/基础/",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/"},{name:"v-de61d7e0",path:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-02.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-de61d7e0").then(t)}},{path:"/zs-se/基础/JUC--CompletableFuture-02.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-02.html"},{path:"/zs-se/基础/JUC--CompletableFuture-02.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-02.html"},{name:"v-df26d82c",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-df26d82c").then(t)}},{path:"/zs-se/设计模式/",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{path:"/zs-se/设计模式/",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{name:"v-db569cb2",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--2.Class%E4%BF%A1%E6%81%AF.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-db569cb2").then(t)}},{path:"/zs-se/基础/se基础--反射机制--2.Class信息.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--2.Class%E4%BF%A1%E6%81%AF.html"},{path:"/zs-se/基础/se基础--反射机制--2.Class信息.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--2.Class%E4%BF%A1%E6%81%AF.html"},{name:"v-4989ceee",path:"/zs-se/io/hutool%E6%95%B4%E7%90%86%E6%96%87%E6%A1%A3.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-4989ceee").then(t)}},{path:"/zs-se/io/hutool整理文档.html",redirect:"/zs-se/io/hutool%E6%95%B4%E7%90%86%E6%96%87%E6%A1%A3.html"},{path:"/zs-se/io/hutool整理文档.html",redirect:"/zs-se/io/hutool%E6%95%B4%E7%90%86%E6%96%87%E6%A1%A3.html"},{name:"v-127c4432",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--3.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-127c4432").then(t)}},{path:"/zs-se/基础/se基础--反射机制--3.动态代理.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--3.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"},{path:"/zs-se/基础/se基础--反射机制--3.动态代理.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--3.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"},{name:"v-1f85e204",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98--5.%E5%86%85%E9%83%A8%E7%B1%BB.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1f85e204").then(t)}},{path:"/zs-se/基础/se基础--类的成员--5.内部类.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98--5.%E5%86%85%E9%83%A8%E7%B1%BB.html"},{path:"/zs-se/基础/se基础--类的成员--5.内部类.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98--5.%E5%86%85%E9%83%A8%E7%B1%BB.html"},{name:"v-6ac8ccd2",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.2.7.%E7%BB%93%E6%9E%84%E5%9E%8B--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6ac8ccd2").then(t)}},{path:"/zs-se/设计模式/设计模式--3.2.7.结构型--代理模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.2.7.%E7%BB%93%E6%9E%84%E5%9E%8B--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{path:"/zs-se/设计模式/设计模式--3.2.7.结构型--代理模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.2.7.%E7%BB%93%E6%9E%84%E5%9E%8B--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{name:"v-379be5aa",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--2.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-379be5aa").then(t)}},{path:"/zs-se/设计模式/设计模式--2.设计模式概述.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--2.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0.html"},{path:"/zs-se/设计模式/设计模式--2.设计模式概述.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--2.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0.html"},{name:"v-83ed7e72",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--0.Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-83ed7e72").then(t)}},{path:"/zs-se/设计模式/设计模式--0.Java 设计模式内容介绍.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--0.Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D.html"},{path:"/zs-se/设计模式/设计模式--0.Java 设计模式内容介绍.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--0.Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D.html"},{name:"v-1944b1b2",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--1.UML%E7%B1%BB%E5%9B%BE.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1944b1b2").then(t)}},{path:"/zs-se/设计模式/设计模式--1.UML类图.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--1.UML%E7%B1%BB%E5%9B%BE.html"},{path:"/zs-se/设计模式/设计模式--1.UML类图.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--1.UML%E7%B1%BB%E5%9B%BE.html"},{name:"v-085160c4",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--1.%E5%8F%8D%E5%B0%84.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-085160c4").then(t)}},{path:"/zs-se/基础/se基础--反射机制--1.反射.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--1.%E5%8F%8D%E5%B0%84.html"},{path:"/zs-se/基础/se基础--反射机制--1.反射.html",redirect:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--1.%E5%8F%8D%E5%B0%84.html"},{name:"v-ad53b70e",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.3.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ad53b70e").then(t)}},{path:"/zs-se/设计模式/设计模式--3.3.3.行为型--访问者模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.3.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{path:"/zs-se/设计模式/设计模式--3.3.3.行为型--访问者模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.3.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{name:"v-7925df42",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.1.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7925df42").then(t)}},{path:"/zs-se/设计模式/设计模式--3.3.1.行为型--模板方法.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.1.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.html"},{path:"/zs-se/设计模式/设计模式--3.3.1.行为型--模板方法.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.1.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.html"},{name:"v-8a58cf10",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.2.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8a58cf10").then(t)}},{path:"/zs-se/设计模式/设计模式--3.3.2.行为型--命令模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.2.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{path:"/zs-se/设计模式/设计模式--3.3.2.行为型--命令模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.2.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{name:"v-790a347f",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/2%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-790a347f").then(t)}},{path:"/zs-tool-小结/文件/2、普通文件上传.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/2%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"},{path:"/zs-tool-小结/文件/2、普通文件上传.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/2%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"},{name:"v-29c3dad9",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.9.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-29c3dad9").then(t)}},{path:"/zs-se/设计模式/设计模式--3.3.9.行为型--状态模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.9.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{path:"/zs-se/设计模式/设计模式--3.3.9.行为型--状态模式.html",redirect:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.9.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{name:"v-32128328",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-32128328").then(t)}},{path:"/zs-tool-小结/文件/",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/"},{path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/index.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/"},{path:"/zs-tool-小结/文件/",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/"},{name:"v-0d238d66",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E5%B8%B8%E8%A7%81%E7%9A%84response%E5%8F%82%E6%95%B0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0d238d66").then(t)}},{path:"/zs-tool-小结/文件/常见的response参数.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E5%B8%B8%E8%A7%81%E7%9A%84response%E5%8F%82%E6%95%B0.html"},{path:"/zs-tool-小结/文件/常见的response参数.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E5%B8%B8%E8%A7%81%E7%9A%84response%E5%8F%82%E6%95%B0.html"},{name:"v-d5dff92c",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/multipartFile%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-d5dff92c").then(t)}},{path:"/zs-tool-小结/文件/multipartFile相关方法.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/multipartFile%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html"},{path:"/zs-tool-小结/文件/multipartFile相关方法.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/multipartFile%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html"},{name:"v-222c4871",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-222c4871").then(t)}},{path:"/zs-tool-小结/网址收藏/优秀开源.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90.html"},{path:"/zs-tool-小结/网址收藏/优秀开源.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90.html"},{name:"v-05c21aa2",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6ContentType.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-05c21aa2").then(t)}},{path:"/zs-tool-小结/文件/获取文件ContentType.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6ContentType.html"},{path:"/zs-tool-小结/文件/获取文件ContentType.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6ContentType.html"},{name:"v-ad01f9a8",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/1%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ad01f9a8").then(t)}},{path:"/zs-tool-小结/文件/1、普通文件下载.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/1%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html"},{path:"/zs-tool-小结/文件/1、普通文件下载.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/1%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html"},{name:"v-17b8acf5",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%94%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-17b8acf5").then(t)}},{path:"/zs-tool-小结/网址收藏/前端实用.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%94%A8.html"},{path:"/zs-tool-小结/网址收藏/前端实用.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%94%A8.html"},{name:"v-1e0b223e",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1e0b223e").then(t)}},{path:"/zs-tool-小结/网址收藏/实用网站.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99.html"},{path:"/zs-tool-小结/网址收藏/实用网站.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99.html"},{name:"v-3374ee87",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%89%87-0.%E6%96%87%E7%AB%A0%E8%AF%B4%E6%98%8E.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3374ee87").then(t)}},{path:"/zs-tool-框架/java报表/POI--导出图片-0.文章说明.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%89%87-0.%E6%96%87%E7%AB%A0%E8%AF%B4%E6%98%8E.html"},{path:"/zs-tool-框架/java报表/POI--导出图片-0.文章说明.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%89%87-0.%E6%96%87%E7%AB%A0%E8%AF%B4%E6%98%8E.html"},{name:"v-9b9ae1c6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/JXL--0.%E4%BA%86%E8%A7%A3.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-9b9ae1c6").then(t)}},{path:"/zs-tool-框架/java报表/JXL--0.了解.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/JXL--0.%E4%BA%86%E8%A7%A3.html"},{path:"/zs-tool-框架/java报表/JXL--0.了解.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/JXL--0.%E4%BA%86%E8%A7%A3.html"},{name:"v-6b64c32f",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--1.%E5%9F%BA%E7%A1%80api.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6b64c32f").then(t)}},{path:"/zs-tool-框架/java报表/POI--1.基础api.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--1.%E5%9F%BA%E7%A1%80api.html"},{path:"/zs-tool-框架/java报表/POI--1.基础api.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--1.%E5%9F%BA%E7%A1%80api.html"},{name:"v-5a84ce64",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-5a84ce64").then(t)}},{path:"/zs-tool-框架/java报表/POI--读取图片.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87.html"},{path:"/zs-tool-框架/java报表/POI--读取图片.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87.html"},{name:"v-8d39bce0",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8d39bce0").then(t)}},{path:"/zs-tool-框架/java报表/",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/"},{path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/index.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/"},{path:"/zs-tool-框架/java报表/",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/"},{name:"v-560efacf",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/11%E3%80%81back-to-top.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-560efacf").then(t)}},{path:"/zs-tool-框架/vuepress/11、back-to-top.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/11%E3%80%81back-to-top.html"},{path:"/zs-tool-框架/vuepress/11、back-to-top.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/11%E3%80%81back-to-top.html"},{name:"v-3a157f1b",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/12%E3%80%81%E8%B0%B7%E6%AD%8C%E5%88%86%E6%9E%90.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3a157f1b").then(t)}},{path:"/zs-tool-框架/vuepress/12、谷歌分析.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/12%E3%80%81%E8%B0%B7%E6%AD%8C%E5%88%86%E6%9E%90.html"},{path:"/zs-tool-框架/vuepress/12、谷歌分析.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/12%E3%80%81%E8%B0%B7%E6%AD%8C%E5%88%86%E6%9E%90.html"},{name:"v-2c32d910",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/%E6%8A%A5%E8%A1%A8--0.%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E-Excel%E8%AF%B4%E6%98%8E.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2c32d910").then(t)}},{path:"/zs-tool-框架/java报表/报表--0.环境说明-Excel说明.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/%E6%8A%A5%E8%A1%A8--0.%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E-Excel%E8%AF%B4%E6%98%8E.html"},{path:"/zs-tool-框架/java报表/报表--0.环境说明-Excel说明.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/%E6%8A%A5%E8%A1%A8--0.%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E-Excel%E8%AF%B4%E6%98%8E.html"},{name:"v-62a025b6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/14%E3%80%81%E4%BF%9D%E6%8A%A4%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-62a025b6").then(t)}},{path:"/zs-tool-框架/vuepress/14、保护隐私信息.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/14%E3%80%81%E4%BF%9D%E6%8A%A4%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF.html"},{path:"/zs-tool-框架/vuepress/14、保护隐私信息.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/14%E3%80%81%E4%BF%9D%E6%8A%A4%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF.html"},{name:"v-7680e5a4",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/13%E3%80%81%E5%88%86%E5%89%B2config.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7680e5a4").then(t)}},{path:"/zs-tool-框架/vuepress/13、分割config.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/13%E3%80%81%E5%88%86%E5%89%B2config.html"},{path:"/zs-tool-框架/vuepress/13、分割config.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/13%E3%80%81%E5%88%86%E5%89%B2config.html"},{name:"v-480a0c5d",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/10%E3%80%81vssue%E8%AF%84%E8%AE%BA.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-480a0c5d").then(t)}},{path:"/zs-tool-框架/vuepress/10、vssue评论.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/10%E3%80%81vssue%E8%AF%84%E8%AE%BA.html"},{path:"/zs-tool-框架/vuepress/10、vssue评论.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/10%E3%80%81vssue%E8%AF%84%E8%AE%BA.html"},{name:"v-23e5c39c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/15%E3%80%81md%E7%94%A8%E6%B3%95%E8%BF%9B%E9%98%B6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-23e5c39c").then(t)}},{path:"/zs-tool-框架/vuepress/15、md用法进阶.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/15%E3%80%81md%E7%94%A8%E6%B3%95%E8%BF%9B%E9%98%B6.html"},{path:"/zs-tool-框架/vuepress/15、md用法进阶.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/15%E3%80%81md%E7%94%A8%E6%B3%95%E8%BF%9B%E9%98%B6.html"},{name:"v-51c2e62a",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%853-17%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-51c2e62a").then(t)}},{path:"/zs-tool-框架/java报表/POI--工具类封装3-17使用文档.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%853-17%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.html"},{path:"/zs-tool-框架/java报表/POI--工具类封装3-17使用文档.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%853-17%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.html"},{name:"v-7f68a142",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/16%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20Travis-CI.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7f68a142").then(t)}},{path:"/zs-tool-框架/vuepress/16、自动化部署 Travis-CI.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/16%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20Travis-CI.html"},{path:"/zs-tool-框架/vuepress/16、自动化部署 Travis-CI.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/16%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20Travis-CI.html"},{name:"v-30ed5bb5",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/17%E3%80%81%E9%80%BC%E6%A0%BC%E5%BE%BD%E7%AB%A0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-30ed5bb5").then(t)}},{path:"/zs-tool-框架/vuepress/17、逼格徽章.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/17%E3%80%81%E9%80%BC%E6%A0%BC%E5%BE%BD%E7%AB%A0.html"},{path:"/zs-tool-框架/vuepress/17、逼格徽章.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/17%E3%80%81%E9%80%BC%E6%A0%BC%E5%BE%BD%E7%AB%A0.html"},{name:"v-069b1591",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/18%E3%80%81%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-069b1591").then(t)}},{path:"/zs-tool-框架/vuepress/18、图片缩放.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/18%E3%80%81%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE.html"},{path:"/zs-tool-框架/vuepress/18、图片缩放.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/18%E3%80%81%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE.html"},{name:"v-457e115b",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.1%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-457e115b").then(t)}},{path:"/zs-tool-框架/vuepress/19.1、自动生成侧边栏.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.1%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F.html"},{path:"/zs-tool-框架/vuepress/19.1、自动生成侧边栏.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.1%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F.html"},{name:"v-218406de",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.2%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F--%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-218406de").then(t)}},{path:"/zs-tool-框架/vuepress/19.2、自动生成侧边栏--自定义排序规则.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.2%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F--%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99.html"},{path:"/zs-tool-框架/vuepress/19.2、自动生成侧边栏--自定义排序规则.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.2%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F--%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99.html"},{name:"v-113afd78",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/20%E3%80%81%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-113afd78").then(t)}},{path:"/zs-tool-框架/vuepress/20、全文搜索.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/20%E3%80%81%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2.html"},{path:"/zs-tool-框架/vuepress/20、全文搜索.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/20%E3%80%81%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2.html"},{name:"v-57f0ce7c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/21%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-57f0ce7c").then(t)}},{path:"/zs-tool-框架/vuepress/21、代码块拷贝插件.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/21%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6.html"},{path:"/zs-tool-框架/vuepress/21、代码块拷贝插件.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/21%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6.html"},{name:"v-4bb9b0a1",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/1%E3%80%81%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-4bb9b0a1").then(t)}},{path:"/zs-tool-框架/vuepress/1、快速开始.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/1%E3%80%81%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html"},{path:"/zs-tool-框架/vuepress/1、快速开始.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/1%E3%80%81%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html"},{name:"v-0df701a2",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/22%E3%80%81%E5%85%B6%E4%BB%96%E8%AF%84%E8%AE%BA%E6%96%B9%E6%A1%88.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0df701a2").then(t)}},{path:"/zs-tool-框架/vuepress/22、其他评论方案.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/22%E3%80%81%E5%85%B6%E4%BB%96%E8%AF%84%E8%AE%BA%E6%96%B9%E6%A1%88.html"},{path:"/zs-tool-框架/vuepress/22、其他评论方案.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/22%E3%80%81%E5%85%B6%E4%BB%96%E8%AF%84%E8%AE%BA%E6%96%B9%E6%A1%88.html"},{name:"v-157ffd50",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/25%E3%80%81%E5%8F%B3%E4%BE%A7%E7%9B%AE%E5%BD%95.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-157ffd50").then(t)}},{path:"/zs-tool-框架/vuepress/25、右侧目录.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/25%E3%80%81%E5%8F%B3%E4%BE%A7%E7%9B%AE%E5%BD%95.html"},{path:"/zs-tool-框架/vuepress/25、右侧目录.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/25%E3%80%81%E5%8F%B3%E4%BE%A7%E7%9B%AE%E5%BD%95.html"},{name:"v-ea0fa4a6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/2%E3%80%81%E5%88%9D%E4%BD%93%E9%AA%8C.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ea0fa4a6").then(t)}},{path:"/zs-tool-框架/vuepress/2、初体验.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/2%E3%80%81%E5%88%9D%E4%BD%93%E9%AA%8C.html"},{path:"/zs-tool-框架/vuepress/2、初体验.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/2%E3%80%81%E5%88%9D%E4%BD%93%E9%AA%8C.html"},{name:"v-3cde78c8",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/23%E3%80%81%E7%99%BE%E5%BA%A6%E5%88%86%E6%9E%90.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3cde78c8").then(t)}},{path:"/zs-tool-框架/vuepress/23、百度分析.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/23%E3%80%81%E7%99%BE%E5%BA%A6%E5%88%86%E6%9E%90.html"},{path:"/zs-tool-框架/vuepress/23、百度分析.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/23%E3%80%81%E7%99%BE%E5%BA%A6%E5%88%86%E6%9E%90.html"},{name:"v-2bdc633a",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/26%E3%80%81%E6%B8%B2%E6%9F%93%20Mermaid%20%E7%BB%98%E5%9B%BE.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2bdc633a").then(t)}},{path:"/zs-tool-框架/vuepress/26、渲染 Mermaid 绘图.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/26%E3%80%81%E6%B8%B2%E6%9F%93%20Mermaid%20%E7%BB%98%E5%9B%BE.html"},{path:"/zs-tool-框架/vuepress/26、渲染 Mermaid 绘图.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/26%E3%80%81%E6%B8%B2%E6%9F%93%20Mermaid%20%E7%BB%98%E5%9B%BE.html"},{name:"v-22537c84",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/24%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B9%BF%E5%91%8A%E4%BD%8D.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-22537c84").then(t)}},{path:"/zs-tool-框架/vuepress/24、侧边栏广告位.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/24%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B9%BF%E5%91%8A%E4%BD%8D.html"},{path:"/zs-tool-框架/vuepress/24、侧边栏广告位.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/24%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B9%BF%E5%91%8A%E4%BD%8D.html"},{name:"v-2a02e242",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/3%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2a02e242").then(t)}},{path:"/zs-tool-框架/vuepress/3、导航栏.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/3%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F.html"},{path:"/zs-tool-框架/vuepress/3、导航栏.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/3%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F.html"},{name:"v-7c7f3f8f",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/5%E3%80%81SEO.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7c7f3f8f").then(t)}},{path:"/zs-tool-框架/vuepress/5、SEO.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/5%E3%80%81SEO.html"},{path:"/zs-tool-框架/vuepress/5、SEO.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/5%E3%80%81SEO.html"},{name:"v-22146f5c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/4%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-22146f5c").then(t)}},{path:"/zs-tool-框架/vuepress/4、侧边栏.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/4%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F.html"},{path:"/zs-tool-框架/vuepress/4、侧边栏.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/4%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F.html"},{name:"v-1b96b5c0",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/6%E3%80%81%E6%97%B6%E9%97%B4%E6%9B%B4%E6%96%B0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1b96b5c0").then(t)}},{path:"/zs-tool-框架/vuepress/6、时间更新.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/6%E3%80%81%E6%97%B6%E9%97%B4%E6%9B%B4%E6%96%B0.html"},{path:"/zs-tool-框架/vuepress/6、时间更新.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/6%E3%80%81%E6%97%B6%E9%97%B4%E6%9B%B4%E6%96%B0.html"},{name:"v-8e58323a",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/8%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8e58323a").then(t)}},{path:"/zs-tool-框架/vuepress/8、自定义域名.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/8%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html"},{path:"/zs-tool-框架/vuepress/8、自定义域名.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/8%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html"},{name:"v-189fdcef",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/9%E3%80%81PWA.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-189fdcef").then(t)}},{path:"/zs-tool-框架/vuepress/9、PWA.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/9%E3%80%81PWA.html"},{path:"/zs-tool-框架/vuepress/9、PWA.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/9%E3%80%81PWA.html"},{name:"v-5d5f3c5b",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-5d5f3c5b").then(t)}},{path:"/zs-tool-框架/vuepress/",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/"},{path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/index.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/"},{path:"/zs-tool-框架/vuepress/",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/"},{name:"v-69a18e3e",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/7%E3%80%81%E5%8F%91%E5%B8%83%E5%9C%A8GitHub.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-69a18e3e").then(t)}},{path:"/zs-tool-框架/vuepress/7、发布在GitHub.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/7%E3%80%81%E5%8F%91%E5%B8%83%E5%9C%A8GitHub.html"},{path:"/zs-tool-框架/vuepress/7、发布在GitHub.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/7%E3%80%81%E5%8F%91%E5%B8%83%E5%9C%A8GitHub.html"},{name:"v-67381111",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%951%E3%80%81vuepress%EF%BC%8CMarkdown%E8%AF%AD%E6%B3%95.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-67381111").then(t)}},{path:"/zs-tool-框架/vuepress/附录1、vuepress，Markdown语法.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%951%E3%80%81vuepress%EF%BC%8CMarkdown%E8%AF%AD%E6%B3%95.html"},{path:"/zs-tool-框架/vuepress/附录1、vuepress，Markdown语法.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%951%E3%80%81vuepress%EF%BC%8CMarkdown%E8%AF%AD%E6%B3%95.html"},{name:"v-47af8ca6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/fetch--0.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-47af8ca6").then(t)}},{path:"/zs-tool-框架/消息推送/fetch--0.1.入门案例01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/fetch--0.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html"},{path:"/zs-tool-框架/消息推送/fetch--0.1.入门案例01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/fetch--0.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html"},{name:"v-17345a4c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%952%E3%80%81vuepress%E8%87%AA%E5%AE%9A%E4%B9%89home%E9%A1%B5.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-17345a4c").then(t)}},{path:"/zs-tool-框架/vuepress/附录2、vuepress自定义home页.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%952%E3%80%81vuepress%E8%87%AA%E5%AE%9A%E4%B9%89home%E9%A1%B5.html"},{path:"/zs-tool-框架/vuepress/附录2、vuepress自定义home页.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%952%E3%80%81vuepress%E8%87%AA%E5%AE%9A%E4%B9%89home%E9%A1%B5.html"},{name:"v-c92ce314",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.0.%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-c92ce314").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.0.技术选型.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.0.%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html"},{path:"/zs-tool-框架/消息推送/websocket--3.0.技术选型.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.0.%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html"},{name:"v-29c24882",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.1.%E4%BB%8B%E7%BB%8D.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-29c24882").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.1.介绍.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.1.%E4%BB%8B%E7%BB%8D.html"},{path:"/zs-tool-框架/消息推送/websocket--3.1.介绍.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.1.%E4%BB%8B%E7%BB%8D.html"},{name:"v-64bc62a6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/SSE--1.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-64bc62a6").then(t)}},{path:"/zs-tool-框架/消息推送/SSE--1.1.入门案例01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/SSE--1.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html"},{path:"/zs-tool-框架/消息推送/SSE--1.1.入门案例01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/SSE--1.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html"},{name:"v-2f7dcd14",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2f7dcd14").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.2.springboot集成--注解方式.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F.html"},{path:"/zs-tool-框架/消息推送/websocket--3.2.springboot集成--注解方式.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F.html"},{name:"v-20897ae6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.3.stomp%E6%96%B9%E5%BC%8F01-spring%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-20897ae6").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.3.stomp方式01-spring官方案例.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.3.stomp%E6%96%B9%E5%BC%8F01-spring%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B.html"},{path:"/zs-tool-框架/消息推送/websocket--3.3.stomp方式01-spring官方案例.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.3.stomp%E6%96%B9%E5%BC%8F01-spring%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B.html"},{name:"v-0486f016",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.4.stomp%E6%96%B9%E5%BC%8F02.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0486f016").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.4.stomp方式02.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.4.stomp%E6%96%B9%E5%BC%8F02.html"},{path:"/zs-tool-框架/消息推送/websocket--3.4.stomp方式02.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.4.stomp%E6%96%B9%E5%BC%8F02.html"},{name:"v-7d251b33",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7d251b33").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.2.springboot集成--接口方式.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F.html"},{path:"/zs-tool-框架/消息推送/websocket--3.2.springboot集成--接口方式.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F.html"},{name:"v-e5568d98",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F01.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-e5568d98").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.5.netty方式01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F01.html"},{path:"/zs-tool-框架/消息推送/websocket--3.5.netty方式01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F01.html"},{name:"v-4ab2bff2",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F02.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-4ab2bff2").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.5.netty方式02.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F02.html"},{path:"/zs-tool-框架/消息推送/websocket--3.5.netty方式02.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F02.html"},{name:"v-76707720",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.xx%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-76707720").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.xx集群方案.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.xx%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html"},{path:"/zs-tool-框架/消息推送/websocket--3.xx集群方案.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.xx%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html"},{name:"v-00ab95a5",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.6.redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%B9%BF%E6%92%AD%E9%9B%86%E7%BE%A4.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-00ab95a5").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.6.redis发布订阅广播集群.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.6.redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%B9%BF%E6%92%AD%E9%9B%86%E7%BE%A4.html"},{path:"/zs-tool-框架/消息推送/websocket--3.6.redis发布订阅广播集群.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.6.redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%B9%BF%E6%92%AD%E9%9B%86%E7%BE%A4.html"},{name:"v-6d876532",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6d876532").then(t)}},{path:"/zs-tool-框架/消息推送/消息推送技术方案.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.html"},{path:"/zs-tool-框架/消息推送/消息推送技术方案.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.html"},{name:"v-0810c6b0",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F03.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0810c6b0").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.5.netty方式03.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F03.html"},{path:"/zs-tool-框架/消息推送/websocket--3.5.netty方式03.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F03.html"},{name:"v-58912756",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.7.java%E5%AE%A2%E6%88%B7%E7%AB%AF.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-58912756").then(t)}},{path:"/zs-tool-框架/消息推送/websocket--3.7.java客户端.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.7.java%E5%AE%A2%E6%88%B7%E7%AB%AF.html"},{path:"/zs-tool-框架/消息推送/websocket--3.7.java客户端.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.7.java%E5%AE%A2%E6%88%B7%E7%AB%AF.html"},{name:"v-14fdb756",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E9%95%BF%E8%BD%AE%E8%AF%A2--2.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-14fdb756").then(t)}},{path:"/zs-tool-框架/消息推送/长轮询--2.1.入门案例01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E9%95%BF%E8%BD%AE%E8%AF%A2--2.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html"},{path:"/zs-tool-框架/消息推送/长轮询--2.1.入门案例01.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E9%95%BF%E8%BD%AE%E8%AF%A2--2.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html"},{name:"v-cb48c812",path:"/zs-use/env/Linux--python3%E5%AE%89%E8%A3%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-cb48c812").then(t)}},{path:"/zs-use/env/Linux--python3安装.html",redirect:"/zs-use/env/Linux--python3%E5%AE%89%E8%A3%85.html"},{path:"/zs-use/env/Linux--python3安装.html",redirect:"/zs-use/env/Linux--python3%E5%AE%89%E8%A3%85.html"},{name:"v-1237f2f8",path:"/zs-use/env/Linux--postgresql.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1237f2f8").then(t)}},{name:"v-41f90cdf",path:"/zs-use/env/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-41f90cdf").then(t)}},{path:"/zs-use/env/index.html",redirect:"/zs-use/env/"},{name:"v-6c210082",path:"/zs-use/git/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6c210082").then(t)}},{path:"/zs-use/git/index.html",redirect:"/zs-use/git/"},{name:"v-f50e4944",path:"/zs-use/git/FAQ.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-f50e4944").then(t)}},{name:"v-39c71530",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C/%E9%9D%A2%E8%AF%95--0.%E5%BC%80%E7%AF%87.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-39c71530").then(t)}},{path:"/zs-tool-小结/面经手册/面试--0.开篇.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C/%E9%9D%A2%E8%AF%95--0.%E5%BC%80%E7%AF%87.html"},{path:"/zs-tool-小结/面经手册/面试--0.开篇.html",redirect:"/zs-tool-%E5%B0%8F%E7%BB%93/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C/%E9%9D%A2%E8%AF%95--0.%E5%BC%80%E7%AF%87.html"},{name:"v-7bc421bc",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E7%9F%AD%E8%BD%AE%E8%AF%A2--%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7bc421bc").then(t)}},{path:"/zs-tool-框架/消息推送/短轮询--不推荐使用.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E7%9F%AD%E8%BD%AE%E8%AF%A2--%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8.html"},{path:"/zs-tool-框架/消息推送/短轮询--不推荐使用.html",redirect:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E7%9F%AD%E8%BD%AE%E8%AF%A2--%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8.html"},{name:"v-619c4001",path:"/zs-use/idea/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-619c4001").then(t)}},{path:"/zs-use/idea/index.html",redirect:"/zs-use/idea/"},{name:"v-5424c0a9",path:"/zs-use/idea/%E6%8F%92%E4%BB%B6/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-5424c0a9").then(t)}},{path:"/zs-use/idea/插件/",redirect:"/zs-use/idea/%E6%8F%92%E4%BB%B6/"},{path:"/zs-use/idea/%E6%8F%92%E4%BB%B6/index.html",redirect:"/zs-use/idea/%E6%8F%92%E4%BB%B6/"},{path:"/zs-use/idea/插件/",redirect:"/zs-use/idea/%E6%8F%92%E4%BB%B6/"},{name:"v-0315a902",path:"/zs-use/linux/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0315a902").then(t)}},{path:"/zs-use/linux/index.html",redirect:"/zs-use/linux/"},{name:"v-8bf509d6",path:"/zs-use/env/mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8bf509d6").then(t)}},{path:"/zs-use/env/mac软件安装.html",redirect:"/zs-use/env/mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html"},{path:"/zs-use/env/mac软件安装.html",redirect:"/zs-use/env/mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html"},{name:"v-014769c7",path:"/zs-use/idea/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%BF%AB%E6%8D%B7%E9%94%AE.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-014769c7").then(t)}},{path:"/zs-use/idea/源码阅读快捷键.html",redirect:"/zs-use/idea/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%BF%AB%E6%8D%B7%E9%94%AE.html"},{path:"/zs-use/idea/源码阅读快捷键.html",redirect:"/zs-use/idea/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%BF%AB%E6%8D%B7%E9%94%AE.html"},{name:"v-8d9b27fe",path:"/zs-use/git/%E9%99%84%E5%BD%951%E3%80%81Git%E6%9B%BF%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8d9b27fe").then(t)}},{path:"/zs-use/git/附录1、Git替换远程仓库地址.html",redirect:"/zs-use/git/%E9%99%84%E5%BD%951%E3%80%81Git%E6%9B%BF%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.html"},{path:"/zs-use/git/附录1、Git替换远程仓库地址.html",redirect:"/zs-use/git/%E9%99%84%E5%BD%951%E3%80%81Git%E6%9B%BF%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.html"},{name:"v-15d56ef3",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/1%E3%80%81hello%20world.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-15d56ef3").then(t)}},{path:"/zs-use/linux/shell编程/1、hello world.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/1%E3%80%81hello%20world.html"},{path:"/zs-use/linux/shell编程/1、hello world.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/1%E3%80%81hello%20world.html"},{name:"v-0c4470f3",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/3%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0c4470f3").then(t)}},{path:"/zs-use/linux/shell编程/3、变量和运算符.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/3%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6.html"},{path:"/zs-use/linux/shell编程/3、变量和运算符.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/3%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6.html"},{name:"v-45319ca0",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-45319ca0").then(t)}},{path:"/zs-use/linux/shell编程/",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/"},{path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/index.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/"},{path:"/zs-use/linux/shell编程/",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/"},{name:"v-52c6f5e5",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/4%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-52c6f5e5").then(t)}},{path:"/zs-use/linux/shell编程/4、条件判断.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/4%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.html"},{path:"/zs-use/linux/shell编程/4、条件判断.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/4%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.html"},{name:"v-c18b606e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/5%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-c18b606e").then(t)}},{path:"/zs-use/linux/shell编程/5、流程控制.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/5%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"},{path:"/zs-use/linux/shell编程/5、流程控制.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/5%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"},{name:"v-0a482f9e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/6%E3%80%81%E6%95%B0%E7%BB%84.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0a482f9e").then(t)}},{path:"/zs-use/linux/shell编程/6、数组.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/6%E3%80%81%E6%95%B0%E7%BB%84.html"},{path:"/zs-use/linux/shell编程/6、数组.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/6%E3%80%81%E6%95%B0%E7%BB%84.html"},{name:"v-10a3b384",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B01.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-10a3b384").then(t)}},{path:"/zs-use/linux/shell编程/实战脚本示例01.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B01.html"},{path:"/zs-use/linux/shell编程/实战脚本示例01.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B01.html"},{name:"v-3cc96e1e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B02.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3cc96e1e").then(t)}},{path:"/zs-use/linux/shell编程/实战脚本示例02.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B02.html"},{path:"/zs-use/linux/shell编程/实战脚本示例02.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B02.html"},{name:"v-fc369404",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B03.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-fc369404").then(t)}},{path:"/zs-use/linux/shell编程/实战脚本示例03.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B03.html"},{path:"/zs-use/linux/shell编程/实战脚本示例03.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B03.html"},{name:"v-0c1b45be",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B05.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0c1b45be").then(t)}},{path:"/zs-use/linux/shell编程/实战脚本示例05.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B05.html"},{path:"/zs-use/linux/shell编程/实战脚本示例05.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B05.html"},{name:"v-72000444",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B04.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-72000444").then(t)}},{path:"/zs-use/linux/shell编程/实战脚本示例04.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B04.html"},{path:"/zs-use/linux/shell编程/实战脚本示例04.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B04.html"},{name:"v-51368d9e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B06.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-51368d9e").then(t)}},{path:"/zs-use/linux/shell编程/实战脚本示例06.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B06.html"},{path:"/zs-use/linux/shell编程/实战脚本示例06.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B06.html"},{name:"v-f561d168",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7--cut.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-f561d168").then(t)}},{path:"/zs-use/linux/shell编程/工具--cut.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7--cut.html"},{path:"/zs-use/linux/shell编程/工具--cut.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7--cut.html"},{name:"v-8dc82c38",path:"/zs-use/idea/%E6%8F%92%E4%BB%B6/plantUML--%E9%97%AE%E9%A2%98.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8dc82c38").then(t)}},{path:"/zs-use/idea/插件/plantUML--问题.html",redirect:"/zs-use/idea/%E6%8F%92%E4%BB%B6/plantUML--%E9%97%AE%E9%A2%98.html"},{path:"/zs-use/idea/插件/plantUML--问题.html",redirect:"/zs-use/idea/%E6%8F%92%E4%BB%B6/plantUML--%E9%97%AE%E9%A2%98.html"},{name:"v-b1fee73a",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--1.%E5%88%9D%E8%AF%86Linux.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-b1fee73a").then(t)}},{path:"/zs-use/linux/基本使用/Linux概述--1.初识Linux.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--1.%E5%88%9D%E8%AF%86Linux.html"},{path:"/zs-use/linux/基本使用/Linux概述--1.初识Linux.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--1.%E5%88%9D%E8%AF%86Linux.html"},{name:"v-07c14a84",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%AE%80%E8%BF%B001.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-07c14a84").then(t)}},{path:"/zs-use/linux/shell编程/实战脚本简述01.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%AE%80%E8%BF%B001.html"},{path:"/zs-use/linux/shell编程/实战脚本简述01.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%AE%80%E8%BF%B001.html"},{name:"v-2e5fd3cf",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--2.%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2e5fd3cf").then(t)}},{path:"/zs-use/linux/基本使用/Linux概述--2.虚拟机安装Linux.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--2.%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html"},{path:"/zs-use/linux/基本使用/Linux概述--2.虚拟机安装Linux.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--2.%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html"},{name:"v-926841e0",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--3.%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-926841e0").then(t)}},{path:"/zs-use/linux/基本使用/Linux概述--3.物理机安装Linux.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--3.%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html"},{path:"/zs-use/linux/基本使用/Linux概述--3.物理机安装Linux.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--3.%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html"},{name:"v-362d4c9a",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--alias.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-362d4c9a").then(t)}},{path:"/zs-use/linux/基本使用/shell--alias.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--alias.html"},{path:"/zs-use/linux/基本使用/shell--alias.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--alias.html"},{name:"v-58bed81c",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--grep%E5%92%8C%E7%AE%A1%E9%81%93%E7%AC%A6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-58bed81c").then(t)}},{path:"/zs-use/linux/基本使用/shell--grep和管道符.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--grep%E5%92%8C%E7%AE%A1%E9%81%93%E7%AC%A6.html"},{path:"/zs-use/linux/基本使用/shell--grep和管道符.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--grep%E5%92%8C%E7%AE%A1%E9%81%93%E7%AC%A6.html"},{name:"v-07de2942",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--4.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-07de2942").then(t)}},{path:"/zs-use/linux/基本使用/Linux概述--4.文件系统.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--4.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html"},{path:"/zs-use/linux/基本使用/Linux概述--4.文件系统.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--4.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html"},{name:"v-2a96af12",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--history.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2a96af12").then(t)}},{path:"/zs-use/linux/基本使用/shell--history.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--history.html"},{path:"/zs-use/linux/基本使用/shell--history.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--history.html"},{name:"v-6b3123eb",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--%E7%9B%B8%E5%85%B3%E7%AC%A6%E5%8F%B7.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6b3123eb").then(t)}},{path:"/zs-use/linux/基本使用/shell--相关符号.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--%E7%9B%B8%E5%85%B3%E7%AC%A6%E5%8F%B7.html"},{path:"/zs-use/linux/基本使用/shell--相关符号.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--%E7%9B%B8%E5%85%B3%E7%AC%A6%E5%8F%B7.html"},{name:"v-097816ab",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--1.%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-097816ab").then(t)}},{path:"/zs-use/linux/基本使用/命令--1.基本格式.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--1.%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F.html"},{path:"/zs-use/linux/基本使用/命令--1.基本格式.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--1.%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F.html"},{name:"v-a3565de6",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-a3565de6").then(t)}},{path:"/zs-use/linux/基本使用/",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"},{path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/index.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"},{path:"/zs-use/linux/基本使用/",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"},{name:"v-908a0e08",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--0.%E7%AE%80%E6%98%93%E7%89%88.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-908a0e08").then(t)}},{path:"/zs-use/linux/基本使用/命令--0.简易版.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--0.%E7%AE%80%E6%98%93%E7%89%88.html"},{path:"/zs-use/linux/基本使用/命令--0.简易版.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--0.%E7%AE%80%E6%98%93%E7%89%88.html"},{name:"v-6b6c3293",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--12.%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6b6c3293").then(t)}},{path:"/zs-use/linux/基本使用/命令--12.打包压缩.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--12.%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9.html"},{path:"/zs-use/linux/基本使用/命令--12.打包压缩.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--12.%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9.html"},{name:"v-b900f076",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--14.%E7%97%95%E8%BF%B9.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-b900f076").then(t)}},{path:"/zs-use/linux/基本使用/命令--14.痕迹.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--14.%E7%97%95%E8%BF%B9.html"},{path:"/zs-use/linux/基本使用/命令--14.痕迹.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--14.%E7%97%95%E8%BF%B9.html"},{name:"v-5f28171f",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--10.%E6%8C%82%E8%BD%BD.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-5f28171f").then(t)}},{path:"/zs-use/linux/基本使用/命令--10.挂载.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--10.%E6%8C%82%E8%BD%BD.html"},{path:"/zs-use/linux/基本使用/命令--10.挂载.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--10.%E6%8C%82%E8%BD%BD.html"},{name:"v-108860d2",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--15.echo.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-108860d2").then(t)}},{path:"/zs-use/linux/基本使用/命令--15.echo.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--15.echo.html"},{path:"/zs-use/linux/基本使用/命令--15.echo.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--15.echo.html"},{name:"v-cfef4fb8",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--2.%E5%85%B3%E6%9C%BA%E3%80%81%E9%87%8D%E5%90%AF.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-cfef4fb8").then(t)}},{path:"/zs-use/linux/基本使用/命令--2.关机、重启.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--2.%E5%85%B3%E6%9C%BA%E3%80%81%E9%87%8D%E5%90%AF.html"},{path:"/zs-use/linux/基本使用/命令--2.关机、重启.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--2.%E5%85%B3%E6%9C%BA%E3%80%81%E9%87%8D%E5%90%AF.html"},{name:"v-2c0ab6d6",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--4.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AE%A1%E7%90%86.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2c0ab6d6").then(t)}},{path:"/zs-use/linux/基本使用/命令--4.文件操作管理.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--4.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AE%A1%E7%90%86.html"},{path:"/zs-use/linux/基本使用/命令--4.文件操作管理.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--4.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AE%A1%E7%90%86.html"},{name:"v-078e449c",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--16.vim%E7%BC%96%E8%BE%91%E5%99%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-078e449c").then(t)}},{path:"/zs-use/linux/基本使用/命令--16.vim编辑器.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--16.vim%E7%BC%96%E8%BE%91%E5%99%A8.html"},{path:"/zs-use/linux/基本使用/命令--16.vim编辑器.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--16.vim%E7%BC%96%E8%BE%91%E5%99%A8.html"},{name:"v-0d896b54",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--5.%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0d896b54").then(t)}},{path:"/zs-use/linux/基本使用/命令--5.查找命令.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--5.%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4.html"},{path:"/zs-use/linux/基本使用/命令--5.查找命令.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--5.%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4.html"},{name:"v-31c11330",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--11.%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-31c11330").then(t)}},{path:"/zs-use/linux/基本使用/命令--11.包管理工具.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--11.%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html"},{path:"/zs-use/linux/基本使用/命令--11.包管理工具.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--11.%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html"},{name:"v-ce96bf66",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--3.Linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ce96bf66").then(t)}},{path:"/zs-use/linux/基本使用/命令--3.Linux帮助文档.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--3.Linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.html"},{path:"/zs-use/linux/基本使用/命令--3.Linux帮助文档.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--3.Linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.html"},{name:"v-737ebd86",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.1.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E6%99%AE%E9%80%9A%EF%BC%89.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-737ebd86").then(t)}},{path:"/zs-use/linux/基本使用/命令--7.1.文件权限（普通）.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.1.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E6%99%AE%E9%80%9A%EF%BC%89.html"},{path:"/zs-use/linux/基本使用/命令--7.1.文件权限（普通）.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.1.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E6%99%AE%E9%80%9A%EF%BC%89.html"},{name:"v-00a43673",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.2.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-00a43673").then(t)}},{path:"/zs-use/linux/基本使用/命令--7.2.文件权限（高级）.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.2.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89.html"},{path:"/zs-use/linux/基本使用/命令--7.2.文件权限（高级）.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.2.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89.html"},{name:"v-7d25a7c4",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--9.1.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%9F%A5%E7%9C%8B%EF%BC%89.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7d25a7c4").then(t)}},{path:"/zs-use/linux/基本使用/命令--9.1.文件系统（查看）.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--9.1.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%9F%A5%E7%9C%8B%EF%BC%89.html"},{path:"/zs-use/linux/基本使用/命令--9.1.文件系统（查看）.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--9.1.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%9F%A5%E7%9C%8B%EF%BC%89.html"},{name:"v-64302dce",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--8.%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-64302dce").then(t)}},{path:"/zs-use/linux/基本使用/命令--8.网络配置.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--8.%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html"},{path:"/zs-use/linux/基本使用/命令--8.网络配置.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--8.%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html"},{name:"v-fa92aa00",path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-fa92aa00").then(t)}},{path:"/中间件/nginx/",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"},{path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/index.html",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"},{path:"/中间件/nginx/",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"},{name:"v-823483c8",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86--NFS.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-823483c8").then(t)}},{path:"/zs-use/linux/基本使用/服务管理--NFS.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86--NFS.html"},{path:"/zs-use/linux/基本使用/服务管理--NFS.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86--NFS.html"},{name:"v-44b004af",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--1.%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC%E4%B8%8E%E4%BF%AE%E5%A4%8D.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-44b004af").then(t)}},{path:"/zs-use/linux/基本使用/系统管理--1.启动引导与修复.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--1.%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC%E4%B8%8E%E4%BF%AE%E5%A4%8D.html"},{path:"/zs-use/linux/基本使用/系统管理--1.启动引导与修复.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--1.%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC%E4%B8%8E%E4%BF%AE%E5%A4%8D.html"},{name:"v-16519c4b",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-16519c4b").then(t)}},{path:"/zs-use/linux/常见问题/",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/index.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{path:"/zs-use/linux/常见问题/",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{name:"v-095be634",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.1.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-095be634").then(t)}},{path:"/zs-use/linux/基本使用/系统管理--3.1.系统管理.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.1.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86.html"},{path:"/zs-use/linux/基本使用/系统管理--3.1.系统管理.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.1.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86.html"},{name:"v-b3d34a96",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-b3d34a96").then(t)}},{path:"/zs-use/linux/常见问题/ssh免密登录.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.html"},{path:"/zs-use/linux/常见问题/ssh免密登录.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.html"},{name:"v-40ce9bc1",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--13.%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-40ce9bc1").then(t)}},{path:"/zs-use/linux/基本使用/命令--13.时间日期.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--13.%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.html"},{path:"/zs-use/linux/基本使用/命令--13.时间日期.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--13.%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.html"},{name:"v-78c67846",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.2.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-78c67846").then(t)}},{path:"/zs-use/linux/基本使用/系统管理--3.2.系统管理-定时任务.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.2.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"},{path:"/zs-use/linux/基本使用/系统管理--3.2.系统管理-定时任务.html",redirect:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.2.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"},{name:"v-17596cd2",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/CentOS7.9%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-17596cd2").then(t)}},{path:"/zs-use/linux/常见问题/CentOS7.9显卡驱动安装.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/CentOS7.9%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85.html"},{path:"/zs-use/linux/常见问题/CentOS7.9显卡驱动安装.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/CentOS7.9%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85.html"},{name:"v-3e878b94",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B0%8F%E5%8A%9F%E8%83%BD.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3e878b94").then(t)}},{path:"/zs-use/linux/常见问题/小功能.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B0%8F%E5%8A%9F%E8%83%BD.html"},{path:"/zs-use/linux/常见问题/小功能.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B0%8F%E5%8A%9F%E8%83%BD.html"},{name:"v-106e935c",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%80%E5%9C%A8%E5%8C%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-106e935c").then(t)}},{path:"/zs-use/linux/常见问题/查找命令所在包.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%80%E5%9C%A8%E5%8C%85.html"},{path:"/zs-use/linux/常见问题/查找命令所在包.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%80%E5%9C%A8%E5%8C%85.html"},{name:"v-8001c0ce",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8001c0ce").then(t)}},{path:"/zs-use/linux/常见问题/服务器安装手册.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C.html"},{path:"/zs-use/linux/常见问题/服务器安装手册.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C.html"},{name:"v-351d81a2",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%BF%AE%E6%94%B9.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-351d81a2").then(t)}},{path:"/zs-use/linux/常见问题/主机名修改.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%BF%AE%E6%94%B9.html"},{path:"/zs-use/linux/常见问题/主机名修改.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%BF%AE%E6%94%B9.html"},{name:"v-2e4bb12b",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/2%E3%80%81base%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-2e4bb12b").then(t)}},{path:"/zs-use/linux/shell编程/2、base基本功能.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/2%E3%80%81base%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD.html"},{path:"/zs-use/linux/shell编程/2、base基本功能.html",redirect:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/2%E3%80%81base%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD.html"},{name:"v-8d1ed816",path:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8d1ed816").then(t)}},{path:"/zs-use/linux/虚拟化/",redirect:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{path:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/index.html",redirect:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{path:"/zs-use/linux/虚拟化/",redirect:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{name:"v-267387f4",path:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/docker--faq--%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-267387f4").then(t)}},{path:"/zs-use/linux/虚拟化/docker--faq--磁盘空间不足.html",redirect:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/docker--faq--%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3.html"},{path:"/zs-use/linux/虚拟化/docker--faq--磁盘空间不足.html",redirect:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/docker--faq--%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3.html"},{name:"v-aa79f4da",path:"/zs-use/maven/nexus--1.%E5%AE%89%E8%A3%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-aa79f4da").then(t)}},{path:"/zs-use/maven/nexus--1.安装.html",redirect:"/zs-use/maven/nexus--1.%E5%AE%89%E8%A3%85.html"},{path:"/zs-use/maven/nexus--1.安装.html",redirect:"/zs-use/maven/nexus--1.%E5%AE%89%E8%A3%85.html"},{name:"v-46446437",path:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-01.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-46446437").then(t)}},{path:"/zs-use/maven/自定义archetype-01.html",redirect:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-01.html"},{path:"/zs-use/maven/自定义archetype-01.html",redirect:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-01.html"},{name:"v-41855c61",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%94%99%E8%AF%AF--%E6%B2%A1%E6%9C%89%E5%AD%90%E8%BF%9B%E7%A8%8B.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-41855c61").then(t)}},{path:"/zs-use/linux/常见问题/错误--没有子进程.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%94%99%E8%AF%AF--%E6%B2%A1%E6%9C%89%E5%AD%90%E8%BF%9B%E7%A8%8B.html"},{path:"/zs-use/linux/常见问题/错误--没有子进程.html",redirect:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%94%99%E8%AF%AF--%E6%B2%A1%E6%9C%89%E5%AD%90%E8%BF%9B%E7%A8%8B.html"},{name:"v-60fd296e",path:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-02-%E6%8F%92%E4%BB%B6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-60fd296e").then(t)}},{path:"/zs-use/maven/自定义archetype-02-插件.html",redirect:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-02-%E6%8F%92%E4%BB%B6.html"},{path:"/zs-use/maven/自定义archetype-02-插件.html",redirect:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-02-%E6%8F%92%E4%BB%B6.html"},{name:"v-47349a78",path:"/zs-use/windows/CMD--%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-47349a78").then(t)}},{path:"/zs-use/windows/CMD--不是内部或外部命令.html",redirect:"/zs-use/windows/CMD--%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4.html"},{path:"/zs-use/windows/CMD--不是内部或外部命令.html",redirect:"/zs-use/windows/CMD--%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4.html"},{name:"v-17ec0b3e",path:"/zs-use/windows/CMD--%E6%9F%A5%E6%89%BE%E5%9C%A8%E7%94%A8IP.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-17ec0b3e").then(t)}},{path:"/zs-use/windows/CMD--查找在用IP.html",redirect:"/zs-use/windows/CMD--%E6%9F%A5%E6%89%BE%E5%9C%A8%E7%94%A8IP.html"},{path:"/zs-use/windows/CMD--查找在用IP.html",redirect:"/zs-use/windows/CMD--%E6%9F%A5%E6%89%BE%E5%9C%A8%E7%94%A8IP.html"},{name:"v-8f1f1f98",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDyoutube%E8%A7%86%E9%A2%91--0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-8f1f1f98").then(t)}},{path:"/zs-use/下载视频/下载youtube视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDyoutube%E8%A7%86%E9%A2%91--0.html"},{path:"/zs-use/下载视频/下载youtube视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDyoutube%E8%A7%86%E9%A2%91--0.html"},{name:"v-21c7e80e",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%99%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-21c7e80e").then(t)}},{path:"/zs-use/下载视频/下载器.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%99%A8.html"},{path:"/zs-use/下载视频/下载器.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%99%A8.html"},{name:"v-827c4fe8",path:"/zs-web/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-827c4fe8").then(t)}},{path:"/zs-web/index.html",redirect:"/zs-web/"},{name:"v-132ca422",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91--0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-132ca422").then(t)}},{path:"/zs-use/下载视频/下载b站视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91--0.html"},{path:"/zs-use/下载视频/下载b站视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91--0.html"},{name:"v-6e0ede2e",path:"/zs-use/windows/%E6%B5%8F%E8%A7%88%E5%99%A8--%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6e0ede2e").then(t)}},{path:"/zs-use/windows/浏览器--内存溢出.html",redirect:"/zs-use/windows/%E6%B5%8F%E8%A7%88%E5%99%A8--%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.html"},{path:"/zs-use/windows/浏览器--内存溢出.html",redirect:"/zs-use/windows/%E6%B5%8F%E8%A7%88%E5%99%A8--%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.html"},{name:"v-3d269228",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E6%8A%96%E9%9F%B3%E8%A7%86%E9%A2%91--0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3d269228").then(t)}},{path:"/zs-use/下载视频/下载抖音视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E6%8A%96%E9%9F%B3%E8%A7%86%E9%A2%91--0.html"},{path:"/zs-use/下载视频/下载抖音视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E6%8A%96%E9%9F%B3%E8%A7%86%E9%A2%91--0.html"},{name:"v-3ceb97d9",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%BE%AE%E4%BF%A1%E8%A7%86%E9%A2%91%E5%8F%B7%E8%A7%86%E9%A2%91--0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3ceb97d9").then(t)}},{path:"/zs-use/下载视频/下载微信视频号视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%BE%AE%E4%BF%A1%E8%A7%86%E9%A2%91%E5%8F%B7%E8%A7%86%E9%A2%91--0.html"},{path:"/zs-use/下载视频/下载微信视频号视频--0.html",redirect:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%BE%AE%E4%BF%A1%E8%A7%86%E9%A2%91%E5%8F%B7%E8%A7%86%E9%A2%91--0.html"},{name:"v-93650ac0",path:"/zs-web/node/node--%E5%8D%B8%E8%BD%BD.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-93650ac0").then(t)}},{path:"/zs-web/node/node--卸载.html",redirect:"/zs-web/node/node--%E5%8D%B8%E8%BD%BD.html"},{path:"/zs-web/node/node--卸载.html",redirect:"/zs-web/node/node--%E5%8D%B8%E8%BD%BD.html"},{name:"v-b476cf96",path:"/zs-web/node/%E9%85%8D%E7%BD%AE--sass%E6%B7%B7%E5%90%88%E5%99%A8.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-b476cf96").then(t)}},{path:"/zs-web/node/配置--sass混合器.html",redirect:"/zs-web/node/%E9%85%8D%E7%BD%AE--sass%E6%B7%B7%E5%90%88%E5%99%A8.html"},{path:"/zs-web/node/配置--sass混合器.html",redirect:"/zs-web/node/%E9%85%8D%E7%BD%AE--sass%E6%B7%B7%E5%90%88%E5%99%A8.html"},{name:"v-226822bd",path:"/zs-web/node/nvm--%E5%AE%89%E8%A3%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-226822bd").then(t)}},{path:"/zs-web/node/nvm--安装.html",redirect:"/zs-web/node/nvm--%E5%AE%89%E8%A3%85.html"},{path:"/zs-web/node/nvm--安装.html",redirect:"/zs-web/node/nvm--%E5%AE%89%E8%A3%85.html"},{name:"v-7ef0dd3a",path:"/zs-web/project/html/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7ef0dd3a").then(t)}},{path:"/zs-web/project/html/index.html",redirect:"/zs-web/project/html/"},{name:"v-50af7204",path:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%97%A0%E6%B3%95run%20build.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-50af7204").then(t)}},{path:"/zs-web/node/问题集--无法run build.html",redirect:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%97%A0%E6%B3%95run%20build.html"},{path:"/zs-web/node/问题集--无法run build.html",redirect:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%97%A0%E6%B3%95run%20build.html"},{name:"v-150ab307",path:"/zs-web/tool-%E5%B0%8F%E7%BB%93/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-150ab307").then(t)}},{path:"/zs-web/tool-小结/",redirect:"/zs-web/tool-%E5%B0%8F%E7%BB%93/"},{path:"/zs-web/tool-%E5%B0%8F%E7%BB%93/index.html",redirect:"/zs-web/tool-%E5%B0%8F%E7%BB%93/"},{path:"/zs-web/tool-小结/",redirect:"/zs-web/tool-%E5%B0%8F%E7%BB%93/"},{name:"v-4affc9b6",path:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--node%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-4affc9b6").then(t)}},{path:"/zs-web/node/问题集--node版本问题.html",redirect:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--node%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98.html"},{path:"/zs-web/node/问题集--node版本问题.html",redirect:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--node%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98.html"},{name:"v-549e5e1b",path:"/zs-use/maven/nexus--2.%E4%BB%8B%E7%BB%8D.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-549e5e1b").then(t)}},{path:"/zs-use/maven/nexus--2.介绍.html",redirect:"/zs-use/maven/nexus--2.%E4%BB%8B%E7%BB%8D.html"},{path:"/zs-use/maven/nexus--2.介绍.html",redirect:"/zs-use/maven/nexus--2.%E4%BB%8B%E7%BB%8D.html"},{name:"v-ec77969a",path:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90SSL%E8%BF%87%E6%9C%9F.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-ec77969a").then(t)}},{path:"/zs-web/node/问题集--淘宝镜像源SSL过期.html",redirect:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90SSL%E8%BF%87%E6%9C%9F.html"},{path:"/zs-web/node/问题集--淘宝镜像源SSL过期.html",redirect:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90SSL%E8%BF%87%E6%9C%9F.html"},{name:"v-63b6c8e0",path:"/zs-web/project/html/%E9%AD%94%E6%9C%AF%E5%8D%A1%E7%89%87.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-63b6c8e0").then(t)}},{path:"/zs-web/project/html/魔术卡片.html",redirect:"/zs-web/project/html/%E9%AD%94%E6%9C%AF%E5%8D%A1%E7%89%87.html"},{path:"/zs-web/project/html/魔术卡片.html",redirect:"/zs-web/project/html/%E9%AD%94%E6%9C%AF%E5%8D%A1%E7%89%87.html"},{name:"v-e4fc2ace",path:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-e4fc2ace").then(t)}},{path:"/zs-web/tool-小结/响应状态码.html",redirect:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.html"},{path:"/zs-web/tool-小结/响应状态码.html",redirect:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.html"},{name:"v-4aded80a",path:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E9%A1%B5%E9%9D%A2%E4%BF%AE%E6%94%B9.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-4aded80a").then(t)}},{path:"/zs-web/tool-小结/页面修改.html",redirect:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E9%A1%B5%E9%9D%A2%E4%BF%AE%E6%94%B9.html"},{path:"/zs-web/tool-小结/页面修改.html",redirect:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E9%A1%B5%E9%9D%A2%E4%BF%AE%E6%94%B9.html"},{name:"v-0030f45e",path:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/idea/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0030f45e").then(t)}},{path:"/大工具/idea/",redirect:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/idea/"},{path:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/idea/index.html",redirect:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/idea/"},{path:"/大工具/idea/",redirect:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/idea/"},{name:"v-d8dd6670",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/typroa1.6.7%E6%BF%80%E6%B4%BB.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-d8dd6670").then(t)}},{path:"/小工具/markdown/typroa1.6.7激活.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/typroa1.6.7%E6%BF%80%E6%B4%BB.html"},{path:"/小工具/markdown/typroa1.6.7激活.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/typroa1.6.7%E6%BF%80%E6%B4%BB.html"},{name:"v-3570fadb",path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/%E5%AE%89%E8%A3%85-win%E5%AE%89%E8%A3%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-3570fadb").then(t)}},{path:"/中间件/docker/安装-win安装.html",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/%E5%AE%89%E8%A3%85-win%E5%AE%89%E8%A3%85.html"},{path:"/中间件/docker/安装-win安装.html",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/%E5%AE%89%E8%A3%85-win%E5%AE%89%E8%A3%85.html"},{name:"v-41d3c199",path:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-41d3c199").then(t)}},{path:"/大工具/git/常用命令.html",redirect:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"},{path:"/大工具/git/常用命令.html",redirect:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"},{name:"v-0d21c6f4",path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-0d21c6f4").then(t)}},{path:"/中间件/docker/",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/"},{path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/index.html",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/"},{path:"/中间件/docker/",redirect:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/"},{name:"v-f27a6fa4",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/axure/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-f27a6fa4").then(t)}},{path:"/小工具/axure/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/axure/"},{path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/axure/index.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/axure/"},{path:"/小工具/axure/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/axure/"},{name:"v-7d6049e6",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7d6049e6").then(t)}},{path:"/小工具/markdown/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/"},{path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/index.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/"},{path:"/小工具/markdown/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/"},{name:"v-21143feb",path:"/zs-web/project/html/%E5%85%89%E6%A0%87%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C--%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-21143feb").then(t)}},{path:"/zs-web/project/html/光标跟随效果--前端实现.html",redirect:"/zs-web/project/html/%E5%85%89%E6%A0%87%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C--%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0.html"},{path:"/zs-web/project/html/光标跟随效果--前端实现.html",redirect:"/zs-web/project/html/%E5%85%89%E6%A0%87%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C--%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0.html"},{name:"v-c282de34",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/cygwin/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-c282de34").then(t)}},{path:"/小工具/cygwin/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/cygwin/"},{path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/cygwin/index.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/cygwin/"},{path:"/小工具/cygwin/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/cygwin/"},{name:"v-b8bdb958",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/html2md/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-b8bdb958").then(t)}},{path:"/小工具/html2md/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/html2md/"},{path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/html2md/index.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/html2md/"},{path:"/小工具/html2md/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/html2md/"},{name:"v-6b53d6b4",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/codeAi/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-6b53d6b4").then(t)}},{path:"/小工具/codeAi/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/codeAi/"},{path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/codeAi/index.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/codeAi/"},{path:"/小工具/codeAi/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/codeAi/"},{name:"v-46ed7c1c",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markmap/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-46ed7c1c").then(t)}},{path:"/小工具/markmap/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markmap/"},{path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markmap/index.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markmap/"},{path:"/小工具/markmap/",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markmap/"},{name:"v-070625d5",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-070625d5").then(t)}},{path:"/小工具/ppt/图形绘制.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6.html"},{path:"/小工具/ppt/图形绘制.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6.html"},{name:"v-29dea1fd",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E5%A1%AB%E5%85%85.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-29dea1fd").then(t)}},{path:"/小工具/ppt/图形填充.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E5%A1%AB%E5%85%85.html"},{path:"/小工具/ppt/图形填充.html",redirect:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E5%A1%AB%E5%85%85.html"},{name:"v-aeb113a2",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E9%A1%B5%E9%9D%A2%E7%BC%A9%E6%94%BE.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-aeb113a2").then(t)}},{path:"/小需求/iframe/iframe-页面缩放.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E9%A1%B5%E9%9D%A2%E7%BC%A9%E6%94%BE.html"},{path:"/小需求/iframe/iframe-页面缩放.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E9%A1%B5%E9%9D%A2%E7%BC%A9%E6%94%BE.html"},{name:"v-1b9042f4",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/css/%E6%92%91%E5%BC%80%E9%AB%98%E5%BA%A6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-1b9042f4").then(t)}},{path:"/小需求/css/撑开高度.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/css/%E6%92%91%E5%BC%80%E9%AB%98%E5%BA%A6.html"},{path:"/小需求/css/撑开高度.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/css/%E6%92%91%E5%BC%80%E9%AB%98%E5%BA%A6.html"},{name:"v-df51b6ae",path:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-df51b6ae").then(t)}},{path:"/小框架/kkFileView/",redirect:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/"},{path:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/index.html",redirect:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/"},{path:"/小框架/kkFileView/",redirect:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/"},{name:"v-49136d1b",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-49136d1b").then(t)}},{path:"/小需求/iframe/iframe-自适应高度.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6.html"},{path:"/小需求/iframe/iframe-自适应高度.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6.html"},{name:"v-54089e5c",path:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/centos%E9%83%A8%E7%BD%B2.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-54089e5c").then(t)}},{path:"/小框架/kkFileView/centos部署.html",redirect:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/centos%E9%83%A8%E7%BD%B2.html"},{path:"/小框架/kkFileView/centos部署.html",redirect:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/centos%E9%83%A8%E7%BD%B2.html"},{name:"v-7aa4809c",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/html/video-%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-7aa4809c").then(t)}},{path:"/小需求/html/video-播放视频.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/html/video-%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91.html"},{path:"/小需求/html/video-播放视频.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/html/video-%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91.html"},{name:"v-66068ada",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-lib-%E6%97%B6%E9%97%B4%E5%BA%93.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-66068ada").then(t)}},{path:"/小需求/js/js-lib-时间库.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-lib-%E6%97%B6%E9%97%B4%E5%BA%93.html"},{path:"/小需求/js/js-lib-时间库.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-lib-%E6%97%B6%E9%97%B4%E5%BA%93.html"},{name:"v-5dda9bbf",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-api-stringify%E6%90%9E%E7%A0%B8%E4%BA%86%E6%88%91%E7%9A%84%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-5dda9bbf").then(t)}},{path:"/小需求/js/js-api-stringify搞砸了我的时间对象.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-api-stringify%E6%90%9E%E7%A0%B8%E4%BA%86%E6%88%91%E7%9A%84%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1.html"},{path:"/小需求/js/js-api-stringify搞砸了我的时间对象.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-api-stringify%E6%90%9E%E7%A0%B8%E4%BA%86%E6%88%91%E7%9A%84%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1.html"},{name:"v-08b9d524",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-stringify%E6%A0%BC%E5%BC%8F%E5%8C%96Date.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-08b9d524").then(t)}},{path:"/小需求/js/js-stringify格式化Date.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-stringify%E6%A0%BC%E5%BC%8F%E5%8C%96Date.html"},{path:"/小需求/js/js-stringify格式化Date.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-stringify%E6%A0%BC%E5%BC%8F%E5%8C%96Date.html"},{name:"v-07918935",path:"/web/js/api-JSON.parse%E5%87%BD%E6%95%B0.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-07918935").then(t)}},{path:"/web/js/api-JSON.parse函数.html",redirect:"/web/js/api-JSON.parse%E5%87%BD%E6%95%B0.html"},{path:"/web/js/api-JSON.parse函数.html",redirect:"/web/js/api-JSON.parse%E5%87%BD%E6%95%B0.html"},{name:"v-399fa958",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%8F%82%E6%95%B0%E5%BD%92%E4%B8%80%E5%8C%96.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-399fa958").then(t)}},{path:"/小需求/js/js-参数归一化.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%8F%82%E6%95%B0%E5%BD%92%E4%B8%80%E5%8C%96.html"},{path:"/小需求/js/js-参数归一化.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%8F%82%E6%95%B0%E5%BD%92%E4%B8%80%E5%8C%96.html"},{name:"v-71f9a1aa",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-json%E6%A0%BC%E5%BC%8F%E5%8C%96.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-71f9a1aa").then(t)}},{path:"/小需求/js/js-json格式化.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-json%E6%A0%BC%E5%BC%8F%E5%8C%96.html"},{path:"/小需求/js/js-json格式化.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-json%E6%A0%BC%E5%BC%8F%E5%8C%96.html"},{name:"v-f324a4b4",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%88%86%E7%BB%84.html",component:Ae,beforeEnter:(n,e,t)=>{Object(Wn.a)("Layout","v-f324a4b4").then(t)}},{path:"/小需求/js/js-分组.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%88%86%E7%BB%84.html"},{path:"/小需求/js/js-分组.html",redirect:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%88%86%E7%BB%84.html"},{path:"*",component:Ae}],je={title:"小邵子",description:"小邵子的个人笔记",base:"/",headTags:[["link",{rel:"icon",href:"/favicon.ico"}],["meta",{name:"author",content:"小邵子"}],["meta",{name:"keywords",content:"张邵,小邵子的 vuepress 个人博客"}],["link",{rel:"manifest",href:"/manifest.json"}],["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"apple-touch-icon",href:"/icons/apple-touch-icon-152x152.png"}],["link",{rel:"mask-icon",href:"/icons/safari-pinned-tab.svg",color:"#3eaf7c"}],["meta",{name:"msapplication-TileImage",content:"/icons/msapplication-icon-144x144.png"}],["meta",{name:"msapplication-TileColor",content:"#000000"}],["script",{charset:"utf-8",src:"/js/custom.js"}],["script",{},'\n    var _hmt = _hmt || [];\n    (function() {\n      var hm = document.createElement("script");\n      hm.src = "https://hm.baidu.com/hm.js?b2140ca1d9ce57e6aac1a7709f5f5fe7";\n      var s = document.getElementsByTagName("script")[0]; \n      s.parentNode.insertBefore(hm, s);\n    })();\n    ']],pages:[{title:"精确问题",frontmatter:{},regularPath:"/web/js/js-%E7%B2%BE%E5%BA%A6.html",relativePath:"web/js/js-精度.md",key:"v-e6b7fcfa",path:"/web/js/js-%E7%B2%BE%E5%BA%A6.html",headers:[{level:2,title:"小数运算不精确",slug:"小数运算不精确",normalizedTitle:"小数运算不精确",charIndex:11},{level:2,title:"toFix",slug:"tofix",normalizedTitle:"tofix",charIndex:516},{level:2,title:"Decimal.js",slug:"decimal-js",normalizedTitle:"decimal.js",charIndex:702}],headersStr:"小数运算不精确 toFix Decimal.js",content:"# 精确问题\n\n\n# 小数运算不精确\n\n在做小数运算的时候发现有时精确，有时不精确。\n\n\n\n所有计算机语言都一样\n\n如果以十进制方式推断小数运算规则是这样的\n如果运算规则一致，小数就表示成这样：明显不是\n计算机希望运算规则保持一致。那么十进制小数转二进制必定会不丢失精度\n\n3\t--\x3e 11\n3.3\t--\x3e 11.11\n3.3 + 3.3 --\x3e 11.11 + 11.11\n6.6\t\t  --\x3e 111.10  ==> 7.1\n\n\n十进制\n\n$314 = 3 \\times 10^2 + 1 \\times 10^1 + 4 \\times 10^0$\n\n$3.14 = 3 \\times 10^0 + 1 \\times 10^{-1} + 4 \\times 10^{-2}$\n\n二进制\n\n$101 = 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 = 5$\n\n$1.101 = 1 \\times 2^0 + 1 \\times 2^{-1} + 0 \\times 2^{-2} + 1 \\times 2^{-3} = 1.625$\n\n\n\n写成有限位格式的二进制小数转十进制末尾一定是5\n\n\n# toFix\n\ntoFix引发的思考\n\n\n\n小数不精确有三点\n\n * 存储\n * 运算\n * 显示\n\n\n\n\n\n以上现象：\n\n * 数据在存储浮点数时本身就不精确\n * 为何显示是精确的，可以任务是一个近似处理。 好比两个非常相近的浮点值会被认为是同一个数据一样\n * 同理可以认为两个不精确的数据相加如果得到一个误差很小的值时会被近似处理\n\nES262官方文档\n\n\n\n\n# Decimal.js\n\nhttps://github.com/MikeMcl/decimal.js\n\n",normalizedContent:"# 精确问题\n\n\n# 小数运算不精确\n\n在做小数运算的时候发现有时精确，有时不精确。\n\n\n\n所有计算机语言都一样\n\n如果以十进制方式推断小数运算规则是这样的\n如果运算规则一致，小数就表示成这样：明显不是\n计算机希望运算规则保持一致。那么十进制小数转二进制必定会不丢失精度\n\n3\t--\x3e 11\n3.3\t--\x3e 11.11\n3.3 + 3.3 --\x3e 11.11 + 11.11\n6.6\t\t  --\x3e 111.10  ==> 7.1\n\n\n十进制\n\n$314 = 3 \\times 10^2 + 1 \\times 10^1 + 4 \\times 10^0$\n\n$3.14 = 3 \\times 10^0 + 1 \\times 10^{-1} + 4 \\times 10^{-2}$\n\n二进制\n\n$101 = 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 = 5$\n\n$1.101 = 1 \\times 2^0 + 1 \\times 2^{-1} + 0 \\times 2^{-2} + 1 \\times 2^{-3} = 1.625$\n\n\n\n写成有限位格式的二进制小数转十进制末尾一定是5\n\n\n# tofix\n\ntofix引发的思考\n\n\n\n小数不精确有三点\n\n * 存储\n * 运算\n * 显示\n\n\n\n\n\n以上现象：\n\n * 数据在存储浮点数时本身就不精确\n * 为何显示是精确的，可以任务是一个近似处理。 好比两个非常相近的浮点值会被认为是同一个数据一样\n * 同理可以认为两个不精确的数据相加如果得到一个误差很小的值时会被近似处理\n\nes262官方文档\n\n\n\n\n# decimal.js\n\nhttps://github.com/mikemcl/decimal.js\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1}},{title:"本站指南",frontmatter:{title:"本站指南",date:"2022-06-06T00:00:00.000Z",sidebar:"auto",isTimeLine:!1,isShowComment:!0},regularPath:"/about.html",relativePath:"about.md",key:"v-9bb2069c",path:"/about.html",lastUpdated:"2023年11月29日星期三上午11点13分",lastUpdatedTimestamp:1701227626e3,headersStr:null,content:"# 关于我 about.html",normalizedContent:"# 关于我 about.html",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1700706449e3},{title:"Home",frontmatter:{home:!0,actionText:"开始阅读 →",actionLink:"/guide/",footer:"Copyright © 2024-present 小邵子"},regularPath:"/",relativePath:"README.md",key:"v-0699efe9",path:"/",lastUpdated:"2024年8月12日星期一早上8点55分",lastUpdatedTimestamp:1723424126e3,headersStr:null,content:"🎉身为一名次高级全烂开发工程师的自我修养,拿来主义的践行者🎉 test 更新\n\n待整理博客\n\n大文件上传问题\n\nhttps://www.cnblogs.com/liyhbk/p/16810243.html\n\n异常\n\nhttps://blog.csdn.net/freyaalisa/article/details/78253346\n\ngateway+security https://blog.csdn.net/andybegin/article/details/115723671\n\npoi 转图片 https://blog.csdn.net/qq_40548741/article/details/104507236 https://www.cnblogs.com/powertoolsteam/p/17735035.html https://blog.csdn.net/qq_36007926/article/details/131574907 https://blog.51cto.com/u_12868/6622381 https://www.21xrx.com/Articles/read_article/20565 https://songzixian.com/javaskill/1812.html\n\nhttps://blog.csdn.net/weixin_42084972/article/details/100876231 单位转换 https://www.gongjumi.com/format/px2pt poi获取图片 https://blog.51cto.com/u_15077562/4113309 http://t.csdnimg.cn/t6YLk 浮动图片 http://t.csdnimg.cn/xfC7z https://blog.csdn.net/m0_57605697/article/details/133701891 wps内嵌图片 http://t.csdnimg.cn/fIpqk https://blog.csdn.net/maudboy/article/details/133145278?spm=1001.2014.3001.5502\n\nhttps://blog.csdn.net/weixin_42384009/article/details/120429704 https://blog.csdn.net/weixin_43865196/article/details/121507535 https://juejin.cn/s/java%E8%8E%B7%E5%8F%96excel%E5%85%AC%E5%BC%8F%E7%9A%84%E5%80%BC https://cloud.tencent.com/developer/ask/sof/101978598 https://blog.51cto.com/u_16213404/7859546 https://juejin.cn/s/java%E8%AF%BB%E5%8F%96excel%E5%85%AC%E5%BC%8F%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C https://codeantenna.com/a/vkfOaELpyS\n\nhttps://www.jianshu.com/p/c46ed3d9f92f\n\nwebsocket https://shibd.github.io/message-center-1/ https://www.bilibili.com/video/BV1og411R7fW/?p=2&vd_source=2ddc2110ec678599d389fe730208b05b https://blog.csdn.net/echizao1839/article/details/127576366 https://blog.csdn.net/qq_46554590/article/details/126201054 https://pdai.tech/md/db/nosql-redis/db-redis-x-pub-sub.html https://www.yuque.com/snab/mallchat/pmkgeey51ed7b24z#nMX7n",normalizedContent:"🎉身为一名次高级全烂开发工程师的自我修养,拿来主义的践行者🎉 test 更新\n\n待整理博客\n\n大文件上传问题\n\nhttps://www.cnblogs.com/liyhbk/p/16810243.html\n\n异常\n\nhttps://blog.csdn.net/freyaalisa/article/details/78253346\n\ngateway+security https://blog.csdn.net/andybegin/article/details/115723671\n\npoi 转图片 https://blog.csdn.net/qq_40548741/article/details/104507236 https://www.cnblogs.com/powertoolsteam/p/17735035.html https://blog.csdn.net/qq_36007926/article/details/131574907 https://blog.51cto.com/u_12868/6622381 https://www.21xrx.com/articles/read_article/20565 https://songzixian.com/javaskill/1812.html\n\nhttps://blog.csdn.net/weixin_42084972/article/details/100876231 单位转换 https://www.gongjumi.com/format/px2pt poi获取图片 https://blog.51cto.com/u_15077562/4113309 http://t.csdnimg.cn/t6ylk 浮动图片 http://t.csdnimg.cn/xfc7z https://blog.csdn.net/m0_57605697/article/details/133701891 wps内嵌图片 http://t.csdnimg.cn/fipqk https://blog.csdn.net/maudboy/article/details/133145278?spm=1001.2014.3001.5502\n\nhttps://blog.csdn.net/weixin_42384009/article/details/120429704 https://blog.csdn.net/weixin_43865196/article/details/121507535 https://juejin.cn/s/java%e8%8e%b7%e5%8f%96excel%e5%85%ac%e5%bc%8f%e7%9a%84%e5%80%bc https://cloud.tencent.com/developer/ask/sof/101978598 https://blog.51cto.com/u_16213404/7859546 https://juejin.cn/s/java%e8%af%bb%e5%8f%96excel%e5%85%ac%e5%bc%8f%e8%ae%a1%e7%ae%97%e7%bb%93%e6%9e%9c https://codeantenna.com/a/vkfoaelpys\n\nhttps://www.jianshu.com/p/c46ed3d9f92f\n\nwebsocket https://shibd.github.io/message-center-1/ https://www.bilibili.com/video/bv1og411r7fw/?p=2&vd_source=2ddc2110ec678599d389fe730208b05b https://blog.csdn.net/echizao1839/article/details/127576366 https://blog.csdn.net/qq_46554590/article/details/126201054 https://pdai.tech/md/db/nosql-redis/db-redis-x-pub-sub.html https://www.yuque.com/snab/mallchat/pmkgeey51ed7b24z#nmx7n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1700646875e3},{title:"编程入门之路",frontmatter:{},regularPath:"/guide/",relativePath:"guide/README.md",key:"v-21482dfc",path:"/guide/",headers:[{level:2,title:"教你上网",slug:"教你上网",normalizedTitle:"教你上网",charIndex:13},{level:2,title:"Git的使用",slug:"git的使用",normalizedTitle:"git的使用",charIndex:62},{level:2,title:"搭建个人博客",slug:"搭建个人博客",normalizedTitle:"搭建个人博客",charIndex:119},{level:2,title:"Linux学习",slug:"linux学习",normalizedTitle:"linux学习",charIndex:205}],lastUpdated:"2024年1月26日星期五上午10点18分",lastUpdatedTimestamp:1706235522e3,headersStr:"教你上网 Git的使用 搭建个人博客 Linux学习",content:"# 编程入门之路\n\n\n# 教你上网\n\n> 首先，作为一个程序员，经常需要访问国外优秀内容如github\n\n教你上网\n\n\n# Git的使用\n\n> git的使用贯穿了整个编程的任何一个地方，所以是前期必须学习的内容\n\ngit基础使用\n\n\n# 搭建个人博客\n\n> 会上网了，那么我们来学习下如何搭建自己的博客吧。\n> \n> 往后的学习内容都发布在自己的内容博客中，方便查找维护\n\nvuepress的入门使用\n\n\n# Linux学习\n\n> 有了博客，我们需要内容输出，接下来就有很多选择了。比如这里我选择点亮我的Linux技能数",normalizedContent:"# 编程入门之路\n\n\n# 教你上网\n\n> 首先，作为一个程序员，经常需要访问国外优秀内容如github\n\n教你上网\n\n\n# git的使用\n\n> git的使用贯穿了整个编程的任何一个地方，所以是前期必须学习的内容\n\ngit基础使用\n\n\n# 搭建个人博客\n\n> 会上网了，那么我们来学习下如何搭建自己的博客吧。\n> \n> 往后的学习内容都发布在自己的内容博客中，方便查找维护\n\nvuepress的入门使用\n\n\n# linux学习\n\n> 有了博客，我们需要内容输出，接下来就有很多选择了。比如这里我选择点亮我的linux技能数",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701227626e3},{title:"mybatis-plus的使用",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/",relativePath:"zs-ee-框架/mybatis-plus/README.md",key:"v-2f2cd45d",path:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/",lastUpdated:"2023年12月14日星期四上午9点12分",lastUpdatedTimestamp:1702516373e3,headersStr:null,content:"# mybatis-plus的使用",normalizedContent:"# mybatis-plus的使用",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702516373e3},{title:"Spring框架学习",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/",relativePath:"zs-ee-框架/spring/README.md",key:"v-66b8cf2a",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/",lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:null,content:"# Spring框架学习\n\nspring概念\n\nIoC容器\n\nAOP\n\nJdbcTemplate\n\n事务管理\n\nSpring5新特性",normalizedContent:"# spring框架学习\n\nspring概念\n\nioc容器\n\naop\n\njdbctemplate\n\n事务管理\n\nspring5新特性",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702543269e3},{title:"mybatis-plus日志",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/mybatis-plus%E6%97%A5%E5%BF%97.html",relativePath:"zs-ee-框架/mybatis-plus/mybatis-plus日志.md",key:"v-5d14cacd",path:"/zs-ee-%E6%A1%86%E6%9E%B6/mybatis-plus/mybatis-plus%E6%97%A5%E5%BF%97.html",headers:[{level:3,title:"方法一：",slug:"方法一",normalizedTitle:"方法一：",charIndex:21},{level:3,title:"方法二：",slug:"方法二",normalizedTitle:"方法二：",charIndex:244},{level:3,title:"方法三：",slug:"方法三",normalizedTitle:"方法三：",charIndex:300},{level:3,title:"mybatis-plus其他配置：",slug:"mybatis-plus其他配置",normalizedTitle:"mybatis-plus其他配置：",charIndex:1509},{level:3,title:"mybatis-plus修改日志只打印SQL语句不打印查询结果",slug:"mybatis-plus修改日志只打印sql语句不打印查询结果",normalizedTitle:"mybatis-plus修改日志只打印sql语句不打印查询结果",charIndex:2871}],lastUpdated:"2023年12月14日星期四上午9点12分",lastUpdatedTimestamp:1702516373e3,headersStr:"方法一： 方法二： 方法三： mybatis-plus其他配置： mybatis-plus修改日志只打印SQL语句不打印查询结果",content:'# mybatis-plus日志\n\n\n# 方法一：\n\nmybatis-plus:\n  configuration:\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启sql日志\n\n或者：\n\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl #关闭sql日志\n\n\n\n# 方法二：\n\nlogging:\n  level:\n    com.app.mapper: debug\n\n\n\n\n# 方法三：\n\n引入官方插件\n\n        \x3c!-- https://mvnrepository.com/artifact/p6spy/p6spy --\x3e\n        <dependency>\n            <groupId>p6spy</groupId>\n            <artifactId>p6spy</artifactId>\n            <version>3.9.1</version>\n        </dependency>\n\n\n\nyml配置\n\nspring:\n  datasource:\n    driver-class-name: com.p6spy.engine.spy.P6SpyDriver\n    url: jdbc:p6spy:h2:mem:test\n    ...\n\n\n\nspy.properties配置\n\n#3.2.1以上使用\nmodulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory\n#3.2.1以下使用或者不配置\n#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory\n# 自定义日志打印\nlogMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger\n#日志输出到控制台\nappender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger\n# 使用日志系统记录 sql\n#appender=com.p6spy.engine.spy.appender.Slf4JLogger\n# 设置 p6spy driver 代理\nderegisterdrivers=true\n# 取消JDBC URL前缀\nuseprefix=true\n# 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.\nexcludecategories=info,debug,result,commit,resultset\n# 日期格式\ndateformat=yyyy-MM-dd HH:mm:ss\n# 实际驱动可多个\n#driverlist=org.h2.Driver\n# 是否开启慢SQL记录\noutagedetection=true\n# 慢SQL记录标准 2 秒\noutagedetectioninterval=2\n\n\n\n\n# mybatis-plus其他配置：\n\n#  mybatis 的\nmybatis:\n  config-location: classpath:mybatis.cfg.xml    #  mybatis主配置文件所在路径\n  type-aliases-package: com.demo.drools.entity  #  定义所有操作类的别名所在包\n  mapper-locations: classpath:mapper/*.xml      #  所有的mapper映射文件\n  configuration:\n    # 开启驼峰uName自动映射到u_name\n    map-underscore-to-camel-case: true\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  　　\n\n# mybatis-plus相关配置\nmybatis-plus:\n  type‐aliases‐package: cn.itcast.mp.pojo  #  定义所有操作类的别名所在包\n  # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）\n  mapper-locations: classpath:mapper/*.xml\n  # 以下配置均有默认值,可以不设置\n  global-config:\n    banner: false #是否 mybatis-plus 在控制台输出的logo\n    db-config:\n      #主键类型 AUTO:"数据库ID自增" INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";\n      id-type: auto\n      #字段策略 IGNORED:"忽略判断"  NOT_NULL:"非 NULL 判断")  NOT_EMPTY:"非空判断"\n      field-strategy: NOT_EMPTY\n      #数据库类型\n      db-type: MYSQL\n      logic-delete-field: deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  configuration:\n    # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射\n    map-underscore-to-camel-case: true\n    # 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段\n    call-setters-on-nulls: true\n    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n\n\n# mybatis-plus修改日志只打印SQL语句不打印查询结果\n\n项目中使用了mybatis-plus baomidou，如果遇到了日志输出时 既打印SQL语句又打印查询出来的结果，如下：\n\n\n\n如果想只打印SQL语句、不打印查询结果，解决方案如下：\n\n增加log4j日志的配置。\n\nlogging:\n  level:\n   com.xxx.xxx.biz.mapper: debug\n\n\n\n去掉mybatis-plus configuration log-impl控制台输出的配置。\n\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n\n\n修改后再执行DB操的输出结果：\n\n\n\n就是log4j的形式输出，而不是控制台打印了，并且只输出SQL语句，如果debug调高级别，SQL语句也可以不输出。\n\n本文转自 https://blog.csdn.net/qq_41995919/article/details/124994808，如有侵权，请联系删除。',normalizedContent:'# mybatis-plus日志\n\n\n# 方法一：\n\nmybatis-plus:\n  configuration:\n        log-impl: org.apache.ibatis.logging.stdout.stdoutimpl #开启sql日志\n\n或者：\n\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.nologging.nologgingimpl #关闭sql日志\n\n\n\n# 方法二：\n\nlogging:\n  level:\n    com.app.mapper: debug\n\n\n\n\n# 方法三：\n\n引入官方插件\n\n        \x3c!-- https://mvnrepository.com/artifact/p6spy/p6spy --\x3e\n        <dependency>\n            <groupid>p6spy</groupid>\n            <artifactid>p6spy</artifactid>\n            <version>3.9.1</version>\n        </dependency>\n\n\n\nyml配置\n\nspring:\n  datasource:\n    driver-class-name: com.p6spy.engine.spy.p6spydriver\n    url: jdbc:p6spy:h2:mem:test\n    ...\n\n\n\nspy.properties配置\n\n#3.2.1以上使用\nmodulelist=com.baomidou.mybatisplus.extension.p6spy.mybatispluslogfactory,com.p6spy.engine.outage.p6outagefactory\n#3.2.1以下使用或者不配置\n#modulelist=com.p6spy.engine.logging.p6logfactory,com.p6spy.engine.outage.p6outagefactory\n# 自定义日志打印\nlogmessageformat=com.baomidou.mybatisplus.extension.p6spy.p6spylogger\n#日志输出到控制台\nappender=com.baomidou.mybatisplus.extension.p6spy.stdoutlogger\n# 使用日志系统记录 sql\n#appender=com.p6spy.engine.spy.appender.slf4jlogger\n# 设置 p6spy driver 代理\nderegisterdrivers=true\n# 取消jdbc url前缀\nuseprefix=true\n# 配置记录 log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.\nexcludecategories=info,debug,result,commit,resultset\n# 日期格式\ndateformat=yyyy-mm-dd hh:mm:ss\n# 实际驱动可多个\n#driverlist=org.h2.driver\n# 是否开启慢sql记录\noutagedetection=true\n# 慢sql记录标准 2 秒\noutagedetectioninterval=2\n\n\n\n\n# mybatis-plus其他配置：\n\n#  mybatis 的\nmybatis:\n  config-location: classpath:mybatis.cfg.xml    #  mybatis主配置文件所在路径\n  type-aliases-package: com.demo.drools.entity  #  定义所有操作类的别名所在包\n  mapper-locations: classpath:mapper/*.xml      #  所有的mapper映射文件\n  configuration:\n    # 开启驼峰uname自动映射到u_name\n    map-underscore-to-camel-case: true\n    log-impl: org.apache.ibatis.logging.stdout.stdoutimpl\n  　　\n\n# mybatis-plus相关配置\nmybatis-plus:\n  type‐aliases‐package: cn.itcast.mp.pojo  #  定义所有操作类的别名所在包\n  # xml扫描，多个目录用逗号或者分号分隔（告诉 mapper 所对应的 xml 文件位置）\n  mapper-locations: classpath:mapper/*.xml\n  # 以下配置均有默认值,可以不设置\n  global-config:\n    banner: false #是否 mybatis-plus 在控制台输出的logo\n    db-config:\n      #主键类型 auto:"数据库id自增" input:"用户输入id",id_worker:"全局唯一id (数字类型唯一id)", uuid:"全局唯一id uuid";\n      id-type: auto\n      #字段策略 ignored:"忽略判断"  not_null:"非 null 判断")  not_empty:"非空判断"\n      field-strategy: not_empty\n      #数据库类型\n      db-type: mysql\n      logic-delete-field: deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  configuration:\n    # 是否开启自动驼峰命名规则映射:从数据库列名到java属性驼峰命名的类似映射\n    map-underscore-to-camel-case: true\n    # 如果查询结果中包含空值的列，则 mybatis 在映射的时候，不会映射这个字段\n    call-setters-on-nulls: true\n    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用\n    log-impl: org.apache.ibatis.logging.stdout.stdoutimpl\n\n\n\n# mybatis-plus修改日志只打印sql语句不打印查询结果\n\n项目中使用了mybatis-plus baomidou，如果遇到了日志输出时 既打印sql语句又打印查询出来的结果，如下：\n\n\n\n如果想只打印sql语句、不打印查询结果，解决方案如下：\n\n增加log4j日志的配置。\n\nlogging:\n  level:\n   com.xxx.xxx.biz.mapper: debug\n\n\n\n去掉mybatis-plus configuration log-impl控制台输出的配置。\n\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.stdoutimpl\n\n\n\n修改后再执行db操的输出结果：\n\n\n\n就是log4j的形式输出，而不是控制台打印了，并且只输出sql语句，如果debug调高级别，sql语句也可以不输出。\n\n本文转自 https://blog.csdn.net/qq_41995919/article/details/124994808，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702516373e3},{title:"AOP",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/aop.html",relativePath:"zs-ee-框架/spring/aop.md",key:"v-0fecc99c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/aop.html",headers:[{level:2,title:"参考视频",slug:"参考视频",normalizedTitle:"参考视频",charIndex:25},{level:2,title:"AOP 简介",slug:"aop-简介",normalizedTitle:"aop 简介",charIndex:121},{level:3,title:"AOP概念",slug:"aop概念",normalizedTitle:"aop概念",charIndex:132},{level:3,title:"AOP优势",slug:"aop优势",normalizedTitle:"aop优势",charIndex:165},{level:2,title:"AOP入门案例",slug:"aop入门案例",normalizedTitle:"aop入门案例",charIndex:228},{level:3,title:"AOP 核心概念",slug:"aop-核心概念",normalizedTitle:"aop 核心概念",charIndex:240},{level:3,title:"入门案例(注解 + xml)",slug:"入门案例-注解-xml",normalizedTitle:"入门案例(注解 + xml)",charIndex:354},{level:2,title:"AOP配置（XML）（重点）",slug:"aop配置-xml-重点",normalizedTitle:"aop配置（xml）（重点）",charIndex:4352},{level:3,title:"基本配置",slug:"基本配置",normalizedTitle:"基本配置",charIndex:4371},{level:3,title:"切入点表达式",slug:"切入点表达式",normalizedTitle:"切入点表达式",charIndex:4061},{level:3,title:"通知中获取参数",slug:"通知中获取参数",normalizedTitle:"通知中获取参数",charIndex:6605},{level:3,title:"通知中获取返回值",slug:"通知中获取返回值",normalizedTitle:"通知中获取返回值",charIndex:6621},{level:3,title:"通知中获取异常对象",slug:"通知中获取异常对象",normalizedTitle:"通知中获取异常对象",charIndex:6658},{level:2,title:"AOP配置（注解）（重点）",slug:"aop配置-注解-重点",normalizedTitle:"aop配置（注解）（重点）",charIndex:6694},{level:3,title:"通知顺序",slug:"通知顺序",normalizedTitle:"通知顺序",charIndex:6714},{level:2,title:"综合案例 （重点）",slug:"综合案例-重点",normalizedTitle:"综合案例 （重点）",charIndex:6934},{level:2,title:"AOP底层原理 （重点）",slug:"aop底层原理-重点",normalizedTitle:"aop底层原理 （重点）",charIndex:7971},{level:3,title:"装饰者模式",slug:"装饰者模式",normalizedTitle:"装饰者模式",charIndex:7988},{level:3,title:"JDK Proxy",slug:"jdk-proxy",normalizedTitle:"jdk proxy",charIndex:10099},{level:3,title:"CGLIBProxy",slug:"cglibproxy",normalizedTitle:"cglibproxy",charIndex:11095}],lastUpdated:"2023年12月14日星期四晚上6点33分",lastUpdatedTimestamp:1702550026e3,headersStr:"参考视频 AOP 简介 AOP概念 AOP优势 AOP入门案例 AOP 核心概念 入门案例(注解 + xml) AOP配置（XML）（重点） 基本配置 切入点表达式 通知中获取参数 通知中获取返回值 通知中获取异常对象 AOP配置（注解）（重点） 通知顺序 综合案例 （重点） AOP底层原理 （重点） 装饰者模式 JDK Proxy CGLIBProxy",content:'# AOP\n\n[toc]\n\n\n# AOP\n\n\n# 参考视频\n\nhttps://www.bilibili.com/video/BV1yq4y1N78E?spm_id_from=333.337.search-card.all.click\n\n\n# AOP 简介\n\n\n# AOP概念\n\n> AOP是一种编程范式，主要关注共性功能\n\n\n# AOP优势\n\n * 提高代码的可重用性\n * 业务代码编码更简洁\n * 业务代码维护更高效\n * 业务功能扩展更便捷\n\n\n# AOP入门案例\n\n\n# AOP 核心概念\n\n> 连接点：指所有方法\n\n\n\n> 切入点：拥有共性功能的方法\n\n\n\n> 通知：共性功能\n\n\n\n> 切面：切入点，和共性功能的，描述关系\n\n\n\n> 通知类型：共性功能所处的位置\n\n\n\n> 其他概念\n\n\n\n\n# 入门案例(注解 + xml)\n\npom.xml\n\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>5.1.9.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjweaver</artifactId>\n    <version>1.9.4</version>\n</dependency>\n\n\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.12</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>5.1.9.RELEASE</version>\n</dependency>\n\n\ndao、service\n\npackage com.zs.dao;\n\npublic interface AopDao {\n    void save();\n}\n\n\npackage com.zs.dao.impl;\n\nimport com.zs.dao.AopDao;\nimport org.springframework.stereotype.Repository;\n\n\n@Repository\npublic class AopDaoImpl implements AopDao {\n    @Override\n    public void save() {\n        //共性功能\n        //System.out.println("共性功能");\n        System.out.println("save dao ...");\n    }\n}\n\n\npackage com.zs.service;\n\npublic interface AopService {\n    void save();\n}\n\n\npackage com.zs.service.impl;\n\nimport com.zs.dao.AopDao;\nimport com.zs.service.AopService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class AopServiceImpl implements AopService {\n\n    @Autowired\n    private AopDao aopDao;\n\n    @Override\n    public void save() {\n        System.out.println("aop service ... ");\n        aopDao.save();\n    }\n}\n\n\n通知类\n\npackage com.zs.aop;\n\n@Component\npublic class AOPAdvice {\n\n\t\n    public void function(){\n        System.out.println("共性功能");\n    }\n\n}\n\n\n\napplicationContext.xml\n\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xmlns:aop="http://www.springframework.org/schema/aop"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\n\n    \x3c!--加载类路径下所有properties配置文件--\x3e\n\x3c!--    <context:property-placeholder location="classpath:*.properties"/>--\x3e\n\n\n\x3c!--    <import resource="applicationContext-book.xml"/>--\x3e\n\x3c!--    <import resource="applicationContext-user.xml.bak"/>--\x3e\n\x3c!--    <import resource="applicationContext-druid.xml.bak"/>--\x3e\n\x3c!--    <import resource="applicationContext-mybatis.xml.bak"/>--\x3e\n    <import resource="applicationContext-aop.xml"/>\n</beans>\n\n\n\napplicationContext-aop.xml\n\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xmlns:aop="http://www.springframework.org/schema/aop"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\n    \n    \x3c!--该处为排除配置，请忽略--\x3e\n    <context:component-scan base-package="com.zs">\n        <context:exclude-filter type="custom" expression="config.filter.AopTestTypeFilter"/>\n    </context:component-scan>\n\n\n    <aop:config>\n        \x3c!--切入点表达式：定义切入点--\x3e\n        <aop:pointcut id="pt" expression="execution(* *..*(..))"/>\n        \x3c!--通知--\x3e\n        <aop:aspect ref="AOPAdvice">\n            \x3c!--切面：切入点，通知之间的位置信息--\x3e\n            <aop:before method="function" pointcut-ref="pt"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n\n\n\n\n# AOP配置（XML）（重点）\n\n\n# 基本配置\n\n\n# 切入点表达式\n\n切入点：描述的是某个方法 切入点表达式是一个快速匹配方法描述的通配格式，类似于正则表达式 关键字（访问修饰符 返回值 报名.类名.方法名(参数) 异常名）\n\n * 关键字： 描述表达式的匹配模式\n\n范例： execution(public User com.itheima.service.UserService.findById(int))\n\n# 关键字\n\nexecution:匹配执行指定方法 args:匹配带有指定参数类型的方法 within: this: target: @within @target @args @annotation bean reference pointcut\n\n# 切入点通配符\n\n * * :任意符\n * .. : 连续任意符\n * + : 专用于匹配子类类型\n\n# 逻辑运算符\n\n&& 、||、 ！\n\n# 切入点配置的三种方式\n\n\n\n# 切入点配置经验\n\n严格遵循规范命名 先为方法配置局部切入点 再抽取类中公共切入点 最后抽取全局切入点 代码走查过程中检测切入点是否存在越界性包含，非包含性进驻 设定AOP执行检测程序，在单元测试中监控通知被执行次数与预计次数是否匹配 设定完毕的切入点如果发生调整务必进行回归测试 （适用于xml格式）\n\n# 通知类型\n\n> 前置通知：原始方法执行前，如果通知中抛出异常，阻止原始方法运行\n> \n>  * 应用： 数据校验\n> \n> 后置通知：原始方法执行后，无论方法是否出现异常，都将执行通知\n> \n>  * 应用： 现场处理\n> \n> 返回后通知：原始方法执行后，原始方法抛出异常，无法执行\n> \n>  * 应用： 返回值相关数据处理\n> \n> 抛出异常后通知：原始方法抛出异常后执行，如果原始方法没有抛出异常，无法执行\n> \n>  * 应用： 对原始方法中出现的异常信息进行处理\n> \n> 环绕通知：在原始方法执行前后均有对应执行，还可以阻止原始方法的执行\n\n    <aop:config>\n        \x3c!--切入点表达式：定义切入点--\x3e\n        <aop:pointcut id="pt" expression="execution(* *..*(..))"/>\n        \x3c!--通知--\x3e\n        <aop:aspect ref="AOPAdvice">\n            \x3c!--切面：切入点，通知之间的位置信息--\x3e\n            <aop:before method="before" pointcut-ref="pt"/>\n            <aop:after method="after" pointcut-ref="pt"/>\n            <aop:after-returning method="afterReturning" pointcut-ref="pt"/>\n            <aop:after-throwing method="afterThrowing" pointcut-ref="pt"/>\n            <aop:around method="around" pointcut-ref="pt"/>\n        </aop:aspect>\n    </aop:config>\n\n\npackage com.zs.aop;\n\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class AOPAdvice {\n    public void function(){\n        System.out.println("共性功能");\n    }\n\n\n    public void before(){\n        System.out.println("before");\n    }\n\n    public void after(){\n        System.out.println("after");\n    }\n\n    public void afterReturning(){\n        System.out.println("afterReturning");\n    }\n\n    public void afterThrowing(){\n        System.out.println("afterThrowing");\n    }\n\n    public Object around(ProceedingJoinPoint pjp) throws Throwable {\n        System.out.println("around");\n        Object proceed = pjp.proceed();\n        System.out.println("around");\n        return proceed;\n    }\n}\n\n\n\n\n# 通知中获取参数\n\n\n\n\n\n\n# 通知中获取返回值\n\nafter-returning around\n\n\n# 通知中获取异常对象\n\nafterThrowing around\n\n\n# AOP配置（注解）（重点）\n\n\n\n\n# 通知顺序\n\n同一通知类中，相同通知类型以方法名排序为准 不同通知类中，以类名排序为准 使用@Order注解通过变更bean的加载顺序改变通知的加载顺序\n\n企业开发经验\n\n * 通知方法名由3部分组成，分别前缀、顺序编码、功能描述\n * 前缀为固定字符串，例如baidu、itheima等，无实际意义\n * 顺序编码为6位以内的整数，通常3位\n * 功能描述，为方法对应的实际通知功能，例如exception、strLenCheck\n\n\n# 综合案例 （重点）\n\npackage com.zs.aop;\n\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Aspect\npublic class RunTimeMonitorAdvice {\n\n    @Pointcut("execution(* com.zs.service.AccountService.find*(..))")\n    public void pt(){}\n\n    @Around("pt()")\n    public Object runtimeAround(ProceedingJoinPoint pjp) throws Throwable {\n        Signature signature = pjp.getSignature();\n        String className = signature.getDeclaringTypeName();\n        String methodName = signature.getName();\n        long startTime = System.currentTimeMillis();\n        for (int i = 0; i < 10000; i++) {\n            pjp.proceed(pjp.getArgs());\n        }\n        long endTime = System.currentTimeMillis();\n        System.out.println(className + ":" + methodName  + " 10000 run: " + (endTime - startTime) + "ms");\n        return null;\n    }\n}\n\n\n\n# AOP底层原理 （重点）\n\n\n# 装饰者模式\n\n\n\n\n\npublic interface DecoratorService {\n    void save();\n}\n\n\n\n\n\npackage com.zs.service.impl;\n\nimport com.zs.domain.Account;\nimport com.zs.mapper.AccountDao;\nimport com.zs.service.AccountService;\nimport com.zs.service.DecoratorService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n\n@Service("decoratorService")\npublic class DecoratorServiceImpl implements DecoratorService {\n\n    @Override\n    public void save() {\n        System.out.println("水泥墙");\n    }\n}\n\n\n\npackage com.zs.base.decorator;\n\nimport com.zs.service.DecoratorService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component("decoratorServiceDecorator")\npublic class DecoratorServiceImplDecorator implements DecoratorService {\n    @Autowired\n    private DecoratorService decoratorService;\n\n    public DecoratorServiceImplDecorator(DecoratorService decoratorService) {\n        this.decoratorService = decoratorService;\n    }\n\n    @Override\n    public void save() {\n        decoratorService.save();\n        System.out.println("刮大白");\n    }\n}\n\n\npackage com.zs.service;\n\n\nimport com.zs.base.decorator.DecoratorServiceImplDecorator;\nimport com.zs.domain.Account;\nimport config.SpringConfig;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport java.util.List;\n\n//设定spring专用的类加载器\n@RunWith(SpringJUnit4ClassRunner.class)\n//设定加载的spring上下文对应的配置类\n@ContextConfiguration(classes = SpringConfig.class)\npublic class DecoratorServiceTest {\n\n    @Autowired\n    private DecoratorService decoratorService;\n\n    @Autowired\n    private DecoratorService decoratorServiceDecorator;\n\n    @Test\n    public void test(){\n//        DecoratorServiceImplDecorator dsid = new DecoratorServiceImplDecorator(decoratorService);\n//        dsid.save();\n\n        decoratorServiceDecorator.save();\n    }\n}\n\n\n\n\n# JDK Proxy\n\nJDKProxy 是针对对象做代理，要求原始对象具有接口实现，并对接口方法进行增强\n\npackage com.zs.base.proxy;\n\nimport com.zs.service.DecoratorService;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class DecoratorServiceJDKProxy {\n\n    public static DecoratorService createDecoratorServiceJDKProxy(DecoratorService decoratorService){\n        ClassLoader cl = decoratorService.getClass().getClassLoader();\n        Class[] classes = decoratorService.getClass().getInterfaces();\n        InvocationHandler ih = new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object invoke = method.invoke(decoratorService, args);\n                System.out.println("刷大白");\n\n                return invoke;\n            }\n        };\n        DecoratorService service = (DecoratorService) Proxy.newProxyInstance(cl,classes,ih);\n        return service;\n    }\n\n\n}\n\n\n\n# CGLIBProxy\n\n\n\n> CGLIB,Code生成类库 不限定是否具有接口，可以对任意操作进行增强 无需原始被代理对象，动态创建出新的代理对象\n\npackage com.zs.base.cglib;\n\nimport com.zs.service.DecoratorService;\nimport org.springframework.cglib.proxy.Enhancer;\nimport org.springframework.cglib.proxy.MethodInterceptor;\nimport org.springframework.cglib.proxy.MethodProxy;\n\nimport java.lang.reflect.Method;\n\npublic class DecoratorServiceImplCglibProxy {\n\n    public static DecoratorService createDecoratorServiceCglibProxy(Class clazz){\n        //创建Enhancer对象（可以理解为内存中动态创建一个类的字节码）\n        Enhancer enhancer = new Enhancer();\n        //设置Enhancer对象的父类是指定类型\n        enhancer.setSuperclass(clazz);\n        //设置回调方法\n        enhancer.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n                /*\n                    o ： 代理类对象，\n                    method：原始类方法\n                    methodProxy: 代理类方法\n                    args：方法参数\n                 */\n                //调用原始方法\n                Object ret = methodProxy.invokeSuper(o, args);\n                if (method.getName().equals("save")){\n                    System.out.println("刮大白");\n                }\n                return ret;\n            }\n        });\n        //使用Enhancer对象创建对应的对象\n        return (DecoratorService) enhancer.create();\n    }\n\n}\n\n\n\npackage com.zs.base.cglib;\n\nimport com.zs.service.DecoratorService;\nimport com.zs.service.impl.DecoratorServiceImpl;\n\npublic class app {\n    public static void main(String[] args) {\n        DecoratorService decoratorService = DecoratorServiceImplCglibProxy.createDecoratorServiceCglibProxy(DecoratorServiceImpl.class);\n        decoratorService.save();\n    }\n}\n\n\n\nspring 切换代理类型\n\n> 注解： @EnableAspectJAutoProxy(proxyTargetClass = true) XML注解支持： <aop:aspectj-autoproxy proxy-target-class="false" /> XML配置 <aop: config proxy-target-class="false"></aop:config>\n\n以下是测试代码的日志\n\n==== 没有异常的情况\n\n环绕通知前....\n\nbefore\n\ninvoke\n\n环绕通知后....\n\nafter\n\nafterReturning\n\n==== 有异常的情况\n\n环绕通知前....\n\nbefore\n\ninvoke\n\nafter\n\nafterThrowable出现异常:msg=/ by zero\n\n==== 总结\n\nafter一定走。是在finally里\n\nafterReturning 在抛异常时不出现，在after之后。说明在finally外面\n\nbefore 在环绕通知后执行\n\n错误版\n\n// 这个是错的。因为执行这个，抛了异常之后会走afterReturning。而实际没有走。\ntry{\n\n    Around();\n    Before();\n    invoke();\n\n}catch(Exception e){\n\n    AfterThrowable();\n\n}finally{\n\n    After();\n\n}\nAfterReturning();\n\n\n抛异常之后并没有走AfterReturning。因此该方法在 catch 前面执行。在finally后执行。最终版如下\n\n最终版\n\n// 最终版\ntry{\n\n    try {\n\n        Around();\n        Before();\n        invoke();\n\n    } finally {\n\n        After();\n\n    }\n\n    AfterReturning();\n\n} catch (Exception e){\n\n    AfterThrowable();\n\n}\n',normalizedContent:'# aop\n\n[toc]\n\n\n# aop\n\n\n# 参考视频\n\nhttps://www.bilibili.com/video/bv1yq4y1n78e?spm_id_from=333.337.search-card.all.click\n\n\n# aop 简介\n\n\n# aop概念\n\n> aop是一种编程范式，主要关注共性功能\n\n\n# aop优势\n\n * 提高代码的可重用性\n * 业务代码编码更简洁\n * 业务代码维护更高效\n * 业务功能扩展更便捷\n\n\n# aop入门案例\n\n\n# aop 核心概念\n\n> 连接点：指所有方法\n\n\n\n> 切入点：拥有共性功能的方法\n\n\n\n> 通知：共性功能\n\n\n\n> 切面：切入点，和共性功能的，描述关系\n\n\n\n> 通知类型：共性功能所处的位置\n\n\n\n> 其他概念\n\n\n\n\n# 入门案例(注解 + xml)\n\npom.xml\n\n<dependency>\n    <groupid>org.springframework</groupid>\n    <artifactid>spring-context</artifactid>\n    <version>5.1.9.release</version>\n</dependency>\n<dependency>\n    <groupid>org.aspectj</groupid>\n    <artifactid>aspectjweaver</artifactid>\n    <version>1.9.4</version>\n</dependency>\n\n\n<dependency>\n    <groupid>junit</groupid>\n    <artifactid>junit</artifactid>\n    <version>4.12</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupid>org.springframework</groupid>\n    <artifactid>spring-test</artifactid>\n    <version>5.1.9.release</version>\n</dependency>\n\n\ndao、service\n\npackage com.zs.dao;\n\npublic interface aopdao {\n    void save();\n}\n\n\npackage com.zs.dao.impl;\n\nimport com.zs.dao.aopdao;\nimport org.springframework.stereotype.repository;\n\n\n@repository\npublic class aopdaoimpl implements aopdao {\n    @override\n    public void save() {\n        //共性功能\n        //system.out.println("共性功能");\n        system.out.println("save dao ...");\n    }\n}\n\n\npackage com.zs.service;\n\npublic interface aopservice {\n    void save();\n}\n\n\npackage com.zs.service.impl;\n\nimport com.zs.dao.aopdao;\nimport com.zs.service.aopservice;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.service;\n\n\n@service\npublic class aopserviceimpl implements aopservice {\n\n    @autowired\n    private aopdao aopdao;\n\n    @override\n    public void save() {\n        system.out.println("aop service ... ");\n        aopdao.save();\n    }\n}\n\n\n通知类\n\npackage com.zs.aop;\n\n@component\npublic class aopadvice {\n\n\t\n    public void function(){\n        system.out.println("共性功能");\n    }\n\n}\n\n\n\napplicationcontext.xml\n\n<?xml version="1.0" encoding="utf-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xmlns:aop="http://www.springframework.org/schema/aop"\n       xsi:schemalocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\n\n    \x3c!--加载类路径下所有properties配置文件--\x3e\n\x3c!--    <context:property-placeholder location="classpath:*.properties"/>--\x3e\n\n\n\x3c!--    <import resource="applicationcontext-book.xml"/>--\x3e\n\x3c!--    <import resource="applicationcontext-user.xml.bak"/>--\x3e\n\x3c!--    <import resource="applicationcontext-druid.xml.bak"/>--\x3e\n\x3c!--    <import resource="applicationcontext-mybatis.xml.bak"/>--\x3e\n    <import resource="applicationcontext-aop.xml"/>\n</beans>\n\n\n\napplicationcontext-aop.xml\n\n<?xml version="1.0" encoding="utf-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xmlns:aop="http://www.springframework.org/schema/aop"\n       xsi:schemalocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd">\n    \n    \x3c!--该处为排除配置，请忽略--\x3e\n    <context:component-scan base-package="com.zs">\n        <context:exclude-filter type="custom" expression="config.filter.aoptesttypefilter"/>\n    </context:component-scan>\n\n\n    <aop:config>\n        \x3c!--切入点表达式：定义切入点--\x3e\n        <aop:pointcut id="pt" expression="execution(* *..*(..))"/>\n        \x3c!--通知--\x3e\n        <aop:aspect ref="aopadvice">\n            \x3c!--切面：切入点，通知之间的位置信息--\x3e\n            <aop:before method="function" pointcut-ref="pt"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n\n\n\n\n# aop配置（xml）（重点）\n\n\n# 基本配置\n\n\n# 切入点表达式\n\n切入点：描述的是某个方法 切入点表达式是一个快速匹配方法描述的通配格式，类似于正则表达式 关键字（访问修饰符 返回值 报名.类名.方法名(参数) 异常名）\n\n * 关键字： 描述表达式的匹配模式\n\n范例： execution(public user com.itheima.service.userservice.findbyid(int))\n\n# 关键字\n\nexecution:匹配执行指定方法 args:匹配带有指定参数类型的方法 within: this: target: @within @target @args @annotation bean reference pointcut\n\n# 切入点通配符\n\n * * :任意符\n * .. : 连续任意符\n * + : 专用于匹配子类类型\n\n# 逻辑运算符\n\n&& 、||、 ！\n\n# 切入点配置的三种方式\n\n\n\n# 切入点配置经验\n\n严格遵循规范命名 先为方法配置局部切入点 再抽取类中公共切入点 最后抽取全局切入点 代码走查过程中检测切入点是否存在越界性包含，非包含性进驻 设定aop执行检测程序，在单元测试中监控通知被执行次数与预计次数是否匹配 设定完毕的切入点如果发生调整务必进行回归测试 （适用于xml格式）\n\n# 通知类型\n\n> 前置通知：原始方法执行前，如果通知中抛出异常，阻止原始方法运行\n> \n>  * 应用： 数据校验\n> \n> 后置通知：原始方法执行后，无论方法是否出现异常，都将执行通知\n> \n>  * 应用： 现场处理\n> \n> 返回后通知：原始方法执行后，原始方法抛出异常，无法执行\n> \n>  * 应用： 返回值相关数据处理\n> \n> 抛出异常后通知：原始方法抛出异常后执行，如果原始方法没有抛出异常，无法执行\n> \n>  * 应用： 对原始方法中出现的异常信息进行处理\n> \n> 环绕通知：在原始方法执行前后均有对应执行，还可以阻止原始方法的执行\n\n    <aop:config>\n        \x3c!--切入点表达式：定义切入点--\x3e\n        <aop:pointcut id="pt" expression="execution(* *..*(..))"/>\n        \x3c!--通知--\x3e\n        <aop:aspect ref="aopadvice">\n            \x3c!--切面：切入点，通知之间的位置信息--\x3e\n            <aop:before method="before" pointcut-ref="pt"/>\n            <aop:after method="after" pointcut-ref="pt"/>\n            <aop:after-returning method="afterreturning" pointcut-ref="pt"/>\n            <aop:after-throwing method="afterthrowing" pointcut-ref="pt"/>\n            <aop:around method="around" pointcut-ref="pt"/>\n        </aop:aspect>\n    </aop:config>\n\n\npackage com.zs.aop;\n\n\nimport org.aspectj.lang.proceedingjoinpoint;\nimport org.springframework.context.annotation.componentscan;\nimport org.springframework.stereotype.component;\n\n@component\npublic class aopadvice {\n    public void function(){\n        system.out.println("共性功能");\n    }\n\n\n    public void before(){\n        system.out.println("before");\n    }\n\n    public void after(){\n        system.out.println("after");\n    }\n\n    public void afterreturning(){\n        system.out.println("afterreturning");\n    }\n\n    public void afterthrowing(){\n        system.out.println("afterthrowing");\n    }\n\n    public object around(proceedingjoinpoint pjp) throws throwable {\n        system.out.println("around");\n        object proceed = pjp.proceed();\n        system.out.println("around");\n        return proceed;\n    }\n}\n\n\n\n\n# 通知中获取参数\n\n\n\n\n\n\n# 通知中获取返回值\n\nafter-returning around\n\n\n# 通知中获取异常对象\n\nafterthrowing around\n\n\n# aop配置（注解）（重点）\n\n\n\n\n# 通知顺序\n\n同一通知类中，相同通知类型以方法名排序为准 不同通知类中，以类名排序为准 使用@order注解通过变更bean的加载顺序改变通知的加载顺序\n\n企业开发经验\n\n * 通知方法名由3部分组成，分别前缀、顺序编码、功能描述\n * 前缀为固定字符串，例如baidu、itheima等，无实际意义\n * 顺序编码为6位以内的整数，通常3位\n * 功能描述，为方法对应的实际通知功能，例如exception、strlencheck\n\n\n# 综合案例 （重点）\n\npackage com.zs.aop;\n\n\nimport org.aspectj.lang.proceedingjoinpoint;\nimport org.aspectj.lang.signature;\nimport org.aspectj.lang.annotation.around;\nimport org.aspectj.lang.annotation.aspect;\nimport org.aspectj.lang.annotation.pointcut;\nimport org.springframework.stereotype.component;\n\n@component\n@aspect\npublic class runtimemonitoradvice {\n\n    @pointcut("execution(* com.zs.service.accountservice.find*(..))")\n    public void pt(){}\n\n    @around("pt()")\n    public object runtimearound(proceedingjoinpoint pjp) throws throwable {\n        signature signature = pjp.getsignature();\n        string classname = signature.getdeclaringtypename();\n        string methodname = signature.getname();\n        long starttime = system.currenttimemillis();\n        for (int i = 0; i < 10000; i++) {\n            pjp.proceed(pjp.getargs());\n        }\n        long endtime = system.currenttimemillis();\n        system.out.println(classname + ":" + methodname  + " 10000 run: " + (endtime - starttime) + "ms");\n        return null;\n    }\n}\n\n\n\n# aop底层原理 （重点）\n\n\n# 装饰者模式\n\n\n\n\n\npublic interface decoratorservice {\n    void save();\n}\n\n\n\n\n\npackage com.zs.service.impl;\n\nimport com.zs.domain.account;\nimport com.zs.mapper.accountdao;\nimport com.zs.service.accountservice;\nimport com.zs.service.decoratorservice;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.service;\n\nimport java.util.list;\n\n\n@service("decoratorservice")\npublic class decoratorserviceimpl implements decoratorservice {\n\n    @override\n    public void save() {\n        system.out.println("水泥墙");\n    }\n}\n\n\n\npackage com.zs.base.decorator;\n\nimport com.zs.service.decoratorservice;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.component;\n\n@component("decoratorservicedecorator")\npublic class decoratorserviceimpldecorator implements decoratorservice {\n    @autowired\n    private decoratorservice decoratorservice;\n\n    public decoratorserviceimpldecorator(decoratorservice decoratorservice) {\n        this.decoratorservice = decoratorservice;\n    }\n\n    @override\n    public void save() {\n        decoratorservice.save();\n        system.out.println("刮大白");\n    }\n}\n\n\npackage com.zs.service;\n\n\nimport com.zs.base.decorator.decoratorserviceimpldecorator;\nimport com.zs.domain.account;\nimport config.springconfig;\nimport org.junit.test;\nimport org.junit.runner.runwith;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.test.context.contextconfiguration;\nimport org.springframework.test.context.junit4.springjunit4classrunner;\n\nimport java.util.list;\n\n//设定spring专用的类加载器\n@runwith(springjunit4classrunner.class)\n//设定加载的spring上下文对应的配置类\n@contextconfiguration(classes = springconfig.class)\npublic class decoratorservicetest {\n\n    @autowired\n    private decoratorservice decoratorservice;\n\n    @autowired\n    private decoratorservice decoratorservicedecorator;\n\n    @test\n    public void test(){\n//        decoratorserviceimpldecorator dsid = new decoratorserviceimpldecorator(decoratorservice);\n//        dsid.save();\n\n        decoratorservicedecorator.save();\n    }\n}\n\n\n\n\n# jdk proxy\n\njdkproxy 是针对对象做代理，要求原始对象具有接口实现，并对接口方法进行增强\n\npackage com.zs.base.proxy;\n\nimport com.zs.service.decoratorservice;\n\nimport java.lang.reflect.invocationhandler;\nimport java.lang.reflect.method;\nimport java.lang.reflect.proxy;\n\npublic class decoratorservicejdkproxy {\n\n    public static decoratorservice createdecoratorservicejdkproxy(decoratorservice decoratorservice){\n        classloader cl = decoratorservice.getclass().getclassloader();\n        class[] classes = decoratorservice.getclass().getinterfaces();\n        invocationhandler ih = new invocationhandler() {\n            @override\n            public object invoke(object proxy, method method, object[] args) throws throwable {\n                object invoke = method.invoke(decoratorservice, args);\n                system.out.println("刷大白");\n\n                return invoke;\n            }\n        };\n        decoratorservice service = (decoratorservice) proxy.newproxyinstance(cl,classes,ih);\n        return service;\n    }\n\n\n}\n\n\n\n# cglibproxy\n\n\n\n> cglib,code生成类库 不限定是否具有接口，可以对任意操作进行增强 无需原始被代理对象，动态创建出新的代理对象\n\npackage com.zs.base.cglib;\n\nimport com.zs.service.decoratorservice;\nimport org.springframework.cglib.proxy.enhancer;\nimport org.springframework.cglib.proxy.methodinterceptor;\nimport org.springframework.cglib.proxy.methodproxy;\n\nimport java.lang.reflect.method;\n\npublic class decoratorserviceimplcglibproxy {\n\n    public static decoratorservice createdecoratorservicecglibproxy(class clazz){\n        //创建enhancer对象（可以理解为内存中动态创建一个类的字节码）\n        enhancer enhancer = new enhancer();\n        //设置enhancer对象的父类是指定类型\n        enhancer.setsuperclass(clazz);\n        //设置回调方法\n        enhancer.setcallback(new methodinterceptor() {\n            @override\n            public object intercept(object o, method method, object[] args, methodproxy methodproxy) throws throwable {\n                /*\n                    o ： 代理类对象，\n                    method：原始类方法\n                    methodproxy: 代理类方法\n                    args：方法参数\n                 */\n                //调用原始方法\n                object ret = methodproxy.invokesuper(o, args);\n                if (method.getname().equals("save")){\n                    system.out.println("刮大白");\n                }\n                return ret;\n            }\n        });\n        //使用enhancer对象创建对应的对象\n        return (decoratorservice) enhancer.create();\n    }\n\n}\n\n\n\npackage com.zs.base.cglib;\n\nimport com.zs.service.decoratorservice;\nimport com.zs.service.impl.decoratorserviceimpl;\n\npublic class app {\n    public static void main(string[] args) {\n        decoratorservice decoratorservice = decoratorserviceimplcglibproxy.createdecoratorservicecglibproxy(decoratorserviceimpl.class);\n        decoratorservice.save();\n    }\n}\n\n\n\nspring 切换代理类型\n\n> 注解： @enableaspectjautoproxy(proxytargetclass = true) xml注解支持： <aop:aspectj-autoproxy proxy-target-class="false" /> xml配置 <aop: config proxy-target-class="false"></aop:config>\n\n以下是测试代码的日志\n\n==== 没有异常的情况\n\n环绕通知前....\n\nbefore\n\ninvoke\n\n环绕通知后....\n\nafter\n\nafterreturning\n\n==== 有异常的情况\n\n环绕通知前....\n\nbefore\n\ninvoke\n\nafter\n\nafterthrowable出现异常:msg=/ by zero\n\n==== 总结\n\nafter一定走。是在finally里\n\nafterreturning 在抛异常时不出现，在after之后。说明在finally外面\n\nbefore 在环绕通知后执行\n\n错误版\n\n// 这个是错的。因为执行这个，抛了异常之后会走afterreturning。而实际没有走。\ntry{\n\n    around();\n    before();\n    invoke();\n\n}catch(exception e){\n\n    afterthrowable();\n\n}finally{\n\n    after();\n\n}\nafterreturning();\n\n\n抛异常之后并没有走afterreturning。因此该方法在 catch 前面执行。在finally后执行。最终版如下\n\n最终版\n\n// 最终版\ntry{\n\n    try {\n\n        around();\n        before();\n        invoke();\n\n    } finally {\n\n        after();\n\n    }\n\n    afterreturning();\n\n} catch (exception e){\n\n    afterthrowable();\n\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702543269e3},{frontmatter:{},regularPath:"/zs-resume/",relativePath:"zs-resume/README.md",key:"v-b8a32b9c",path:"/zs-resume/",lastUpdated:"2023年12月4日星期一下午5点23分",lastUpdatedTimestamp:1701681805e3,headersStr:null,content:"",normalizedContent:"",charsets:{},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701681805e3},{frontmatter:{},regularPath:"/zs-project/mallchat/",relativePath:"zs-project/mallchat/README.md",key:"v-2a712b8a",path:"/zs-project/mallchat/",lastUpdated:"2023年11月30日星期四下午1点43分",lastUpdatedTimestamp:1701323023e3,headersStr:null,content:"👋 欢迎来到知识库 知识库就像书一样，让多篇文档结构化，方便知识的创作与沉淀",normalizedContent:"👋 欢迎来到知识库 知识库就像书一样，让多篇文档结构化，方便知识的创作与沉淀",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701323023e3},{frontmatter:{},regularPath:"/zs-project/mallchat/%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E3%80%90%E5%BF%85%E8%AF%BB%E3%80%91.html",relativePath:"zs-project/mallchat/项目整体介绍【必读】.md",key:"v-56a9f4d0",path:"/zs-project/mallchat/%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E3%80%90%E5%BF%85%E8%AF%BB%E3%80%91.html",lastUpdated:"2023年11月30日星期四下午1点43分",lastUpdatedTimestamp:1701323023e3,headersStr:null,content:"项目整体介绍【必读】 大家好，我是阿斌，首先欢迎大家加入知识星球，一起见证【抹茶】的迭代和成长，在这里，你可以 1 推荐你作为练手，自己从零到一开复刻这个项目，才能更加了解其中细节（在星球记录过程，最终完成有奖励） 2 也可以发现项目任何可优化的点，联系阿斌，确认后可帮助优化，成为抹茶的contributor，或接下星球发布的功能开发任务。 3 或者是你只想了解每块业务的细节，复用到工作中。项目文档会详细介绍每块功能的由来，方案思考，实现细节。 后端源码：https://github.com/zongzibinbin/MallChat 前端源码：https://github.com/Evansy/MallChatWeb 如果你做出了自己的项目，或者拿去面试整理了相关面经。一定要记得和阿斌反馈，会根据情况给予丰厚奖励。 优秀成品项目：项目1，项目2 面经：看语雀目录最底部\n\n导读 如果你已经工作了，想快速看抹茶的亮点，希望能套到自己的项目，看最佳实践目录即可。以及IM顶层设计。 如果你希望从0到1了解抹茶。建议搭配视频。然后看从0到1章节（按照顺序看） 大从0到1开发抹茶项目项目整体介绍[必读从0到1开发抹茶WEBSOCKET奠块IM顶层设计联系人模块用户模块消息模块 image.png\n\n遇到问题，一定记得先看问题汇总",normalizedContent:"项目整体介绍【必读】 大家好，我是阿斌，首先欢迎大家加入知识星球，一起见证【抹茶】的迭代和成长，在这里，你可以 1 推荐你作为练手，自己从零到一开复刻这个项目，才能更加了解其中细节（在星球记录过程，最终完成有奖励） 2 也可以发现项目任何可优化的点，联系阿斌，确认后可帮助优化，成为抹茶的contributor，或接下星球发布的功能开发任务。 3 或者是你只想了解每块业务的细节，复用到工作中。项目文档会详细介绍每块功能的由来，方案思考，实现细节。 后端源码：https://github.com/zongzibinbin/mallchat 前端源码：https://github.com/evansy/mallchatweb 如果你做出了自己的项目，或者拿去面试整理了相关面经。一定要记得和阿斌反馈，会根据情况给予丰厚奖励。 优秀成品项目：项目1，项目2 面经：看语雀目录最底部\n\n导读 如果你已经工作了，想快速看抹茶的亮点，希望能套到自己的项目，看最佳实践目录即可。以及im顶层设计。 如果你希望从0到1了解抹茶。建议搭配视频。然后看从0到1章节（按照顺序看） 大从0到1开发抹茶项目项目整体介绍[必读从0到1开发抹茶websocket奠块im顶层设计联系人模块用户模块消息模块 image.png\n\n遇到问题，一定记得先看问题汇总",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701323023e3},{title:"字符流",frontmatter:{title:"字符流",autoSort:8e3},regularPath:"/zs-se/io/3%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81.html",relativePath:"zs-se/io/3、字符流.md",key:"v-c27a070e",path:"/zs-se/io/3%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81.html",headers:[{level:2,title:"3.1 字符输入流【Reader】",slug:"_3-1-字符输入流【reader】",normalizedTitle:"3.1 字符输入流【reader】",charIndex:127},{level:2,title:"3.2 FileReader类",slug:"_3-2-filereader类",normalizedTitle:"3.2 filereader类",charIndex:368},{level:3,title:"构造方法",slug:"构造方法",normalizedTitle:"构造方法",charIndex:566},{level:3,title:"读取字符数据",slug:"读取字符数据",normalizedTitle:"读取字符数据",charIndex:1055},{level:2,title:"3.3 字符输出流【Writer】",slug:"_3-3-字符输出流【writer】",normalizedTitle:"3.3 字符输出流【writer】",charIndex:2527},{level:2,title:"3.4 FileWriter类",slug:"_3-4-filewriter类",normalizedTitle:"3.4 filewriter类",charIndex:2934},{level:3,title:"构造方法",slug:"构造方法-2",normalizedTitle:"构造方法",charIndex:566},{level:3,title:"基本写出数据",slug:"基本写出数据",normalizedTitle:"基本写出数据",charIndex:3505},{level:3,title:"关闭和刷新",slug:"关闭和刷新",normalizedTitle:"关闭和刷新",charIndex:4124},{level:3,title:"写出其他数据",slug:"写出其他数据",normalizedTitle:"写出其他数据",charIndex:4835}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"3.1 字符输入流【Reader】 3.2 FileReader类 构造方法 读取字符数据 3.3 字符输出流【Writer】 3.4 FileWriter类 构造方法 基本写出数据 关闭和刷新 写出其他数据",content:'# 3. 字符流\n\n\n\n\n\n\n\n\n\n当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。\n\n\n# 3.1 字符输入流【Reader】\n\n\n\n\n\njava.io.Reader抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。\n\n * public void close() ：关闭此流并释放与此流相关联的任何系统资源。\n * public int read()： 从输入流读取一个字符。\n * public int read(char[] cbuf)： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。\n\n\n# 3.2 FileReader类\n\n\n\n\n\n\n\njava.io.FileReader类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n> 小贴士：\n> \n>  1. 字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。\n>     \n>     idea中UTF-8\n> \n>  2. 字节缓冲区：一个字节数组，用来临时存储字节数据。\n\n\n# 构造方法\n\n * FileReader(File file)： 创建一个新的 FileReader ，给定要读取的File对象。\n * FileReader(String fileName)： 创建一个新的 FileReader ，给定要读取的文件的名称。\n\n当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。\n\n * 构造举例，代码如下：\n\npublic class FileReaderConstructor throws IOException{\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File("a.txt");\n        FileReader fr = new FileReader(file);\n      \n        // 使用文件名称创建流对象\n        FileReader fr = new FileReader("b.txt");\n    }\n}\n\n\n\n# 读取字符数据\n\n 1. 读取字符：read方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回-1，循环读取，代码使用演示：\n\npublic class FRRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader("read.txt");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fr.read())!=-1) {\n            System.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n黑\n马\n程\n序\n员\n\n\n\n\n> 小贴士：虽然读取了一个字符，但是会自动提升为int类型。\n\n 2. 使用字符数组读取：read(char[] cbuf)，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回-1 ，\n    \n    代码使用演示：\n\npublic class FRRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader("read.txt");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n         char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf));\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n黑马\n程序\n员序\n\n\n获取有效的字符改进，代码使用演示：\n\npublic class FISRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader("read.txt");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n        char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf,0,len));\n        }\n    \t// 关闭资源\n        fr.close();\n    }\n}\n\n输出结果：\n黑马\n程序\n员\n\n\n\n# 3.3 字符输出流【Writer】\n\njava.io.Writer抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n * void write(int c) 写入单个字符。\n * void write(char[] cbuf)写入字符数组。\n * abstract void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。\n * void write(String str)写入字符串。\n * void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。\n * void flush()刷新该流的缓冲。\n * void close() 关闭此流，但要先刷新它。\n\n\n# 3.4 FileWriter类\n\n\n\n\n\n\n\njava.io.FileWriter类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n\n# 构造方法\n\n * FileWriter(File file)： 创建一个新的 FileWriter，给定要读取的File对象。\n * FileWriter(String fileName)： 创建一个新的 FileWriter，给定要读取的文件的名称。\n\n当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。\n\n * 构造举例，代码如下：\n\npublic class FileWriterConstructor {\n    public static void main(String[] args) throws IOException {\n   \t \t// 使用File对象创建流对象\n        File file = new File("a.txt");\n        FileWriter fw = new FileWriter(file);\n      \n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter("b.txt");\n    }\n}\n\n\n\n# 基本写出数据\n\n写出字符：write(int b) 方法，每次可以写出一个字符数据，代码使用演示：\n\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter("fw.txt");     \n      \t// 写出数据\n      \tfw.write(97); // 写出第1个字符\n      \tfw.write(\'b\'); // 写出第2个字符\n      \tfw.write(\'C\'); // 写出第3个字符\n      \tfw.write(30000); // 写出第4个字符，中文编码表中30000对应一个汉字。\n      \n      \t/*\n        【注意】关闭资源时,与FileOutputStream不同。\n      \t 如果不关闭,数据只是保存到缓冲区，并未保存到文件。\n        */\n        // fw.close();\n    }\n}\n输出结果：\nabC田\n\n\n> 小贴士：\n> \n>  1. 虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。\n>  2. 未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。\n\n\n# 关闭和刷新\n\n\n\n因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush 方法了。\n\n * flush ：刷新缓冲区，流对象可以继续使用。\n * close:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。\n\n代码使用演示：\n\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter("fw.txt");\n        // 写出数据，通过flush\n        fw.write(\'刷\'); // 写出第1个字符\n        fw.flush();\n        fw.write(\'新\'); // 继续写出第2个字符，写出成功\n        fw.flush();\n      \n      \t// 写出数据，通过close\n        fw.write(\'关\'); // 写出第1个字符\n        fw.close();\n        fw.write(\'闭\'); // 继续写出第2个字符,【报错】java.io.IOException: Stream closed\n        fw.close();\n    }\n}\n\n\n> 小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。\n\n\n# 写出其他数据\n\n 1. 写出字符数组 ：write(char[] cbuf) 和 write(char[] cbuf, int off, int len) ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：\n\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter("fw.txt");     \n      \t// 字符串转换为字节数组\n      \tchar[] chars = "黑马程序员".toCharArray();\n      \n      \t// 写出字符数组\n      \tfw.write(chars); // 黑马程序员\n        \n\t\t// 写出从索引2开始，2个字节。索引2是\'程\'，两个字节，也就是\'程序\'。\n        fw.write(b,2,2); // 程序\n      \n      \t// 关闭资源\n        fos.close();\n    }\n}\n\n\n 2. 写出字符串：write(String str) 和 write(String str, int off, int len) ，每次可以写出字符串中的数据，更为方便，代码使用演示：\n\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter("fw.txt");     \n      \t// 字符串\n      \tString msg = "黑马程序员";\n      \n      \t// 写出字符数组\n      \tfw.write(msg); //黑马程序员\n      \n\t\t// 写出从索引2开始，2个字节。索引2是\'程\'，两个字节，也就是\'程序\'。\n        fw.write(msg,2,2);\t// 程序\n      \t\n        // 关闭资源\n        fos.close();\n    }\n}\n\n\n 3. 续写和换行：操作类似于FileOutputStream。\n\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象，可以续写数据\n        FileWriter fw = new FileWriter("fw.txt"，true);     \n      \t// 写出字符串\n        fw.write("黑马");\n      \t// 写出换行\n      \tfw.write("\\r\\n");\n      \t// 写出字符串\n  \t\tfw.write("程序员");\n      \t// 关闭资源\n        fw.close();\n    }\n}\n输出结果:\n黑马\n程序员\n\n\n> 小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。\n> \n> 当我们单纯读或者写文本文件时 使用字符流 其他情况使用字节流',normalizedContent:'# 3. 字符流\n\n\n\n\n\n\n\n\n\n当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。\n\n\n# 3.1 字符输入流【reader】\n\n\n\n\n\njava.io.reader抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。\n\n * public void close() ：关闭此流并释放与此流相关联的任何系统资源。\n * public int read()： 从输入流读取一个字符。\n * public int read(char[] cbuf)： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。\n\n\n# 3.2 filereader类\n\n\n\n\n\n\n\njava.io.filereader类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n> 小贴士：\n> \n>  1. 字符编码：字节与字符的对应规则。windows系统的中文编码默认是gbk编码表。\n>     \n>     idea中utf-8\n> \n>  2. 字节缓冲区：一个字节数组，用来临时存储字节数据。\n\n\n# 构造方法\n\n * filereader(file file)： 创建一个新的 filereader ，给定要读取的file对象。\n * filereader(string filename)： 创建一个新的 filereader ，给定要读取的文件的名称。\n\n当你创建一个流对象时，必须传入一个文件路径。类似于fileinputstream 。\n\n * 构造举例，代码如下：\n\npublic class filereaderconstructor throws ioexception{\n    public static void main(string[] args) {\n   \t \t// 使用file对象创建流对象\n        file file = new file("a.txt");\n        filereader fr = new filereader(file);\n      \n        // 使用文件名称创建流对象\n        filereader fr = new filereader("b.txt");\n    }\n}\n\n\n\n# 读取字符数据\n\n 1. 读取字符：read方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回-1，循环读取，代码使用演示：\n\npublic class frread {\n    public static void main(string[] args) throws ioexception {\n      \t// 使用文件名称创建流对象\n       \tfilereader fr = new filereader("read.txt");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fr.read())!=-1) {\n            system.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n黑\n马\n程\n序\n员\n\n\n\n\n> 小贴士：虽然读取了一个字符，但是会自动提升为int类型。\n\n 2. 使用字符数组读取：read(char[] cbuf)，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回-1 ，\n    \n    代码使用演示：\n\npublic class frread {\n    public static void main(string[] args) throws ioexception {\n      \t// 使用文件名称创建流对象\n       \tfilereader fr = new filereader("read.txt");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n         char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            system.out.println(new string(cbuf));\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n黑马\n程序\n员序\n\n\n获取有效的字符改进，代码使用演示：\n\npublic class fisread {\n    public static void main(string[] args) throws ioexception {\n      \t// 使用文件名称创建流对象\n       \tfilereader fr = new filereader("read.txt");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n        char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            system.out.println(new string(cbuf,0,len));\n        }\n    \t// 关闭资源\n        fr.close();\n    }\n}\n\n输出结果：\n黑马\n程序\n员\n\n\n\n# 3.3 字符输出流【writer】\n\njava.io.writer抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n * void write(int c) 写入单个字符。\n * void write(char[] cbuf)写入字符数组。\n * abstract void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。\n * void write(string str)写入字符串。\n * void write(string str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。\n * void flush()刷新该流的缓冲。\n * void close() 关闭此流，但要先刷新它。\n\n\n# 3.4 filewriter类\n\n\n\n\n\n\n\njava.io.filewriter类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n\n# 构造方法\n\n * filewriter(file file)： 创建一个新的 filewriter，给定要读取的file对象。\n * filewriter(string filename)： 创建一个新的 filewriter，给定要读取的文件的名称。\n\n当你创建一个流对象时，必须传入一个文件路径，类似于fileoutputstream。\n\n * 构造举例，代码如下：\n\npublic class filewriterconstructor {\n    public static void main(string[] args) throws ioexception {\n   \t \t// 使用file对象创建流对象\n        file file = new file("a.txt");\n        filewriter fw = new filewriter(file);\n      \n        // 使用文件名称创建流对象\n        filewriter fw = new filewriter("b.txt");\n    }\n}\n\n\n\n# 基本写出数据\n\n写出字符：write(int b) 方法，每次可以写出一个字符数据，代码使用演示：\n\npublic class fwwrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        filewriter fw = new filewriter("fw.txt");     \n      \t// 写出数据\n      \tfw.write(97); // 写出第1个字符\n      \tfw.write(\'b\'); // 写出第2个字符\n      \tfw.write(\'c\'); // 写出第3个字符\n      \tfw.write(30000); // 写出第4个字符，中文编码表中30000对应一个汉字。\n      \n      \t/*\n        【注意】关闭资源时,与fileoutputstream不同。\n      \t 如果不关闭,数据只是保存到缓冲区，并未保存到文件。\n        */\n        // fw.close();\n    }\n}\n输出结果：\nabc田\n\n\n> 小贴士：\n> \n>  1. 虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。\n>  2. 未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。\n\n\n# 关闭和刷新\n\n\n\n因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush 方法了。\n\n * flush ：刷新缓冲区，流对象可以继续使用。\n * close:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。\n\n代码使用演示：\n\npublic class fwwrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        filewriter fw = new filewriter("fw.txt");\n        // 写出数据，通过flush\n        fw.write(\'刷\'); // 写出第1个字符\n        fw.flush();\n        fw.write(\'新\'); // 继续写出第2个字符，写出成功\n        fw.flush();\n      \n      \t// 写出数据，通过close\n        fw.write(\'关\'); // 写出第1个字符\n        fw.close();\n        fw.write(\'闭\'); // 继续写出第2个字符,【报错】java.io.ioexception: stream closed\n        fw.close();\n    }\n}\n\n\n> 小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。\n\n\n# 写出其他数据\n\n 1. 写出字符数组 ：write(char[] cbuf) 和 write(char[] cbuf, int off, int len) ，每次可以写出字符数组中的数据，用法类似fileoutputstream，代码使用演示：\n\npublic class fwwrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        filewriter fw = new filewriter("fw.txt");     \n      \t// 字符串转换为字节数组\n      \tchar[] chars = "黑马程序员".tochararray();\n      \n      \t// 写出字符数组\n      \tfw.write(chars); // 黑马程序员\n        \n\t\t// 写出从索引2开始，2个字节。索引2是\'程\'，两个字节，也就是\'程序\'。\n        fw.write(b,2,2); // 程序\n      \n      \t// 关闭资源\n        fos.close();\n    }\n}\n\n\n 2. 写出字符串：write(string str) 和 write(string str, int off, int len) ，每次可以写出字符串中的数据，更为方便，代码使用演示：\n\npublic class fwwrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        filewriter fw = new filewriter("fw.txt");     \n      \t// 字符串\n      \tstring msg = "黑马程序员";\n      \n      \t// 写出字符数组\n      \tfw.write(msg); //黑马程序员\n      \n\t\t// 写出从索引2开始，2个字节。索引2是\'程\'，两个字节，也就是\'程序\'。\n        fw.write(msg,2,2);\t// 程序\n      \t\n        // 关闭资源\n        fos.close();\n    }\n}\n\n\n 3. 续写和换行：操作类似于fileoutputstream。\n\npublic class fwwrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象，可以续写数据\n        filewriter fw = new filewriter("fw.txt"，true);     \n      \t// 写出字符串\n        fw.write("黑马");\n      \t// 写出换行\n      \tfw.write("\\r\\n");\n      \t// 写出字符串\n  \t\tfw.write("程序员");\n      \t// 关闭资源\n        fw.close();\n    }\n}\n输出结果:\n黑马\n程序员\n\n\n> 小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。\n> \n> 当我们单纯读或者写文本文件时 使用字符流 其他情况使用字节流',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"配置--1.过滤器工厂",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--1.%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82.html",relativePath:"zs-ee-框架/cloud-gateway/配置--1.过滤器工厂.md",key:"v-ba0a6e80",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--1.%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82.html",headers:[{level:2,title:"内置过滤器工厂",slug:"内置过滤器工厂",normalizedTitle:"内置过滤器工厂",charIndex:130},{level:2,title:"常用的内置工厂",slug:"常用的内置工厂",normalizedTitle:"常用的内置工厂",charIndex:14634},{level:3,title:"1、添加Header",slug:"_1、添加header",normalizedTitle:"1、添加header",charIndex:14646},{level:3,title:"2、添加参数",slug:"_2、添加参数",normalizedTitle:"2、添加参数",charIndex:15388},{level:3,title:"3、添加前缀",slug:"_3、添加前缀",normalizedTitle:"3、添加前缀",charIndex:16075},{level:3,title:"4、重定向",slug:"_4、重定向",normalizedTitle:"4、重定向",charIndex:16350},{level:3,title:"5、路径截取",slug:"_5、路径截取",normalizedTitle:"5、路径截取",charIndex:16620},{level:2,title:"自定义过滤器工厂",slug:"自定义过滤器工厂",normalizedTitle:"自定义过滤器工厂",charIndex:16939}],lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:"内置过滤器工厂 常用的内置工厂 1、添加Header 2、添加参数 3、添加前缀 4、重定向 5、路径截取 自定义过滤器工厂",content:'# 配置--1.过滤器工厂\n\nhttps://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-stripprefix-gatewayfilter-factory\n\n\n# 内置过滤器工厂\n\n这里简单将Spring Cloud Gateway内置的所有过滤器工厂整理成了一张表格。如下：\n\n过滤器工厂                         作用                                                             参数\nAddRequestHeader              为原始请求添加Header                                                  Header的名称及值\nAddRequestParameter           为原始请求添加请求参数                                                    参数名称及值\nAddResponseHeader             为原始响应添加Header                                                  Header的名称及值\nDedupeResponseHeader          剔除响应头中重复的值                                                     需要去重的Header名称及去重策略\nHystrix                       为路由引入Hystrix的断路器保护                                             HystrixCommand的名称\nFallbackHeaders               为fallbackUri的请求头中添加具体的异常信息                                     Header的名称\nPrefixPath                    为原始请求路径添加前缀                                                    前缀路径\nPreserveHostHeader            为请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host   无\nRequestRateLimiter            用于对请求限流，限流算法为令牌桶                                               keyResolver、rateLimiter、statusCode、denyEmptyKey、emptyKeyStatus\nRedirectTo                    将原始请求重定向到指定的URL                                                http状态码及重定向的url\nRemoveHopByHopHeadersFilter   为原始请求删除IETF组织规定的一系列Header                                      默认就会启用，可以通过配置指定仅删除哪些Header\nRemoveRequestHeader           为原始请求删除某个Header                                                Header名称\nRemoveResponseHeader          为原始响应删除某个Header                                                Header名称\nRewritePath                   重写原始的请求路径                                                      原始路径正则表达式以及重写后路径的正则表达式\nRewriteResponseHeader         重写原始响应中的某个Header                                               Header名称，值的正则表达式，重写后的值\nSaveSession                   在转发请求之前，强制执行WebSession::save操作                                 无\nsecureHeaders                 为原始响应添加一系列起安全作用的响应头                                            无，支持修改这些安全响应头的值\nSetPath                       修改原始的请求路径                                                      修改后的路径\nSetResponseHeader             修改原始响应中某个Header的值                                              Header名称，修改后的值\nSetStatus                     修改原始响应的状态码                                                     HTTP 状态码，可以是数字，也可以是字符串\nStripPrefix                   用于截断原始请求的路径                                                    使用数字表示要截断的路径的数量\nRetry                         针对不同的响应进行重试                                                    retries、statuses、methods、series\nRequestSize                   设置允许接收最大请求包的大小。如果请求包大小超过设置的值，则返回 413 Payload Too Large         请求包大小，单位为字节，默认值为5M\nModifyRequestBody             在转发请求之前修改原始请求体内容                                               修改后的请求体内容\nModifyResponseBody            修改原始响应体的内容                                                     修改后的响应体内容\nDefault                       为所有路由添加过滤器                                                     过滤器工厂名称及值\n\n**Tips：**每个过滤器工厂都对应一个实现类，并且这些类的名称必须以GatewayFilterFactory结尾，这是Spring Cloud Gateway的一个约定，例如AddRequestHeader对应的实现类为AddRequestHeaderGatewayFilterFactory。\n\n# 1、AddRequestHeader\n\n为原始请求添加Header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n        uri: https://example.org\n        filters:\n        - AddRequestHeader=X-Request-Foo, Bar\n\n\n为原始请求添加名为 X-Request-Foo ，值为 Bar 的请求头\n\n# 2、AddRequestParameter\n\n为原始请求添加请求参数及值，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_parameter_route\n        uri: https://example.org\n        filters:\n        - AddRequestParameter=foo, bar\n\n\n为原始请求添加名为foo，值为bar的参数，即：foo=bar\n\n# 3、AddResponseHeader\n\n为原始响应添加Header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_response_header_route\n        uri: https://example.org\n        filters:\n        - AddResponseHeader=X-Response-Foo, Bar\n\n\n为原始响应添加名为 X-Request-Foo ，值为 Bar 的响应头\n\n# 4、DedupeResponseHeader\n\nDedupeResponseHeader可以根据配置的Header名称及去重策略剔除响应头中重复的值，这是Spring Cloud Greenwich SR2提供的新特性，低于这个版本无法使用。\n\n我们在Gateway以及微服务上都设置了CORS（解决跨域）Header的话，如果不做任何配置，那么请求 -> 网关 -> 微服务，获得的CORS Header的值，就将会是这样的：\n\nAccess-Control-Allow-Credentials: true, true\nAccess-Control-Allow-Origin: https://musk.mars, https://musk.mars\n\n\n可以看到这两个Header的值都重复了，若想把这两个Header的值去重的话，就需要使用到DedupeResponseHeader，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: dedupe_response_header_route\n        uri: https://example.org\n        filters:\n        # 若需要去重的Header有多个，使用空格分隔\n        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin\n\n\n去重策略：\n\n * RETAIN_FIRST：默认值，保留第一个值\n * RETAIN_LAST：保留最后一个值\n * RETAIN_UNIQUE：保留所有唯一值，以它们第一次出现的顺序保留\n\n若想对该过滤器工厂有个比较全面的了解的话，建议阅读该过滤器工厂的源码，因为源码里有详细的注释及示例，比官方文档写得还好：org.springframework.cloud.gateway.filter.factory.DedupeResponseHeaderGatewayFilterFactory\n\n# 5、Hystrix\n\n为路由引入Hystrix的断路器保护，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: hystrix_route\n        uri: https://example.org\n        filters:\n        - Hystrix=myCommandName\n\n\nHystrix是Spring Cloud第一代容错组件，不过已经进入维护模式，未来Hystrix会被Spring Cloud移除掉，取而代之的是Alibaba Sentinel/Resilience4J。所以本文不做详细介绍了，感兴趣的话可以参考官方文档：\n\n * Hystrix GatewayFilter Factory\n\n# 6、FallbackHeaders\n\n同样是对Hystrix的支持，上一小节所介绍的过滤器工厂支持一个配置参数：fallbackUri，该配置用于当发生异常时将请求转发到一个特定的uri上。而FallbackHeaders这个过滤工厂可以在转发请求到该uri时添加一个Header，这个Header的值为具体的异常信息。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: ingredients\n        uri: lb://ingredients\n        predicates:\n        - Path=//ingredients/**\n        filters:\n        - name: Hystrix\n          args:\n            name: fetchIngredients\n            fallbackUri: forward:/fallback\n      - id: ingredients-fallback\n        uri: http://localhost:9994\n        predicates:\n        - Path=/fallback\n        filters:\n        - name: FallbackHeaders\n          args:\n            executionExceptionTypeHeaderName: Test-Header\n\n\n这里也不做详细介绍了，感兴趣可以参考官方文档：\n\n * FallbackHeaders GatewayFilter Factory\n\n# 7、PrefixPath\n\n为原始的请求路径添加一个前缀路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: prefixpath_route\n        uri: https://example.org\n        filters:\n        - PrefixPath=/mypath\n\n\n该配置使访问${GATEWAY_URL}/hello 会转发到https://example.org/mypath/hello\n\n# 8、PreserveHostHeader\n\n为请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host Header。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: preserve_host_route\n        uri: https://example.org\n        filters:\n        - PreserveHostHeader\n\n\n如果不设置，那么名为 Host 的Header将由Http Client控制\n\n# 9、RequestRateLimiter\n\n用于对请求进行限流，限流算法为令牌桶。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: requestratelimiter_route\n        uri: https://example.org\n        filters:\n        - name: RequestRateLimiter\n          args:\n            redis-rate-limiter.replenishRate: 10\n            redis-rate-limiter.burstCapacity: 20\n\n\n由于另一篇文章中已经介绍过如何使用该过滤器工厂实现网关限流，所以这里就不再赘述了：\n\n * Spring Cloud Gateway - 扩展\n\n或者参考官方文档：\n\n * RequestRateLimiter GatewayFilter Factory\n\n# 10、RedirectTo\n\n将原始请求重定向到指定的Url，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: redirect_route\n        uri: https://example.org\n        filters:\n        - RedirectTo=302, https://acme.org\n\n\n该配置使访问 ${GATEWAY_URL}/hello 会被重定向到 https://acme.org/hello ，并且携带一个 Location:http://acme.org 的Header，而返回客户端的HTTP状态码为302\n\n注意事项：\n\n * HTTP状态码应为3xx，例如301\n * URL必须是合法的URL，该URL会作为Location Header的值\n\n# 11、RemoveHopByHopHeadersFilter\n\n为原始请求删除IETF组织规定的一系列Header，默认删除的Header如下：\n\n * Connection\n * Keep-Alive\n * Proxy-Authenticate\n * Proxy-Authorization\n * TE\n * Trailer\n * Transfer-Encoding\n * Upgrade\n\n可以通过配置去指定仅删除哪些Header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      filter:\n        remove-hop-by-hop:\n          # 多个Header使用逗号（,）分隔\n          headers: Connection,Keep-Alive\n\n\n# 12、RemoveRequestHeader\n\n为原始请求删除某个Header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: removerequestheader_route\n        uri: https://example.org\n        filters:\n        - RemoveRequestHeader=X-Request-Foo\n\n\n删除原始请求中名为 X-Request-Foo 的请求头\n\n# 13、RemoveResponseHeader\n\n为原始响应删除某个Header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: removeresponseheader_route\n        uri: https://example.org\n        filters:\n        - RemoveResponseHeader=X-Response-Foo\n\n\n删除原始响应中名为 X-Request-Foo 的响应头\n\n# 14、RewritePath\n\n通过正则表达式重写原始的请求路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: rewritepath_route\n        uri: https://example.org\n        predicates:\n        - Path=/foo/**\n        filters:\n        # 参数1为原始路径的正则表达式，参数2为重写后路径的正则表达式\n        - RewritePath=/foo/(?<segment>.*), /$\\{segment}\n\n\n\n该配置使得访问 /foo/bar 时，会将路径重写为/bar 再进行转发，也就是会转发到 https://example.org/bar。需要注意的是：由于YAML语法，需用$\\ 替换 $\n\n# 15、RewriteResponseHeader\n\n重写原始响应中的某个Header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: rewriteresponseheader_route\n        uri: https://example.org\n        filters:\n        # 参数1为Header名称，参数2为值的正则表达式，参数3为重写后的值\n        - RewriteResponseHeader=X-Response-Foo, password=[^&]+, password=***\n\n\n\n该配置的意义在于：如果响应头中 X-Response-Foo 的值为/42?user=ford&password=omg!what&flag=true，那么就会被按照配置的值重写成/42?user=ford&password=***&flag=true，也就是把其中的password=omg!what重写成了password=***\n\n# 16、SaveSession\n\n在转发请求之前，强制执行WebSession::save操作，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: save_session\n        uri: https://example.org\n        predicates:\n        - Path=/foo/**\n        filters:\n        - SaveSession\n\n\n\n主要用在那种像 Spring Session 延迟数据存储（数据不是立刻持久化）的，并希望在请求转发前确保session状态保存情况。如果你将Spring Secutiry于Spring Session集成使用，并想确保安全信息都传到下游机器，你就需要配置这个filter。\n\n# 17、secureHeaders\n\nsecureHeaders过滤器工厂主要是参考了这篇博客中的建议，为原始响应添加了一系列起安全作用的响应头。默认会添加如下Headers（包括值）：\n\n * X-Xss-Protection:1; mode=block\n * Strict-Transport-Security:max-age=631138519\n * X-Frame-Options:DENY\n * X-Content-Type-Options:nosniff\n * Referrer-Policy:no-referrer\n * Content-Security-Policy:default-src \'self\' https:; font-src \'self\' https: data:; img-src \'self\' https: data:; object-src \'none\'; script-src https:; style-src \'self\' https: \'unsafe-inline\'\n * X-Download-Options:noopen\n * X-Permitted-Cross-Domain-Policies:none\n\n如果你想修改这些Header的值，那么就需要使用这些Headers对应的后缀，如下：\n\n * xss-protection-header\n * strict-transport-security\n * frame-options\n * content-type-options\n * referrer-policy\n * content-security-policy\n * download-options\n * permitted-cross-domain-policies\n\n配置示例：\n\nspring:\n  cloud:\n    gateway:\n      filter:\n        secure-headers:\n          # 修改 X-Xss-Protection 的值为 2; mode=unblock\n          xss-protection-header: 2; mode=unblock\n\n\n如果想禁用某些Header，可使用如下配置：\n\nspring:\n  cloud:\n    gateway:\n      filter:\n        secure-headers:\n          # 多个使用逗号（,）分隔\n          disable: frame-options,download-options\n\n\n\n# 18、SetPath\n\n修改原始的请求路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: setpath_route\n        uri: https://example.org\n        predicates:\n        - Path=/foo/{segment}\n        filters:\n        - SetPath=/{segment}\n\n\n\n该配置使访问 ${GATEWAY_URL}/foo/bar 时会转发到 https://example.org/bar ，也就是原本的/foo/bar被修改为了/bar\n\n# 19、SetResponseHeader\n\n修改原始响应中某个Header的值，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: setresponseheader_route\n        uri: https://example.org\n        filters:\n        - SetResponseHeader=X-Response-Foo, Bar\n\n\n\n将原始响应中 X-Response-Foo 的值修改为 Bar\n\n# 20、SetStatus\n\n修改原始响应的状态码，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: setstatusstring_route\n        uri: https://example.org\n        filters:\n        # 字符串形式\n        - SetStatus=BAD_REQUEST\n      - id: setstatusint_route\n        uri: https://example.org\n        filters:\n        # 数字形式\n        - SetStatus=401\n\n\nSetStatusd的值可以是数字，也可以是字符串。但一定要是Spring HttpStatus 枚举类中的值。上面这两种配置都可以返回401这个HTTP状态码。\n\n# 21、StripPrefix\n\n用于截断原始请求的路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: nameRoot\n        uri: http://nameservice\n        predicates:\n        - Path=/name/**\n        filters:\n        # 数字表示要截断的路径的数量\n        - StripPrefix=2\n\n\n\n如上配置，如果请求的路径为 /name/bar/foo ，那么则会截断成/foo后进行转发 ，也就是会截断2个路径。\n\n# 22、Retry\n\n针对不同的响应进行重试，例如可以针对HTTP状态码进行重试，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: retry_test\n        uri: http://localhost:8080/flakey\n        predicates:\n        - Host=*.retry.com\n        filters:\n        - name: Retry\n          args:\n            retries: 3\n            statuses: BAD_GATEWAY\n\n\n可配置如下参数：\n\n * retries：重试次数\n * statuses：需要重试的状态码，取值在 org.springframework.http.HttpStatus 中\n * methods：需要重试的请求方法，取值在 org.springframework.http.HttpMethod 中\n * series：HTTP状态码序列，取值在 org.springframework.http.HttpStatus.Series 中\n\n# 23、RequestSize\n\n设置允许接收最大请求包的大小，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: request_size_route\n      uri: http://localhost:8080/upload\n      predicates:\n      - Path=/upload\n      filters:\n      - name: RequestSize\n        args:\n          # 单位为字节\n          maxSize: 5000000\n\n\n\n如果请求包大小超过设置的值，则会返回 413 Payload Too Large以及一个errorMessage\n\n# 24、Modify Request Body\n\n在转发请求之前修改原始请求体内容，该过滤器工厂只能通过代码配置，不支持在配置文件中配置。代码示例：\n\n@Bean\npublic RouteLocator routes(RouteLocatorBuilder builder) {\n    return builder.routes()\n        .route("rewrite_request_obj", r -> r.host("*.rewriterequestobj.org")\n            .filters(f -> f.prefixPath("/httpbin")\n                .modifyRequestBody(String.class, Hello.class, MediaType.APPLICATION_JSON_VALUE,\n                    (exchange, s) -> return Mono.just(new Hello(s.toUpperCase())))).uri(uri))\n        .build();\n}\n \nstatic class Hello {\n    String message;\n \n    public Hello() { }\n \n    public Hello(String message) {\n        this.message = message;\n    }\n \n    public String getMessage() {\n        return message;\n    }\n \n    public void setMessage(String message) {\n        this.message = message;\n    }\n}\n\n\n> Tips：该过滤器工厂处于 BETA 状态，未来API可能会变化，生产环境请慎用\n\n# 25、Modify Response Body\n\n可用于修改原始响应体的内容，该过滤器工厂同样只能通过代码配置，不支持在配置文件中配置。代码示例：\n\n@Bean\npublic RouteLocator routes(RouteLocatorBuilder builder) {\n    return builder.routes()\n        .route("rewrite_response_upper", r -> r.host("*.rewriteresponseupper.org")\n            .filters(f -> f.prefixPath("/httpbin")\n                .modifyResponseBody(String.class, String.class,\n                    (exchange, s) -> Mono.just(s.toUpperCase()))).uri(uri)\n        .build();\n}\n\n\n\n> Tips：该过滤器工厂处于 BETA 状态，未来API可能会变化，生产环境请慎用\n\n# 26、Default\n\nDefault Filters用于为所有路由添加过滤器工厂，也就是说通过Default Filter所配置的过滤器工厂会作用到所有的路由上。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      default-filters:\n      - AddResponseHeader=X-Response-Default-Foo, Default-Bar\n      - PrefixPath=/httpbin\n\n\n----------------------------------------\n\n官方文档：\n\n * GatewayFilter Factories\n\n\n# 常用的内置工厂\n\n\n# 1、添加Header\n\nAddRequestHeader GatewayFilter工厂接受一个名称和值参数。下面的示例配置一个AddRequestHeader GatewayFilter\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n        uri: https://example.org\n        filters:\n        - AddRequestHeader=X-Request-red, blue\n\n\nAddRequestHeader知道用于匹配路径或主机的URI变量。URI变量可以在值中使用，并在运行时展开。下面的例子配置了一个使用变量的AddRequestHeader GatewayFilter\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n        uri: https://example.org\n        predicates:\n        - Path=/red/{segment}\n        filters:\n        - AddRequestHeader=X-Request-Red, Blue-{segment}\n\n\n@RequestMapping("/header")\npublic String header(@RequestHeader("X-Request-color") String  color) {\n    return color;\n}\n\n\n\n# 2、添加参数\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_parameter_route\n        uri: https://example.org\n        filters:\n        - AddRequestParameter=red, blue\n\n\n这将为所有匹配请求的下游请求的查询字符串添加red=blue\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_parameter_route\n        uri: https://example.org\n        predicates:\n        - Host: {segment}.myhost.org\n        filters:\n        - AddRequestParameter=foo, bar-{segment}\n\n\nAddRequestParameter知道用于匹配路径或主机的URI变量。URI变量可以在值中使用，并在运行时展开。下面的示例配置一个使用变量的AddRequestParameter GatewayFilter\n\n@RequestMapping("/addRequestParam")\npublic String header(@RequestParam("color") String  color) {\n    return color;\n}\n\n\n\n# 3、添加前缀\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: prefixpath_route\n        uri: https://example.org\n        filters:\n        - PrefixPath=/mypath\n\n\nThis prefixes /mypath to the path of all matching requests. So a request to /hello is sent to /mypath/hello.\n\n\n# 4、重定向\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: prefixpath_route\n        uri: https://example.org\n        filters:\n        - RedirectTo=302, https://acme.org\n\n\nThis will send a status 302 with a Location:https://acme.org header to perform a redirect.\n\n\n# 5、路径截取\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: nameRoot\n        uri: https://nameservice\n        predicates:\n        - Path=/name/**\n        filters:\n        - StripPrefix=2\n\n\nWhen a request is made through the gateway to /name/blue/red, the request made to nameservice looks like nameservice/red.\n\n\n# 自定义过滤器工厂\n\n * 继承 AbstractGatewayFilterFactory 类\n * 重写 apply 方法的逻辑\n * 命名需要以 GatewayFilterFactory 结尾\n\n@Slf4j\n@Component\npublic class AccessAuthGatewayFilterFactory extends AbstractGatewayFilterFactory<AccessAuthGatewayFilterFactory.Config> {\n \n    public static final String WARNING_MSG = "访问未授权";\n \n    public AccessAuthGatewayFilterFactory(){\n        super(AccessAuthGatewayFilterFactory.Config.class);\n        log.info("Loaded GatewayFilterFactory [AccessAuth]");\n    }\n@Override\npublic List<String> shortcutFieldOrder() {\nreturn Arrays.asList("name");\n} \n \n    @Override\n    public GatewayFilter apply(Config config) {\n \n        return (exchange, chain) -> {\n            ServerHttpRequest request = exchange.getRequest();\n            ServerHttpResponse response = exchange.getResponse();\n            if(config.name.equals("zhangsan")) {\n                return chain.filter(exchange.mutate().request(request).build());\n            } else {\n \n                byte[] bits = WARNING_MSG.getBytes(StandardCharsets.UTF_8);\n                DataBuffer buffer = response.bufferFactory().wrap(bits);\n                //指定编码，否则在浏览器中会中文乱码\n                response.getHeaders().add("Content-Type", "text/plain;charset=UTF-8");\n                return response.writeWith(Mono.just(buffer));\n            }\n        };\n \n    }\n \n    public static class Config {\n \n        private String name;\n \n        public void setName(String name) {\n            this.name = name;\n        }\n \n        public String getName() {\n            return name;\n        }\n    }\n}\n\n\n修改service-gateway服务application.yml配置文件的路由配置，如下：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: hello\n        predicates:   #断言\n        - Path=/hello\n        uri: http://localhost:8080  #目标服务地址\n        filters:\n        - AccessAuth=lisi\n\n\n启动服务，在浏览器访问在浏览器访问http://localhost/hello?name=xiaoming,返回如下：\n\n访问未授权\n\n\n若将service-gateway服务application.yml配置文件的路由配置修改，如下：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: hello\n        predicates:   #断言\n        - Path=/hello\n        uri: http://localhost:8080  #目标服务地址\n        filters:\n        - AccessAuth=zhangsan\n\n\n重新启动服务，从浏览器再次访问http://localhost/hello?name=xiaoming，返回如下：\n\nhello, xiaoming, 我是服务提供者:端口为：8080\n\n\npackage org.springframework.cloud.gateway.filter.factory;\n\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.cloud.gateway.filter.GatewayFilter;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.support.HttpStatusHolder;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.server.reactive.ServerHttpResponse;\nimport org.springframework.util.Assert;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport static org.springframework.cloud.gateway.support.GatewayToStringStyler.filterToStringCreator;\nimport static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.setResponseStatus;\n\n/**\n * @author Spencer Gibb\n */\npublic class RedirectToGatewayFilterFactory\n\t\textends AbstractGatewayFilterFactory<RedirectToGatewayFilterFactory.Config> {\n\n\t/**\n\t * Status key.\n\t */\n\tpublic static final String STATUS_KEY = "status";\n\n\t/**\n\t * URL key.\n\t */\n\tpublic static final String URL_KEY = "url";\n\n\tpublic RedirectToGatewayFilterFactory() {\n\t\tsuper(Config.class);\n\t}\n\n\t@Override\n\tpublic List<String> shortcutFieldOrder() {\n\t\treturn Arrays.asList(STATUS_KEY, URL_KEY);\n\t}\n\n\t@Override\n\tpublic GatewayFilter apply(Config config) {\n\t\treturn apply(config.status, config.url);\n\t}\n\n\tpublic GatewayFilter apply(String statusString, String urlString) {\n\t\tHttpStatusHolder httpStatus = HttpStatusHolder.parse(statusString);\n\t\tAssert.isTrue(httpStatus.is3xxRedirection(),\n\t\t\t\t"status must be a 3xx code, but was " + statusString);\n\t\tfinal URI url = URI.create(urlString);\n\t\treturn apply(httpStatus, url);\n\t}\n\n\tpublic GatewayFilter apply(HttpStatus httpStatus, URI uri) {\n\t\treturn apply(new HttpStatusHolder(httpStatus, null), uri);\n\t}\n\n\tpublic GatewayFilter apply(HttpStatusHolder httpStatus, URI uri) {\n\t\treturn new GatewayFilter() {\n\t\t\t@Override\n\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange,\n\t\t\t\t\tGatewayFilterChain chain) {\n\t\t\t\tif (!exchange.getResponse().isCommitted()) {\n\t\t\t\t\tsetResponseStatus(exchange, httpStatus);\n\n\t\t\t\t\tfinal ServerHttpResponse response = exchange.getResponse();\n\t\t\t\t\tresponse.getHeaders().set(HttpHeaders.LOCATION, uri.toString());\n\t\t\t\t\treturn response.setComplete();\n\t\t\t\t}\n\t\t\t\treturn Mono.empty();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\tString status;\n\t\t\t\tif (httpStatus.getHttpStatus() != null) {\n\t\t\t\t\tstatus = String.valueOf(httpStatus.getHttpStatus().value());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstatus = httpStatus.getStatus().toString();\n\t\t\t\t}\n\t\t\t\treturn filterToStringCreator(RedirectToGatewayFilterFactory.this)\n\t\t\t\t\t\t.append(status, uri).toString();\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic static class Config {\n\n\t\tString status;\n\n\t\tString url;\n\n\t\tpublic String getStatus() {\n\t\t\treturn status;\n\t\t}\n\n\t\tpublic void setStatus(String status) {\n\t\t\tthis.status = status;\n\t\t}\n\n\t\tpublic String getUrl() {\n\t\t\treturn url;\n\t\t}\n\n\t\tpublic void setUrl(String url) {\n\t\t\tthis.url = url;\n\t\t}\n\n\t}\n\n}\n',normalizedContent:'# 配置--1.过滤器工厂\n\nhttps://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-stripprefix-gatewayfilter-factory\n\n\n# 内置过滤器工厂\n\n这里简单将spring cloud gateway内置的所有过滤器工厂整理成了一张表格。如下：\n\n过滤器工厂                         作用                                                             参数\naddrequestheader              为原始请求添加header                                                  header的名称及值\naddrequestparameter           为原始请求添加请求参数                                                    参数名称及值\naddresponseheader             为原始响应添加header                                                  header的名称及值\ndeduperesponseheader          剔除响应头中重复的值                                                     需要去重的header名称及去重策略\nhystrix                       为路由引入hystrix的断路器保护                                             hystrixcommand的名称\nfallbackheaders               为fallbackuri的请求头中添加具体的异常信息                                     header的名称\nprefixpath                    为原始请求路径添加前缀                                                    前缀路径\npreservehostheader            为请求添加一个preservehostheader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的host   无\nrequestratelimiter            用于对请求限流，限流算法为令牌桶                                               keyresolver、ratelimiter、statuscode、denyemptykey、emptykeystatus\nredirectto                    将原始请求重定向到指定的url                                                http状态码及重定向的url\nremovehopbyhopheadersfilter   为原始请求删除ietf组织规定的一系列header                                      默认就会启用，可以通过配置指定仅删除哪些header\nremoverequestheader           为原始请求删除某个header                                                header名称\nremoveresponseheader          为原始响应删除某个header                                                header名称\nrewritepath                   重写原始的请求路径                                                      原始路径正则表达式以及重写后路径的正则表达式\nrewriteresponseheader         重写原始响应中的某个header                                               header名称，值的正则表达式，重写后的值\nsavesession                   在转发请求之前，强制执行websession::save操作                                 无\nsecureheaders                 为原始响应添加一系列起安全作用的响应头                                            无，支持修改这些安全响应头的值\nsetpath                       修改原始的请求路径                                                      修改后的路径\nsetresponseheader             修改原始响应中某个header的值                                              header名称，修改后的值\nsetstatus                     修改原始响应的状态码                                                     http 状态码，可以是数字，也可以是字符串\nstripprefix                   用于截断原始请求的路径                                                    使用数字表示要截断的路径的数量\nretry                         针对不同的响应进行重试                                                    retries、statuses、methods、series\nrequestsize                   设置允许接收最大请求包的大小。如果请求包大小超过设置的值，则返回 413 payload too large         请求包大小，单位为字节，默认值为5m\nmodifyrequestbody             在转发请求之前修改原始请求体内容                                               修改后的请求体内容\nmodifyresponsebody            修改原始响应体的内容                                                     修改后的响应体内容\ndefault                       为所有路由添加过滤器                                                     过滤器工厂名称及值\n\n**tips：**每个过滤器工厂都对应一个实现类，并且这些类的名称必须以gatewayfilterfactory结尾，这是spring cloud gateway的一个约定，例如addrequestheader对应的实现类为addrequestheadergatewayfilterfactory。\n\n# 1、addrequestheader\n\n为原始请求添加header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n        uri: https://example.org\n        filters:\n        - addrequestheader=x-request-foo, bar\n\n\n为原始请求添加名为 x-request-foo ，值为 bar 的请求头\n\n# 2、addrequestparameter\n\n为原始请求添加请求参数及值，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_parameter_route\n        uri: https://example.org\n        filters:\n        - addrequestparameter=foo, bar\n\n\n为原始请求添加名为foo，值为bar的参数，即：foo=bar\n\n# 3、addresponseheader\n\n为原始响应添加header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_response_header_route\n        uri: https://example.org\n        filters:\n        - addresponseheader=x-response-foo, bar\n\n\n为原始响应添加名为 x-request-foo ，值为 bar 的响应头\n\n# 4、deduperesponseheader\n\ndeduperesponseheader可以根据配置的header名称及去重策略剔除响应头中重复的值，这是spring cloud greenwich sr2提供的新特性，低于这个版本无法使用。\n\n我们在gateway以及微服务上都设置了cors（解决跨域）header的话，如果不做任何配置，那么请求 -> 网关 -> 微服务，获得的cors header的值，就将会是这样的：\n\naccess-control-allow-credentials: true, true\naccess-control-allow-origin: https://musk.mars, https://musk.mars\n\n\n可以看到这两个header的值都重复了，若想把这两个header的值去重的话，就需要使用到deduperesponseheader，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: dedupe_response_header_route\n        uri: https://example.org\n        filters:\n        # 若需要去重的header有多个，使用空格分隔\n        - deduperesponseheader=access-control-allow-credentials access-control-allow-origin\n\n\n去重策略：\n\n * retain_first：默认值，保留第一个值\n * retain_last：保留最后一个值\n * retain_unique：保留所有唯一值，以它们第一次出现的顺序保留\n\n若想对该过滤器工厂有个比较全面的了解的话，建议阅读该过滤器工厂的源码，因为源码里有详细的注释及示例，比官方文档写得还好：org.springframework.cloud.gateway.filter.factory.deduperesponseheadergatewayfilterfactory\n\n# 5、hystrix\n\n为路由引入hystrix的断路器保护，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: hystrix_route\n        uri: https://example.org\n        filters:\n        - hystrix=mycommandname\n\n\nhystrix是spring cloud第一代容错组件，不过已经进入维护模式，未来hystrix会被spring cloud移除掉，取而代之的是alibaba sentinel/resilience4j。所以本文不做详细介绍了，感兴趣的话可以参考官方文档：\n\n * hystrix gatewayfilter factory\n\n# 6、fallbackheaders\n\n同样是对hystrix的支持，上一小节所介绍的过滤器工厂支持一个配置参数：fallbackuri，该配置用于当发生异常时将请求转发到一个特定的uri上。而fallbackheaders这个过滤工厂可以在转发请求到该uri时添加一个header，这个header的值为具体的异常信息。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: ingredients\n        uri: lb://ingredients\n        predicates:\n        - path=//ingredients/**\n        filters:\n        - name: hystrix\n          args:\n            name: fetchingredients\n            fallbackuri: forward:/fallback\n      - id: ingredients-fallback\n        uri: http://localhost:9994\n        predicates:\n        - path=/fallback\n        filters:\n        - name: fallbackheaders\n          args:\n            executionexceptiontypeheadername: test-header\n\n\n这里也不做详细介绍了，感兴趣可以参考官方文档：\n\n * fallbackheaders gatewayfilter factory\n\n# 7、prefixpath\n\n为原始的请求路径添加一个前缀路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: prefixpath_route\n        uri: https://example.org\n        filters:\n        - prefixpath=/mypath\n\n\n该配置使访问${gateway_url}/hello 会转发到https://example.org/mypath/hello\n\n# 8、preservehostheader\n\n为请求添加一个preservehostheader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的host header。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: preserve_host_route\n        uri: https://example.org\n        filters:\n        - preservehostheader\n\n\n如果不设置，那么名为 host 的header将由http client控制\n\n# 9、requestratelimiter\n\n用于对请求进行限流，限流算法为令牌桶。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: requestratelimiter_route\n        uri: https://example.org\n        filters:\n        - name: requestratelimiter\n          args:\n            redis-rate-limiter.replenishrate: 10\n            redis-rate-limiter.burstcapacity: 20\n\n\n由于另一篇文章中已经介绍过如何使用该过滤器工厂实现网关限流，所以这里就不再赘述了：\n\n * spring cloud gateway - 扩展\n\n或者参考官方文档：\n\n * requestratelimiter gatewayfilter factory\n\n# 10、redirectto\n\n将原始请求重定向到指定的url，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: redirect_route\n        uri: https://example.org\n        filters:\n        - redirectto=302, https://acme.org\n\n\n该配置使访问 ${gateway_url}/hello 会被重定向到 https://acme.org/hello ，并且携带一个 location:http://acme.org 的header，而返回客户端的http状态码为302\n\n注意事项：\n\n * http状态码应为3xx，例如301\n * url必须是合法的url，该url会作为location header的值\n\n# 11、removehopbyhopheadersfilter\n\n为原始请求删除ietf组织规定的一系列header，默认删除的header如下：\n\n * connection\n * keep-alive\n * proxy-authenticate\n * proxy-authorization\n * te\n * trailer\n * transfer-encoding\n * upgrade\n\n可以通过配置去指定仅删除哪些header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      filter:\n        remove-hop-by-hop:\n          # 多个header使用逗号（,）分隔\n          headers: connection,keep-alive\n\n\n# 12、removerequestheader\n\n为原始请求删除某个header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: removerequestheader_route\n        uri: https://example.org\n        filters:\n        - removerequestheader=x-request-foo\n\n\n删除原始请求中名为 x-request-foo 的请求头\n\n# 13、removeresponseheader\n\n为原始响应删除某个header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: removeresponseheader_route\n        uri: https://example.org\n        filters:\n        - removeresponseheader=x-response-foo\n\n\n删除原始响应中名为 x-request-foo 的响应头\n\n# 14、rewritepath\n\n通过正则表达式重写原始的请求路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: rewritepath_route\n        uri: https://example.org\n        predicates:\n        - path=/foo/**\n        filters:\n        # 参数1为原始路径的正则表达式，参数2为重写后路径的正则表达式\n        - rewritepath=/foo/(?<segment>.*), /$\\{segment}\n\n\n\n该配置使得访问 /foo/bar 时，会将路径重写为/bar 再进行转发，也就是会转发到 https://example.org/bar。需要注意的是：由于yaml语法，需用$\\ 替换 $\n\n# 15、rewriteresponseheader\n\n重写原始响应中的某个header，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: rewriteresponseheader_route\n        uri: https://example.org\n        filters:\n        # 参数1为header名称，参数2为值的正则表达式，参数3为重写后的值\n        - rewriteresponseheader=x-response-foo, password=[^&]+, password=***\n\n\n\n该配置的意义在于：如果响应头中 x-response-foo 的值为/42?user=ford&password=omg!what&flag=true，那么就会被按照配置的值重写成/42?user=ford&password=***&flag=true，也就是把其中的password=omg!what重写成了password=***\n\n# 16、savesession\n\n在转发请求之前，强制执行websession::save操作，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: save_session\n        uri: https://example.org\n        predicates:\n        - path=/foo/**\n        filters:\n        - savesession\n\n\n\n主要用在那种像 spring session 延迟数据存储（数据不是立刻持久化）的，并希望在请求转发前确保session状态保存情况。如果你将spring secutiry于spring session集成使用，并想确保安全信息都传到下游机器，你就需要配置这个filter。\n\n# 17、secureheaders\n\nsecureheaders过滤器工厂主要是参考了这篇博客中的建议，为原始响应添加了一系列起安全作用的响应头。默认会添加如下headers（包括值）：\n\n * x-xss-protection:1; mode=block\n * strict-transport-security:max-age=631138519\n * x-frame-options:deny\n * x-content-type-options:nosniff\n * referrer-policy:no-referrer\n * content-security-policy:default-src \'self\' https:; font-src \'self\' https: data:; img-src \'self\' https: data:; object-src \'none\'; script-src https:; style-src \'self\' https: \'unsafe-inline\'\n * x-download-options:noopen\n * x-permitted-cross-domain-policies:none\n\n如果你想修改这些header的值，那么就需要使用这些headers对应的后缀，如下：\n\n * xss-protection-header\n * strict-transport-security\n * frame-options\n * content-type-options\n * referrer-policy\n * content-security-policy\n * download-options\n * permitted-cross-domain-policies\n\n配置示例：\n\nspring:\n  cloud:\n    gateway:\n      filter:\n        secure-headers:\n          # 修改 x-xss-protection 的值为 2; mode=unblock\n          xss-protection-header: 2; mode=unblock\n\n\n如果想禁用某些header，可使用如下配置：\n\nspring:\n  cloud:\n    gateway:\n      filter:\n        secure-headers:\n          # 多个使用逗号（,）分隔\n          disable: frame-options,download-options\n\n\n\n# 18、setpath\n\n修改原始的请求路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: setpath_route\n        uri: https://example.org\n        predicates:\n        - path=/foo/{segment}\n        filters:\n        - setpath=/{segment}\n\n\n\n该配置使访问 ${gateway_url}/foo/bar 时会转发到 https://example.org/bar ，也就是原本的/foo/bar被修改为了/bar\n\n# 19、setresponseheader\n\n修改原始响应中某个header的值，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: setresponseheader_route\n        uri: https://example.org\n        filters:\n        - setresponseheader=x-response-foo, bar\n\n\n\n将原始响应中 x-response-foo 的值修改为 bar\n\n# 20、setstatus\n\n修改原始响应的状态码，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: setstatusstring_route\n        uri: https://example.org\n        filters:\n        # 字符串形式\n        - setstatus=bad_request\n      - id: setstatusint_route\n        uri: https://example.org\n        filters:\n        # 数字形式\n        - setstatus=401\n\n\nsetstatusd的值可以是数字，也可以是字符串。但一定要是spring httpstatus 枚举类中的值。上面这两种配置都可以返回401这个http状态码。\n\n# 21、stripprefix\n\n用于截断原始请求的路径，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: nameroot\n        uri: http://nameservice\n        predicates:\n        - path=/name/**\n        filters:\n        # 数字表示要截断的路径的数量\n        - stripprefix=2\n\n\n\n如上配置，如果请求的路径为 /name/bar/foo ，那么则会截断成/foo后进行转发 ，也就是会截断2个路径。\n\n# 22、retry\n\n针对不同的响应进行重试，例如可以针对http状态码进行重试，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: retry_test\n        uri: http://localhost:8080/flakey\n        predicates:\n        - host=*.retry.com\n        filters:\n        - name: retry\n          args:\n            retries: 3\n            statuses: bad_gateway\n\n\n可配置如下参数：\n\n * retries：重试次数\n * statuses：需要重试的状态码，取值在 org.springframework.http.httpstatus 中\n * methods：需要重试的请求方法，取值在 org.springframework.http.httpmethod 中\n * series：http状态码序列，取值在 org.springframework.http.httpstatus.series 中\n\n# 23、requestsize\n\n设置允许接收最大请求包的大小，配置示例：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: request_size_route\n      uri: http://localhost:8080/upload\n      predicates:\n      - path=/upload\n      filters:\n      - name: requestsize\n        args:\n          # 单位为字节\n          maxsize: 5000000\n\n\n\n如果请求包大小超过设置的值，则会返回 413 payload too large以及一个errormessage\n\n# 24、modify request body\n\n在转发请求之前修改原始请求体内容，该过滤器工厂只能通过代码配置，不支持在配置文件中配置。代码示例：\n\n@bean\npublic routelocator routes(routelocatorbuilder builder) {\n    return builder.routes()\n        .route("rewrite_request_obj", r -> r.host("*.rewriterequestobj.org")\n            .filters(f -> f.prefixpath("/httpbin")\n                .modifyrequestbody(string.class, hello.class, mediatype.application_json_value,\n                    (exchange, s) -> return mono.just(new hello(s.touppercase())))).uri(uri))\n        .build();\n}\n \nstatic class hello {\n    string message;\n \n    public hello() { }\n \n    public hello(string message) {\n        this.message = message;\n    }\n \n    public string getmessage() {\n        return message;\n    }\n \n    public void setmessage(string message) {\n        this.message = message;\n    }\n}\n\n\n> tips：该过滤器工厂处于 beta 状态，未来api可能会变化，生产环境请慎用\n\n# 25、modify response body\n\n可用于修改原始响应体的内容，该过滤器工厂同样只能通过代码配置，不支持在配置文件中配置。代码示例：\n\n@bean\npublic routelocator routes(routelocatorbuilder builder) {\n    return builder.routes()\n        .route("rewrite_response_upper", r -> r.host("*.rewriteresponseupper.org")\n            .filters(f -> f.prefixpath("/httpbin")\n                .modifyresponsebody(string.class, string.class,\n                    (exchange, s) -> mono.just(s.touppercase()))).uri(uri)\n        .build();\n}\n\n\n\n> tips：该过滤器工厂处于 beta 状态，未来api可能会变化，生产环境请慎用\n\n# 26、default\n\ndefault filters用于为所有路由添加过滤器工厂，也就是说通过default filter所配置的过滤器工厂会作用到所有的路由上。配置示例：\n\nspring:\n  cloud:\n    gateway:\n      default-filters:\n      - addresponseheader=x-response-default-foo, default-bar\n      - prefixpath=/httpbin\n\n\n----------------------------------------\n\n官方文档：\n\n * gatewayfilter factories\n\n\n# 常用的内置工厂\n\n\n# 1、添加header\n\naddrequestheader gatewayfilter工厂接受一个名称和值参数。下面的示例配置一个addrequestheader gatewayfilter\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n        uri: https://example.org\n        filters:\n        - addrequestheader=x-request-red, blue\n\n\naddrequestheader知道用于匹配路径或主机的uri变量。uri变量可以在值中使用，并在运行时展开。下面的例子配置了一个使用变量的addrequestheader gatewayfilter\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n        uri: https://example.org\n        predicates:\n        - path=/red/{segment}\n        filters:\n        - addrequestheader=x-request-red, blue-{segment}\n\n\n@requestmapping("/header")\npublic string header(@requestheader("x-request-color") string  color) {\n    return color;\n}\n\n\n\n# 2、添加参数\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_parameter_route\n        uri: https://example.org\n        filters:\n        - addrequestparameter=red, blue\n\n\n这将为所有匹配请求的下游请求的查询字符串添加red=blue\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_parameter_route\n        uri: https://example.org\n        predicates:\n        - host: {segment}.myhost.org\n        filters:\n        - addrequestparameter=foo, bar-{segment}\n\n\naddrequestparameter知道用于匹配路径或主机的uri变量。uri变量可以在值中使用，并在运行时展开。下面的示例配置一个使用变量的addrequestparameter gatewayfilter\n\n@requestmapping("/addrequestparam")\npublic string header(@requestparam("color") string  color) {\n    return color;\n}\n\n\n\n# 3、添加前缀\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: prefixpath_route\n        uri: https://example.org\n        filters:\n        - prefixpath=/mypath\n\n\nthis prefixes /mypath to the path of all matching requests. so a request to /hello is sent to /mypath/hello.\n\n\n# 4、重定向\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: prefixpath_route\n        uri: https://example.org\n        filters:\n        - redirectto=302, https://acme.org\n\n\nthis will send a status 302 with a location:https://acme.org header to perform a redirect.\n\n\n# 5、路径截取\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: nameroot\n        uri: https://nameservice\n        predicates:\n        - path=/name/**\n        filters:\n        - stripprefix=2\n\n\nwhen a request is made through the gateway to /name/blue/red, the request made to nameservice looks like nameservice/red.\n\n\n# 自定义过滤器工厂\n\n * 继承 abstractgatewayfilterfactory 类\n * 重写 apply 方法的逻辑\n * 命名需要以 gatewayfilterfactory 结尾\n\n@slf4j\n@component\npublic class accessauthgatewayfilterfactory extends abstractgatewayfilterfactory<accessauthgatewayfilterfactory.config> {\n \n    public static final string warning_msg = "访问未授权";\n \n    public accessauthgatewayfilterfactory(){\n        super(accessauthgatewayfilterfactory.config.class);\n        log.info("loaded gatewayfilterfactory [accessauth]");\n    }\n@override\npublic list<string> shortcutfieldorder() {\nreturn arrays.aslist("name");\n} \n \n    @override\n    public gatewayfilter apply(config config) {\n \n        return (exchange, chain) -> {\n            serverhttprequest request = exchange.getrequest();\n            serverhttpresponse response = exchange.getresponse();\n            if(config.name.equals("zhangsan")) {\n                return chain.filter(exchange.mutate().request(request).build());\n            } else {\n \n                byte[] bits = warning_msg.getbytes(standardcharsets.utf_8);\n                databuffer buffer = response.bufferfactory().wrap(bits);\n                //指定编码，否则在浏览器中会中文乱码\n                response.getheaders().add("content-type", "text/plain;charset=utf-8");\n                return response.writewith(mono.just(buffer));\n            }\n        };\n \n    }\n \n    public static class config {\n \n        private string name;\n \n        public void setname(string name) {\n            this.name = name;\n        }\n \n        public string getname() {\n            return name;\n        }\n    }\n}\n\n\n修改service-gateway服务application.yml配置文件的路由配置，如下：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: hello\n        predicates:   #断言\n        - path=/hello\n        uri: http://localhost:8080  #目标服务地址\n        filters:\n        - accessauth=lisi\n\n\n启动服务，在浏览器访问在浏览器访问http://localhost/hello?name=xiaoming,返回如下：\n\n访问未授权\n\n\n若将service-gateway服务application.yml配置文件的路由配置修改，如下：\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: hello\n        predicates:   #断言\n        - path=/hello\n        uri: http://localhost:8080  #目标服务地址\n        filters:\n        - accessauth=zhangsan\n\n\n重新启动服务，从浏览器再次访问http://localhost/hello?name=xiaoming，返回如下：\n\nhello, xiaoming, 我是服务提供者:端口为：8080\n\n\npackage org.springframework.cloud.gateway.filter.factory;\n\nimport java.net.uri;\nimport java.util.arrays;\nimport java.util.list;\n\nimport reactor.core.publisher.mono;\n\nimport org.springframework.cloud.gateway.filter.gatewayfilter;\nimport org.springframework.cloud.gateway.filter.gatewayfilterchain;\nimport org.springframework.cloud.gateway.support.httpstatusholder;\nimport org.springframework.http.httpheaders;\nimport org.springframework.http.httpstatus;\nimport org.springframework.http.server.reactive.serverhttpresponse;\nimport org.springframework.util.assert;\nimport org.springframework.web.server.serverwebexchange;\n\nimport static org.springframework.cloud.gateway.support.gatewaytostringstyler.filtertostringcreator;\nimport static org.springframework.cloud.gateway.support.serverwebexchangeutils.setresponsestatus;\n\n/**\n * @author spencer gibb\n */\npublic class redirecttogatewayfilterfactory\n\t\textends abstractgatewayfilterfactory<redirecttogatewayfilterfactory.config> {\n\n\t/**\n\t * status key.\n\t */\n\tpublic static final string status_key = "status";\n\n\t/**\n\t * url key.\n\t */\n\tpublic static final string url_key = "url";\n\n\tpublic redirecttogatewayfilterfactory() {\n\t\tsuper(config.class);\n\t}\n\n\t@override\n\tpublic list<string> shortcutfieldorder() {\n\t\treturn arrays.aslist(status_key, url_key);\n\t}\n\n\t@override\n\tpublic gatewayfilter apply(config config) {\n\t\treturn apply(config.status, config.url);\n\t}\n\n\tpublic gatewayfilter apply(string statusstring, string urlstring) {\n\t\thttpstatusholder httpstatus = httpstatusholder.parse(statusstring);\n\t\tassert.istrue(httpstatus.is3xxredirection(),\n\t\t\t\t"status must be a 3xx code, but was " + statusstring);\n\t\tfinal uri url = uri.create(urlstring);\n\t\treturn apply(httpstatus, url);\n\t}\n\n\tpublic gatewayfilter apply(httpstatus httpstatus, uri uri) {\n\t\treturn apply(new httpstatusholder(httpstatus, null), uri);\n\t}\n\n\tpublic gatewayfilter apply(httpstatusholder httpstatus, uri uri) {\n\t\treturn new gatewayfilter() {\n\t\t\t@override\n\t\t\tpublic mono<void> filter(serverwebexchange exchange,\n\t\t\t\t\tgatewayfilterchain chain) {\n\t\t\t\tif (!exchange.getresponse().iscommitted()) {\n\t\t\t\t\tsetresponsestatus(exchange, httpstatus);\n\n\t\t\t\t\tfinal serverhttpresponse response = exchange.getresponse();\n\t\t\t\t\tresponse.getheaders().set(httpheaders.location, uri.tostring());\n\t\t\t\t\treturn response.setcomplete();\n\t\t\t\t}\n\t\t\t\treturn mono.empty();\n\t\t\t}\n\n\t\t\t@override\n\t\t\tpublic string tostring() {\n\t\t\t\tstring status;\n\t\t\t\tif (httpstatus.gethttpstatus() != null) {\n\t\t\t\t\tstatus = string.valueof(httpstatus.gethttpstatus().value());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstatus = httpstatus.getstatus().tostring();\n\t\t\t\t}\n\t\t\t\treturn filtertostringcreator(redirecttogatewayfilterfactory.this)\n\t\t\t\t\t\t.append(status, uri).tostring();\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic static class config {\n\n\t\tstring status;\n\n\t\tstring url;\n\n\t\tpublic string getstatus() {\n\t\t\treturn status;\n\t\t}\n\n\t\tpublic void setstatus(string status) {\n\t\t\tthis.status = status;\n\t\t}\n\n\t\tpublic string geturl() {\n\t\t\treturn url;\n\t\t}\n\n\t\tpublic void seturl(string url) {\n\t\t\tthis.url = url;\n\t\t}\n\n\t}\n\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"Spring--3.2.webflux_security",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.2.webflux_security.html",relativePath:"zs-ee-框架/spring/Spring--3.2.webflux_security.md",key:"v-f85073a0",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.2.webflux_security.html",headers:[{level:2,title:"项目示例",slug:"项目示例",normalizedTitle:"项目示例",charIndex:1665}],lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:"项目示例",content:'# Spring--3.2.webflux_security\n\n前言\n\n本文，演示Spring Boot Weflux集成SpringSecurity安全验证框架做项目的身份验证与权限管理；\n\n通过@EnableWebFluxSecurity注解加载与配置Security权限与用户登录信息， 通过@EnableReactiveMethodSecurity注解在标准方法上用表达式模型做安全控制设置， 如：使用@PreAuthorize注解在方法上控制用户访问RestAPI做权限验证； 采用jwt做登录会话数字签名，通过jwt验证后，从jwt中获取用户唯一标识，在做相应业务验权和调用；\n\n到此，本示例核心为完成一个基础springSecurity安全框架登录功能演示；\n\nSpringWebFlux\n\nSpringWebFlux是一套全新的springMVC框架体系下的新技术，随着SpingBoot的版本更新与微服务架构迭代，融入了更多的新技术，慢慢的让大众认识和学习了解到WebFlux的特点与设计，并接受在项目中实践，在springframework 5.0版本刚添加发布后，也存在一些学习与使用难点、甚至组件版本的兼容性等问题；随着版本的升级与迭代优化，现已有完全替代SpringWeb成为Web微服务开发框架主力军的潜力；\n\n官方说明\n\nSpringWebFlux是从spring framework 5.0版本开始在spring MVC整个生态框架中加入的，它是一套全新的ReactiveWeb技术，通够与现有的SpringMVC其它组件共存，是一个反应式堆栈Web框架，是全完全非阻塞，支持 Reactive Streams背压，并在 Netty、Undertow 和 Servlet 3.1+ 容器等服务器上运行。\n\n在微服务架构中，您可以混合使用 Spring MVC 或 Spring WebFlux 控制器或 Spring WebFlux 功能端点的应用程序。在两个框架中都支持相同的基于注释的编程模型，可以更轻松地重用知识，同时还可以为正确的工作选择正确的工具。\n\n并且从 Spring Web MVC 迁移到 Spring WebFlux 可以是无缝的，我们不需要重写原有的任何逻辑代码！\n\n\n\n详细情况参见官方文档：\n\nhttps://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html\n\nSpringSecurity\n\nSpring Security在spingMVC框架体系中用于做身份验证与权限管理的框架，增加系统的安全防护，防止非法登录与跨权限访问，目前很多项目中有应用；\n\n官方说明\n\nSpring Security 是一个功能强大且高度可定制的身份验证和访问控制框架。它是保护基于 Spring 的应用程序的事实上的标准。\n\nSpring Security 是一个专注于为 Java 应用程序提供身份验证和授权的框架。与所有 Spring 项目一样，Spring Security 的真正强大之处在于它可以轻松扩展以满足自定义要求\n\n特征\n\n * 对身份验证和授权的全面且可扩展的支持\n * 防止会话固定、点击劫持、跨站点请求伪造等攻击\n * Servlet API 集成\n * 与 Spring Web MVC 的可选集成\n\n应用程序安全归结为两个或多或少独立的问题：身份验证（你是谁？）和授权（你被允许做什么？）。有时人们会说“访问控制”而不是“授权”，这可能会让人感到困惑，但这样想是有帮助的，因为“授权”在其他地方超载。Spring Security 的架构旨在将身份验证与授权分开，并为两者提供策略和扩展点。\n\n详细情况参见官方文档：\n\nhttps://spring.io/guides/topicals/spring-security-architecture\n\n\n# 项目示例\n\n创建一个叫webflux-demo的工程，用于本演示项目编写代码;\n\n创建项目pom文件\n\npom.xml\n\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.4.5</version>\n    <relativePath/>\n</parent>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-webflux</artifactId>\n        <exclusions>\n            <exclusion>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-logging</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    \x3c!--添加对日志系统的支持，采用最新的log4j2框架--\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-log4j2</artifactId>\n    </dependency>\n    \x3c!-- json解析包 --\x3e\n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>fastjson</artifactId>\n        <version>1.2.75</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.commons</groupId>\n        <artifactId>commons-lang3</artifactId>\n        <version>3.10</version>\n    </dependency>\n    \x3c!-- JWT Token验证机制 --\x3e\n    <dependency>\n        <groupId>com.auth0</groupId>\n        <artifactId>java-jwt</artifactId>\n        <version>3.8.1</version>\n    </dependency>\n    <dependency>\n        <groupId>io.jsonwebtoken</groupId>\n        <artifactId>jjwt</artifactId>\n        <version>0.9.0</version>\n    </dependency>\n</dependencies>\n\n\n创建项目YML配置\n\napplication.yml\n\n# 本地服务访问\nserver:\n  # 服务端口\n  port: 8080\n  # 服务IP\n  address: 0.0.0.0\n\nspring:\n  application:\n    # 应用服务名\n    name: security\n\n# 配置日志\nlogging:\n  level:\n    com.netflix: info\n    reactor.util: info\n    org.springframework.boot: info\n#    # log 级别\n#    org.springframework.cloud.gateway: debug\n  config: classpath:log4j2.xml\n\n# 是否启用springboot的debug调试模式，会打印详细日志信息\ndebug: true\n\n\n创建Log4j2日志配置\n\nlog4j2.xml\n\n<?xml version="1.0" encoding="UTF-8"?>\n\x3c!--\n    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出\n    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。\n--\x3e\n<Configuration status="WARN" monitorInterval="600">\n    \x3c!-- 日志级别\n            trace：追踪，就是程序推进一下，可以写个trace输出\n            debug：调试，一般作为最低级别，trace基本不用。\n            info：输出重要的信息，使用较多\n            warn：警告，有些信息不是错误信息，但也要给一些提示。\n            error：错误信息。用的也很多。\n            fatal：致命错误。级别较高.\n     --\x3e\n    <Appenders>\n        \x3c!--这个输出控制台的配置--\x3e\n        <Console name="Console" target="SYSTEM_OUT">\n            \x3c!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch),[DENY|ACCEPT] --\x3e\n            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>\n            \x3c!-- 输出日志的格式 --\x3e\n            <PatternLayout>\n                <charset>UTF-8</charset>\n                <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%level] [%thread] [%class{36}] [%L] - %msg%xEx%n</pattern>\n            </PatternLayout>\n        </Console>\n    </Appenders>\n    <Loggers>\n        \x3c!-- 配置日志的根节点 --\x3e\n        <root level="trace">\n            <appender-ref ref="Console"/>\n        </root>\n        \x3c!-- 第三方日志配置 --\x3e\n        <logger name="org.springframework.core" level="info"/>\n        <logger name="org.springframework.beans" level="info"/>\n        <logger name="org.springframework.context" level="info"/>\n        <logger name="io.netty" level="warn"/>\n        <logger name="org.apache.http" level="warn"/>\n    </Loggers>\n</Configuration>\n\n\n创建启动类\n\nJwtAppStart.java\n\npackage com.webflux.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.server.reactive.ServerHttpResponse;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.reactive.config.EnableWebFlux;\nimport reactor.core.publisher.Mono;\n\nimport java.security.Principal;\nimport java.util.HashMap;\nimport java.util.Map;\n\n//注意：@EnableWebFlux用来配置freemarker，它适用于模板文件，但是对静态资源访问有问题，访问纯静态资源请注释\n@EnableWebFlux\n@RestController\n@SpringBootApplication\n//@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\npublic class JwtAppStart{\n\n    /**\n     此示例，只提供api级别的security接口较验\n     测试流程：\n     1.通过postamn 以get访问：http://127.0.0.1:8080/getUser 未登录，被拦截，跳转到/login(get模式)，返回未登录提示\n     2.通过postamn 以post模式访问: http://127.0.0.1:8080/login，参数通过body （x-wwww-from-urlencoded)表单提交\n     2.1. 登录成功，进入ServerAuthenticationSuccessHandler类中加工返回数据\n     2.2. 登录失败，进入ServerAuthenticationFailureHandler类中加工返回数据\n     2.3. 登录成功后，继续通过postamn 以get访问：http://127.0.0.1:8080/getUser，响应正常\n     */\n\n    public static void main(String[] args) {\n        SpringApplication.run(JwtAppStart.class, args);\n    }\n\n    /**\n     * 不限制用户访问（需登录）\n     * @return\n     */\n    @RequestMapping("/getUser")\n    @ResponseBody\n    public Mono<String> getUser(){\n        return Mono.just("getUser");\n    }\n\n    /**\n     * 普通用户访问\n     * post\n     * @return\n     */\n    @PreAuthorize("hasRole(\'USER\')")\n    @RequestMapping(value = "/user", method = {RequestMethod.GET,RequestMethod.POST})\n    @ResponseBody\n    public Mono<String> user(Principal principal){\n        System.out.println(principal.getName());\n        return Mono.just("hello "+principal.getName());\n    }\n\n    /**\n     * 超管用户访问\n     * @return\n     */\n//    @PreAuthorize("hasPermission(\'ROLE_ADMIN\')")\n//    @Secured("ROLE_ADMIN")\n    @PreAuthorize("hasRole(\'ADMIN\')")\n    @RequestMapping(value = "/admin", method = {RequestMethod.GET,RequestMethod.POST})\n    @ResponseBody\n    public Mono<String> admin(Principal principal,Authentication authentication){\n        System.out.println(authentication.getAuthorities());\n        System.out.println(principal.getName());\n        return Mono.just("admin "+principal.getName());\n    }\n\n    @RequestMapping(value = "/login", method = {RequestMethod.GET,RequestMethod.POST})\n    @ResponseBody\n    public Mono<Object> login(ServerHttpResponse response){\n        Map<String, String> responseMap = new HashMap<>();\n        responseMap.put("code", "failure");\n        responseMap.put("msg", "您还未登录");\n        response.setStatusCode(HttpStatus.UNAUTHORIZED);\n        return Mono.just(responseMap);\n    }\n\n}\n\n\n创建权限配置类\n\nWebFluxSecurityConfigurer.java\n\npackage com.webflux.demo.config;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.webflux.demo.handler.JwtSecurityContextRepository;\nimport com.webflux.demo.service.UserService;\nimport com.webflux.demo.util.JwtTokenUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.server.reactive.ServerHttpResponse;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\nimport org.springframework.security.config.web.server.ServerHttpSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.web.server.SecurityWebFilterChain;\nimport org.springframework.security.web.server.WebFilterExchange;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Mono;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @Description EnableWebFluxSecurity权限验证配置\n * @Author JL\n * @Version V1.0\n */\n@Slf4j\n@EnableWebFluxSecurity\n@EnableReactiveMethodSecurity\npublic class WebFluxSecurityConfigurer {\n\n    /**\n     * 提供用于获取UserDetails的Service\n     * @param userService\n     * @return\n     */\n    @Bean\n    public ReactiveAuthenticationManager authenticationManager(UserService userService) {\n        log.info("加载security 用户配置....");\n        return new UserDetailsRepositoryReactiveAuthenticationManager(userService);\n    }\n\n    /**\n     * http请求路径权限与过滤链配置\n     * @param http\n     * @param userService\n     * @return\n     */\n    @Bean\n    public SecurityWebFilterChain springWebFilterChain(ServerHttpSecurity http, UserService userService) {\n        log.info("加载security 权限配置....");\n        http\n                .csrf().disable()\n                .cors().disable()\n                .httpBasic().disable()\n                .securityContextRepository(new JwtSecurityContextRepository(userService))\n                .formLogin()\n                .authenticationFailureHandler((webFilterExchange, exception) -> { //验证失败处理器(可以单独创建类处理)\n                    webFilterExchange.getExchange().getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);\n                    Map<String, String> responseMap = new HashMap<>();\n                    responseMap.put("code", "failure");\n                    if (exception instanceof UsernameNotFoundException) {\n                        responseMap.put("msg", "用户不存在 " + exception.getMessage());\n                    } else if (exception instanceof BadCredentialsException) {\n                        responseMap.put("msg", "密码错误 " + exception.getMessage());\n                    } else if (exception instanceof LockedException) {\n                        responseMap.put("msg", "用户锁定 " + exception.getMessage());\n                    } else if (exception instanceof AccountExpiredException) {\n                        responseMap.put("msg", "账户过期 " + exception.getMessage());\n                    } else if (exception instanceof DisabledException) {\n                        responseMap.put("msg", "账户不可用 " + exception.getMessage());\n                    } else {\n                        responseMap.put("msg", "系统错误 " + exception.getMessage());\n                    }\n                    //responseMap.put("msg", exception.getMessage());\n                    return writeWith(webFilterExchange.getExchange(), responseMap);\n                })\n                .loginPage("/login")\n                .authenticationSuccessHandler((webFilterExchange, authentication) -> { //验证成功处理器(可以单独创建类处理)\n                    User user = (User)authentication.getPrincipal();\n                    userService.saveCacheUser(user);\n                    String token = JwtTokenUtils.createToken(user.getUsername(), -1);\n                    Map<String, String> responseMap = new HashMap<>();\n                    responseMap.put("code", "success");\n                    responseMap.put("data", token);\n                    return writeWith(webFilterExchange.getExchange(), responseMap);\n                }).and()\n                .authorizeExchange()//请求进行授权\n                .pathMatchers(HttpMethod.OPTIONS).permitAll()//特殊请求过滤\n                .pathMatchers("/login").permitAll()//登录不需要验证\n                .anyExchange()//任何请求\n                .authenticated()//都需要身份认证\n                .and().logout()\n                .logoutSuccessHandler((webFilterExchange, authentication) -> { //退出成功处理器(可以单独创建类处理)\n                    Map<String, String> responseMap = new HashMap<>();\n                    responseMap.put("code", "logout");\n                    responseMap.put("msg", "退出成功");\n                    return writeWith(webFilterExchange.getExchange(), responseMap);\n                }).and()\n                .exceptionHandling()\n                .accessDeniedHandler((exchange, denied) -> { // 无权限访问处理器(可以单独创建类处理)\n                    Map<String, String> responseMap = new HashMap<>();\n                    responseMap.put("code", "denied");\n                    responseMap.put("msg", "账户无权限访问");\n                    return writeWith(exchange, responseMap);\n                });\n\n        return http.build();\n    }\n\n    /**\n     * 输出响应信息\n     * @param exchange\n     * @param responseMap\n     * @return\n     */\n    public Mono<Void> writeWith(ServerWebExchange exchange, Map<String, String> responseMap){\n        ServerHttpResponse response = exchange.getResponse();\n        String body = JSONObject.toJSONString(responseMap);\n        DataBuffer buffer = null;\n        try{\n            buffer = response.bufferFactory().wrap(body.getBytes("UTF-8"));\n        }catch(UnsupportedEncodingException ue){\n            ue.printStackTrace();\n        }\n        return response.writeWith(Mono.just(buffer));\n    }\n\n}\n\n\n创建上下文验证器\n\nJwtSecurityContextRepository.java\n\npackage com.webflux.demo.handler;\n\nimport com.webflux.demo.service.UserService;\nimport com.webflux.demo.util.JwtTokenUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextImpl;\nimport org.springframework.security.core.userdetails.ReactiveUserDetailsService;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.server.context.ServerSecurityContextRepository;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Mono;\n\nimport javax.annotation.Resource;\n\n/**\n * @Description 获取请求头中带过来的token值，解析并验证用户信息\n * @Author JL\n * @Version V1.0\n */\n@Slf4j\npublic class JwtSecurityContextRepository implements ServerSecurityContextRepository {\n\n    private UserService userService;\n\n    public JwtSecurityContextRepository(UserService userService){\n        this.userService = userService;\n    }\n\n    @Override\n    public Mono<Void> save(ServerWebExchange exchange, SecurityContext context) {\n        return Mono.empty();\n    }\n\n    @Override\n    public Mono<SecurityContext> load(ServerWebExchange exchange) {\n        log.info("加载token:JwtSecurityContextRepository");\n        String path = exchange.getRequest().getPath().toString();\n        // 过滤路径\n        if ("/login".equals(path)){\n            return Mono.empty();\n        }\n        String token = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);\n        if (StringUtils.isNotBlank(token)){\n            // token能正常解析，表示token有效并对应数据库已知用户\n            String subject = JwtTokenUtils.parseToken(token);\n            Authentication newAuthentication = new UsernamePasswordAuthenticationToken(subject, subject);\n            return new ReactiveAuthenticationManager(){\n                @Override\n                public Mono<Authentication> authenticate(Authentication authentication) {\n                    // 如果对token有足够的安全认可，可以采用无状态凭证策略，将username和authorities放置在token串中解析获取，此处就可以不用查询数据库验证\n                    Mono<UserDetails> userDetails = userService.findByUsername(authentication.getPrincipal().toString());\n                    UserDetails user = userDetails.block();\n                    if (user == null){\n                        throw new DisabledException("账户不可用");\n                    }\n                    Authentication auth = new UsernamePasswordAuthenticationToken(user.getUsername(), null, user.getAuthorities());\n                    return Mono.just(auth);\n                }\n            }.authenticate(newAuthentication).map(SecurityContextImpl::new);\n        }else {\n            return Mono.empty();\n        }\n    }\n}\n\n\n创建用户身份验证业务类\n\nUserService.java\n\npackage com.webflux.demo.service;\n\nimport org.springframework.security.core.userdetails.ReactiveUserDetailsService;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.factory.PasswordEncoderFactories;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Mono;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @Description 用户信息查询与登录状态保存\n * @Author JL\n * @Date 2021/08/12\n * @Version V1.0\n */\n@Service\npublic class UserService implements ReactiveUserDetailsService {\n\n    private static Map<String,UserDetails> userMap = new HashMap<>();\n\n    /**\n     * 获取指定用户信息与登录信息进行验证\n     * @param username\n     * @return\n     */\n    @Override\n    public Mono<UserDetails> findByUsername(String username) {\n        UserDetails userDetails = queryCacheUser(username);\n        if (userDetails != null){\n            return Mono.just(userDetails);\n        }else {\n            return Mono.just(queryDbUser(username));\n        }\n    }\n\n    /**\n     * 模拟查询redis缓存数据\n     * @param username\n     * @return\n     */\n    public UserDetails queryCacheUser(String username){\n        return userMap.get(username);\n    }\n\n    /**\n     * 模拟登录成功后保存redis缓存中\n     * @param userDetails\n     */\n    public void saveCacheUser(UserDetails userDetails){\n        userMap.put(userDetails.getUsername(), userDetails);\n    }\n\n    /**\n     * 模拟查询数据库\n     * @param username\n     * @return\n     */\n    public UserDetails queryDbUser(String username){\n        UserDetails userDetails = null;\n        PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n        if (username.equals("user")){\n            userDetails = User.withUsername("user")\n                    .password(encoder.encode("user"))\n                    .roles("USER")\n                    .build();\n        }else if (username.equals("admin")) {\n            userDetails = User.withUsername("admin")\n                    .password(encoder.encode("admin"))\n                    .roles("USER", "ADMIN")\n                    .build();\n        }else {\n            throw new UsernameNotFoundException("无此账户");\n        }\n        System.out.println(userDetails.getPassword());\n        return userDetails;\n    }\n\n}\n\n\n创建JWT工具类\n\nJwtTokenUtils.java\n\npackage com.webflux.demo.util;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTCreator;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.SignatureVerificationException;\nimport com.auth0.jwt.exceptions.TokenExpiredException;\nimport com.auth0.jwt.interfaces.Claim;\nimport org.apache.commons.lang3.time.DateUtils;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @Description JWT跨域管理token工具类\n * @Author JL\n * @Version V1.0\n */\npublic class JwtTokenUtils {\n\n    /**\n     JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案。\n     JWT 的三个部分依次如下\n     Header（头部）:是一个 JSON 对象，描述 JWT 的元数据{ "alg": "HS256", typ": "JWT" }\n     Payload（负载）:也是一个 JSON 对象，用来存放实际需要传递的数据,JWT 规定了7个官方字段:\n         iss (issuer)：签发人\n         exp (expiration time)：过期时间\n         sub (subject)：主题\n         aud (audience)：受众\n         nbf (Not Before)：生效时间\n         iat (Issued At)：签发时间\n         jti (JWT ID)：编号\n     Signature（签名）:对前两部分的签名，防止数据篡改\n\n     1.JWT中Header头和Payload有效载荷序列化的算法都用到了Base64URL，签名哈希部分是对Header与Payload两部分数据签名\n     2.客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中，客户端将在与服务器交互中都会带JWT，将它放入HTTP请求的Header Authorization字段中\n     3.JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限\n     4.JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限\n     5.JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输\n     */\n\n    /**\n     * 加密密钥\n     */\n    private static final String SECRET = "f2f4f94c9065_wNmx01w27MQnPc3BtUQkty_23P0pVlAdj86o5XznUrE";\n\n    /**\n     * jwt创建token，考虑安全性，token中不因该放入太多信息（勿放密码之类的敏感信息），只放入关键字段值即可，如用户ID\n     * @param sub     主题（可以放入关键数据，如:userid, 用户唯一值等）\n     * @param timeout 过期时长（秒）\n     * @return\n     */\n    public static String createToken(String sub, int timeout) {\n        JWTCreator.Builder builder = JWT.create();\n        builder.withSubject(sub);//主题\n        builder.withIssuer("pro-server");\n        if (timeout>0) {\n            builder.withExpiresAt(DateUtils.addSeconds(new Date(), timeout));//过期时间\n        }\n        return builder.sign(Algorithm.HMAC256(SECRET));\n    }\n\n    /**\n     * 对jwt创建的token进行验签与解析，返回Subject（主题）中存放的内容\n     * @param token\n     * @return\n     * @throws TokenExpiredException          会话超时异常\n     * @throws SignatureVerificationException 验签无效异常\n     */\n    public static String parseToken(String token) throws TokenExpiredException, SignatureVerificationException {\n        return JWT.require(Algorithm.HMAC256(SECRET)).build().verify(token).getSubject();\n    }\n\n    /**\n     * jwt创建token，考虑安全性，token中不因该放入太多信息（勿放密码之类的敏感信息）\n     * @param loadMap   数据集合\n     * @param timeout   过期时长（秒）\n     * @return\n     */\n    public static String createToken(Map<String, Object> loadMap, int timeout) {\n        JWTCreator.Builder builder = JWT.create();\n        loadMap.forEach((k, v) -> {\n            if (v instanceof String) {\n                builder.withClaim(k, (String) v);\n            } else if (v instanceof Date) {\n                builder.withClaim(k, (Date) v);\n            } else if (v instanceof Long) {\n                builder.withClaim(k, (Long) v);\n            } else if (v instanceof Integer) {\n                builder.withClaim(k, (Integer) v);\n            } else if (v instanceof Boolean) {\n                builder.withClaim(k, (Boolean) v);\n            }\n        });\n        builder.withIssuer("pro-server");\n        if (timeout>0) {\n            builder.withExpiresAt(DateUtils.addSeconds(new Date(), timeout));//过期时间\n        }\n        return builder.sign(Algorithm.HMAC256(SECRET));\n    }\n\n    /**\n     * 对jwt创建的token进行验签与解析，返回集合\n     * @param token\n     * @return\n     * @throws TokenExpiredException          会话超时异常\n     * @throws SignatureVerificationException 验签无效异常\n     */\n    public static Map<String, Object> parseTokenToMap(String token) throws TokenExpiredException, SignatureVerificationException {\n        Map<String, Claim> claimMap = JWT.require(Algorithm.HMAC256(SECRET)).build().verify(token).getClaims();\n        if (claimMap == null){\n            return null;\n        }\n        Map<String, Object> loadMap = new HashMap<>();\n        claimMap.forEach((k, v) -> {\n            Object obj = null;\n            if (v.asString() != null) {\n                obj = v.asString();\n            } else if (v.asBoolean() != null) {\n                obj = v.asBoolean();\n            } else if (v.asDate() != null || v.asLong() != null) {//Date类型按Long方式来处理\n                obj = v.asLong();\n            } else if (v.asInt() != null) {\n                obj = v.asInt();\n            }\n            loadMap.put(k, obj);\n        });\n        return loadMap;\n    }\n}\n\n\n项目测试\n\n1.启动项目\n\n运行JwtAppStart\n\n2.测试未登录状态，访问/user接口\n\nhttp://127.0.0.1:8080/user\n\n{\n    "msg": "您还未登录",\n    "code": "failure"\n}\n\n\n3.测试权限为USER的普通用户登录接口\n\nPOST http://127.0.0.1:8080/login\n\nusername=user\n\npassword=user\n\n// data返回为jwt生成的token值，后续请求需在Http的headers中添加Authorization=token值\n{\n    "code": "success",\n    "data": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwiaXNzIjoicHJvLXNlcnZlciJ9.9eTmhl5fD0iIajFgWVaWEijENUtE34OU4lVZCAenBvc"\n}\n\n\n注：通过post访问/login，属于SpringSecurity安全验证框架默认拦截内置登录路径；\n\n4.测试登录后访问/user接口\n\nHttp请求headers中添加Authorization=token值\n\nGET http://127.0.0.1:8080/user\n\nhello user\n\n\n5.测试登录后访问/admin接口\n\nHttp请求headers中添加Authorization=token值\n\nGET http://127.0.0.1:8080/admin\n\n//因控制器admin方法上有@PreAuthorize("hasRole(\'ADMIN\')")注释，则需要验证用户权限为ADMIN才能访问\n{\n    "msg": "账户无权限访问",\n    "code": "denied"\n}\n\n\n6.测试退出\n\nHttp请求headers中添加Authorization=token值\n\nPOST http://127.0.0.1:8080/logout\n\n{\n    "msg": "退出成功",\n    "code": "logout"\n}\n\n\n注：通过post访问/logout，属于SpringSecurity安全验证框架默认拦截内置退出路径；\n\n总结\n\n本项目示例演示了在SpringBoot中用WebFlux非阻塞Web服务集成SpringSecurity安全验证框架，基于Netty容器上运行，并增加JWT数字签名，通过JWT识别用户唯一身份，通过SpringSecurity验证用户合法身份以及获取用户Role角色，通过@PreAuthorize注解标签，识别用户访问控制器方法是否具有权限角色；本示例过程只是基础演示，实际项目应用根据业务场景和要求对身份安全、权限管理会更加复杂;\n\n本文转自 https://blog.csdn.net/jilo88/article/details/120026353，如有侵权，请联系删除。',normalizedContent:'# spring--3.2.webflux_security\n\n前言\n\n本文，演示spring boot weflux集成springsecurity安全验证框架做项目的身份验证与权限管理；\n\n通过@enablewebfluxsecurity注解加载与配置security权限与用户登录信息， 通过@enablereactivemethodsecurity注解在标准方法上用表达式模型做安全控制设置， 如：使用@preauthorize注解在方法上控制用户访问restapi做权限验证； 采用jwt做登录会话数字签名，通过jwt验证后，从jwt中获取用户唯一标识，在做相应业务验权和调用；\n\n到此，本示例核心为完成一个基础springsecurity安全框架登录功能演示；\n\nspringwebflux\n\nspringwebflux是一套全新的springmvc框架体系下的新技术，随着spingboot的版本更新与微服务架构迭代，融入了更多的新技术，慢慢的让大众认识和学习了解到webflux的特点与设计，并接受在项目中实践，在springframework 5.0版本刚添加发布后，也存在一些学习与使用难点、甚至组件版本的兼容性等问题；随着版本的升级与迭代优化，现已有完全替代springweb成为web微服务开发框架主力军的潜力；\n\n官方说明\n\nspringwebflux是从spring framework 5.0版本开始在spring mvc整个生态框架中加入的，它是一套全新的reactiveweb技术，通够与现有的springmvc其它组件共存，是一个反应式堆栈web框架，是全完全非阻塞，支持 reactive streams背压，并在 netty、undertow 和 servlet 3.1+ 容器等服务器上运行。\n\n在微服务架构中，您可以混合使用 spring mvc 或 spring webflux 控制器或 spring webflux 功能端点的应用程序。在两个框架中都支持相同的基于注释的编程模型，可以更轻松地重用知识，同时还可以为正确的工作选择正确的工具。\n\n并且从 spring web mvc 迁移到 spring webflux 可以是无缝的，我们不需要重写原有的任何逻辑代码！\n\n\n\n详细情况参见官方文档：\n\nhttps://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html\n\nspringsecurity\n\nspring security在spingmvc框架体系中用于做身份验证与权限管理的框架，增加系统的安全防护，防止非法登录与跨权限访问，目前很多项目中有应用；\n\n官方说明\n\nspring security 是一个功能强大且高度可定制的身份验证和访问控制框架。它是保护基于 spring 的应用程序的事实上的标准。\n\nspring security 是一个专注于为 java 应用程序提供身份验证和授权的框架。与所有 spring 项目一样，spring security 的真正强大之处在于它可以轻松扩展以满足自定义要求\n\n特征\n\n * 对身份验证和授权的全面且可扩展的支持\n * 防止会话固定、点击劫持、跨站点请求伪造等攻击\n * servlet api 集成\n * 与 spring web mvc 的可选集成\n\n应用程序安全归结为两个或多或少独立的问题：身份验证（你是谁？）和授权（你被允许做什么？）。有时人们会说“访问控制”而不是“授权”，这可能会让人感到困惑，但这样想是有帮助的，因为“授权”在其他地方超载。spring security 的架构旨在将身份验证与授权分开，并为两者提供策略和扩展点。\n\n详细情况参见官方文档：\n\nhttps://spring.io/guides/topicals/spring-security-architecture\n\n\n# 项目示例\n\n创建一个叫webflux-demo的工程，用于本演示项目编写代码;\n\n创建项目pom文件\n\npom.xml\n\n<parent>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-parent</artifactid>\n    <version>2.4.5</version>\n    <relativepath/>\n</parent>\n\n<dependencies>\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-webflux</artifactid>\n        <exclusions>\n            <exclusion>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-starter-logging</artifactid>\n            </exclusion>\n        </exclusions>\n    </dependency>\n\n    <dependency>\n        <groupid>org.springframework.security</groupid>\n        <artifactid>spring-security-test</artifactid>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-security</artifactid>\n    </dependency>\n    <dependency>\n        <groupid>org.projectlombok</groupid>\n        <artifactid>lombok</artifactid>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-test</artifactid>\n        <scope>test</scope>\n    </dependency>\n    \x3c!--添加对日志系统的支持，采用最新的log4j2框架--\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-log4j2</artifactid>\n    </dependency>\n    \x3c!-- json解析包 --\x3e\n    <dependency>\n        <groupid>com.alibaba</groupid>\n        <artifactid>fastjson</artifactid>\n        <version>1.2.75</version>\n    </dependency>\n    <dependency>\n        <groupid>org.apache.commons</groupid>\n        <artifactid>commons-lang3</artifactid>\n        <version>3.10</version>\n    </dependency>\n    \x3c!-- jwt token验证机制 --\x3e\n    <dependency>\n        <groupid>com.auth0</groupid>\n        <artifactid>java-jwt</artifactid>\n        <version>3.8.1</version>\n    </dependency>\n    <dependency>\n        <groupid>io.jsonwebtoken</groupid>\n        <artifactid>jjwt</artifactid>\n        <version>0.9.0</version>\n    </dependency>\n</dependencies>\n\n\n创建项目yml配置\n\napplication.yml\n\n# 本地服务访问\nserver:\n  # 服务端口\n  port: 8080\n  # 服务ip\n  address: 0.0.0.0\n\nspring:\n  application:\n    # 应用服务名\n    name: security\n\n# 配置日志\nlogging:\n  level:\n    com.netflix: info\n    reactor.util: info\n    org.springframework.boot: info\n#    # log 级别\n#    org.springframework.cloud.gateway: debug\n  config: classpath:log4j2.xml\n\n# 是否启用springboot的debug调试模式，会打印详细日志信息\ndebug: true\n\n\n创建log4j2日志配置\n\nlog4j2.xml\n\n<?xml version="1.0" encoding="utf-8"?>\n\x3c!--\n    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出\n    monitorinterval : log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。\n--\x3e\n<configuration status="warn" monitorinterval="600">\n    \x3c!-- 日志级别\n            trace：追踪，就是程序推进一下，可以写个trace输出\n            debug：调试，一般作为最低级别，trace基本不用。\n            info：输出重要的信息，使用较多\n            warn：警告，有些信息不是错误信息，但也要给一些提示。\n            error：错误信息。用的也很多。\n            fatal：致命错误。级别较高.\n     --\x3e\n    <appenders>\n        \x3c!--这个输出控制台的配置--\x3e\n        <console name="console" target="system_out">\n            \x3c!-- 控制台只输出level及以上级别的信息(onmatch),其他的直接拒绝(onmismatch),[deny|accept] --\x3e\n            <thresholdfilter level="debug" onmatch="accept" onmismatch="deny"/>\n            \x3c!-- 输出日志的格式 --\x3e\n            <patternlayout>\n                <charset>utf-8</charset>\n                <pattern>[%d{yyyy-mm-dd hh:mm:ss.sss}] [%level] [%thread] [%class{36}] [%l] - %msg%xex%n</pattern>\n            </patternlayout>\n        </console>\n    </appenders>\n    <loggers>\n        \x3c!-- 配置日志的根节点 --\x3e\n        <root level="trace">\n            <appender-ref ref="console"/>\n        </root>\n        \x3c!-- 第三方日志配置 --\x3e\n        <logger name="org.springframework.core" level="info"/>\n        <logger name="org.springframework.beans" level="info"/>\n        <logger name="org.springframework.context" level="info"/>\n        <logger name="io.netty" level="warn"/>\n        <logger name="org.apache.http" level="warn"/>\n    </loggers>\n</configuration>\n\n\n创建启动类\n\njwtappstart.java\n\npackage com.webflux.demo;\n\nimport org.springframework.boot.springapplication;\nimport org.springframework.boot.autoconfigure.springbootapplication;\nimport org.springframework.http.httpstatus;\nimport org.springframework.http.server.reactive.serverhttpresponse;\nimport org.springframework.security.access.prepost.preauthorize;\nimport org.springframework.security.core.authentication;\nimport org.springframework.web.bind.annotation.requestmapping;\nimport org.springframework.web.bind.annotation.requestmethod;\nimport org.springframework.web.bind.annotation.responsebody;\nimport org.springframework.web.bind.annotation.restcontroller;\nimport org.springframework.web.reactive.config.enablewebflux;\nimport reactor.core.publisher.mono;\n\nimport java.security.principal;\nimport java.util.hashmap;\nimport java.util.map;\n\n//注意：@enablewebflux用来配置freemarker，它适用于模板文件，但是对静态资源访问有问题，访问纯静态资源请注释\n@enablewebflux\n@restcontroller\n@springbootapplication\n//@enableglobalmethodsecurity(prepostenabled = true, securedenabled = true)\npublic class jwtappstart{\n\n    /**\n     此示例，只提供api级别的security接口较验\n     测试流程：\n     1.通过postamn 以get访问：http://127.0.0.1:8080/getuser 未登录，被拦截，跳转到/login(get模式)，返回未登录提示\n     2.通过postamn 以post模式访问: http://127.0.0.1:8080/login，参数通过body （x-wwww-from-urlencoded)表单提交\n     2.1. 登录成功，进入serverauthenticationsuccesshandler类中加工返回数据\n     2.2. 登录失败，进入serverauthenticationfailurehandler类中加工返回数据\n     2.3. 登录成功后，继续通过postamn 以get访问：http://127.0.0.1:8080/getuser，响应正常\n     */\n\n    public static void main(string[] args) {\n        springapplication.run(jwtappstart.class, args);\n    }\n\n    /**\n     * 不限制用户访问（需登录）\n     * @return\n     */\n    @requestmapping("/getuser")\n    @responsebody\n    public mono<string> getuser(){\n        return mono.just("getuser");\n    }\n\n    /**\n     * 普通用户访问\n     * post\n     * @return\n     */\n    @preauthorize("hasrole(\'user\')")\n    @requestmapping(value = "/user", method = {requestmethod.get,requestmethod.post})\n    @responsebody\n    public mono<string> user(principal principal){\n        system.out.println(principal.getname());\n        return mono.just("hello "+principal.getname());\n    }\n\n    /**\n     * 超管用户访问\n     * @return\n     */\n//    @preauthorize("haspermission(\'role_admin\')")\n//    @secured("role_admin")\n    @preauthorize("hasrole(\'admin\')")\n    @requestmapping(value = "/admin", method = {requestmethod.get,requestmethod.post})\n    @responsebody\n    public mono<string> admin(principal principal,authentication authentication){\n        system.out.println(authentication.getauthorities());\n        system.out.println(principal.getname());\n        return mono.just("admin "+principal.getname());\n    }\n\n    @requestmapping(value = "/login", method = {requestmethod.get,requestmethod.post})\n    @responsebody\n    public mono<object> login(serverhttpresponse response){\n        map<string, string> responsemap = new hashmap<>();\n        responsemap.put("code", "failure");\n        responsemap.put("msg", "您还未登录");\n        response.setstatuscode(httpstatus.unauthorized);\n        return mono.just(responsemap);\n    }\n\n}\n\n\n创建权限配置类\n\nwebfluxsecurityconfigurer.java\n\npackage com.webflux.demo.config;\n\nimport com.alibaba.fastjson.jsonobject;\nimport com.webflux.demo.handler.jwtsecuritycontextrepository;\nimport com.webflux.demo.service.userservice;\nimport com.webflux.demo.util.jwttokenutils;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.core.io.buffer.databuffer;\nimport org.springframework.http.httpmethod;\nimport org.springframework.http.httpstatus;\nimport org.springframework.http.server.reactive.serverhttpresponse;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.config.annotation.method.configuration.enablereactivemethodsecurity;\nimport org.springframework.security.config.annotation.web.reactive.enablewebfluxsecurity;\nimport org.springframework.security.config.web.server.serverhttpsecurity;\nimport org.springframework.security.core.userdetails.user;\nimport org.springframework.security.core.userdetails.usernamenotfoundexception;\nimport org.springframework.security.web.server.securitywebfilterchain;\nimport org.springframework.security.web.server.webfilterexchange;\nimport org.springframework.web.server.serverwebexchange;\nimport reactor.core.publisher.mono;\n\nimport java.io.unsupportedencodingexception;\nimport java.util.hashmap;\nimport java.util.map;\n\n/**\n * @description enablewebfluxsecurity权限验证配置\n * @author jl\n * @version v1.0\n */\n@slf4j\n@enablewebfluxsecurity\n@enablereactivemethodsecurity\npublic class webfluxsecurityconfigurer {\n\n    /**\n     * 提供用于获取userdetails的service\n     * @param userservice\n     * @return\n     */\n    @bean\n    public reactiveauthenticationmanager authenticationmanager(userservice userservice) {\n        log.info("加载security 用户配置....");\n        return new userdetailsrepositoryreactiveauthenticationmanager(userservice);\n    }\n\n    /**\n     * http请求路径权限与过滤链配置\n     * @param http\n     * @param userservice\n     * @return\n     */\n    @bean\n    public securitywebfilterchain springwebfilterchain(serverhttpsecurity http, userservice userservice) {\n        log.info("加载security 权限配置....");\n        http\n                .csrf().disable()\n                .cors().disable()\n                .httpbasic().disable()\n                .securitycontextrepository(new jwtsecuritycontextrepository(userservice))\n                .formlogin()\n                .authenticationfailurehandler((webfilterexchange, exception) -> { //验证失败处理器(可以单独创建类处理)\n                    webfilterexchange.getexchange().getresponse().setstatuscode(httpstatus.unauthorized);\n                    map<string, string> responsemap = new hashmap<>();\n                    responsemap.put("code", "failure");\n                    if (exception instanceof usernamenotfoundexception) {\n                        responsemap.put("msg", "用户不存在 " + exception.getmessage());\n                    } else if (exception instanceof badcredentialsexception) {\n                        responsemap.put("msg", "密码错误 " + exception.getmessage());\n                    } else if (exception instanceof lockedexception) {\n                        responsemap.put("msg", "用户锁定 " + exception.getmessage());\n                    } else if (exception instanceof accountexpiredexception) {\n                        responsemap.put("msg", "账户过期 " + exception.getmessage());\n                    } else if (exception instanceof disabledexception) {\n                        responsemap.put("msg", "账户不可用 " + exception.getmessage());\n                    } else {\n                        responsemap.put("msg", "系统错误 " + exception.getmessage());\n                    }\n                    //responsemap.put("msg", exception.getmessage());\n                    return writewith(webfilterexchange.getexchange(), responsemap);\n                })\n                .loginpage("/login")\n                .authenticationsuccesshandler((webfilterexchange, authentication) -> { //验证成功处理器(可以单独创建类处理)\n                    user user = (user)authentication.getprincipal();\n                    userservice.savecacheuser(user);\n                    string token = jwttokenutils.createtoken(user.getusername(), -1);\n                    map<string, string> responsemap = new hashmap<>();\n                    responsemap.put("code", "success");\n                    responsemap.put("data", token);\n                    return writewith(webfilterexchange.getexchange(), responsemap);\n                }).and()\n                .authorizeexchange()//请求进行授权\n                .pathmatchers(httpmethod.options).permitall()//特殊请求过滤\n                .pathmatchers("/login").permitall()//登录不需要验证\n                .anyexchange()//任何请求\n                .authenticated()//都需要身份认证\n                .and().logout()\n                .logoutsuccesshandler((webfilterexchange, authentication) -> { //退出成功处理器(可以单独创建类处理)\n                    map<string, string> responsemap = new hashmap<>();\n                    responsemap.put("code", "logout");\n                    responsemap.put("msg", "退出成功");\n                    return writewith(webfilterexchange.getexchange(), responsemap);\n                }).and()\n                .exceptionhandling()\n                .accessdeniedhandler((exchange, denied) -> { // 无权限访问处理器(可以单独创建类处理)\n                    map<string, string> responsemap = new hashmap<>();\n                    responsemap.put("code", "denied");\n                    responsemap.put("msg", "账户无权限访问");\n                    return writewith(exchange, responsemap);\n                });\n\n        return http.build();\n    }\n\n    /**\n     * 输出响应信息\n     * @param exchange\n     * @param responsemap\n     * @return\n     */\n    public mono<void> writewith(serverwebexchange exchange, map<string, string> responsemap){\n        serverhttpresponse response = exchange.getresponse();\n        string body = jsonobject.tojsonstring(responsemap);\n        databuffer buffer = null;\n        try{\n            buffer = response.bufferfactory().wrap(body.getbytes("utf-8"));\n        }catch(unsupportedencodingexception ue){\n            ue.printstacktrace();\n        }\n        return response.writewith(mono.just(buffer));\n    }\n\n}\n\n\n创建上下文验证器\n\njwtsecuritycontextrepository.java\n\npackage com.webflux.demo.handler;\n\nimport com.webflux.demo.service.userservice;\nimport com.webflux.demo.util.jwttokenutils;\nimport lombok.extern.slf4j.slf4j;\nimport org.apache.commons.lang3.stringutils;\nimport org.springframework.http.httpheaders;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.core.authentication;\nimport org.springframework.security.core.context.securitycontext;\nimport org.springframework.security.core.context.securitycontextimpl;\nimport org.springframework.security.core.userdetails.reactiveuserdetailsservice;\nimport org.springframework.security.core.userdetails.userdetails;\nimport org.springframework.security.web.server.context.serversecuritycontextrepository;\nimport org.springframework.web.server.serverwebexchange;\nimport reactor.core.publisher.mono;\n\nimport javax.annotation.resource;\n\n/**\n * @description 获取请求头中带过来的token值，解析并验证用户信息\n * @author jl\n * @version v1.0\n */\n@slf4j\npublic class jwtsecuritycontextrepository implements serversecuritycontextrepository {\n\n    private userservice userservice;\n\n    public jwtsecuritycontextrepository(userservice userservice){\n        this.userservice = userservice;\n    }\n\n    @override\n    public mono<void> save(serverwebexchange exchange, securitycontext context) {\n        return mono.empty();\n    }\n\n    @override\n    public mono<securitycontext> load(serverwebexchange exchange) {\n        log.info("加载token:jwtsecuritycontextrepository");\n        string path = exchange.getrequest().getpath().tostring();\n        // 过滤路径\n        if ("/login".equals(path)){\n            return mono.empty();\n        }\n        string token = exchange.getrequest().getheaders().getfirst(httpheaders.authorization);\n        if (stringutils.isnotblank(token)){\n            // token能正常解析，表示token有效并对应数据库已知用户\n            string subject = jwttokenutils.parsetoken(token);\n            authentication newauthentication = new usernamepasswordauthenticationtoken(subject, subject);\n            return new reactiveauthenticationmanager(){\n                @override\n                public mono<authentication> authenticate(authentication authentication) {\n                    // 如果对token有足够的安全认可，可以采用无状态凭证策略，将username和authorities放置在token串中解析获取，此处就可以不用查询数据库验证\n                    mono<userdetails> userdetails = userservice.findbyusername(authentication.getprincipal().tostring());\n                    userdetails user = userdetails.block();\n                    if (user == null){\n                        throw new disabledexception("账户不可用");\n                    }\n                    authentication auth = new usernamepasswordauthenticationtoken(user.getusername(), null, user.getauthorities());\n                    return mono.just(auth);\n                }\n            }.authenticate(newauthentication).map(securitycontextimpl::new);\n        }else {\n            return mono.empty();\n        }\n    }\n}\n\n\n创建用户身份验证业务类\n\nuserservice.java\n\npackage com.webflux.demo.service;\n\nimport org.springframework.security.core.userdetails.reactiveuserdetailsservice;\nimport org.springframework.security.core.userdetails.user;\nimport org.springframework.security.core.userdetails.userdetails;\nimport org.springframework.security.core.userdetails.usernamenotfoundexception;\nimport org.springframework.security.crypto.factory.passwordencoderfactories;\nimport org.springframework.security.crypto.password.passwordencoder;\nimport org.springframework.stereotype.service;\nimport reactor.core.publisher.mono;\n\nimport java.util.hashmap;\nimport java.util.map;\n\n/**\n * @description 用户信息查询与登录状态保存\n * @author jl\n * @date 2021/08/12\n * @version v1.0\n */\n@service\npublic class userservice implements reactiveuserdetailsservice {\n\n    private static map<string,userdetails> usermap = new hashmap<>();\n\n    /**\n     * 获取指定用户信息与登录信息进行验证\n     * @param username\n     * @return\n     */\n    @override\n    public mono<userdetails> findbyusername(string username) {\n        userdetails userdetails = querycacheuser(username);\n        if (userdetails != null){\n            return mono.just(userdetails);\n        }else {\n            return mono.just(querydbuser(username));\n        }\n    }\n\n    /**\n     * 模拟查询redis缓存数据\n     * @param username\n     * @return\n     */\n    public userdetails querycacheuser(string username){\n        return usermap.get(username);\n    }\n\n    /**\n     * 模拟登录成功后保存redis缓存中\n     * @param userdetails\n     */\n    public void savecacheuser(userdetails userdetails){\n        usermap.put(userdetails.getusername(), userdetails);\n    }\n\n    /**\n     * 模拟查询数据库\n     * @param username\n     * @return\n     */\n    public userdetails querydbuser(string username){\n        userdetails userdetails = null;\n        passwordencoder encoder = passwordencoderfactories.createdelegatingpasswordencoder();\n        if (username.equals("user")){\n            userdetails = user.withusername("user")\n                    .password(encoder.encode("user"))\n                    .roles("user")\n                    .build();\n        }else if (username.equals("admin")) {\n            userdetails = user.withusername("admin")\n                    .password(encoder.encode("admin"))\n                    .roles("user", "admin")\n                    .build();\n        }else {\n            throw new usernamenotfoundexception("无此账户");\n        }\n        system.out.println(userdetails.getpassword());\n        return userdetails;\n    }\n\n}\n\n\n创建jwt工具类\n\njwttokenutils.java\n\npackage com.webflux.demo.util;\n\nimport com.auth0.jwt.jwt;\nimport com.auth0.jwt.jwtcreator;\nimport com.auth0.jwt.algorithms.algorithm;\nimport com.auth0.jwt.exceptions.signatureverificationexception;\nimport com.auth0.jwt.exceptions.tokenexpiredexception;\nimport com.auth0.jwt.interfaces.claim;\nimport org.apache.commons.lang3.time.dateutils;\n\nimport java.util.date;\nimport java.util.hashmap;\nimport java.util.map;\n\n/**\n * @description jwt跨域管理token工具类\n * @author jl\n * @version v1.0\n */\npublic class jwttokenutils {\n\n    /**\n     json web token（缩写 jwt）是目前最流行的跨域认证解决方案。\n     jwt 的三个部分依次如下\n     header（头部）:是一个 json 对象，描述 jwt 的元数据{ "alg": "hs256", typ": "jwt" }\n     payload（负载）:也是一个 json 对象，用来存放实际需要传递的数据,jwt 规定了7个官方字段:\n         iss (issuer)：签发人\n         exp (expiration time)：过期时间\n         sub (subject)：主题\n         aud (audience)：受众\n         nbf (not before)：生效时间\n         iat (issued at)：签发时间\n         jti (jwt id)：编号\n     signature（签名）:对前两部分的签名，防止数据篡改\n\n     1.jwt中header头和payload有效载荷序列化的算法都用到了base64url，签名哈希部分是对header与payload两部分数据签名\n     2.客户端接收服务器返回的jwt，将其存储在cookie或localstorage中，客户端将在与服务器交互中都会带jwt，将它放入http请求的header authorization字段中\n     3.jwt的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限\n     4.jwt本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限\n     5.jwt不建议使用http协议来传输代码，而是使用加密的https协议进行传输\n     */\n\n    /**\n     * 加密密钥\n     */\n    private static final string secret = "f2f4f94c9065_wnmx01w27mqnpc3btuqkty_23p0pvladj86o5xznure";\n\n    /**\n     * jwt创建token，考虑安全性，token中不因该放入太多信息（勿放密码之类的敏感信息），只放入关键字段值即可，如用户id\n     * @param sub     主题（可以放入关键数据，如:userid, 用户唯一值等）\n     * @param timeout 过期时长（秒）\n     * @return\n     */\n    public static string createtoken(string sub, int timeout) {\n        jwtcreator.builder builder = jwt.create();\n        builder.withsubject(sub);//主题\n        builder.withissuer("pro-server");\n        if (timeout>0) {\n            builder.withexpiresat(dateutils.addseconds(new date(), timeout));//过期时间\n        }\n        return builder.sign(algorithm.hmac256(secret));\n    }\n\n    /**\n     * 对jwt创建的token进行验签与解析，返回subject（主题）中存放的内容\n     * @param token\n     * @return\n     * @throws tokenexpiredexception          会话超时异常\n     * @throws signatureverificationexception 验签无效异常\n     */\n    public static string parsetoken(string token) throws tokenexpiredexception, signatureverificationexception {\n        return jwt.require(algorithm.hmac256(secret)).build().verify(token).getsubject();\n    }\n\n    /**\n     * jwt创建token，考虑安全性，token中不因该放入太多信息（勿放密码之类的敏感信息）\n     * @param loadmap   数据集合\n     * @param timeout   过期时长（秒）\n     * @return\n     */\n    public static string createtoken(map<string, object> loadmap, int timeout) {\n        jwtcreator.builder builder = jwt.create();\n        loadmap.foreach((k, v) -> {\n            if (v instanceof string) {\n                builder.withclaim(k, (string) v);\n            } else if (v instanceof date) {\n                builder.withclaim(k, (date) v);\n            } else if (v instanceof long) {\n                builder.withclaim(k, (long) v);\n            } else if (v instanceof integer) {\n                builder.withclaim(k, (integer) v);\n            } else if (v instanceof boolean) {\n                builder.withclaim(k, (boolean) v);\n            }\n        });\n        builder.withissuer("pro-server");\n        if (timeout>0) {\n            builder.withexpiresat(dateutils.addseconds(new date(), timeout));//过期时间\n        }\n        return builder.sign(algorithm.hmac256(secret));\n    }\n\n    /**\n     * 对jwt创建的token进行验签与解析，返回集合\n     * @param token\n     * @return\n     * @throws tokenexpiredexception          会话超时异常\n     * @throws signatureverificationexception 验签无效异常\n     */\n    public static map<string, object> parsetokentomap(string token) throws tokenexpiredexception, signatureverificationexception {\n        map<string, claim> claimmap = jwt.require(algorithm.hmac256(secret)).build().verify(token).getclaims();\n        if (claimmap == null){\n            return null;\n        }\n        map<string, object> loadmap = new hashmap<>();\n        claimmap.foreach((k, v) -> {\n            object obj = null;\n            if (v.asstring() != null) {\n                obj = v.asstring();\n            } else if (v.asboolean() != null) {\n                obj = v.asboolean();\n            } else if (v.asdate() != null || v.aslong() != null) {//date类型按long方式来处理\n                obj = v.aslong();\n            } else if (v.asint() != null) {\n                obj = v.asint();\n            }\n            loadmap.put(k, obj);\n        });\n        return loadmap;\n    }\n}\n\n\n项目测试\n\n1.启动项目\n\n运行jwtappstart\n\n2.测试未登录状态，访问/user接口\n\nhttp://127.0.0.1:8080/user\n\n{\n    "msg": "您还未登录",\n    "code": "failure"\n}\n\n\n3.测试权限为user的普通用户登录接口\n\npost http://127.0.0.1:8080/login\n\nusername=user\n\npassword=user\n\n// data返回为jwt生成的token值，后续请求需在http的headers中添加authorization=token值\n{\n    "code": "success",\n    "data": "eyj0exaioijkv1qilcjhbgcioijiuzi1nij9.eyjzdwiioij1c2vyiiwiaxnzijoichjvlxnlcnzlcij9.9etmhl5fd0iiajfgwvaweijenute34ou4lvzcaenbvc"\n}\n\n\n注：通过post访问/login，属于springsecurity安全验证框架默认拦截内置登录路径；\n\n4.测试登录后访问/user接口\n\nhttp请求headers中添加authorization=token值\n\nget http://127.0.0.1:8080/user\n\nhello user\n\n\n5.测试登录后访问/admin接口\n\nhttp请求headers中添加authorization=token值\n\nget http://127.0.0.1:8080/admin\n\n//因控制器admin方法上有@preauthorize("hasrole(\'admin\')")注释，则需要验证用户权限为admin才能访问\n{\n    "msg": "账户无权限访问",\n    "code": "denied"\n}\n\n\n6.测试退出\n\nhttp请求headers中添加authorization=token值\n\npost http://127.0.0.1:8080/logout\n\n{\n    "msg": "退出成功",\n    "code": "logout"\n}\n\n\n注：通过post访问/logout，属于springsecurity安全验证框架默认拦截内置退出路径；\n\n总结\n\n本项目示例演示了在springboot中用webflux非阻塞web服务集成springsecurity安全验证框架，基于netty容器上运行，并增加jwt数字签名，通过jwt识别用户唯一身份，通过springsecurity验证用户合法身份以及获取用户role角色，通过@preauthorize注解标签，识别用户访问控制器方法是否具有权限角色；本示例过程只是基础演示，实际项目应用根据业务场景和要求对身份安全、权限管理会更加复杂;\n\n本文转自 https://blog.csdn.net/jilo88/article/details/120026353，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"配置--2.全局过滤器",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--2.%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8.html",relativePath:"zs-ee-框架/cloud-gateway/配置--2.全局过滤器.md",key:"v-8d895560",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--2.%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8.html",lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:null,content:"# 配置--2.全局过滤器",normalizedContent:"# 配置--2.全局过滤器",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"spring--1.3.bean实例化基本流程",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.3.bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html",relativePath:"zs-ee-框架/spring/spring--1.3.bean实例化基本流程.md",key:"v-ab742efa",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.3.bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html",headers:[{level:2,title:"Bean实例化的基本流程",slug:"bean实例化的基本流程",normalizedTitle:"bean实例化的基本流程",charIndex:34},{level:2,title:"Spring的后处理器",slug:"spring的后处理器",normalizedTitle:"spring的后处理器",charIndex:63},{level:3,title:"BeanFactoryPostProcessor",slug:"beanfactorypostprocessor",normalizedTitle:"beanfactorypostprocessor",charIndex:81},{level:3,title:"案例：注解扫描",slug:"案例-注解扫描",normalizedTitle:"案例：注解扫描",charIndex:1913},{level:3,title:"BeanPostProcessor",slug:"beanpostprocessor",normalizedTitle:"beanpostprocessor",charIndex:5966},{level:3,title:"案例：日志增强",slug:"案例-日志增强",normalizedTitle:"案例：日志增强",charIndex:6749},{level:2,title:"Spring Bean的生命周期",slug:"spring-bean的生命周期",normalizedTitle:"spring bean的生命周期",charIndex:7931},{level:3,title:"实例属性填充",slug:"实例属性填充",normalizedTitle:"实例属性填充",charIndex:7960},{level:3,title:"循环引用",slug:"循环引用",normalizedTitle:"循环引用",charIndex:7973},{level:2,title:"aware接口",slug:"aware接口",normalizedTitle:"aware接口",charIndex:8096},{level:2,title:"Spring IOC整体流程总结",slug:"spring-ioc整体流程总结",normalizedTitle:"spring ioc整体流程总结",charIndex:8110}],lastUpdated:"2024年1月16日星期二晚上7点41分",lastUpdatedTimestamp:1705405305e3,headersStr:"Bean实例化的基本流程 Spring的后处理器 BeanFactoryPostProcessor 案例：注解扫描 BeanPostProcessor 案例：日志增强 Spring Bean的生命周期 实例属性填充 循环引用 aware接口 Spring IOC整体流程总结",content:'# spring--1.3.bean实例化基本流程\n\n\n\n\n\n\n# Bean实例化的基本流程\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Spring的后处理器\n\n\n\n\n# BeanFactoryPostProcessor\n\n\n\n\n\npublic class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        System.out.println("MyBeanFactoryPostProcessor的postProcessBeanFactory");\n        //System.out.println("beanDefinitionMap填充完毕后回调该方法");\n        //注册BeanDefinition\n        BeanDefinition beanDefinition = new RootBeanDefinition();\n        beanDefinition.setBeanClassName("com.itheima.dao.impl.PersonDaoImpl");\n        //强转成DefaultListableBeanFactory\n        DefaultListableBeanFactory defaultListableBeanFactory = (DefaultListableBeanFactory) beanFactory;\n        defaultListableBeanFactory.registerBeanDefinition("personDao",beanDefinition);\n        //修改某个Beandifinition\n        BeanDefinition beanDefinition = beanFactory.getBeanDefinition("userService");\n        beanDefinition.setBeanClassName("com.itheima.dao.impl.UserDaoImpl");\n    }\n}\n\n\npublic class MyBeanDefinitionRegistryPostProcessor implements BeanDefinitionRegistryPostProcessor {\n    @Override\n    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry beanDefinitionRegistry) throws BeansException {\n        System.out.println("MyBeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry方法");\n        //注册Beandefinition\n        BeanDefinition beanDefinition = new RootBeanDefinition();\n        beanDefinition.setBeanClassName("com.itheima.dao.impl.PersonDaoImpl");\n        beanDefinitionRegistry.registerBeanDefinition("personDao",beanDefinition);\n    }\n\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {\n        System.out.println("MyBeanDefinitionRegistryPostProcessor的postProcessBeanFactory方法");\n    }\n}\n\n\n\n\n\n# 案例：注解扫描\n\n\n\n> MyComponent.java\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyComponent {\n\n    String value();\n}\n\n\n> BaseClassScanUtils\n\npackage com.itheima.utils;\n\nimport com.itheima.anno.MyComponent;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.core.io.support.ResourcePatternResolver;\nimport org.springframework.core.type.classreading.CachingMetadataReaderFactory;\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\nimport org.springframework.util.ClassUtils;\n\nimport java.lang.annotation.Annotation;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BaseClassScanUtils {\n\n    //设置资源规则\n    private static final String RESOURCE_PATTERN = "/**/*.class";\n\n    public static Map<String, Class> scanMyComponentAnnotation(String basePackage) {\n\n        //创建容器存储使用了指定注解的Bean字节码对象\n        Map<String, Class> annotationClassMap = new HashMap<String, Class>();\n\n        //spring工具类，可以获取指定路径下的全部类\n        ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n        try {\n            String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +\n                    ClassUtils.convertClassNameToResourcePath(basePackage) + RESOURCE_PATTERN;\n            Resource[] resources = resourcePatternResolver.getResources(pattern);\n            //MetadataReader 的工厂类\n            MetadataReaderFactory refractory = new CachingMetadataReaderFactory(resourcePatternResolver);\n            for (Resource resource : resources) {\n                //用于读取类信息\n                MetadataReader reader = refractory.getMetadataReader(resource);\n                //扫描到的class\n                String classname = reader.getClassMetadata().getClassName();\n                Class<?> clazz = Class.forName(classname);\n                //判断是否属于指定的注解类型\n                if(clazz.isAnnotationPresent(MyComponent.class)){\n                    //获得注解对象\n                    MyComponent annotation = clazz.getAnnotation(MyComponent.class);\n                    //获得属value属性值\n                    String beanName = annotation.value();\n                    //判断是否为""\n                    if(beanName!=null&&!beanName.equals("")){\n                        //存储到Map中去\n                        annotationClassMap.put(beanName,clazz);\n                        continue;\n                    }\n\n                    //如果没有为"",那就把当前类的类名作为beanName\n                    annotationClassMap.put(clazz.getSimpleName(),clazz);\n\n                }\n            }\n        } catch (Exception exception) {\n        }\n\n        return annotationClassMap;\n    }\n\n    public static void main(String[] args) {\n        Map<String, Class> stringClassMap = scanMyComponentAnnotation("com.itheima");\n        System.out.println(stringClassMap);\n    }\n}\n\n\n> BeanDefinitionRegistryPostProcessor\n\npublic class MyComponentBeanFactoryPostProcessor implements BeanDefinitionRegistryPostProcessor {\n    @Override\n    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry beanDefinitionRegistry) throws BeansException {\n        //通过扫描工具去扫描指定包及其子包下的所有类，收集使用@Mycomponent的注解的类\n        Map<String, Class> myComponentAnnotationMap = BaseClassScanUtils.scanMyComponentAnnotation("com.itheima");\n        //遍历Map，组装BeanDefinition进行注册\n        myComponentAnnotationMap.forEach((beanName,clazz)->{\n            //获得beanClassName\n            String beanClassName = clazz.getName();//com.itheima.beans.OtherBean\n            //创建BeanDefinition\n            BeanDefinition beanDefinition = new RootBeanDefinition();\n            beanDefinition.setBeanClassName(beanClassName);\n            //注册\n            beanDefinitionRegistry.registerBeanDefinition(beanName,beanDefinition);\n        });\n    }\n\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {}\n}\n\n\n\n# BeanPostProcessor\n\n\n\npackage org.springframework.beans.factory.config;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.lang.Nullable;\n\npublic interface BeanPostProcessor {\n    @Nullable\n    default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        return bean;\n    }\n\n    @Nullable\n    default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        return bean;\n    }\n}\n\n\n> 演示\n\npublic class HaohaoBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println("HaohaoBeanPostProcessor执行....");\n        return bean;\n    }\n}\n\n\n\n# 案例：日志增强\n\n\n\n\n\npackage com.itheima.processor;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Date;\n\npublic class TimeLogBeanPostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n\n        //使用动态代理对目标Bean进行增强，返回proxy对象，进而存储到单例池singletonObjects中\n        Object beanProxy = Proxy.newProxyInstance(\n                bean.getClass().getClassLoader(),\n                bean.getClass().getInterfaces(),\n                (proxy, method, args) -> {\n                    //1、输出开始时间\n                    System.out.println("方法：" + method.getName() + "-开始时间：" + new Date());\n                    //2、执行目标方法\n                    Object result = method.invoke(bean, args);\n                    //3、输出结束时间\n                    System.out.println("方法：" + method.getName() + "-结束时间：" + new Date());\n\n                    return result;\n                }\n        );\n        return beanProxy;\n    }\n}\n\n\n\n\n\n# Spring Bean的生命周期\n\n\n\n\n\n\n\n\n\n\n# 实例属性填充\n\n\n\n\n# 循环引用\n\n\n\n\n\n\n\n@FunctionalInterface\npublic interface ObjectFactory<T> {\n    T getObject() throws BeansException;\n}\n\n\n\n\n\n\n\n\n\n# aware接口\n\n\n\n\n# Spring IOC整体流程总结\n\n',normalizedContent:'# spring--1.3.bean实例化基本流程\n\n\n\n\n\n\n# bean实例化的基本流程\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# spring的后处理器\n\n\n\n\n# beanfactorypostprocessor\n\n\n\n\n\npublic class mybeanfactorypostprocessor implements beanfactorypostprocessor {\n    @override\n    public void postprocessbeanfactory(configurablelistablebeanfactory beanfactory) throws beansexception {\n        system.out.println("mybeanfactorypostprocessor的postprocessbeanfactory");\n        //system.out.println("beandefinitionmap填充完毕后回调该方法");\n        //注册beandefinition\n        beandefinition beandefinition = new rootbeandefinition();\n        beandefinition.setbeanclassname("com.itheima.dao.impl.persondaoimpl");\n        //强转成defaultlistablebeanfactory\n        defaultlistablebeanfactory defaultlistablebeanfactory = (defaultlistablebeanfactory) beanfactory;\n        defaultlistablebeanfactory.registerbeandefinition("persondao",beandefinition);\n        //修改某个beandifinition\n        beandefinition beandefinition = beanfactory.getbeandefinition("userservice");\n        beandefinition.setbeanclassname("com.itheima.dao.impl.userdaoimpl");\n    }\n}\n\n\npublic class mybeandefinitionregistrypostprocessor implements beandefinitionregistrypostprocessor {\n    @override\n    public void postprocessbeandefinitionregistry(beandefinitionregistry beandefinitionregistry) throws beansexception {\n        system.out.println("mybeandefinitionregistrypostprocessor的postprocessbeandefinitionregistry方法");\n        //注册beandefinition\n        beandefinition beandefinition = new rootbeandefinition();\n        beandefinition.setbeanclassname("com.itheima.dao.impl.persondaoimpl");\n        beandefinitionregistry.registerbeandefinition("persondao",beandefinition);\n    }\n\n    @override\n    public void postprocessbeanfactory(configurablelistablebeanfactory configurablelistablebeanfactory) throws beansexception {\n        system.out.println("mybeandefinitionregistrypostprocessor的postprocessbeanfactory方法");\n    }\n}\n\n\n\n\n\n# 案例：注解扫描\n\n\n\n> mycomponent.java\n\n@target(elementtype.type)\n@retention(retentionpolicy.runtime)\npublic @interface mycomponent {\n\n    string value();\n}\n\n\n> baseclassscanutils\n\npackage com.itheima.utils;\n\nimport com.itheima.anno.mycomponent;\nimport org.springframework.core.io.resource;\nimport org.springframework.core.io.support.pathmatchingresourcepatternresolver;\nimport org.springframework.core.io.support.resourcepatternresolver;\nimport org.springframework.core.type.classreading.cachingmetadatareaderfactory;\nimport org.springframework.core.type.classreading.metadatareader;\nimport org.springframework.core.type.classreading.metadatareaderfactory;\nimport org.springframework.util.classutils;\n\nimport java.lang.annotation.annotation;\nimport java.util.hashmap;\nimport java.util.list;\nimport java.util.map;\n\npublic class baseclassscanutils {\n\n    //设置资源规则\n    private static final string resource_pattern = "/**/*.class";\n\n    public static map<string, class> scanmycomponentannotation(string basepackage) {\n\n        //创建容器存储使用了指定注解的bean字节码对象\n        map<string, class> annotationclassmap = new hashmap<string, class>();\n\n        //spring工具类，可以获取指定路径下的全部类\n        resourcepatternresolver resourcepatternresolver = new pathmatchingresourcepatternresolver();\n        try {\n            string pattern = resourcepatternresolver.classpath_all_url_prefix +\n                    classutils.convertclassnametoresourcepath(basepackage) + resource_pattern;\n            resource[] resources = resourcepatternresolver.getresources(pattern);\n            //metadatareader 的工厂类\n            metadatareaderfactory refractory = new cachingmetadatareaderfactory(resourcepatternresolver);\n            for (resource resource : resources) {\n                //用于读取类信息\n                metadatareader reader = refractory.getmetadatareader(resource);\n                //扫描到的class\n                string classname = reader.getclassmetadata().getclassname();\n                class<?> clazz = class.forname(classname);\n                //判断是否属于指定的注解类型\n                if(clazz.isannotationpresent(mycomponent.class)){\n                    //获得注解对象\n                    mycomponent annotation = clazz.getannotation(mycomponent.class);\n                    //获得属value属性值\n                    string beanname = annotation.value();\n                    //判断是否为""\n                    if(beanname!=null&&!beanname.equals("")){\n                        //存储到map中去\n                        annotationclassmap.put(beanname,clazz);\n                        continue;\n                    }\n\n                    //如果没有为"",那就把当前类的类名作为beanname\n                    annotationclassmap.put(clazz.getsimplename(),clazz);\n\n                }\n            }\n        } catch (exception exception) {\n        }\n\n        return annotationclassmap;\n    }\n\n    public static void main(string[] args) {\n        map<string, class> stringclassmap = scanmycomponentannotation("com.itheima");\n        system.out.println(stringclassmap);\n    }\n}\n\n\n> beandefinitionregistrypostprocessor\n\npublic class mycomponentbeanfactorypostprocessor implements beandefinitionregistrypostprocessor {\n    @override\n    public void postprocessbeandefinitionregistry(beandefinitionregistry beandefinitionregistry) throws beansexception {\n        //通过扫描工具去扫描指定包及其子包下的所有类，收集使用@mycomponent的注解的类\n        map<string, class> mycomponentannotationmap = baseclassscanutils.scanmycomponentannotation("com.itheima");\n        //遍历map，组装beandefinition进行注册\n        mycomponentannotationmap.foreach((beanname,clazz)->{\n            //获得beanclassname\n            string beanclassname = clazz.getname();//com.itheima.beans.otherbean\n            //创建beandefinition\n            beandefinition beandefinition = new rootbeandefinition();\n            beandefinition.setbeanclassname(beanclassname);\n            //注册\n            beandefinitionregistry.registerbeandefinition(beanname,beandefinition);\n        });\n    }\n\n    @override\n    public void postprocessbeanfactory(configurablelistablebeanfactory configurablelistablebeanfactory) throws beansexception {}\n}\n\n\n\n# beanpostprocessor\n\n\n\npackage org.springframework.beans.factory.config;\n\nimport org.springframework.beans.beansexception;\nimport org.springframework.lang.nullable;\n\npublic interface beanpostprocessor {\n    @nullable\n    default object postprocessbeforeinitialization(object bean, string beanname) throws beansexception {\n        return bean;\n    }\n\n    @nullable\n    default object postprocessafterinitialization(object bean, string beanname) throws beansexception {\n        return bean;\n    }\n}\n\n\n> 演示\n\npublic class haohaobeanpostprocessor implements beanpostprocessor {\n    @override\n    public object postprocessafterinitialization(object bean, string beanname) throws beansexception {\n        system.out.println("haohaobeanpostprocessor执行....");\n        return bean;\n    }\n}\n\n\n\n# 案例：日志增强\n\n\n\n\n\npackage com.itheima.processor;\n\nimport org.springframework.beans.beansexception;\nimport org.springframework.beans.factory.config.beanpostprocessor;\n\nimport java.lang.reflect.invocationhandler;\nimport java.lang.reflect.method;\nimport java.lang.reflect.proxy;\nimport java.util.date;\n\npublic class timelogbeanpostprocessor implements beanpostprocessor {\n\n    @override\n    public object postprocessafterinitialization(object bean, string beanname) throws beansexception {\n\n        //使用动态代理对目标bean进行增强，返回proxy对象，进而存储到单例池singletonobjects中\n        object beanproxy = proxy.newproxyinstance(\n                bean.getclass().getclassloader(),\n                bean.getclass().getinterfaces(),\n                (proxy, method, args) -> {\n                    //1、输出开始时间\n                    system.out.println("方法：" + method.getname() + "-开始时间：" + new date());\n                    //2、执行目标方法\n                    object result = method.invoke(bean, args);\n                    //3、输出结束时间\n                    system.out.println("方法：" + method.getname() + "-结束时间：" + new date());\n\n                    return result;\n                }\n        );\n        return beanproxy;\n    }\n}\n\n\n\n\n\n# spring bean的生命周期\n\n\n\n\n\n\n\n\n\n\n# 实例属性填充\n\n\n\n\n# 循环引用\n\n\n\n\n\n\n\n@functionalinterface\npublic interface objectfactory<t> {\n    t getobject() throws beansexception;\n}\n\n\n\n\n\n\n\n\n\n# aware接口\n\n\n\n\n# spring ioc整体流程总结\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705404021e3},{title:"配置--0.断言工厂",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--0.%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.html",relativePath:"zs-ee-框架/cloud-gateway/配置--0.断言工厂.md",key:"v-6606fa4b",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E9%85%8D%E7%BD%AE--0.%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.html",headers:[{level:2,title:"内置断言工厂",slug:"内置断言工厂",normalizedTitle:"内置断言工厂",charIndex:17},{level:3,title:"After",slug:"after",normalizedTitle:"after",charIndex:167},{level:3,title:"Before",slug:"before",normalizedTitle:"before",charIndex:469},{level:3,title:"Between",slug:"between",normalizedTitle:"between",charIndex:695},{level:3,title:"Cookie",slug:"cookie",normalizedTitle:"cookie",charIndex:971},{level:3,title:"Header",slug:"header",normalizedTitle:"header",charIndex:1247},{level:3,title:"Host",slug:"host",normalizedTitle:"host",charIndex:1513},{level:3,title:"Method",slug:"method",normalizedTitle:"method",charIndex:1722},{level:3,title:"Path",slug:"path",normalizedTitle:"path",charIndex:1911},{level:3,title:"Query",slug:"query",normalizedTitle:"query",charIndex:2345},{level:3,title:"RemoteAddr",slug:"remoteaddr",normalizedTitle:"remoteaddr",charIndex:2999},{level:3,title:"Weight",slug:"weight",normalizedTitle:"weight",charIndex:3481},{level:2,title:"自定义断言工厂",slug:"自定义断言工厂",normalizedTitle:"自定义断言工厂",charIndex:3941}],lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:"内置断言工厂 After Before Between Cookie Header Host Method Path Query RemoteAddr Weight 自定义断言工厂",content:'# 配置--0.断言工厂\n\n\n# 内置断言工厂\n\nhttps://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/request-predicates-factories.html#path-route-predicate-factory\n\n\n# After\n\n日期时间（Java 的 ZonedDateTime 类型）。该断言匹配发生在指定日期时间之后的所有请求。以下是一个配置 After route 谓词的示例：\n\nExample 1. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: after_route\n        uri: https://example.org\n        predicates:\n        - After=2024-01-11T17:11:15.438+08:00[Asia/Shanghai]\n\n\n\n# Before\n\nExample 2. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: before_route\n        uri: https://example.org\n        predicates:\n        - Before=2017-01-20T17:42:47.789-07:00[America/Denver]\n\n\n\n# Between\n\nExample 3. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: between_route\n        uri: https://example.org\n        predicates:\n        - Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]\n\n\n\n# Cookie\n\n接收两个参数：cookie名称和正则表达式（Java正则表达式）。 匹配具有给定名称且值与正则表达式匹配的cookie。 以下是一个配置cookie路由示例\n\nExample 4. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: cookie_route\n        uri: https://example.org\n        predicates:\n        - Cookie=chocolate, ch.p\n\n\n\n# Header\n\nthe header name and a regexp (which is a Java regular expression).\n\nExample 5. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: header_route\n        uri: https://example.org\n        predicates:\n        - Header=X-Request-Id, \\d+\n\n\n\n# Host\n\nExample 6. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: host_route\n        uri: https://example.org\n        predicates:\n        - Host=**.somehost.org,**.anotherhost.org\n\n\n\n# Method\n\nExample 7. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: method_route\n        uri: https://example.org\n        predicates:\n        - Method=GET,POST\n\n\n\n# Path\n\n路由Path断言工厂采用两个参数：一个 Spring 列表PathMatcher patterns和一个名为 的可选标志matchTrailingSlash（默认为true）。\n\napplication.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: path_route\n        uri: https://example.org\n        predicates:\n        - Path=/red/{segment},/blue/{segment}\n\n\n如果请求路径是，则此路由匹配，例如：/red/1or /red/1/or /red/blueor /blue/green。\n\nIf matchTrailingSlash is set to false, then request path /red/1/ will not be matched.\n\n\n# Query\n\na required param and an optional regexp (which is a Java regular expression).\n\nExample 9. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: query_route\n        uri: https://example.org\n        predicates:\n        - Query=green\n\n\nThe preceding route matches if the request contained a green query parameter.\n\napplication.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: query_route\n        uri: https://example.org\n        predicates:\n        - Query=red, gree.\n\n\nThe preceding route matches if the request contained a red query parameter whose value matched the gree. regexp, so green and greet would match.\n\n\n# RemoteAddr\n\nThe RemoteAddr route predicate factory takes a list (min size 1) of sources, which are CIDR-notation (IPv4 or IPv6) strings, such as 192.168.0.1/16 (where 192.168.0.1 is an IP address and 16 is a subnet mask). The following example configures a RemoteAddr route predicate:\n\nExample 10. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: remoteaddr_route\n        uri: https://example.org\n        predicates:\n        - RemoteAddr=192.168.1.1/24\n\n\n\n# Weight\n\ngroup and weight (an int). The weights are calculated per group.\n\nExample 11. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: weight_high\n        uri: https://weighthigh.org\n        predicates:\n        - Weight=group1, 8\n      - id: weight_low\n        uri: https://weightlow.org\n        predicates:\n        - Weight=group1, 2\n\n\nThis route would forward ~80% of traffic to weighthigh.org and ~20% of traffic to weighlow.org\n\n\n# 自定义断言工厂\n\n自定断言工厂主要注意一下几点：\n\n1、spring的bean\n\n2、后缀RoutePredicateFactory\n\n3、继承AbstractRoutePredicateFactory\n\n4、提供静态内部类Config\n\n5、结合shortcutFieldOrder数据绑定\n\n6、apply进行逻辑判断\n\nimport com.alibaba.cloud.commons.lang.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;\nimport org.springframework.cloud.gateway.handler.predicate.GatewayPredicate;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport javax.validation.constraints.NotNull;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\n\n/**\n * @ClassName CustomVerifyRoutePredicateFactory\n * @Description \n * @Author tigerkin\n * @Date 2022/3/14 15:15\n */\n@Component\npublic class CustomVerifyRoutePredicateFactory extends AbstractRoutePredicateFactory<CustomVerifyRoutePredicateFactory.Config> {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    /**\n     * 验证内容 key.\n     */\n    public static final String VERIFY_CONTENT_KEY = "verifyContentKey";\n\n    /**\n     * 验证内容 val.\n     */\n    public static final String VERIFY_CONTENT_VAL = "verifyContentVal";\n\n    public CustomVerifyRoutePredicateFactory() {\n        super(CustomVerifyRoutePredicateFactory.Config.class);\n    }\n\n    /**\n     * 将签名 key 与 静态类Config中的属性进行绑定\n     * 数组里面下标对应配置文件中配置\n     *\n     * @return\n     */\n    @Override\n    public List<String> shortcutFieldOrder() {\n        return Arrays.asList(VERIFY_CONTENT_KEY, VERIFY_CONTENT_VAL);\n    }\n\n    @Override\n    public Predicate<ServerWebExchange> apply(CustomVerifyRoutePredicateFactory.Config config) {\n        return new GatewayPredicate() {\n\n            /**\n             * 断言验证逻辑，返回true，则验证成功，否则失败\n             *\n             * @param serverWebExchange\n             * @return\n             */\n            @Override\n            public boolean test(ServerWebExchange serverWebExchange) {\n                HttpHeaders headers = serverWebExchange.getRequest().getHeaders();\n                String headerVal = headers.getFirst(config.getVerifyContentKey());\n                boolean result = StringUtils.equals(headerVal, config.getVerifyContentVal());\n\n                log.info("========> 自定义断言配置 key：{} val：{}", config.getVerifyContentKey(), config.getVerifyContentVal());\n                log.info("========> 自定义断言验证 status：{} val：{}", result, headerVal);\n                return result;\n            }\n\n            @Override\n            public Object getConfig() {\n                return config;\n            }\n\n            @Override\n            public String toString() {\n                return String.format("key: %s, val: %s", config.getVerifyContentKey(), config.getVerifyContentVal());\n            }\n        };\n    }\n\n    /**\n     * 定义静态类，接收自定义断言的配置信息\n     */\n    public static class Config {\n\n        @NotNull\n        private String verifyContentKey;\n\n        @NotNull\n        private String verifyContentVal;\n\n        public String getVerifyContentKey() {\n            return verifyContentKey;\n        }\n\n        public void setVerifyContentKey(String verifyContentKey) {\n            this.verifyContentKey = verifyContentKey;\n        }\n\n        public String getVerifyContentVal() {\n            return verifyContentVal;\n        }\n\n        public void setVerifyContentVal(String verifyContentVal) {\n            this.verifyContentVal = verifyContentVal;\n        }\n    }\n}\n\n\n\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: user-route # 路由ID，唯一标识，自定义命名\n          uri: lb://gateway-user\n          predicates:\n            - Path=/user-server/**\n            # 自定义的断言工厂，多个参数按逗号（,）隔开，参数对应断言工厂中shortcutFieldOrder方法定义的数组，一一对应。\n            - CustomVerify=verify, success \n',normalizedContent:'# 配置--0.断言工厂\n\n\n# 内置断言工厂\n\nhttps://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/request-predicates-factories.html#path-route-predicate-factory\n\n\n# after\n\n日期时间（java 的 zoneddatetime 类型）。该断言匹配发生在指定日期时间之后的所有请求。以下是一个配置 after route 谓词的示例：\n\nexample 1. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: after_route\n        uri: https://example.org\n        predicates:\n        - after=2024-01-11t17:11:15.438+08:00[asia/shanghai]\n\n\n\n# before\n\nexample 2. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: before_route\n        uri: https://example.org\n        predicates:\n        - before=2017-01-20t17:42:47.789-07:00[america/denver]\n\n\n\n# between\n\nexample 3. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: between_route\n        uri: https://example.org\n        predicates:\n        - between=2017-01-20t17:42:47.789-07:00[america/denver], 2017-01-21t17:42:47.789-07:00[america/denver]\n\n\n\n# cookie\n\n接收两个参数：cookie名称和正则表达式（java正则表达式）。 匹配具有给定名称且值与正则表达式匹配的cookie。 以下是一个配置cookie路由示例\n\nexample 4. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: cookie_route\n        uri: https://example.org\n        predicates:\n        - cookie=chocolate, ch.p\n\n\n\n# header\n\nthe header name and a regexp (which is a java regular expression).\n\nexample 5. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: header_route\n        uri: https://example.org\n        predicates:\n        - header=x-request-id, \\d+\n\n\n\n# host\n\nexample 6. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: host_route\n        uri: https://example.org\n        predicates:\n        - host=**.somehost.org,**.anotherhost.org\n\n\n\n# method\n\nexample 7. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: method_route\n        uri: https://example.org\n        predicates:\n        - method=get,post\n\n\n\n# path\n\n路由path断言工厂采用两个参数：一个 spring 列表pathmatcher patterns和一个名为 的可选标志matchtrailingslash（默认为true）。\n\napplication.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: path_route\n        uri: https://example.org\n        predicates:\n        - path=/red/{segment},/blue/{segment}\n\n\n如果请求路径是，则此路由匹配，例如：/red/1or /red/1/or /red/blueor /blue/green。\n\nif matchtrailingslash is set to false, then request path /red/1/ will not be matched.\n\n\n# query\n\na required param and an optional regexp (which is a java regular expression).\n\nexample 9. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: query_route\n        uri: https://example.org\n        predicates:\n        - query=green\n\n\nthe preceding route matches if the request contained a green query parameter.\n\napplication.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: query_route\n        uri: https://example.org\n        predicates:\n        - query=red, gree.\n\n\nthe preceding route matches if the request contained a red query parameter whose value matched the gree. regexp, so green and greet would match.\n\n\n# remoteaddr\n\nthe remoteaddr route predicate factory takes a list (min size 1) of sources, which are cidr-notation (ipv4 or ipv6) strings, such as 192.168.0.1/16 (where 192.168.0.1 is an ip address and 16 is a subnet mask). the following example configures a remoteaddr route predicate:\n\nexample 10. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: remoteaddr_route\n        uri: https://example.org\n        predicates:\n        - remoteaddr=192.168.1.1/24\n\n\n\n# weight\n\ngroup and weight (an int). the weights are calculated per group.\n\nexample 11. application.yml\n\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: weight_high\n        uri: https://weighthigh.org\n        predicates:\n        - weight=group1, 8\n      - id: weight_low\n        uri: https://weightlow.org\n        predicates:\n        - weight=group1, 2\n\n\nthis route would forward ~80% of traffic to weighthigh.org and ~20% of traffic to weighlow.org\n\n\n# 自定义断言工厂\n\n自定断言工厂主要注意一下几点：\n\n1、spring的bean\n\n2、后缀routepredicatefactory\n\n3、继承abstractroutepredicatefactory\n\n4、提供静态内部类config\n\n5、结合shortcutfieldorder数据绑定\n\n6、apply进行逻辑判断\n\nimport com.alibaba.cloud.commons.lang.stringutils;\nimport org.slf4j.logger;\nimport org.slf4j.loggerfactory;\nimport org.springframework.cloud.gateway.handler.predicate.abstractroutepredicatefactory;\nimport org.springframework.cloud.gateway.handler.predicate.gatewaypredicate;\nimport org.springframework.http.httpheaders;\nimport org.springframework.stereotype.component;\nimport org.springframework.web.server.serverwebexchange;\n\nimport javax.validation.constraints.notnull;\nimport java.util.arrays;\nimport java.util.list;\nimport java.util.function.predicate;\n\n/**\n * @classname customverifyroutepredicatefactory\n * @description \n * @author tigerkin\n * @date 2022/3/14 15:15\n */\n@component\npublic class customverifyroutepredicatefactory extends abstractroutepredicatefactory<customverifyroutepredicatefactory.config> {\n\n    private final logger log = loggerfactory.getlogger(this.getclass());\n\n    /**\n     * 验证内容 key.\n     */\n    public static final string verify_content_key = "verifycontentkey";\n\n    /**\n     * 验证内容 val.\n     */\n    public static final string verify_content_val = "verifycontentval";\n\n    public customverifyroutepredicatefactory() {\n        super(customverifyroutepredicatefactory.config.class);\n    }\n\n    /**\n     * 将签名 key 与 静态类config中的属性进行绑定\n     * 数组里面下标对应配置文件中配置\n     *\n     * @return\n     */\n    @override\n    public list<string> shortcutfieldorder() {\n        return arrays.aslist(verify_content_key, verify_content_val);\n    }\n\n    @override\n    public predicate<serverwebexchange> apply(customverifyroutepredicatefactory.config config) {\n        return new gatewaypredicate() {\n\n            /**\n             * 断言验证逻辑，返回true，则验证成功，否则失败\n             *\n             * @param serverwebexchange\n             * @return\n             */\n            @override\n            public boolean test(serverwebexchange serverwebexchange) {\n                httpheaders headers = serverwebexchange.getrequest().getheaders();\n                string headerval = headers.getfirst(config.getverifycontentkey());\n                boolean result = stringutils.equals(headerval, config.getverifycontentval());\n\n                log.info("========> 自定义断言配置 key：{} val：{}", config.getverifycontentkey(), config.getverifycontentval());\n                log.info("========> 自定义断言验证 status：{} val：{}", result, headerval);\n                return result;\n            }\n\n            @override\n            public object getconfig() {\n                return config;\n            }\n\n            @override\n            public string tostring() {\n                return string.format("key: %s, val: %s", config.getverifycontentkey(), config.getverifycontentval());\n            }\n        };\n    }\n\n    /**\n     * 定义静态类，接收自定义断言的配置信息\n     */\n    public static class config {\n\n        @notnull\n        private string verifycontentkey;\n\n        @notnull\n        private string verifycontentval;\n\n        public string getverifycontentkey() {\n            return verifycontentkey;\n        }\n\n        public void setverifycontentkey(string verifycontentkey) {\n            this.verifycontentkey = verifycontentkey;\n        }\n\n        public string getverifycontentval() {\n            return verifycontentval;\n        }\n\n        public void setverifycontentval(string verifycontentval) {\n            this.verifycontentval = verifycontentval;\n        }\n    }\n}\n\n\n\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: user-route # 路由id，唯一标识，自定义命名\n          uri: lb://gateway-user\n          predicates:\n            - path=/user-server/**\n            # 自定义的断言工厂，多个参数按逗号（,）隔开，参数对应断言工厂中shortcutfieldorder方法定义的数组，一一对应。\n            - customverify=verify, success \n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"spring--1.1.xml_bean的配置",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.1.xml_bean%E7%9A%84%E9%85%8D%E7%BD%AE.html",relativePath:"zs-ee-框架/spring/spring--1.1.xml_bean的配置.md",key:"v-39a0cd65",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.1.xml_bean%E7%9A%84%E9%85%8D%E7%BD%AE.html",headers:[{level:2,title:"bean的基础配置",slug:"bean的基础配置",normalizedTitle:"bean的基础配置",charIndex:32},{level:2,title:"bean的别名配置",slug:"bean的别名配置",normalizedTitle:"bean的别名配置",charIndex:48},{level:2,title:"bean的范围配置",slug:"bean的范围配置",normalizedTitle:"bean的范围配置",charIndex:64},{level:2,title:"bean的延迟加载",slug:"bean的延迟加载",normalizedTitle:"bean的延迟加载",charIndex:106},{level:2,title:"bean的初始化和销毁方法配置",slug:"bean的初始化和销毁方法配置",normalizedTitle:"bean的初始化和销毁方法配置",charIndex:122},{level:2,title:"bean的实例化配置",slug:"bean的实例化配置",normalizedTitle:"bean的实例化配置",charIndex:279},{level:3,title:"有参构造实例化",slug:"有参构造实例化",normalizedTitle:"有参构造实例化",charIndex:296},{level:3,title:"工厂实例化",slug:"工厂实例化",normalizedTitle:"工厂实例化",charIndex:310},{level:3,title:"静态工厂",slug:"静态工厂",normalizedTitle:"静态工厂",charIndex:322},{level:3,title:"实例工厂",slug:"实例工厂",normalizedTitle:"实例工厂",charIndex:831},{level:3,title:"实现FactoryBean规范延迟实例化bean",slug:"实现factorybean规范延迟实例化bean",normalizedTitle:"实现factorybean规范延迟实例化bean",charIndex:1793},{level:2,title:"bean的依赖注入配置",slug:"bean的依赖注入配置",normalizedTitle:"bean的依赖注入配置",charIndex:2193},{level:3,title:"自动装配",slug:"自动装配",normalizedTitle:"自动装配",charIndex:5017},{level:2,title:"spring的其他配置标签",slug:"spring的其他配置标签",normalizedTitle:"spring的其他配置标签",charIndex:5028},{level:3,title:"默认名称空间",slug:"默认名称空间",normalizedTitle:"默认名称空间",charIndex:5048},{level:3,title:"默认--beans",slug:"默认-beans",normalizedTitle:"默认--beans",charIndex:5061},{level:3,title:"默认--import",slug:"默认-import",normalizedTitle:"默认--import",charIndex:5077},{level:3,title:"默认--alias",slug:"默认-alias",normalizedTitle:"默认--alias",charIndex:5815},{level:3,title:"自定义标签",slug:"自定义标签",normalizedTitle:"自定义标签",charIndex:5831},{level:3,title:"context--property-placeholder",slug:"context-property-placeholder",normalizedTitle:"context--property-placeholder",charIndex:5843}],lastUpdated:"2024年1月16日星期二下午12点37分",lastUpdatedTimestamp:1705379878e3,headersStr:"bean的基础配置 bean的别名配置 bean的范围配置 bean的延迟加载 bean的初始化和销毁方法配置 bean的实例化配置 有参构造实例化 工厂实例化 静态工厂 实例工厂 实现FactoryBean规范延迟实例化bean bean的依赖注入配置 自动装配 spring的其他配置标签 默认名称空间 默认--beans 默认--import 默认--alias 自定义标签 context--property-placeholder",content:'# spring--1.1.xml_bean的配置\n\n\n\n\n# bean的基础配置\n\n\n\n\n# bean的别名配置\n\n\n\n\n# bean的范围配置\n\n\n\n\n\n\n\n> spring-webmvc环境中\n\n\n\n\n# bean的延迟加载\n\n\n\n\n# bean的初始化和销毁方法配置\n\n\n\n单例模式：只创建一次,init()做一次，ClassPathXmlApplicationContext的close()方法关闭时调用destroy() 非单例：创建一次，调一次，销毁方法不受spring管\n\n\n\nafterPropertiesSet在属性设置之后执行\n\n\n# bean的实例化配置\n\n\n\n\n# 有参构造实例化\n\n\n\n\n# 工厂实例化\n\n\n\n\n# 静态工厂\n\n作用：定义bean对象创建方式，使用静态工厂的形式创建bean，兼容早期遗留系统的升级工作\n\n\x3c!--静态工厂创建bean--\x3e\n<bean id="userService4" class="com.zs.service.UserServiceFactory" factory-method="getService"  />\n\n\npackage com.zs.spring.service;\n\nimport com.zs.spring.service.impl.UserServiceImpl;\n\n/**\n * 静态工厂\n */\npublic class UserServiceFactory {\n    public static UserService getService(){\n        return new UserServiceImpl();\n    }\n\n    public static UserService getService(String name,int age){\n        return new UserServiceImpl();\n    }\n}\n\n\n\n\n# 实例工厂\n\n作用：定义bean对象创建方式，使用实例工厂的形式创建bean，兼容早期遗留系统的升级工作\n\n\x3c!--实例工厂配置bean--\x3e\n<bean id="userServiceFactory" class="com.zs.spring.service.UserServiceFactory"></bean>\n\x3c!--实例工厂创建bean，依赖工厂对象对应的bean--\x3e\n<bean id="userServiceByFactory" factory-bean="userServiceFactory" factory-method="getServiceByFactory" ></bean>\n<bean id="userServiceByFactoryWithArgs" factory-bean="userServiceFactory" factory-method="getServiceByFactory" >\n    <constructor-arg name="name" value="xiaoshaozi"/>\n    <constructor-arg name="age" value="18"/>\n</bean>\n\n\npublic class UserServiceFactory {\n    public static UserService getService(){\n        return new UserServiceImpl();\n    }\n\n    public static UserService getService(String name,int age){\n        return new UserServiceImpl();\n    }\n\n    public UserService getServiceByFactory(){\n        return new UserServiceImpl();\n    }\n\n    public UserService getServiceByFactory(String name,int age){\n        return new UserServiceImpl();\n    }\n}\n\n\n\n# 实现FactoryBean规范延迟实例化bean\n\n> FactoryBean是spring的接口，用来创建bean使用的，会延迟创建bean\n\npackage org.springframework.beans.factory;\n\nimport org.springframework.lang.Nullable;\n\npublic interface FactoryBean<T> {\n\n\tString OBJECT_TYPE_ATTRIBUTE = "factoryBeanObjectType";\n\n\t@Nullable\n\tT getObject() throws Exception;\n\n\t@Nullable\n\tClass<?> getObjectType();\n\t\n\tdefault boolean isSingleton() {\n\t\treturn true;\n\t}\n}\n\n\n\n\n\n\n\n# bean的依赖注入配置\n\n\n\n\n\npackage com.zs.spring.service.impl;\n\n\nimport com.zs.spring.dao.UserDao;\nimport com.zs.spring.service.UserService;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\n\n\npublic class UserServiceImpl implements UserService {\n\n    private List<String> stringList;\n    private List<UserDao> userDaoList;\n    private UserDao userDao;\n    private Set<UserDao> userDaoSet;\n    private Map<String,UserDao> userDaoMap;\n\n    private Properties properties;\n\n    public void setStringList(List<String> stringList) {\n        this.stringList = stringList;\n    }\n\n    public void setUserDaoList(List<UserDao> userDaoList) {\n        this.userDaoList = userDaoList;\n    }\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    public void setUserDaoSet(Set<UserDao> userDaoSet) {\n        this.userDaoSet = userDaoSet;\n    }\n\n    public void setUserDaoMap(Map<String, UserDao> userDaoMap) {\n        this.userDaoMap = userDaoMap;\n    }\n\n    public void setProperties(Properties properties) {\n        this.properties = properties;\n    }\n\n    @Override\n    public void show() {\n\n    }\n}\n\n\n    <bean id="userServiceProperties01" class="com.zs.spring.service.impl.UserServiceImpl">\n        <property name="userDao" ref="userDao"/>\n        <property name="stringList">\n            <list>\n                <value>aaa</value>\n                <value>bbb</value>\n                <value>ccc</value>\n            </list>\n        </property>\n        <property name="userDaoList">\n            <list>\n                <bean class="com.zs.spring.dao.impl.UserDaoImpl"/>\n                <bean class="com.zs.spring.dao.impl.UserDaoImpl"/>\n                <bean class="com.zs.spring.dao.impl.UserDaoImpl"/>\n            </list>\n            \x3c!--\n            <list>\n                <ref bean="userDao01"/>\n                <ref bean="userDao02"/>\n                <ref bean="userDao03"/>\n            </list>\n            --\x3e\n        </property>\n\n        <property name="userDaoSet">\n            <set>\n                <ref bean="userDao01"/>\n                <ref bean="userDao02"/>\n                <ref bean="userDao03"/>\n            </set>\n        </property>\n        <property name="userDaoMap">\n            <map>\n                <entry key="d1" value-ref="userDao01"/>\n                <entry key="d2" value-ref="userDao02"/>\n            </map>\n        </property>\n        <property name="properties">\n            <props>\n                <prop key="p1">v1</prop>\n                <prop key="p2">v2</prop>\n            </props>\n        </property>\n    </bean>\n    <bean id="userDao01" class="com.zs.spring.dao.impl.UserDaoImpl"/>\n    <bean id="userDao02" class="com.zs.spring.dao.impl.UserDaoImpl"/>\n    <bean id="userDao03" class="com.zs.spring.dao.impl.UserDaoImpl"/>\n\n\n\n\n# 自动装配\n\n\n\n\n# spring的其他配置标签\n\n\n\n\n# 默认名称空间\n\n\n\n\n# 默认--beans\n\n\n\n\n# 默认--import\n\n\n\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd">\n\n    \x3c!--加载类路径下所有properties配置文件--\x3e\n    <context:property-placeholder location="classpath:*.properties"/>\n    <import resource="applicationContext-book.xml"/>\n    <import resource="applicationContext-user.xml"/>\n</beans>\n\n\n\n# 默认--alias\n\n\n\n\n# 自定义标签\n\n\n\n\n# context--property-placeholder\n\npublic class UserDaoImpl implements UserDao {\n\n    private String username;\n    private String password;\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @Override\n    public void save() {\n        System.out.println(username + "\\t" + password);\n    }\n}\n\n\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd">\n\n    \x3c!--加载类路径下所有properties配置文件--\x3e\n    <context:property-placeholder location="classpath:*.properties"/>\n\n    \x3c!-- 1.创建spring控制的资源--\x3e\n    <bean id="userService" class="com.zs.service.impl.UserServiceImpl">\n        <property name="userDao" ref="userDao"/>\n        <property name="bookDao" ref="bookDao"/>\n    </bean>\n    \x3c!--要注入的资源--\x3e\n    <bean id="userDao" class="com.zs.dao.impl.UserDaoImpl">\n        <property name="username" value="${username}"/>\n        <property name="password" value="${password}"/>\n    </bean>\n\n\nusername=zs666\npassword=123adfasdf\n',normalizedContent:'# spring--1.1.xml_bean的配置\n\n\n\n\n# bean的基础配置\n\n\n\n\n# bean的别名配置\n\n\n\n\n# bean的范围配置\n\n\n\n\n\n\n\n> spring-webmvc环境中\n\n\n\n\n# bean的延迟加载\n\n\n\n\n# bean的初始化和销毁方法配置\n\n\n\n单例模式：只创建一次,init()做一次，classpathxmlapplicationcontext的close()方法关闭时调用destroy() 非单例：创建一次，调一次，销毁方法不受spring管\n\n\n\nafterpropertiesset在属性设置之后执行\n\n\n# bean的实例化配置\n\n\n\n\n# 有参构造实例化\n\n\n\n\n# 工厂实例化\n\n\n\n\n# 静态工厂\n\n作用：定义bean对象创建方式，使用静态工厂的形式创建bean，兼容早期遗留系统的升级工作\n\n\x3c!--静态工厂创建bean--\x3e\n<bean id="userservice4" class="com.zs.service.userservicefactory" factory-method="getservice"  />\n\n\npackage com.zs.spring.service;\n\nimport com.zs.spring.service.impl.userserviceimpl;\n\n/**\n * 静态工厂\n */\npublic class userservicefactory {\n    public static userservice getservice(){\n        return new userserviceimpl();\n    }\n\n    public static userservice getservice(string name,int age){\n        return new userserviceimpl();\n    }\n}\n\n\n\n\n# 实例工厂\n\n作用：定义bean对象创建方式，使用实例工厂的形式创建bean，兼容早期遗留系统的升级工作\n\n\x3c!--实例工厂配置bean--\x3e\n<bean id="userservicefactory" class="com.zs.spring.service.userservicefactory"></bean>\n\x3c!--实例工厂创建bean，依赖工厂对象对应的bean--\x3e\n<bean id="userservicebyfactory" factory-bean="userservicefactory" factory-method="getservicebyfactory" ></bean>\n<bean id="userservicebyfactorywithargs" factory-bean="userservicefactory" factory-method="getservicebyfactory" >\n    <constructor-arg name="name" value="xiaoshaozi"/>\n    <constructor-arg name="age" value="18"/>\n</bean>\n\n\npublic class userservicefactory {\n    public static userservice getservice(){\n        return new userserviceimpl();\n    }\n\n    public static userservice getservice(string name,int age){\n        return new userserviceimpl();\n    }\n\n    public userservice getservicebyfactory(){\n        return new userserviceimpl();\n    }\n\n    public userservice getservicebyfactory(string name,int age){\n        return new userserviceimpl();\n    }\n}\n\n\n\n# 实现factorybean规范延迟实例化bean\n\n> factorybean是spring的接口，用来创建bean使用的，会延迟创建bean\n\npackage org.springframework.beans.factory;\n\nimport org.springframework.lang.nullable;\n\npublic interface factorybean<t> {\n\n\tstring object_type_attribute = "factorybeanobjecttype";\n\n\t@nullable\n\tt getobject() throws exception;\n\n\t@nullable\n\tclass<?> getobjecttype();\n\t\n\tdefault boolean issingleton() {\n\t\treturn true;\n\t}\n}\n\n\n\n\n\n\n\n# bean的依赖注入配置\n\n\n\n\n\npackage com.zs.spring.service.impl;\n\n\nimport com.zs.spring.dao.userdao;\nimport com.zs.spring.service.userservice;\n\nimport java.util.list;\nimport java.util.map;\nimport java.util.properties;\nimport java.util.set;\n\n\npublic class userserviceimpl implements userservice {\n\n    private list<string> stringlist;\n    private list<userdao> userdaolist;\n    private userdao userdao;\n    private set<userdao> userdaoset;\n    private map<string,userdao> userdaomap;\n\n    private properties properties;\n\n    public void setstringlist(list<string> stringlist) {\n        this.stringlist = stringlist;\n    }\n\n    public void setuserdaolist(list<userdao> userdaolist) {\n        this.userdaolist = userdaolist;\n    }\n\n    public void setuserdao(userdao userdao) {\n        this.userdao = userdao;\n    }\n\n    public void setuserdaoset(set<userdao> userdaoset) {\n        this.userdaoset = userdaoset;\n    }\n\n    public void setuserdaomap(map<string, userdao> userdaomap) {\n        this.userdaomap = userdaomap;\n    }\n\n    public void setproperties(properties properties) {\n        this.properties = properties;\n    }\n\n    @override\n    public void show() {\n\n    }\n}\n\n\n    <bean id="userserviceproperties01" class="com.zs.spring.service.impl.userserviceimpl">\n        <property name="userdao" ref="userdao"/>\n        <property name="stringlist">\n            <list>\n                <value>aaa</value>\n                <value>bbb</value>\n                <value>ccc</value>\n            </list>\n        </property>\n        <property name="userdaolist">\n            <list>\n                <bean class="com.zs.spring.dao.impl.userdaoimpl"/>\n                <bean class="com.zs.spring.dao.impl.userdaoimpl"/>\n                <bean class="com.zs.spring.dao.impl.userdaoimpl"/>\n            </list>\n            \x3c!--\n            <list>\n                <ref bean="userdao01"/>\n                <ref bean="userdao02"/>\n                <ref bean="userdao03"/>\n            </list>\n            --\x3e\n        </property>\n\n        <property name="userdaoset">\n            <set>\n                <ref bean="userdao01"/>\n                <ref bean="userdao02"/>\n                <ref bean="userdao03"/>\n            </set>\n        </property>\n        <property name="userdaomap">\n            <map>\n                <entry key="d1" value-ref="userdao01"/>\n                <entry key="d2" value-ref="userdao02"/>\n            </map>\n        </property>\n        <property name="properties">\n            <props>\n                <prop key="p1">v1</prop>\n                <prop key="p2">v2</prop>\n            </props>\n        </property>\n    </bean>\n    <bean id="userdao01" class="com.zs.spring.dao.impl.userdaoimpl"/>\n    <bean id="userdao02" class="com.zs.spring.dao.impl.userdaoimpl"/>\n    <bean id="userdao03" class="com.zs.spring.dao.impl.userdaoimpl"/>\n\n\n\n\n# 自动装配\n\n\n\n\n# spring的其他配置标签\n\n\n\n\n# 默认名称空间\n\n\n\n\n# 默认--beans\n\n\n\n\n# 默认--import\n\n\n\n<?xml version="1.0" encoding="utf-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xsi:schemalocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd">\n\n    \x3c!--加载类路径下所有properties配置文件--\x3e\n    <context:property-placeholder location="classpath:*.properties"/>\n    <import resource="applicationcontext-book.xml"/>\n    <import resource="applicationcontext-user.xml"/>\n</beans>\n\n\n\n# 默认--alias\n\n\n\n\n# 自定义标签\n\n\n\n\n# context--property-placeholder\n\npublic class userdaoimpl implements userdao {\n\n    private string username;\n    private string password;\n\n    public void setusername(string username) {\n        this.username = username;\n    }\n\n    public void setpassword(string password) {\n        this.password = password;\n    }\n\n    @override\n    public void save() {\n        system.out.println(username + "\\t" + password);\n    }\n}\n\n\n<?xml version="1.0" encoding="utf-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xsi:schemalocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd">\n\n    \x3c!--加载类路径下所有properties配置文件--\x3e\n    <context:property-placeholder location="classpath:*.properties"/>\n\n    \x3c!-- 1.创建spring控制的资源--\x3e\n    <bean id="userservice" class="com.zs.service.impl.userserviceimpl">\n        <property name="userdao" ref="userdao"/>\n        <property name="bookdao" ref="bookdao"/>\n    </bean>\n    \x3c!--要注入的资源--\x3e\n    <bean id="userdao" class="com.zs.dao.impl.userdaoimpl">\n        <property name="username" value="${username}"/>\n        <property name="password" value="${password}"/>\n    </bean>\n\n\nusername=zs666\npassword=123adfasdf\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705379878e3},{title:"Spring--3.1.webflux",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.1.webflux.html",relativePath:"zs-ee-框架/spring/Spring--3.1.webflux.md",key:"v-a4678b48",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/Spring--3.1.webflux.html",headers:[{level:2,title:"Spring5 框架新功能（Webflux）",slug:"spring5-框架新功能-webflux",normalizedTitle:"spring5 框架新功能（webflux）",charIndex:26},{level:2,title:"SpringWebflux 介绍",slug:"springwebflux-介绍",normalizedTitle:"springwebflux 介绍",charIndex:671},{level:2,title:"响应式编程（Java 8实现）",slug:"响应式编程-java-8实现",normalizedTitle:"响应式编程（java 8实现）",charIndex:2933},{level:2,title:"响应式编程（Java 9实现）",slug:"响应式编程-java-9实现",normalizedTitle:"响应式编程（java 9实现）",charIndex:3811},{level:2,title:"响应式编程（Reactor 实现）",slug:"响应式编程-reactor-实现",normalizedTitle:"响应式编程（reactor 实现）",charIndex:4849},{level:2,title:"SpringWebflux 执行流程和核心 API",slug:"springwebflux-执行流程和核心-api",normalizedTitle:"springwebflux 执行流程和核心 api",charIndex:6255},{level:2,title:"SpringWebflux（基于注解编程模型）",slug:"springwebflux-基于注解编程模型",normalizedTitle:"springwebflux（基于注解编程模型）",charIndex:6595},{level:2,title:"SpringWebflux（基于函数式编程模型）",slug:"springwebflux-基于函数式编程模型",normalizedTitle:"springwebflux（基于函数式编程模型）",charIndex:10206},{level:2,title:"使用flux客户端的方式",slug:"使用flux客户端的方式",normalizedTitle:"使用flux客户端的方式",charIndex:14444}],lastUpdated:"2024年1月24日星期三下午2点51分",lastUpdatedTimestamp:1706079069e3,headersStr:"Spring5 框架新功能（Webflux） SpringWebflux 介绍 响应式编程（Java 8实现） 响应式编程（Java 9实现） 响应式编程（Reactor 实现） SpringWebflux 执行流程和核心 API SpringWebflux（基于注解编程模型） SpringWebflux（基于函数式编程模型） 使用flux客户端的方式",content:'# Spring--3.1.webflux\n\n\n# Spring5 框架新功能（Webflux）\n\nhttps://blog.csdn.net/qq_42263280/article/details/130289820\n\nhttps://docs.spring.io/spring-framework/docs/5.2.25.RELEASE/spring-framework-reference/web-reactive.html#spring-webflux\n\n传统的基于Servlet的Web框架，如Spring MVC,在本质上都是阻塞和多线程的，每个连接都会使用一个线程。在请求处理的时候，会在线程池中拉取一个工作者( worker )线程来对请求进行处理。同时，请求线程是阻塞的，直到工作者线程提示它已经完成为止。\n\n首先webflux不是spring mvc的替代方案！webflux强调的是异步非阻塞，spring mvc强调的是同步阻塞，如果方案大部分偏向于非同步，则spring webflux才是首选。另外，如果依赖了大量阻塞式持久化 API 和网络 API，建议使⽤ Spring MVC。\n\nWebFlux：spring webflux是一个异步非阻塞式的web框架，它能够充分利用多核cpu的硬件资源去处理大量的并发请求。\n\nWebMVC：springMvc构建在servlet api之上,因此需要Servlet容器(比如Tomcat)才能执行。使用的是同步阻塞式IO模型，每一个请求对应一个线程去处理。\n\n\n# SpringWebflux 介绍\n\n这两个web框架都镜像了它们的源模块（spring-webmvc和spring-webflux）的名称，并在spring框架中并排共存。每个模块都是可选的。应用程序可以使用一个或另一个模块，在某些情况下，也可以同时使用这两个模块 — 例如具有反应式WebClient的Spring MVC控制器。更多详细资料可参考WebFlux文档https://docs.spring.io/spring-framework/reference/\n\n（1）webFlux是 Spring5 添加的新模块，用于 web 的开发，功能和 SpringMVC 类似的，Webflux 使用 当前一种比较流程响应式编程出现的框架。\n\n在spring5的jar包中和架构图中我们都可以看见\n\n\n\n（2）使用传统 web 框架，比如 SpringMVC，这些基于 Servlet 容器，Webflux 是一种异步非阻塞的框架，异步非阻塞的框架在 Servlet3.X以后才支持，核心是基于 Reactor 的API 实现的。\n\n（3）异步与同步，阻塞与非阻塞的理解 这里做一个简单的通俗的解释：\n\n 1. 异步和同步针对调用者，调用者发送请求，如果等着对方回应之后才去做其他事情就是同步，如果发送请求之后不等着对方回应就去做其他事情就是异步\n 2. 阻塞和非阻塞针对被调用者，被调用者接受到请求之后，做完请求任务之后才给出反馈就是阻塞，接受到请求之后马上给出反馈然后再去做事情就是非阻塞\n\n如果想深入理解并实践应用异步同步阻塞非阻塞等技术，可能会涉及到网络编程、socket、BIO、NIO、AIO、Netty等技术，大家可以学习之前讲的《网络编程系列课程》\n\n（4）Webflux 特点：\n\n特性一、 异步非阻塞\nSpringMVC是同步阻塞的IO模型，资源浪费相对来说比较严重，当我们在处理一个比较耗时的任务时，\n例如：上传一个比较大的文件，首先，服务器的线程一直在等待接收文件，在这期间它就像个傻子一样等在那儿（放学别走），什么都干不了，好不容易等到文件来了并且接收完毕，\n我们又要将文件写入磁盘，在这写入的过程中，这根线程又要等到文件写完才能去干其它的事情。这一前一后的等待，浪费了大量的资源。\n而Spring WebFlux就是来解决这个问题的，\nSpring WebFlux可以做到异步非阻塞。还是上面那上传文件的例子，\nSpring WebFlux是这样做的：线程发现文件还没准备好，就先去做其它事情，当文件准备好之后，通知这根线程来处理，\n当接收完毕写入磁盘的时候（根据具体情况选择是否做异步非阻塞），写入完毕后通知这根线程再来处理（异步非阻塞情况下）。\n这个设计相对于SpringMVC而言，可以大大节省系统资源。\n\n特性二、 响应式(reactive)函数编程\nSpring5 框架基于 java8，Webflux 使用 Java8 函数式编程方式实现路由请求，如果你觉得java8的lambda写起来很爽，那么，你会再次喜欢上Spring WebFlux，\n因为它支持函数式编程，得益于对于reactive-stream的支持（通过reactor框架来实现的）。\n\n特性三、 不再拘束于Servlet容器\n以前，我们的应用都运行于Servlet容器之中，例如我们大家最为熟悉的Tomcat, Jetty...等等。\n而现在Spring WebFlux不仅能运行于传统的Servlet容器中（前提是容器要支持Servlet3.1，因为非阻塞IO是使用了Servlet3.1的特性），还能运行在支持NIO的Netty和Undertow中。\n\n\n（5）Webflux与SpringMVC的区别\n\n区别一： 两个框架都可以使用注解方式，都可以运行在 Tomcat 等容器中 区别二： SpringMVC 采用命令式编程，Webflux 采用异步响应式编程\n\n\n\n（6）总结（面试的时候很重要）\n\n特点\n\n 1. webflux是一个异步非阻塞的Web框架,它能够充分利用多核CPU的硬件资源去处理大量的并发请求\n 2. 内部使用的是响应式编程，以Reactor库为基础，基于异步和事件驱动，可以让我们在不扩充硬件资源的前提下，提升系统的吞吐量和伸缩性。\n 3. 不能使接口的响应时间缩短，它仅仅能够提升吞吐量和伸缩性。\n\n应用场景\n\n 1. 特别适合在IO密集型的服务中，比如微服务网关。\n 2. IO 密集型包括：磁盘IO密集型, 网络IO密集型， 微服务网关就属于网络 IO 密集型，使用异步非阻塞式编程模型，能够显著地提升网关对下游服务转发的吞吐量。\n\n选WebFlux还是Spring MVC\n\n 1. WebFlux不是 Spring MVC的替代方案！虽然 WebFlux 也可以被运行在 Servlet 容器上（需是 Servlet 3.1+ 以上的容器），但是 WebFlux 主要还是应用在异步非阻塞编程模型，而 Spring MVC 是同步阻塞的，如果你目前在 Spring MVC 框架中大量使用非同步方案，那么，WebFlux 才是你想要的，否则，使用 Spring MVC 才是你的首选。\n 2. 在微服务架构中，Spring MVC 和 WebFlux 可以混合使用，比如已经提到的，对于那些 IO 密集型服务(如网关)，我们就可以使用 WebFlux 来实现。\n\n\n# 响应式编程（Java 8实现）\n\n响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。电子表格程序就是响应式编程的一个例子。\n\njava8及其之前版本\n\n提供的观察者模式两个类 Observer 和 Observable\n\npackage com.zs.webflux.observe;\n\nimport java.util.Observable;\n\n/**\n * Create by 张邵\n * 2024/1/15 14:32\n */\npublic class ObserverDemo extends Observable {\n    public static void main(String[] args) {\n        ObserverDemo observer = new ObserverDemo();\n        //添加观察者\n        observer.addObserver((o,arg)->{\n            System.out.println("通知数据变化---1");\n        });\n        observer.addObserver((o,arg)->{\n            System.out.println("通知数据变化---2");\n        });\n        observer.addObserver((o,arg)->{\n            System.out.println("通知数据变化---3");\n        });\n        // 数据变化\n        observer.setChanged();\n        // 通知\n        observer.notifyObservers();\n        System.out.println("代码执行完成.....4");\n    }\n}\n\n\n\n# 响应式编程（Java 9实现）\n\npackage com.zs.webflux.observe;\n\nimport java.util.concurrent.Flow;\n\n/**\n * Create by 张邵\n * 2024/1/15 14:48\n */\npublic class Main {\n    public static void main(String[] args) {\n        Flow.Publisher<String> publisher = subscriber -> {\n            subscriber.onNext("1");\n            subscriber.onNext("2");\n            subscriber.onError(new RuntimeException("出错"));\n        };\n\n        publisher.subscribe(new Flow.Subscriber<>() {\n            @Override\n            public void onSubscribe(Flow.Subscription subscription) {\n                subscription.cancel();\n            }\n\n            @Override\n            public void onNext(String item) {\n                System.out.println("接收到数据：" + item);\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                System.out.println("发生错误：" + throwable.getMessage());\n            }\n\n            @Override\n            public void onComplete() {\n                System.out.println("处理完毕");\n            }\n        });\n    }\n}\n\n\n\n# 响应式编程（Reactor 实现）\n\n（1）响应式编程操作中，Reactor是满足 Reactive 规范框架\n\n（2）Reactor有两个核心类，Mono 和 Flux，这两个类实现接口 Publisher，提供丰富操作符。\n\n * Flux：实现发布者，返回N个元素\n\n * Mono：实现发布者，返回 0 或 1 个元素\n\n（3）Flux 和 Mono 都是数据流的发布者，使用Flux 和 Mono都可以发出三种数据信号：\n\n * 元素值\n * 错误信号\n * 完成信号\n\n错误信号和完成信号都代表终止信号 终止信号：用于告诉订阅者数据流结束了 错误信号：终止数据流同时吧错误信息传递给订阅者\n\n（4）三种信号特点：\n\n * 错误信号 和 完成信号 都是终止信号，不能共存。\n * 如果没有发送任何元素值，而是直接发送错误 或者 完成信号，表示是空数据流。\n * 如果没有错误信号，没有完成信号，表示是无限数据流。\n\n（5）调用\n\n * 调用 just 或者 其他方法 只是声明数据流，数据流并没有发出，\n * 只有进行订阅之后才会触发数据流，不订阅什么都不会发生的。\n\n（6）操作符\n\n * map 元素映射为新元素\n\n * flatMap 元素映射为流\n   \n   把每个元素转换流，吧转换之后的多个流合并成大的流\n\n代码演示\n\n引入依赖\n\n<dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-webflux</artifactId>\n</dependency>\n\n\n   /**\n     * 简单使用\n     */\n    @Test\n    public void test01() {\n        // just方法直接声明\n        // 2.1.Flux 对象实现发布者，返回 N 个元素 (实际开发中我们可以放入产品列表数据)\n        Flux.just("张三", "李四", "王五", "赵六").subscribe(System.out::println);\n        System.out.println("====================================================");\n        // 2.2.Mono 实现发布者，返回 0 或者 1 个元素 （实际开发中我们可以放入根据id查询的单条数据）\n        Mono.just("张无忌").subscribe(System.out::println);\n\n        //其他方法\n        Integer[] array = {1, 2, 3, 4, 5};\n        Flux.just(array);\n\n        List<Integer> list = Arrays.asList(array);\n        Flux.fromIterable(list);\n\n        Stream<Integer> stream = list.stream();\n        Flux.fromStream(stream);\n    }\n\n\n\n# SpringWebflux 执行流程和核心 API\n\nSpringFlux基于 Reactor，默认使用容器是 Netty，Netty是高性能的 NIO 框架，异步非阻塞的框架。\n\n（1）Netty\n\nBIO\n\nNIO\n\n（2）SpringWebFlux执行过程和 SpringMVC相似\n\nSpringWebFlux中的核心控制器DispatchHandler，实现接口WebHandler\n\nSpringWebflux 里面 DispatcherHandler，负责请求的处理\n\n 1. HandlerMapping：请求查询到处理的方法\n\n 2. HandlerAdapter：真正负责请求处理\n\n 3. HandlerResultHandler：响应结果处理\n\n\n\n\n# SpringWebflux（基于注解编程模型）\n\n用法与springmvc几乎是一样的，只是service的实现类有点不一样，这里以Product模型案例讲解\n\n备注 SpringMVC 方式实现，同步阻塞的方式，基于 SpringMVC+Servlet+Tomcat SpringWebflux 方式实现，异步非阻塞 方式，基于 SpringWebflux+Reactor+Netty\n\n步骤一：编写User模型\n\npackage com.zs.webflux.entity;\n\npublic class User {\n    private String name;\n    private String gender;\n    private Integer age;\n\n    public User() {\n    }\n\n    public User(String name, String gender, Integer age) {\n        this.name = name;\n        this.gender = gender;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return "User{" +\n                "name=\'" + name + \'\\\'\' +\n                ", gender=\'" + gender + \'\\\'\' +\n                ", age=" + age +\n                \'}\';\n    }\n}\n\n\n\n步骤二：编写IUserService接口\n\npackage com.zs.webflux.service;\n\nimport com.zs.webflux.entity.User;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n/**\n * Create by 张邵\n * 2024/1/15 17:11\n */\npublic interface IUserService {\n    //根据 id 查询用户\n    Mono<User> getUserById(int id);\n\n    //查询所有用户\n    Flux<User> getAllUser();\n\n    //添加用户\n    Mono<Void> saveUserInfo(Mono<User> user);\n\n}\n\n\npackage com.zs.webflux.service;\n\nimport com.zs.webflux.entity.User;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Create by 张邵\n * 2024/1/15 17:15\n */\n@Service\npublic class UserServiceImpl implements IUserService{\n\n    //创建 map 集合存储数据\n    public Map<Integer, User> users = new HashMap<>();\n\n    public UserServiceImpl() {\n        this.users.put(1,new User("张三","男",25));\n        this.users.put(2,new User("李四","男",30));\n        this.users.put(3,new User("石榴","女",18));\n    }\n\n    @Override\n    public Mono<User> getUserById(int id) {\n        return Mono.justOrEmpty(this.users.get(id));\n    }\n\n    @Override\n    public Flux<User> getAllUser() {\n        return Flux.fromIterable(this.users.values());\n    }\n\n    @Override\n    public Mono<Void> saveUserInfo(Mono<User> userMono) {\n        return userMono.doOnNext(user->{\n            //向map集合中存入数据\n            int id = users.size() + 1;\n            users.put(id,user);\n        }).thenEmpty(Mono.empty());\n    }\n}\n\n\n步骤三：Controller的编写\n\npackage com.zs.webflux.controller;\n\nimport com.zs.webflux.entity.User;\nimport com.zs.webflux.service.IUserService;\nimport com.zs.webflux.service.UserServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n/**\n * Create by 张邵\n * 2024/1/15 17:24\n */\n@RestController\npublic class UserController {\n\n    @Autowired\n    private IUserService userService;\n\n    //id查询\n    @GetMapping("/user/{id}")\n    public Mono<User> getUserById(@PathVariable int id) {\n        return userService.getUserById(id);\n    }\n\n    //查询所有\n    @GetMapping("/user")\n    public Flux<User> getUsers() {\n        return userService.getAllUser();\n    }\n\n    //添加用户\n    @PostMapping("/saveuser")\n    public Mono<Void> saveUser(@RequestBody User user) {\n        Mono<User> userMono = Mono.just(user);\n        return userService.saveUserInfo(userMono);\n    }\n}\n\n\n\n# SpringWebflux（基于函数式编程模型）\n\n 1. 在使用函数式编程模型操作时候，需要自己初始化服务器\n\n 2. 基于函数式编程模型时候，有两个核心接口： RouterFunction（实现路由功能，请求转发给对应的 handler） HandlerFunction（处理请求生成响应的函数）。\n\n 3. 核心任务定义两个函数式接口的实现并且启动需要的服务器。\n\n 4. SpringWebflux 请求和响应不再是ServletRequest和ServletResponse ，而是 ServerRequest 和 ServerResponse\n\n在基于注解实现的情况下具体实现步骤如下\n\n步骤一：编写Handle处理器\n\npackage com.zs.webflux.handler;\n\nimport com.zs.webflux.entity.User;\nimport com.zs.webflux.service.IUserService;\nimport com.zs.webflux.service.UserServiceImpl;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.reactive.function.server.ServerRequest;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport static org.springframework.web.reactive.function.BodyInserters.fromObject;\n\n/**\n * Create by 张邵\n * 2024/1/15 18:05\n */\npublic class UserHandler {\n    private IUserService userService;\n\n    public UserHandler() {\n        this.userService = new UserServiceImpl();\n    }\n\n    //根据 id 查询\n    public Mono<ServerResponse> getUserById(ServerRequest request) {\n        //获取 id 值\n        int ProductId = Integer.valueOf(request.pathVariable("id"));\n        //空值处理\n        Mono<ServerResponse> notFound = ServerResponse.notFound().build();\n        //调用 service 方法得到数据\n        Mono<User> userMono = this.userService.getUserById(ProductId);\n        //把 ProductMono 进行转换返回\n        //使用 Reactor 操作符 flatMap\n        return\n                userMono\n                        .flatMap(person ->\n                                ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)\n                                        .body(fromObject(person)))\n                        .switchIfEmpty(notFound);\n    }\n\n    //查询所有\n    public Mono<ServerResponse> getAllUser(ServerRequest serverRequest) {\n        //调用 service 得到结果\n        Flux<User> users = this.userService.getAllUser();\n        return\n                ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(users, User.class);\n    }\n\n    //添加\n    public Mono<ServerResponse> saveUser(ServerRequest request) {\n        //得到 Product 对象\n        Mono<User> UserMono = request.bodyToMono(User.class);\n        return\n                ServerResponse.ok().build(this.userService.saveUserInfo(UserMono));\n    }\n}\n\n\n步骤一：FluxServer编写\n\npackage com.zs.webflux.server;\n\nimport com.zs.webflux.handler.UserHandler;\nimport org.springframework.http.server.reactive.HttpHandler;\nimport org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.function.server.RouterFunctions;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport reactor.netty.http.server.HttpServer;\n\nimport static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.*;\n\n/**\n * Create by 张邵\n * 2024/1/15 18:15\n */\npublic class FluxServer {\n    //1 创建 Router 路由\n    public RouterFunction<ServerResponse> routingFunction() {\n        //创建 hanler 对象\n        UserHandler handler = new UserHandler();\n        //设置路由\n        return RouterFunctions.route(\n                        GET("/user/{id}").and(accept(APPLICATION_JSON)), handler::getUserById)\n                .andRoute(GET("/user").and(accept(APPLICATION_JSON)), handler::getAllUser)\n                .andRoute(POST("/saveuser").and(accept(APPLICATION_JSON)), handler::saveUser);\n    }\n\n    //2 创建服务器完成适配\n    public void createReactorServer() {\n        //路由和 handler 适配\n        RouterFunction<ServerResponse> route = routingFunction();\n        HttpHandler httpHandler = RouterFunctions.toHttpHandler(route);\n        ReactorHttpHandlerAdapter adapter = new\n                ReactorHttpHandlerAdapter(httpHandler);\n        //创建服务器\n        HttpServer httpServer = HttpServer.create();\n        httpServer\n                .port(8095)\n                .handle(adapter).bindNow();\n    }\n\n    //最终调用\n    public static void main(String[] args) throws Exception {\n        FluxServer server = new FluxServer();\n        server.createReactorServer();\n        System.out.println("enter to exit");\n        System.in.read();\n    }\n}\n\n\n\n# 使用flux客户端的方式\n\npackage com.zs.webflux.server;\n\nimport com.zs.webflux.entity.User;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport reactor.core.publisher.Flux;\n\n/**\n * Create by 张邵\n * 2024/1/15 18:40\n */\npublic class FluxClient {\n    public static void main(String[] args) {\n        //调用服务器地址\n        WebClient webClient = WebClient.create("http://localhost:8095");\n        //根据 id 查询\n        String id = "1";\n        User userResult = webClient.get().uri("/user/{id}", id)\n                .accept(MediaType.APPLICATION_JSON).retrieve().bodyToMono(User.class)\n                .block();\n        System.out.println("查询结果：" + userResult);\n        //查询所有\n        Flux<User> results = webClient.get().uri("/user")\n                .accept(MediaType.APPLICATION_JSON).retrieve().bodyToFlux(User.class);\n        results.map(user -> user)\n                .buffer().doOnNext(System.out::println).blockFirst();\n    }\n}\n',normalizedContent:'# spring--3.1.webflux\n\n\n# spring5 框架新功能（webflux）\n\nhttps://blog.csdn.net/qq_42263280/article/details/130289820\n\nhttps://docs.spring.io/spring-framework/docs/5.2.25.release/spring-framework-reference/web-reactive.html#spring-webflux\n\n传统的基于servlet的web框架，如spring mvc,在本质上都是阻塞和多线程的，每个连接都会使用一个线程。在请求处理的时候，会在线程池中拉取一个工作者( worker )线程来对请求进行处理。同时，请求线程是阻塞的，直到工作者线程提示它已经完成为止。\n\n首先webflux不是spring mvc的替代方案！webflux强调的是异步非阻塞，spring mvc强调的是同步阻塞，如果方案大部分偏向于非同步，则spring webflux才是首选。另外，如果依赖了大量阻塞式持久化 api 和网络 api，建议使⽤ spring mvc。\n\nwebflux：spring webflux是一个异步非阻塞式的web框架，它能够充分利用多核cpu的硬件资源去处理大量的并发请求。\n\nwebmvc：springmvc构建在servlet api之上,因此需要servlet容器(比如tomcat)才能执行。使用的是同步阻塞式io模型，每一个请求对应一个线程去处理。\n\n\n# springwebflux 介绍\n\n这两个web框架都镜像了它们的源模块（spring-webmvc和spring-webflux）的名称，并在spring框架中并排共存。每个模块都是可选的。应用程序可以使用一个或另一个模块，在某些情况下，也可以同时使用这两个模块 — 例如具有反应式webclient的spring mvc控制器。更多详细资料可参考webflux文档https://docs.spring.io/spring-framework/reference/\n\n（1）webflux是 spring5 添加的新模块，用于 web 的开发，功能和 springmvc 类似的，webflux 使用 当前一种比较流程响应式编程出现的框架。\n\n在spring5的jar包中和架构图中我们都可以看见\n\n\n\n（2）使用传统 web 框架，比如 springmvc，这些基于 servlet 容器，webflux 是一种异步非阻塞的框架，异步非阻塞的框架在 servlet3.x以后才支持，核心是基于 reactor 的api 实现的。\n\n（3）异步与同步，阻塞与非阻塞的理解 这里做一个简单的通俗的解释：\n\n 1. 异步和同步针对调用者，调用者发送请求，如果等着对方回应之后才去做其他事情就是同步，如果发送请求之后不等着对方回应就去做其他事情就是异步\n 2. 阻塞和非阻塞针对被调用者，被调用者接受到请求之后，做完请求任务之后才给出反馈就是阻塞，接受到请求之后马上给出反馈然后再去做事情就是非阻塞\n\n如果想深入理解并实践应用异步同步阻塞非阻塞等技术，可能会涉及到网络编程、socket、bio、nio、aio、netty等技术，大家可以学习之前讲的《网络编程系列课程》\n\n（4）webflux 特点：\n\n特性一、 异步非阻塞\nspringmvc是同步阻塞的io模型，资源浪费相对来说比较严重，当我们在处理一个比较耗时的任务时，\n例如：上传一个比较大的文件，首先，服务器的线程一直在等待接收文件，在这期间它就像个傻子一样等在那儿（放学别走），什么都干不了，好不容易等到文件来了并且接收完毕，\n我们又要将文件写入磁盘，在这写入的过程中，这根线程又要等到文件写完才能去干其它的事情。这一前一后的等待，浪费了大量的资源。\n而spring webflux就是来解决这个问题的，\nspring webflux可以做到异步非阻塞。还是上面那上传文件的例子，\nspring webflux是这样做的：线程发现文件还没准备好，就先去做其它事情，当文件准备好之后，通知这根线程来处理，\n当接收完毕写入磁盘的时候（根据具体情况选择是否做异步非阻塞），写入完毕后通知这根线程再来处理（异步非阻塞情况下）。\n这个设计相对于springmvc而言，可以大大节省系统资源。\n\n特性二、 响应式(reactive)函数编程\nspring5 框架基于 java8，webflux 使用 java8 函数式编程方式实现路由请求，如果你觉得java8的lambda写起来很爽，那么，你会再次喜欢上spring webflux，\n因为它支持函数式编程，得益于对于reactive-stream的支持（通过reactor框架来实现的）。\n\n特性三、 不再拘束于servlet容器\n以前，我们的应用都运行于servlet容器之中，例如我们大家最为熟悉的tomcat, jetty...等等。\n而现在spring webflux不仅能运行于传统的servlet容器中（前提是容器要支持servlet3.1，因为非阻塞io是使用了servlet3.1的特性），还能运行在支持nio的netty和undertow中。\n\n\n（5）webflux与springmvc的区别\n\n区别一： 两个框架都可以使用注解方式，都可以运行在 tomcat 等容器中 区别二： springmvc 采用命令式编程，webflux 采用异步响应式编程\n\n\n\n（6）总结（面试的时候很重要）\n\n特点\n\n 1. webflux是一个异步非阻塞的web框架,它能够充分利用多核cpu的硬件资源去处理大量的并发请求\n 2. 内部使用的是响应式编程，以reactor库为基础，基于异步和事件驱动，可以让我们在不扩充硬件资源的前提下，提升系统的吞吐量和伸缩性。\n 3. 不能使接口的响应时间缩短，它仅仅能够提升吞吐量和伸缩性。\n\n应用场景\n\n 1. 特别适合在io密集型的服务中，比如微服务网关。\n 2. io 密集型包括：磁盘io密集型, 网络io密集型， 微服务网关就属于网络 io 密集型，使用异步非阻塞式编程模型，能够显著地提升网关对下游服务转发的吞吐量。\n\n选webflux还是spring mvc\n\n 1. webflux不是 spring mvc的替代方案！虽然 webflux 也可以被运行在 servlet 容器上（需是 servlet 3.1+ 以上的容器），但是 webflux 主要还是应用在异步非阻塞编程模型，而 spring mvc 是同步阻塞的，如果你目前在 spring mvc 框架中大量使用非同步方案，那么，webflux 才是你想要的，否则，使用 spring mvc 才是你的首选。\n 2. 在微服务架构中，spring mvc 和 webflux 可以混合使用，比如已经提到的，对于那些 io 密集型服务(如网关)，我们就可以使用 webflux 来实现。\n\n\n# 响应式编程（java 8实现）\n\n响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。电子表格程序就是响应式编程的一个例子。\n\njava8及其之前版本\n\n提供的观察者模式两个类 observer 和 observable\n\npackage com.zs.webflux.observe;\n\nimport java.util.observable;\n\n/**\n * create by 张邵\n * 2024/1/15 14:32\n */\npublic class observerdemo extends observable {\n    public static void main(string[] args) {\n        observerdemo observer = new observerdemo();\n        //添加观察者\n        observer.addobserver((o,arg)->{\n            system.out.println("通知数据变化---1");\n        });\n        observer.addobserver((o,arg)->{\n            system.out.println("通知数据变化---2");\n        });\n        observer.addobserver((o,arg)->{\n            system.out.println("通知数据变化---3");\n        });\n        // 数据变化\n        observer.setchanged();\n        // 通知\n        observer.notifyobservers();\n        system.out.println("代码执行完成.....4");\n    }\n}\n\n\n\n# 响应式编程（java 9实现）\n\npackage com.zs.webflux.observe;\n\nimport java.util.concurrent.flow;\n\n/**\n * create by 张邵\n * 2024/1/15 14:48\n */\npublic class main {\n    public static void main(string[] args) {\n        flow.publisher<string> publisher = subscriber -> {\n            subscriber.onnext("1");\n            subscriber.onnext("2");\n            subscriber.onerror(new runtimeexception("出错"));\n        };\n\n        publisher.subscribe(new flow.subscriber<>() {\n            @override\n            public void onsubscribe(flow.subscription subscription) {\n                subscription.cancel();\n            }\n\n            @override\n            public void onnext(string item) {\n                system.out.println("接收到数据：" + item);\n            }\n\n            @override\n            public void onerror(throwable throwable) {\n                system.out.println("发生错误：" + throwable.getmessage());\n            }\n\n            @override\n            public void oncomplete() {\n                system.out.println("处理完毕");\n            }\n        });\n    }\n}\n\n\n\n# 响应式编程（reactor 实现）\n\n（1）响应式编程操作中，reactor是满足 reactive 规范框架\n\n（2）reactor有两个核心类，mono 和 flux，这两个类实现接口 publisher，提供丰富操作符。\n\n * flux：实现发布者，返回n个元素\n\n * mono：实现发布者，返回 0 或 1 个元素\n\n（3）flux 和 mono 都是数据流的发布者，使用flux 和 mono都可以发出三种数据信号：\n\n * 元素值\n * 错误信号\n * 完成信号\n\n错误信号和完成信号都代表终止信号 终止信号：用于告诉订阅者数据流结束了 错误信号：终止数据流同时吧错误信息传递给订阅者\n\n（4）三种信号特点：\n\n * 错误信号 和 完成信号 都是终止信号，不能共存。\n * 如果没有发送任何元素值，而是直接发送错误 或者 完成信号，表示是空数据流。\n * 如果没有错误信号，没有完成信号，表示是无限数据流。\n\n（5）调用\n\n * 调用 just 或者 其他方法 只是声明数据流，数据流并没有发出，\n * 只有进行订阅之后才会触发数据流，不订阅什么都不会发生的。\n\n（6）操作符\n\n * map 元素映射为新元素\n\n * flatmap 元素映射为流\n   \n   把每个元素转换流，吧转换之后的多个流合并成大的流\n\n代码演示\n\n引入依赖\n\n<dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-webflux</artifactid>\n</dependency>\n\n\n   /**\n     * 简单使用\n     */\n    @test\n    public void test01() {\n        // just方法直接声明\n        // 2.1.flux 对象实现发布者，返回 n 个元素 (实际开发中我们可以放入产品列表数据)\n        flux.just("张三", "李四", "王五", "赵六").subscribe(system.out::println);\n        system.out.println("====================================================");\n        // 2.2.mono 实现发布者，返回 0 或者 1 个元素 （实际开发中我们可以放入根据id查询的单条数据）\n        mono.just("张无忌").subscribe(system.out::println);\n\n        //其他方法\n        integer[] array = {1, 2, 3, 4, 5};\n        flux.just(array);\n\n        list<integer> list = arrays.aslist(array);\n        flux.fromiterable(list);\n\n        stream<integer> stream = list.stream();\n        flux.fromstream(stream);\n    }\n\n\n\n# springwebflux 执行流程和核心 api\n\nspringflux基于 reactor，默认使用容器是 netty，netty是高性能的 nio 框架，异步非阻塞的框架。\n\n（1）netty\n\nbio\n\nnio\n\n（2）springwebflux执行过程和 springmvc相似\n\nspringwebflux中的核心控制器dispatchhandler，实现接口webhandler\n\nspringwebflux 里面 dispatcherhandler，负责请求的处理\n\n 1. handlermapping：请求查询到处理的方法\n\n 2. handleradapter：真正负责请求处理\n\n 3. handlerresulthandler：响应结果处理\n\n\n\n\n# springwebflux（基于注解编程模型）\n\n用法与springmvc几乎是一样的，只是service的实现类有点不一样，这里以product模型案例讲解\n\n备注 springmvc 方式实现，同步阻塞的方式，基于 springmvc+servlet+tomcat springwebflux 方式实现，异步非阻塞 方式，基于 springwebflux+reactor+netty\n\n步骤一：编写user模型\n\npackage com.zs.webflux.entity;\n\npublic class user {\n    private string name;\n    private string gender;\n    private integer age;\n\n    public user() {\n    }\n\n    public user(string name, string gender, integer age) {\n        this.name = name;\n        this.gender = gender;\n        this.age = age;\n    }\n\n    public string getname() {\n        return name;\n    }\n\n    public void setname(string name) {\n        this.name = name;\n    }\n\n    public string getgender() {\n        return gender;\n    }\n\n    public void setgender(string gender) {\n        this.gender = gender;\n    }\n\n    public integer getage() {\n        return age;\n    }\n\n    public void setage(integer age) {\n        this.age = age;\n    }\n\n    @override\n    public string tostring() {\n        return "user{" +\n                "name=\'" + name + \'\\\'\' +\n                ", gender=\'" + gender + \'\\\'\' +\n                ", age=" + age +\n                \'}\';\n    }\n}\n\n\n\n步骤二：编写iuserservice接口\n\npackage com.zs.webflux.service;\n\nimport com.zs.webflux.entity.user;\nimport reactor.core.publisher.flux;\nimport reactor.core.publisher.mono;\n\n/**\n * create by 张邵\n * 2024/1/15 17:11\n */\npublic interface iuserservice {\n    //根据 id 查询用户\n    mono<user> getuserbyid(int id);\n\n    //查询所有用户\n    flux<user> getalluser();\n\n    //添加用户\n    mono<void> saveuserinfo(mono<user> user);\n\n}\n\n\npackage com.zs.webflux.service;\n\nimport com.zs.webflux.entity.user;\nimport org.springframework.stereotype.service;\nimport reactor.core.publisher.flux;\nimport reactor.core.publisher.mono;\n\nimport java.util.hashmap;\nimport java.util.map;\n\n/**\n * create by 张邵\n * 2024/1/15 17:15\n */\n@service\npublic class userserviceimpl implements iuserservice{\n\n    //创建 map 集合存储数据\n    public map<integer, user> users = new hashmap<>();\n\n    public userserviceimpl() {\n        this.users.put(1,new user("张三","男",25));\n        this.users.put(2,new user("李四","男",30));\n        this.users.put(3,new user("石榴","女",18));\n    }\n\n    @override\n    public mono<user> getuserbyid(int id) {\n        return mono.justorempty(this.users.get(id));\n    }\n\n    @override\n    public flux<user> getalluser() {\n        return flux.fromiterable(this.users.values());\n    }\n\n    @override\n    public mono<void> saveuserinfo(mono<user> usermono) {\n        return usermono.doonnext(user->{\n            //向map集合中存入数据\n            int id = users.size() + 1;\n            users.put(id,user);\n        }).thenempty(mono.empty());\n    }\n}\n\n\n步骤三：controller的编写\n\npackage com.zs.webflux.controller;\n\nimport com.zs.webflux.entity.user;\nimport com.zs.webflux.service.iuserservice;\nimport com.zs.webflux.service.userserviceimpl;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.web.bind.annotation.*;\nimport reactor.core.publisher.flux;\nimport reactor.core.publisher.mono;\n\n/**\n * create by 张邵\n * 2024/1/15 17:24\n */\n@restcontroller\npublic class usercontroller {\n\n    @autowired\n    private iuserservice userservice;\n\n    //id查询\n    @getmapping("/user/{id}")\n    public mono<user> getuserbyid(@pathvariable int id) {\n        return userservice.getuserbyid(id);\n    }\n\n    //查询所有\n    @getmapping("/user")\n    public flux<user> getusers() {\n        return userservice.getalluser();\n    }\n\n    //添加用户\n    @postmapping("/saveuser")\n    public mono<void> saveuser(@requestbody user user) {\n        mono<user> usermono = mono.just(user);\n        return userservice.saveuserinfo(usermono);\n    }\n}\n\n\n\n# springwebflux（基于函数式编程模型）\n\n 1. 在使用函数式编程模型操作时候，需要自己初始化服务器\n\n 2. 基于函数式编程模型时候，有两个核心接口： routerfunction（实现路由功能，请求转发给对应的 handler） handlerfunction（处理请求生成响应的函数）。\n\n 3. 核心任务定义两个函数式接口的实现并且启动需要的服务器。\n\n 4. springwebflux 请求和响应不再是servletrequest和servletresponse ，而是 serverrequest 和 serverresponse\n\n在基于注解实现的情况下具体实现步骤如下\n\n步骤一：编写handle处理器\n\npackage com.zs.webflux.handler;\n\nimport com.zs.webflux.entity.user;\nimport com.zs.webflux.service.iuserservice;\nimport com.zs.webflux.service.userserviceimpl;\nimport org.springframework.http.mediatype;\nimport org.springframework.web.reactive.function.server.serverrequest;\nimport org.springframework.web.reactive.function.server.serverresponse;\nimport reactor.core.publisher.flux;\nimport reactor.core.publisher.mono;\n\nimport static org.springframework.web.reactive.function.bodyinserters.fromobject;\n\n/**\n * create by 张邵\n * 2024/1/15 18:05\n */\npublic class userhandler {\n    private iuserservice userservice;\n\n    public userhandler() {\n        this.userservice = new userserviceimpl();\n    }\n\n    //根据 id 查询\n    public mono<serverresponse> getuserbyid(serverrequest request) {\n        //获取 id 值\n        int productid = integer.valueof(request.pathvariable("id"));\n        //空值处理\n        mono<serverresponse> notfound = serverresponse.notfound().build();\n        //调用 service 方法得到数据\n        mono<user> usermono = this.userservice.getuserbyid(productid);\n        //把 productmono 进行转换返回\n        //使用 reactor 操作符 flatmap\n        return\n                usermono\n                        .flatmap(person ->\n                                serverresponse.ok().contenttype(mediatype.application_json)\n                                        .body(fromobject(person)))\n                        .switchifempty(notfound);\n    }\n\n    //查询所有\n    public mono<serverresponse> getalluser(serverrequest serverrequest) {\n        //调用 service 得到结果\n        flux<user> users = this.userservice.getalluser();\n        return\n                serverresponse.ok().contenttype(mediatype.application_json).body(users, user.class);\n    }\n\n    //添加\n    public mono<serverresponse> saveuser(serverrequest request) {\n        //得到 product 对象\n        mono<user> usermono = request.bodytomono(user.class);\n        return\n                serverresponse.ok().build(this.userservice.saveuserinfo(usermono));\n    }\n}\n\n\n步骤一：fluxserver编写\n\npackage com.zs.webflux.server;\n\nimport com.zs.webflux.handler.userhandler;\nimport org.springframework.http.server.reactive.httphandler;\nimport org.springframework.http.server.reactive.reactorhttphandleradapter;\nimport org.springframework.web.reactive.function.server.routerfunction;\nimport org.springframework.web.reactive.function.server.routerfunctions;\nimport org.springframework.web.reactive.function.server.serverresponse;\nimport reactor.netty.http.server.httpserver;\n\nimport static org.springframework.http.mediatype.application_json;\nimport static org.springframework.web.reactive.function.server.requestpredicates.*;\n\n/**\n * create by 张邵\n * 2024/1/15 18:15\n */\npublic class fluxserver {\n    //1 创建 router 路由\n    public routerfunction<serverresponse> routingfunction() {\n        //创建 hanler 对象\n        userhandler handler = new userhandler();\n        //设置路由\n        return routerfunctions.route(\n                        get("/user/{id}").and(accept(application_json)), handler::getuserbyid)\n                .androute(get("/user").and(accept(application_json)), handler::getalluser)\n                .androute(post("/saveuser").and(accept(application_json)), handler::saveuser);\n    }\n\n    //2 创建服务器完成适配\n    public void createreactorserver() {\n        //路由和 handler 适配\n        routerfunction<serverresponse> route = routingfunction();\n        httphandler httphandler = routerfunctions.tohttphandler(route);\n        reactorhttphandleradapter adapter = new\n                reactorhttphandleradapter(httphandler);\n        //创建服务器\n        httpserver httpserver = httpserver.create();\n        httpserver\n                .port(8095)\n                .handle(adapter).bindnow();\n    }\n\n    //最终调用\n    public static void main(string[] args) throws exception {\n        fluxserver server = new fluxserver();\n        server.createreactorserver();\n        system.out.println("enter to exit");\n        system.in.read();\n    }\n}\n\n\n\n# 使用flux客户端的方式\n\npackage com.zs.webflux.server;\n\nimport com.zs.webflux.entity.user;\nimport org.springframework.http.mediatype;\nimport org.springframework.web.reactive.function.client.webclient;\nimport reactor.core.publisher.flux;\n\n/**\n * create by 张邵\n * 2024/1/15 18:40\n */\npublic class fluxclient {\n    public static void main(string[] args) {\n        //调用服务器地址\n        webclient webclient = webclient.create("http://localhost:8095");\n        //根据 id 查询\n        string id = "1";\n        user userresult = webclient.get().uri("/user/{id}", id)\n                .accept(mediatype.application_json).retrieve().bodytomono(user.class)\n                .block();\n        system.out.println("查询结果：" + userresult);\n        //查询所有\n        flux<user> results = webclient.get().uri("/user")\n                .accept(mediatype.application_json).retrieve().bodytoflux(user.class);\n        results.map(user -> user)\n                .buffer().doonnext(system.out::println).blockfirst();\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"spring--6.1.ioc-创建简单的容器",frontmatter:{"autoGroup-1":"手撕spring"},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.1.ioc-%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%B9%E5%99%A8.html",relativePath:"zs-ee-框架/spring/spring--6.1.ioc-创建简单的容器.md",key:"v-06dcd69c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.1.ioc-%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%B9%E5%99%A8.html",headers:[{level:2,title:"目标",slug:"目标",normalizedTitle:"目标",charIndex:30},{level:2,title:"设计",slug:"设计",normalizedTitle:"设计",charIndex:442},{level:2,title:"实现",slug:"实现",normalizedTitle:"实现",charIndex:461},{level:3,title:"2. Bean 定义",slug:"_2-bean-定义",normalizedTitle:"2. bean 定义",charIndex:1884},{level:3,title:"Bean 工厂",slug:"bean-工厂",normalizedTitle:"bean 工厂",charIndex:2315},{level:2,title:"测试",slug:"测试",normalizedTitle:"测试",charIndex:772},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:3674}],lastUpdated:"2024年1月17日星期三下午2点17分",lastUpdatedTimestamp:1705472246e3,headersStr:"目标 设计 实现 2. Bean 定义 Bean 工厂 测试 总结",content:'# spring--6.1.ioc-创建简单的容器\n\n\n# 目标\n\nSpring Bean 容器是什么？\n\nSpring 包含并管理应用对象的配置和生命周期，在这个意义上它是一种用于承载对象的容器，你可以配置你的每个 Bean 对象是如何被创建的，这些 Bean 可以创建一个单独的实例或者每次需要时都生成一个新的实例，以及它们是如何相互关联构建和使用的。\n\n如果一个 Bean 对象交给 Spring 容器管理，那么这个 Bean 对象就应该以类似零件的方式被拆解后存放到 Bean 的定义中，这样相当于一种把对象解耦的操作，可以由 Spring 更加容易的管理，就像处理循环依赖等操作。\n\n当一个 Bean 对象被定义存放以后，再由 Spring 统一进行装配，这个过程包括 Bean 的初始化、属性填充等，最终我们就可以完整的使用一个 Bean 实例化后的对象了。\n\n而我们本章节的案例目标就是定义一个简单的 Spring 容器，用于定义、存放和获取 Bean 对象。\n\n\n# 设计\n\n凡是可以存放数据的具体数据结构实现，都可以称之为容器。例如：ArrayList、LinkedList、HashSet等，但在 Spring Bean 容器的场景下，我们需要一种可以用于存放和名称索引式的数据结构，所以选择 HashMap 是最合适不过的。\n\n这里简单介绍一下 HashMap，HashMap 是一种基于扰动函数、负载因子、红黑树转换等技术内容，形成的拉链寻址的数据结构，它能让数据更加散列的分布在哈希桶以及碰撞时形成的链表和红黑树上。它的数据结构会尽可能最大限度的让整个数据读取的复杂度在 O(1) ~ O(Logn) ~O(n)之间，当然在极端情况下也会有 O(n) 链表查找数据较多的情况。不过我们经过10万数据的扰动函数再寻址验证测试，数据会均匀的散列在各个哈希桶索引上，所以 HashMap 非常适合用在 Spring Bean 的容器实现上。\n\n另外一个简单的 Spring Bean 容器实现，还需 Bean 的定义、注册、获取三个基本步骤，简化设计如下；\n\n\n\n * 定义：BeanDefinition，可能这是你在查阅 Spring 源码时经常看到的一个类，例如它会包括 singleton、prototype、BeanClassName 等。但目前我们初步实现会更加简单的处理，只定义一个 Object 类型用于存放对象。\n * 注册：这个过程就相当于我们把数据存放到 HashMap 中，只不过现在 HashMap 存放的是定义了的 Bean 的对象信息。\n * 获取：最后就是获取对象，Bean 的名字就是key，Spring 容器初始化好 Bean 以后，就可以直接获取了。\n\n接下来我们就按照这个设计，做一个简单的 Spring Bean 容器代码实现。编码的过程往往并不会有多复杂，但知晓设计过程却更加重要！\n\n\n# 实现\n\n.\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── com\n    │   │       └── zs\n    │   │           ├── BeanDefinition.java\n    │   │           └── BeanFactory.java\n    │   └── resources\n    └── test\n        └── java\n            └── com\n                └── zs\n                    ├── SimpleBeanContainerTest.java\n                    └── bean\n                        └── UserService.java\n\n\n\n\nSpring Bean 容器的整个实现内容非常简单，也仅仅是包括了一个简单的 BeanFactory 和 BeanDefinition，这里的类名称是与 Spring 源码中一致，只不过现在的类实现会相对来说更简化一些，在后续的实现过程中再不断的添加内容。\n\n 1. BeanDefinition，用于定义 Bean 实例化信息，现在的实现是以一个 Object 存放对象\n 2. BeanFactory，代表了 Bean 对象的工厂，可以存放 Bean 定义到 Map 中以及获取。\n\n\n# 2. Bean 定义\n\npublic class BeanDefinition {\n\n    private Object bean;\n\n    public BeanDefinition(Object bean) {\n        this.bean = bean;\n    }\n\n    public Object getBean() {\n        return bean;\n    }\n}\n\n\n * 目前的 Bean 定义中，只有一个 Object 用于存放 Bean 对象。如果感兴趣可以参考 Spring 源码中这个类的信息，名称都是一样的。\n * 不过在后面陆续的实现中会逐步完善 BeanDefinition 相关属性的填充，例如：SCOPE_SINGLETON、SCOPE_PROTOTYPE、ROLE_APPLICATION、ROLE_SUPPORT、ROLE_INFRASTRUCTURE 以及 Bean Class 信息。\n\n\n# Bean 工厂\n\npublic class BeanFactory {\n\n    private Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>();\n\n    public Object getBean(String name) {\n        return beanDefinitionMap.get(name).getBean();\n    }\n\n    public void registerBeanDefinition(String name, BeanDefinition beanDefinition) {\n        beanDefinitionMap.put(name, beanDefinition);\n    }\n\n}\n\n\n * 在 Bean 工厂的实现中，包括了 Bean 的注册，这里注册的是 Bean 的定义信息。同时在这个类中还包括了获取 Bean 的操作。\n * 目前的 BeanFactory 仍然是非常简化的实现，但这种简化的实现内容也是整个 Spring 容器中关于 Bean 使用的最终体现结果，只不过实现过程只展示出基本的核心原理。在后续的补充实现中，这个会不断变得庞大。\n\n\n# 测试\n\npublic class UserService {\n\n    public void queryUserInfo(){\n        System.out.println("查询用户信息");\n    }\n\n}\n\n\n这里简单定义了一个 UserService 对象，方便我们后续对 Spring 容器测试\n\n@Test\npublic void test_BeanFactory(){\n    // 1.初始化 BeanFactory\n    BeanFactory beanFactory = new BeanFactory();\n    \n    // 2.注册 bean\n    BeanDefinition beanDefinition = new BeanDefinition(new UserService());\n    beanFactory.registerBeanDefinition("userService", beanDefinition);\n    \n    // 3.获取 bean\n    UserService userService = (UserService) beanFactory.getBean("userService");\n    userService.queryUserInfo();\n}\n\n\n * 在单测中主要包括初始化 Bean 工厂、注册 Bean、获取 Bean，三个步骤，使用效果上贴近与 Spring，但显得会更简化。\n\n * 在 Bean 的注册中，这里是直接把 UserService 实例化后作为入参传递给 BeanDefinition 的，在后续的陆续实现中，我们会把这部分内容放入 Bean 工厂中实现。\n\n * 通过测试结果可以看到，目前的 Spring Bean 容器案例，已经稍有雏形。\n\n\n# 总结\n\n * 整篇关于 Spring Bean 容器的一个雏形就已经实现完成了，相对来说这部分代码并不会难住任何人，只要你稍加尝试就可以接受这部分内容的实现。\n * 但对于一个知识的学习来说，写代码只是最后的步骤，往往整个思路、设计、方案，才更重要，只要你知道了因为什么、所以什么，才能让你有一个真正的理解。\n * 下一章节会在此工程基础上扩容实现，要比现在的类多一些。不过每一篇的实现上，我都会以一个需求视角进行目标分析和方案设计，让大家在学习编码之外更能注重更多技术价值的学习\n\n定义一个简单的bean容器BeanFactory，内部包含一个map用以保存bean，只有注册bean和获取bean两个方法\n\npublic class BeanFactory {\n\tprivate Map<String, Object> beanMap = new HashMap<>();\n\n\tpublic void registerBean(String name, Object bean) {\n\t\tbeanMap.put(name, bean);\n\t}\n\n\tpublic Object getBean(String name) {\n\t\treturn beanMap.get(name);\n\t}\n}\n\n\n测试：\n\npublic class SimpleBeanContainerTest {\n\n\t@Test\n\tpublic void testGetBean() throws Exception {\n\t\tBeanFactory beanFactory = new BeanFactory();\n\t\tbeanFactory.registerBean("helloService", new HelloService());\n\t\tHelloService helloService = (HelloService) beanFactory.getBean("helloService");\n\t\tassertThat(helloService).isNotNull();\n\t\tassertThat(helloService.sayHello()).isEqualTo("hello");\n\t}\n\n\tclass HelloService {\n\t\tpublic String sayHello() {\n\t\t\tSystem.out.println("hello");\n\t\t\treturn "hello";\n\t\t}\n\t}\n}\n',normalizedContent:'# spring--6.1.ioc-创建简单的容器\n\n\n# 目标\n\nspring bean 容器是什么？\n\nspring 包含并管理应用对象的配置和生命周期，在这个意义上它是一种用于承载对象的容器，你可以配置你的每个 bean 对象是如何被创建的，这些 bean 可以创建一个单独的实例或者每次需要时都生成一个新的实例，以及它们是如何相互关联构建和使用的。\n\n如果一个 bean 对象交给 spring 容器管理，那么这个 bean 对象就应该以类似零件的方式被拆解后存放到 bean 的定义中，这样相当于一种把对象解耦的操作，可以由 spring 更加容易的管理，就像处理循环依赖等操作。\n\n当一个 bean 对象被定义存放以后，再由 spring 统一进行装配，这个过程包括 bean 的初始化、属性填充等，最终我们就可以完整的使用一个 bean 实例化后的对象了。\n\n而我们本章节的案例目标就是定义一个简单的 spring 容器，用于定义、存放和获取 bean 对象。\n\n\n# 设计\n\n凡是可以存放数据的具体数据结构实现，都可以称之为容器。例如：arraylist、linkedlist、hashset等，但在 spring bean 容器的场景下，我们需要一种可以用于存放和名称索引式的数据结构，所以选择 hashmap 是最合适不过的。\n\n这里简单介绍一下 hashmap，hashmap 是一种基于扰动函数、负载因子、红黑树转换等技术内容，形成的拉链寻址的数据结构，它能让数据更加散列的分布在哈希桶以及碰撞时形成的链表和红黑树上。它的数据结构会尽可能最大限度的让整个数据读取的复杂度在 o(1) ~ o(logn) ~o(n)之间，当然在极端情况下也会有 o(n) 链表查找数据较多的情况。不过我们经过10万数据的扰动函数再寻址验证测试，数据会均匀的散列在各个哈希桶索引上，所以 hashmap 非常适合用在 spring bean 的容器实现上。\n\n另外一个简单的 spring bean 容器实现，还需 bean 的定义、注册、获取三个基本步骤，简化设计如下；\n\n\n\n * 定义：beandefinition，可能这是你在查阅 spring 源码时经常看到的一个类，例如它会包括 singleton、prototype、beanclassname 等。但目前我们初步实现会更加简单的处理，只定义一个 object 类型用于存放对象。\n * 注册：这个过程就相当于我们把数据存放到 hashmap 中，只不过现在 hashmap 存放的是定义了的 bean 的对象信息。\n * 获取：最后就是获取对象，bean 的名字就是key，spring 容器初始化好 bean 以后，就可以直接获取了。\n\n接下来我们就按照这个设计，做一个简单的 spring bean 容器代码实现。编码的过程往往并不会有多复杂，但知晓设计过程却更加重要！\n\n\n# 实现\n\n.\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── com\n    │   │       └── zs\n    │   │           ├── beandefinition.java\n    │   │           └── beanfactory.java\n    │   └── resources\n    └── test\n        └── java\n            └── com\n                └── zs\n                    ├── simplebeancontainertest.java\n                    └── bean\n                        └── userservice.java\n\n\n\n\nspring bean 容器的整个实现内容非常简单，也仅仅是包括了一个简单的 beanfactory 和 beandefinition，这里的类名称是与 spring 源码中一致，只不过现在的类实现会相对来说更简化一些，在后续的实现过程中再不断的添加内容。\n\n 1. beandefinition，用于定义 bean 实例化信息，现在的实现是以一个 object 存放对象\n 2. beanfactory，代表了 bean 对象的工厂，可以存放 bean 定义到 map 中以及获取。\n\n\n# 2. bean 定义\n\npublic class beandefinition {\n\n    private object bean;\n\n    public beandefinition(object bean) {\n        this.bean = bean;\n    }\n\n    public object getbean() {\n        return bean;\n    }\n}\n\n\n * 目前的 bean 定义中，只有一个 object 用于存放 bean 对象。如果感兴趣可以参考 spring 源码中这个类的信息，名称都是一样的。\n * 不过在后面陆续的实现中会逐步完善 beandefinition 相关属性的填充，例如：scope_singleton、scope_prototype、role_application、role_support、role_infrastructure 以及 bean class 信息。\n\n\n# bean 工厂\n\npublic class beanfactory {\n\n    private map<string, beandefinition> beandefinitionmap = new concurrenthashmap<>();\n\n    public object getbean(string name) {\n        return beandefinitionmap.get(name).getbean();\n    }\n\n    public void registerbeandefinition(string name, beandefinition beandefinition) {\n        beandefinitionmap.put(name, beandefinition);\n    }\n\n}\n\n\n * 在 bean 工厂的实现中，包括了 bean 的注册，这里注册的是 bean 的定义信息。同时在这个类中还包括了获取 bean 的操作。\n * 目前的 beanfactory 仍然是非常简化的实现，但这种简化的实现内容也是整个 spring 容器中关于 bean 使用的最终体现结果，只不过实现过程只展示出基本的核心原理。在后续的补充实现中，这个会不断变得庞大。\n\n\n# 测试\n\npublic class userservice {\n\n    public void queryuserinfo(){\n        system.out.println("查询用户信息");\n    }\n\n}\n\n\n这里简单定义了一个 userservice 对象，方便我们后续对 spring 容器测试\n\n@test\npublic void test_beanfactory(){\n    // 1.初始化 beanfactory\n    beanfactory beanfactory = new beanfactory();\n    \n    // 2.注册 bean\n    beandefinition beandefinition = new beandefinition(new userservice());\n    beanfactory.registerbeandefinition("userservice", beandefinition);\n    \n    // 3.获取 bean\n    userservice userservice = (userservice) beanfactory.getbean("userservice");\n    userservice.queryuserinfo();\n}\n\n\n * 在单测中主要包括初始化 bean 工厂、注册 bean、获取 bean，三个步骤，使用效果上贴近与 spring，但显得会更简化。\n\n * 在 bean 的注册中，这里是直接把 userservice 实例化后作为入参传递给 beandefinition 的，在后续的陆续实现中，我们会把这部分内容放入 bean 工厂中实现。\n\n * 通过测试结果可以看到，目前的 spring bean 容器案例，已经稍有雏形。\n\n\n# 总结\n\n * 整篇关于 spring bean 容器的一个雏形就已经实现完成了，相对来说这部分代码并不会难住任何人，只要你稍加尝试就可以接受这部分内容的实现。\n * 但对于一个知识的学习来说，写代码只是最后的步骤，往往整个思路、设计、方案，才更重要，只要你知道了因为什么、所以什么，才能让你有一个真正的理解。\n * 下一章节会在此工程基础上扩容实现，要比现在的类多一些。不过每一篇的实现上，我都会以一个需求视角进行目标分析和方案设计，让大家在学习编码之外更能注重更多技术价值的学习\n\n定义一个简单的bean容器beanfactory，内部包含一个map用以保存bean，只有注册bean和获取bean两个方法\n\npublic class beanfactory {\n\tprivate map<string, object> beanmap = new hashmap<>();\n\n\tpublic void registerbean(string name, object bean) {\n\t\tbeanmap.put(name, bean);\n\t}\n\n\tpublic object getbean(string name) {\n\t\treturn beanmap.get(name);\n\t}\n}\n\n\n测试：\n\npublic class simplebeancontainertest {\n\n\t@test\n\tpublic void testgetbean() throws exception {\n\t\tbeanfactory beanfactory = new beanfactory();\n\t\tbeanfactory.registerbean("helloservice", new helloservice());\n\t\thelloservice helloservice = (helloservice) beanfactory.getbean("helloservice");\n\t\tassertthat(helloservice).isnotnull();\n\t\tassertthat(helloservice.sayhello()).isequalto("hello");\n\t}\n\n\tclass helloservice {\n\t\tpublic string sayhello() {\n\t\t\tsystem.out.println("hello");\n\t\t\treturn "hello";\n\t\t}\n\t}\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705463285e3},{title:"版本关系",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/",relativePath:"zs-ee-框架/README.md",key:"v-732234fc",path:"/zs-ee-%E6%A1%86%E6%9E%B6/",headers:[{level:3,title:"SpringBoot版本",slug:"springboot版本",normalizedTitle:"springboot版本",charIndex:11},{level:3,title:"SpringCloud版本",slug:"springcloud版本",normalizedTitle:"springcloud版本",charIndex:773},{level:3,title:"Spring Cloud Alibaba版本",slug:"spring-cloud-alibaba版本",normalizedTitle:"spring cloud alibaba版本",charIndex:1517},{level:3,title:"版本选择",slug:"版本选择",normalizedTitle:"版本选择",charIndex:2662}],lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:"SpringBoot版本 SpringCloud版本 Spring Cloud Alibaba版本 版本选择",content:'# 版本关系\n\n\n# SpringBoot版本\n\nhttps://spring.io/projects/spring-boot/#support\n\n> springboot\n\n分支      初始发行          支持结束          结束商业支持       JDK          MAVEN    TOMCAT\n3.2.x   2023-11-23    2024-11-23    2026-02-23   Java 17-21   3.6.3+   10.1\n3.1.x   2023-05-18    2024-05-18    2025-08-18   Java 17-21   3.6.3+   10.1\n3.0.x   2022年11月24日   2023-11-24    2025-02-24   Java 17-21   3.5+     10.1\n2.7.x   2022-05-19    2023-11-24    2025-08-24   Java 8-21    3.5+     9.0\n2.6.x   2021-11-17    2022年11月24日   2024-02-24   Java 8-19    3.5+     9.0\n2.5.x   2021-05-20    2022-05-19    2023-08-24   Java 8-18    3.5+     9.0\n2.4.x   2020-11-12    2021-11-18    2023-02-23   Java 8-16    3.5+     9.0\n2.3.x   2020-05-15    2021-05-20    2022-08-20   Java 8-14    3.3+     9.0\n\n\n# SpringCloud版本\n\nSpringCloud之前的版本名称是伦敦地铁站的站名命名，且首字母顺序与版本时间顺序一致\n\nAngel Brixton Camden Dalston Edgware Finchley Greenwich Hoxton\n\n当SpringCloud的发布内容积累到临界点或者一个重大Bug被解决后，会发布一个"Service Releases"版本，简称"SR"版本。\n\n> Spring cloud\n\nRELEASE TRAIN          SPRING BOOT GENERATION\n2023.0.x aka Leyton    3.2.x\n2022.0.x aka Kilburn   3.0.x, 3.1.x (Starting with 2022.0.3)\n2021.0.x aka Jubilee   2.6.x, 2.7.x (Starting with 2021.0.3)\n2020.0.x aka Ilford    2.4.x, 2.5.x (Starting with 2020.0.3)\nHoxton                 2.2.x, 2.3.x (Starting with SR5)\n\nSPRINGCLOUD版本   SPRINGBOOT版本\n2023.0.0        3.2.0\n2022.0.4        3.0.9\n2021.0.9        2.6.15\n2020.0.5        2.4.13\n2020.0.4        2.4.13\nHoxton.SR12     推荐：2.3.12.RELEASE\nHoxton.SR8      推荐：2.3.3.RELEASE\n\n\n# Spring Cloud Alibaba版本\n\nhttps://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明\n\n由于 Spring Boot 3.0，Spring Boot 2.7~2.4 和 2.4 以下版本之间变化较大，目前企业级客户老项目相关 Spring Boot 版本仍停留在 Spring Boot 2.4 以下，为了同时满足存量用户和新用户不同需求，社区以 Spring Boot 3.0 和 2.4 分别为分界线，同时维护 2022.x、2021.x、2.2.x 三个分支迭代。如果不想跨分支升级，如需使用新特性，请升级为对应分支的新版本。 为了规避相关构建过程中的依赖冲突问题，我们建议可以通过 云原生应用脚手架 进行项目创建。\n\n> 2021.x 分支\n\nSPRING CLOUD ALIBABA VERSION   SPRING CLOUD VERSION    SPRING BOOT VERSION\n2021.0.5.0*                    Spring Cloud 2021.0.5   2.6.13\n2021.0.4.0                     Spring Cloud 2021.0.4   2.6.11\n2021.0.1.0                     Spring Cloud 2021.0.1   2.6.3\n2021.1                         Spring Cloud 2020.0.1   2.4.2\n\n> 2.2.x 分支\n\nSPRING CLOUD ALIBABA VERSION   SPRING CLOUD VERSION       SPRING BOOT VERSION\n2.2.10-RC1*                    Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.9.RELEASE                  Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.8.RELEASE                  Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.7.RELEASE                  Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.6.RELEASE                  Spring Cloud Hoxton.SR9    2.3.2.RELEASE\n\n\n# 版本选择\n\n依赖                                  版本\nJdk                                 8\nspring-boot-dependencies            2.3.12.RELEASE\nspring-cloud-dependencies           Hoxton.SR12\nspring-cloud-alibaba-dependencies   2.2.10-RC1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\nJdk                                 8\nspring-boot-dependencies            2.4.2\nspring-cloud-dependencies           2020.0.6\nspring-cloud-alibaba-dependencies   2021.1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\nJdk                                 8\nspring-boot-dependencies            2.7.6\nspring-cloud-dependencies           2021.0.5\nspring-cloud-alibaba-dependencies   2021.0.5.0\nmybatis-spring-boot-starter         2.3.0\n\n依赖                                  版本\nJdk                                 17\nspring-boot-dependencies            3.0.2\nspring-cloud-dependencies           2022.0.0-RC2\nspring-cloud-alibaba-dependencies   2022.0.0.0-RC2\nmybatis-spring-boot-starter         3.0.0',normalizedContent:'# 版本关系\n\n\n# springboot版本\n\nhttps://spring.io/projects/spring-boot/#support\n\n> springboot\n\n分支      初始发行          支持结束          结束商业支持       jdk          maven    tomcat\n3.2.x   2023-11-23    2024-11-23    2026-02-23   java 17-21   3.6.3+   10.1\n3.1.x   2023-05-18    2024-05-18    2025-08-18   java 17-21   3.6.3+   10.1\n3.0.x   2022年11月24日   2023-11-24    2025-02-24   java 17-21   3.5+     10.1\n2.7.x   2022-05-19    2023-11-24    2025-08-24   java 8-21    3.5+     9.0\n2.6.x   2021-11-17    2022年11月24日   2024-02-24   java 8-19    3.5+     9.0\n2.5.x   2021-05-20    2022-05-19    2023-08-24   java 8-18    3.5+     9.0\n2.4.x   2020-11-12    2021-11-18    2023-02-23   java 8-16    3.5+     9.0\n2.3.x   2020-05-15    2021-05-20    2022-08-20   java 8-14    3.3+     9.0\n\n\n# springcloud版本\n\nspringcloud之前的版本名称是伦敦地铁站的站名命名，且首字母顺序与版本时间顺序一致\n\nangel brixton camden dalston edgware finchley greenwich hoxton\n\n当springcloud的发布内容积累到临界点或者一个重大bug被解决后，会发布一个"service releases"版本，简称"sr"版本。\n\n> spring cloud\n\nrelease train          spring boot generation\n2023.0.x aka leyton    3.2.x\n2022.0.x aka kilburn   3.0.x, 3.1.x (starting with 2022.0.3)\n2021.0.x aka jubilee   2.6.x, 2.7.x (starting with 2021.0.3)\n2020.0.x aka ilford    2.4.x, 2.5.x (starting with 2020.0.3)\nhoxton                 2.2.x, 2.3.x (starting with sr5)\n\nspringcloud版本   springboot版本\n2023.0.0        3.2.0\n2022.0.4        3.0.9\n2021.0.9        2.6.15\n2020.0.5        2.4.13\n2020.0.4        2.4.13\nhoxton.sr12     推荐：2.3.12.release\nhoxton.sr8      推荐：2.3.3.release\n\n\n# spring cloud alibaba版本\n\nhttps://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明\n\n由于 spring boot 3.0，spring boot 2.7~2.4 和 2.4 以下版本之间变化较大，目前企业级客户老项目相关 spring boot 版本仍停留在 spring boot 2.4 以下，为了同时满足存量用户和新用户不同需求，社区以 spring boot 3.0 和 2.4 分别为分界线，同时维护 2022.x、2021.x、2.2.x 三个分支迭代。如果不想跨分支升级，如需使用新特性，请升级为对应分支的新版本。 为了规避相关构建过程中的依赖冲突问题，我们建议可以通过 云原生应用脚手架 进行项目创建。\n\n> 2021.x 分支\n\nspring cloud alibaba version   spring cloud version    spring boot version\n2021.0.5.0*                    spring cloud 2021.0.5   2.6.13\n2021.0.4.0                     spring cloud 2021.0.4   2.6.11\n2021.0.1.0                     spring cloud 2021.0.1   2.6.3\n2021.1                         spring cloud 2020.0.1   2.4.2\n\n> 2.2.x 分支\n\nspring cloud alibaba version   spring cloud version       spring boot version\n2.2.10-rc1*                    spring cloud hoxton.sr12   2.3.12.release\n2.2.9.release                  spring cloud hoxton.sr12   2.3.12.release\n2.2.8.release                  spring cloud hoxton.sr12   2.3.12.release\n2.2.7.release                  spring cloud hoxton.sr12   2.3.12.release\n2.2.6.release                  spring cloud hoxton.sr9    2.3.2.release\n\n\n# 版本选择\n\n依赖                                  版本\njdk                                 8\nspring-boot-dependencies            2.3.12.release\nspring-cloud-dependencies           hoxton.sr12\nspring-cloud-alibaba-dependencies   2.2.10-rc1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\njdk                                 8\nspring-boot-dependencies            2.4.2\nspring-cloud-dependencies           2020.0.6\nspring-cloud-alibaba-dependencies   2021.1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\njdk                                 8\nspring-boot-dependencies            2.7.6\nspring-cloud-dependencies           2021.0.5\nspring-cloud-alibaba-dependencies   2021.0.5.0\nmybatis-spring-boot-starter         2.3.0\n\n依赖                                  版本\njdk                                 17\nspring-boot-dependencies            3.0.2\nspring-cloud-dependencies           2022.0.0-rc2\nspring-cloud-alibaba-dependencies   2022.0.0.0-rc2\nmybatis-spring-boot-starter         3.0.0',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"概述--介绍",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E6%A6%82%E8%BF%B0--%E4%BB%8B%E7%BB%8D.html",relativePath:"zs-ee-框架/cloud-gateway/概述--介绍.md",key:"v-99f7038c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/%E6%A6%82%E8%BF%B0--%E4%BB%8B%E7%BB%8D.html",lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:null,content:"# 概述--介绍\n\n * 网关旨在为微服务提供一种简单有效的统一的API路由管理方式\n * 在微服务中，不同的微服务可以有不同的网络地址，各个微服务之间通过相互调用完成用户请求，客户端可能通过调用N个微服务的接口完成一个用户请求\n   * 存在的问题：\n     * 多次调用不同的服务，增加客户端的复杂性\n     * 认证复杂，每个服务都要进行认证\n     * http请求不同服务次数增加，性能不高\n * 网关：系统的入口，封装了应用程序的内部结构，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现， 如：认证、鉴权、监控、缓存、负载均衡、流量管控、路由转发等\n * 在目前的网关解决方案中有：nginx+lua、netfix zuul、spring cloud gateway 等\n\n",normalizedContent:"# 概述--介绍\n\n * 网关旨在为微服务提供一种简单有效的统一的api路由管理方式\n * 在微服务中，不同的微服务可以有不同的网络地址，各个微服务之间通过相互调用完成用户请求，客户端可能通过调用n个微服务的接口完成一个用户请求\n   * 存在的问题：\n     * 多次调用不同的服务，增加客户端的复杂性\n     * 认证复杂，每个服务都要进行认证\n     * http请求不同服务次数增加，性能不高\n * 网关：系统的入口，封装了应用程序的内部结构，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现， 如：认证、鉴权、监控、缓存、负载均衡、流量管控、路由转发等\n * 在目前的网关解决方案中有：nginx+lua、netfix zuul、spring cloud gateway 等\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"spring--6.2.ioc-定义池和单例池",frontmatter:{"autoGroup-1":"手撕spring"},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.2.ioc-%E5%AE%9A%E4%B9%89%E6%B1%A0%E5%92%8C%E5%8D%95%E4%BE%8B%E6%B1%A0.html",relativePath:"zs-ee-框架/spring/spring--6.2.ioc-定义池和单例池.md",key:"v-7447f441",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.2.ioc-%E5%AE%9A%E4%B9%89%E6%B1%A0%E5%92%8C%E5%8D%95%E4%BE%8B%E6%B1%A0.html",headers:[{level:2,title:"设计",slug:"设计",normalizedTitle:"设计",charIndex:138},{level:3,title:"BeanDefinition 定义",slug:"beandefinition-定义",normalizedTitle:"beandefinition 定义",charIndex:2883},{level:3,title:"单例注册接口定义和实现",slug:"单例注册接口定义和实现",normalizedTitle:"单例注册接口定义和实现",charIndex:3054},{level:3,title:"抽象类定义模板方法(AbstractBeanFactory)",slug:"抽象类定义模板方法-abstractbeanfactory",normalizedTitle:"抽象类定义模板方法(abstractbeanfactory)",charIndex:3262},{level:3,title:"实例化Bean类(AbstractAutowireCapableBeanFactory)",slug:"实例化bean类-abstractautowirecapablebeanfactory",normalizedTitle:"实例化bean类(abstractautowirecapablebeanfactory)",charIndex:3670},{level:3,title:"核心类实现(DefaultListableBeanFactory)",slug:"核心类实现-defaultlistablebeanfactory",normalizedTitle:"核心类实现(defaultlistablebeanfactory)",charIndex:3878},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:4476}],lastUpdated:"2024年1月17日星期三下午2点17分",lastUpdatedTimestamp:1705472246e3,headersStr:"设计 BeanDefinition 定义 单例注册接口定义和实现 抽象类定义模板方法(AbstractBeanFactory) 实例化Bean类(AbstractAutowireCapableBeanFactory) 核心类实现(DefaultListableBeanFactory) 总结",content:"# spring--6.2.ioc-定义池和单例池\n\n核心思想：\n\n * bean的定义池中存放bean的 class信息用于反射创建bean\n\n * bean单例池中存放创建完成的对象，可直接获取使用\n\n * 如果单例池中不存在，则通过反射创建，并放入单例池中\n\n\n\n\n# 设计\n\n鉴于本章节的案例目标，我们需要将 Spring Bean 容器完善起来，首先非常重要的一点是在 Bean 注册的时候只注册一个类信息，而不会直接把实例化信息注册到 Spring 容器中。那么就需要修改 BeanDefinition 中的属性 Object 为 Class，接下来在需要做的就是在获取 Bean 对象时需要处理 Bean 对象的实例化操作以及判断当前单例对象在容器中是否已经缓存起来了。\n\n\n\n * 首先我们需要定义 BeanFactory 这样一个 Bean 工厂，提供 Bean 的获取方法 getBean(String name)，之后这个 Bean 工厂接口由抽象类 AbstractBeanFactory 实现。这样使用模板模式 (opens new window)的设计方式，可以统一收口通用核心方法的调用逻辑和标准定义，也就很好的控制了后续的实现者不用关心调用逻辑，按照统一方式执行。那么类的继承者只需要关心具体方法的逻辑实现即可。\n * 那么在继承抽象类 AbstractBeanFactory 后的 AbstractAutowireCapableBeanFactory 就可以实现相应的抽象方法了，因为 AbstractAutowireCapableBeanFactory 本身也是一个抽象类，所以它只会实现属于自己的抽象方法，其他抽象方法由继承 AbstractAutowireCapableBeanFactory 的类实现。这里就体现了类实现过程中的各司其职，你只需要关心属于你的内容，不是你的内容，不要参与。这一部分内容我们会在代码里有具体的体现\n * 另外这里还有块非常重要的知识点，就是关于单例 SingletonBeanRegistry 的接口定义实现，而 DefaultSingletonBeanRegistry 对接口实现后，会被抽象类 AbstractBeanFactory 继承。现在 AbstractBeanFactory 就是一个非常完整且强大的抽象类了，也能非常好的体现出它对模板模式的抽象定义。接下来我们就带着这些设计层面的思考，去看代码的具体实现结果\n\n.\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── org\n    │   │       └── springframework\n    │   │           └── beans\n    │   │               ├── BeansException.java\n    │   │               └── factory\n    │   │                   ├── BeanFactory.java\n    │   │                   ├── config\n    │   │                   │   ├── BeanDefinition.java\n    │   │                   │   └── SingletonBeanRegistry.java\n    │   │                   └── support\n    │   │                       ├── AbstractAutowireCapableBeanFactory.java\n    │   │                       ├── AbstractBeanFactory.java\n    │   │                       ├── BeanDefinitionRegistry.java\n    │   │                       ├── DefaultListableBeanFactory.java\n    │   │                       └── DefaultSingletonBeanRegistry.java\n    │   └── resources\n    └── test\n        └── java\n            └── org\n                └── springframework\n                    └── test\n                        └── ioc\n                            ├── BeanDefinitionAndBeanDefinitionRegistryTest.java\n                            └── HelloService.java\n\n\n\n虽然这一章节关于 Spring Bean 容器的功能实现与 Spring 源码中还有不少的差距，但以目前实现结果的类关系图来看，其实已经具备了一定的设计复杂性，这些复杂的类关系设计在各个接口定义和实现以及在抽象类继承中都有所体现，例如：\n\n * BeanFactory 的定义由 AbstractBeanFactory 抽象类实现接口的 getBean 方法\n * 而 AbstractBeanFactory 又继承了实现了 SingletonBeanRegistry 的DefaultSingletonBeanRegistry 类。这样 AbstractBeanFactory 抽象类就具备了单例 Bean 的注册功能。\n * AbstractBeanFactory 中又定义了两个抽象方法：getBeanDefinition(String beanName)、createBean(String beanName, BeanDefinition beanDefinition) ，而这两个抽象方法分别由 DefaultListableBeanFactory、AbstractAutowireCapableBeanFactory 实现。\n * 最终 DefaultListableBeanFactory 还会继承抽象类 AbstractAutowireCapableBeanFactory 也就可以调用抽象类中的 createBean 方法了。\n\n综上这一部分的类关系和实现过程还是会有一些复杂的，因为所有的实现都以职责划分、共性分离以及调用关系定义为标准搭建的类关系。这部分内容的学习，可能会丰富你在复杂业务系统开发中的设计思路。\n\n\n# BeanDefinition 定义\n\n * 在 Bean 定义类中已经把上一章节中的 Object bean 替换为 Class，这样就可以把 Bean 的实例化操作放到容器中处理了。如果你有仔细阅读过上一章并做了相应的测试，那么你会发现 Bean 的实例化操作是放在初始化调用阶段传递给 BeanDefinition 构造函数的。\n\n\n# 单例注册接口定义和实现\n\n * 这个类比较简单主要是定义了一个获取单例对象的接口。\n * 在 DefaultSingletonBeanRegistry 中主要实现 getSingleton 方法，同时实现了一个受保护的 addSingleton 方法，这个方法可以被继承此类的其他类调用。包括：AbstractBeanFactory 以及继承的 DefaultListableBeanFactory 调用。\n\n\n# 抽象类定义模板方法(AbstractBeanFactory)\n\n * AbstractBeanFactory 首先继承了 DefaultSingletonBeanRegistry，也就具备了使用单例注册类方法。\n * 接下来很重要的一点是关于接口 BeanFactory 的实现，在方法 getBean 的实现过程中可以看到，主要是对单例 Bean 对象的获取以及在获取不到时需要拿到 Bean 的定义做相应 Bean 实例化操作。那么 getBean 并没有自身的去实现这些方法，而是只定义了调用过程以及提供了抽象方法，由实现此抽象类的其他类做相应实现。\n * 后续继承抽象类 AbstractBeanFactory 的类有两个，包括：AbstractAutowireCapableBeanFactory、DefaultListableBeanFactory，这两个类分别做了相应的实现处理，接着往下看。\n\n\n# 实例化Bean类(AbstractAutowireCapableBeanFactory)\n\n * 在 AbstractAutowireCapableBeanFactory 类中实现了 Bean 的实例化操作 newInstance，其实这块会埋下一个坑，有构造函数入参的对象怎么处理？可以提前思考\n * 在处理完 Bean 对象的实例化后，直接调用 addSingleton 方法存放到单例对象的缓存中去。\n\n\n# 核心类实现(DefaultListableBeanFactory)\n\n * DefaultListableBeanFactory 在 Spring 源码中也是一个非常核心的类，在我们目前的实现中也是逐步贴近于源码，与源码类名保持一致。\n * DefaultListableBeanFactory 继承了 AbstractAutowireCapableBeanFactory 类，也就具备了接口 BeanFactory 和 AbstractBeanFactory 等一连串的功能实现。所以有时候你会看到一些类的强转，调用某些方法，也是因为你强转的类实现接口或继承了某些类。\n * 除此之外这个类还实现了接口 BeanDefinitionRegistry 中的 registerBeanDefinition(String beanName, BeanDefinition beanDefinition) 方法，当然你还会看到一个 getBeanDefinition 的实现，这个方法我们文中提到过它是抽象类 AbstractBeanFactory 中定义的抽象方法。现在注册Bean定义与获取Bean定义就可以同时使用了，是不感觉这个套路还蛮深的。接口定义了注册，抽象类定义了获取，都集中在 DefaultListableBeanFactory 中的 beanDefinitionMap 里\n\n\n# 总结\n\n * 相对于前一章节对 Spring Bean 容器的简单概念实现，本章节中加强了功能的完善。在实现的过程中也可以看到类的关系变得越来越多了，如果没有做过一些稍微复杂的系统类系统，那么即使现在这样9个类搭出来的容器工厂也可以给你绕晕。\n * 在 Spring Bean 容器的实现类中要重点关注类之间的职责和关系，几乎所有的程序功能设计都离不开接口、抽象类、实现、继承，而这些不同特性类的使用就可以非常好的隔离开类的功能职责和作用范围。而这样的知识点也是在学习手写 Spring Bean 容器框架过程非常重要的知识。\n * 最后要强调一下关于整个系列内容的学习，可能在学习的过程中会遇到像第二章节那样非常简单的代码实现，但要做一个有成长的程序员要记住代码实现只是最后的落地结果，而那些设计上的思考才是最有价值的地方。就像你是否遇到过，有人让你给一个内容做个描述、文档、说明，你总觉得太简单了没什么可写的，即使要动笔写了也不知道要从哪开始！其实这些知识内容都来源你对整体功能的理解，这就不只是代码开发还包括了需求目标、方案设计、技术实现、逻辑验证等等过程性的内容。所以，不要只是被看似简单的内容忽略了整体全局观，要学会放开视野，开放学习视角。",normalizedContent:"# spring--6.2.ioc-定义池和单例池\n\n核心思想：\n\n * bean的定义池中存放bean的 class信息用于反射创建bean\n\n * bean单例池中存放创建完成的对象，可直接获取使用\n\n * 如果单例池中不存在，则通过反射创建，并放入单例池中\n\n\n\n\n# 设计\n\n鉴于本章节的案例目标，我们需要将 spring bean 容器完善起来，首先非常重要的一点是在 bean 注册的时候只注册一个类信息，而不会直接把实例化信息注册到 spring 容器中。那么就需要修改 beandefinition 中的属性 object 为 class，接下来在需要做的就是在获取 bean 对象时需要处理 bean 对象的实例化操作以及判断当前单例对象在容器中是否已经缓存起来了。\n\n\n\n * 首先我们需要定义 beanfactory 这样一个 bean 工厂，提供 bean 的获取方法 getbean(string name)，之后这个 bean 工厂接口由抽象类 abstractbeanfactory 实现。这样使用模板模式 (opens new window)的设计方式，可以统一收口通用核心方法的调用逻辑和标准定义，也就很好的控制了后续的实现者不用关心调用逻辑，按照统一方式执行。那么类的继承者只需要关心具体方法的逻辑实现即可。\n * 那么在继承抽象类 abstractbeanfactory 后的 abstractautowirecapablebeanfactory 就可以实现相应的抽象方法了，因为 abstractautowirecapablebeanfactory 本身也是一个抽象类，所以它只会实现属于自己的抽象方法，其他抽象方法由继承 abstractautowirecapablebeanfactory 的类实现。这里就体现了类实现过程中的各司其职，你只需要关心属于你的内容，不是你的内容，不要参与。这一部分内容我们会在代码里有具体的体现\n * 另外这里还有块非常重要的知识点，就是关于单例 singletonbeanregistry 的接口定义实现，而 defaultsingletonbeanregistry 对接口实现后，会被抽象类 abstractbeanfactory 继承。现在 abstractbeanfactory 就是一个非常完整且强大的抽象类了，也能非常好的体现出它对模板模式的抽象定义。接下来我们就带着这些设计层面的思考，去看代码的具体实现结果\n\n.\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── org\n    │   │       └── springframework\n    │   │           └── beans\n    │   │               ├── beansexception.java\n    │   │               └── factory\n    │   │                   ├── beanfactory.java\n    │   │                   ├── config\n    │   │                   │   ├── beandefinition.java\n    │   │                   │   └── singletonbeanregistry.java\n    │   │                   └── support\n    │   │                       ├── abstractautowirecapablebeanfactory.java\n    │   │                       ├── abstractbeanfactory.java\n    │   │                       ├── beandefinitionregistry.java\n    │   │                       ├── defaultlistablebeanfactory.java\n    │   │                       └── defaultsingletonbeanregistry.java\n    │   └── resources\n    └── test\n        └── java\n            └── org\n                └── springframework\n                    └── test\n                        └── ioc\n                            ├── beandefinitionandbeandefinitionregistrytest.java\n                            └── helloservice.java\n\n\n\n虽然这一章节关于 spring bean 容器的功能实现与 spring 源码中还有不少的差距，但以目前实现结果的类关系图来看，其实已经具备了一定的设计复杂性，这些复杂的类关系设计在各个接口定义和实现以及在抽象类继承中都有所体现，例如：\n\n * beanfactory 的定义由 abstractbeanfactory 抽象类实现接口的 getbean 方法\n * 而 abstractbeanfactory 又继承了实现了 singletonbeanregistry 的defaultsingletonbeanregistry 类。这样 abstractbeanfactory 抽象类就具备了单例 bean 的注册功能。\n * abstractbeanfactory 中又定义了两个抽象方法：getbeandefinition(string beanname)、createbean(string beanname, beandefinition beandefinition) ，而这两个抽象方法分别由 defaultlistablebeanfactory、abstractautowirecapablebeanfactory 实现。\n * 最终 defaultlistablebeanfactory 还会继承抽象类 abstractautowirecapablebeanfactory 也就可以调用抽象类中的 createbean 方法了。\n\n综上这一部分的类关系和实现过程还是会有一些复杂的，因为所有的实现都以职责划分、共性分离以及调用关系定义为标准搭建的类关系。这部分内容的学习，可能会丰富你在复杂业务系统开发中的设计思路。\n\n\n# beandefinition 定义\n\n * 在 bean 定义类中已经把上一章节中的 object bean 替换为 class，这样就可以把 bean 的实例化操作放到容器中处理了。如果你有仔细阅读过上一章并做了相应的测试，那么你会发现 bean 的实例化操作是放在初始化调用阶段传递给 beandefinition 构造函数的。\n\n\n# 单例注册接口定义和实现\n\n * 这个类比较简单主要是定义了一个获取单例对象的接口。\n * 在 defaultsingletonbeanregistry 中主要实现 getsingleton 方法，同时实现了一个受保护的 addsingleton 方法，这个方法可以被继承此类的其他类调用。包括：abstractbeanfactory 以及继承的 defaultlistablebeanfactory 调用。\n\n\n# 抽象类定义模板方法(abstractbeanfactory)\n\n * abstractbeanfactory 首先继承了 defaultsingletonbeanregistry，也就具备了使用单例注册类方法。\n * 接下来很重要的一点是关于接口 beanfactory 的实现，在方法 getbean 的实现过程中可以看到，主要是对单例 bean 对象的获取以及在获取不到时需要拿到 bean 的定义做相应 bean 实例化操作。那么 getbean 并没有自身的去实现这些方法，而是只定义了调用过程以及提供了抽象方法，由实现此抽象类的其他类做相应实现。\n * 后续继承抽象类 abstractbeanfactory 的类有两个，包括：abstractautowirecapablebeanfactory、defaultlistablebeanfactory，这两个类分别做了相应的实现处理，接着往下看。\n\n\n# 实例化bean类(abstractautowirecapablebeanfactory)\n\n * 在 abstractautowirecapablebeanfactory 类中实现了 bean 的实例化操作 newinstance，其实这块会埋下一个坑，有构造函数入参的对象怎么处理？可以提前思考\n * 在处理完 bean 对象的实例化后，直接调用 addsingleton 方法存放到单例对象的缓存中去。\n\n\n# 核心类实现(defaultlistablebeanfactory)\n\n * defaultlistablebeanfactory 在 spring 源码中也是一个非常核心的类，在我们目前的实现中也是逐步贴近于源码，与源码类名保持一致。\n * defaultlistablebeanfactory 继承了 abstractautowirecapablebeanfactory 类，也就具备了接口 beanfactory 和 abstractbeanfactory 等一连串的功能实现。所以有时候你会看到一些类的强转，调用某些方法，也是因为你强转的类实现接口或继承了某些类。\n * 除此之外这个类还实现了接口 beandefinitionregistry 中的 registerbeandefinition(string beanname, beandefinition beandefinition) 方法，当然你还会看到一个 getbeandefinition 的实现，这个方法我们文中提到过它是抽象类 abstractbeanfactory 中定义的抽象方法。现在注册bean定义与获取bean定义就可以同时使用了，是不感觉这个套路还蛮深的。接口定义了注册，抽象类定义了获取，都集中在 defaultlistablebeanfactory 中的 beandefinitionmap 里\n\n\n# 总结\n\n * 相对于前一章节对 spring bean 容器的简单概念实现，本章节中加强了功能的完善。在实现的过程中也可以看到类的关系变得越来越多了，如果没有做过一些稍微复杂的系统类系统，那么即使现在这样9个类搭出来的容器工厂也可以给你绕晕。\n * 在 spring bean 容器的实现类中要重点关注类之间的职责和关系，几乎所有的程序功能设计都离不开接口、抽象类、实现、继承，而这些不同特性类的使用就可以非常好的隔离开类的功能职责和作用范围。而这样的知识点也是在学习手写 spring bean 容器框架过程非常重要的知识。\n * 最后要强调一下关于整个系列内容的学习，可能在学习的过程中会遇到像第二章节那样非常简单的代码实现，但要做一个有成长的程序员要记住代码实现只是最后的落地结果，而那些设计上的思考才是最有价值的地方。就像你是否遇到过，有人让你给一个内容做个描述、文档、说明，你总觉得太简单了没什么可写的，即使要动笔写了也不知道要从哪开始！其实这些知识内容都来源你对整体功能的理解，这就不只是代码开发还包括了需求目标、方案设计、技术实现、逻辑验证等等过程性的内容。所以，不要只是被看似简单的内容忽略了整体全局观，要学会放开视野，开放学习视角。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705463285e3},{title:"spring--6.0手写spring",frontmatter:{"autoGroup-1":"手撕spring"},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.0%E6%89%8B%E5%86%99spring.html",relativePath:"zs-ee-框架/spring/spring--6.0手写spring.md",key:"v-ff6c6c1c",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--6.0%E6%89%8B%E5%86%99spring.html",lastUpdated:"2024年1月17日星期三下午2点17分",lastUpdatedTimestamp:1705472246e3,headersStr:null,content:"# spring--6.0手写spring\n\nhttps://github.com/fuzhengwei/small-spring\n\nhttps://github.com/code4craft/tiny-spring\n\nhttps://github.com/DerekYRC/mini-spring",normalizedContent:"# spring--6.0手写spring\n\nhttps://github.com/fuzhengwei/small-spring\n\nhttps://github.com/code4craft/tiny-spring\n\nhttps://github.com/derekyrc/mini-spring",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705463285e3},{title:"版本关系",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/",relativePath:"zs-ee-框架/cloud-gateway/README.md",key:"v-34b82956",path:"/zs-ee-%E6%A1%86%E6%9E%B6/cloud-gateway/",headers:[{level:3,title:"SpringBoot版本",slug:"springboot版本",normalizedTitle:"springboot版本",charIndex:11},{level:3,title:"SpringCloud版本",slug:"springcloud版本",normalizedTitle:"springcloud版本",charIndex:773},{level:3,title:"Spring Cloud Alibaba版本",slug:"spring-cloud-alibaba版本",normalizedTitle:"spring cloud alibaba版本",charIndex:1517},{level:3,title:"版本选择",slug:"版本选择",normalizedTitle:"版本选择",charIndex:2662}],lastUpdated:"2024年1月15日星期一晚上7点55分",lastUpdatedTimestamp:1705319722e3,headersStr:"SpringBoot版本 SpringCloud版本 Spring Cloud Alibaba版本 版本选择",content:'# 版本关系\n\n\n# SpringBoot版本\n\nhttps://spring.io/projects/spring-boot/#support\n\n> springboot\n\n分支      初始发行          支持结束          结束商业支持       JDK          MAVEN    TOMCAT\n3.2.x   2023-11-23    2024-11-23    2026-02-23   Java 17-21   3.6.3+   10.1\n3.1.x   2023-05-18    2024-05-18    2025-08-18   Java 17-21   3.6.3+   10.1\n3.0.x   2022年11月24日   2023-11-24    2025-02-24   Java 17-21   3.5+     10.1\n2.7.x   2022-05-19    2023-11-24    2025-08-24   Java 8-21    3.5+     9.0\n2.6.x   2021-11-17    2022年11月24日   2024-02-24   Java 8-19    3.5+     9.0\n2.5.x   2021-05-20    2022-05-19    2023-08-24   Java 8-18    3.5+     9.0\n2.4.x   2020-11-12    2021-11-18    2023-02-23   Java 8-16    3.5+     9.0\n2.3.x   2020-05-15    2021-05-20    2022-08-20   Java 8-14    3.3+     9.0\n\n\n# SpringCloud版本\n\nSpringCloud之前的版本名称是伦敦地铁站的站名命名，且首字母顺序与版本时间顺序一致\n\nAngel Brixton Camden Dalston Edgware Finchley Greenwich Hoxton\n\n当SpringCloud的发布内容积累到临界点或者一个重大Bug被解决后，会发布一个"Service Releases"版本，简称"SR"版本。\n\n> Spring cloud\n\nRELEASE TRAIN          SPRING BOOT GENERATION\n2023.0.x aka Leyton    3.2.x\n2022.0.x aka Kilburn   3.0.x, 3.1.x (Starting with 2022.0.3)\n2021.0.x aka Jubilee   2.6.x, 2.7.x (Starting with 2021.0.3)\n2020.0.x aka Ilford    2.4.x, 2.5.x (Starting with 2020.0.3)\nHoxton                 2.2.x, 2.3.x (Starting with SR5)\n\nSPRINGCLOUD版本   SPRINGBOOT版本\n2023.0.0        3.2.0\n2022.0.4        3.0.9\n2021.0.9        2.6.15\n2020.0.5        2.4.13\n2020.0.4        2.4.13\nHoxton.SR12     推荐：2.3.12.RELEASE\nHoxton.SR8      推荐：2.3.3.RELEASE\n\n\n# Spring Cloud Alibaba版本\n\nhttps://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明\n\n由于 Spring Boot 3.0，Spring Boot 2.7~2.4 和 2.4 以下版本之间变化较大，目前企业级客户老项目相关 Spring Boot 版本仍停留在 Spring Boot 2.4 以下，为了同时满足存量用户和新用户不同需求，社区以 Spring Boot 3.0 和 2.4 分别为分界线，同时维护 2022.x、2021.x、2.2.x 三个分支迭代。如果不想跨分支升级，如需使用新特性，请升级为对应分支的新版本。 为了规避相关构建过程中的依赖冲突问题，我们建议可以通过 云原生应用脚手架 进行项目创建。\n\n> 2021.x 分支\n\nSPRING CLOUD ALIBABA VERSION   SPRING CLOUD VERSION    SPRING BOOT VERSION\n2021.0.5.0*                    Spring Cloud 2021.0.5   2.6.13\n2021.0.4.0                     Spring Cloud 2021.0.4   2.6.11\n2021.0.1.0                     Spring Cloud 2021.0.1   2.6.3\n2021.1                         Spring Cloud 2020.0.1   2.4.2\n\n> 2.2.x 分支\n\nSPRING CLOUD ALIBABA VERSION   SPRING CLOUD VERSION       SPRING BOOT VERSION\n2.2.10-RC1*                    Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.9.RELEASE                  Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.8.RELEASE                  Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.7.RELEASE                  Spring Cloud Hoxton.SR12   2.3.12.RELEASE\n2.2.6.RELEASE                  Spring Cloud Hoxton.SR9    2.3.2.RELEASE\n\n\n# 版本选择\n\n依赖                                  版本\nJdk                                 8\nspring-boot-dependencies            2.3.12.RELEASE\nspring-cloud-dependencies           Hoxton.SR12\nspring-cloud-alibaba-dependencies   2.2.10-RC1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\nJdk                                 8\nspring-boot-dependencies            2.4.2\nspring-cloud-dependencies           2020.0.6\nspring-cloud-alibaba-dependencies   2021.1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\nJdk                                 8\nspring-boot-dependencies            2.7.6\nspring-cloud-dependencies           2021.0.5\nspring-cloud-alibaba-dependencies   2021.0.5.0\nmybatis-spring-boot-starter         2.3.0\n\n依赖                                  版本\nJdk                                 17\nspring-boot-dependencies            3.0.2\nspring-cloud-dependencies           2022.0.0-RC2\nspring-cloud-alibaba-dependencies   2022.0.0.0-RC2\nmybatis-spring-boot-starter         3.0.0',normalizedContent:'# 版本关系\n\n\n# springboot版本\n\nhttps://spring.io/projects/spring-boot/#support\n\n> springboot\n\n分支      初始发行          支持结束          结束商业支持       jdk          maven    tomcat\n3.2.x   2023-11-23    2024-11-23    2026-02-23   java 17-21   3.6.3+   10.1\n3.1.x   2023-05-18    2024-05-18    2025-08-18   java 17-21   3.6.3+   10.1\n3.0.x   2022年11月24日   2023-11-24    2025-02-24   java 17-21   3.5+     10.1\n2.7.x   2022-05-19    2023-11-24    2025-08-24   java 8-21    3.5+     9.0\n2.6.x   2021-11-17    2022年11月24日   2024-02-24   java 8-19    3.5+     9.0\n2.5.x   2021-05-20    2022-05-19    2023-08-24   java 8-18    3.5+     9.0\n2.4.x   2020-11-12    2021-11-18    2023-02-23   java 8-16    3.5+     9.0\n2.3.x   2020-05-15    2021-05-20    2022-08-20   java 8-14    3.3+     9.0\n\n\n# springcloud版本\n\nspringcloud之前的版本名称是伦敦地铁站的站名命名，且首字母顺序与版本时间顺序一致\n\nangel brixton camden dalston edgware finchley greenwich hoxton\n\n当springcloud的发布内容积累到临界点或者一个重大bug被解决后，会发布一个"service releases"版本，简称"sr"版本。\n\n> spring cloud\n\nrelease train          spring boot generation\n2023.0.x aka leyton    3.2.x\n2022.0.x aka kilburn   3.0.x, 3.1.x (starting with 2022.0.3)\n2021.0.x aka jubilee   2.6.x, 2.7.x (starting with 2021.0.3)\n2020.0.x aka ilford    2.4.x, 2.5.x (starting with 2020.0.3)\nhoxton                 2.2.x, 2.3.x (starting with sr5)\n\nspringcloud版本   springboot版本\n2023.0.0        3.2.0\n2022.0.4        3.0.9\n2021.0.9        2.6.15\n2020.0.5        2.4.13\n2020.0.4        2.4.13\nhoxton.sr12     推荐：2.3.12.release\nhoxton.sr8      推荐：2.3.3.release\n\n\n# spring cloud alibaba版本\n\nhttps://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明\n\n由于 spring boot 3.0，spring boot 2.7~2.4 和 2.4 以下版本之间变化较大，目前企业级客户老项目相关 spring boot 版本仍停留在 spring boot 2.4 以下，为了同时满足存量用户和新用户不同需求，社区以 spring boot 3.0 和 2.4 分别为分界线，同时维护 2022.x、2021.x、2.2.x 三个分支迭代。如果不想跨分支升级，如需使用新特性，请升级为对应分支的新版本。 为了规避相关构建过程中的依赖冲突问题，我们建议可以通过 云原生应用脚手架 进行项目创建。\n\n> 2021.x 分支\n\nspring cloud alibaba version   spring cloud version    spring boot version\n2021.0.5.0*                    spring cloud 2021.0.5   2.6.13\n2021.0.4.0                     spring cloud 2021.0.4   2.6.11\n2021.0.1.0                     spring cloud 2021.0.1   2.6.3\n2021.1                         spring cloud 2020.0.1   2.4.2\n\n> 2.2.x 分支\n\nspring cloud alibaba version   spring cloud version       spring boot version\n2.2.10-rc1*                    spring cloud hoxton.sr12   2.3.12.release\n2.2.9.release                  spring cloud hoxton.sr12   2.3.12.release\n2.2.8.release                  spring cloud hoxton.sr12   2.3.12.release\n2.2.7.release                  spring cloud hoxton.sr12   2.3.12.release\n2.2.6.release                  spring cloud hoxton.sr9    2.3.2.release\n\n\n# 版本选择\n\n依赖                                  版本\njdk                                 8\nspring-boot-dependencies            2.3.12.release\nspring-cloud-dependencies           hoxton.sr12\nspring-cloud-alibaba-dependencies   2.2.10-rc1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\njdk                                 8\nspring-boot-dependencies            2.4.2\nspring-cloud-dependencies           2020.0.6\nspring-cloud-alibaba-dependencies   2021.1\nmybatis-spring-boot-starter         2.1.4\n\n依赖                                  版本\njdk                                 8\nspring-boot-dependencies            2.7.6\nspring-cloud-dependencies           2021.0.5\nspring-cloud-alibaba-dependencies   2021.0.5.0\nmybatis-spring-boot-starter         2.3.0\n\n依赖                                  版本\njdk                                 17\nspring-boot-dependencies            3.0.2\nspring-cloud-dependencies           2022.0.0-rc2\nspring-cloud-alibaba-dependencies   2022.0.0.0-rc2\nmybatis-spring-boot-starter         3.0.0',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"spring--1.2.xml_应用",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.2.xml_%E5%BA%94%E7%94%A8.html",relativePath:"zs-ee-框架/spring/spring--1.2.xml_应用.md",key:"v-0efc73ec",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/spring--1.2.xml_%E5%BA%94%E7%94%A8.html",headers:[{level:2,title:"Spring的get方法",slug:"spring的get方法",normalizedTitle:"spring的get方法",charIndex:25},{level:2,title:"Spring配置非自定义bean",slug:"spring配置非自定义bean",normalizedTitle:"spring配置非自定义bean",charIndex:44},{level:3,title:"配置Druid",slug:"配置druid",normalizedTitle:"配置druid",charIndex:67},{level:3,title:"配置connection",slug:"配置connection",normalizedTitle:"配置connection",charIndex:715},{level:3,title:"配置日期对象",slug:"配置日期对象",normalizedTitle:"配置日期对象",charIndex:734},{level:3,title:"配置mybatis的SqlSessionFactory",slug:"配置mybatis的sqlsessionfactory",normalizedTitle:"配置mybatis的sqlsessionfactory",charIndex:747}],lastUpdated:"2024年1月16日星期二晚上11点04分",lastUpdatedTimestamp:1705417499e3,headersStr:"Spring的get方法 Spring配置非自定义bean 配置Druid 配置connection 配置日期对象 配置mybatis的SqlSessionFactory",content:'# spring--1.2.xml_应用\n\n\n# Spring的get方法\n\n\n\n\n# Spring配置非自定义bean\n\n\n\n\n# 配置Druid\n\n\n\n\x3c!--配置数据源信息--\x3e\n<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">\n    <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>\n    <property name="url" value="jdbc:mysql://localhost:3306/zs-cloud"></property>\n    <property name="username" value="root"></property>\n    <property name="password" value="password"></property>\n</bean>\n\n\n@Test\npublic void testGteDataSource() {\n    //加载spring配置文件\n    ApplicationContext context = new ClassPathXmlApplicationContext("classpath:druid.xml");\n    //获取配置创建的对象\n    Object dataSource = context.getBean("dataSource");\n    System.out.println(dataSource);\n}\n\n\n\n\n\n# 配置connection\n\n\n\n\n# 配置日期对象\n\n\n\n\n# 配置mybatis的SqlSessionFactory\n\n\n\n//静态工厂\nInputStream in = Resources.getResourceAsStream("mybatis-config.xml");\n//无参构造\nSqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();\n//实例工厂\nSqlSessionFactory sqlSessionFactory = builder.build(in);\nSqlSession sqlSession = sqlSessionFactory.openSession();\nSystem.out.println(sqlSession);\n\n\n<bean id="in" class="org.apache.ibatis.io.Resources" factory-method="getResourceAsStream">\n    <constructor-arg name="resource" value="mybatis-config.xml"/>\n</bean>\n<bean id="builder" class="org.apache.ibatis.session.SqlSessionFactoryBuilder"/>\n<bean id="sqlSessionFactory" factory-bean="builder" factory-method="build">\n    <constructor-arg name="inputStream" ref="in"/>\n</bean>\n',normalizedContent:'# spring--1.2.xml_应用\n\n\n# spring的get方法\n\n\n\n\n# spring配置非自定义bean\n\n\n\n\n# 配置druid\n\n\n\n\x3c!--配置数据源信息--\x3e\n<bean id="datasource" class="com.alibaba.druid.pool.druiddatasource">\n    <property name="driverclassname" value="com.mysql.jdbc.driver"></property>\n    <property name="url" value="jdbc:mysql://localhost:3306/zs-cloud"></property>\n    <property name="username" value="root"></property>\n    <property name="password" value="password"></property>\n</bean>\n\n\n@test\npublic void testgtedatasource() {\n    //加载spring配置文件\n    applicationcontext context = new classpathxmlapplicationcontext("classpath:druid.xml");\n    //获取配置创建的对象\n    object datasource = context.getbean("datasource");\n    system.out.println(datasource);\n}\n\n\n\n\n\n# 配置connection\n\n\n\n\n# 配置日期对象\n\n\n\n\n# 配置mybatis的sqlsessionfactory\n\n\n\n//静态工厂\ninputstream in = resources.getresourceasstream("mybatis-config.xml");\n//无参构造\nsqlsessionfactorybuilder builder = new sqlsessionfactorybuilder();\n//实例工厂\nsqlsessionfactory sqlsessionfactory = builder.build(in);\nsqlsession sqlsession = sqlsessionfactory.opensession();\nsystem.out.println(sqlsession);\n\n\n<bean id="in" class="org.apache.ibatis.io.resources" factory-method="getresourceasstream">\n    <constructor-arg name="resource" value="mybatis-config.xml"/>\n</bean>\n<bean id="builder" class="org.apache.ibatis.session.sqlsessionfactorybuilder"/>\n<bean id="sqlsessionfactory" factory-bean="builder" factory-method="build">\n    <constructor-arg name="inputstream" ref="in"/>\n</bean>\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705404021e3},{title:"概述--01.spring是什么",frontmatter:{},regularPath:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/%E6%A6%82%E8%BF%B0--01.spring%E6%98%AF%E4%BB%80%E4%B9%88.html",relativePath:"zs-ee-框架/spring/概述--01.spring是什么.md",key:"v-2580c912",path:"/zs-ee-%E6%A1%86%E6%9E%B6/spring/%E6%A6%82%E8%BF%B0--01.spring%E6%98%AF%E4%BB%80%E4%B9%88.html",headers:[{level:2,title:"思想",slug:"思想",normalizedTitle:"思想",charIndex:105},{level:2,title:"Spring诞生",slug:"spring诞生",normalizedTitle:"spring诞生",charIndex:114},{level:2,title:"快速入门--ioc",slug:"快速入门-ioc",normalizedTitle:"快速入门--ioc",charIndex:369},{level:2,title:"快速入门--DI",slug:"快速入门-di",normalizedTitle:"快速入门--di",charIndex:1439},{level:2,title:"快速入门--ApplicationContext",slug:"快速入门-applicationcontext",normalizedTitle:"快速入门--applicationcontext",charIndex:3295},{level:2,title:"BeanFactory与ApplicationContext的关系",slug:"beanfactory与applicationcontext的关系",normalizedTitle:"beanfactory与applicationcontext的关系",charIndex:3328},{level:2,title:"Beanfactory的继承体系",slug:"beanfactory的继承体系",normalizedTitle:"beanfactory的继承体系",charIndex:3374},{level:2,title:"ApplicationContext的继承体系",slug:"applicationcontext的继承体系",normalizedTitle:"applicationcontext的继承体系",charIndex:3397}],lastUpdated:"2024年1月15日星期一晚上11点18分",lastUpdatedTimestamp:1705331883e3,headersStr:"思想 Spring诞生 快速入门--ioc 快速入门--DI 快速入门--ApplicationContext BeanFactory与ApplicationContext的关系 Beanfactory的继承体系 ApplicationContext的继承体系",content:'# 概述--01.spring是什么\n\n代码位置：/Volumes/zs-2T/zs-study/zs-ee-框架/spring/资料/code/spring_入门案例/spring-rumeng01\n\n\n# 思想\n\n\n\n\n# Spring诞生\n\n\n\nSpring框架是一个开源的轻量级JAVA EE应用程序框架，用于管理应用程序的生命周期。\n\nSpring框架的核心概念包括控制反转（IOC）和面向切面编程（AOP）。\n\nSpring框架具有方便解耦、简化开发等特点。\n\nSpring框架还提供了其他功能，如事务管理、持久层框架等。\n\n\n\n（1）控制反转，把对象创建和对象之间的调用过程，交给spring进行管理\n\n（2）使用IOC目的：降低耦合度\n\n（3）入门案例IoC实现\n\nxml解析、工厂模式、反射\n\n\n\n\n\n\n\n\n\n\n\n\n# 快速入门--ioc\n\n\n\n\n\n> pom.xml\n\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>${spring-framework.version}</version>\n</dependency>\n\n\n> TestGetBean.java\n\n@Test\npublic void testGetBean1() {\n    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n    XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n    reader.loadBeanDefinitions("bean1.xml");\n\n    User user = beanFactory.getBean("user", User.class);\n    System.out.println(user);\n    user.add();\n}\n\n\n> User.java\n\npublic class User {\n    public void add(){\n        System.out.println("add...");\n    }\n}\n\n\n> bean1.xml\n\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns="http://www.springframework.org/schema/beans"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    \x3c!-- spring security  --\x3e\n    <bean id="user" class="com.zs.spring.User"></bean>\n\n</beans>\n\n\n\n# 快速入门--DI\n\n> UserDaoImpl.java\n\npackage com.zs.spring.dao.impl;\n\n\nimport com.zs.spring.dao.UserDao;\nimport com.zs.spring.service.UserService;\n\npublic class UserDaoImpl implements UserDao {\n\n    private UserService userService;\n\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    @Override\n    public void show() {\n        System.out.println("show....");\n    }\n}\n\n\n\n> UserServiceImpl.java\n\npackage com.zs.spring.service.impl;\n\n\nimport com.zs.spring.dao.UserDao;\nimport com.zs.spring.service.UserService;\n\n\npublic class UserServiceImpl implements UserService {\n\n    private UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        System.out.println("测试DI。。。。创建UserService对象时" + userDao + "被注入进来");\n        this.userDao = userDao;\n    }\n\n    @Override\n    public void show() {\n\n    }\n}\n\n\n\n> beans.xml\n\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    \x3c!--配置UserServiceImpl--\x3e\n    <bean id="userService" class="com.zs.spring.service.impl.UserServiceImpl">\n        <property name="userDao" ref="userDao"></property>\n    </bean>\n\n    \x3c!--配置UserDaoImpl--\x3e\n    <bean id="userDao" class="com.zs.spring.dao.impl.UserDaoImpl"></bean>\n</beans>\n\n\n\n> test\n\n@Test\npublic void testSpringDI() {\n    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n    XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n    reader.loadBeanDefinitions("beans.xml");\n\n    UserService userService = beanFactory.getBean("userService", UserService.class);\n    System.out.println(userService);\n    userService.show();\n}\n\n\n\n# 快速入门--ApplicationContext\n\n\n\n\n\n\n# BeanFactory与ApplicationContext的关系\n\n\n\n\n\n\n\n\n\n\n# Beanfactory的继承体系\n\n\n\n\n# ApplicationContext的继承体系\n\n\n\n\n\n',normalizedContent:'# 概述--01.spring是什么\n\n代码位置：/volumes/zs-2t/zs-study/zs-ee-框架/spring/资料/code/spring_入门案例/spring-rumeng01\n\n\n# 思想\n\n\n\n\n# spring诞生\n\n\n\nspring框架是一个开源的轻量级java ee应用程序框架，用于管理应用程序的生命周期。\n\nspring框架的核心概念包括控制反转（ioc）和面向切面编程（aop）。\n\nspring框架具有方便解耦、简化开发等特点。\n\nspring框架还提供了其他功能，如事务管理、持久层框架等。\n\n\n\n（1）控制反转，把对象创建和对象之间的调用过程，交给spring进行管理\n\n（2）使用ioc目的：降低耦合度\n\n（3）入门案例ioc实现\n\nxml解析、工厂模式、反射\n\n\n\n\n\n\n\n\n\n\n\n\n# 快速入门--ioc\n\n\n\n\n\n> pom.xml\n\n<dependency>\n    <groupid>org.springframework</groupid>\n    <artifactid>spring-context</artifactid>\n    <version>${spring-framework.version}</version>\n</dependency>\n\n\n> testgetbean.java\n\n@test\npublic void testgetbean1() {\n    defaultlistablebeanfactory beanfactory = new defaultlistablebeanfactory();\n    xmlbeandefinitionreader reader = new xmlbeandefinitionreader(beanfactory);\n    reader.loadbeandefinitions("bean1.xml");\n\n    user user = beanfactory.getbean("user", user.class);\n    system.out.println(user);\n    user.add();\n}\n\n\n> user.java\n\npublic class user {\n    public void add(){\n        system.out.println("add...");\n    }\n}\n\n\n> bean1.xml\n\n<?xml version="1.0" encoding="utf-8"?>\n<beans xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n       xmlns="http://www.springframework.org/schema/beans"\n       xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    \x3c!-- spring security  --\x3e\n    <bean id="user" class="com.zs.spring.user"></bean>\n\n</beans>\n\n\n\n# 快速入门--di\n\n> userdaoimpl.java\n\npackage com.zs.spring.dao.impl;\n\n\nimport com.zs.spring.dao.userdao;\nimport com.zs.spring.service.userservice;\n\npublic class userdaoimpl implements userdao {\n\n    private userservice userservice;\n\n    public void setuserservice(userservice userservice) {\n        this.userservice = userservice;\n    }\n\n    @override\n    public void show() {\n        system.out.println("show....");\n    }\n}\n\n\n\n> userserviceimpl.java\n\npackage com.zs.spring.service.impl;\n\n\nimport com.zs.spring.dao.userdao;\nimport com.zs.spring.service.userservice;\n\n\npublic class userserviceimpl implements userservice {\n\n    private userdao userdao;\n\n    public void setuserdao(userdao userdao) {\n        system.out.println("测试di。。。。创建userservice对象时" + userdao + "被注入进来");\n        this.userdao = userdao;\n    }\n\n    @override\n    public void show() {\n\n    }\n}\n\n\n\n> beans.xml\n\n<?xml version="1.0" encoding="utf-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n       xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    \x3c!--配置userserviceimpl--\x3e\n    <bean id="userservice" class="com.zs.spring.service.impl.userserviceimpl">\n        <property name="userdao" ref="userdao"></property>\n    </bean>\n\n    \x3c!--配置userdaoimpl--\x3e\n    <bean id="userdao" class="com.zs.spring.dao.impl.userdaoimpl"></bean>\n</beans>\n\n\n\n> test\n\n@test\npublic void testspringdi() {\n    defaultlistablebeanfactory beanfactory = new defaultlistablebeanfactory();\n    xmlbeandefinitionreader reader = new xmlbeandefinitionreader(beanfactory);\n    reader.loadbeandefinitions("beans.xml");\n\n    userservice userservice = beanfactory.getbean("userservice", userservice.class);\n    system.out.println(userservice);\n    userservice.show();\n}\n\n\n\n# 快速入门--applicationcontext\n\n\n\n\n\n\n# beanfactory与applicationcontext的关系\n\n\n\n\n\n\n\n\n\n\n# beanfactory的继承体系\n\n\n\n\n# applicationcontext的继承体系\n\n\n\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705319722e3},{title:"IO流概述",frontmatter:{title:"IO流概述",autoSort:1e4},regularPath:"/zs-se/io/1%E3%80%81IO%E6%B5%81%E6%A6%82%E8%BF%B0.html",relativePath:"zs-se/io/1、IO流概述.md",key:"v-93de39aa",path:"/zs-se/io/1%E3%80%81IO%E6%B5%81%E6%A6%82%E8%BF%B0.html",headers:[{level:2,title:"1.1 什么是IO",slug:"_1-1-什么是io",normalizedTitle:"1.1 什么是io",charIndex:16},{level:2,title:"1.2 IO的分类",slug:"_1-2-io的分类",normalizedTitle:"1.2 io的分类",charIndex:286},{level:2,title:"1.3 IO的流向说明图解",slug:"_1-3-io的流向说明图解",normalizedTitle:"1.3 io的流向说明图解",charIndex:445},{level:2,title:"1.4 顶级父类们",slug:"_1-4-顶级父类们",normalizedTitle:"1.4 顶级父类们",charIndex:465}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"1.1 什么是IO 1.2 IO的分类 1.3 IO的流向说明图解 1.4 顶级父类们",content:"# 1. IO概述\n\n\n\n\n# 1.1 什么是IO\n\n生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了ctrl+s ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。\n\n我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为输入input 和输出output ，即流向内存是输入流，流出内存的输出流。\n\nJava中I/O操作主要是指使用java.io包下的内容，进行输入、输出操作。输入也叫做读取数据，输出也叫做作写出数据。\n\n\n# 1.2 IO的分类\n\n根据数据的流向分为：输入流和输出流。\n\n * 输入流 ：把数据从其他设备上读取到内存中的流。\n * 输出流 ：把数据从内存 中写出到其他设备上的流。\n\n格局数据的类型分为：字节流和字符流。\n\n * 字节流 ：以字节为单位，读写数据的流。\n * 字符流 ：以字符为单位，读写数据的流。\n\n\n\n\n# 1.3 IO的流向说明图解\n\n\n\n\n# 1.4 顶级父类们\n\n      输入流           输出流\n字节流   字节输入流         字节输出流\n      InputStream   OutputStream\n字符流   字符输入流         字符输出流\n      Reader        Writer\n\n",normalizedContent:"# 1. io概述\n\n\n\n\n# 1.1 什么是io\n\n生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了ctrl+s ，可能文件就白白编辑了。当你电脑上插入一个u盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。\n\n我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为输入input 和输出output ，即流向内存是输入流，流出内存的输出流。\n\njava中i/o操作主要是指使用java.io包下的内容，进行输入、输出操作。输入也叫做读取数据，输出也叫做作写出数据。\n\n\n# 1.2 io的分类\n\n根据数据的流向分为：输入流和输出流。\n\n * 输入流 ：把数据从其他设备上读取到内存中的流。\n * 输出流 ：把数据从内存 中写出到其他设备上的流。\n\n格局数据的类型分为：字节流和字符流。\n\n * 字节流 ：以字节为单位，读写数据的流。\n * 字符流 ：以字符为单位，读写数据的流。\n\n\n\n\n# 1.3 io的流向说明图解\n\n\n\n\n# 1.4 顶级父类们\n\n      输入流           输出流\n字节流   字节输入流         字节输出流\n      inputstream   outputstream\n字符流   字符输入流         字符输出流\n      reader        writer\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"IO异常的处理",frontmatter:{title:"IO异常的处理",autoSort:7e3},regularPath:"/zs-se/io/4%E3%80%81IO%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",relativePath:"zs-se/io/4、IO异常处理.md",key:"v-fb163760",path:"/zs-se/io/4%E3%80%81IO%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",headers:[{level:3,title:"JDK7前处理",slug:"jdk7前处理",normalizedTitle:"jdk7前处理",charIndex:21},{level:3,title:"JDK7的处理(扩展知识点了解内容)",slug:"jdk7的处理-扩展知识点了解内容",normalizedTitle:"jdk7的处理(扩展知识点了解内容)",charIndex:667},{level:3,title:"JDK9的改进(扩展知识点了解内容)",slug:"jdk9的改进-扩展知识点了解内容",normalizedTitle:"jdk9的改进(扩展知识点了解内容)",charIndex:1180}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"JDK7前处理 JDK7的处理(扩展知识点了解内容) JDK9的改进(扩展知识点了解内容)",content:'# 4. IO异常的处理\n\n\n\n\n\n\n# JDK7前处理\n\n之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用try...catch...finally 代码块，处理异常部分，代码使用演示：\n\npublic class HandleException1 {\n    public static void main(String[] args) {\n      \t// 声明变量\n        FileWriter fw = null;\n        try {\n            //创建流对象\n            fw = new FileWriter("fw.txt");\n            // 写出数据\n            fw.write("黑马程序员"); //黑马程序员\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fw != null) {\n                    fw.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\n\n# JDK7的处理(扩展知识点了解内容)\n\n还可以使用JDK7优化后的try-with-resource 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。\n\n格式：\n\ntry (创建流对象语句，如果多个,使用\';\'隔开) {\n\t// 读写数据\n} catch (IOException e) {\n\te.printStackTrace();\n}\n\n\n代码使用演示：\n\npublic class HandleException2 {\n    public static void main(String[] args) {\n      \t// 创建流对象\n        try ( FileWriter fw = new FileWriter("fw.txt"); ) {\n            // 写出数据\n            fw.write("黑马程序员"); //黑马程序员\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n\n# JDK9的改进(扩展知识点了解内容)\n\nJDK9中try-with-resource 的改进，对于引入对象的方式，支持的更加简洁。被引入的对象，同样可以自动关闭，无需手动close，我们来了解一下格式。\n\n改进前格式：\n\n// 被final修饰的对象\nfinal Resource resource1 = new Resource("resource1");\n// 普通对象\nResource resource2 = new Resource("resource2");\n// 引入方式：创建新的变量保存\ntry (Resource r1 = resource1;\n     Resource r2 = resource2) {\n     // 使用对象\n}\n\n\n改进后格式：\n\n// 被final修饰的对象\nfinal Resource resource1 = new Resource("resource1");\n// 普通对象\nResource resource2 = new Resource("resource2");\n\n// 引入方式：直接引入\ntry (resource1; resource2) {\n     // 使用对象\n}\n\n\n改进后，代码使用演示：\n\npublic class TryDemo {\n    public static void main(String[] args) throws IOException {\n       \t// 创建流对象\n        final  FileReader fr  = new FileReader("in.txt");\n        FileWriter fw = new FileWriter("out.txt");\n       \t// 引入到try中\n        try (fr; fw) {\n          \t// 定义变量\n            int b;\n          \t// 读取数据\n          \twhile ((b = fr.read())!=-1) {\n            \t// 写出数据\n            \tfw.write(b);\n          \t}\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n\n#',normalizedContent:'# 4. io异常的处理\n\n\n\n\n\n\n# jdk7前处理\n\n之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用try...catch...finally 代码块，处理异常部分，代码使用演示：\n\npublic class handleexception1 {\n    public static void main(string[] args) {\n      \t// 声明变量\n        filewriter fw = null;\n        try {\n            //创建流对象\n            fw = new filewriter("fw.txt");\n            // 写出数据\n            fw.write("黑马程序员"); //黑马程序员\n        } catch (ioexception e) {\n            e.printstacktrace();\n        } finally {\n            try {\n                if (fw != null) {\n                    fw.close();\n                }\n            } catch (ioexception e) {\n                e.printstacktrace();\n            }\n        }\n    }\n}\n\n\n\n# jdk7的处理(扩展知识点了解内容)\n\n还可以使用jdk7优化后的try-with-resource 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。\n\n格式：\n\ntry (创建流对象语句，如果多个,使用\';\'隔开) {\n\t// 读写数据\n} catch (ioexception e) {\n\te.printstacktrace();\n}\n\n\n代码使用演示：\n\npublic class handleexception2 {\n    public static void main(string[] args) {\n      \t// 创建流对象\n        try ( filewriter fw = new filewriter("fw.txt"); ) {\n            // 写出数据\n            fw.write("黑马程序员"); //黑马程序员\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n    }\n}\n\n\n\n# jdk9的改进(扩展知识点了解内容)\n\njdk9中try-with-resource 的改进，对于引入对象的方式，支持的更加简洁。被引入的对象，同样可以自动关闭，无需手动close，我们来了解一下格式。\n\n改进前格式：\n\n// 被final修饰的对象\nfinal resource resource1 = new resource("resource1");\n// 普通对象\nresource resource2 = new resource("resource2");\n// 引入方式：创建新的变量保存\ntry (resource r1 = resource1;\n     resource r2 = resource2) {\n     // 使用对象\n}\n\n\n改进后格式：\n\n// 被final修饰的对象\nfinal resource resource1 = new resource("resource1");\n// 普通对象\nresource resource2 = new resource("resource2");\n\n// 引入方式：直接引入\ntry (resource1; resource2) {\n     // 使用对象\n}\n\n\n改进后，代码使用演示：\n\npublic class trydemo {\n    public static void main(string[] args) throws ioexception {\n       \t// 创建流对象\n        final  filereader fr  = new filereader("in.txt");\n        filewriter fw = new filewriter("out.txt");\n       \t// 引入到try中\n        try (fr; fw) {\n          \t// 定义变量\n            int b;\n          \t// 读取数据\n          \twhile ((b = fr.read())!=-1) {\n            \t// 写出数据\n            \tfw.write(b);\n          \t}\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n    }\n}\n\n\n\n#',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"转换流",frontmatter:{title:"转换流",autoSort:5e3},regularPath:"/zs-se/io/6%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81.html",relativePath:"zs-se/io/6、转换流.md",key:"v-66f72c43",path:"/zs-se/io/6%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81.html",headers:[{level:2,title:"2.1 字符编码和字符集",slug:"_2-1-字符编码和字符集",normalizedTitle:"2.1 字符编码和字符集",charIndex:23},{level:3,title:"字符编码",slug:"字符编码",normalizedTitle:"字符编码",charIndex:27},{level:3,title:"字符集",slug:"字符集",normalizedTitle:"字符集",charIndex:32},{level:2,title:"2.2 编码引出的问题",slug:"_2-2-编码引出的问题",normalizedTitle:"2.2 编码引出的问题",charIndex:1750},{level:2,title:"2.3 InputStreamReader类",slug:"_2-3-inputstreamreader类",normalizedTitle:"2.3 inputstreamreader类",charIndex:2229},{level:3,title:"构造方法",slug:"构造方法",normalizedTitle:"构造方法",charIndex:2361},{level:3,title:"指定编码读取",slug:"指定编码读取",normalizedTitle:"指定编码读取",charIndex:2678},{level:2,title:"2.4 OutputStreamWriter类",slug:"_2-4-outputstreamwriter类",normalizedTitle:"2.4 outputstreamwriter类",charIndex:3434},{level:3,title:"构造方法",slug:"构造方法-2",normalizedTitle:"构造方法",charIndex:2361},{level:3,title:"指定编码写出",slug:"指定编码写出",normalizedTitle:"指定编码写出",charIndex:3892},{level:3,title:"转换流理解图解",slug:"转换流理解图解",normalizedTitle:"转换流理解图解",charIndex:4497},{level:2,title:"2.5 练习：转换文件编码",slug:"_2-5-练习-转换文件编码",normalizedTitle:"2.5 练习：转换文件编码",charIndex:4525},{level:3,title:"案例分析",slug:"案例分析",normalizedTitle:"案例分析",charIndex:4573},{level:3,title:"案例实现",slug:"案例实现",normalizedTitle:"案例实现",charIndex:4633}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"2.1 字符编码和字符集 字符编码 字符集 2.2 编码引出的问题 2.3 InputStreamReader类 构造方法 指定编码读取 2.4 OutputStreamWriter类 构造方法 指定编码写出 转换流理解图解 2.5 练习：转换文件编码 案例分析 案例实现",content:'# 2. 转换流\n\n\n\n\n\n\n\n\n\n\n\n\n# 2.1 字符编码和字符集\n\n\n# 字符编码\n\n计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为编码 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为解码 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。\n\n编码:字符(能看懂的)--字节(看不懂的)\n\n解码:字节(看不懂的)--\x3e字符(能看懂的)\n\n * 字符编码Character Encoding : 就是一套自然语言的字符与二进制数之间的对应规则。\n   \n   编码表:生活中文字和计算机中二进制的对应规则\n\n\n# 字符集\n\n * 字符集 Charset：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。\n\n计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。\n\n可见，当指定了编码，它所对应的字符集自然就指定了，所以编码才是我们最终要关心的。\n\n * ASCII字符集 ：\n   * ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。\n   * 基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。\n * ISO-8859-1字符集：\n   * 拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。\n   * ISO-8859-1使用单字节编码，兼容ASCII编码。\n * GBxxx字符集：\n   * GB就是国标的意思，是为了显示中文而设计的一套字符集。\n   * GB2312：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的"全角"字符，而原来在127号以下的那些就叫"半角"字符了。\n   * GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。\n   * GB18030：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。\n * Unicode字符集 ：\n   * Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。\n   * 它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。\n   * UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：\n     1. 128个US-ASCII字符，只需一个字节编码。\n     2. 拉丁文等字符，需要二个字节编码。\n     3. 大部分常用字（含中文），使用三个字节编码。\n     4. 其他极少使用的Unicode辅助字符，使用四字节编码。\n\n\n# 2.2 编码引出的问题\n\n在IDEA中，使用FileReader 读取项目中的文本文件。由于IDEA的设置，都是默认的UTF-8编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。\n\npublic class ReaderDemo {\n    public static void main(String[] args) throws IOException {\n        FileReader fileReader = new FileReader("E:\\\\File_GBK.txt");\n        int read;\n        while ((read = fileReader.read()) != -1) {\n            System.out.print((char)read);\n        }\n        fileReader.close();\n    }\n}\n输出结果：\n���\n\n\n那么如何读取GBK编码的文件呢？\n\n\n# 2.3 InputStreamReader类\n\n转换流java.io.InputStreamReader，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。\n\n\n# 构造方法\n\n * InputStreamReader(InputStream in): 创建一个使用默认字符集的字符流。\n * InputStreamReader(InputStream in, String charsetName): 创建一个指定字符集的字符流。\n\n构造举例，代码如下：\n\nInputStreamReader isr = new InputStreamReader(new FileInputStream("in.txt"));\nInputStreamReader isr2 = new InputStreamReader(new FileInputStream("in.txt") , "GBK");\n\n\n\n# 指定编码读取\n\npublic class ReaderDemo2 {\n    public static void main(String[] args) throws IOException {\n      \t// 定义文件路径,文件为gbk编码\n        String FileName = "E:\\\\file_gbk.txt";\n      \t// 创建流对象,默认UTF8编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(FileName));\n      \t// 创建流对象,指定GBK编码\n        InputStreamReader isr2 = new InputStreamReader(new FileInputStream(FileName) , "GBK");\n\t\t// 定义变量,保存字符\n        int read;\n      \t// 使用默认编码字符流读取,乱码\n        while ((read = isr.read()) != -1) {\n            System.out.print((char)read); // ��Һ�\n        }\n        isr.close();\n      \n      \t// 使用指定编码字符流读取,正常解析\n        while ((read = isr2.read()) != -1) {\n            System.out.print((char)read);// 大家好\n        }\n        isr2.close();\n    }\n}\n\n\n\n# 2.4 OutputStreamWriter类\n\n转换流java.io.OutputStreamWriter ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。\n\n\n# 构造方法\n\n * OutputStreamWriter(OutputStream in): 创建一个使用默认字符集的字符流。\n * OutputStreamWriter(OutputStream in, String charsetName): 创建一个指定字符集的字符流。\n\n构造举例，代码如下：\n\nOutputStreamWriter isr = new OutputStreamWriter(new FileOutputStream("out.txt"));\nOutputStreamWriter isr2 = new OutputStreamWriter(new FileOutputStream("out.txt") , "GBK");\n\n\n\n# 指定编码写出\n\npublic class OutputDemo {\n    public static void main(String[] args) throws IOException {\n      \t// 定义文件路径\n        String FileName = "E:\\\\out.txt";\n      \t// 创建流对象,默认UTF8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(FileName));\n        // 写出数据\n      \tosw.write("你好"); // 保存为6个字节\n        osw.close();\n      \t\n\t\t// 定义文件路径\n\t\tString FileName2 = "E:\\\\out2.txt";\n     \t// 创建流对象,指定GBK编码\n        OutputStreamWriter osw2 = new OutputStreamWriter(new FileOutputStream(FileName2),"GBK");\n        // 写出数据\n      \tosw2.write("你好");// 保存为4个字节\n        osw2.close();\n    }\n}\n\n\n\n# 转换流理解图解\n\n转换流是字节与字符间的桥梁！\n\n\n# 2.5 练习：转换文件编码\n\n将GBK编码的文本文件，转换为UTF-8编码的文本文件。\n\n\n# 案例分析\n\n 1. 指定GBK编码的转换流，读取文本文件。\n 2. 使用UTF-8编码的转换流，写出文本文件。\n\n\n# 案例实现\n\npublic class TransDemo {\n   public static void main(String[] args) {      \n    \t// 1.定义文件路径\n     \tString srcFile = "file_gbk.txt";\n        String destFile = "file_utf8.txt";\n\t\t// 2.创建流对象\n    \t// 2.1 转换输入流,指定GBK编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(srcFile) , "GBK");\n    \t// 2.2 转换输出流,默认utf8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(destFile));\n\t\t// 3.读写数据\n    \t// 3.1 定义数组\n        char[] cbuf = new char[1024];\n    \t// 3.2 定义长度\n        int len;\n    \t// 3.3 循环读取\n        while ((len = isr.read(cbuf))!=-1) {\n            // 循环写出\n          \tosw.write(cbuf,0,len);\n        }\n    \t// 4.释放资源\n        osw.close();\n        isr.close();\n  \t}\n}\n\n\n\n\n',normalizedContent:'# 2. 转换流\n\n\n\n\n\n\n\n\n\n\n\n\n# 2.1 字符编码和字符集\n\n\n# 字符编码\n\n计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为编码 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为解码 。比如说，按照a规则存储，同样按照a规则解析，那么就能显示正确的文本符号。反之，按照a规则存储，再按照b规则解析，就会导致乱码现象。\n\n编码:字符(能看懂的)--字节(看不懂的)\n\n解码:字节(看不懂的)--\x3e字符(能看懂的)\n\n * 字符编码character encoding : 就是一套自然语言的字符与二进制数之间的对应规则。\n   \n   编码表:生活中文字和计算机中二进制的对应规则\n\n\n# 字符集\n\n * 字符集 charset：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。\n\n计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ascii字符集、gbk字符集、unicode字符集等。\n\n可见，当指定了编码，它所对应的字符集自然就指定了，所以编码才是我们最终要关心的。\n\n * ascii字符集 ：\n   * ascii（american standard code for information interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。\n   * 基本的ascii字符集，使用7位（bits）表示一个字符，共128字符。ascii的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。\n * iso-8859-1字符集：\n   * 拉丁码表，别名latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。\n   * iso-8859-1使用单字节编码，兼容ascii编码。\n * gbxxx字符集：\n   * gb就是国标的意思，是为了显示中文而设计的一套字符集。\n   * gb2312：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ascii里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的"全角"字符，而原来在127号以下的那些就叫"半角"字符了。\n   * gbk：最常用的中文码表。是在gb2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容gb2312标准，同时支持繁体汉字以及日韩汉字等。\n   * gb18030：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。\n * unicode字符集 ：\n   * unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。\n   * 它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，utf-8、utf-16和utf-32。最为常用的utf-8编码。\n   * utf-8编码，可以用来表示unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（ietf）要求所有互联网协议都必须支持utf-8编码。所以，我们开发web应用，也要使用utf-8编码。它使用一至四个字节为每个字符编码，编码规则：\n     1. 128个us-ascii字符，只需一个字节编码。\n     2. 拉丁文等字符，需要二个字节编码。\n     3. 大部分常用字（含中文），使用三个字节编码。\n     4. 其他极少使用的unicode辅助字符，使用四字节编码。\n\n\n# 2.2 编码引出的问题\n\n在idea中，使用filereader 读取项目中的文本文件。由于idea的设置，都是默认的utf-8编码，所以没有任何问题。但是，当读取windows系统中创建的文本文件时，由于windows系统的默认是gbk编码，就会出现乱码。\n\npublic class readerdemo {\n    public static void main(string[] args) throws ioexception {\n        filereader filereader = new filereader("e:\\\\file_gbk.txt");\n        int read;\n        while ((read = filereader.read()) != -1) {\n            system.out.print((char)read);\n        }\n        filereader.close();\n    }\n}\n输出结果：\n���\n\n\n那么如何读取gbk编码的文件呢？\n\n\n# 2.3 inputstreamreader类\n\n转换流java.io.inputstreamreader，是reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。\n\n\n# 构造方法\n\n * inputstreamreader(inputstream in): 创建一个使用默认字符集的字符流。\n * inputstreamreader(inputstream in, string charsetname): 创建一个指定字符集的字符流。\n\n构造举例，代码如下：\n\ninputstreamreader isr = new inputstreamreader(new fileinputstream("in.txt"));\ninputstreamreader isr2 = new inputstreamreader(new fileinputstream("in.txt") , "gbk");\n\n\n\n# 指定编码读取\n\npublic class readerdemo2 {\n    public static void main(string[] args) throws ioexception {\n      \t// 定义文件路径,文件为gbk编码\n        string filename = "e:\\\\file_gbk.txt";\n      \t// 创建流对象,默认utf8编码\n        inputstreamreader isr = new inputstreamreader(new fileinputstream(filename));\n      \t// 创建流对象,指定gbk编码\n        inputstreamreader isr2 = new inputstreamreader(new fileinputstream(filename) , "gbk");\n\t\t// 定义变量,保存字符\n        int read;\n      \t// 使用默认编码字符流读取,乱码\n        while ((read = isr.read()) != -1) {\n            system.out.print((char)read); // ��һ�\n        }\n        isr.close();\n      \n      \t// 使用指定编码字符流读取,正常解析\n        while ((read = isr2.read()) != -1) {\n            system.out.print((char)read);// 大家好\n        }\n        isr2.close();\n    }\n}\n\n\n\n# 2.4 outputstreamwriter类\n\n转换流java.io.outputstreamwriter ，是writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。\n\n\n# 构造方法\n\n * outputstreamwriter(outputstream in): 创建一个使用默认字符集的字符流。\n * outputstreamwriter(outputstream in, string charsetname): 创建一个指定字符集的字符流。\n\n构造举例，代码如下：\n\noutputstreamwriter isr = new outputstreamwriter(new fileoutputstream("out.txt"));\noutputstreamwriter isr2 = new outputstreamwriter(new fileoutputstream("out.txt") , "gbk");\n\n\n\n# 指定编码写出\n\npublic class outputdemo {\n    public static void main(string[] args) throws ioexception {\n      \t// 定义文件路径\n        string filename = "e:\\\\out.txt";\n      \t// 创建流对象,默认utf8编码\n        outputstreamwriter osw = new outputstreamwriter(new fileoutputstream(filename));\n        // 写出数据\n      \tosw.write("你好"); // 保存为6个字节\n        osw.close();\n      \t\n\t\t// 定义文件路径\n\t\tstring filename2 = "e:\\\\out2.txt";\n     \t// 创建流对象,指定gbk编码\n        outputstreamwriter osw2 = new outputstreamwriter(new fileoutputstream(filename2),"gbk");\n        // 写出数据\n      \tosw2.write("你好");// 保存为4个字节\n        osw2.close();\n    }\n}\n\n\n\n# 转换流理解图解\n\n转换流是字节与字符间的桥梁！\n\n\n# 2.5 练习：转换文件编码\n\n将gbk编码的文本文件，转换为utf-8编码的文本文件。\n\n\n# 案例分析\n\n 1. 指定gbk编码的转换流，读取文本文件。\n 2. 使用utf-8编码的转换流，写出文本文件。\n\n\n# 案例实现\n\npublic class transdemo {\n   public static void main(string[] args) {      \n    \t// 1.定义文件路径\n     \tstring srcfile = "file_gbk.txt";\n        string destfile = "file_utf8.txt";\n\t\t// 2.创建流对象\n    \t// 2.1 转换输入流,指定gbk编码\n        inputstreamreader isr = new inputstreamreader(new fileinputstream(srcfile) , "gbk");\n    \t// 2.2 转换输出流,默认utf8编码\n        outputstreamwriter osw = new outputstreamwriter(new fileoutputstream(destfile));\n\t\t// 3.读写数据\n    \t// 3.1 定义数组\n        char[] cbuf = new char[1024];\n    \t// 3.2 定义长度\n        int len;\n    \t// 3.3 循环读取\n        while ((len = isr.read(cbuf))!=-1) {\n            // 循环写出\n          \tosw.write(cbuf,0,len);\n        }\n    \t// 4.释放资源\n        osw.close();\n        isr.close();\n  \t}\n}\n\n\n\n\n',charsets:{cyrillic:!0,cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"字节流",frontmatter:{title:"字节流",autoSort:9e3},regularPath:"/zs-se/io/2%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81.html",relativePath:"zs-se/io/2、字节流.md",key:"v-11b58af6",path:"/zs-se/io/2%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81.html",headers:[{level:2,title:"2.1 一切皆为字节",slug:"_2-1-一切皆为字节",normalizedTitle:"2.1 一切皆为字节",charIndex:15},{level:2,title:"2.2 字节输出流【OutputStream】",slug:"_2-2-字节输出流【outputstream】",normalizedTitle:"2.2 字节输出流【outputstream】",charIndex:146},{level:2,title:"2.3 FileOutputStream类",slug:"_2-3-fileoutputstream类",normalizedTitle:"2.3 fileoutputstream类",charIndex:585},{level:3,title:"构造方法",slug:"构造方法",normalizedTitle:"构造方法",charIndex:692},{level:3,title:"写出字节数据",slug:"写出字节数据",normalizedTitle:"写出字节数据",charIndex:1237},{level:3,title:"数据追加续写",slug:"数据追加续写",normalizedTitle:"数据追加续写",charIndex:2729},{level:3,title:"写出换行",slug:"写出换行",normalizedTitle:"写出换行",charIndex:3423},{level:2,title:"2.4 字节输入流【InputStream】",slug:"_2-4-字节输入流【inputstream】",normalizedTitle:"2.4 字节输入流【inputstream】",charIndex:4186},{level:2,title:"2.5 FileInputStream类",slug:"_2-5-fileinputstream类",normalizedTitle:"2.5 fileinputstream类",charIndex:4489},{level:3,title:"构造方法",slug:"构造方法-2",normalizedTitle:"构造方法",charIndex:692},{level:3,title:"读取字节数据",slug:"读取字节数据",normalizedTitle:"读取字节数据",charIndex:5150},{level:2,title:"2.6 字节流练习：图片复制（小文件）",slug:"_2-6-字节流练习-图片复制-小文件",normalizedTitle:"2.6 字节流练习：图片复制（小文件）",charIndex:7604},{level:3,title:"复制原理图解",slug:"复制原理图解",normalizedTitle:"复制原理图解",charIndex:7628},{level:3,title:"案例实现",slug:"案例实现",normalizedTitle:"案例实现",charIndex:7641}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"2.1 一切皆为字节 2.2 字节输出流【OutputStream】 2.3 FileOutputStream类 构造方法 写出字节数据 数据追加续写 写出换行 2.4 字节输入流【InputStream】 2.5 FileInputStream类 构造方法 读取字节数据 2.6 字节流练习：图片复制（小文件） 复制原理图解 案例实现",content:'# 2. 字节流\n\n\n\n\n# 2.1 一切皆为字节\n\n一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。\n\n\n# 2.2 字节输出流【OutputStream】\n\njava.io.OutputStream抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n * public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。\n * public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。\n * public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。\n * public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。\n * public abstract void write(int b) ：将指定的字节输出流。\n\n> 小贴士：\n> \n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n\n# 2.3 FileOutputStream类\n\n\n\nOutputStream有很多子类，我们从最简单的一个子类开始。\n\njava.io.FileOutputStream类是文件输出流，用于将数据写出到文件。\n\n\n# 构造方法\n\n * public FileOutputStream(File file)：创建文件输出流以写入由指定的 File对象表示的文件。\n * public FileOutputStream(String name)： 创建文件输出流以指定的名称写入文件。\n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。\n\n * 构造举例，代码如下：\n\npublic class FileOutputStreamConstructor throws IOException {\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File("a.txt");\n        FileOutputStream fos = new FileOutputStream(file);\n      \n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream("b.txt");\n    }\n}\n\n\n\n# 写出字节数据\n\n# 常用方法总结\nvoid write(int b)\t\t\t\t\t\t\t一次写一个字节数据\nvoid write(byte[] b)\t\t\t\t\t\t一次写一个字节数组数据\n# 最常用\nvoid write(byte[] b, int off, int len)\t\t一次写一个字节数组的部分数据\n参数一：\n\t数组\n参数二：\n\t起始索引\n参数三：\n\t个数\n\n\n 1. 写出字节：write(int b) 方法，每次可以写出一个字节数据，代码使用演示：\n\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream("fos.txt");     \n      \t// 写出数据\n      \tfos.write(97); // 写出第1个字节\n      \tfos.write(98); // 写出第2个字节\n      \tfos.write(99); // 写出第3个字节\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\nabc\n\n\n> 小贴士：\n> \n>  1. 虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。\n>  2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n 2. 写出字节数组：write(byte[] b)，每次可以写出数组中的数据，代码使用演示：\n\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream("fos.txt");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = "黑马程序员".getBytes();\n      \t// 写出字节数组数据\n      \tfos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\n黑马程序员\n\n\n 3. 写出指定长度字节数组：write(byte[] b, int off, int len) ,每次写出从off索引开始，len个字节，代码使用演示：\n\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream("fos.txt");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = "abcde".getBytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b,2,2);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\ncd\n\n\n\n\n\n# 数据追加续写\n\n经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？\n\n * public FileOutputStream(File file, boolean append)： 创建文件输出流以写入由指定的 File对象表示的文件。\n * public FileOutputStream(String name, boolean append)： 创建文件输出流以指定的名称写入文件。\n\n这两个构造方法，参数中都需要传入一个boolean类型的值，true 表示追加数据，false 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：\n\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream("fos.txt"，true);     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = "abcde".getBytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n文件操作前：cd\n文件操作后：cdabcde\n\n\n\n# 写出换行\n\nWindows系统里，换行符号是\\r\\n 。把\n\n以指定是否追加续写了，代码使用演示：\n\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream("fos.txt");  \n      \t// 定义字节数组\n      \tbyte[] words = {97,98,99,100,101};\n      \t// 遍历数组\n        for (int i = 0; i < words.length; i++) {\n          \t// 写出一个字节\n            fos.write(words[i]);\n          \t// 写出一个换行, 换行符号转成数组写出\n            fos.write("\\r\\n".getBytes());\n        }\n      \t// 关闭资源\n        fos.close();\n    }\n}\n\n输出结果：\na\nb\nc\nd\ne\n\n\n>  * 回车符\\r和换行符\\n ：\n>    * 回车符：回到一行的开头（return）。\n>    * 换行符：下一行（newline）。\n>  * 系统中的换行：\n>    * Windows系统里，每行结尾是 回车+换行 ，即\\r\\n；\n>    * Unix系统里，每行结尾只有 换行 ，即\\n；\n>    * Mac系统里，每行结尾是 回车 ，即\\r。从 Mac OS X开始与Linux统一。\n\n\n\n\n# 2.4 字节输入流【InputStream】\n\n\n\njava.io.InputStream抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。\n\n * public void close() ：关闭此输入流并释放与此流相关联的任何系统资源。\n * public abstract int read()： 从输入流读取数据的下一个字节。\n * public int read(byte[] b)： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。\n\n> 小贴士：\n> \n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n\n# 2.5 FileInputStream类\n\njava.io.FileInputStream类是文件输入流，从文件中读取字节。\n\n\n# 构造方法\n\n * FileInputStream(File file)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。\n * FileInputStream(String name)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。\n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出FileNotFoundException 。\n\n * 构造举例，代码如下：\n\npublic class FileInputStreamConstructor throws IOException{\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File("a.txt");\n        FileInputStream fos = new FileInputStream(file);\n      \n        // 使用文件名称创建流对象\n        FileInputStream fos = new FileInputStream("b.txt");\n    }\n}\n\n\n\n# 读取字节数据\n\n\n\n 1. 读取字节：read方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回-1，代码使用演示：\n\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象\n       \tFileInputStream fis = new FileInputStream("read.txt");\n      \t// 读取数据，返回一个字节\n        int read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n      \t// 读取到末尾,返回-1\n       \tread = fis.read();\n        System.out.println( read);\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n-1\n\n\n循环改进读取方式，代码使用演示：\n\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象\n       \tFileInputStream fis = new FileInputStream("read.txt");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fis.read())!=-1) {\n            System.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n\n\n> 小贴士：\n> \n>  1. 虽然读取了一个字节，但是会自动提升为int类型。\n>  2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n 2. 使用字节数组读取：read(byte[] b)，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回-1 ，代码使用演示：\n\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象.\n       \tFileInputStream fis = new FileInputStream("read.txt"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组变成字符串打印\n            System.out.println(new String(b));\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ned\n\n\n错误数据d，是由于最后一次读取时，只读取一个字节e，数组中，上次读取的数据没有被完全替换，所以要通过len ，获取有效的字节，代码使用演示：\n\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象.\n       \tFileInputStream fis = new FileInputStream("read.txt"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组的有效字节部分，变成字符串打印\n            System.out.println(new String(b，0，len));//  len 每次读取的有效字节个数\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ne\n\n\n> 小贴士：\n> \n> 使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。\n\n\n# 2.6 字节流练习：图片复制（小文件）\n\n\n# 复制原理图解\n\n\n\n\n# 案例实现\n\n复制图片文件，代码使用演示：\n\npublic class Copy {\n    public static void main(String[] args) throws IOException {\n        // 1.创建流对象\n        // 1.1 指定数据源\n        FileInputStream fis = new FileInputStream("D:\\\\test.jpg");\n        // 1.2 指定目的地\n        FileOutputStream fos = new FileOutputStream("test_copy.jpg");\n\n        // 2.读写数据\n        // 2.1 定义数组\n        byte[] b = new byte[1024];\n        // 2.2 定义长度\n        int len;\n        // 2.3 循环读取\n        while ((len = fis.read(b))!=-1) {\n            // 2.4 写出数据\n            fos.write(b, 0 , len);\n        }\n\n        // 3.关闭资源\n        fos.close();\n        fis.close();\n    }\n}\n\n\n> 小贴士：\n> \n> 流的关闭原则：先开后关，后开先关。',normalizedContent:'# 2. 字节流\n\n\n\n\n# 2.1 一切皆为字节\n\n一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。\n\n\n# 2.2 字节输出流【outputstream】\n\njava.io.outputstream抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n * public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。\n * public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。\n * public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。\n * public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。\n * public abstract void write(int b) ：将指定的字节输出流。\n\n> 小贴士：\n> \n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n\n# 2.3 fileoutputstream类\n\n\n\noutputstream有很多子类，我们从最简单的一个子类开始。\n\njava.io.fileoutputstream类是文件输出流，用于将数据写出到文件。\n\n\n# 构造方法\n\n * public fileoutputstream(file file)：创建文件输出流以写入由指定的 file对象表示的文件。\n * public fileoutputstream(string name)： 创建文件输出流以指定的名称写入文件。\n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。\n\n * 构造举例，代码如下：\n\npublic class fileoutputstreamconstructor throws ioexception {\n    public static void main(string[] args) {\n   \t \t// 使用file对象创建流对象\n        file file = new file("a.txt");\n        fileoutputstream fos = new fileoutputstream(file);\n      \n        // 使用文件名称创建流对象\n        fileoutputstream fos = new fileoutputstream("b.txt");\n    }\n}\n\n\n\n# 写出字节数据\n\n# 常用方法总结\nvoid write(int b)\t\t\t\t\t\t\t一次写一个字节数据\nvoid write(byte[] b)\t\t\t\t\t\t一次写一个字节数组数据\n# 最常用\nvoid write(byte[] b, int off, int len)\t\t一次写一个字节数组的部分数据\n参数一：\n\t数组\n参数二：\n\t起始索引\n参数三：\n\t个数\n\n\n 1. 写出字节：write(int b) 方法，每次可以写出一个字节数据，代码使用演示：\n\npublic class foswrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        fileoutputstream fos = new fileoutputstream("fos.txt");     \n      \t// 写出数据\n      \tfos.write(97); // 写出第1个字节\n      \tfos.write(98); // 写出第2个字节\n      \tfos.write(99); // 写出第3个字节\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\nabc\n\n\n> 小贴士：\n> \n>  1. 虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。\n>  2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n 2. 写出字节数组：write(byte[] b)，每次可以写出数组中的数据，代码使用演示：\n\npublic class foswrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        fileoutputstream fos = new fileoutputstream("fos.txt");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = "黑马程序员".getbytes();\n      \t// 写出字节数组数据\n      \tfos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\n黑马程序员\n\n\n 3. 写出指定长度字节数组：write(byte[] b, int off, int len) ,每次写出从off索引开始，len个字节，代码使用演示：\n\npublic class foswrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        fileoutputstream fos = new fileoutputstream("fos.txt");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = "abcde".getbytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b,2,2);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\ncd\n\n\n\n\n\n# 数据追加续写\n\n经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？\n\n * public fileoutputstream(file file, boolean append)： 创建文件输出流以写入由指定的 file对象表示的文件。\n * public fileoutputstream(string name, boolean append)： 创建文件输出流以指定的名称写入文件。\n\n这两个构造方法，参数中都需要传入一个boolean类型的值，true 表示追加数据，false 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：\n\npublic class foswrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        fileoutputstream fos = new fileoutputstream("fos.txt"，true);     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = "abcde".getbytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n文件操作前：cd\n文件操作后：cdabcde\n\n\n\n# 写出换行\n\nwindows系统里，换行符号是\\r\\n 。把\n\n以指定是否追加续写了，代码使用演示：\n\npublic class foswrite {\n    public static void main(string[] args) throws ioexception {\n        // 使用文件名称创建流对象\n        fileoutputstream fos = new fileoutputstream("fos.txt");  \n      \t// 定义字节数组\n      \tbyte[] words = {97,98,99,100,101};\n      \t// 遍历数组\n        for (int i = 0; i < words.length; i++) {\n          \t// 写出一个字节\n            fos.write(words[i]);\n          \t// 写出一个换行, 换行符号转成数组写出\n            fos.write("\\r\\n".getbytes());\n        }\n      \t// 关闭资源\n        fos.close();\n    }\n}\n\n输出结果：\na\nb\nc\nd\ne\n\n\n>  * 回车符\\r和换行符\\n ：\n>    * 回车符：回到一行的开头（return）。\n>    * 换行符：下一行（newline）。\n>  * 系统中的换行：\n>    * windows系统里，每行结尾是 回车+换行 ，即\\r\\n；\n>    * unix系统里，每行结尾只有 换行 ，即\\n；\n>    * mac系统里，每行结尾是 回车 ，即\\r。从 mac os x开始与linux统一。\n\n\n\n\n# 2.4 字节输入流【inputstream】\n\n\n\njava.io.inputstream抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。\n\n * public void close() ：关闭此输入流并释放与此流相关联的任何系统资源。\n * public abstract int read()： 从输入流读取数据的下一个字节。\n * public int read(byte[] b)： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。\n\n> 小贴士：\n> \n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n\n# 2.5 fileinputstream类\n\njava.io.fileinputstream类是文件输入流，从文件中读取字节。\n\n\n# 构造方法\n\n * fileinputstream(file file)： 通过打开与实际文件的连接来创建一个 fileinputstream ，该文件由文件系统中的 file对象 file命名。\n * fileinputstream(string name)： 通过打开与实际文件的连接来创建一个 fileinputstream ，该文件由文件系统中的路径名 name命名。\n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出filenotfoundexception 。\n\n * 构造举例，代码如下：\n\npublic class fileinputstreamconstructor throws ioexception{\n    public static void main(string[] args) {\n   \t \t// 使用file对象创建流对象\n        file file = new file("a.txt");\n        fileinputstream fos = new fileinputstream(file);\n      \n        // 使用文件名称创建流对象\n        fileinputstream fos = new fileinputstream("b.txt");\n    }\n}\n\n\n\n# 读取字节数据\n\n\n\n 1. 读取字节：read方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回-1，代码使用演示：\n\npublic class fisread {\n    public static void main(string[] args) throws ioexception{\n      \t// 使用文件名称创建流对象\n       \tfileinputstream fis = new fileinputstream("read.txt");\n      \t// 读取数据，返回一个字节\n        int read = fis.read();\n        system.out.println((char) read);\n        read = fis.read();\n        system.out.println((char) read);\n        read = fis.read();\n        system.out.println((char) read);\n        read = fis.read();\n        system.out.println((char) read);\n        read = fis.read();\n        system.out.println((char) read);\n      \t// 读取到末尾,返回-1\n       \tread = fis.read();\n        system.out.println( read);\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n-1\n\n\n循环改进读取方式，代码使用演示：\n\npublic class fisread {\n    public static void main(string[] args) throws ioexception{\n      \t// 使用文件名称创建流对象\n       \tfileinputstream fis = new fileinputstream("read.txt");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fis.read())!=-1) {\n            system.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n\n\n> 小贴士：\n> \n>  1. 虽然读取了一个字节，但是会自动提升为int类型。\n>  2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n 2. 使用字节数组读取：read(byte[] b)，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回-1 ，代码使用演示：\n\npublic class fisread {\n    public static void main(string[] args) throws ioexception{\n      \t// 使用文件名称创建流对象.\n       \tfileinputstream fis = new fileinputstream("read.txt"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组变成字符串打印\n            system.out.println(new string(b));\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ned\n\n\n错误数据d，是由于最后一次读取时，只读取一个字节e，数组中，上次读取的数据没有被完全替换，所以要通过len ，获取有效的字节，代码使用演示：\n\npublic class fisread {\n    public static void main(string[] args) throws ioexception{\n      \t// 使用文件名称创建流对象.\n       \tfileinputstream fis = new fileinputstream("read.txt"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组的有效字节部分，变成字符串打印\n            system.out.println(new string(b，0，len));//  len 每次读取的有效字节个数\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ne\n\n\n> 小贴士：\n> \n> 使用数组读取，每次读取多个字节，减少了系统间的io操作次数，从而提高了读写的效率，建议开发中使用。\n\n\n# 2.6 字节流练习：图片复制（小文件）\n\n\n# 复制原理图解\n\n\n\n\n# 案例实现\n\n复制图片文件，代码使用演示：\n\npublic class copy {\n    public static void main(string[] args) throws ioexception {\n        // 1.创建流对象\n        // 1.1 指定数据源\n        fileinputstream fis = new fileinputstream("d:\\\\test.jpg");\n        // 1.2 指定目的地\n        fileoutputstream fos = new fileoutputstream("test_copy.jpg");\n\n        // 2.读写数据\n        // 2.1 定义数组\n        byte[] b = new byte[1024];\n        // 2.2 定义长度\n        int len;\n        // 2.3 循环读取\n        while ((len = fis.read(b))!=-1) {\n            // 2.4 写出数据\n            fos.write(b, 0 , len);\n        }\n\n        // 3.关闭资源\n        fos.close();\n        fis.close();\n    }\n}\n\n\n> 小贴士：\n> \n> 流的关闭原则：先开后关，后开先关。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"缓冲流",frontmatter:{title:"缓冲流",autoSort:6e3},regularPath:"/zs-se/io/5%E3%80%81%E7%BC%93%E5%86%B2%E6%B5%81.html",relativePath:"zs-se/io/5、缓冲流.md",key:"v-4e952ebc",path:"/zs-se/io/5%E3%80%81%E7%BC%93%E5%86%B2%E6%B5%81.html",headers:[{level:2,title:"1.1 概述",slug:"_1-1-概述",normalizedTitle:"1.1 概述",charIndex:150},{level:2,title:"1.2 字节缓冲流",slug:"_1-2-字节缓冲流",normalizedTitle:"1.2 字节缓冲流",charIndex:366},{level:3,title:"构造方法",slug:"构造方法",normalizedTitle:"构造方法",charIndex:382},{level:3,title:"效率测试",slug:"效率测试",normalizedTitle:"效率测试",charIndex:725},{level:2,title:"1.3 字符缓冲流",slug:"_1-3-字符缓冲流",normalizedTitle:"1.3 字符缓冲流",charIndex:3053},{level:3,title:"构造方法",slug:"构造方法-2",normalizedTitle:"构造方法",charIndex:382},{level:3,title:"特有方法",slug:"特有方法",normalizedTitle:"特有方法",charIndex:3355},{level:2,title:"1.4 练习:文本排序",slug:"_1-4-练习-文本排序",normalizedTitle:"1.4 练习:文本排序",charIndex:4402},{level:3,title:"案例分析",slug:"案例分析",normalizedTitle:"案例分析",charIndex:5202},{level:3,title:"案例实现",slug:"案例实现",normalizedTitle:"案例实现",charIndex:5281}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"1.1 概述 1.2 字节缓冲流 构造方法 效率测试 1.3 字符缓冲流 构造方法 特有方法 1.4 练习:文本排序 案例分析 案例实现",content:'# 1. 缓冲流\n\n昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。\n\n\n# 1.1 概述\n\n缓冲流,也叫高效流，是对4个基本的FileXxx 流的增强，所以也是4个流，按照数据类型分类：\n\n * 字节缓冲流：BufferedInputStream，BufferedOutputStream\n * 字符缓冲流：BufferedReader，BufferedWriter\n\n缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。\n\n\n# 1.2 字节缓冲流\n\n\n\n\n# 构造方法\n\n * public BufferedInputStream(InputStream in) ：创建一个 新的缓冲输入流。\n * public BufferedOutputStream(OutputStream out)： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n// 创建字节缓冲输入流\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream("bis.txt"));\n// 创建字节缓冲输出流\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("bos.txt"));\n\n\n\n# 效率测试\n\n查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。\n\n 1. 基本流，代码如下：\n\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n      \tlong start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n        \tFileInputStream fis = new FileInputStream("jdk9.exe");\n        \tFileOutputStream fos = new FileOutputStream("copy.exe")\n        ){\n        \t// 读写数据\n            int b;\n            while ((b = fis.read()) != -1) {\n                fos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println("普通流复制时间:"+(end - start)+" 毫秒");\n    }\n}\n\n十几分钟过去了...\n\n\n 2. 缓冲流，代码如下：\n\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n      \tlong start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n        \tBufferedInputStream bis = new BufferedInputStream(new FileInputStream("jdk9.exe"));\n\t     BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("copy.exe"));\n        ){\n        // 读写数据\n            int b;\n            while ((b = bis.read()) != -1) {\n                bos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println("缓冲流复制时间:"+(end - start)+" 毫秒");\n    }\n}\n\n缓冲流复制时间:8016 毫秒\n\n\n如何更快呢？\n\n使用数组的方式，代码如下：\n\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n      \t// 记录开始时间\n        long start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n\t\t\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream("jdk9.exe"));\n\t\t BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("copy.exe"));\n        ){\n          \t// 读写数据\n            int len;\n            byte[] bytes = new byte[8*1024];\n            while ((len = bis.read(bytes)) != -1) {\n                bos.write(bytes, 0 , len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println("缓冲流使用数组复制时间:"+(end - start)+" 毫秒");\n    }\n}\n缓冲流使用数组复制时间:666 毫秒\n\n\n\n# 1.3 字符缓冲流\n\n\n\n\n\n\n# 构造方法\n\n * public BufferedReader(Reader in) ：创建一个 新的缓冲输入流。\n * public BufferedWriter(Writer out)： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n// 创建字符缓冲输入流\nBufferedReader br = new BufferedReader(new FileReader("br.txt"));\n// 创建字符缓冲输出流\nBufferedWriter bw = new BufferedWriter(new FileWriter("bw.txt"));\n\n\n\n# 特有方法\n\n字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。\n\n * BufferedReader：public String readLine(): 读一行文字。\n * BufferedWriter：public void newLine(): 写一行行分隔符,由系统属性定义符号。\n\nreadLine方法演示，代码如下：\n\npublic class BufferedReaderDemo {\n    public static void main(String[] args) throws IOException {\n      \t // 创建流对象\n        BufferedReader br = new BufferedReader(new FileReader("in.txt"));\n\t\t// 定义字符串,保存读取的一行文字\n        String line  = null;\n      \t// 循环读取,读取到最后返回null\n        while ((line = br.readLine())!=null) {\n            System.out.print(line);\n            System.out.println("------");\n        }\n\t\t// 释放资源\n        br.close();\n    }\n}\n\n\nnewLine方法演示，代码如下：\n\npublic class BufferedWriterDemo throws IOException {\n  public static void main(String[] args) throws IOException  {\n    \t// 创建流对象\n  \tBufferedWriter bw = new BufferedWriter(new FileWriter("out.txt"));\n    \t// 写出数据\n      bw.write("黑马");\n    \t// 写出换行\n      bw.newLine();\n      bw.write("程序");\n      bw.newLine();\n      bw.write("员");\n      bw.newLine();\n  \t// 释放资源\n      bw.close();\n  }\n}\n输出效果:\n黑马\n程序\n员\n\n\n\n# 1.4 练习:文本排序\n\n请将文本信息恢复顺序。\n\n3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。\n8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。\n4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。\n2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。\n1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。\n9.今当远离，临表涕零，不知所言。\n6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。\n7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。\n5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。\n\n\n\n# 案例分析\n\n 1. 逐行读取文本信息。\n 2. 把读取到的文本存储到集合中\n 3. 对集合中的文本进行排序\n 4. 遍历集合，按顺序，写出文本信息。\n\n\n# 案例实现\n\npublic class Demo05Test {\n    public static void main(String[] args) throws IOException {\n        //1.创建ArrayList集合,泛型使用String\n        ArrayList<String> list = new ArrayList<>();\n        //2.创建BufferedReader对象,构造方法中传递FileReader对象\n        BufferedReader br = new BufferedReader(new FileReader("10_IO\\\\in.txt"));\n        //3.创建BufferedWriter对象,构造方法中传递FileWriter对象\n        BufferedWriter bw = new BufferedWriter(new FileWriter("10_IO\\\\out.txt"));\n        //4.使用BufferedReader对象中的方法readLine,以行的方式读取文本\n        String line;\n        while((line = br.readLine())!=null){\n            //5.把读取到的文本存储到ArrayList集合中\n            list.add(line);\n        }\n        //6.使用Collections集合工具类中的方法sort,对集合中的元素按照自定义规则排序\n        Collections.sort(list, new Comparator<String>() {\n            /*\n                o1-o2:升序\n                o2-o1:降序\n             */\n            @Override\n            public int compare(String o1, String o2) {\n                //依次比较集合中两个元素的首字母,升序排序\n                return o1.charAt(0)-o2.charAt(0);\n            }\n        });\n        //7.遍历ArrayList集合,获取每一个元素\n        for (String s : list) {\n            //8.使用BufferedWriter对象中的方法wirte,把遍历得到的元素写入到文本中(内存缓冲区中)\n            bw.write(s);\n            //9.写换行\n            bw.newLine();\n        }\n        //10.释放资源\n        bw.close();\n        br.close();\n    }\n}\n',normalizedContent:'# 1. 缓冲流\n\n昨天学习了基本的一些流，作为io流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。\n\n\n# 1.1 概述\n\n缓冲流,也叫高效流，是对4个基本的filexxx 流的增强，所以也是4个流，按照数据类型分类：\n\n * 字节缓冲流：bufferedinputstream，bufferedoutputstream\n * 字符缓冲流：bufferedreader，bufferedwriter\n\n缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统io次数，从而提高读写的效率。\n\n\n# 1.2 字节缓冲流\n\n\n\n\n# 构造方法\n\n * public bufferedinputstream(inputstream in) ：创建一个 新的缓冲输入流。\n * public bufferedoutputstream(outputstream out)： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n// 创建字节缓冲输入流\nbufferedinputstream bis = new bufferedinputstream(new fileinputstream("bis.txt"));\n// 创建字节缓冲输出流\nbufferedoutputstream bos = new bufferedoutputstream(new fileoutputstream("bos.txt"));\n\n\n\n# 效率测试\n\n查询api，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375mb），测试它的效率。\n\n 1. 基本流，代码如下：\n\npublic class buffereddemo {\n    public static void main(string[] args) throws filenotfoundexception {\n        // 记录开始时间\n      \tlong start = system.currenttimemillis();\n\t\t// 创建流对象\n        try (\n        \tfileinputstream fis = new fileinputstream("jdk9.exe");\n        \tfileoutputstream fos = new fileoutputstream("copy.exe")\n        ){\n        \t// 读写数据\n            int b;\n            while ((b = fis.read()) != -1) {\n                fos.write(b);\n            }\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n\t\t// 记录结束时间\n        long end = system.currenttimemillis();\n        system.out.println("普通流复制时间:"+(end - start)+" 毫秒");\n    }\n}\n\n十几分钟过去了...\n\n\n 2. 缓冲流，代码如下：\n\npublic class buffereddemo {\n    public static void main(string[] args) throws filenotfoundexception {\n        // 记录开始时间\n      \tlong start = system.currenttimemillis();\n\t\t// 创建流对象\n        try (\n        \tbufferedinputstream bis = new bufferedinputstream(new fileinputstream("jdk9.exe"));\n\t     bufferedoutputstream bos = new bufferedoutputstream(new fileoutputstream("copy.exe"));\n        ){\n        // 读写数据\n            int b;\n            while ((b = bis.read()) != -1) {\n                bos.write(b);\n            }\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n\t\t// 记录结束时间\n        long end = system.currenttimemillis();\n        system.out.println("缓冲流复制时间:"+(end - start)+" 毫秒");\n    }\n}\n\n缓冲流复制时间:8016 毫秒\n\n\n如何更快呢？\n\n使用数组的方式，代码如下：\n\npublic class buffereddemo {\n    public static void main(string[] args) throws filenotfoundexception {\n      \t// 记录开始时间\n        long start = system.currenttimemillis();\n\t\t// 创建流对象\n        try (\n\t\t\tbufferedinputstream bis = new bufferedinputstream(new fileinputstream("jdk9.exe"));\n\t\t bufferedoutputstream bos = new bufferedoutputstream(new fileoutputstream("copy.exe"));\n        ){\n          \t// 读写数据\n            int len;\n            byte[] bytes = new byte[8*1024];\n            while ((len = bis.read(bytes)) != -1) {\n                bos.write(bytes, 0 , len);\n            }\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n\t\t// 记录结束时间\n        long end = system.currenttimemillis();\n        system.out.println("缓冲流使用数组复制时间:"+(end - start)+" 毫秒");\n    }\n}\n缓冲流使用数组复制时间:666 毫秒\n\n\n\n# 1.3 字符缓冲流\n\n\n\n\n\n\n# 构造方法\n\n * public bufferedreader(reader in) ：创建一个 新的缓冲输入流。\n * public bufferedwriter(writer out)： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n// 创建字符缓冲输入流\nbufferedreader br = new bufferedreader(new filereader("br.txt"));\n// 创建字符缓冲输出流\nbufferedwriter bw = new bufferedwriter(new filewriter("bw.txt"));\n\n\n\n# 特有方法\n\n字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。\n\n * bufferedreader：public string readline(): 读一行文字。\n * bufferedwriter：public void newline(): 写一行行分隔符,由系统属性定义符号。\n\nreadline方法演示，代码如下：\n\npublic class bufferedreaderdemo {\n    public static void main(string[] args) throws ioexception {\n      \t // 创建流对象\n        bufferedreader br = new bufferedreader(new filereader("in.txt"));\n\t\t// 定义字符串,保存读取的一行文字\n        string line  = null;\n      \t// 循环读取,读取到最后返回null\n        while ((line = br.readline())!=null) {\n            system.out.print(line);\n            system.out.println("------");\n        }\n\t\t// 释放资源\n        br.close();\n    }\n}\n\n\nnewline方法演示，代码如下：\n\npublic class bufferedwriterdemo throws ioexception {\n  public static void main(string[] args) throws ioexception  {\n    \t// 创建流对象\n  \tbufferedwriter bw = new bufferedwriter(new filewriter("out.txt"));\n    \t// 写出数据\n      bw.write("黑马");\n    \t// 写出换行\n      bw.newline();\n      bw.write("程序");\n      bw.newline();\n      bw.write("员");\n      bw.newline();\n  \t// 释放资源\n      bw.close();\n  }\n}\n输出效果:\n黑马\n程序\n员\n\n\n\n# 1.4 练习:文本排序\n\n请将文本信息恢复顺序。\n\n3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。\n8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。\n4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。\n2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。\n1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。\n9.今当远离，临表涕零，不知所言。\n6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。\n7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。\n5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。\n\n\n\n# 案例分析\n\n 1. 逐行读取文本信息。\n 2. 把读取到的文本存储到集合中\n 3. 对集合中的文本进行排序\n 4. 遍历集合，按顺序，写出文本信息。\n\n\n# 案例实现\n\npublic class demo05test {\n    public static void main(string[] args) throws ioexception {\n        //1.创建arraylist集合,泛型使用string\n        arraylist<string> list = new arraylist<>();\n        //2.创建bufferedreader对象,构造方法中传递filereader对象\n        bufferedreader br = new bufferedreader(new filereader("10_io\\\\in.txt"));\n        //3.创建bufferedwriter对象,构造方法中传递filewriter对象\n        bufferedwriter bw = new bufferedwriter(new filewriter("10_io\\\\out.txt"));\n        //4.使用bufferedreader对象中的方法readline,以行的方式读取文本\n        string line;\n        while((line = br.readline())!=null){\n            //5.把读取到的文本存储到arraylist集合中\n            list.add(line);\n        }\n        //6.使用collections集合工具类中的方法sort,对集合中的元素按照自定义规则排序\n        collections.sort(list, new comparator<string>() {\n            /*\n                o1-o2:升序\n                o2-o1:降序\n             */\n            @override\n            public int compare(string o1, string o2) {\n                //依次比较集合中两个元素的首字母,升序排序\n                return o1.charat(0)-o2.charat(0);\n            }\n        });\n        //7.遍历arraylist集合,获取每一个元素\n        for (string s : list) {\n            //8.使用bufferedwriter对象中的方法wirte,把遍历得到的元素写入到文本中(内存缓冲区中)\n            bw.write(s);\n            //9.写换行\n            bw.newline();\n        }\n        //10.释放资源\n        bw.close();\n        br.close();\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"打印流",frontmatter:{title:"打印流",autoSort:3e3},regularPath:"/zs-se/io/8%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81.html",relativePath:"zs-se/io/8、打印流.md",key:"v-3ec14aeb",path:"/zs-se/io/8%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81.html",headers:[{level:2,title:"4.1 概述",slug:"_4-1-概述",normalizedTitle:"4.1 概述",charIndex:17},{level:2,title:"4.2 PrintStream类",slug:"_4-2-printstream类",normalizedTitle:"4.2 printstream类",charIndex:126},{level:3,title:"构造方法",slug:"构造方法",normalizedTitle:"构造方法",charIndex:147},{level:3,title:"改变打印流向",slug:"改变打印流向",normalizedTitle:"改变打印流向",charIndex:274}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"4.1 概述 4.2 PrintStream类 构造方法 改变打印流向",content:'# 4. 打印流\n\n\n\n\n\n\n# 4.1 概述\n\n平时我们在控制台打印输出，是调用print方法和println方法完成的，这两个方法都来自于java.io.PrintStream类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。\n\n\n# 4.2 PrintStream类\n\n\n# 构造方法\n\n * public PrintStream(String fileName)： 使用指定的文件名创建一个新的打印流。\n\n构造举例，代码如下：\n\nPrintStream ps = new PrintStream("ps.txt")；\n\n\n\n# 改变打印流向\n\nSystem.out就是PrintStream类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个"小把戏"，改变它的流向。\n\n此打印流在虚拟机启动的时候，由虚拟机创建，默认指向控制台 特殊的打印流，系统中的标准输出流，是不能关闭，在系统中是唯一的\n\npublic class PrintDemo {\n    public static void main(String[] args) throws IOException {\n\t\t// 调用系统的打印流,控制台直接输出97\n        System.out.println(97);\n      \n\t\t// 创建打印流,指定文件的名称\n        PrintStream ps = new PrintStream("ps.txt");\n      \t\n      \t// 设置系统的打印流流向,输出到ps.txt\n        System.setOut(ps);\n      \t// 调用系统的打印流,ps.txt中输出97\n        System.out.println(97);\n    }\n}\n',normalizedContent:'# 4. 打印流\n\n\n\n\n\n\n# 4.1 概述\n\n平时我们在控制台打印输出，是调用print方法和println方法完成的，这两个方法都来自于java.io.printstream类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。\n\n\n# 4.2 printstream类\n\n\n# 构造方法\n\n * public printstream(string filename)： 使用指定的文件名创建一个新的打印流。\n\n构造举例，代码如下：\n\nprintstream ps = new printstream("ps.txt")；\n\n\n\n# 改变打印流向\n\nsystem.out就是printstream类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个"小把戏"，改变它的流向。\n\n此打印流在虚拟机启动的时候，由虚拟机创建，默认指向控制台 特殊的打印流，系统中的标准输出流，是不能关闭，在系统中是唯一的\n\npublic class printdemo {\n    public static void main(string[] args) throws ioexception {\n\t\t// 调用系统的打印流,控制台直接输出97\n        system.out.println(97);\n      \n\t\t// 创建打印流,指定文件的名称\n        printstream ps = new printstream("ps.txt");\n      \t\n      \t// 设置系统的打印流流向,输出到ps.txt\n        system.setout(ps);\n      \t// 调用系统的打印流,ps.txt中输出97\n        system.out.println(97);\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"基础的io流使用",frontmatter:{},regularPath:"/zs-se/io/",relativePath:"zs-se/io/README.md",key:"v-5dc07559",path:"/zs-se/io/",lastUpdated:"2023年12月8日星期五下午2点43分",lastUpdatedTimestamp:1702017788e3,headersStr:null,content:"# 基础的io流使用",normalizedContent:"# 基础的io流使用",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702017788e3},{title:"压缩和解压缩流",frontmatter:{title:"压缩和解压缩流",autoSort:2e3},regularPath:"/zs-se/io/9%E3%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81.html",relativePath:"zs-se/io/9、压缩和解压缩流.md",key:"v-2dc2bd7c",path:"/zs-se/io/9%E3%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81.html",lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:null,content:'# 5. 压缩流和解压缩流\n\n\n\n\n\n\n\n压缩流：\n\n负责压缩文件或者文件夹\n\n\n解压缩流：\n\n负责把压缩包中的文件和文件夹解压出来\n\n\n/*\n*   解压缩流\n*\n* */\npublic class ZipStreamDemo1 {\n    public static void main(String[] args) throws IOException {\n\n        //1.创建一个File表示要解压的压缩包\n        File src = new File("D:\\\\aaa.zip");\n        //2.创建一个File表示解压的目的地\n        File dest = new File("D:\\\\");\n\n        //调用方法\n        unzip(src,dest);\n\n    }\n\n    //定义一个方法用来解压\n    public static void unzip(File src,File dest) throws IOException {\n        //解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中\n        //创建一个解压缩流用来读取压缩包中的数据\n        ZipInputStream zip = new ZipInputStream(new FileInputStream(src));\n        //要先获取到压缩包里面的每一个zipentry对象\n        //表示当前在压缩包中获取到的文件或者文件夹\n        ZipEntry entry;\n        while((entry = zip.getNextEntry()) != null){\n            System.out.println(entry);\n            if(entry.isDirectory()){\n                //文件夹：需要在目的地dest处创建一个同样的文件夹\n                File file = new File(dest,entry.toString());\n                file.mkdirs();\n            }else{\n                //文件：需要读取到压缩包中的文件，并把他存放到目的地dest文件夹中（按照层级目录进行存放）\n                FileOutputStream fos = new FileOutputStream(new File(dest,entry.toString()));\n                int b;\n                while((b = zip.read()) != -1){\n                    //写到目的地\n                    fos.write(b);\n                }\n                fos.close();\n                //表示在压缩包中的一个文件处理完毕了。\n                zip.closeEntry();\n            }\n        }\n        zip.close();\n    }\n}\n\n\npublic class ZipStreamDemo2 {\n    public static void main(String[] args) throws IOException {\n        /*\n         *   压缩流\n         *      需求：\n         *          把D:\\\\a.txt打包成一个压缩包\n         * */\n        //1.创建File对象表示要压缩的文件\n        File src = new File("D:\\\\a.txt");\n        //2.创建File对象表示压缩包的位置\n        File dest = new File("D:\\\\");\n        //3.调用方法用来压缩\n        toZip(src,dest);\n    }\n\n    /*\n    *   作用：压缩\n    *   参数一：表示要压缩的文件\n    *   参数二：表示压缩包的位置\n    * */\n    public static void toZip(File src,File dest) throws IOException {\n        //1.创建压缩流关联压缩包\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(new File(dest,"a.zip")));\n        //2.创建ZipEntry对象，表示压缩包里面的每一个文件和文件夹\n        //参数：压缩包里面的路径\n        ZipEntry entry = new ZipEntry("aaa\\\\bbb\\\\a.txt");\n        //3.把ZipEntry对象放到压缩包当中\n        zos.putNextEntry(entry);\n        //4.把src文件中的数据写到压缩包当中\n        FileInputStream fis = new FileInputStream(src);\n        int b;\n        while((b = fis.read()) != -1){\n            zos.write(b);\n        }\n        zos.closeEntry();\n        zos.close();\n    }\n}\n\n\npublic class ZipStreamDemo3 {\n    public static void main(String[] args) throws IOException {\n        /*\n         *   压缩流\n         *      需求：\n         *          把D:\\\\aaa文件夹压缩成一个压缩包\n         * */\n        //1.创建File对象表示要压缩的文件夹\n        File src = new File("D:\\\\aaa");\n        //2.创建File对象表示压缩包放在哪里（压缩包的父级路径）\n        File destParent = src.getParentFile();//D:\\\\\n        //3.创建File对象表示压缩包的路径\n        File dest = new File(destParent,src.getName() + ".zip");\n        //4.创建压缩流关联压缩包\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(dest));\n        //5.获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中\n        toZip(src,zos,src.getName());//aaa\n        //6.释放资源\n        zos.close();\n    }\n\n    /*\n    *   作用：获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中\n    *   参数一：数据源\n    *   参数二：压缩流\n    *   参数三：压缩包内部的路径\n    * */\n    public static void toZip(File src,ZipOutputStream zos,String name) throws IOException {\n        //1.进入src文件夹\n        File[] files = src.listFiles();\n        //2.遍历数组\n        for (File file : files) {\n            if(file.isFile()){\n                //3.判断-文件，变成ZipEntry对象，放入到压缩包当中\n                ZipEntry entry = new ZipEntry(name + "\\\\" + file.getName());//aaa\\\\no1\\\\a.txt\n                zos.putNextEntry(entry);\n                //读取文件中的数据，写到压缩包\n                FileInputStream fis = new FileInputStream(file);\n                int b;\n                while((b = fis.read()) != -1){\n                    zos.write(b);\n                }\n                fis.close();\n                zos.closeEntry();\n            }else{\n                //4.判断-文件夹，递归\n                toZip(file,zos,name + "\\\\" + file.getName());\n                //     no1            aaa   \\\\   no1\n            }\n        }\n    }\n}\n',normalizedContent:'# 5. 压缩流和解压缩流\n\n\n\n\n\n\n\n压缩流：\n\n负责压缩文件或者文件夹\n\n\n解压缩流：\n\n负责把压缩包中的文件和文件夹解压出来\n\n\n/*\n*   解压缩流\n*\n* */\npublic class zipstreamdemo1 {\n    public static void main(string[] args) throws ioexception {\n\n        //1.创建一个file表示要解压的压缩包\n        file src = new file("d:\\\\aaa.zip");\n        //2.创建一个file表示解压的目的地\n        file dest = new file("d:\\\\");\n\n        //调用方法\n        unzip(src,dest);\n\n    }\n\n    //定义一个方法用来解压\n    public static void unzip(file src,file dest) throws ioexception {\n        //解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中\n        //创建一个解压缩流用来读取压缩包中的数据\n        zipinputstream zip = new zipinputstream(new fileinputstream(src));\n        //要先获取到压缩包里面的每一个zipentry对象\n        //表示当前在压缩包中获取到的文件或者文件夹\n        zipentry entry;\n        while((entry = zip.getnextentry()) != null){\n            system.out.println(entry);\n            if(entry.isdirectory()){\n                //文件夹：需要在目的地dest处创建一个同样的文件夹\n                file file = new file(dest,entry.tostring());\n                file.mkdirs();\n            }else{\n                //文件：需要读取到压缩包中的文件，并把他存放到目的地dest文件夹中（按照层级目录进行存放）\n                fileoutputstream fos = new fileoutputstream(new file(dest,entry.tostring()));\n                int b;\n                while((b = zip.read()) != -1){\n                    //写到目的地\n                    fos.write(b);\n                }\n                fos.close();\n                //表示在压缩包中的一个文件处理完毕了。\n                zip.closeentry();\n            }\n        }\n        zip.close();\n    }\n}\n\n\npublic class zipstreamdemo2 {\n    public static void main(string[] args) throws ioexception {\n        /*\n         *   压缩流\n         *      需求：\n         *          把d:\\\\a.txt打包成一个压缩包\n         * */\n        //1.创建file对象表示要压缩的文件\n        file src = new file("d:\\\\a.txt");\n        //2.创建file对象表示压缩包的位置\n        file dest = new file("d:\\\\");\n        //3.调用方法用来压缩\n        tozip(src,dest);\n    }\n\n    /*\n    *   作用：压缩\n    *   参数一：表示要压缩的文件\n    *   参数二：表示压缩包的位置\n    * */\n    public static void tozip(file src,file dest) throws ioexception {\n        //1.创建压缩流关联压缩包\n        zipoutputstream zos = new zipoutputstream(new fileoutputstream(new file(dest,"a.zip")));\n        //2.创建zipentry对象，表示压缩包里面的每一个文件和文件夹\n        //参数：压缩包里面的路径\n        zipentry entry = new zipentry("aaa\\\\bbb\\\\a.txt");\n        //3.把zipentry对象放到压缩包当中\n        zos.putnextentry(entry);\n        //4.把src文件中的数据写到压缩包当中\n        fileinputstream fis = new fileinputstream(src);\n        int b;\n        while((b = fis.read()) != -1){\n            zos.write(b);\n        }\n        zos.closeentry();\n        zos.close();\n    }\n}\n\n\npublic class zipstreamdemo3 {\n    public static void main(string[] args) throws ioexception {\n        /*\n         *   压缩流\n         *      需求：\n         *          把d:\\\\aaa文件夹压缩成一个压缩包\n         * */\n        //1.创建file对象表示要压缩的文件夹\n        file src = new file("d:\\\\aaa");\n        //2.创建file对象表示压缩包放在哪里（压缩包的父级路径）\n        file destparent = src.getparentfile();//d:\\\\\n        //3.创建file对象表示压缩包的路径\n        file dest = new file(destparent,src.getname() + ".zip");\n        //4.创建压缩流关联压缩包\n        zipoutputstream zos = new zipoutputstream(new fileoutputstream(dest));\n        //5.获取src里面的每一个文件，变成zipentry对象，放入到压缩包当中\n        tozip(src,zos,src.getname());//aaa\n        //6.释放资源\n        zos.close();\n    }\n\n    /*\n    *   作用：获取src里面的每一个文件，变成zipentry对象，放入到压缩包当中\n    *   参数一：数据源\n    *   参数二：压缩流\n    *   参数三：压缩包内部的路径\n    * */\n    public static void tozip(file src,zipoutputstream zos,string name) throws ioexception {\n        //1.进入src文件夹\n        file[] files = src.listfiles();\n        //2.遍历数组\n        for (file file : files) {\n            if(file.isfile()){\n                //3.判断-文件，变成zipentry对象，放入到压缩包当中\n                zipentry entry = new zipentry(name + "\\\\" + file.getname());//aaa\\\\no1\\\\a.txt\n                zos.putnextentry(entry);\n                //读取文件中的数据，写到压缩包\n                fileinputstream fis = new fileinputstream(file);\n                int b;\n                while((b = fis.read()) != -1){\n                    zos.write(b);\n                }\n                fis.close();\n                zos.closeentry();\n            }else{\n                //4.判断-文件夹，递归\n                tozip(file,zos,name + "\\\\" + file.getname());\n                //     no1            aaa   \\\\   no1\n            }\n        }\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"JSON.stringify()",frontmatter:{title:"JSON.stringify()","autoGroup-1":"api"},regularPath:"/web/js/JSON-stringify%E5%87%BD%E6%95%B0.html",relativePath:"web/js/JSON-stringify函数.md",key:"v-17a63e16",path:"/web/js/JSON-stringify%E5%87%BD%E6%95%B0.html",headers:[{level:2,title:"通过需求学习",slug:"通过需求学习",normalizedTitle:"通过需求学习",charIndex:49},{level:2,title:"九大特性",slug:"九大特性",normalizedTitle:"九大特性",charIndex:2370},{level:3,title:"特性1",slug:"特性1",normalizedTitle:"特性1",charIndex:2379},{level:3,title:"特性1总结",slug:"特性1总结",normalizedTitle:"特性1总结",charIndex:3273},{level:3,title:"特性2",slug:"特性2",normalizedTitle:"特性2",charIndex:3497},{level:3,title:"特性3",slug:"特性3",normalizedTitle:"特性3",charIndex:3952},{level:3,title:"特性4",slug:"特性4",normalizedTitle:"特性4",charIndex:4152},{level:3,title:"特性5",slug:"特性5",normalizedTitle:"特性5",charIndex:4349},{level:3,title:"特性6",slug:"特性6",normalizedTitle:"特性6",charIndex:4506},{level:3,title:"特性7",slug:"特性7",normalizedTitle:"特性7",charIndex:4666},{level:3,title:"特性8",slug:"特性8",normalizedTitle:"特性8",charIndex:4976},{level:3,title:"特性9",slug:"特性9",normalizedTitle:"特性9",charIndex:5731},{level:2,title:"第二个参数和第三个参数",slug:"第二个参数和第三个参数",normalizedTitle:"第二个参数和第三个参数",charIndex:6158},{level:2,title:"强大的第二个参数 replacer",slug:"强大的第二个参数-replacer",normalizedTitle:"强大的第二个参数 replacer",charIndex:6174},{level:3,title:"replacer 作为函数时",slug:"replacer-作为函数时",normalizedTitle:"replacer 作为函数时",charIndex:6350},{level:3,title:"replacer 作为数组时",slug:"replacer-作为数组时",normalizedTitle:"replacer 作为数组时",charIndex:7811},{level:2,title:"有意思却没啥用的第三个参数 space",slug:"有意思却没啥用的第三个参数-space",normalizedTitle:"有意思却没啥用的第三个参数 space",charIndex:8057},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:3276},{level:3,title:"九大特性：",slug:"九大特性-2",normalizedTitle:"九大特性：",charIndex:8704},{level:3,title:"第二个参数和第三个参数",slug:"第二个参数和第三个参数-2",normalizedTitle:"第二个参数和第三个参数",charIndex:6158}],lastUpdated:"2024年8月12日星期一早上8点55分",lastUpdatedTimestamp:1723424126e3,headersStr:"通过需求学习 九大特性 特性1 特性1总结 特性2 特性3 特性4 特性5 特性6 特性7 特性8 特性9 第二个参数和第三个参数 强大的第二个参数 replacer replacer 作为函数时 replacer 作为数组时 有意思却没啥用的第三个参数 space 总结 九大特性： 第二个参数和第三个参数",content:'https://github.com/NieZhuZhu/Blog/issues/1\n\n\n\n\n# 通过需求学习\n\n首先我们在开发的过程当中遇到这样一个处理数据的需求\n\nconst todayILearn = {\n  _id: 1,\n  content: \'今天学习 JSON.stringify()，我很开心！\',\n  created_at: \'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)\',\n  updated_at: \'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)\'\n}\n\n\n我们需要将上面这个对象处理成下面这个对象\n\nconst todayILearn = {\n  id: 1,\n  content: \'今天学习 JSON.stringify()，我很开心！\',\n  createdAt: \'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)\',\n  updatedAt: \'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)\'\n}\n\n\n也就是在不改变属性的值的前提下，将对象属性修改一下。 把_id 改成 id，把 updated_at 改成 updatedAt，把 created_at 改成 createdAt。我们现在通过这个小小的需求来见识一下 JSON.stringify() 的强大吧。\n\n首先要解决这个问题我们有很多的解决方式，我们先提供两种不优雅的解决方案：\n\n * 方案一：一次遍历+多声明一个变量\n\n// 多一个变量存储\nconst todayILearnTemp = {};\nfor (const [key, value] of Object.entries(todayILearn)) {\n  if (key === "_id") todayILearnTemp["id"] = value;\n  else if (key === "created_at") todayILearnTemp["createdAt"] = value;\n  else if (key === "updatedAt") todayILearnTemp["updatedAt"] = value;\n  else todayILearnTemp[key] = value;\n}\nconsole.log(todayILearnTemp);\n// 结果：\n// { id: 1,\n//  content: \'今天学习 JSON.stringify()，我很开心！\',\n//  createdAt: \'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)\',\n//  updated_at: \'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)\' \n// }\n\n\n方案一完全没有问题可以实现。但是多声明了一个变量又加上一层循环并且还有很多的 if else 语句，怎么都显得不太优雅。\n\n * 方案二：暴力 delete 属性和增加属性\n\n// 极致的暴力美学\ntodayILearn.id = todayILearn._id;\ntodayILearn.createdAt = todayILearn.created_at;\ntodayILearn.updatedAt = todayILearn.updated_at;\ndelete todayILearn._id;\ndelete todayILearn.created_at;\ndelete todayILearn.updated_at;\nconsole.log(todayILearn);\n// \t太暴力😢\n//{ \n//  content: \'今天学习 JSON.stringify()，我很开心！\',\n//  id: 1,\n//  createdAt: \'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)\',\n//  updatedAt: \'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)\' \n//}\n\n\n直接 delete 暴力解决太粗鲁了，而且有一个缺点，属性的顺序变了。\n\n * 方案三：序列化+ replace 美学典范\n\nconst mapObj = {\n  _id: "id",\n  created_at: "createdAt",\n  updated_at: "updatedAt"\n};\nJSON.parse(\n  JSON.stringify(todayILearn).replace(\n    /_id|created_at|updated_at/gi,\n    matched => mapObj[matched])\n    )\n// { \n// id: 1,\n//  content: \'今天学习 JSON.stringify()，我很开心！\',\n//  createdAt: \'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)\',\n//  updatedAt: \'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)\' \n// }\n\n\n瞬间感觉非常优雅和舒服，有木有！如果你这样写，你导师给你 review 代码的时候，你导师肯定会夸赞你的😁。\n\n接下来，正片开始，我们今天将系统的学习或者说是复习一遍 JSON.stringify 的基础知识，让我们在日常开发中更加的游刃有余。\n\n\n# 九大特性\n\n\n# 特性1\n\n对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时 JSON.stringify()将返回不同的结果。\n\n首先，我们来复习一下知识点，看一道非常简单的面试题目：请问下面代码会输出什么？\n\nconst data = {\n  a: "aaa",\n  b: undefined,\n  c: Symbol("dd"),\n  fn: function() {\n    return true;\n  }\n};\nJSON.stringify(data); // 输出：？\n\n// "{"a":"aaa"}"\n\n\n很简单这道题目面试官主要考察的知识点是：\n\n * undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 跳过（忽略）对它们进行序列化\n\n面试官追问：假设 undefined、任意的函数以及 symbol 值作为数组元素会是怎样呢？\n\nJSON.stringify(["aaa", undefined, function aa() {\n    return true\n  }, Symbol(\'dd\')])  // 输出：？\n\n// "["aaa",null,null,null]"\n\n\n知识点是：\n\n * undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null\n\n我们再发挥动下脑筋，如果单独序列化这些值会是什么样的结果呢？\n\nJSON.stringify(function a (){console.log(\'a\')})\n// undefined\nJSON.stringify(undefined)\n// undefined\nJSON.stringify(Symbol(\'dd\'))\n// undefined\n\n\n单独转换的结果就是：\n\n * undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时都会返回 undefined\n\n\n# 特性1总结\n\n * undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 对跳过（忽略）它们进行序列化\n * undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null\n * undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时，都会返回 undefined\n\n\n# 特性2\n\n也是在使用过程中必须要非常注意的一个点：\n\n * 非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。\n\nconst data = {\n  a: "aaa",\n  b: undefined,\n  c: Symbol("dd"),\n  fn: function() {\n    return true;\n  },\n  d: "ddd"\n};\nJSON.stringify(data); // 输出：？\n// "{"a":"aaa","d":"ddd"}"\n\nJSON.stringify(["aaa", undefined, function aa() {\n    return true\n  }, Symbol(\'dd\'),"eee"])  // 输出：？\n\n// "["aaa",null,null,null,"eee"]"\n\n\n正如我们在第一特性所说，JSON.stringify() 序列化时会忽略一些特殊的值，所以不能保证序列化后的字符串还是以特定的顺序出现（数组除外）。\n\n\n# 特性3\n\n * 转换值如果有 toJSON() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。\n\nJSON.stringify({\n    say: "hello JSON.stringify",\n    toJSON: function() {\n      return "today i learn";\n    }\n  })\n// "today i learn"\n\n\n\n# 特性4\n\n * JSON.stringify() 将会正常序列化 Date 的值。\n\nJSON.stringify({ now: new Date() });\n// "{"now":"2019-12-08T07:42:11.973Z"}"\n\n\n实际上 Date 对象自己部署了 toJSON() 方法（同Date.toISOString()），因此 Date 对象会被当做字符串处理。\n\n\n# 特性5\n\n * NaN 和 Infinity 格式的数值及 null 都会被当做 null。\n\n直接上代码：\n\nJSON.stringify(NaN)\n// "null"\nJSON.stringify(null)\n// "null"\nJSON.stringify(Infinity)\n// "null"\n\n\n\n# 特性6\n\n关于基本类型的序列化：\n\n * 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。\n\nJSON.stringify([new Number(1), new String("false"), new Boolean(false)]);\n// "[1,"false",false]"\n\n\n\n# 特性7\n\n关于对象属性的是否可枚举：\n\n * 其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。\n\n// 不可枚举的属性默认会被忽略：\nJSON.stringify( \n    Object.create(\n        null, \n        { \n            x: { value: \'json\', enumerable: false }, \n            y: { value: \'stringify\', enumerable: true } \n        }\n    )\n);\n// "{"y","stringify"}"\n\n\n\n# 特性8\n\n我们都知道实现深拷贝最简单粗暴的方式就是序列化：JSON.parse(JSON.stringify())，这个方式实现深拷贝会因为序列化的诸多特性导致诸多的坑点：比如现在我们要说的循环引用问题。\n\n// 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。 \nconst obj = {\n  name: "loopObj"\n};\nconst loopObj = {\n  obj\n};\n// 对象之间形成循环引用，形成闭环\nobj.loopObj = loopObj;\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\ndeepClone(obj)\n/**\n VM44:9 Uncaught TypeError: Converting circular structure to JSON\n    --\x3e starting at object with constructor \'Object\'\n    |     property \'loopObj\' -> object with constructor \'Object\'\n    --- property \'obj\' closes the circle\n    at JSON.stringify (<anonymous>)\n    at deepClone (<anonymous>:9:26)\n    at <anonymous>:11:13\n */\n\n\n * 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。\n\n这也就是为什么用序列化去实现深拷贝时，遇到循环引用的对象会抛出错误的原因。\n\n\n# 特性9\n\n最后，关于 symbol 属性还有一点要说的就是：\n\n * 所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。\n\nJSON.stringify({ [Symbol.for("json")]: "stringify" }, function(k, v) {\n    if (typeof k === "symbol") {\n      return v;\n    }\n  })\n\n// undefined\n\n\n关于 replacer 是什么呢，它是 JSON.stringify() 的第二个参数，我们比较少的会用到，所以很多时候我们会忘记 JSON.stringify() 第二个、第三个参数，场景不多，但是用的好的话会非常的方便，关于 JSON.stringify() 第九大特性的例子中对 replacer 参数不明白的同学先别急，其实很简单，我们马上就会在下面的学习中弄懂。\n\n\n# 第二个参数和第三个参数\n\n\n# 强大的第二个参数 replacer\n\nreplacer 参数有两种形式，可以是一个函数或者一个数组。作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 map、filter 等方法的回调函数，对每一个属性值都会执行一次该函数。如果 replacer 是一个数组，数组的值代表将被序列化成 JSON 字符串的属性名。\n\n\n# replacer 作为函数时\n\n第二个参数replacer 非常强大， replacer 作为函数时，我们可以打破九大特性的大多数特性，我们直接来看代码吧。\n\nconst data = {\n  a: "aaa",\n  b: undefined,\n  c: Symbol("dd"),\n  fn: function() {\n    return true;\n  }\n};\n// 不用 replacer 参数时\nJSON.stringify(data); \n\n// "{"a":"aaa"}"\n// 使用 replacer 参数作为函数时\nJSON.stringify(data, (key, value) => {\n  switch (true) {\n    case typeof value === "undefined":\n      return "undefined";\n    case typeof value === "symbol":\n      return value.toString();\n    case typeof value === "function":\n      return value.toString();\n    default:\n      break;\n  }\n  return value;\n})\n// "{"a":"aaa","b":"undefined","c":"Symbol(dd)","fn":"function() {\\n    return true;\\n  }"}"\n\n\n虽然使用 toString() 方法有点耍流氓的意思但是不得不说第二个参数很强大。\n\n# 传入 replacer 函数的第一个参数\n\n需要注意的是，replacer 被传入的函数时，第一个参数不是对象的第一个键值对，而是空字符串作为 key 值，value 值是整个对象的键值对：\n\nconst data = {\n  a: 2,\n  b: 3,\n  c: 4,\n  d: 5\n};\nJSON.stringify(data, (key, value) => {\n  console.log(value);\n  return value;\n})\n// 第一个被传入 replacer 函数的是 {"":{a: 2, b: 3, c: 4, d: 5}}\n// {a: 2, b: 3, c: 4, d: 5}   \n// 2\n// 3\n// 4\n// 5\n\n\n# 实现 map 函数\n\n我们还可以用它来手写实现一个对象的类似 map 的函数。\n\n// 实现一个 map 函数\nconst data = {\n  a: 2,\n  b: 3,\n  c: 4,\n  d: 5\n};\nconst objMap = (obj, fn) => {\n  if (typeof fn !== "function") {\n    throw new TypeError(`${fn} is not a function !`);\n  }\n  return JSON.parse(JSON.stringify(obj, fn));\n};\nobjMap(data, (key, value) => {\n  if (value % 2 === 0) {\n    return value / 2;\n  }\n  return value;\n});\n// {a: 1, b: 3, c: 2, d: 5}\n\n\n\n# replacer 作为数组时\n\nreplacer 作为数组时，结果非常简单，数组的值就代表了将被序列化成 JSON 字符串的属性名。\n\nconst jsonObj = {\n  name: "JSON.stringify",\n  params: "obj,replacer,space"\n};\n\n// 只保留 params 属性的值\nJSON.stringify(jsonObj, ["params"]);\n// "{"params":"obj,replacer,space"}" \n\n\n\n# 有意思却没啥用的第三个参数 space\n\nspace 参数用来控制结果字符串里面的间距。首先看一个例子就是到这东西到底是干啥用的：\n\nconst tiedan = {\n  name: "弹铁蛋同学",\n  describe: "今天在学 JSON.stringify()",\n  emotion: "like shit"\n};\nJSON.stringify(tiedan, null, "🐷");\n// 接下来是输出结果\n// "{\n// 🐷"name": "弹铁蛋同学",\n// 🐷"describe": "今天在学 JSON.stringify()",\n// 🐷"emotion": "like shit"\n// }"\nJSON.stringify(tiedan, null, 2);\n// "{\n//   "name": "弹铁蛋同学",\n//   "describe": "今天在学 JSON.stringify()",\n//   "emotion": "like shit"\n// }"\n\n\n上面代码一眼就能看出第三个参数的作用了，花里胡哨的，其实这个参数还是比较鸡肋的，除了好看没啥特别的用处。我们用 \\t、 \\n 等缩进能让输出更加格式化，更适于观看。\n\n * 如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；\n * 如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。\n\n\n# 总结\n\n\n# 九大特性：\n\n一、对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时的不同返回结果。\n\n * undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 对跳过（忽略）它们进行序列化\n * undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null\n * undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时都会返回 undefined\n\n二、非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。\n\n三、转换值如果有 toJSON() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。\n\n四、JSON.stringify() 将会正常序列化 Date 的值。\n\n五、NaN 和 Infinity 格式的数值及 null 都会被当做 null。\n\n六、布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。\n\n七、其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。\n\n八、对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。\n\n九、所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。\n\n\n# 第二个参数和第三个参数\n\n# 第二个参数：\n\n * 作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 map、filter 等方法的回调函数，对每一个属性值都会执行一次该函数（期间我们还简单实现过一个 map 函数）。\n * 如果 replacer 是一个数组，数组的值代表将被序列化成 JSON 字符串的属性名。\n\n# 第三个参数：\n\n * 如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）。\n * 如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。\n\n# 注意：\n\n第一个例子的方案三，有小伙伴提示说这个方案会有风险，确实是这样的(可能会把对象的值给替换掉)。大家慎用吧，大部分情况下这样使用是 ok 的。小伙伴们提供的第四种方案还是很不错的：\n\nconst todayILearn = {\n  _id: 1,\n  content: \'今天学习 JSON.stringify()，我很开心！\',\n  created_at: \'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)\',\n  updated_at: \'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)\'\n}\nconst mapObj = {\n  _id: "id",\n  created_at: "createdAt",\n  updated_at: "updatedAt"\n};\nObject.fromEntries(Object.entries(todayILearn).map(([k, v]) => [mapObj[k]||k, v]))\n// { \n// id: 1,\n//  content: \'今天学习 JSON.stringify()，我很开心！\',\n//  createdAt: \'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)\',\n//  updatedAt: \'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)\' \n// }\n\n\n面试官连环追问：数组拍平（扁平化） flat 方法实现',normalizedContent:'https://github.com/niezhuzhu/blog/issues/1\n\n\n\n\n# 通过需求学习\n\n首先我们在开发的过程当中遇到这样一个处理数据的需求\n\nconst todayilearn = {\n  _id: 1,\n  content: \'今天学习 json.stringify()，我很开心！\',\n  created_at: \'mon nov 25 2019 14:03:55 gmt+0800 (中国标准时间)\',\n  updated_at: \'mon nov 25 2019 16:03:55 gmt+0800 (中国标准时间)\'\n}\n\n\n我们需要将上面这个对象处理成下面这个对象\n\nconst todayilearn = {\n  id: 1,\n  content: \'今天学习 json.stringify()，我很开心！\',\n  createdat: \'mon nov 25 2019 14:03:55 gmt+0800 (中国标准时间)\',\n  updatedat: \'mon nov 25 2019 16:03:55 gmt+0800 (中国标准时间)\'\n}\n\n\n也就是在不改变属性的值的前提下，将对象属性修改一下。 把_id 改成 id，把 updated_at 改成 updatedat，把 created_at 改成 createdat。我们现在通过这个小小的需求来见识一下 json.stringify() 的强大吧。\n\n首先要解决这个问题我们有很多的解决方式，我们先提供两种不优雅的解决方案：\n\n * 方案一：一次遍历+多声明一个变量\n\n// 多一个变量存储\nconst todayilearntemp = {};\nfor (const [key, value] of object.entries(todayilearn)) {\n  if (key === "_id") todayilearntemp["id"] = value;\n  else if (key === "created_at") todayilearntemp["createdat"] = value;\n  else if (key === "updatedat") todayilearntemp["updatedat"] = value;\n  else todayilearntemp[key] = value;\n}\nconsole.log(todayilearntemp);\n// 结果：\n// { id: 1,\n//  content: \'今天学习 json.stringify()，我很开心！\',\n//  createdat: \'mon nov 25 2019 14:03:55 gmt+0800 (中国标准时间)\',\n//  updated_at: \'mon nov 25 2019 16:03:55 gmt+0800 (中国标准时间)\' \n// }\n\n\n方案一完全没有问题可以实现。但是多声明了一个变量又加上一层循环并且还有很多的 if else 语句，怎么都显得不太优雅。\n\n * 方案二：暴力 delete 属性和增加属性\n\n// 极致的暴力美学\ntodayilearn.id = todayilearn._id;\ntodayilearn.createdat = todayilearn.created_at;\ntodayilearn.updatedat = todayilearn.updated_at;\ndelete todayilearn._id;\ndelete todayilearn.created_at;\ndelete todayilearn.updated_at;\nconsole.log(todayilearn);\n// \t太暴力😢\n//{ \n//  content: \'今天学习 json.stringify()，我很开心！\',\n//  id: 1,\n//  createdat: \'mon nov 25 2019 14:03:55 gmt+0800 (中国标准时间)\',\n//  updatedat: \'mon nov 25 2019 16:03:55 gmt+0800 (中国标准时间)\' \n//}\n\n\n直接 delete 暴力解决太粗鲁了，而且有一个缺点，属性的顺序变了。\n\n * 方案三：序列化+ replace 美学典范\n\nconst mapobj = {\n  _id: "id",\n  created_at: "createdat",\n  updated_at: "updatedat"\n};\njson.parse(\n  json.stringify(todayilearn).replace(\n    /_id|created_at|updated_at/gi,\n    matched => mapobj[matched])\n    )\n// { \n// id: 1,\n//  content: \'今天学习 json.stringify()，我很开心！\',\n//  createdat: \'mon nov 25 2019 14:03:55 gmt+0800 (中国标准时间)\',\n//  updatedat: \'mon nov 25 2019 16:03:55 gmt+0800 (中国标准时间)\' \n// }\n\n\n瞬间感觉非常优雅和舒服，有木有！如果你这样写，你导师给你 review 代码的时候，你导师肯定会夸赞你的😁。\n\n接下来，正片开始，我们今天将系统的学习或者说是复习一遍 json.stringify 的基础知识，让我们在日常开发中更加的游刃有余。\n\n\n# 九大特性\n\n\n# 特性1\n\n对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时 json.stringify()将返回不同的结果。\n\n首先，我们来复习一下知识点，看一道非常简单的面试题目：请问下面代码会输出什么？\n\nconst data = {\n  a: "aaa",\n  b: undefined,\n  c: symbol("dd"),\n  fn: function() {\n    return true;\n  }\n};\njson.stringify(data); // 输出：？\n\n// "{"a":"aaa"}"\n\n\n很简单这道题目面试官主要考察的知识点是：\n\n * undefined、任意的函数以及 symbol 作为对象属性值时 json.stringify() 跳过（忽略）对它们进行序列化\n\n面试官追问：假设 undefined、任意的函数以及 symbol 值作为数组元素会是怎样呢？\n\njson.stringify(["aaa", undefined, function aa() {\n    return true\n  }, symbol(\'dd\')])  // 输出：？\n\n// "["aaa",null,null,null]"\n\n\n知识点是：\n\n * undefined、任意的函数以及 symbol 作为数组元素值时，json.stringify() 将会将它们序列化为 null\n\n我们再发挥动下脑筋，如果单独序列化这些值会是什么样的结果呢？\n\njson.stringify(function a (){console.log(\'a\')})\n// undefined\njson.stringify(undefined)\n// undefined\njson.stringify(symbol(\'dd\'))\n// undefined\n\n\n单独转换的结果就是：\n\n * undefined、任意的函数以及 symbol 被 json.stringify() 作为单独的值进行序列化时都会返回 undefined\n\n\n# 特性1总结\n\n * undefined、任意的函数以及 symbol 作为对象属性值时 json.stringify() 对跳过（忽略）它们进行序列化\n * undefined、任意的函数以及 symbol 作为数组元素值时，json.stringify() 将会将它们序列化为 null\n * undefined、任意的函数以及 symbol 被 json.stringify() 作为单独的值进行序列化时，都会返回 undefined\n\n\n# 特性2\n\n也是在使用过程中必须要非常注意的一个点：\n\n * 非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。\n\nconst data = {\n  a: "aaa",\n  b: undefined,\n  c: symbol("dd"),\n  fn: function() {\n    return true;\n  },\n  d: "ddd"\n};\njson.stringify(data); // 输出：？\n// "{"a":"aaa","d":"ddd"}"\n\njson.stringify(["aaa", undefined, function aa() {\n    return true\n  }, symbol(\'dd\'),"eee"])  // 输出：？\n\n// "["aaa",null,null,null,"eee"]"\n\n\n正如我们在第一特性所说，json.stringify() 序列化时会忽略一些特殊的值，所以不能保证序列化后的字符串还是以特定的顺序出现（数组除外）。\n\n\n# 特性3\n\n * 转换值如果有 tojson() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。\n\njson.stringify({\n    say: "hello json.stringify",\n    tojson: function() {\n      return "today i learn";\n    }\n  })\n// "today i learn"\n\n\n\n# 特性4\n\n * json.stringify() 将会正常序列化 date 的值。\n\njson.stringify({ now: new date() });\n// "{"now":"2019-12-08t07:42:11.973z"}"\n\n\n实际上 date 对象自己部署了 tojson() 方法（同date.toisostring()），因此 date 对象会被当做字符串处理。\n\n\n# 特性5\n\n * nan 和 infinity 格式的数值及 null 都会被当做 null。\n\n直接上代码：\n\njson.stringify(nan)\n// "null"\njson.stringify(null)\n// "null"\njson.stringify(infinity)\n// "null"\n\n\n\n# 特性6\n\n关于基本类型的序列化：\n\n * 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。\n\njson.stringify([new number(1), new string("false"), new boolean(false)]);\n// "[1,"false",false]"\n\n\n\n# 特性7\n\n关于对象属性的是否可枚举：\n\n * 其他类型的对象，包括 map/set/weakmap/weakset，仅会序列化可枚举的属性。\n\n// 不可枚举的属性默认会被忽略：\njson.stringify( \n    object.create(\n        null, \n        { \n            x: { value: \'json\', enumerable: false }, \n            y: { value: \'stringify\', enumerable: true } \n        }\n    )\n);\n// "{"y","stringify"}"\n\n\n\n# 特性8\n\n我们都知道实现深拷贝最简单粗暴的方式就是序列化：json.parse(json.stringify())，这个方式实现深拷贝会因为序列化的诸多特性导致诸多的坑点：比如现在我们要说的循环引用问题。\n\n// 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。 \nconst obj = {\n  name: "loopobj"\n};\nconst loopobj = {\n  obj\n};\n// 对象之间形成循环引用，形成闭环\nobj.loopobj = loopobj;\nfunction deepclone(obj) {\n  return json.parse(json.stringify(obj));\n}\ndeepclone(obj)\n/**\n vm44:9 uncaught typeerror: converting circular structure to json\n    --\x3e starting at object with constructor \'object\'\n    |     property \'loopobj\' -> object with constructor \'object\'\n    --- property \'obj\' closes the circle\n    at json.stringify (<anonymous>)\n    at deepclone (<anonymous>:9:26)\n    at <anonymous>:11:13\n */\n\n\n * 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。\n\n这也就是为什么用序列化去实现深拷贝时，遇到循环引用的对象会抛出错误的原因。\n\n\n# 特性9\n\n最后，关于 symbol 属性还有一点要说的就是：\n\n * 所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。\n\njson.stringify({ [symbol.for("json")]: "stringify" }, function(k, v) {\n    if (typeof k === "symbol") {\n      return v;\n    }\n  })\n\n// undefined\n\n\n关于 replacer 是什么呢，它是 json.stringify() 的第二个参数，我们比较少的会用到，所以很多时候我们会忘记 json.stringify() 第二个、第三个参数，场景不多，但是用的好的话会非常的方便，关于 json.stringify() 第九大特性的例子中对 replacer 参数不明白的同学先别急，其实很简单，我们马上就会在下面的学习中弄懂。\n\n\n# 第二个参数和第三个参数\n\n\n# 强大的第二个参数 replacer\n\nreplacer 参数有两种形式，可以是一个函数或者一个数组。作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 map、filter 等方法的回调函数，对每一个属性值都会执行一次该函数。如果 replacer 是一个数组，数组的值代表将被序列化成 json 字符串的属性名。\n\n\n# replacer 作为函数时\n\n第二个参数replacer 非常强大， replacer 作为函数时，我们可以打破九大特性的大多数特性，我们直接来看代码吧。\n\nconst data = {\n  a: "aaa",\n  b: undefined,\n  c: symbol("dd"),\n  fn: function() {\n    return true;\n  }\n};\n// 不用 replacer 参数时\njson.stringify(data); \n\n// "{"a":"aaa"}"\n// 使用 replacer 参数作为函数时\njson.stringify(data, (key, value) => {\n  switch (true) {\n    case typeof value === "undefined":\n      return "undefined";\n    case typeof value === "symbol":\n      return value.tostring();\n    case typeof value === "function":\n      return value.tostring();\n    default:\n      break;\n  }\n  return value;\n})\n// "{"a":"aaa","b":"undefined","c":"symbol(dd)","fn":"function() {\\n    return true;\\n  }"}"\n\n\n虽然使用 tostring() 方法有点耍流氓的意思但是不得不说第二个参数很强大。\n\n# 传入 replacer 函数的第一个参数\n\n需要注意的是，replacer 被传入的函数时，第一个参数不是对象的第一个键值对，而是空字符串作为 key 值，value 值是整个对象的键值对：\n\nconst data = {\n  a: 2,\n  b: 3,\n  c: 4,\n  d: 5\n};\njson.stringify(data, (key, value) => {\n  console.log(value);\n  return value;\n})\n// 第一个被传入 replacer 函数的是 {"":{a: 2, b: 3, c: 4, d: 5}}\n// {a: 2, b: 3, c: 4, d: 5}   \n// 2\n// 3\n// 4\n// 5\n\n\n# 实现 map 函数\n\n我们还可以用它来手写实现一个对象的类似 map 的函数。\n\n// 实现一个 map 函数\nconst data = {\n  a: 2,\n  b: 3,\n  c: 4,\n  d: 5\n};\nconst objmap = (obj, fn) => {\n  if (typeof fn !== "function") {\n    throw new typeerror(`${fn} is not a function !`);\n  }\n  return json.parse(json.stringify(obj, fn));\n};\nobjmap(data, (key, value) => {\n  if (value % 2 === 0) {\n    return value / 2;\n  }\n  return value;\n});\n// {a: 1, b: 3, c: 2, d: 5}\n\n\n\n# replacer 作为数组时\n\nreplacer 作为数组时，结果非常简单，数组的值就代表了将被序列化成 json 字符串的属性名。\n\nconst jsonobj = {\n  name: "json.stringify",\n  params: "obj,replacer,space"\n};\n\n// 只保留 params 属性的值\njson.stringify(jsonobj, ["params"]);\n// "{"params":"obj,replacer,space"}" \n\n\n\n# 有意思却没啥用的第三个参数 space\n\nspace 参数用来控制结果字符串里面的间距。首先看一个例子就是到这东西到底是干啥用的：\n\nconst tiedan = {\n  name: "弹铁蛋同学",\n  describe: "今天在学 json.stringify()",\n  emotion: "like shit"\n};\njson.stringify(tiedan, null, "🐷");\n// 接下来是输出结果\n// "{\n// 🐷"name": "弹铁蛋同学",\n// 🐷"describe": "今天在学 json.stringify()",\n// 🐷"emotion": "like shit"\n// }"\njson.stringify(tiedan, null, 2);\n// "{\n//   "name": "弹铁蛋同学",\n//   "describe": "今天在学 json.stringify()",\n//   "emotion": "like shit"\n// }"\n\n\n上面代码一眼就能看出第三个参数的作用了，花里胡哨的，其实这个参数还是比较鸡肋的，除了好看没啥特别的用处。我们用 \\t、 \\n 等缩进能让输出更加格式化，更适于观看。\n\n * 如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；\n * 如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。\n\n\n# 总结\n\n\n# 九大特性：\n\n一、对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时的不同返回结果。\n\n * undefined、任意的函数以及 symbol 作为对象属性值时 json.stringify() 对跳过（忽略）它们进行序列化\n * undefined、任意的函数以及 symbol 作为数组元素值时，json.stringify() 将会将它们序列化为 null\n * undefined、任意的函数以及 symbol 被 json.stringify() 作为单独的值进行序列化时都会返回 undefined\n\n二、非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。\n\n三、转换值如果有 tojson() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。\n\n四、json.stringify() 将会正常序列化 date 的值。\n\n五、nan 和 infinity 格式的数值及 null 都会被当做 null。\n\n六、布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。\n\n七、其他类型的对象，包括 map/set/weakmap/weakset，仅会序列化可枚举的属性。\n\n八、对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。\n\n九、所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。\n\n\n# 第二个参数和第三个参数\n\n# 第二个参数：\n\n * 作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 map、filter 等方法的回调函数，对每一个属性值都会执行一次该函数（期间我们还简单实现过一个 map 函数）。\n * 如果 replacer 是一个数组，数组的值代表将被序列化成 json 字符串的属性名。\n\n# 第三个参数：\n\n * 如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）。\n * 如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。\n\n# 注意：\n\n第一个例子的方案三，有小伙伴提示说这个方案会有风险，确实是这样的(可能会把对象的值给替换掉)。大家慎用吧，大部分情况下这样使用是 ok 的。小伙伴们提供的第四种方案还是很不错的：\n\nconst todayilearn = {\n  _id: 1,\n  content: \'今天学习 json.stringify()，我很开心！\',\n  created_at: \'mon nov 25 2019 14:03:55 gmt+0800 (中国标准时间)\',\n  updated_at: \'mon nov 25 2019 16:03:55 gmt+0800 (中国标准时间)\'\n}\nconst mapobj = {\n  _id: "id",\n  created_at: "createdat",\n  updated_at: "updatedat"\n};\nobject.fromentries(object.entries(todayilearn).map(([k, v]) => [mapobj[k]||k, v]))\n// { \n// id: 1,\n//  content: \'今天学习 json.stringify()，我很开心！\',\n//  createdat: \'mon nov 25 2019 14:03:55 gmt+0800 (中国标准时间)\',\n//  updatedat: \'mon nov 25 2019 16:03:55 gmt+0800 (中国标准时间)\' \n// }\n\n\n面试官连环追问：数组拍平（扁平化） flat 方法实现',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723424126e3},{title:"iframe通信",frontmatter:{},regularPath:"/web/iframe/iframe-%E9%80%9A%E4%BF%A1.html",relativePath:"web/iframe/iframe-通信.md",key:"v-f216b9a4",path:"/web/iframe/iframe-%E9%80%9A%E4%BF%A1.html",headers:[{level:2,title:"开源Iframe通信框架",slug:"开源iframe通信框架",normalizedTitle:"开源iframe通信框架",charIndex:84},{level:2,title:"为什么要进行Iframe通信❓",slug:"为什么要进行iframe通信❓",normalizedTitle:"为什么要进行iframe通信❓",charIndex:186},{level:2,title:"如何进行Iframe通信？",slug:"如何进行iframe通信",normalizedTitle:"如何进行iframe通信？",charIndex:345},{level:2,title:"Window.postMessage 详解",slug:"window-postmessage-详解",normalizedTitle:"window.postmessage 详解",charIndex:408},{level:3,title:"语法",slug:"语法",normalizedTitle:"语法",charIndex:857},{level:2,title:"Demo",slug:"demo",normalizedTitle:"demo",charIndex:1686}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"开源Iframe通信框架 为什么要进行Iframe通信❓ 如何进行Iframe通信？ Window.postMessage 详解 语法 Demo",content:'# iframe通信\n\n1.如何在Iframe页面间进行通信\n\n2.了解Window.postMessage API\n\n3.完成一个Iframe通信小demo\n\n\n# 开源Iframe通信框架\n\n这是我将公司内源的Iframe通信框架开源了，方便大家使用 仓库地址：github.com/HaiyaoTec/w… 如果对你有帮助 请给个小star🌟鼓励一下\n\n\n\n\n# 为什么要进行Iframe通信❓\n\n * 我们有时候需要将两个单独的项目结合到一起，这个时候就需要Iframe进行一些简单的数据通信\n * 比如，聊天室内嵌入Web应用\n * 又比如，类似微前端那种架构，也需要进行项目间通信，虽然微前端不是这样做的，但是形式差不多，我们都需要解决如何在两个独立的项目间进行通讯\n\n\n# 如何进行Iframe通信？\n\n * 利用浏览器提供的强大API,window.postMessage就可以做到这点!\n\n\n# Window.postMessage 详解\n\n> *window.postMessage()* 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机 (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。*window.postMessage()* 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。\n\n从广义上讲，一个窗口可以获得对另一个窗口的引用（比如 targetWindow = window.opener），然后在窗口上调用 targetWindow.postMessage() 方法分发一个 MessageEvent 消息。接收消息的窗口可以根据需要自由处理此事件 (en-US)。传递给 window.postMessage() 的参数（比如 message ）将通过消息事件对象暴露给接收消息的窗口。\n\n\n# 语法\n\notherWindow.postMessage(message, targetOrigin, [transfer]);\n\n\notherWindow\n\n其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。\n\nmessage\n\n将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。[1]\n\ntargetOrigin\n\n通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串"*"（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。\n\ntransfer 可选\n\n是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。\n\n白话概括一下：\n\n * otherWindow就是你想要哪个页面的接受消息，你就用哪个页面的window来发送消息\n * message就是你想发送的数据\n * targetOrigin通常来讲就是otherWindow所在的源，协议+域名+端口需要一致，才能接受到消息\n * transfer一般忽略\n\n\n# Demo\n\n先来解释一下：\n\n * A->B 发送消息\n\n * popup是你当前window窗口重新弹窗的另一个window窗口\n\n * 你想要对popup发送消息\n\n * event.source 表示是哪个窗口发来的消息（Window）\n\nA\n\n/*\n * A窗口的域名是<http://example.com:8080>，以下是A窗口的script标签下的代码：\n */\nvar popup = window.open(...popup details...);\n\n// 如果弹出框没有被阻止且加载完成\n// 这行语句没有发送信息出去，即使假设当前页面没有改变location（因为targetOrigin设置不对）\npopup.postMessage("The user is \'bob\' and the password is \'secret\'",\n                  "https://secure.example.net");\n\n// 假设当前页面没有改变location，这条语句会成功添加message到发送队列中去（targetOrigin设置对了）\npopup.postMessage("hello there!", "http://example.org");\n\nfunction receiveMessage(event){\n  // 我们能相信信息的发送者吗?  (也许这个发送者和我们最初打开的不是同一个页面).\n  if (event.origin !== "http://example.org")\n    return;\n\n  // event.source 是我们通过window.open打开的弹出页面 popup\n  // event.data 是 popup发送给当前页面的消息 "hi there yourself!  the secret response is: rheeeeet!"\n}\nwindow.addEventListener("message", receiveMessage, false);\n\n\nB\n\n/*\n * 弹出页 popup 域名是<http://example.org>，以下是script标签中的代码:\n */\n//当A页面postMessage被调用后，这个function被addEventListener调用\nfunction receiveMessage(event){\n  // 我们能信任信息来源吗？\n  if (event.origin !== "http://example.com:8080")\n    return;\n  // event.source 就当前弹出页的来源页面\n  // event.data 是 "hello there!"\n\n  // 假设你已经验证了所受到信息的origin (任何时候你都应该这样做), 一个很方便的方式就是把event.source\n  // 作为回信的对象，并且把event.origin作为targetOrigin\n  event.source.postMessage("hi there yourself!  the secret response " +\n                           "is: rheeeeet!",\n                           event.origin);\n}\n\nwindow.addEventListener("message", receiveMessage, false);\n\n\n注意\n\n> 如果不检查origin和source容易导致跨站脚本攻击\n\n任何窗口可以在任何其他窗口访问此方法，在任何时间，无论文档在窗口中的位置，向其发送消息。 因此，用于接收消息的任何事件监听器必须首先使用origin和source属性来检查消息的发送者的身份。 这不能低估：无法检查origin和source属性会导致跨站点脚本攻击。\n\n与任何异步调度的脚本（超时，用户生成的事件）一样，postMessage的调用者不可能检测到侦听由postMessage发送的事件的事件处理程序何时抛出异常。\n\n分派事件的origin属性的值不受调用窗口中document.domain的当前值的影响。\n\n仅对于IDN主机名，origin属性的值不是始终为Unicode或punycode; 在使用此属性时，如果您期望来自IDN网站的消息，则最大程度地兼容性检查IDN和punycode值。 这个值最终将始终是IDN，但现在你应该同时处理IDN和punycode表单。\n\n当发送窗口包含 javascript: 或 data: URL时，origin属性的值是加载URL的脚本的\n\n本文转自 https://juejin.cn/post/7077695826599870471，如有侵权，请联系删除。',normalizedContent:'# iframe通信\n\n1.如何在iframe页面间进行通信\n\n2.了解window.postmessage api\n\n3.完成一个iframe通信小demo\n\n\n# 开源iframe通信框架\n\n这是我将公司内源的iframe通信框架开源了，方便大家使用 仓库地址：github.com/haiyaotec/w… 如果对你有帮助 请给个小star🌟鼓励一下\n\n\n\n\n# 为什么要进行iframe通信❓\n\n * 我们有时候需要将两个单独的项目结合到一起，这个时候就需要iframe进行一些简单的数据通信\n * 比如，聊天室内嵌入web应用\n * 又比如，类似微前端那种架构，也需要进行项目间通信，虽然微前端不是这样做的，但是形式差不多，我们都需要解决如何在两个独立的项目间进行通讯\n\n\n# 如何进行iframe通信？\n\n * 利用浏览器提供的强大api,window.postmessage就可以做到这点!\n\n\n# window.postmessage 详解\n\n> *window.postmessage()* 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机 (两个页面的模数 document.domain设置为相同的值) 时，这两个脚本才能相互通信。*window.postmessage()* 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。\n\n从广义上讲，一个窗口可以获得对另一个窗口的引用（比如 targetwindow = window.opener），然后在窗口上调用 targetwindow.postmessage() 方法分发一个 messageevent 消息。接收消息的窗口可以根据需要自由处理此事件 (en-us)。传递给 window.postmessage() 的参数（比如 message ）将通过消息事件对象暴露给接收消息的窗口。\n\n\n# 语法\n\notherwindow.postmessage(message, targetorigin, [transfer]);\n\n\notherwindow\n\n其他窗口的一个引用，比如iframe的contentwindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。\n\nmessage\n\n将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。[1]\n\ntargetorigin\n\n通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串"*"（表示无限制）或者一个uri。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetorigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postmessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetorigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。\n\ntransfer 可选\n\n是一串和message 同时传递的 transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。\n\n白话概括一下：\n\n * otherwindow就是你想要哪个页面的接受消息，你就用哪个页面的window来发送消息\n * message就是你想发送的数据\n * targetorigin通常来讲就是otherwindow所在的源，协议+域名+端口需要一致，才能接受到消息\n * transfer一般忽略\n\n\n# demo\n\n先来解释一下：\n\n * a->b 发送消息\n\n * popup是你当前window窗口重新弹窗的另一个window窗口\n\n * 你想要对popup发送消息\n\n * event.source 表示是哪个窗口发来的消息（window）\n\na\n\n/*\n * a窗口的域名是<http://example.com:8080>，以下是a窗口的script标签下的代码：\n */\nvar popup = window.open(...popup details...);\n\n// 如果弹出框没有被阻止且加载完成\n// 这行语句没有发送信息出去，即使假设当前页面没有改变location（因为targetorigin设置不对）\npopup.postmessage("the user is \'bob\' and the password is \'secret\'",\n                  "https://secure.example.net");\n\n// 假设当前页面没有改变location，这条语句会成功添加message到发送队列中去（targetorigin设置对了）\npopup.postmessage("hello there!", "http://example.org");\n\nfunction receivemessage(event){\n  // 我们能相信信息的发送者吗?  (也许这个发送者和我们最初打开的不是同一个页面).\n  if (event.origin !== "http://example.org")\n    return;\n\n  // event.source 是我们通过window.open打开的弹出页面 popup\n  // event.data 是 popup发送给当前页面的消息 "hi there yourself!  the secret response is: rheeeeet!"\n}\nwindow.addeventlistener("message", receivemessage, false);\n\n\nb\n\n/*\n * 弹出页 popup 域名是<http://example.org>，以下是script标签中的代码:\n */\n//当a页面postmessage被调用后，这个function被addeventlistener调用\nfunction receivemessage(event){\n  // 我们能信任信息来源吗？\n  if (event.origin !== "http://example.com:8080")\n    return;\n  // event.source 就当前弹出页的来源页面\n  // event.data 是 "hello there!"\n\n  // 假设你已经验证了所受到信息的origin (任何时候你都应该这样做), 一个很方便的方式就是把event.source\n  // 作为回信的对象，并且把event.origin作为targetorigin\n  event.source.postmessage("hi there yourself!  the secret response " +\n                           "is: rheeeeet!",\n                           event.origin);\n}\n\nwindow.addeventlistener("message", receivemessage, false);\n\n\n注意\n\n> 如果不检查origin和source容易导致跨站脚本攻击\n\n任何窗口可以在任何其他窗口访问此方法，在任何时间，无论文档在窗口中的位置，向其发送消息。 因此，用于接收消息的任何事件监听器必须首先使用origin和source属性来检查消息的发送者的身份。 这不能低估：无法检查origin和source属性会导致跨站点脚本攻击。\n\n与任何异步调度的脚本（超时，用户生成的事件）一样，postmessage的调用者不可能检测到侦听由postmessage发送的事件的事件处理程序何时抛出异常。\n\n分派事件的origin属性的值不受调用窗口中document.domain的当前值的影响。\n\n仅对于idn主机名，origin属性的值不是始终为unicode或punycode; 在使用此属性时，如果您期望来自idn网站的消息，则最大程度地兼容性检查idn和punycode值。 这个值最终将始终是idn，但现在你应该同时处理idn和punycode表单。\n\n当发送窗口包含 javascript: 或 data: url时，origin属性的值是加载url的脚本的\n\n本文转自 https://juejin.cn/post/7077695826599870471，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"iframe介绍",frontmatter:{},regularPath:"/web/iframe/iframe-%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7.html",relativePath:"web/iframe/iframe-标签属性.md",key:"v-37885679",path:"/web/iframe/iframe-%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7.html",headers:[{level:2,title:"1、什么是iframe",slug:"_1、什么是iframe",normalizedTitle:"1、什么是iframe",charIndex:15},{level:2,title:"2、iframe的元素属性",slug:"_2、iframe的元素属性",normalizedTitle:"2、iframe的元素属性",charIndex:436},{level:2,title:"3、iframe操作",slug:"_3、iframe操作",normalizedTitle:"3、iframe操作",charIndex:629},{level:2,title:"4、iframe 对象及属性",slug:"_4、iframe-对象及属性",normalizedTitle:"4、iframe 对象及属性",charIndex:889},{level:2,title:"5、创建iframe元素",slug:"_5、创建iframe元素",normalizedTitle:"5、创建iframe元素",charIndex:2255},{level:2,title:"6、iframe之间的通信",slug:"_6、iframe之间的通信",normalizedTitle:"6、iframe之间的通信",charIndex:2875},{level:3,title:"6.1、什么是主域名，什么是子域名(拓展)",slug:"_6-1、什么是主域名-什么是子域名-拓展",normalizedTitle:"6.1、什么是主域名，什么是子域名(拓展)",charIndex:2893},{level:3,title:"6.2、iframe之间的通信",slug:"_6-2、iframe之间的通信",normalizedTitle:"6.2、iframe之间的通信",charIndex:3222},{level:3,title:"URL传参案例1",slug:"url传参案例1",normalizedTitle:"url传参案例1",charIndex:5151},{level:3,title:"父子传参案例1",slug:"父子传参案例1",normalizedTitle:"父子传参案例1",charIndex:6098},{level:2,title:"7、其他",slug:"_7、其他",normalizedTitle:"7、其他",charIndex:6924},{level:3,title:"7.1、iframe自适应",slug:"_7-1、iframe自适应",normalizedTitle:"7.1、iframe自适应",charIndex:6933},{level:3,title:"7.2、防嵌套网页",slug:"_7-2、防嵌套网页",normalizedTitle:"7.2、防嵌套网页",charIndex:7583},{level:3,title:"7.3、iframe使用场景",slug:"_7-3、iframe使用场景",normalizedTitle:"7.3、iframe使用场景",charIndex:9714}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"1、什么是iframe 2、iframe的元素属性 3、iframe操作 4、iframe 对象及属性 5、创建iframe元素 6、iframe之间的通信 6.1、什么是主域名，什么是子域名(拓展) 6.2、iframe之间的通信 URL传参案例1 父子传参案例1 7、其他 7.1、iframe自适应 7.2、防嵌套网页 7.3、iframe使用场景",content:'# iframe介绍\n\n\n# 1、什么是iframe\n\n 1. iframe是HTML元素，用于在网页中内嵌另一个网页。\n\n 2. iframe默认有一个宽高，存在边界。\n\n 3. iframe是一个行内块级元素，可以通过display修改。\n\n 4. 所有浏览器都支持 iframe 标签。不过版本支持情况不同。\n\n 5. 可以把需要的文本放置在 <iframe 和 </iframe 之间，这样就可以应对无法理解 iframe 的浏览器。\n\n 6. 在 HTML 4.1 Strict DTD 和 XHTML 1.0 Strict DTD 中，不支持 iframe 元素。\n\n 7. iframe标签支持 HTML 中的全局属性：\n    \n    \n    iframe标签支持 HTML 中的事件属性：如Window 事件属性、Form 事件、Keyboard 事件、Mouse 事件、Media 事件等\n    \n    \n    \n    \n    \n\n\n# 2、iframe的元素属性\n\n\n\n\niframe常用的元素属性：\n\n 1. src：指定内联网页的地址。\n 2. width、height：控制iframe的宽高。\n 3. frameborder：iframe默认有个边界，可以设置frameborder为0清除边界。\n 4. name：框架的名称。\n 5. scrolling：是否可滚动。yes、no、auto。\n    \n\n\n# 3、iframe操作\n\n 1. 每个iframe里各自维护自己的全局window对象。\n 2. 只有同域才能进行iframe之间的改写，跨域时，只能进行简单的路由跳转。\n 3. 在父级使用window.frames[name]可以获取子iframe的window对象，相应的可以获取document对象，从而对子iframe进行dom操作。\n 4. 在子iframe想要操作父元素的iframe，直接使用子元素的window.parent来获取父级元素的window对象，从而获取document来操作dom。\n\n\n# 4、iframe 对象及属性\n\n\n\n 1. IFrame 对象代表 HTML iframe 元素。\n\n 2. 可使用 getElementById() 来访问 iframe 元素。如：\n    var iframe = document.getElementById(“iframe”);\n    var iwindow = iframe.contentWindow;\n    var idoc = iwindow.document;等价于iframe.contentDocument;\n    （1）、获取iframe的iframe对象：console.log(“iframe”, iframe);\n    \n    （2）、获取iframe的window对象：console.log(“window”, iwindow)；\n    \n    \n    （3）、获取iframe的document：console.log(“document”, idoc);\n    \n    （4）、获取iframe的html：console.log(“html”, idoc.documentElement);\n    \n    \n    （5）、获取head：console.log(“head”, idoc.head);\n    \n    \n    （6）、获取body：console.log(“body”, idoc.body);\n    \n\n 3. 在父级使用window.frames[name]结合iframe的Name属性可以获取子iframe的window对象,相应的可以获取document对象，从而对子iframe进行dom操作（更便捷）。如：\n    var iframes = window.frames;\n    var iframe = window.frames[‘myFrame’] // 返回的就是window对象\n    \n    （1）、console.log(“iframes”, iframes);\n    \n    （2）、console.log(“iframe”, iframe)，与下面相同。\n    \n    \n    （3）、获取iframe的window对象：console.log(“iframe”, iframe.window);\n    \n    \n    （4）、获取iframe的document：console.log(“document”, iframe.document)\n    \n\n 4. 在iframe中获取父级内容。\n    在同域下，父页面可以获取子iframe的内容，那么子iframe同样也能操作父页面内容。在iframe中，可以通过在window上挂载的几个API进行获取：\n    （1）、window.parent //获取上一级的window对象，如果还是iframe则是该iframe的window对象\n    （2）、window.top //获取最顶级容器的window对象，即，就是你打开页面的文档\n    （3）、window.self //返回自身window的引用。可以理解 window===window.self(脑残)\n\n\n# 5、创建iframe元素\n\n可使用 document.createElement() 方法来创建iframe元素：var x = document.createElement(“IFRAME”);\n比如，iframe长轮询：\n\nvar iframeCon = docuemnt.querySelector(\'#container\'),\ntext; //传递的信息\nvar iframe = document.createElement(\'iframe\'),\niframe.id = "frame",\niframe.style = "display:none;",\niframe.name="polling",\niframe.src="target.html";\niframeCon.appendChild(iframe);\niframe.onload= function(){\nvar iloc = iframe.contentWindow.location,\nidoc = iframe.contentDocument;\nsetTimeout(function(){\ntext = idoc.getElementsByTagName(\'body\')[0].textContent;\nconsole.log(text);\niloc.reload(); //刷新页面,再次获取信息，并且会触发onload函数\n},2000);\n}\n\n\n\n# 6、iframe之间的通信\n\n\n# 6.1、什么是主域名，什么是子域名(拓展)\n\n * 主域名又称一级域名或者顶级域名，由域名主体 . 域名后缀组成，整个域名通常只有1个点号。 百度的主域名是baidu.com。\n * 子域名一般会根据站点不同性质在主域名前面加上不同的前缀构成，通常比主域名多一个点或两个点。只要在主域名前面加上前缀的都是该主域名的子域名，子域名又能分为二级子域名、三级子域名、还有多级子域名。\n * 例如：百度的二级域名（子域名）www.baidu.com 如1.www.baidu.com和2.www.baidu.com这样的三级域名也同样可以成为www.baidu.com和baidu.com的子域名。\n * 拓展：子域名爆破就是指探测某个域名下的所有子域名。\n\n\n# 6.2、iframe之间的通信\n\n * iframe就是一个隔离沙盒，相当于我们在一个页面内可以操控很多个标签页一样。\n * 浏览器判断你跨没跨域，主要根据两个点：一个是你网页的协议(protocol)，另一个就是你的host是否相同（window.location.protocol、window.location.host）。\n\n1、主域相同而子域不同，可以使用iframe进行解决document.domain = ‘’，指定相同的主域。比如在http://www.example.com/a.html和http://sub.example.com/b.html两个文件中都加上document.domain = “example.com”；\n\n\n2、当我们要向指定iframe发送信息时，首先要获取该iframe自己的window对象，然后使用该window对象的postMessage发送消息。\n\n * window.postMessage(message, targetOrigin, [transfer])\n   \n\n 1. 事件默认参数：\n    （1）、e.source – 消息源，消息的发送窗口/iframe。\n    （2）、e.origin – 消息源的 URI(可能包含协议、域名和端口)，用来验证数据源。\n    （3）、e.data – 发送过来的数据。\n\n 2. 使用注意点：\n    （1）、监听时使用window.addEventListener(“message”,(e)=>{}, false)，必须保证监听的window和发送消息的window相同。\n    （2）、需要确定先监听了message事件，再发送的消息。\n    （3）、targetOrigin指定了URI的话，必须是相同的域和端口号，不然会报跨域错误。\n    （4）、targetOrigin使用*号的话，支持跨域，我们可以通过监听消息的默认参数e.origin来判断是否接收到了正确的消息。\n    （5）、当我们明确知道origin是谁时，不要使用星号，当要接受信息时，先判断origin是否是我们要接受的源，再做后续的操作。\n    （6）、获取子元素的document时要确保子元素所有dom元素已经挂载完毕，因此在原生的写法时，必须写在window的onload事件中。\n\n 3. iframe通信示例：\n    （1）、 窗口1:\n\n<!DOCTYPE html>\n<html lang="en">\n \n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <div>窗口1</div>\n    <iframe src="http://127.0.0.1:5501/2.html" frameborder="1" id=\'123\' name="abc"></iframe>\n    <script>\n        window.onload = function () {\n            setTimeout(() => {\n                window.top.postMessage(\'handsome\', \'*\')\n            }, 0)\n        }\n    <\/script>\n</body>\n</html>\n\n\n\n（2）、窗口2\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <div>窗口2</div>\n    <script>\n        top.addEventListener(\'message\',(e)=>{console.log(e)},false)\n    <\/script>\n</body>\n</html>\n\n\n\n（3）、运行结果：\n\n\n\n\n# URL传参案例1\n\n可以在iframe的src属性中使用查询参数（也称为URL参数）将数据传递到嵌入的页面。例如，假设iframe嵌入的页面URL是 index.com/page.html，那么可以使用如下的URL来传递数据：\n\n<iframe src="index.com/page.html?param1=value1&param2=value2"></iframe>\n\n\n在嵌入的页面中，可以使用JavaScript获取查询参数并使用它们：\n\nvar params = new URLSearchParams(window.location.search);\nvar param1 = params.get(\'param1\');\nvar param2 = params.get(\'param2\');\n\n\n或者写一个函数获取对应的值\n\n//从url获取参数\nexport const getQuery = (name: string, url?: string) => {\n  const params = new URLSearchParams(url || window.location.search);\n  const value = params.get(name);\n  if (value) {\n    return value;\n  }\n  return getQueryString(name, url);\n};\n\nexport const getQueryString = (name: string, url?: string) => {\n  const reg = new RegExp(\'(^|&|/?)\' + name + \'=([^&]*)(&|$)\', \'i\');\n  const r = encodeURI(url || window.location.search || window.location.href || window.location.hash)\n    .substr(1)\n    .match(reg);\n  if (r != null) return unescape(r[2]);\n  return null;\n};\n\n\n\n# 父子传参案例1\n\n# 子传父\n\n子：发送\n\n// 发送消息给接收方窗口\nwindow.parent.postMessage("Hello, parent!", "http://parent.com");\n\n\n父：接收\n\n// 监听message事件，接收消息\nwindow.addEventListener("message", receiveMessage, false);\n\nfunction receiveMessage(event) {\n  // 判断消息来源是否是指定的发送方窗口\n  if (event.origin === "http://child.com") {\n    // 处理接收到的消息\n    console.log(event.data);\n  }\n}\n\n\n# 父传子\n\n父：发送\n\nconst iframe = document.getElementById(\'my-iframe\');\nconst iframeWindow = iframe.contentWindow;\n\nconst message = { type: \'GREETINGS\', data: \'Hello, child!\' };\nconst targetOrigin = \'http://child.com\'; // 指定接收方的源\niframeWindow.postMessage(message, targetOrigin);\n\n\n子：接收\n\nwindow.addEventListener(\'message\', receiveMessage, false);\n\nfunction receiveMessage(event) {\n  if (event.origin === \'http://parent.com\') { // 验证消息来源\n    console.log(event.data); // 处理接收到的消息\n  }\n}\n\n\n\n# 7、其他\n\n\n# 7.1、iframe自适应\n\n 1. iframe默认会自带滚动条，不会全屏。所以要想自适应的话首先去掉滚动条即在iframe标签上添加 scrolling=“no”。\n    \n    <iframe scrolling="no" src="./aaa" id="iframe"></iframe>\n    \n    \n\n 2. 设置iframe的高为body的高。\n    \n     var iwindow = iframe.contentWindow;\n     var idoc = iwindow.document;\n     iframe.height = idoc.body.offsetHeight;\n    \n    \n\n 3. 还可以添加其它的装饰属性。\n    \n\n 4. 示例：\n    \n    // 可以直接写在内联里面，也可以在css里面定义，不过对于广告iframe来说，样式写在属性中，是最好的。\n     <iframe id="frame" name="frame" width="160" height="600" frameborder="0" src="target.html" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true"></iframe>\n    \n\n\n# 7.2、防嵌套网页\n\n * iframe的使用会出现出现安全性，一共两个方面：一个是你的网页被别人iframe，另一个是你iframe别人的网页。\n * 最出名的clickhacking就是使用iframe来 拦截click事件。因为iframe享有着click的最优先权，当有人在伪造的主页中进行点击的话，如果点在iframe上，则会默认是在操作iframe的页面。 所以，钓鱼网站就是使用这个技术，通过诱导用户进行点击。\n\n# 7.2.1、浏览器端\n\n * 前端可以使用window.top来防止你的网页被iframe。\n\n * 限定你的网页不能嵌套在任意网页内。如果想要引用同域的框架的话，可以判断域名。```\n   \n   if(window != window.top){\n     window.top.location.href = correctURL;\n   }\n   // 判断域名\n   if(top.location.host != window.location.host) {\n     top.location.href = window.location.href;\n   }\n   // 如果你网页不同域名的话，上述就会报错。可以使用try...catch...进行错误捕获。如果发生错误，则说明不同域，表示你的页面被盗用了。可能有些浏览器这样写是不会报错，所以需要降级处理再进行跳转即可。\n   try{\n     top.location.hostname; //检测是否出错\n     //如果没有出错，则降级处理\n     if (top.location.hostname != window.location.hostname) {\n       top.location.href =window.location.href;\n     }\n   }\n   catch(e){\n     top.location.href = window.location.href;\n   }\n   \n\n# 7.2.2、服务器端\n\n 1. X-Frame-Options\n    \n    * X-Frame-Options是一个相应头，主要是描述服务器的网页资源的iframe权限。目前的支持度是IE8+。有3个选项：\n      1. X-Frame-Options: DENY。拒绝任何iframe的嵌套请求。\n      2. X-Frame-Options: SAMEORIGIN。只允许同源请求。例如网页为 lgg.com/123.html，則 lgg.com 底下的所有网页可以嵌入此网页，但是 lgg.com 以外的网页不能嵌入\n      3. X-Frame-Options: ALLOW-FROM。只允许指定网页的iframe请求，不过兼容性较差Chrome不支持\n    * X-Frame-Options其实就是将前端js对iframe的把控交给服务器来进行处理。\n    \n    // 等价于X-Frame-Options: DENY\n    if(window != window.top){\n      window.top.location.href = window.location.href;\n    }\n    // 等价于X-Frame-Options: SAMEORIGIN\n    if(top.location.hostname != window.location.hostname) {\n      top.location.href =window.location.href;\n    }\n    \n    \n    * 该属性是对页面的iframe进行一个主要限制。另外还有一个Content Security Policy，同样也可以对iframe进行限制，而且，他应该是以后网页安全防护的主流。\n\n 2. sandbox\n    \n    * sandbox是h5的一个新属性（IE10+支持），就是用来给指定iframe设置一个沙盒模型限制iframe的更多权限。\n    * 启用方式：添加sandbox属性。\n    \n    <iframe sandbox src="..."></iframe>\n    \n    \n    * 会对iframe页面进行一系列的限制：\n      1. script脚本不能执行。\n      2. 不能发送ajax请求。\n      3. 不能使用本地存储，即localStorage,cookie等。\n      4. 不能创建新的弹窗和window。\n      5. 不能发送表单。\n      6. 不能加载额外插件比如flash等。\n    * 可以在sandbox里面进行一些设置：\n    \n    <iframe sandbox="allow-forms allow-same-origin allow-scripts" src="..."></iframe>\n    \n    \n    \n\n\n# 7.3、iframe使用场景\n\n 1. PDF文档预览。\n 2. 插入广告等。\n\n本文转自 http://t.csdnimg.cn/h3v6K，如有侵权，请联系删除。',normalizedContent:'# iframe介绍\n\n\n# 1、什么是iframe\n\n 1. iframe是html元素，用于在网页中内嵌另一个网页。\n\n 2. iframe默认有一个宽高，存在边界。\n\n 3. iframe是一个行内块级元素，可以通过display修改。\n\n 4. 所有浏览器都支持 iframe 标签。不过版本支持情况不同。\n\n 5. 可以把需要的文本放置在 <iframe 和 </iframe 之间，这样就可以应对无法理解 iframe 的浏览器。\n\n 6. 在 html 4.1 strict dtd 和 xhtml 1.0 strict dtd 中，不支持 iframe 元素。\n\n 7. iframe标签支持 html 中的全局属性：\n    \n    \n    iframe标签支持 html 中的事件属性：如window 事件属性、form 事件、keyboard 事件、mouse 事件、media 事件等\n    \n    \n    \n    \n    \n\n\n# 2、iframe的元素属性\n\n\n\n\niframe常用的元素属性：\n\n 1. src：指定内联网页的地址。\n 2. width、height：控制iframe的宽高。\n 3. frameborder：iframe默认有个边界，可以设置frameborder为0清除边界。\n 4. name：框架的名称。\n 5. scrolling：是否可滚动。yes、no、auto。\n    \n\n\n# 3、iframe操作\n\n 1. 每个iframe里各自维护自己的全局window对象。\n 2. 只有同域才能进行iframe之间的改写，跨域时，只能进行简单的路由跳转。\n 3. 在父级使用window.frames[name]可以获取子iframe的window对象，相应的可以获取document对象，从而对子iframe进行dom操作。\n 4. 在子iframe想要操作父元素的iframe，直接使用子元素的window.parent来获取父级元素的window对象，从而获取document来操作dom。\n\n\n# 4、iframe 对象及属性\n\n\n\n 1. iframe 对象代表 html iframe 元素。\n\n 2. 可使用 getelementbyid() 来访问 iframe 元素。如：\n    var iframe = document.getelementbyid(“iframe”);\n    var iwindow = iframe.contentwindow;\n    var idoc = iwindow.document;等价于iframe.contentdocument;\n    （1）、获取iframe的iframe对象：console.log(“iframe”, iframe);\n    \n    （2）、获取iframe的window对象：console.log(“window”, iwindow)；\n    \n    \n    （3）、获取iframe的document：console.log(“document”, idoc);\n    \n    （4）、获取iframe的html：console.log(“html”, idoc.documentelement);\n    \n    \n    （5）、获取head：console.log(“head”, idoc.head);\n    \n    \n    （6）、获取body：console.log(“body”, idoc.body);\n    \n\n 3. 在父级使用window.frames[name]结合iframe的name属性可以获取子iframe的window对象,相应的可以获取document对象，从而对子iframe进行dom操作（更便捷）。如：\n    var iframes = window.frames;\n    var iframe = window.frames[‘myframe’] // 返回的就是window对象\n    \n    （1）、console.log(“iframes”, iframes);\n    \n    （2）、console.log(“iframe”, iframe)，与下面相同。\n    \n    \n    （3）、获取iframe的window对象：console.log(“iframe”, iframe.window);\n    \n    \n    （4）、获取iframe的document：console.log(“document”, iframe.document)\n    \n\n 4. 在iframe中获取父级内容。\n    在同域下，父页面可以获取子iframe的内容，那么子iframe同样也能操作父页面内容。在iframe中，可以通过在window上挂载的几个api进行获取：\n    （1）、window.parent //获取上一级的window对象，如果还是iframe则是该iframe的window对象\n    （2）、window.top //获取最顶级容器的window对象，即，就是你打开页面的文档\n    （3）、window.self //返回自身window的引用。可以理解 window===window.self(脑残)\n\n\n# 5、创建iframe元素\n\n可使用 document.createelement() 方法来创建iframe元素：var x = document.createelement(“iframe”);\n比如，iframe长轮询：\n\nvar iframecon = docuemnt.queryselector(\'#container\'),\ntext; //传递的信息\nvar iframe = document.createelement(\'iframe\'),\niframe.id = "frame",\niframe.style = "display:none;",\niframe.name="polling",\niframe.src="target.html";\niframecon.appendchild(iframe);\niframe.onload= function(){\nvar iloc = iframe.contentwindow.location,\nidoc = iframe.contentdocument;\nsettimeout(function(){\ntext = idoc.getelementsbytagname(\'body\')[0].textcontent;\nconsole.log(text);\niloc.reload(); //刷新页面,再次获取信息，并且会触发onload函数\n},2000);\n}\n\n\n\n# 6、iframe之间的通信\n\n\n# 6.1、什么是主域名，什么是子域名(拓展)\n\n * 主域名又称一级域名或者顶级域名，由域名主体 . 域名后缀组成，整个域名通常只有1个点号。 百度的主域名是baidu.com。\n * 子域名一般会根据站点不同性质在主域名前面加上不同的前缀构成，通常比主域名多一个点或两个点。只要在主域名前面加上前缀的都是该主域名的子域名，子域名又能分为二级子域名、三级子域名、还有多级子域名。\n * 例如：百度的二级域名（子域名）www.baidu.com 如1.www.baidu.com和2.www.baidu.com这样的三级域名也同样可以成为www.baidu.com和baidu.com的子域名。\n * 拓展：子域名爆破就是指探测某个域名下的所有子域名。\n\n\n# 6.2、iframe之间的通信\n\n * iframe就是一个隔离沙盒，相当于我们在一个页面内可以操控很多个标签页一样。\n * 浏览器判断你跨没跨域，主要根据两个点：一个是你网页的协议(protocol)，另一个就是你的host是否相同（window.location.protocol、window.location.host）。\n\n1、主域相同而子域不同，可以使用iframe进行解决document.domain = ‘’，指定相同的主域。比如在http://www.example.com/a.html和http://sub.example.com/b.html两个文件中都加上document.domain = “example.com”；\n\n\n2、当我们要向指定iframe发送信息时，首先要获取该iframe自己的window对象，然后使用该window对象的postmessage发送消息。\n\n * window.postmessage(message, targetorigin, [transfer])\n   \n\n 1. 事件默认参数：\n    （1）、e.source – 消息源，消息的发送窗口/iframe。\n    （2）、e.origin – 消息源的 uri(可能包含协议、域名和端口)，用来验证数据源。\n    （3）、e.data – 发送过来的数据。\n\n 2. 使用注意点：\n    （1）、监听时使用window.addeventlistener(“message”,(e)=>{}, false)，必须保证监听的window和发送消息的window相同。\n    （2）、需要确定先监听了message事件，再发送的消息。\n    （3）、targetorigin指定了uri的话，必须是相同的域和端口号，不然会报跨域错误。\n    （4）、targetorigin使用*号的话，支持跨域，我们可以通过监听消息的默认参数e.origin来判断是否接收到了正确的消息。\n    （5）、当我们明确知道origin是谁时，不要使用星号，当要接受信息时，先判断origin是否是我们要接受的源，再做后续的操作。\n    （6）、获取子元素的document时要确保子元素所有dom元素已经挂载完毕，因此在原生的写法时，必须写在window的onload事件中。\n\n 3. iframe通信示例：\n    （1）、 窗口1:\n\n<!doctype html>\n<html lang="en">\n \n<head>\n    <meta charset="utf-8">\n    <meta http-equiv="x-ua-compatible" content="ie=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>document</title>\n</head>\n<body>\n    <div>窗口1</div>\n    <iframe src="http://127.0.0.1:5501/2.html" frameborder="1" id=\'123\' name="abc"></iframe>\n    <script>\n        window.onload = function () {\n            settimeout(() => {\n                window.top.postmessage(\'handsome\', \'*\')\n            }, 0)\n        }\n    <\/script>\n</body>\n</html>\n\n\n\n（2）、窗口2\n\n<!doctype html>\n<html lang="en">\n<head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>document</title>\n</head>\n<body>\n    <div>窗口2</div>\n    <script>\n        top.addeventlistener(\'message\',(e)=>{console.log(e)},false)\n    <\/script>\n</body>\n</html>\n\n\n\n（3）、运行结果：\n\n\n\n\n# url传参案例1\n\n可以在iframe的src属性中使用查询参数（也称为url参数）将数据传递到嵌入的页面。例如，假设iframe嵌入的页面url是 index.com/page.html，那么可以使用如下的url来传递数据：\n\n<iframe src="index.com/page.html?param1=value1&param2=value2"></iframe>\n\n\n在嵌入的页面中，可以使用javascript获取查询参数并使用它们：\n\nvar params = new urlsearchparams(window.location.search);\nvar param1 = params.get(\'param1\');\nvar param2 = params.get(\'param2\');\n\n\n或者写一个函数获取对应的值\n\n//从url获取参数\nexport const getquery = (name: string, url?: string) => {\n  const params = new urlsearchparams(url || window.location.search);\n  const value = params.get(name);\n  if (value) {\n    return value;\n  }\n  return getquerystring(name, url);\n};\n\nexport const getquerystring = (name: string, url?: string) => {\n  const reg = new regexp(\'(^|&|/?)\' + name + \'=([^&]*)(&|$)\', \'i\');\n  const r = encodeuri(url || window.location.search || window.location.href || window.location.hash)\n    .substr(1)\n    .match(reg);\n  if (r != null) return unescape(r[2]);\n  return null;\n};\n\n\n\n# 父子传参案例1\n\n# 子传父\n\n子：发送\n\n// 发送消息给接收方窗口\nwindow.parent.postmessage("hello, parent!", "http://parent.com");\n\n\n父：接收\n\n// 监听message事件，接收消息\nwindow.addeventlistener("message", receivemessage, false);\n\nfunction receivemessage(event) {\n  // 判断消息来源是否是指定的发送方窗口\n  if (event.origin === "http://child.com") {\n    // 处理接收到的消息\n    console.log(event.data);\n  }\n}\n\n\n# 父传子\n\n父：发送\n\nconst iframe = document.getelementbyid(\'my-iframe\');\nconst iframewindow = iframe.contentwindow;\n\nconst message = { type: \'greetings\', data: \'hello, child!\' };\nconst targetorigin = \'http://child.com\'; // 指定接收方的源\niframewindow.postmessage(message, targetorigin);\n\n\n子：接收\n\nwindow.addeventlistener(\'message\', receivemessage, false);\n\nfunction receivemessage(event) {\n  if (event.origin === \'http://parent.com\') { // 验证消息来源\n    console.log(event.data); // 处理接收到的消息\n  }\n}\n\n\n\n# 7、其他\n\n\n# 7.1、iframe自适应\n\n 1. iframe默认会自带滚动条，不会全屏。所以要想自适应的话首先去掉滚动条即在iframe标签上添加 scrolling=“no”。\n    \n    <iframe scrolling="no" src="./aaa" id="iframe"></iframe>\n    \n    \n\n 2. 设置iframe的高为body的高。\n    \n     var iwindow = iframe.contentwindow;\n     var idoc = iwindow.document;\n     iframe.height = idoc.body.offsetheight;\n    \n    \n\n 3. 还可以添加其它的装饰属性。\n    \n\n 4. 示例：\n    \n    // 可以直接写在内联里面，也可以在css里面定义，不过对于广告iframe来说，样式写在属性中，是最好的。\n     <iframe id="frame" name="frame" width="160" height="600" frameborder="0" src="target.html" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true"></iframe>\n    \n\n\n# 7.2、防嵌套网页\n\n * iframe的使用会出现出现安全性，一共两个方面：一个是你的网页被别人iframe，另一个是你iframe别人的网页。\n * 最出名的clickhacking就是使用iframe来 拦截click事件。因为iframe享有着click的最优先权，当有人在伪造的主页中进行点击的话，如果点在iframe上，则会默认是在操作iframe的页面。 所以，钓鱼网站就是使用这个技术，通过诱导用户进行点击。\n\n# 7.2.1、浏览器端\n\n * 前端可以使用window.top来防止你的网页被iframe。\n\n * 限定你的网页不能嵌套在任意网页内。如果想要引用同域的框架的话，可以判断域名。```\n   \n   if(window != window.top){\n     window.top.location.href = correcturl;\n   }\n   // 判断域名\n   if(top.location.host != window.location.host) {\n     top.location.href = window.location.href;\n   }\n   // 如果你网页不同域名的话，上述就会报错。可以使用try...catch...进行错误捕获。如果发生错误，则说明不同域，表示你的页面被盗用了。可能有些浏览器这样写是不会报错，所以需要降级处理再进行跳转即可。\n   try{\n     top.location.hostname; //检测是否出错\n     //如果没有出错，则降级处理\n     if (top.location.hostname != window.location.hostname) {\n       top.location.href =window.location.href;\n     }\n   }\n   catch(e){\n     top.location.href = window.location.href;\n   }\n   \n\n# 7.2.2、服务器端\n\n 1. x-frame-options\n    \n    * x-frame-options是一个相应头，主要是描述服务器的网页资源的iframe权限。目前的支持度是ie8+。有3个选项：\n      1. x-frame-options: deny。拒绝任何iframe的嵌套请求。\n      2. x-frame-options: sameorigin。只允许同源请求。例如网页为 lgg.com/123.html，則 lgg.com 底下的所有网页可以嵌入此网页，但是 lgg.com 以外的网页不能嵌入\n      3. x-frame-options: allow-from。只允许指定网页的iframe请求，不过兼容性较差chrome不支持\n    * x-frame-options其实就是将前端js对iframe的把控交给服务器来进行处理。\n    \n    // 等价于x-frame-options: deny\n    if(window != window.top){\n      window.top.location.href = window.location.href;\n    }\n    // 等价于x-frame-options: sameorigin\n    if(top.location.hostname != window.location.hostname) {\n      top.location.href =window.location.href;\n    }\n    \n    \n    * 该属性是对页面的iframe进行一个主要限制。另外还有一个content security policy，同样也可以对iframe进行限制，而且，他应该是以后网页安全防护的主流。\n\n 2. sandbox\n    \n    * sandbox是h5的一个新属性（ie10+支持），就是用来给指定iframe设置一个沙盒模型限制iframe的更多权限。\n    * 启用方式：添加sandbox属性。\n    \n    <iframe sandbox src="..."></iframe>\n    \n    \n    * 会对iframe页面进行一系列的限制：\n      1. script脚本不能执行。\n      2. 不能发送ajax请求。\n      3. 不能使用本地存储，即localstorage,cookie等。\n      4. 不能创建新的弹窗和window。\n      5. 不能发送表单。\n      6. 不能加载额外插件比如flash等。\n    * 可以在sandbox里面进行一些设置：\n    \n    <iframe sandbox="allow-forms allow-same-origin allow-scripts" src="..."></iframe>\n    \n    \n    \n\n\n# 7.3、iframe使用场景\n\n 1. pdf文档预览。\n 2. 插入广告等。\n\n本文转自 http://t.csdnimg.cn/h3v6k，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"iframe简单使用",frontmatter:{},regularPath:"/web/iframe/iframe-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html",relativePath:"web/iframe/iframe-简单使用.md",key:"v-3151af92",path:"/web/iframe/iframe-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html",headers:[{level:3,title:"1.iframe简单使用",slug:"_1-iframe简单使用",normalizedTitle:"1.iframe简单使用",charIndex:17},{level:3,title:"2.获取iframe",slug:"_2-获取iframe",normalizedTitle:"2.获取iframe",charIndex:880},{level:3,title:"3.获取iframe 元素值",slug:"_3-获取iframe-元素值",normalizedTitle:"3.获取iframe 元素值",charIndex:967},{level:3,title:"4.iframe获取父页面的信息：",slug:"_4-iframe获取父页面的信息",normalizedTitle:"4.iframe获取父页面的信息：",charIndex:1125}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"1.iframe简单使用 2.获取iframe 3.获取iframe 元素值 4.iframe获取父页面的信息：",content:'# iframe简单使用\n\n\n# 1.iframe简单使用\n\n<iframe> 标签规定一个内联框架。\n\n一个内联框架被用来在当前 HTML 文档中嵌入另一个文档。\n\n<iframe width=420 height=330 frameborder=0 scrolling=auto src=URL></iframe>\n\n\n * width插入页的宽；\n * height插入页的高；\n * scrolling 是否显示页面滚动条（可选的参数为auto、yes、no，如果省略这个参数，则默认为auto）；\n * frameborder 边框大小；\n\n注意：URL建议用绝对路径\n\n<iframe width=0 height=0 frameborder=0 scrolling=auto src=WWW .webjx.com></iframe>\n\n\n如果一个页面里面有框架，点页面里的连接，要求在这个<iframe> 里打开。在<iframe >中规定name\n\n<iframe name=**  ></iframe>\n\n\n然后在修改默认打开模式，：网页head中加上<a href=URL target=**>或部分连接的目标框架设为（**）\n\n要插入一个页面。要求只拿中间一部分。其他的都不要。\n\n代码：\n\n<iframe name=123  align=middle marginwidth=0 marginheight=0 vspace=-170 hspace=0 src="http://www.webjx.com/"  frameborder=no scrolling=no  width=776  height=2500></iframe>\n\n\n控制插入页被框架覆盖的深度 marginwidth=0 marginheight=0；控制框架覆盖上部分的深度 vspace=-170\n\nscrolling滚动条要否（auto、yes、no） frameborder框架的边框大小，width=776 height=2500此框架的大小。\n\n\n# 2.获取iframe\n\n常用获取元素的方法，dom ,jQ等;\n\nvar ifr = document.getElementById(‘mainIframe0’)\n\n\n\n# 3.获取iframe 元素值\n\nifr.contentWindow\n\n\n拿到的是window 对象\n\nWindow {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window,\n…}\n\n\nifr.contentWindow.值 定义的全局变量。\n\n\n# 4.iframe获取父页面的信息：\n\n获取父页面元素的值：\n\njquery方式：$("#auditDate",parent.document).val();\n\njs方式：parent.document.getElementById(“auditDate”).value;\n\n\n本文转自 http://t.csdnimg.cn/gAroq，如有侵权，请联系删除。',normalizedContent:'# iframe简单使用\n\n\n# 1.iframe简单使用\n\n<iframe> 标签规定一个内联框架。\n\n一个内联框架被用来在当前 html 文档中嵌入另一个文档。\n\n<iframe width=420 height=330 frameborder=0 scrolling=auto src=url></iframe>\n\n\n * width插入页的宽；\n * height插入页的高；\n * scrolling 是否显示页面滚动条（可选的参数为auto、yes、no，如果省略这个参数，则默认为auto）；\n * frameborder 边框大小；\n\n注意：url建议用绝对路径\n\n<iframe width=0 height=0 frameborder=0 scrolling=auto src=www .webjx.com></iframe>\n\n\n如果一个页面里面有框架，点页面里的连接，要求在这个<iframe> 里打开。在<iframe >中规定name\n\n<iframe name=**  ></iframe>\n\n\n然后在修改默认打开模式，：网页head中加上<a href=url target=**>或部分连接的目标框架设为（**）\n\n要插入一个页面。要求只拿中间一部分。其他的都不要。\n\n代码：\n\n<iframe name=123  align=middle marginwidth=0 marginheight=0 vspace=-170 hspace=0 src="http://www.webjx.com/"  frameborder=no scrolling=no  width=776  height=2500></iframe>\n\n\n控制插入页被框架覆盖的深度 marginwidth=0 marginheight=0；控制框架覆盖上部分的深度 vspace=-170\n\nscrolling滚动条要否（auto、yes、no） frameborder框架的边框大小，width=776 height=2500此框架的大小。\n\n\n# 2.获取iframe\n\n常用获取元素的方法，dom ,jq等;\n\nvar ifr = document.getelementbyid(‘mainiframe0’)\n\n\n\n# 3.获取iframe 元素值\n\nifr.contentwindow\n\n\n拿到的是window 对象\n\nwindow {postmessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: window,\n…}\n\n\nifr.contentwindow.值 定义的全局变量。\n\n\n# 4.iframe获取父页面的信息：\n\n获取父页面元素的值：\n\njquery方式：$("#auditdate",parent.document).val();\n\njs方式：parent.document.getelementbyid(“auditdate”).value;\n\n\n本文转自 http://t.csdnimg.cn/garoq，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"序列化流",frontmatter:{title:"序列化流",autoSort:4e3},regularPath:"/zs-se/io/7%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81.html",relativePath:"zs-se/io/7、序列化流.md",key:"v-0a604b4e",path:"/zs-se/io/7%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81.html",headers:[{level:2,title:"3.1 概述",slug:"_3-1-概述",normalizedTitle:"3.1 概述",charIndex:23},{level:2,title:"3.2 ObjectOutputStream类",slug:"_3-2-objectoutputstream类",normalizedTitle:"3.2 objectoutputstream类",charIndex:215},{level:3,title:"构造方法",slug:"构造方法",normalizedTitle:"构造方法",charIndex:304},{level:3,title:"序列化操作",slug:"序列化操作",normalizedTitle:"序列化操作",charIndex:538},{level:2,title:"3.3 ObjectInputStream类",slug:"_3-3-objectinputstream类",normalizedTitle:"3.3 objectinputstream类",charIndex:1695},{level:3,title:"构造方法",slug:"构造方法-2",normalizedTitle:"构造方法",charIndex:304},{level:3,title:"反序列化操作1",slug:"反序列化操作1",normalizedTitle:"反序列化操作1",charIndex:1876},{level:3,title:"反序列化操作2",slug:"反序列化操作2",normalizedTitle:"反序列化操作2",charIndex:3016},{level:2,title:"3.4 练习：序列化集合",slug:"_3-4-练习-序列化集合",normalizedTitle:"3.4 练习：序列化集合",charIndex:3644},{level:3,title:"案例分析",slug:"案例分析",normalizedTitle:"案例分析",charIndex:3733},{level:3,title:"案例实现",slug:"案例实现",normalizedTitle:"案例实现",charIndex:3826}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"3.1 概述 3.2 ObjectOutputStream类 构造方法 序列化操作 3.3 ObjectInputStream类 构造方法 反序列化操作1 反序列化操作2 3.4 练习：序列化集合 案例分析 案例实现",content:'# 3. 序列化\n\n\n\n\n\n\n\n\n\n\n\n\n# 3.1 概述\n\nJava 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。\n\n反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。看图理解序列化：\n\n\n# 3.2 ObjectOutputStream类\n\njava.io.ObjectOutputStream 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。\n\n\n# 构造方法\n\n * public ObjectOutputStream(OutputStream out)： 创建一个指定OutputStream的ObjectOutputStream。\n\n构造举例，代码如下：\n\nFileOutputStream fileOut = new FileOutputStream("employee.txt");\nObjectOutputStream out = new ObjectOutputStream(fileOut);\n\n\n\n# 序列化操作\n\n 1. 一个对象要想序列化，必须满足两个条件:\n\n * 该类必须实现java.io.Serializable 接口，Serializable 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出NotSerializableException 。\n * 该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰。\n\npublic class Employee implements java.io.Serializable {\n    public String name;\n    public String address;\n    public transient int age; // transient瞬态修饰成员,不会被序列化\n    public void addressCheck() {\n      \tSystem.out.println("Address  check : " + name + " -- " + address);\n    }\n}\n\n\n2.写出对象方法\n\n * public final void writeObject (Object obj) : 将指定的对象写出。\n\npublic class SerializeDemo{\n   \tpublic static void main(String [] args)   {\n    \tEmployee e = new Employee();\n    \te.name = "zhangsan";\n    \te.address = "beiqinglu";\n    \te.age = 20; \n    \ttry {\n      \t\t// 创建序列化流对象\n          ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("employee.txt"));\n        \t// 写出对象\n        \tout.writeObject(e);\n        \t// 释放资源\n        \tout.close();\n        \tSystem.out.println("Serialized data is saved"); // 姓名，地址被序列化，年龄没有被序列化。\n        } catch(IOException i)   {\n            i.printStackTrace();\n        }\n   \t}\n}\n输出结果：\nSerialized data is saved\n\n\n\n# 3.3 ObjectInputStream类\n\nObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。\n\n\n# 构造方法\n\n * public ObjectInputStream(InputStream in)： 创建一个指定InputStream的ObjectInputStream。\n\n\n# 反序列化操作1\n\n如果能找到一个对象的class文件，我们可以进行反序列化操作，调用ObjectInputStream读取对象的方法：\n\n * public final Object readObject () : 读取一个对象。\n\npublic class DeserializeDemo {\n   public static void main(String [] args)   {\n        Employee e = null;\n        try {\t\t\n             // 创建反序列化流\n             FileInputStream fileIn = new FileInputStream("employee.txt");\n             ObjectInputStream in = new ObjectInputStream(fileIn);\n             // 读取一个对象\n             e = (Employee) in.readObject();\n             // 释放资源\n             in.close();\n             fileIn.close();\n        }catch(IOException i) {\n             // 捕获其他异常\n             i.printStackTrace();\n             return;\n        }catch(ClassNotFoundException c)  {\n        \t// 捕获类找不到异常\n             System.out.println("Employee class not found");\n             c.printStackTrace();\n             return;\n        }\n        // 无异常,直接打印输出\n        System.out.println("Name: " + e.name);\t// zhangsan\n        System.out.println("Address: " + e.address); // beiqinglu\n        System.out.println("age: " + e.age); // 0\n    }\n}\n\n\n对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 ClassNotFoundException 异常。\n\n\n# 反序列化操作2\n\n**另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个InvalidClassException异常。**发生这个异常的原因如下：\n\n * 该类的序列版本号与从流中读取的类描述符的版本号不匹配\n * 该类包含未知数据类型\n * 该类没有可访问的无参数构造方法\n\nSerializable 接口给需要序列化的类，提供了一个序列版本号。serialVersionUID 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。\n\npublic class Employee implements java.io.Serializable {\n     // 加入序列版本号\n     private static final long serialVersionUID = 1L;\n     public String name;\n     public String address;\n     // 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.\n     public int eid; \n\n     public void addressCheck() {\n         System.out.println("Address  check : " + name + " -- " + address);\n     }\n}\n\n\n\n# 3.4 练习：序列化集合\n\n 1. 将存有多个自定义对象的集合序列化操作，保存到list.txt文件中。\n 2. 反序列化list.txt ，并遍历集合，打印对象信息。\n\n\n# 案例分析\n\n 1. 把若干学生对象 ，保存到集合中。\n 2. 把集合序列化。\n 3. 反序列化读取时，只需要读取一次，转换为集合类型。\n 4. 遍历集合，可以打印所有的学生信息\n\n\n# 案例实现\n\npublic class SerTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 创建 学生对象\n\t\tStudent student = new Student("老王", "laow");\n\t\tStudent student2 = new Student("老张", "laoz");\n\t\tStudent student3 = new Student("老李", "laol");\n\n\t\tArrayList<Student> arrayList = new ArrayList<>();\n\t\tarrayList.add(student);\n\t\tarrayList.add(student2);\n\t\tarrayList.add(student3);\n\t\t// 序列化操作\n\t\t// serializ(arrayList);\n\t\t\n\t\t// 反序列化  \n\t\tObjectInputStream ois  = new ObjectInputStream(new FileInputStream("list.txt"));\n\t\t// 读取对象,强转为ArrayList类型\n\t\tArrayList<Student> list  = (ArrayList<Student>)ois.readObject();\n\t\t\n      \tfor (int i = 0; i < list.size(); i++ ){\n          \tStudent s = list.get(i);\n        \tSystem.out.println(s.getName()+"--"+ s.getPwd());\n      \t}\n\t}\n\n\tprivate static void serializ(ArrayList<Student> arrayList) throws Exception {\n\t\t// 创建 序列化流 \n\t\tObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("list.txt"));\n\t\t// 写出对象\n\t\toos.writeObject(arrayList);\n\t\t// 释放资源\n\t\toos.close();\n\t}\n}\n',normalizedContent:'# 3. 序列化\n\n\n\n\n\n\n\n\n\n\n\n\n# 3.1 概述\n\njava 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。\n\n反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。看图理解序列化：\n\n\n# 3.2 objectoutputstream类\n\njava.io.objectoutputstream 类，将java对象的原始数据类型写出到文件,实现对象的持久存储。\n\n\n# 构造方法\n\n * public objectoutputstream(outputstream out)： 创建一个指定outputstream的objectoutputstream。\n\n构造举例，代码如下：\n\nfileoutputstream fileout = new fileoutputstream("employee.txt");\nobjectoutputstream out = new objectoutputstream(fileout);\n\n\n\n# 序列化操作\n\n 1. 一个对象要想序列化，必须满足两个条件:\n\n * 该类必须实现java.io.serializable 接口，serializable 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出notserializableexception 。\n * 该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰。\n\npublic class employee implements java.io.serializable {\n    public string name;\n    public string address;\n    public transient int age; // transient瞬态修饰成员,不会被序列化\n    public void addresscheck() {\n      \tsystem.out.println("address  check : " + name + " -- " + address);\n    }\n}\n\n\n2.写出对象方法\n\n * public final void writeobject (object obj) : 将指定的对象写出。\n\npublic class serializedemo{\n   \tpublic static void main(string [] args)   {\n    \temployee e = new employee();\n    \te.name = "zhangsan";\n    \te.address = "beiqinglu";\n    \te.age = 20; \n    \ttry {\n      \t\t// 创建序列化流对象\n          objectoutputstream out = new objectoutputstream(new fileoutputstream("employee.txt"));\n        \t// 写出对象\n        \tout.writeobject(e);\n        \t// 释放资源\n        \tout.close();\n        \tsystem.out.println("serialized data is saved"); // 姓名，地址被序列化，年龄没有被序列化。\n        } catch(ioexception i)   {\n            i.printstacktrace();\n        }\n   \t}\n}\n输出结果：\nserialized data is saved\n\n\n\n# 3.3 objectinputstream类\n\nobjectinputstream反序列化流，将之前使用objectoutputstream序列化的原始数据恢复为对象。\n\n\n# 构造方法\n\n * public objectinputstream(inputstream in)： 创建一个指定inputstream的objectinputstream。\n\n\n# 反序列化操作1\n\n如果能找到一个对象的class文件，我们可以进行反序列化操作，调用objectinputstream读取对象的方法：\n\n * public final object readobject () : 读取一个对象。\n\npublic class deserializedemo {\n   public static void main(string [] args)   {\n        employee e = null;\n        try {\t\t\n             // 创建反序列化流\n             fileinputstream filein = new fileinputstream("employee.txt");\n             objectinputstream in = new objectinputstream(filein);\n             // 读取一个对象\n             e = (employee) in.readobject();\n             // 释放资源\n             in.close();\n             filein.close();\n        }catch(ioexception i) {\n             // 捕获其他异常\n             i.printstacktrace();\n             return;\n        }catch(classnotfoundexception c)  {\n        \t// 捕获类找不到异常\n             system.out.println("employee class not found");\n             c.printstacktrace();\n             return;\n        }\n        // 无异常,直接打印输出\n        system.out.println("name: " + e.name);\t// zhangsan\n        system.out.println("address: " + e.address); // beiqinglu\n        system.out.println("age: " + e.age); // 0\n    }\n}\n\n\n对于jvm可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 classnotfoundexception 异常。\n\n\n# 反序列化操作2\n\n**另外，当jvm反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个invalidclassexception异常。**发生这个异常的原因如下：\n\n * 该类的序列版本号与从流中读取的类描述符的版本号不匹配\n * 该类包含未知数据类型\n * 该类没有可访问的无参数构造方法\n\nserializable 接口给需要序列化的类，提供了一个序列版本号。serialversionuid 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。\n\npublic class employee implements java.io.serializable {\n     // 加入序列版本号\n     private static final long serialversionuid = 1l;\n     public string name;\n     public string address;\n     // 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.\n     public int eid; \n\n     public void addresscheck() {\n         system.out.println("address  check : " + name + " -- " + address);\n     }\n}\n\n\n\n# 3.4 练习：序列化集合\n\n 1. 将存有多个自定义对象的集合序列化操作，保存到list.txt文件中。\n 2. 反序列化list.txt ，并遍历集合，打印对象信息。\n\n\n# 案例分析\n\n 1. 把若干学生对象 ，保存到集合中。\n 2. 把集合序列化。\n 3. 反序列化读取时，只需要读取一次，转换为集合类型。\n 4. 遍历集合，可以打印所有的学生信息\n\n\n# 案例实现\n\npublic class sertest {\n\tpublic static void main(string[] args) throws exception {\n\t\t// 创建 学生对象\n\t\tstudent student = new student("老王", "laow");\n\t\tstudent student2 = new student("老张", "laoz");\n\t\tstudent student3 = new student("老李", "laol");\n\n\t\tarraylist<student> arraylist = new arraylist<>();\n\t\tarraylist.add(student);\n\t\tarraylist.add(student2);\n\t\tarraylist.add(student3);\n\t\t// 序列化操作\n\t\t// serializ(arraylist);\n\t\t\n\t\t// 反序列化  \n\t\tobjectinputstream ois  = new objectinputstream(new fileinputstream("list.txt"));\n\t\t// 读取对象,强转为arraylist类型\n\t\tarraylist<student> list  = (arraylist<student>)ois.readobject();\n\t\t\n      \tfor (int i = 0; i < list.size(); i++ ){\n          \tstudent s = list.get(i);\n        \tsystem.out.println(s.getname()+"--"+ s.getpwd());\n      \t}\n\t}\n\n\tprivate static void serializ(arraylist<student> arraylist) throws exception {\n\t\t// 创建 序列化流 \n\t\tobjectoutputstream oos = new objectoutputstream(new fileoutputstream("list.txt"));\n\t\t// 写出对象\n\t\toos.writeobject(arraylist);\n\t\t// 释放资源\n\t\toos.close();\n\t}\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"工具包",frontmatter:{title:"工具包",autoSort:1e3},regularPath:"/zs-se/io/%E5%B7%A5%E5%85%B7%E5%8C%85.html",relativePath:"zs-se/io/工具包.md",key:"v-49aea67d",path:"/zs-se/io/%E5%B7%A5%E5%85%B7%E5%8C%85.html",lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:null,content:'# 6. 工具包（Commons-io）\n\n\n\n\n\n\n\n介绍：\n\nCommons是apache开源基金组织提供的工具包，里面有很多帮助我们提高开发效率的API\n\n\n比如：\n\nStringUtils   字符串工具类\n\nNumberUtils   数字工具类 \n\nArrayUtils   数组工具类  \n\nRandomUtils   随机数工具类\n\nDateUtils   日期工具类 \n\nStopWatch   秒表工具类 \n\nClassUtils   反射工具类  \n\nSystemUtils   系统工具类  \n\nMapUtils   集合工具类\n\nBeanutils   bean工具类\n\nCommons-io io的工具类\n\n等等.....\n\n\n其中：Commons-io是apache开源基金组织提供的一组有关IO操作的开源工具包。\n\n作用：提高IO流的开发效率。\n\n使用方式：\n\n1，新建lib文件夹\n\n2，把第三方jar包粘贴到文件夹中\n\n3，右键点击add as a library\n\n代码示例：\n\npublic class CommonsIODemo1 {\n    public static void main(String[] args) throws IOException {\n        /*\n          FileUtils类\n                static void copyFile(File srcFile, File destFile)                   复制文件\n                static void copyDirectory(File srcDir, File destDir)                复制文件夹\n                static void copyDirectoryToDirectory(File srcDir, File destDir)     复制文件夹\n                static void deleteDirectory(File directory)                         删除文件夹\n                static void cleanDirectory(File directory)                          清空文件夹\n                static String readFileToString(File file, Charset encoding)         读取文件中的数据变成成字符串\n                static void write(File file, CharSequence data, String encoding)    写出数据\n\n            IOUtils类\n                public static int copy(InputStream input, OutputStream output)      复制文件\n                public static int copyLarge(Reader input, Writer output)            复制大文件\n                public static String readLines(Reader input)                        读取数据\n                public static void write(String data, OutputStream output)          写出数据\n         */\n\n\n        /* File src = new File("myio\\\\a.txt");\n        File dest = new File("myio\\\\copy.txt");\n        FileUtils.copyFile(src,dest);*/\n\n\n        /*File src = new File("D:\\\\aaa");\n        File dest = new File("D:\\\\bbb");\n        FileUtils.copyDirectoryToDirectory(src,dest);*/\n\n        /*File src = new File("D:\\\\bbb");\n        FileUtils.cleanDirectory(src);*/\n\n\n\n    }\n}\n\n\n\n\n# 7. 工具包（hutool）\n\n介绍：\n\nCommons是国人开发的开源工具包，里面有很多帮助我们提高开发效率的API\n\n\n比如：\n\nDateUtil  日期时间工具类 \n\nTimeInterval  计时器工具类 \n\nStrUtil  字符串工具类\n\nHexUtil   16进制工具类\n\nHashUtil   Hash算法类\n\nObjectUtil  对象工具类\n\nReflectUtil   反射工具类\n\nTypeUtil  泛型类型工具类\n\nPageUtil  分页工具类\n\nNumberUtil  数字工具类\n\n\n使用方式：\n\n1，新建lib文件夹\n\n2，把第三方jar包粘贴到文件夹中\n\n3，右键点击add as a library\n\n代码示例：\n\npublic class Test1 {\n    public static void main(String[] args) {\n    /*\n        FileUtil类:\n                file：根据参数创建一个file对象\n                touch：根据参数创建文件\n\n                writeLines：把集合中的数据写出到文件中，覆盖模式。\n                appendLines：把集合中的数据写出到文件中，续写模式。\n                readLines：指定字符编码，把文件中的数据，读到集合中。\n                readUtf8Lines：按照UTF-8的形式，把文件中的数据，读到集合中\n\n                copy：拷贝文件或者文件夹\n    */\n\n\n       /* File file1 = FileUtil.file("D:\\\\", "aaa", "bbb", "a.txt");\n        System.out.println(file1);//D:\\aaa\\bbb\\a.txt\n\n        File touch = FileUtil.touch(file1);\n        System.out.println(touch);\n\n\n        ArrayList<String> list = new ArrayList<>();\n        list.add("aaa");\n        list.add("aaa");\n        list.add("aaa");\n\n        File file2 = FileUtil.writeLines(list, "D:\\\\a.txt", "UTF-8");\n        System.out.println(file2);*/\n\n      /*  ArrayList<String> list = new ArrayList<>();\n        list.add("aaa");\n        list.add("aaa");\n        list.add("aaa");\n        File file3 = FileUtil.appendLines(list, "D:\\\\a.txt", "UTF-8");\n        System.out.println(file3);*/\n        List<String> list = FileUtil.readLines("D:\\\\a.txt", "UTF-8");\n        System.out.println(list);\n    }\n}\n',normalizedContent:'# 6. 工具包（commons-io）\n\n\n\n\n\n\n\n介绍：\n\ncommons是apache开源基金组织提供的工具包，里面有很多帮助我们提高开发效率的api\n\n\n比如：\n\nstringutils   字符串工具类\n\nnumberutils   数字工具类 \n\narrayutils   数组工具类  \n\nrandomutils   随机数工具类\n\ndateutils   日期工具类 \n\nstopwatch   秒表工具类 \n\nclassutils   反射工具类  \n\nsystemutils   系统工具类  \n\nmaputils   集合工具类\n\nbeanutils   bean工具类\n\ncommons-io io的工具类\n\n等等.....\n\n\n其中：commons-io是apache开源基金组织提供的一组有关io操作的开源工具包。\n\n作用：提高io流的开发效率。\n\n使用方式：\n\n1，新建lib文件夹\n\n2，把第三方jar包粘贴到文件夹中\n\n3，右键点击add as a library\n\n代码示例：\n\npublic class commonsiodemo1 {\n    public static void main(string[] args) throws ioexception {\n        /*\n          fileutils类\n                static void copyfile(file srcfile, file destfile)                   复制文件\n                static void copydirectory(file srcdir, file destdir)                复制文件夹\n                static void copydirectorytodirectory(file srcdir, file destdir)     复制文件夹\n                static void deletedirectory(file directory)                         删除文件夹\n                static void cleandirectory(file directory)                          清空文件夹\n                static string readfiletostring(file file, charset encoding)         读取文件中的数据变成成字符串\n                static void write(file file, charsequence data, string encoding)    写出数据\n\n            ioutils类\n                public static int copy(inputstream input, outputstream output)      复制文件\n                public static int copylarge(reader input, writer output)            复制大文件\n                public static string readlines(reader input)                        读取数据\n                public static void write(string data, outputstream output)          写出数据\n         */\n\n\n        /* file src = new file("myio\\\\a.txt");\n        file dest = new file("myio\\\\copy.txt");\n        fileutils.copyfile(src,dest);*/\n\n\n        /*file src = new file("d:\\\\aaa");\n        file dest = new file("d:\\\\bbb");\n        fileutils.copydirectorytodirectory(src,dest);*/\n\n        /*file src = new file("d:\\\\bbb");\n        fileutils.cleandirectory(src);*/\n\n\n\n    }\n}\n\n\n\n\n# 7. 工具包（hutool）\n\n介绍：\n\ncommons是国人开发的开源工具包，里面有很多帮助我们提高开发效率的api\n\n\n比如：\n\ndateutil  日期时间工具类 \n\ntimeinterval  计时器工具类 \n\nstrutil  字符串工具类\n\nhexutil   16进制工具类\n\nhashutil   hash算法类\n\nobjectutil  对象工具类\n\nreflectutil   反射工具类\n\ntypeutil  泛型类型工具类\n\npageutil  分页工具类\n\nnumberutil  数字工具类\n\n\n使用方式：\n\n1，新建lib文件夹\n\n2，把第三方jar包粘贴到文件夹中\n\n3，右键点击add as a library\n\n代码示例：\n\npublic class test1 {\n    public static void main(string[] args) {\n    /*\n        fileutil类:\n                file：根据参数创建一个file对象\n                touch：根据参数创建文件\n\n                writelines：把集合中的数据写出到文件中，覆盖模式。\n                appendlines：把集合中的数据写出到文件中，续写模式。\n                readlines：指定字符编码，把文件中的数据，读到集合中。\n                readutf8lines：按照utf-8的形式，把文件中的数据，读到集合中\n\n                copy：拷贝文件或者文件夹\n    */\n\n\n       /* file file1 = fileutil.file("d:\\\\", "aaa", "bbb", "a.txt");\n        system.out.println(file1);//d:\\aaa\\bbb\\a.txt\n\n        file touch = fileutil.touch(file1);\n        system.out.println(touch);\n\n\n        arraylist<string> list = new arraylist<>();\n        list.add("aaa");\n        list.add("aaa");\n        list.add("aaa");\n\n        file file2 = fileutil.writelines(list, "d:\\\\a.txt", "utf-8");\n        system.out.println(file2);*/\n\n      /*  arraylist<string> list = new arraylist<>();\n        list.add("aaa");\n        list.add("aaa");\n        list.add("aaa");\n        file file3 = fileutil.appendlines(list, "d:\\\\a.txt", "utf-8");\n        system.out.println(file3);*/\n        list<string> list = fileutil.readlines("d:\\\\a.txt", "utf-8");\n        system.out.println(list);\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"commons-io整理的文档",frontmatter:{title:"commons-io整理的文档","autoGroup-1":"经典白学"},regularPath:"/zs-se/io/commons-io%E6%95%B4%E7%90%86%E7%9A%84%E6%96%87%E6%A1%A3.html",relativePath:"zs-se/io/commons-io整理的文档.md",key:"v-40755a2d",path:"/zs-se/io/commons-io%E6%95%B4%E7%90%86%E7%9A%84%E6%96%87%E6%A1%A3.html",headers:[{level:3,title:"拷贝方法：",slug:"拷贝方法",normalizedTitle:"拷贝方法：",charIndex:22},{level:3,title:"拷贝大文件的方法：",slug:"拷贝大文件的方法",normalizedTitle:"拷贝大文件的方法：",charIndex:401},{level:3,title:"将输入流转换成字符串",slug:"将输入流转换成字符串",normalizedTitle:"将输入流转换成字符串",charIndex:588},{level:3,title:"将输入流转换成字符数组",slug:"将输入流转换成字符数组",normalizedTitle:"将输入流转换成字符数组",charIndex:883},{level:3,title:"字符串读写",slug:"字符串读写",normalizedTitle:"字符串读写",charIndex:1147},{level:3,title:"从一个流中读取内容",slug:"从一个流中读取内容",normalizedTitle:"从一个流中读取内容",charIndex:1573},{level:3,title:"把数据写入到输出流中",slug:"把数据写入到输出流中",normalizedTitle:"把数据写入到输出流中",charIndex:1816},{level:3,title:"从一个流中读取内容，如果读取的长度不够，就会抛出异常",slug:"从一个流中读取内容-如果读取的长度不够-就会抛出异常",normalizedTitle:"从一个流中读取内容，如果读取的长度不够，就会抛出异常",charIndex:2271},{level:3,title:"比较",slug:"比较",normalizedTitle:"比较",charIndex:2601},{level:3,title:"其他方法",slug:"其他方法",normalizedTitle:"其他方法",charIndex:2816},{level:3,title:"复制文件夹",slug:"复制文件夹",normalizedTitle:"复制文件夹",charIndex:3074},{level:3,title:"复制文件",slug:"复制文件",normalizedTitle:"复制文件",charIndex:3074},{level:3,title:"把字符串写入文件",slug:"把字符串写入文件",normalizedTitle:"把字符串写入文件",charIndex:3816},{level:3,title:"把字节数组写入文件",slug:"把字节数组写入文件",normalizedTitle:"把字节数组写入文件",charIndex:3985},{level:3,title:"把集合里面的内容写入文件",slug:"把集合里面的内容写入文件",normalizedTitle:"把集合里面的内容写入文件",charIndex:4289},{level:3,title:"往文件里面写内容",slug:"往文件里面写内容",normalizedTitle:"往文件里面写内容",charIndex:4983},{level:3,title:"文件移动",slug:"文件移动",normalizedTitle:"文件移动",charIndex:5288},{level:3,title:"清空和删除文件夹",slug:"清空和删除文件夹",normalizedTitle:"清空和删除文件夹",charIndex:5727},{level:3,title:"创建文件夹",slug:"创建文件夹",normalizedTitle:"创建文件夹",charIndex:5965},{level:3,title:"获取文件输入/输出流",slug:"获取文件输入-输出流",normalizedTitle:"获取文件输入/输出流",charIndex:6083},{level:3,title:"读取文件",slug:"读取文件",normalizedTitle:"读取文件",charIndex:6175},{level:3,title:"测试两个文件的修改时间",slug:"测试两个文件的修改时间",normalizedTitle:"测试两个文件的修改时间",charIndex:6482},{level:3,title:"文件/文件夹的迭代",slug:"文件-文件夹的迭代",normalizedTitle:"文件/文件夹的迭代",charIndex:6794},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:2816}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"拷贝方法： 拷贝大文件的方法： 将输入流转换成字符串 将输入流转换成字符数组 字符串读写 从一个流中读取内容 把数据写入到输出流中 从一个流中读取内容，如果读取的长度不够，就会抛出异常 比较 其他方法 复制文件夹 复制文件 把字符串写入文件 把字节数组写入文件 把集合里面的内容写入文件 往文件里面写内容 文件移动 清空和删除文件夹 创建文件夹 获取文件输入/输出流 读取文件 测试两个文件的修改时间 文件/文件夹的迭代 其他",content:"# 1，IOUtils（数据相关）\n\n\n# 拷贝方法：\n\ncopy方法有多个重载方法，满足不同的输入输出流\n\nIOUtils.copy(InputStream input, OutputStream output)\n\nIOUtils.copy(InputStream input, OutputStream output, int bufferSize)//可指定缓冲区大小\n\nIOUtils.copy(InputStream input, Writer output, String inputEncoding)//可指定输入流的编码表\n\nIOUtils.copy(Reader input, Writer output)\n\nIOUtils.copy(Reader input, OutputStream output, String outputEncoding)//可指定输出流的编码表\n\n\n# 拷贝大文件的方法：\n\n// 这个方法适合拷贝较大的数据流，比如2G以上\n\nIOUtils.copyLarge(Reader input, Writer output) // 默认会用1024*4的buffer来读取\n\nIOUtils.copyLarge(Reader input, Writer output, char[] buffer)//可指定缓冲区大小\n\n\n\n\n# 将输入流转换成字符串\n\nIOUtils.toString(Reader input)\n\nIOUtils.toString(byte[] input, String encoding)\n\nIOUtils.toString(InputStream input, Charset encoding)\n\nIOUtils.toString(InputStream input, String encoding)\n\nIOUtils.toString(URI uri, String encoding)\n\nIOUtils.toString(URL url, String encoding)\n\n\n\n\n# 将输入流转换成字符数组\n\nIOUtils.toByteArray(InputStream input)\n\nIOUtils.toByteArray(InputStream input, int size)\n\nIOUtils.toByteArray(URI uri)\n\nIOUtils.toByteArray(URL url)\n\nIOUtils.toByteArray(URLConnection urlConn)\n\nIOUtils.toByteArray(Reader input, String encoding)\n\n\n\n\n# 字符串读写\n\nIOUtils.readLines(Reader input)\n\nIOUtils.readLines(InputStream input, Charset encoding)\n\nIOUtils.readLines(InputStream input, String encoding)\n\nIOUtils.writeLines(Collection<?> lines, String lineEnding, Writer writer)\n\nIOUtils.writeLines(Collection<?> lines, String lineEnding, OutputStream output, Charset encoding)\n\nIOUtils.writeLines(Collection<?> lines, String lineEnding, OutputStream output, String encoding)\n\n\n# 从一个流中读取内容\n\nIOUtils.read(InputStream input, byte[] buffer)\n\nIOUtils.read(InputStream input, byte[] buffer, int offset, int length) IOUtils.read(Reader input, char[] buffer)\n\nIOUtils.read(Reader input, char[] buffer, int offset, int length)\n\n\n# 把数据写入到输出流中\n\nIOUtils.write(byte[] data, OutputStream output)\n\nIOUtils.write(byte[] data, Writer output, Charset encoding)\n\nIOUtils.write(byte[] data, Writer output, String encoding)\n\nIOUtils.write(char[] data, Writer output)\n\nIOUtils.write(char[] data, OutputStream output, Charset encoding)\n\nIOUtils.write(char[] data, OutputStream output, String encoding)\n\nIOUtils.write(String data, Writer output)\n\nIOUtils.write(CharSequence data, Writer output)\n\n\n\n\n# 从一个流中读取内容，如果读取的长度不够，就会抛出异常\n\nIOUtils.readFully(InputStream input, int length)\n\nIOUtils.readFully(InputStream input, byte[] buffer)\n\nIOUtils.readFully(InputStream input, byte[] buffer, int offset, int length) IOUtils.readFully(Reader input, char[] buffer)\n\nIOUtils.readFully(Reader input, char[] buffer, int offset, int length)\n\n\n# 比较\n\nIOUtils.contentEquals(InputStream input1, InputStream input2) // 比较两个流是否相等\n\nIOUtils.contentEquals(Reader input1, Reader input2)\n\nIOUtils.contentEqualsIgnoreEOL(Reader input1, Reader input2) // 比较两个流，忽略换行符\n\n\n\n\n# 其他方法\n\nIOUtils.skip(InputStream input, long toSkip) // 跳过指定长度的流\n\nIOUtils.skip(Reader input, long toSkip)\n\nIOUtils.skipFully(InputStream input, long toSkip) // 如果忽略的长度大于现有的长度，就会抛出异常\n\nIOUtils.skipFully(Reader input, long toSkip)\n\n\n\n\n# 2，FileUtils（文件/文件夹相关）\n\n\n# 复制文件夹\n\nFileUtils.copyDirectory(File srcDir, File destDir) // 复制文件夹（文件夹里面的文件内容也会复制）\n\nFileUtils.copyDirectory(File srcDir, File destDir, FileFilter filter) // 复制文件夹，带有文件过滤功能\n\nFileUtils.copyDirectoryToDirectory(File srcDir, File destDir) // 以子目录的形式将文件夹复制到到另一个文件夹下\n\n\n\n\n# 复制文件\n\nFileUtils.copyFile(File srcFile, File destFile) // 复制文件\n\nFileUtils.copyFile(File input, OutputStream output) // 复制文件到输出流\n\nFileUtils.copyFileToDirectory(File srcFile, File destDir) // 复制文件到一个指定的目录\n\nFileUtils.copyInputStreamToFile(InputStream source, File destination) // 把输入流里面的内容复制到指定文件\n\nFileUtils.copyURLToFile(URL source, File destination) // 把URL 里面内容复制到文件(可以下载文件)\n\nFileUtils.copyURLToFile(URL source, File destination, int connectionTimeout, int readTimeout)\n\n\n\n\n# 把字符串写入文件\n\nFileUtils.writeStringToFile(File file, String data, String encoding)\n\nFileUtils.writeStringToFile(File file, String data, String encoding, boolean append)\n\n\n# 把字节数组写入文件\n\nFileUtils.writeByteArrayToFile(File file, byte[] data)\n\nFileUtils.writeByteArrayToFile(File file, byte[] data, boolean append) FileUtils.writeByteArrayToFile(File file, byte[] data, int off, int len) FileUtils.writeByteArrayToFile(File file, byte[] data, int off, int len, boolean append)\n\n\n# 把集合里面的内容写入文件\n\n// encoding：文件编码，lineEnding：每行以什么结尾\n\nFileUtils.writeLines(File file, Collection<?> lines)\n\nFileUtils.writeLines(File file, Collection<?> lines, boolean append)\n\nFileUtils.writeLines(File file, Collection<?> lines, String lineEnding)\n\nFileUtils.writeLines(File file, Collection<?> lines, String lineEnding, boolean append)\n\nFileUtils.writeLines(File file, String encoding, Collection<?> lines)\n\nFileUtils.writeLines(File file, String encoding, Collection<?> lines, boolean append)\n\nFileUtils.writeLines(File file, String encoding, Collection<?> lines, String lineEnding)\n\nFileUtils.writeLines(File file, String encoding, Collection<?> lines, String lineEnding, boolean append)\n\n\n# 往文件里面写内容\n\nFileUtils.write(File file, CharSequence data, Charset encoding)\n\nFileUtils.write(File file, CharSequence data, Charset encoding, boolean append)\n\nFileUtils.write(File file, CharSequence data, String encoding)\n\nFileUtils.write(File file, CharSequence data, String encoding, boolean append)\n\n\n\n\n# 文件移动\n\nFileUtils.moveDirectory(File srcDir, File destDir) // 文件夹在内的所有文件都将移动FileUtils.moveDirectoryToDirectory(File src, File destDir, boolean createDestDir) // 以子文件夹的形式移动到另外一个文件下\n\nFileUtils.moveFile(File srcFile, File destFile) // 移动文件\n\nFileUtils.moveFileToDirectory(File srcFile, File destDir, boolean createDestDir) // 以子文件的形式移动到另外一个文件夹下\n\nFileUtils.moveToDirectory(File src, File destDir, boolean createDestDir) // 移动文件或者目录到指定的文件夹内\n\n\n\n\n# 清空和删除文件夹\n\nFileUtils.deleteDirectory(File directory) // 删除文件夹，包括文件夹和文件夹里面所有的文件\n\nFileUtils.cleanDirectory(File directory) // 清空文件夹里面的所有的内容\n\nFileUtils.forceDelete(File file) // 删除，会抛出异常\n\nFileUtils.deleteQuietly(File file) // 删除，不会抛出异常\n\n\n\n\n# 创建文件夹\n\nFileUtils.forceMkdir(File directory) // 创建文件夹(可创建多级)\n\nFileUtils.forceMkdirParent(File file) // 创建文件的父级目录\n\n\n\n\n# 获取文件输入/输出流\n\nFileUtils.openInputStream(File file)\n\nFileUtils.openOutputStream(File file)\n\n\n# 读取文件\n\nFileUtils.readFileToByteArray(File file) // 把文件读取到字节数组\n\nFileUtils.readFileToString(File file, Charset encoding) // 把文件读取成字符串\n\nFileUtils.readFileToString(File file, String encoding)\n\nFileUtils.readLines(File file, Charset encoding) // 把文件读取成字符串集合\n\nFileUtils.readLines(File file, String encoding)\n\n\n\n\n# 测试两个文件的修改时间\n\nFileUtils.isFileNewer(File file, Date date)\n\nFileUtils.isFileNewer(File file, File reference)\n\nFileUtils.isFileNewer(File file, long timeMillis)\n\nFileUtils.isFileOlder(File file, Date date)\n\nFileUtils.isFileOlder(File file, File reference)\n\nFileUtils.isFileOlder(File file, long timeMillis)\n\n\n\n\n\n\n# 文件/文件夹的迭代\n\nFileUtils.iterateFiles(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)\n\nFileUtils.iterateFiles(File directory, String[] extensions, boolean recursive)\n\nFileUtils.iterateFilesAndDirs(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)\n\nFileUtils.lineIterator(File file)\n\nFileUtils.lineIterator(File file, String encoding)\n\n\n\nFileUtils.listFiles(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)\n\nFileUtils.listFiles(File directory, String[] extensions, boolean recursive)\n\nFileUtils.listFilesAndDirs(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter)\n\n\n\n\n# 其他\n\nFileUtils.isSymlink(File file) // 判断是否是符号链接\n\nFileUtils.directoryContains(File directory, File child) // 判断文件夹内是否包含某个文件或者文件夹\n\nFileUtils.sizeOf(File file) // 获取文件或者文件夹的大小\n\nFileUtils.getTempDirectory()// 获取临时目录文件\n\nFileUtils.getTempDirectoryPath()// 获取临时目录路径\n\nFileUtils.getUserDirectory()// 获取用户目录文件\n\nFileUtils.getUserDirectoryPath()// 获取用户目录路径\n\nFileUtils.touch(File file) // 创建文件\n\nFileUtils.contentEquals(File file1, File file2) // 比较两个文件内容是否相同\n\n\n# FilenameUtils（文件名/后缀名相关）\n\nFilenameUtils.concat(String basePath, String fullFilenameToAdd) // 合并目录和文件名为文件全路径\n\nFilenameUtils.getBaseName(String filename) // 去除目录和后缀后的文件名\n\nFilenameUtils.getExtension(String filename) // 获取文件的后缀\n\nFilenameUtils.getFullPath(String filename) // 获取文件的目录\n\nFilenameUtils.getName(String filename) // 获取文件名\n\nFilenameUtils.getPath(String filename) // 去除盘符后的路径\n\nFilenameUtils.getPrefix(String filename) // 盘符\n\nFilenameUtils.indexOfExtension(String filename) // 获取最后一个.的位置\n\nFilenameUtils.indexOfLastSeparator(String filename) // 获取最后一个/的位置\n\nFilenameUtils.normalize(String filename) // 获取当前系统格式化路径\n\nFilenameUtils.removeExtension(String filename) // 移除文件的扩展名\n\nFilenameUtils.separatorsToSystem(String path) // 转换分隔符为当前系统分隔符\n\nFilenameUtils.separatorsToUnix(String path) // 转换分隔符为linux系统分隔符\n\nFilenameUtils.separatorsToWindows(String path) // 转换分隔符为windows系统分隔符\n\nFilenameUtils.equals(String filename1, String filename2) // 判断文件路径是否相同，非格式化\n\nFilenameUtils.equalsNormalized(String filename1, String filename2) // 判断文件路径是否相同，格式化\n\nFilenameUtils.directoryContains(String canonicalParent, String canonicalChild) // 判断目录下是否包含指定文件或目录\n\nFilenameUtils.isExtension(String filename, String extension) // 判断文件扩展名是否包含在指定集合(数组、字符串)中\n\nFilenameUtils.wildcardMatch(String filename, String wildcardMatcher) // 判断文件扩展名是否和指定规则匹配",normalizedContent:"# 1，ioutils（数据相关）\n\n\n# 拷贝方法：\n\ncopy方法有多个重载方法，满足不同的输入输出流\n\nioutils.copy(inputstream input, outputstream output)\n\nioutils.copy(inputstream input, outputstream output, int buffersize)//可指定缓冲区大小\n\nioutils.copy(inputstream input, writer output, string inputencoding)//可指定输入流的编码表\n\nioutils.copy(reader input, writer output)\n\nioutils.copy(reader input, outputstream output, string outputencoding)//可指定输出流的编码表\n\n\n# 拷贝大文件的方法：\n\n// 这个方法适合拷贝较大的数据流，比如2g以上\n\nioutils.copylarge(reader input, writer output) // 默认会用1024*4的buffer来读取\n\nioutils.copylarge(reader input, writer output, char[] buffer)//可指定缓冲区大小\n\n\n\n\n# 将输入流转换成字符串\n\nioutils.tostring(reader input)\n\nioutils.tostring(byte[] input, string encoding)\n\nioutils.tostring(inputstream input, charset encoding)\n\nioutils.tostring(inputstream input, string encoding)\n\nioutils.tostring(uri uri, string encoding)\n\nioutils.tostring(url url, string encoding)\n\n\n\n\n# 将输入流转换成字符数组\n\nioutils.tobytearray(inputstream input)\n\nioutils.tobytearray(inputstream input, int size)\n\nioutils.tobytearray(uri uri)\n\nioutils.tobytearray(url url)\n\nioutils.tobytearray(urlconnection urlconn)\n\nioutils.tobytearray(reader input, string encoding)\n\n\n\n\n# 字符串读写\n\nioutils.readlines(reader input)\n\nioutils.readlines(inputstream input, charset encoding)\n\nioutils.readlines(inputstream input, string encoding)\n\nioutils.writelines(collection<?> lines, string lineending, writer writer)\n\nioutils.writelines(collection<?> lines, string lineending, outputstream output, charset encoding)\n\nioutils.writelines(collection<?> lines, string lineending, outputstream output, string encoding)\n\n\n# 从一个流中读取内容\n\nioutils.read(inputstream input, byte[] buffer)\n\nioutils.read(inputstream input, byte[] buffer, int offset, int length) ioutils.read(reader input, char[] buffer)\n\nioutils.read(reader input, char[] buffer, int offset, int length)\n\n\n# 把数据写入到输出流中\n\nioutils.write(byte[] data, outputstream output)\n\nioutils.write(byte[] data, writer output, charset encoding)\n\nioutils.write(byte[] data, writer output, string encoding)\n\nioutils.write(char[] data, writer output)\n\nioutils.write(char[] data, outputstream output, charset encoding)\n\nioutils.write(char[] data, outputstream output, string encoding)\n\nioutils.write(string data, writer output)\n\nioutils.write(charsequence data, writer output)\n\n\n\n\n# 从一个流中读取内容，如果读取的长度不够，就会抛出异常\n\nioutils.readfully(inputstream input, int length)\n\nioutils.readfully(inputstream input, byte[] buffer)\n\nioutils.readfully(inputstream input, byte[] buffer, int offset, int length) ioutils.readfully(reader input, char[] buffer)\n\nioutils.readfully(reader input, char[] buffer, int offset, int length)\n\n\n# 比较\n\nioutils.contentequals(inputstream input1, inputstream input2) // 比较两个流是否相等\n\nioutils.contentequals(reader input1, reader input2)\n\nioutils.contentequalsignoreeol(reader input1, reader input2) // 比较两个流，忽略换行符\n\n\n\n\n# 其他方法\n\nioutils.skip(inputstream input, long toskip) // 跳过指定长度的流\n\nioutils.skip(reader input, long toskip)\n\nioutils.skipfully(inputstream input, long toskip) // 如果忽略的长度大于现有的长度，就会抛出异常\n\nioutils.skipfully(reader input, long toskip)\n\n\n\n\n# 2，fileutils（文件/文件夹相关）\n\n\n# 复制文件夹\n\nfileutils.copydirectory(file srcdir, file destdir) // 复制文件夹（文件夹里面的文件内容也会复制）\n\nfileutils.copydirectory(file srcdir, file destdir, filefilter filter) // 复制文件夹，带有文件过滤功能\n\nfileutils.copydirectorytodirectory(file srcdir, file destdir) // 以子目录的形式将文件夹复制到到另一个文件夹下\n\n\n\n\n# 复制文件\n\nfileutils.copyfile(file srcfile, file destfile) // 复制文件\n\nfileutils.copyfile(file input, outputstream output) // 复制文件到输出流\n\nfileutils.copyfiletodirectory(file srcfile, file destdir) // 复制文件到一个指定的目录\n\nfileutils.copyinputstreamtofile(inputstream source, file destination) // 把输入流里面的内容复制到指定文件\n\nfileutils.copyurltofile(url source, file destination) // 把url 里面内容复制到文件(可以下载文件)\n\nfileutils.copyurltofile(url source, file destination, int connectiontimeout, int readtimeout)\n\n\n\n\n# 把字符串写入文件\n\nfileutils.writestringtofile(file file, string data, string encoding)\n\nfileutils.writestringtofile(file file, string data, string encoding, boolean append)\n\n\n# 把字节数组写入文件\n\nfileutils.writebytearraytofile(file file, byte[] data)\n\nfileutils.writebytearraytofile(file file, byte[] data, boolean append) fileutils.writebytearraytofile(file file, byte[] data, int off, int len) fileutils.writebytearraytofile(file file, byte[] data, int off, int len, boolean append)\n\n\n# 把集合里面的内容写入文件\n\n// encoding：文件编码，lineending：每行以什么结尾\n\nfileutils.writelines(file file, collection<?> lines)\n\nfileutils.writelines(file file, collection<?> lines, boolean append)\n\nfileutils.writelines(file file, collection<?> lines, string lineending)\n\nfileutils.writelines(file file, collection<?> lines, string lineending, boolean append)\n\nfileutils.writelines(file file, string encoding, collection<?> lines)\n\nfileutils.writelines(file file, string encoding, collection<?> lines, boolean append)\n\nfileutils.writelines(file file, string encoding, collection<?> lines, string lineending)\n\nfileutils.writelines(file file, string encoding, collection<?> lines, string lineending, boolean append)\n\n\n# 往文件里面写内容\n\nfileutils.write(file file, charsequence data, charset encoding)\n\nfileutils.write(file file, charsequence data, charset encoding, boolean append)\n\nfileutils.write(file file, charsequence data, string encoding)\n\nfileutils.write(file file, charsequence data, string encoding, boolean append)\n\n\n\n\n# 文件移动\n\nfileutils.movedirectory(file srcdir, file destdir) // 文件夹在内的所有文件都将移动fileutils.movedirectorytodirectory(file src, file destdir, boolean createdestdir) // 以子文件夹的形式移动到另外一个文件下\n\nfileutils.movefile(file srcfile, file destfile) // 移动文件\n\nfileutils.movefiletodirectory(file srcfile, file destdir, boolean createdestdir) // 以子文件的形式移动到另外一个文件夹下\n\nfileutils.movetodirectory(file src, file destdir, boolean createdestdir) // 移动文件或者目录到指定的文件夹内\n\n\n\n\n# 清空和删除文件夹\n\nfileutils.deletedirectory(file directory) // 删除文件夹，包括文件夹和文件夹里面所有的文件\n\nfileutils.cleandirectory(file directory) // 清空文件夹里面的所有的内容\n\nfileutils.forcedelete(file file) // 删除，会抛出异常\n\nfileutils.deletequietly(file file) // 删除，不会抛出异常\n\n\n\n\n# 创建文件夹\n\nfileutils.forcemkdir(file directory) // 创建文件夹(可创建多级)\n\nfileutils.forcemkdirparent(file file) // 创建文件的父级目录\n\n\n\n\n# 获取文件输入/输出流\n\nfileutils.openinputstream(file file)\n\nfileutils.openoutputstream(file file)\n\n\n# 读取文件\n\nfileutils.readfiletobytearray(file file) // 把文件读取到字节数组\n\nfileutils.readfiletostring(file file, charset encoding) // 把文件读取成字符串\n\nfileutils.readfiletostring(file file, string encoding)\n\nfileutils.readlines(file file, charset encoding) // 把文件读取成字符串集合\n\nfileutils.readlines(file file, string encoding)\n\n\n\n\n# 测试两个文件的修改时间\n\nfileutils.isfilenewer(file file, date date)\n\nfileutils.isfilenewer(file file, file reference)\n\nfileutils.isfilenewer(file file, long timemillis)\n\nfileutils.isfileolder(file file, date date)\n\nfileutils.isfileolder(file file, file reference)\n\nfileutils.isfileolder(file file, long timemillis)\n\n\n\n\n\n\n# 文件/文件夹的迭代\n\nfileutils.iteratefiles(file directory, iofilefilter filefilter, iofilefilter dirfilter)\n\nfileutils.iteratefiles(file directory, string[] extensions, boolean recursive)\n\nfileutils.iteratefilesanddirs(file directory, iofilefilter filefilter, iofilefilter dirfilter)\n\nfileutils.lineiterator(file file)\n\nfileutils.lineiterator(file file, string encoding)\n\n\n\nfileutils.listfiles(file directory, iofilefilter filefilter, iofilefilter dirfilter)\n\nfileutils.listfiles(file directory, string[] extensions, boolean recursive)\n\nfileutils.listfilesanddirs(file directory, iofilefilter filefilter, iofilefilter dirfilter)\n\n\n\n\n# 其他\n\nfileutils.issymlink(file file) // 判断是否是符号链接\n\nfileutils.directorycontains(file directory, file child) // 判断文件夹内是否包含某个文件或者文件夹\n\nfileutils.sizeof(file file) // 获取文件或者文件夹的大小\n\nfileutils.gettempdirectory()// 获取临时目录文件\n\nfileutils.gettempdirectorypath()// 获取临时目录路径\n\nfileutils.getuserdirectory()// 获取用户目录文件\n\nfileutils.getuserdirectorypath()// 获取用户目录路径\n\nfileutils.touch(file file) // 创建文件\n\nfileutils.contentequals(file file1, file file2) // 比较两个文件内容是否相同\n\n\n# filenameutils（文件名/后缀名相关）\n\nfilenameutils.concat(string basepath, string fullfilenametoadd) // 合并目录和文件名为文件全路径\n\nfilenameutils.getbasename(string filename) // 去除目录和后缀后的文件名\n\nfilenameutils.getextension(string filename) // 获取文件的后缀\n\nfilenameutils.getfullpath(string filename) // 获取文件的目录\n\nfilenameutils.getname(string filename) // 获取文件名\n\nfilenameutils.getpath(string filename) // 去除盘符后的路径\n\nfilenameutils.getprefix(string filename) // 盘符\n\nfilenameutils.indexofextension(string filename) // 获取最后一个.的位置\n\nfilenameutils.indexoflastseparator(string filename) // 获取最后一个/的位置\n\nfilenameutils.normalize(string filename) // 获取当前系统格式化路径\n\nfilenameutils.removeextension(string filename) // 移除文件的扩展名\n\nfilenameutils.separatorstosystem(string path) // 转换分隔符为当前系统分隔符\n\nfilenameutils.separatorstounix(string path) // 转换分隔符为linux系统分隔符\n\nfilenameutils.separatorstowindows(string path) // 转换分隔符为windows系统分隔符\n\nfilenameutils.equals(string filename1, string filename2) // 判断文件路径是否相同，非格式化\n\nfilenameutils.equalsnormalized(string filename1, string filename2) // 判断文件路径是否相同，格式化\n\nfilenameutils.directorycontains(string canonicalparent, string canonicalchild) // 判断目录下是否包含指定文件或目录\n\nfilenameutils.isextension(string filename, string extension) // 判断文件扩展名是否包含在指定集合(数组、字符串)中\n\nfilenameutils.wildcardmatch(string filename, string wildcardmatcher) // 判断文件扩展名是否和指定规则匹配",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"JUC--CompletableFuture-01",frontmatter:{},regularPath:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-01.html",relativePath:"zs-se/基础/JUC--CompletableFuture-01.md",key:"v-edd31fdc",path:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-01.html",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:32},{level:2,title:"用作Future",slug:"用作future",normalizedTitle:"用作future",charIndex:6723},{level:2,title:"异步任务",slug:"异步任务",normalizedTitle:"异步任务",charIndex:2216},{level:3,title:"带返回值",slug:"带返回值",normalizedTitle:"带返回值",charIndex:2211},{level:3,title:"不带返回值",slug:"不带返回值",normalizedTitle:"不带返回值",charIndex:2210},{level:2,title:"链式编排",slug:"链式编排",normalizedTitle:"链式编排",charIndex:8517},{level:3,title:"任务A--结果--\x3e任务B_无返回",slug:"任务a-结果-任务b-无返回",normalizedTitle:"任务a--结果--&gt;任务b_无返回",charIndex:null},{level:3,title:"任务A--结果--\x3e任务B_有返回",slug:"任务a-结果-任务b-有返回",normalizedTitle:"任务a--结果--&gt;任务b_有返回",charIndex:null},{level:3,title:"任务A--void--\x3e任务B_void",slug:"任务a-void-任务b-void",normalizedTitle:"任务a--void--&gt;任务b_void",charIndex:null},{level:3,title:"任务A--结果,异常--\x3e主线程",slug:"任务a-结果-异常-主线程",normalizedTitle:"任务a--结果,异常--&gt;主线程",charIndex:null},{level:3,title:"A,B--结果--\x3e处理",slug:"a-b-结果-处理",normalizedTitle:"a,b--结果--&gt;处理",charIndex:null},{level:3,title:"thenApply()和thenCompose()的区别",slug:"thenapply-和thencompose-的区别",normalizedTitle:"thenapply()和thencompose()的区别",charIndex:12138},{level:2,title:"多线程同时执行",slug:"多线程同时执行",normalizedTitle:"多线程同时执行",charIndex:4269},{level:3,title:"方式一_单对象处理",slug:"方式一-单对象处理",normalizedTitle:"方式一_单对象处理",charIndex:12877},{level:3,title:"方式二_集合对象",slug:"方式二-集合对象",normalizedTitle:"方式二_集合对象",charIndex:14150},{level:3,title:"方式三_集合对象",slug:"方式三-集合对象",normalizedTitle:"方式三_集合对象",charIndex:14771},{level:3,title:"方式四_集合对象",slug:"方式四-集合对象",normalizedTitle:"方式四_集合对象",charIndex:15295}],lastUpdated:"2024年1月31日星期三中午11点36分",lastUpdatedTimestamp:1706672187e3,headersStr:"简介 用作Future 异步任务 带返回值 不带返回值 链式编排 任务A--结果--\x3e任务B_无返回 任务A--结果--\x3e任务B_有返回 任务A--void--\x3e任务B_void 任务A--结果,异常--\x3e主线程 A,B--结果--\x3e处理 thenApply()和thenCompose()的区别 多线程同时执行 方式一_单对象处理 方式二_集合对象 方式三_集合对象 方式四_集合对象",content:'# JUC--CompletableFuture-01\n\n\n# 简介\n\n在Java8中，CompletableFuture提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转换和组合 CompletableFuture 的方法。\n\n异步计算很难推理。通常，我们希望将任何计算都视为一系列步骤，但是在异步计算的情况下，以回调表示的动作往往分散在代码中或彼此深深地嵌套在一起。当我们需要处理其中一个步骤中可能发生的错误时，情况变得更加糟糕。Future是Java 5中添加作为异步计算的结果，但它没有任何方法处理计算可能出现的错误。\n\nJava 8引入了CompletableFuture类。除Future接口外，它还实现了CompletionStage接口。该接口为异步计算步骤定义了合同，我们可以将其与其他步骤结合使用。\n\nCompletableFuture类中fluentapi的大多数方法都有另外两个带有异步后缀的变体。这些方法通常用于在另一个线程中运行相应的执行步骤。\n\n没有异步后缀的方法使用调用线程运行下一个执行阶段。相反，不带Executor参数的Async方法使用Executor的公共fork/join池实现运行一个步骤，该实现通过ForkJoinPool.commonPool（）方法访问。最后，带有Executor参数的Async方法使用传递的Executor运行步骤。\n\nCompletableFuture<String> completableFuture  \n  = CompletableFuture.supplyAsync(() -> "Hello");\n\nCompletableFuture<String> future = completableFuture\n  .thenApplyAsync(s -> s + " World");\n\nassertEquals("Hello World", future.get());\n\n\n> 不多哔哔，完整案例\n\npackage com.zs.comple;\n\nimport org.assertj.core.util.Lists;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.stream.Collectors;\n\n/**\n * Create by 张邵\n * 2024/1/30 17:24\n */\n@SpringBootTest\npublic class CompletableFutureTest {\n    private static ExecutorService executorService;\n\n    @Before\n    public void pool() {\n        //CPU密集型（CPU核心数 | CPU核心数+1）\n        //IO密集型（CPU核心数*2）\n        //核心线程数，线程工厂\n        executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), r -> {\n            Thread thread = new Thread(r);\n            thread.setName("thread pool .........");\n            return thread;\n        });\n    }\n\n\n    String getName(String name) {\n        System.out.println("=========" + Thread.currentThread().getName());\n        return name;\n    }\n\n    @Test\n    public void demo() throws ExecutionException, InterruptedException {\n        //TODO 当不传线程池的情况下，会用ForkJoinPool中公共线程池CommonPool(线程池大小是CPU核心数 - 1)\n\n        //TODO 创建不带返回值的异步任务\n        CompletableFuture.runAsync(() -> this.getName("张三"), executorService);\n\n        //TODO 创建带返回值的异步任务\n        CompletableFuture<String> cf1 = CompletableFuture.supplyAsync(() -> this.getName("张三"), executorService);\n        String cfGet = cf1.get();//编译异常\n        String cfJoin = cf1.join();//运行时异常\n\n        //TODO 异步编排的链式写法\n        //TODO 第一个任务完成后，继续执行新任务，且无法返回。\n        // 区别 thenAccept 将使用主线程继续执行, thenAcceptAsync 使用异步线程执行\n        CompletableFuture.supplyAsync(() -> this.getName("张三"))\n                .thenAccept(/*a是第一个线程返回的结果*/(a) -> this.getName("666"))\n                .thenAcceptAsync(/*null*/(a) -> System.out.println(a));\n        CompletableFuture.supplyAsync(() -> this.getName("张三")).thenAcceptAsync(/*a是第一个线程返回的结果*/(a) -> System.out.println("aaa"));\n\n\n        //TODO 第一个任务完成后，继续执行新任务，且可以返回结果。\n        CompletableFuture.supplyAsync(() -> this.getName("张三")).thenApply((a) -> {\n            System.out.println("aaa");\n            return a;\n        });\n        CompletableFuture.supplyAsync(() -> this.getName("张三")).thenApplyAsync((a) -> {\n            System.out.println("aaa");\n            return a;\n        });\n\n        //TODO 第一个任务完成后，继续执行新任务，且可以返回结果。\n        //thenCompose 会再次创建一个CompletableFuture对象\n        CompletableFuture.supplyAsync(() -> this.getName("张三"))\n                .thenCompose(res -> CompletableFuture.supplyAsync(() -> {\n                    this.getName("666");\n                    return res;\n                }));\n\n\n        //TODO 异步任务执行成功后，自动回调（主线程）\n        CompletableFuture.supplyAsync(() -> this.getName("张三")).whenComplete((result, exception) -> System.out.println(result));\n        CompletableFuture.supplyAsync(() -> this.getName("张三")).whenCompleteAsync((result, exception) -> System.out.println(result));\n\n\n        //TODO 两个异步任务同时执行，获取执行结果\n        CompletableFuture.supplyAsync(() -> this.getName("张三"))\n                .thenAcceptBoth(CompletableFuture.supplyAsync(() -> this.getName("李四")),\n                        (resultA, resultB) -> System.out.println(resultA + resultB));\n\n\n        //TODO 方式一：多线程同时执行，及其处理  *****常用\n        CompletableFuture<String> cf3 = CompletableFuture.supplyAsync(() -> this.getName("张三"));\n        CompletableFuture<String> cf4 = CompletableFuture.supplyAsync(() -> this.getName("李四"));\n        CompletableFuture.allOf(cf3, cf4).join();//同时执行\n        String val1 = cf3.get();\n        String val2 = cf4.get();\n\n        //TODO 方式二:集合对象，批量处理 *****常用\n        ArrayList<String> list = Lists.newArrayList("张三", "李四", "王五", "赵六");\n        List<CompletableFuture<String>> completableFutureList = list.stream()\n                //将集合数据转 CompletableFuture对象\n                .map(name -> CompletableFuture.supplyAsync(() -> this.getName(name)))\n                //收集为集合\n                .collect(Collectors.toList());\n        //多任务并发执行\n        CompletableFuture.allOf(completableFutureList.toArray(new CompletableFuture[completableFutureList.size()])).join();//同时执行\n        //获取执行结果,过滤空结果\n        List<String> resultList2 = completableFutureList.stream().map(this::tryGetString).filter(Objects::nonNull).collect(Collectors.toList());\n\n\n        //TODO 方式3 将list转为CompletableFuture<String>[] 数组，收集执行结果\n        //将list列表 ---\x3e转为 CompletableFuture[] 数组\n        CompletableFuture<String>[] completableFutures = list.stream()\n                .map(name -> CompletableFuture.supplyAsync(() -> this.getName(name)))\n                .toArray(CompletableFuture[]::new);\n        //同时执行\n        CompletableFuture.allOf(completableFutures).join();//同时执行\n        //stream获取集合中的结果，过滤空结果，收集为集合\n        List<String> resultList3 = Arrays.stream(completableFutures).map(this::tryGetString).filter(Objects::nonNull).collect(Collectors.toList());\n\n\n        //TODO 方式4: 将list转为CompletableFuture对象，在完成时获取结果存入集合\n        ArrayList<String> resultList = new ArrayList<>();\n        CompletableFuture.allOf(list.stream()\n                .map(name ->\n                        CompletableFuture.supplyAsync(() -> this.getName(name))\n                                .whenCompleteAsync((result, exception) -> {\n                                    resultList.add(result);\n                                })).toArray(CompletableFuture[]::new)).join();\n        System.out.println(resultList);\n    }\n\n    private String tryGetString(CompletableFuture<String> completableFuture) {\n        try {\n            return completableFuture.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n\n\n\n\n# 用作Future\n\n首先，CompletableFuture类实现了Future接口，因此我们可以将其用作Future的实现，但需要附加完成逻辑。\n\n例如，我们可以用一个无参数构造函数创建这个类的实例来表示Future的结果，将它分发给使用者，并在将来的某个时候使用complete方法完成它。\n\n使用者可以使用get方法阻塞当前线程，直到提供此结果。\n\n在下面的示例中，我们有一个方法，它创建一个CompletableFuture实例，然后在另一个线程中派生一些计算，并立即返回Future。计算完成后，该方法通过向完整方法提供结果来完成Future：\n\npublic Future<String> calculateAsync() throws InterruptedException {\n    CompletableFuture<String> completableFuture = new CompletableFuture<>();\n\n    Executors.newCachedThreadPool().submit(() -> {\n        Thread.sleep(500);\n        completableFuture.complete("Hello");\n        return null;\n    });\n\n    return completableFuture;\n}\n\n\n我们使用executor api。这种创建和完成CompletableFuture的方法可以与任何并发机制或API（包括原始线程）一起使用。\n\n请注意，calculateAsync方法将返回一个Future的实例。 我们只需调用该方法，接收Future实例，并在准备阻塞结果时对其调用get方法。\n\n还要注意get方法抛出一些已检查的异常，即ExecutionException（封装计算期间发生的异常）和interruptedeexception（表示执行方法的线程被中断的异常）\n\nFuture<String> completableFuture = calculateAsync();\n\n// ... \n\nString result = completableFuture.get();\nassertEquals("Hello", result);\n\n\n如果我们已经知道计算的结果，我们可以使用静态completedFuture方法，并使用一个参数，该参数表示此计算的结果。因此，将来的get方法永远不会阻塞，立即返回此结果，而不是：\n\nFuture<String> completableFuture = \n  CompletableFuture.completedFuture("Hello");\n\n// ...\n\nString result = completableFuture.get();\nassertEquals("Hello", result);\n\n\n\n# 异步任务\n\n静态方法runAsync和supplyAsync允许我们相应地使用Runnable和Supplier函数类型创建一个可完成的未来实例。\n\nRunnable和Supplier都是函数接口，由于新的java8特性，它们允许将实例作为lambda表达式传递。\n\nRunnable接口与线程中使用的旧接口相同，不允许返回值。\n\nSupplier接口是一个通用函数接口，它有一个方法，该方法没有参数，并且返回一个参数化类型的值。\n\n\n# 带返回值\n\n使用Supplier接口\n\n//TODO 创建带返回值的异步任务\nCompletableFuture<String> cf1 = CompletableFuture.supplyAsync(() -> this.getName("张三"), executorService);\nString cfGet = cf1.get();\nString cfJoin = cf1.join();\n\n\n\n# 不带返回值\n\n使用Runnable接口\n\n//TODO 创建不带返回值的异步任务\nCompletableFuture.runAsync(() -> this.getName("张三"), executorService);\n\n\n\n# 链式编排\n\n\n# 任务A--结果--\x3e任务B_无返回\n\n如果我们不需要在Future中返回值，我们可以使用Consumer函数接口的实例。它的单个方法接受一个参数并返回void。\n\nthenAccept方法接收使用者并将计算结果传递给它。最后一个future.get()调用返回Void类型的实例：\n\nCompletableFuture<String> completableFuture\n  = CompletableFuture.supplyAsync(() -> "Hello");\n\nCompletableFuture<Void> future = completableFuture\n  .thenAccept(s -> System.out.println("Computation returned: " + s));\n\nfuture.get();\n\n\n//TODO 第一个任务完成后，继续执行新任务，且无法返回。\n// 区别 thenAccept 将使用主线程继续执行, thenAcceptAsync 使用异步线程执行\nCompletableFuture.supplyAsync(() -> this.getName("张三"))\n    .thenAccept(/*a是第一个线程返回的结果*/(a) -> this.getName("666"))\n    .thenAcceptAsync(/*null*/(a) -> System.out.println(a));\nCompletableFuture.supplyAsync(() -> this.getName("张三")).thenAcceptAsync(/*a是第一个线程返回的结果*/(a) -> System.out.println("aaa"));\n\n\n\n\n# 任务A--结果--\x3e任务B_有返回\n\n//TODO 第一个任务完成后，继续执行新任务，且可以返回结果。\nCompletableFuture.supplyAsync(() -> this.getName("张三")).thenApply((a) -> {\n    System.out.println("aaa");\n    return a;\n});\nCompletableFuture.supplyAsync(() -> this.getName("张三")).thenApplyAsync((a) -> {\n    System.out.println("aaa");\n    return a;\n});\n\n\n//TODO 第一个任务完成后，继续执行新任务，且可以返回结果。\n//thenCompose 会再次创建一个CompletableFuture对象\nCompletableFuture.supplyAsync(() -> this.getName("张三"))\n    .thenCompose(res -> CompletableFuture.supplyAsync(() -> {\n        this.getName("666");\n        return res;\n    }));\n\n\n\n处理计算结果的最通用的方法是将其提供给函数。thenApply方法正是这样做的；它接受一个函数实例，用它来处理结果，并返回一个包含函数返回值的Future：\n\nCompletableFuture<String> completableFuture\n  = CompletableFuture.supplyAsync(() -> "Hello");\n\nCompletableFuture<String> future = completableFuture\n  .thenApply(s -> s + " World");\n\nassertEquals("Hello World", future.get());\n\n\nCompletableFuture API最好的部分是能够在一系列计算步骤中组合CompletableFuture实例。\n\n这种链接的结果本身就是一个完整的Future，允许进一步的链接和组合。这种方法在函数语言中普遍存在，通常被称为享元模式。\n\n在下面的示例中，我们使用thenCompose方法按顺序链接两个Future。\n\n请注意，此方法接受一个返回CompletableFuture实例的函数。此函数的参数是上一计算步骤的结果。这允许我们在下一个CompletableFuture的lambda中使用此值：\n\nCompletableFuture<String> completableFuture \n  = CompletableFuture.supplyAsync(() -> "Hello")\n    .thenCompose(s -> CompletableFuture.supplyAsync(() -> s + " World"));\n\nassertEquals("Hello World", completableFuture.get());\n\n\nthenCompose方法与thenApply一起实现了享元模式的基本构建块。它们与流的map和flatMap方法以及java8中的可选类密切相关。\n\n两个方法都接收一个函数并将其应用于计算结果，但是thencomose（flatMap）方法接收一个返回另一个相同类型对象的函数。这种功能结构允许将这些类的实例组合为构建块。\n\n\n# 任务A--void--\x3e任务B_void\n\n如果我们既不需要计算的值，也不想返回值，那么我们可以将一个可运行的lambda传递给thenRun方法。在下面的示例中，我们只需在调用future.get()后在控制台中打印一行：\n\nCompletableFuture<String> completableFuture \n  = CompletableFuture.supplyAsync(() -> "Hello");\n\nCompletableFuture<Void> future = completableFuture\n  .thenRun(() -> System.out.println("Computation finished."));\n\nfuture.get();\n\n\n\n# 任务A--结果,异常--\x3e主线程\n\n//TODO 异步任务执行成功后，自动回调（主线程）\nCompletableFuture.supplyAsync(() -> this.getName("张三")).whenComplete((result, exception) -> System.out.println(result));\nCompletableFuture.supplyAsync(() -> this.getName("张三")).whenCompleteAsync((result, exception) -> System.out.println(result));\n\n\n\n\n# A,B--结果--\x3e处理\n\n一个简单的例子是，当我们想处理两个CompletableFuture的结果时，但不需要将任何结果值传递给CompletableFuture的链。thenAcceptBoth方法可以帮助：\n\n//TODO 两个异步任务同时执行，获取执行结果\nCompletableFuture.supplyAsync(() -> this.getName("张三"))\n    .thenAcceptBoth(CompletableFuture.supplyAsync(() -> this.getName("李四")),\n                    (resultA, resultB) -> System.out.println(resultA + resultB));\n\n\n\n如果我们想执行两个独立的Future，并对它们的结果进行处理，我们可以使用thenCombine方法，该方法接受一个Future和一个具有两个参数的函数来处理这两个结果：\n\nCompletableFuture<String> completableFuture \n  = CompletableFuture.supplyAsync(() -> "Hello")\n    .thenCombine(CompletableFuture.supplyAsync(\n      () -> " World"), (s1, s2) -> s1 + s2));\n\nassertEquals("Hello World", completableFuture.get());\n\n\n\n# thenApply()和thenCompose()的区别\n\n> thenApply()\n\n我们可以使用此方法处理上一次调用的结果。但是，需要记住的一点是，返回类型将由所有调用组合而成。\n\n因此，当我们要转换CompletableFuture调用的结果时，此方法非常有用：\n\nCompletableFuture<Integer> finalResult = compute().thenApply(s-> s + 1);\n\n\n> thenCompose()\n\nthenCompose（）方法与thenApply（）类似，因为两者都返回一个新的完成阶段。但是，thencose（）使用前一阶段作为参数。它将展平并直接返回一个带有结果的CompletableFuture，而不是我们在thenApply（）中观察到的嵌套CompletableFuture：\n\nCompletableFuture<Integer> computeAnother(Integer i){\n    return CompletableFuture.supplyAsync(() -> 10 + i);\n}\nCompletableFuture<Integer> finalResult = compute().thenCompose(this::computeAnother);\n\n\n因此，如果要链接可完成的CompletableFuture方法，那么最好使用thenCompose（）。\n\n另外，请注意，这两个方法之间的差异类似于map（）和flatMap（）之间的差异。\n\n\n# 多线程同时执行\n\n当我们需要并行执行多个期货时，我们通常希望等待所有Supplier执行，然后处理它们的组合结果。\n\n\n# 方式一_单对象处理\n\n//TODO 方式一：多线程同时执行，及其处理  *****常用\nCompletableFuture<String> cf3 = CompletableFuture.supplyAsync(() -> this.getName("张三"));\nCompletableFuture<String> cf4 = CompletableFuture.supplyAsync(() -> this.getName("李四"));\nCompletableFuture.allOf(cf3, cf4).join();//同时执行\nString val1 = cf3.get();\nString val2 = cf4.get();\n\n\nCompletableFuture.allOf静态方法允许等待的所有Supplier的完成：\n\nCompletableFuture<String> future1  \n  = CompletableFuture.supplyAsync(() -> "Hello");\nCompletableFuture<String> future2  \n  = CompletableFuture.supplyAsync(() -> "Beautiful");\nCompletableFuture<String> future3  \n  = CompletableFuture.supplyAsync(() -> "World");\n\nCompletableFuture<Void> combinedFuture \n  = CompletableFuture.allOf(future1, future2, future3);\n\n// ...\n\ncombinedFuture.get();\n\nassertTrue(future1.isDone());\nassertTrue(future2.isDone());\nassertTrue(future3.isDone());\n\n\n注意CompletableFuture.allOf（）的返回类型是CompletableFuture。这种方法的局限性在于它不能返回所有Supplier的组合结果。相反，我们必须从Future手动获取结果。幸运的是，CompletableFuture.join（）方法和Java 8 Streams API使它变得简单：\n\nString combined = Stream.of(future1, future2, future3)\n  .map(CompletableFuture::join)\n  .collect(Collectors.joining(" "));\n\nassertEquals("Hello Beautiful World", combined);\n\n\njoin（）方法类似于get方法，但是如果Future不能正常完成，它会抛出一个未检查的异常。这样就可以将其用作Stream.map（）方法中的方法引用。\n\n\n# 方式二_集合对象\n\n//TODO 方式二:集合对象，批量处理 *****常用\nArrayList<String> list = Lists.newArrayList("张三", "李四", "王五", "赵六");\nList<CompletableFuture<String>> completableFutureList = list.stream()\n    //将集合数据转 CompletableFuture对象\n    .map(name -> CompletableFuture.supplyAsync(() -> this.getName(name)))\n    //收集为集合\n    .collect(Collectors.toList());\n//多任务并发执行\nCompletableFuture.allOf(completableFutureList.toArray(new CompletableFuture[completableFutureList.size()])).join();//同时执行\n//获取执行结果,过滤空结果\nList<String> resultList2 = completableFutureList.stream().map(this::tryGetString).filter(Objects::nonNull).collect(Collectors.toList());\n\n\n\n# 方式三_集合对象\n\n\n//TODO 方式3 将list转为CompletableFuture<String>[] 数组，收集执行结果\n//将list列表 ---\x3e转为 CompletableFuture[] 数组\nCompletableFuture<String>[] completableFutures = list.stream()\n    .map(name -> CompletableFuture.supplyAsync(() -> this.getName(name)))\n    .toArray(CompletableFuture[]::new);\n//同时执行\nCompletableFuture.allOf(completableFutures).join();//同时执行\n//stream获取集合中的结果，过滤空结果，收集为集合\nList<String> resultList3 = Arrays.stream(completableFutures).map(this::tryGetString).filter(Objects::nonNull).collect(Collectors.toList());\n\n\n\n\n# 方式四_集合对象\n\n//TODO 方式4: 将list转为CompletableFuture对象，在完成时获取结果存入集合\nArrayList<String> resultList = new ArrayList<>();\nCompletableFuture.allOf(list.stream()\n                        .map(name ->\n                             CompletableFuture.supplyAsync(() -> this.getName(name))\n                             .whenCompleteAsync((result, exception) -> {\n                                 resultList.add(result);\n                             })).toArray(CompletableFuture[]::new)).join();\nSystem.out.println(resultList);\n',normalizedContent:'# juc--completablefuture-01\n\n\n# 简介\n\n在java8中，completablefuture提供了非常强大的future的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转换和组合 completablefuture 的方法。\n\n异步计算很难推理。通常，我们希望将任何计算都视为一系列步骤，但是在异步计算的情况下，以回调表示的动作往往分散在代码中或彼此深深地嵌套在一起。当我们需要处理其中一个步骤中可能发生的错误时，情况变得更加糟糕。future是java 5中添加作为异步计算的结果，但它没有任何方法处理计算可能出现的错误。\n\njava 8引入了completablefuture类。除future接口外，它还实现了completionstage接口。该接口为异步计算步骤定义了合同，我们可以将其与其他步骤结合使用。\n\ncompletablefuture类中fluentapi的大多数方法都有另外两个带有异步后缀的变体。这些方法通常用于在另一个线程中运行相应的执行步骤。\n\n没有异步后缀的方法使用调用线程运行下一个执行阶段。相反，不带executor参数的async方法使用executor的公共fork/join池实现运行一个步骤，该实现通过forkjoinpool.commonpool（）方法访问。最后，带有executor参数的async方法使用传递的executor运行步骤。\n\ncompletablefuture<string> completablefuture  \n  = completablefuture.supplyasync(() -> "hello");\n\ncompletablefuture<string> future = completablefuture\n  .thenapplyasync(s -> s + " world");\n\nassertequals("hello world", future.get());\n\n\n> 不多哔哔，完整案例\n\npackage com.zs.comple;\n\nimport org.assertj.core.util.lists;\nimport org.junit.before;\nimport org.junit.test;\nimport org.springframework.boot.test.context.springboottest;\n\nimport java.util.arraylist;\nimport java.util.arrays;\nimport java.util.list;\nimport java.util.objects;\nimport java.util.concurrent.completablefuture;\nimport java.util.concurrent.executionexception;\nimport java.util.concurrent.executorservice;\nimport java.util.concurrent.executors;\nimport java.util.stream.collectors;\n\n/**\n * create by 张邵\n * 2024/1/30 17:24\n */\n@springboottest\npublic class completablefuturetest {\n    private static executorservice executorservice;\n\n    @before\n    public void pool() {\n        //cpu密集型（cpu核心数 | cpu核心数+1）\n        //io密集型（cpu核心数*2）\n        //核心线程数，线程工厂\n        executorservice = executors.newfixedthreadpool(runtime.getruntime().availableprocessors(), r -> {\n            thread thread = new thread(r);\n            thread.setname("thread pool .........");\n            return thread;\n        });\n    }\n\n\n    string getname(string name) {\n        system.out.println("=========" + thread.currentthread().getname());\n        return name;\n    }\n\n    @test\n    public void demo() throws executionexception, interruptedexception {\n        //todo 当不传线程池的情况下，会用forkjoinpool中公共线程池commonpool(线程池大小是cpu核心数 - 1)\n\n        //todo 创建不带返回值的异步任务\n        completablefuture.runasync(() -> this.getname("张三"), executorservice);\n\n        //todo 创建带返回值的异步任务\n        completablefuture<string> cf1 = completablefuture.supplyasync(() -> this.getname("张三"), executorservice);\n        string cfget = cf1.get();//编译异常\n        string cfjoin = cf1.join();//运行时异常\n\n        //todo 异步编排的链式写法\n        //todo 第一个任务完成后，继续执行新任务，且无法返回。\n        // 区别 thenaccept 将使用主线程继续执行, thenacceptasync 使用异步线程执行\n        completablefuture.supplyasync(() -> this.getname("张三"))\n                .thenaccept(/*a是第一个线程返回的结果*/(a) -> this.getname("666"))\n                .thenacceptasync(/*null*/(a) -> system.out.println(a));\n        completablefuture.supplyasync(() -> this.getname("张三")).thenacceptasync(/*a是第一个线程返回的结果*/(a) -> system.out.println("aaa"));\n\n\n        //todo 第一个任务完成后，继续执行新任务，且可以返回结果。\n        completablefuture.supplyasync(() -> this.getname("张三")).thenapply((a) -> {\n            system.out.println("aaa");\n            return a;\n        });\n        completablefuture.supplyasync(() -> this.getname("张三")).thenapplyasync((a) -> {\n            system.out.println("aaa");\n            return a;\n        });\n\n        //todo 第一个任务完成后，继续执行新任务，且可以返回结果。\n        //thencompose 会再次创建一个completablefuture对象\n        completablefuture.supplyasync(() -> this.getname("张三"))\n                .thencompose(res -> completablefuture.supplyasync(() -> {\n                    this.getname("666");\n                    return res;\n                }));\n\n\n        //todo 异步任务执行成功后，自动回调（主线程）\n        completablefuture.supplyasync(() -> this.getname("张三")).whencomplete((result, exception) -> system.out.println(result));\n        completablefuture.supplyasync(() -> this.getname("张三")).whencompleteasync((result, exception) -> system.out.println(result));\n\n\n        //todo 两个异步任务同时执行，获取执行结果\n        completablefuture.supplyasync(() -> this.getname("张三"))\n                .thenacceptboth(completablefuture.supplyasync(() -> this.getname("李四")),\n                        (resulta, resultb) -> system.out.println(resulta + resultb));\n\n\n        //todo 方式一：多线程同时执行，及其处理  *****常用\n        completablefuture<string> cf3 = completablefuture.supplyasync(() -> this.getname("张三"));\n        completablefuture<string> cf4 = completablefuture.supplyasync(() -> this.getname("李四"));\n        completablefuture.allof(cf3, cf4).join();//同时执行\n        string val1 = cf3.get();\n        string val2 = cf4.get();\n\n        //todo 方式二:集合对象，批量处理 *****常用\n        arraylist<string> list = lists.newarraylist("张三", "李四", "王五", "赵六");\n        list<completablefuture<string>> completablefuturelist = list.stream()\n                //将集合数据转 completablefuture对象\n                .map(name -> completablefuture.supplyasync(() -> this.getname(name)))\n                //收集为集合\n                .collect(collectors.tolist());\n        //多任务并发执行\n        completablefuture.allof(completablefuturelist.toarray(new completablefuture[completablefuturelist.size()])).join();//同时执行\n        //获取执行结果,过滤空结果\n        list<string> resultlist2 = completablefuturelist.stream().map(this::trygetstring).filter(objects::nonnull).collect(collectors.tolist());\n\n\n        //todo 方式3 将list转为completablefuture<string>[] 数组，收集执行结果\n        //将list列表 ---\x3e转为 completablefuture[] 数组\n        completablefuture<string>[] completablefutures = list.stream()\n                .map(name -> completablefuture.supplyasync(() -> this.getname(name)))\n                .toarray(completablefuture[]::new);\n        //同时执行\n        completablefuture.allof(completablefutures).join();//同时执行\n        //stream获取集合中的结果，过滤空结果，收集为集合\n        list<string> resultlist3 = arrays.stream(completablefutures).map(this::trygetstring).filter(objects::nonnull).collect(collectors.tolist());\n\n\n        //todo 方式4: 将list转为completablefuture对象，在完成时获取结果存入集合\n        arraylist<string> resultlist = new arraylist<>();\n        completablefuture.allof(list.stream()\n                .map(name ->\n                        completablefuture.supplyasync(() -> this.getname(name))\n                                .whencompleteasync((result, exception) -> {\n                                    resultlist.add(result);\n                                })).toarray(completablefuture[]::new)).join();\n        system.out.println(resultlist);\n    }\n\n    private string trygetstring(completablefuture<string> completablefuture) {\n        try {\n            return completablefuture.get();\n        } catch (interruptedexception | executionexception e) {\n            e.printstacktrace();\n        }\n        return null;\n    }\n}\n\n\n\n\n# 用作future\n\n首先，completablefuture类实现了future接口，因此我们可以将其用作future的实现，但需要附加完成逻辑。\n\n例如，我们可以用一个无参数构造函数创建这个类的实例来表示future的结果，将它分发给使用者，并在将来的某个时候使用complete方法完成它。\n\n使用者可以使用get方法阻塞当前线程，直到提供此结果。\n\n在下面的示例中，我们有一个方法，它创建一个completablefuture实例，然后在另一个线程中派生一些计算，并立即返回future。计算完成后，该方法通过向完整方法提供结果来完成future：\n\npublic future<string> calculateasync() throws interruptedexception {\n    completablefuture<string> completablefuture = new completablefuture<>();\n\n    executors.newcachedthreadpool().submit(() -> {\n        thread.sleep(500);\n        completablefuture.complete("hello");\n        return null;\n    });\n\n    return completablefuture;\n}\n\n\n我们使用executor api。这种创建和完成completablefuture的方法可以与任何并发机制或api（包括原始线程）一起使用。\n\n请注意，calculateasync方法将返回一个future的实例。 我们只需调用该方法，接收future实例，并在准备阻塞结果时对其调用get方法。\n\n还要注意get方法抛出一些已检查的异常，即executionexception（封装计算期间发生的异常）和interruptedeexception（表示执行方法的线程被中断的异常）\n\nfuture<string> completablefuture = calculateasync();\n\n// ... \n\nstring result = completablefuture.get();\nassertequals("hello", result);\n\n\n如果我们已经知道计算的结果，我们可以使用静态completedfuture方法，并使用一个参数，该参数表示此计算的结果。因此，将来的get方法永远不会阻塞，立即返回此结果，而不是：\n\nfuture<string> completablefuture = \n  completablefuture.completedfuture("hello");\n\n// ...\n\nstring result = completablefuture.get();\nassertequals("hello", result);\n\n\n\n# 异步任务\n\n静态方法runasync和supplyasync允许我们相应地使用runnable和supplier函数类型创建一个可完成的未来实例。\n\nrunnable和supplier都是函数接口，由于新的java8特性，它们允许将实例作为lambda表达式传递。\n\nrunnable接口与线程中使用的旧接口相同，不允许返回值。\n\nsupplier接口是一个通用函数接口，它有一个方法，该方法没有参数，并且返回一个参数化类型的值。\n\n\n# 带返回值\n\n使用supplier接口\n\n//todo 创建带返回值的异步任务\ncompletablefuture<string> cf1 = completablefuture.supplyasync(() -> this.getname("张三"), executorservice);\nstring cfget = cf1.get();\nstring cfjoin = cf1.join();\n\n\n\n# 不带返回值\n\n使用runnable接口\n\n//todo 创建不带返回值的异步任务\ncompletablefuture.runasync(() -> this.getname("张三"), executorservice);\n\n\n\n# 链式编排\n\n\n# 任务a--结果--\x3e任务b_无返回\n\n如果我们不需要在future中返回值，我们可以使用consumer函数接口的实例。它的单个方法接受一个参数并返回void。\n\nthenaccept方法接收使用者并将计算结果传递给它。最后一个future.get()调用返回void类型的实例：\n\ncompletablefuture<string> completablefuture\n  = completablefuture.supplyasync(() -> "hello");\n\ncompletablefuture<void> future = completablefuture\n  .thenaccept(s -> system.out.println("computation returned: " + s));\n\nfuture.get();\n\n\n//todo 第一个任务完成后，继续执行新任务，且无法返回。\n// 区别 thenaccept 将使用主线程继续执行, thenacceptasync 使用异步线程执行\ncompletablefuture.supplyasync(() -> this.getname("张三"))\n    .thenaccept(/*a是第一个线程返回的结果*/(a) -> this.getname("666"))\n    .thenacceptasync(/*null*/(a) -> system.out.println(a));\ncompletablefuture.supplyasync(() -> this.getname("张三")).thenacceptasync(/*a是第一个线程返回的结果*/(a) -> system.out.println("aaa"));\n\n\n\n\n# 任务a--结果--\x3e任务b_有返回\n\n//todo 第一个任务完成后，继续执行新任务，且可以返回结果。\ncompletablefuture.supplyasync(() -> this.getname("张三")).thenapply((a) -> {\n    system.out.println("aaa");\n    return a;\n});\ncompletablefuture.supplyasync(() -> this.getname("张三")).thenapplyasync((a) -> {\n    system.out.println("aaa");\n    return a;\n});\n\n\n//todo 第一个任务完成后，继续执行新任务，且可以返回结果。\n//thencompose 会再次创建一个completablefuture对象\ncompletablefuture.supplyasync(() -> this.getname("张三"))\n    .thencompose(res -> completablefuture.supplyasync(() -> {\n        this.getname("666");\n        return res;\n    }));\n\n\n\n处理计算结果的最通用的方法是将其提供给函数。thenapply方法正是这样做的；它接受一个函数实例，用它来处理结果，并返回一个包含函数返回值的future：\n\ncompletablefuture<string> completablefuture\n  = completablefuture.supplyasync(() -> "hello");\n\ncompletablefuture<string> future = completablefuture\n  .thenapply(s -> s + " world");\n\nassertequals("hello world", future.get());\n\n\ncompletablefuture api最好的部分是能够在一系列计算步骤中组合completablefuture实例。\n\n这种链接的结果本身就是一个完整的future，允许进一步的链接和组合。这种方法在函数语言中普遍存在，通常被称为享元模式。\n\n在下面的示例中，我们使用thencompose方法按顺序链接两个future。\n\n请注意，此方法接受一个返回completablefuture实例的函数。此函数的参数是上一计算步骤的结果。这允许我们在下一个completablefuture的lambda中使用此值：\n\ncompletablefuture<string> completablefuture \n  = completablefuture.supplyasync(() -> "hello")\n    .thencompose(s -> completablefuture.supplyasync(() -> s + " world"));\n\nassertequals("hello world", completablefuture.get());\n\n\nthencompose方法与thenapply一起实现了享元模式的基本构建块。它们与流的map和flatmap方法以及java8中的可选类密切相关。\n\n两个方法都接收一个函数并将其应用于计算结果，但是thencomose（flatmap）方法接收一个返回另一个相同类型对象的函数。这种功能结构允许将这些类的实例组合为构建块。\n\n\n# 任务a--void--\x3e任务b_void\n\n如果我们既不需要计算的值，也不想返回值，那么我们可以将一个可运行的lambda传递给thenrun方法。在下面的示例中，我们只需在调用future.get()后在控制台中打印一行：\n\ncompletablefuture<string> completablefuture \n  = completablefuture.supplyasync(() -> "hello");\n\ncompletablefuture<void> future = completablefuture\n  .thenrun(() -> system.out.println("computation finished."));\n\nfuture.get();\n\n\n\n# 任务a--结果,异常--\x3e主线程\n\n//todo 异步任务执行成功后，自动回调（主线程）\ncompletablefuture.supplyasync(() -> this.getname("张三")).whencomplete((result, exception) -> system.out.println(result));\ncompletablefuture.supplyasync(() -> this.getname("张三")).whencompleteasync((result, exception) -> system.out.println(result));\n\n\n\n\n# a,b--结果--\x3e处理\n\n一个简单的例子是，当我们想处理两个completablefuture的结果时，但不需要将任何结果值传递给completablefuture的链。thenacceptboth方法可以帮助：\n\n//todo 两个异步任务同时执行，获取执行结果\ncompletablefuture.supplyasync(() -> this.getname("张三"))\n    .thenacceptboth(completablefuture.supplyasync(() -> this.getname("李四")),\n                    (resulta, resultb) -> system.out.println(resulta + resultb));\n\n\n\n如果我们想执行两个独立的future，并对它们的结果进行处理，我们可以使用thencombine方法，该方法接受一个future和一个具有两个参数的函数来处理这两个结果：\n\ncompletablefuture<string> completablefuture \n  = completablefuture.supplyasync(() -> "hello")\n    .thencombine(completablefuture.supplyasync(\n      () -> " world"), (s1, s2) -> s1 + s2));\n\nassertequals("hello world", completablefuture.get());\n\n\n\n# thenapply()和thencompose()的区别\n\n> thenapply()\n\n我们可以使用此方法处理上一次调用的结果。但是，需要记住的一点是，返回类型将由所有调用组合而成。\n\n因此，当我们要转换completablefuture调用的结果时，此方法非常有用：\n\ncompletablefuture<integer> finalresult = compute().thenapply(s-> s + 1);\n\n\n> thencompose()\n\nthencompose（）方法与thenapply（）类似，因为两者都返回一个新的完成阶段。但是，thencose（）使用前一阶段作为参数。它将展平并直接返回一个带有结果的completablefuture，而不是我们在thenapply（）中观察到的嵌套completablefuture：\n\ncompletablefuture<integer> computeanother(integer i){\n    return completablefuture.supplyasync(() -> 10 + i);\n}\ncompletablefuture<integer> finalresult = compute().thencompose(this::computeanother);\n\n\n因此，如果要链接可完成的completablefuture方法，那么最好使用thencompose（）。\n\n另外，请注意，这两个方法之间的差异类似于map（）和flatmap（）之间的差异。\n\n\n# 多线程同时执行\n\n当我们需要并行执行多个期货时，我们通常希望等待所有supplier执行，然后处理它们的组合结果。\n\n\n# 方式一_单对象处理\n\n//todo 方式一：多线程同时执行，及其处理  *****常用\ncompletablefuture<string> cf3 = completablefuture.supplyasync(() -> this.getname("张三"));\ncompletablefuture<string> cf4 = completablefuture.supplyasync(() -> this.getname("李四"));\ncompletablefuture.allof(cf3, cf4).join();//同时执行\nstring val1 = cf3.get();\nstring val2 = cf4.get();\n\n\ncompletablefuture.allof静态方法允许等待的所有supplier的完成：\n\ncompletablefuture<string> future1  \n  = completablefuture.supplyasync(() -> "hello");\ncompletablefuture<string> future2  \n  = completablefuture.supplyasync(() -> "beautiful");\ncompletablefuture<string> future3  \n  = completablefuture.supplyasync(() -> "world");\n\ncompletablefuture<void> combinedfuture \n  = completablefuture.allof(future1, future2, future3);\n\n// ...\n\ncombinedfuture.get();\n\nasserttrue(future1.isdone());\nasserttrue(future2.isdone());\nasserttrue(future3.isdone());\n\n\n注意completablefuture.allof（）的返回类型是completablefuture。这种方法的局限性在于它不能返回所有supplier的组合结果。相反，我们必须从future手动获取结果。幸运的是，completablefuture.join（）方法和java 8 streams api使它变得简单：\n\nstring combined = stream.of(future1, future2, future3)\n  .map(completablefuture::join)\n  .collect(collectors.joining(" "));\n\nassertequals("hello beautiful world", combined);\n\n\njoin（）方法类似于get方法，但是如果future不能正常完成，它会抛出一个未检查的异常。这样就可以将其用作stream.map（）方法中的方法引用。\n\n\n# 方式二_集合对象\n\n//todo 方式二:集合对象，批量处理 *****常用\narraylist<string> list = lists.newarraylist("张三", "李四", "王五", "赵六");\nlist<completablefuture<string>> completablefuturelist = list.stream()\n    //将集合数据转 completablefuture对象\n    .map(name -> completablefuture.supplyasync(() -> this.getname(name)))\n    //收集为集合\n    .collect(collectors.tolist());\n//多任务并发执行\ncompletablefuture.allof(completablefuturelist.toarray(new completablefuture[completablefuturelist.size()])).join();//同时执行\n//获取执行结果,过滤空结果\nlist<string> resultlist2 = completablefuturelist.stream().map(this::trygetstring).filter(objects::nonnull).collect(collectors.tolist());\n\n\n\n# 方式三_集合对象\n\n\n//todo 方式3 将list转为completablefuture<string>[] 数组，收集执行结果\n//将list列表 ---\x3e转为 completablefuture[] 数组\ncompletablefuture<string>[] completablefutures = list.stream()\n    .map(name -> completablefuture.supplyasync(() -> this.getname(name)))\n    .toarray(completablefuture[]::new);\n//同时执行\ncompletablefuture.allof(completablefutures).join();//同时执行\n//stream获取集合中的结果，过滤空结果，收集为集合\nlist<string> resultlist3 = arrays.stream(completablefutures).map(this::trygetstring).filter(objects::nonnull).collect(collectors.tolist());\n\n\n\n\n# 方式四_集合对象\n\n//todo 方式4: 将list转为completablefuture对象，在完成时获取结果存入集合\narraylist<string> resultlist = new arraylist<>();\ncompletablefuture.allof(list.stream()\n                        .map(name ->\n                             completablefuture.supplyasync(() -> this.getname(name))\n                             .whencompleteasync((result, exception) -> {\n                                 resultlist.add(result);\n                             })).toarray(completablefuture[]::new)).join();\nsystem.out.println(resultlist);\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706672187e3},{title:"综合练习",frontmatter:{title:"综合练习",autoSort:900},regularPath:"/zs-se/io/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html",relativePath:"zs-se/io/综合练习.md",key:"v-1af0953b",path:"/zs-se/io/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html",headers:[{level:2,title:"练习1：拷贝文件夹",slug:"练习1-拷贝文件夹",normalizedTitle:"练习1：拷贝文件夹",charIndex:14},{level:2,title:"练习2：文件加密",slug:"练习2-文件加密",normalizedTitle:"练习2：文件加密",charIndex:1227},{level:2,title:"练习3：数字排序",slug:"练习3-数字排序",normalizedTitle:"练习3：数字排序",charIndex:2261}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"练习1：拷贝文件夹 练习2：文件加密 练习3：数字排序",content:'# 5. 综合练习\n\n\n# 练习1：拷贝文件夹\n\npublic class Test01 {\n    public static void main(String[] args) throws IOException {\n        //拷贝一个文件夹，考虑子文件夹\n\n        //1.创建对象表示数据源\n        File src = new File("D:\\\\aaa\\\\src");\n        //2.创建对象表示目的地\n        File dest = new File("D:\\\\aaa\\\\dest");\n\n        //3.调用方法开始拷贝\n        copydir(src,dest);\n\n\n\n    }\n\n    /*\n    * 作用：拷贝文件夹\n    * 参数一：数据源\n    * 参数二：目的地\n    *\n    * */\n    private static void copydir(File src, File dest) throws IOException {\n        dest.mkdirs();\n        //递归\n        //1.进入数据源\n        File[] files = src.listFiles();\n        //2.遍历数组\n        for (File file : files) {\n            if(file.isFile()){\n                //3.判断文件，拷贝\n                FileInputStream fis = new FileInputStream(file);\n                FileOutputStream fos = new FileOutputStream(new File(dest,file.getName()));\n                byte[] bytes = new byte[1024];\n                int len;\n                while((len = fis.read(bytes)) != -1){\n                    fos.write(bytes,0,len);\n                }\n                fos.close();\n                fis.close();\n            }else {\n                //4.判断文件夹，递归\n                copydir(file, new File(dest,file.getName()));\n            }\n        }\n    }\n}\n\n\n\n\n# 练习2：文件加密\n\npublic class Test02 {\n    public static void main(String[] args) throws IOException {\n        /*\n            为了保证文件的安全性，就需要对原始文件进行加密存储，再使用的时候再对其进行解密处理。\n            加密原理：\n                对原始文件中的每一个字节数据进行更改，然后将更改以后的数据存储到新的文件中。\n            解密原理：\n                读取加密之后的文件，按照加密的规则反向操作，变成原始文件。\n\n             ^ : 异或\n                 两边相同：false\n                 两边不同：true\n\n                 0：false\n                 1：true\n\n               100:1100100\n               10: 1010\n\n               1100100\n             ^ 0001010\n             __________\n               1101110\n             ^ 0001010\n             __________\n               1100100\n\n        */\n    }\n\n    public static void encryptionAndReduction(File src, File dest) throws IOException {\n        FileInputStream fis = new FileInputStream(src);\n        FileOutputStream fos = new FileOutputStream(dest);\n        int b;\n        while ((b = fis.read()) != -1) {\n            fos.write(b ^ 2);\n        }\n        //4.释放资源\n        fos.close();\n        fis.close();\n    }\n\n\n}\n\n\n\n\n# 练习3：数字排序\n\n文本文件中有以下的数据： 2-1-9-4-7-8 将文件中的数据进行排序，变成以下的数据： 1-2-4-7-8-9\n\n实现方式一：\n\npublic class Test03 {\n    public static void main(String[] args) throws IOException {\n        /*\n            文本文件中有以下的数据：\n                2-1-9-4-7-8\n            将文件中的数据进行排序，变成以下的数据：\n                1-2-4-7-8-9\n        */\n\n\n        //1.读取数据\n        FileReader fr = new FileReader("myio\\\\a.txt");\n        StringBuilder sb = new StringBuilder();\n        int ch;\n        while((ch = fr.read()) != -1){\n            sb.append((char)ch);\n        }\n        fr.close();\n        System.out.println(sb);\n        //2.排序\n        String str = sb.toString();\n        String[] arrStr = str.split("-");//2-1-9-4-7-8\n\n        ArrayList<Integer> list = new ArrayList<>();\n        for (String s : arrStr) {\n            int i = Integer.parseInt(s);\n            list.add(i);\n        }\n        Collections.sort(list);\n        System.out.println(list);\n        //3.写出\n        FileWriter fw = new FileWriter("myio\\\\a.txt");\n        for (int i = 0; i < list.size(); i++) {\n            if(i == list.size() - 1){\n                fw.write(list.get(i) + "");\n            }else{\n                fw.write(list.get(i) + "-");\n            }\n        }\n        fw.close();\n    }\n}\n\n\n实现方式二：\n\npublic class Test04 {\n    public static void main(String[] args) throws IOException {\n        /*\n            文本文件中有以下的数据：\n                2-1-9-4-7-8\n            将文件中的数据进行排序，变成以下的数据：\n                1-2-4-7-8-9\n\n           细节1：\n                文件中的数据不要换行\n\n            细节2:\n                bom头\n        */\n        //1.读取数据\n        FileReader fr = new FileReader("myio\\\\a.txt");\n        StringBuilder sb = new StringBuilder();\n        int ch;\n        while((ch = fr.read()) != -1){\n            sb.append((char)ch);\n        }\n        fr.close();\n        System.out.println(sb);\n        //2.排序\n        Integer[] arr = Arrays.stream(sb.toString()\n                                      .split("-"))\n            .map(Integer::parseInt)\n            .sorted()\n            .toArray(Integer[]::new);\n        //3.写出\n        FileWriter fw = new FileWriter("myio\\\\a.txt");\n        String s = Arrays.toString(arr).replace(", ","-");\n        String result = s.substring(1, s.length() - 1);\n        fw.write(result);\n        fw.close();\n    }\n}\n',normalizedContent:'# 5. 综合练习\n\n\n# 练习1：拷贝文件夹\n\npublic class test01 {\n    public static void main(string[] args) throws ioexception {\n        //拷贝一个文件夹，考虑子文件夹\n\n        //1.创建对象表示数据源\n        file src = new file("d:\\\\aaa\\\\src");\n        //2.创建对象表示目的地\n        file dest = new file("d:\\\\aaa\\\\dest");\n\n        //3.调用方法开始拷贝\n        copydir(src,dest);\n\n\n\n    }\n\n    /*\n    * 作用：拷贝文件夹\n    * 参数一：数据源\n    * 参数二：目的地\n    *\n    * */\n    private static void copydir(file src, file dest) throws ioexception {\n        dest.mkdirs();\n        //递归\n        //1.进入数据源\n        file[] files = src.listfiles();\n        //2.遍历数组\n        for (file file : files) {\n            if(file.isfile()){\n                //3.判断文件，拷贝\n                fileinputstream fis = new fileinputstream(file);\n                fileoutputstream fos = new fileoutputstream(new file(dest,file.getname()));\n                byte[] bytes = new byte[1024];\n                int len;\n                while((len = fis.read(bytes)) != -1){\n                    fos.write(bytes,0,len);\n                }\n                fos.close();\n                fis.close();\n            }else {\n                //4.判断文件夹，递归\n                copydir(file, new file(dest,file.getname()));\n            }\n        }\n    }\n}\n\n\n\n\n# 练习2：文件加密\n\npublic class test02 {\n    public static void main(string[] args) throws ioexception {\n        /*\n            为了保证文件的安全性，就需要对原始文件进行加密存储，再使用的时候再对其进行解密处理。\n            加密原理：\n                对原始文件中的每一个字节数据进行更改，然后将更改以后的数据存储到新的文件中。\n            解密原理：\n                读取加密之后的文件，按照加密的规则反向操作，变成原始文件。\n\n             ^ : 异或\n                 两边相同：false\n                 两边不同：true\n\n                 0：false\n                 1：true\n\n               100:1100100\n               10: 1010\n\n               1100100\n             ^ 0001010\n             __________\n               1101110\n             ^ 0001010\n             __________\n               1100100\n\n        */\n    }\n\n    public static void encryptionandreduction(file src, file dest) throws ioexception {\n        fileinputstream fis = new fileinputstream(src);\n        fileoutputstream fos = new fileoutputstream(dest);\n        int b;\n        while ((b = fis.read()) != -1) {\n            fos.write(b ^ 2);\n        }\n        //4.释放资源\n        fos.close();\n        fis.close();\n    }\n\n\n}\n\n\n\n\n# 练习3：数字排序\n\n文本文件中有以下的数据： 2-1-9-4-7-8 将文件中的数据进行排序，变成以下的数据： 1-2-4-7-8-9\n\n实现方式一：\n\npublic class test03 {\n    public static void main(string[] args) throws ioexception {\n        /*\n            文本文件中有以下的数据：\n                2-1-9-4-7-8\n            将文件中的数据进行排序，变成以下的数据：\n                1-2-4-7-8-9\n        */\n\n\n        //1.读取数据\n        filereader fr = new filereader("myio\\\\a.txt");\n        stringbuilder sb = new stringbuilder();\n        int ch;\n        while((ch = fr.read()) != -1){\n            sb.append((char)ch);\n        }\n        fr.close();\n        system.out.println(sb);\n        //2.排序\n        string str = sb.tostring();\n        string[] arrstr = str.split("-");//2-1-9-4-7-8\n\n        arraylist<integer> list = new arraylist<>();\n        for (string s : arrstr) {\n            int i = integer.parseint(s);\n            list.add(i);\n        }\n        collections.sort(list);\n        system.out.println(list);\n        //3.写出\n        filewriter fw = new filewriter("myio\\\\a.txt");\n        for (int i = 0; i < list.size(); i++) {\n            if(i == list.size() - 1){\n                fw.write(list.get(i) + "");\n            }else{\n                fw.write(list.get(i) + "-");\n            }\n        }\n        fw.close();\n    }\n}\n\n\n实现方式二：\n\npublic class test04 {\n    public static void main(string[] args) throws ioexception {\n        /*\n            文本文件中有以下的数据：\n                2-1-9-4-7-8\n            将文件中的数据进行排序，变成以下的数据：\n                1-2-4-7-8-9\n\n           细节1：\n                文件中的数据不要换行\n\n            细节2:\n                bom头\n        */\n        //1.读取数据\n        filereader fr = new filereader("myio\\\\a.txt");\n        stringbuilder sb = new stringbuilder();\n        int ch;\n        while((ch = fr.read()) != -1){\n            sb.append((char)ch);\n        }\n        fr.close();\n        system.out.println(sb);\n        //2.排序\n        integer[] arr = arrays.stream(sb.tostring()\n                                      .split("-"))\n            .map(integer::parseint)\n            .sorted()\n            .toarray(integer[]::new);\n        //3.写出\n        filewriter fw = new filewriter("myio\\\\a.txt");\n        string s = arrays.tostring(arr).replace(", ","-");\n        string result = s.substring(1, s.length() - 1);\n        fw.write(result);\n        fw.close();\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"说明",frontmatter:{},regularPath:"/zs-se/%E5%9F%BA%E7%A1%80/",relativePath:"zs-se/基础/README.md",key:"v-1f309dc7",path:"/zs-se/%E5%9F%BA%E7%A1%80/",lastUpdated:"2024年1月19日星期五凌晨12点46分",lastUpdatedTimestamp:1705596403e3,headersStr:null,content:"# 说明",normalizedContent:"# 说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705596403e3},{title:"JUC--CompletableFuture-02",frontmatter:{},regularPath:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-02.html",relativePath:"zs-se/基础/JUC--CompletableFuture-02.md",key:"v-de61d7e0",path:"/zs-se/%E5%9F%BA%E7%A1%80/JUC--CompletableFuture-02.html",headers:[{level:2,title:"一、创建异步任务",slug:"一、创建异步任务",normalizedTitle:"一、创建异步任务",charIndex:173},{level:3,title:"1\\. supplyAsync",slug:"_1-supplyasync",normalizedTitle:"1. supplyasync",charIndex:186},{level:3,title:"2. runAsync",slug:"_2-runasync",normalizedTitle:"2. runasync",charIndex:1297},{level:3,title:"3.获取任务结果的方法",slug:"_3-获取任务结果的方法",normalizedTitle:"3.获取任务结果的方法",charIndex:2322},{level:2,title:"二、异步回调处理",slug:"二、异步回调处理",normalizedTitle:"二、异步回调处理",charIndex:2900},{level:3,title:"1.thenApply和thenApplyAsync",slug:"_1-thenapply和thenapplyasync",normalizedTitle:"1.thenapply和thenapplyasync",charIndex:2913},{level:3,title:"2.thenAccept和thenAcceptAsync",slug:"_2-thenaccept和thenacceptasync",normalizedTitle:"2.thenaccept和thenacceptasync",charIndex:4493},{level:3,title:"3.thenRun和thenRunAsync",slug:"_3-thenrun和thenrunasync",normalizedTitle:"3.thenrun和thenrunasync",charIndex:5967},{level:3,title:"4.whenComplete和whenCompleteAsync",slug:"_4-whencomplete和whencompleteasync",normalizedTitle:"4.whencomplete和whencompleteasync",charIndex:7384},{level:3,title:"5.handle和handleAsync",slug:"_5-handle和handleasync",normalizedTitle:"5.handle和handleasync",charIndex:8453},{level:2,title:"三、多任务组合处理",slug:"三、多任务组合处理",normalizedTitle:"三、多任务组合处理",charIndex:9217},{level:3,title:"1.thenCombine、thenAcceptBoth 和runAfterBoth",slug:"_1-thencombine、thenacceptboth-和runafterboth",normalizedTitle:"1.thencombine、thenacceptboth 和runafterboth",charIndex:9231},{level:3,title:"2.applyToEither、acceptEither和runAfterEither",slug:"_2-applytoeither、accepteither和runaftereither",normalizedTitle:"2.applytoeither、accepteither和runaftereither",charIndex:11684},{level:3,title:"3.allOf / anyOf",slug:"_3-allof-anyof",normalizedTitle:"3.allof / anyof",charIndex:15574}],lastUpdated:"2024年1月31日星期三中午11点54分",lastUpdatedTimestamp:1706673263e3,headersStr:"一、创建异步任务 1\\. supplyAsync 2. runAsync 3.获取任务结果的方法 二、异步回调处理 1.thenApply和thenApplyAsync 2.thenAccept和thenAcceptAsync 3.thenRun和thenRunAsync 4.whenComplete和whenCompleteAsync 5.handle和handleAsync 三、多任务组合处理 1.thenCombine、thenAcceptBoth 和runAfterBoth 2.applyToEither、acceptEither和runAfterEither 3.allOf / anyOf",content:'# JUC--CompletableFuture-02\n\nCompletableFuture是jdk8的新特性。CompletableFuture实现了CompletionStage接口和Future接口，前者是对后者的一个扩展，增加了异步会点、流式处理、多个Future组合处理的能力，使Java在处理多任务的协同工作时更加顺畅便利。\n\n\n# 一、创建异步任务\n\n\n# 1. supplyAsync\n\nsupplyAsync是创建带有返回值的异步任务。它有如下两个方法，一个是使用默认线程池（ForkJoinPool.commonPool()）的方法，一个是带有自定义线程池的重载方法\n\n// 带返回值异步请求，默认线程池\npublic static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)\n\n// 带返回值的异步请求，可以自定义线程池\npublic static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor)\n\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> cf = CompletableFuture.supplyAsync(() -> {\n            System.out.println("do something....");\n            return "result";\n        });\n\n        //等待任务执行完成\n        System.out.println("结果->" + cf.get());\n}\n\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        // 自定义线程池\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        CompletableFuture<String> cf = CompletableFuture.supplyAsync(() -> {\n            System.out.println("do something....");\n            return "result";\n        }, executorService);\n\n        //等待子任务执行完成\n        System.out.println("结果->" + cf.get());\n}\n\n\n测试结果：\n\n\n\n\n# 2. runAsync\n\nrunAsync是创建没有返回值的异步任务。它有如下两个方法，一个是使用默认线程池（ForkJoinPool.commonPool()）的方法，一个是带有自定义线程池的重载方法\n\n// 不带返回值的异步请求，默认线程池\npublic static CompletableFuture<Void> runAsync(Runnable runnable)\n\n// 不带返回值的异步请求，可以自定义线程池\npublic static CompletableFuture<Void> runAsync(Runnable runnable, Executor executor)\n\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Void> cf = CompletableFuture.runAsync(() -> {\n            System.out.println("do something....");\n        });\n\n        //等待任务执行完成\n        System.out.println("结果->" + cf.get());\n}\n\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        // 自定义线程池\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> cf = CompletableFuture.runAsync(() -> {\n            System.out.println("do something....");\n        }, executorService);\n\n        //等待任务执行完成\n        System.out.println("结果->" + cf.get());\n}\n\n\n测试结果：\n\n\n\n\n# 3.获取任务结果的方法\n\n// 如果完成则返回结果，否则就抛出具体的异常\npublic T get() throws InterruptedException, ExecutionException \n\n// 最大时间等待返回结果，否则就抛出具体异常\npublic T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException\n\n// 完成时返回结果值，否则抛出unchecked异常。为了更好地符合通用函数形式的使用，如果完成此 CompletableFuture所涉及的计算引发异常，则此方法将引发unchecked异常并将底层异常作为其原因\npublic T join()\n\n// 如果完成则返回结果值（或抛出任何遇到的异常），否则返回给定的 valueIfAbsent。\npublic T getNow(T valueIfAbsent)\n\n// 如果任务没有完成，返回的值设置为给定值\npublic boolean complete(T value)\n\n// 如果任务没有完成，就抛出给定异常\npublic boolean completeExceptionally(Throwable ex) \n\n\n\n# 二、异步回调处理\n\n\n# 1.thenApply和thenApplyAsync\n\nthenApply 表示某个任务执行完成后执行的动作，即回调方法，会将该任务的执行结果即方法返回值作为入参传递到回调方法中，带有返回值。\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Integer> cf2 = cf1.thenApplyAsync((result) -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n            result += 2;\n            return result;\n        });\n        //等待任务1执行完成\n        System.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n}\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Integer> cf2 = cf1.thenApply((result) -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n            result += 2;\n            return result;\n        });\n        //等待任务1执行完成\n        System.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果：\n\n\n\n从上面代码和测试结果我们发现thenApply和thenApplyAsync区别在于，使用thenApply方法时子任务与父任务使用的是同一个线程，而thenApplyAsync在子任务中是另起一个线程执行任务，并且thenApplyAsync可以自定义线程池，默认的使用ForkJoinPool.commonPool()线程池。\n\n\n# 2.thenAccept和thenAcceptAsync\n\nthenAccep表示某个任务执行完成后执行的动作，即回调方法，会将该任务的执行结果即方法返回值作为入参传递到回调方法中，无返回值。\n\n测试代码\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Void> cf2 = cf1.thenAccept((result) -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        System.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n}\n\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Void> cf2 = cf1.thenAcceptAsync((result) -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        System.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果：\n\n从上面代码和测试结果我们发现thenAccep和thenAccepAsync区别在于，使用thenAccep方法时子任务与父任务使用的是同一个线程，而thenAccepAsync在子任务中可能是另起一个线程执行任务，并且thenAccepAsync可以自定义线程池，默认的使用ForkJoinPool.commonPool()线程池。\n\n\n# 3.thenRun和thenRunAsync\n\nthenRun表示某个任务执行完成后执行的动作，即回调方法，无入参，无返回值。\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Void> cf2 = cf1.thenRun(() -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        System.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n}\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Void> cf2 = cf1.thenRunAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        System.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果：\n\n\n\n\n\n从上面代码和测试结果我们发现thenRun和thenRunAsync区别在于，使用thenRun方法时子任务与父任务使用的是同一个线程，而thenRunAsync在子任务中可能是另起一个线程执行任务，并且thenRunAsync可以自定义线程池，默认的使用ForkJoinPool.commonPool()线程池。\n\n\n# 4.whenComplete和whenCompleteAsync\n\nwhenComplete是当某个任务执行完成后执行的回调方法，会将执行结果或者执行期间抛出的异常传递给回调方法，如果是正常执行则异常为null，回调方法对应的CompletableFuture的result和该任务一致，如果该任务正常执行，则get方法返回执行结果，如果是执行异常，则get方法抛出异常。\n\n测试代码：\n\n public static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            int a = 1/0;\n            return 1;\n        });\n\n        CompletableFuture<Integer> cf2 = cf1.whenComplete((result, e) -> {\n            System.out.println("上个任务结果：" + result);\n            System.out.println("上个任务抛出异常：" + e);\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n        });\n\n//        //等待任务1执行完成\n//        System.out.println("cf1结果->" + cf1.get());\n//        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n    }\n\n\n测试结果：\n\n\n\nwhenCompleteAsync和whenComplete区别也是whenCompleteAsync可能会另起一个线程执行任务，并且thenRunAsync可以自定义线程池，默认的使用ForkJoinPool.commonPool()线程池。\n\n\n# 5.handle和handleAsync\n\n跟whenComplete基本一致，区别在于handle的回调方法有返回值。\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            // int a = 1/0;\n            return 1;\n        });\n\n        CompletableFuture<Integer> cf2 = cf1.handle((result, e) -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n            System.out.println("上个任务结果：" + result);\n            System.out.println("上个任务抛出异常：" + e);\n            return result+2;\n        });\n\n        //等待任务2执行完成\n        System.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果 ：\n\n\n\n\n# 三、多任务组合处理\n\n\n# 1.thenCombine、thenAcceptBoth 和runAfterBoth\n\n这三个方法都是将两个CompletableFuture组合起来处理，只有两个任务都正常完成时，才进行下阶段任务。\n\n区别：thenCombine会将两个任务的执行结果作为所提供函数的参数，且该方法有返回值；thenAcceptBoth同样将两个任务的执行结果作为方法入参，但是无返回值；runAfterBoth没有入参，也没有返回值。注意两个任务中只要有一个执行异常，则将该异常信息作为指定任务的执行结果。\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Integer> cf2 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n            return 2;\n        });\n\n        CompletableFuture<Integer> cf3 = cf1.thenCombine(cf2, (a, b) -> {\n            System.out.println(Thread.currentThread() + " cf3 do something....");\n            return a + b;\n        });\n\n        System.out.println("cf3结果->" + cf3.get());\n}\n\n public static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Integer> cf2 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n            return 2;\n        });\n        \n        CompletableFuture<Void> cf3 = cf1.thenAcceptBoth(cf2, (a, b) -> {\n            System.out.println(Thread.currentThread() + " cf3 do something....");\n            System.out.println(a + b);\n        });\n\n        System.out.println("cf3结果->" + cf3.get());\n}\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<Integer> cf1 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf1 do something....");\n            return 1;\n        });\n\n        CompletableFuture<Integer> cf2 = CompletableFuture.supplyAsync(() -> {\n            System.out.println(Thread.currentThread() + " cf2 do something....");\n            return 2;\n        });\n\n        CompletableFuture<Void> cf3 = cf1.runAfterBoth(cf2, () -> {\n            System.out.println(Thread.currentThread() + " cf3 do something....");\n        });\n\n        System.out.println("cf3结果->" + cf3.get());\n}\n\n\n测试结果：\n\n\n\n\n\n\n\n\n# 2.applyToEither、acceptEither和runAfterEither\n\n这三个方法和上面一样也是将两个CompletableFuture组合起来处理，当有一个任务正常完成时，就会进行下阶段任务。\n\n区别：applyToEither会将已经完成任务的执行结果作为所提供函数的参数，且该方法有返回值；acceptEither同样将已经完成任务的执行结果作为方法入参，但是无返回值；runAfterEither没有入参，也没有返回值。\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> cf1 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf1 do something....");\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return "cf1 任务完成";\n        });\n\n        CompletableFuture<String> cf2 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf2 do something....");\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return "cf2 任务完成";\n        });\n\n        CompletableFuture<String> cf3 = cf1.applyToEither(cf2, (result) -> {\n            System.out.println("接收到" + result);\n            System.out.println(Thread.currentThread() + " cf3 do something....");\n            return "cf3 任务完成";\n        });\n\n        System.out.println("cf3结果->" + cf3.get());\n}\n\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> cf1 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf1 do something....");\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return "cf1 任务完成";\n        });\n\n        CompletableFuture<String> cf2 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf2 do something....");\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return "cf2 任务完成";\n        });\n\n        CompletableFuture<Void> cf3 = cf1.acceptEither(cf2, (result) -> {\n            System.out.println("接收到" + result);\n            System.out.println(Thread.currentThread() + " cf3 do something....");\n        });\n\n        System.out.println("cf3结果->" + cf3.get());\n}\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> cf1 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf1 do something....");\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf1 任务完成");\n            return "cf1 任务完成";\n        });\n\n        CompletableFuture<String> cf2 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf2 do something....");\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf2 任务完成");\n            return "cf2 任务完成";\n        });\n\n        CompletableFuture<Void> cf3 = cf1.runAfterEither(cf2, () -> {\n            System.out.println(Thread.currentThread() + " cf3 do something....");\n            System.out.println("cf3 任务完成");\n        });\n\n        System.out.println("cf3结果->" + cf3.get());\n}\n\n\n测试结果：\n\n\n\n从上面可以看出cf1任务完成需要2秒，cf2任务完成需要5秒，使用applyToEither组合两个任务时，只要有其中一个任务完成时，就会执行cf3任务，显然cf1任务先完成了并且将自己任务的结果传值给了cf3任务，cf3任务中打印了接收到cf1任务完成，接着完成自己的任务，并返回cf3任务完成；acceptEither和runAfterEither类似，acceptEither会将cf1任务的结果作为cf3任务的入参，但cf3任务完成时并无返回值；runAfterEither不会将cf1任务的结果作为cf3任务的入参，它是没有任务入参，执行完自己的任务后也并无返回值。\n\n\n# 3.allOf / anyOf\n\nallOf：CompletableFuture是多个任务都执行完成后才会执行，只有有一个任务执行异常，则返回的CompletableFuture执行get方法时会抛出异常，如果都是正常执行，则get返回null。\n\nanyOf ：CompletableFuture是多个任务只要有一个任务执行完成，则返回的CompletableFuture执行get方法时会抛出异常，如果都是正常执行，则get返回执行完成任务的结果。\n\n测试代码：\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> cf1 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf1 do something....");\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf1 任务完成");\n            return "cf1 任务完成";\n        });\n\n        CompletableFuture<String> cf2 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf2 do something....");\n                int a = 1/0;\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf2 任务完成");\n            return "cf2 任务完成";\n        });\n\n        CompletableFuture<String> cf3 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf2 do something....");\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf3 任务完成");\n            return "cf3 任务完成";\n        });\n\n        CompletableFuture<Void> cfAll = CompletableFuture.allOf(cf1, cf2, cf3);\n        System.out.println("cfAll结果->" + cfAll.get());\n}\n\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> cf1 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf1 do something....");\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf1 任务完成");\n            return "cf1 任务完成";\n        });\n\n        CompletableFuture<String> cf2 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf2 do something....");\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf2 任务完成");\n            return "cf2 任务完成";\n        });\n\n        CompletableFuture<String> cf3 = CompletableFuture.supplyAsync(() -> {\n            try {\n                System.out.println(Thread.currentThread() + " cf2 do something....");\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("cf3 任务完成");\n            return "cf3 任务完成";\n        });\n\n        CompletableFuture<Object> cfAll = CompletableFuture.anyOf(cf1, cf2, cf3);\n        System.out.println("cfAll结果->" + cfAll.get());\n}\n\n\n测试结果：\n\n\n\n\n\n本文转自 https://blog.csdn.net/zsx_xiaoxin/article/details/123898171，如有侵权，请联系删除。',normalizedContent:'# juc--completablefuture-02\n\ncompletablefuture是jdk8的新特性。completablefuture实现了completionstage接口和future接口，前者是对后者的一个扩展，增加了异步会点、流式处理、多个future组合处理的能力，使java在处理多任务的协同工作时更加顺畅便利。\n\n\n# 一、创建异步任务\n\n\n# 1. supplyasync\n\nsupplyasync是创建带有返回值的异步任务。它有如下两个方法，一个是使用默认线程池（forkjoinpool.commonpool()）的方法，一个是带有自定义线程池的重载方法\n\n// 带返回值异步请求，默认线程池\npublic static <u> completablefuture<u> supplyasync(supplier<u> supplier)\n\n// 带返回值的异步请求，可以自定义线程池\npublic static <u> completablefuture<u> supplyasync(supplier<u> supplier, executor executor)\n\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<string> cf = completablefuture.supplyasync(() -> {\n            system.out.println("do something....");\n            return "result";\n        });\n\n        //等待任务执行完成\n        system.out.println("结果->" + cf.get());\n}\n\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        // 自定义线程池\n        executorservice executorservice = executors.newsinglethreadexecutor();\n        completablefuture<string> cf = completablefuture.supplyasync(() -> {\n            system.out.println("do something....");\n            return "result";\n        }, executorservice);\n\n        //等待子任务执行完成\n        system.out.println("结果->" + cf.get());\n}\n\n\n测试结果：\n\n\n\n\n# 2. runasync\n\nrunasync是创建没有返回值的异步任务。它有如下两个方法，一个是使用默认线程池（forkjoinpool.commonpool()）的方法，一个是带有自定义线程池的重载方法\n\n// 不带返回值的异步请求，默认线程池\npublic static completablefuture<void> runasync(runnable runnable)\n\n// 不带返回值的异步请求，可以自定义线程池\npublic static completablefuture<void> runasync(runnable runnable, executor executor)\n\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<void> cf = completablefuture.runasync(() -> {\n            system.out.println("do something....");\n        });\n\n        //等待任务执行完成\n        system.out.println("结果->" + cf.get());\n}\n\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        // 自定义线程池\n        executorservice executorservice = executors.newsinglethreadexecutor();\n        completablefuture<void> cf = completablefuture.runasync(() -> {\n            system.out.println("do something....");\n        }, executorservice);\n\n        //等待任务执行完成\n        system.out.println("结果->" + cf.get());\n}\n\n\n测试结果：\n\n\n\n\n# 3.获取任务结果的方法\n\n// 如果完成则返回结果，否则就抛出具体的异常\npublic t get() throws interruptedexception, executionexception \n\n// 最大时间等待返回结果，否则就抛出具体异常\npublic t get(long timeout, timeunit unit) throws interruptedexception, executionexception, timeoutexception\n\n// 完成时返回结果值，否则抛出unchecked异常。为了更好地符合通用函数形式的使用，如果完成此 completablefuture所涉及的计算引发异常，则此方法将引发unchecked异常并将底层异常作为其原因\npublic t join()\n\n// 如果完成则返回结果值（或抛出任何遇到的异常），否则返回给定的 valueifabsent。\npublic t getnow(t valueifabsent)\n\n// 如果任务没有完成，返回的值设置为给定值\npublic boolean complete(t value)\n\n// 如果任务没有完成，就抛出给定异常\npublic boolean completeexceptionally(throwable ex) \n\n\n\n# 二、异步回调处理\n\n\n# 1.thenapply和thenapplyasync\n\nthenapply 表示某个任务执行完成后执行的动作，即回调方法，会将该任务的执行结果即方法返回值作为入参传递到回调方法中，带有返回值。\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<integer> cf2 = cf1.thenapplyasync((result) -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n            result += 2;\n            return result;\n        });\n        //等待任务1执行完成\n        system.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n}\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<integer> cf2 = cf1.thenapply((result) -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n            result += 2;\n            return result;\n        });\n        //等待任务1执行完成\n        system.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果：\n\n\n\n从上面代码和测试结果我们发现thenapply和thenapplyasync区别在于，使用thenapply方法时子任务与父任务使用的是同一个线程，而thenapplyasync在子任务中是另起一个线程执行任务，并且thenapplyasync可以自定义线程池，默认的使用forkjoinpool.commonpool()线程池。\n\n\n# 2.thenaccept和thenacceptasync\n\nthenaccep表示某个任务执行完成后执行的动作，即回调方法，会将该任务的执行结果即方法返回值作为入参传递到回调方法中，无返回值。\n\n测试代码\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<void> cf2 = cf1.thenaccept((result) -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        system.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n}\n\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<void> cf2 = cf1.thenacceptasync((result) -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        system.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果：\n\n从上面代码和测试结果我们发现thenaccep和thenaccepasync区别在于，使用thenaccep方法时子任务与父任务使用的是同一个线程，而thenaccepasync在子任务中可能是另起一个线程执行任务，并且thenaccepasync可以自定义线程池，默认的使用forkjoinpool.commonpool()线程池。\n\n\n# 3.thenrun和thenrunasync\n\nthenrun表示某个任务执行完成后执行的动作，即回调方法，无入参，无返回值。\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<void> cf2 = cf1.thenrun(() -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        system.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n}\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<void> cf2 = cf1.thenrunasync(() -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n        });\n\n        //等待任务1执行完成\n        system.out.println("cf1结果->" + cf1.get());\n        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果：\n\n\n\n\n\n从上面代码和测试结果我们发现thenrun和thenrunasync区别在于，使用thenrun方法时子任务与父任务使用的是同一个线程，而thenrunasync在子任务中可能是另起一个线程执行任务，并且thenrunasync可以自定义线程池，默认的使用forkjoinpool.commonpool()线程池。\n\n\n# 4.whencomplete和whencompleteasync\n\nwhencomplete是当某个任务执行完成后执行的回调方法，会将执行结果或者执行期间抛出的异常传递给回调方法，如果是正常执行则异常为null，回调方法对应的completablefuture的result和该任务一致，如果该任务正常执行，则get方法返回执行结果，如果是执行异常，则get方法抛出异常。\n\n测试代码：\n\n public static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            int a = 1/0;\n            return 1;\n        });\n\n        completablefuture<integer> cf2 = cf1.whencomplete((result, e) -> {\n            system.out.println("上个任务结果：" + result);\n            system.out.println("上个任务抛出异常：" + e);\n            system.out.println(thread.currentthread() + " cf2 do something....");\n        });\n\n//        //等待任务1执行完成\n//        system.out.println("cf1结果->" + cf1.get());\n//        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n    }\n\n\n测试结果：\n\n\n\nwhencompleteasync和whencomplete区别也是whencompleteasync可能会另起一个线程执行任务，并且thenrunasync可以自定义线程池，默认的使用forkjoinpool.commonpool()线程池。\n\n\n# 5.handle和handleasync\n\n跟whencomplete基本一致，区别在于handle的回调方法有返回值。\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            // int a = 1/0;\n            return 1;\n        });\n\n        completablefuture<integer> cf2 = cf1.handle((result, e) -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n            system.out.println("上个任务结果：" + result);\n            system.out.println("上个任务抛出异常：" + e);\n            return result+2;\n        });\n\n        //等待任务2执行完成\n        system.out.println("cf2结果->" + cf2.get());\n}\n\n\n测试结果 ：\n\n\n\n\n# 三、多任务组合处理\n\n\n# 1.thencombine、thenacceptboth 和runafterboth\n\n这三个方法都是将两个completablefuture组合起来处理，只有两个任务都正常完成时，才进行下阶段任务。\n\n区别：thencombine会将两个任务的执行结果作为所提供函数的参数，且该方法有返回值；thenacceptboth同样将两个任务的执行结果作为方法入参，但是无返回值；runafterboth没有入参，也没有返回值。注意两个任务中只要有一个执行异常，则将该异常信息作为指定任务的执行结果。\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<integer> cf2 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n            return 2;\n        });\n\n        completablefuture<integer> cf3 = cf1.thencombine(cf2, (a, b) -> {\n            system.out.println(thread.currentthread() + " cf3 do something....");\n            return a + b;\n        });\n\n        system.out.println("cf3结果->" + cf3.get());\n}\n\n public static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<integer> cf2 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n            return 2;\n        });\n        \n        completablefuture<void> cf3 = cf1.thenacceptboth(cf2, (a, b) -> {\n            system.out.println(thread.currentthread() + " cf3 do something....");\n            system.out.println(a + b);\n        });\n\n        system.out.println("cf3结果->" + cf3.get());\n}\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<integer> cf1 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf1 do something....");\n            return 1;\n        });\n\n        completablefuture<integer> cf2 = completablefuture.supplyasync(() -> {\n            system.out.println(thread.currentthread() + " cf2 do something....");\n            return 2;\n        });\n\n        completablefuture<void> cf3 = cf1.runafterboth(cf2, () -> {\n            system.out.println(thread.currentthread() + " cf3 do something....");\n        });\n\n        system.out.println("cf3结果->" + cf3.get());\n}\n\n\n测试结果：\n\n\n\n\n\n\n\n\n# 2.applytoeither、accepteither和runaftereither\n\n这三个方法和上面一样也是将两个completablefuture组合起来处理，当有一个任务正常完成时，就会进行下阶段任务。\n\n区别：applytoeither会将已经完成任务的执行结果作为所提供函数的参数，且该方法有返回值；accepteither同样将已经完成任务的执行结果作为方法入参，但是无返回值；runaftereither没有入参，也没有返回值。\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<string> cf1 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf1 do something....");\n                thread.sleep(2000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            return "cf1 任务完成";\n        });\n\n        completablefuture<string> cf2 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf2 do something....");\n                thread.sleep(5000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            return "cf2 任务完成";\n        });\n\n        completablefuture<string> cf3 = cf1.applytoeither(cf2, (result) -> {\n            system.out.println("接收到" + result);\n            system.out.println(thread.currentthread() + " cf3 do something....");\n            return "cf3 任务完成";\n        });\n\n        system.out.println("cf3结果->" + cf3.get());\n}\n\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<string> cf1 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf1 do something....");\n                thread.sleep(2000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            return "cf1 任务完成";\n        });\n\n        completablefuture<string> cf2 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf2 do something....");\n                thread.sleep(5000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            return "cf2 任务完成";\n        });\n\n        completablefuture<void> cf3 = cf1.accepteither(cf2, (result) -> {\n            system.out.println("接收到" + result);\n            system.out.println(thread.currentthread() + " cf3 do something....");\n        });\n\n        system.out.println("cf3结果->" + cf3.get());\n}\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<string> cf1 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf1 do something....");\n                thread.sleep(2000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf1 任务完成");\n            return "cf1 任务完成";\n        });\n\n        completablefuture<string> cf2 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf2 do something....");\n                thread.sleep(5000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf2 任务完成");\n            return "cf2 任务完成";\n        });\n\n        completablefuture<void> cf3 = cf1.runaftereither(cf2, () -> {\n            system.out.println(thread.currentthread() + " cf3 do something....");\n            system.out.println("cf3 任务完成");\n        });\n\n        system.out.println("cf3结果->" + cf3.get());\n}\n\n\n测试结果：\n\n\n\n从上面可以看出cf1任务完成需要2秒，cf2任务完成需要5秒，使用applytoeither组合两个任务时，只要有其中一个任务完成时，就会执行cf3任务，显然cf1任务先完成了并且将自己任务的结果传值给了cf3任务，cf3任务中打印了接收到cf1任务完成，接着完成自己的任务，并返回cf3任务完成；accepteither和runaftereither类似，accepteither会将cf1任务的结果作为cf3任务的入参，但cf3任务完成时并无返回值；runaftereither不会将cf1任务的结果作为cf3任务的入参，它是没有任务入参，执行完自己的任务后也并无返回值。\n\n\n# 3.allof / anyof\n\nallof：completablefuture是多个任务都执行完成后才会执行，只有有一个任务执行异常，则返回的completablefuture执行get方法时会抛出异常，如果都是正常执行，则get返回null。\n\nanyof ：completablefuture是多个任务只要有一个任务执行完成，则返回的completablefuture执行get方法时会抛出异常，如果都是正常执行，则get返回执行完成任务的结果。\n\n测试代码：\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<string> cf1 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf1 do something....");\n                thread.sleep(2000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf1 任务完成");\n            return "cf1 任务完成";\n        });\n\n        completablefuture<string> cf2 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf2 do something....");\n                int a = 1/0;\n                thread.sleep(5000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf2 任务完成");\n            return "cf2 任务完成";\n        });\n\n        completablefuture<string> cf3 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf2 do something....");\n                thread.sleep(3000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf3 任务完成");\n            return "cf3 任务完成";\n        });\n\n        completablefuture<void> cfall = completablefuture.allof(cf1, cf2, cf3);\n        system.out.println("cfall结果->" + cfall.get());\n}\n\n\npublic static void main(string[] args) throws executionexception, interruptedexception {\n        completablefuture<string> cf1 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf1 do something....");\n                thread.sleep(2000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf1 任务完成");\n            return "cf1 任务完成";\n        });\n\n        completablefuture<string> cf2 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf2 do something....");\n                thread.sleep(5000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf2 任务完成");\n            return "cf2 任务完成";\n        });\n\n        completablefuture<string> cf3 = completablefuture.supplyasync(() -> {\n            try {\n                system.out.println(thread.currentthread() + " cf2 do something....");\n                thread.sleep(3000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("cf3 任务完成");\n            return "cf3 任务完成";\n        });\n\n        completablefuture<object> cfall = completablefuture.anyof(cf1, cf2, cf3);\n        system.out.println("cfall结果->" + cfall.get());\n}\n\n\n测试结果：\n\n\n\n\n\n本文转自 https://blog.csdn.net/zsx_xiaoxin/article/details/123898171，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706672187e3},{title:"说明",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",relativePath:"zs-se/设计模式/README.md",key:"v-df26d82c",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",lastUpdated:"2024年1月19日星期五凌晨12点46分",lastUpdatedTimestamp:1705596403e3,headersStr:null,content:"# 说明",normalizedContent:"# 说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705596403e3},{title:"se基础--反射机制--2.Class信息",frontmatter:{},regularPath:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--2.Class%E4%BF%A1%E6%81%AF.html",relativePath:"zs-se/基础/se基础--反射机制--2.Class信息.md",key:"v-db569cb2",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--2.Class%E4%BF%A1%E6%81%AF.html",headers:[{level:2,title:"class方法",slug:"class方法",normalizedTitle:"class方法",charIndex:28},{level:2,title:"哪些类型可以有Class对象",slug:"哪些类型可以有class对象",normalizedTitle:"哪些类型可以有class对象",charIndex:4907},{level:2,title:"类加载过程",slug:"类加载过程",normalizedTitle:"类加载过程",charIndex:5064},{level:2,title:"ClassLoader",slug:"classloader",normalizedTitle:"classloader",charIndex:305},{level:2,title:"什么时候会发生类初始化",slug:"什么时候会发生类初始化",normalizedTitle:"什么时候会发生类初始化",charIndex:5978},{level:2,title:"类的字面量",slug:"类的字面量",normalizedTitle:"类的字面量",charIndex:6299}],lastUpdated:"2024年1月23日星期二上午10点21分",lastUpdatedTimestamp:1705976498e3,headersStr:"class方法 哪些类型可以有Class对象 类加载过程 ClassLoader 什么时候会发生类初始化 类的字面量",content:'# se基础--反射机制--2.Class信息\n\n\n# class方法\n\n方法名                                                         功能\n一个静态方法获取字节码对象                                               \nstatic Class forName(String name)                           返回指定类名 name 的 Class 对象\n获取类加载器对象                                                    \nClassLoader getClassLoader()                                返回该类的类加载器\n                                                            \n获取类相关信息                                                     \ngetName()                                                   完整类名\ngetCanonicalName()\ngetSimpleName()                                             类名\nClass getSuperClass()                                       获得父类的Class对象\nClass getSuperclass()                                       获取超类的Class对象\nClass [] getInterfaces()                                    返回实现类class数组\nisInterface()                                               判断是否是接口\nPackage getPackage()                                        类所在的包\nisInstance()                                                判断是否可以强制类型转换\ncast()                                                      强制类型转换\n                                                            \n获取实例对象                                                      \nObject newInstance()                                        "虚拟构造器"。使用newInstance()来创建的类，\n                                                            必须带有无参数的构造器，通常设置为public\n                                                            \n构造器 Constructor                                             \ngetConstructors()                                           获取构造器\ngetDeclaredConstructors()\ngetConstructor()\ngetDeclaredConstructor()\nConstructor类中                                               \npublic int getModifiers();                                  取得修饰符\npublic String getName();                                    取得方法名称\npublic Class<?>[] getParameterTypes();                      取得参数的类型\n                                                            \n成员变量 Field                                                  \ngetFields()                                                 获取成员变量\ngetDeclaredFields()\ngetField(String name)\ngetDeclaredField(String name)\nMethod getMethod(String name,Class … paramTypes)            返回一个Method对象，此对象的形参类型为paramType\nField 类中                                                    \npublic int getModifiers()                                   以整数形式返回此Field的修饰符\npublic Class<?> getType()                                   得到Field的属性类型\npublic String getName()                                     返回Field的名称。\npublic Object get(Object obj)                               取得指定对象obj上此Field的属性内容\npublic void set(Object obj,Object value)                    设置指定对象obj上此Field的属性内容\n                                                            \n成员方法 Method                                                 \nMethod[] getMethods()                                       返回所有成员方法对象的数组（只能拿public的）\nMethod[] getDeclaredMethods()                               返回所有成员方法对象的数组，存在就能拿到\nMethod getMethod(String name, Class<?>... parameterTypes)   返回单个成员方法对象（只能拿public的）\nMethod getDeclaredMethod(String name, Class<?>...           返回单个成员方法对象，存在就能拿到\nparameterTypes)\nMethod 类中                                                   \npublic Class<?> getReturnType()                             取得全部的返回值\npublic Class<?>[] getParameterTypes()                       取得全部的参数\npublic int getModifiers()                                   取得修饰符\npublic Class<?>[] getExceptionTypes()                       取得异常信息\n                                                            \nAnnotation相关                                                \nget Annotation(Class<T> annotationClass)                    \ngetDeclaredAnnotations()                                    \n                                                            \n泛型相关                                                        \nType getGenericSuperclass()                                 获取父类泛型类型\nParameterizedType                                           泛型类型\ngetActualTypeArguments()                                    获取实际的泛型类型参数数组\n                                                            \n调用指定方法                                                      \nObject invoke(Object obj, Object[] args)                    若原方法无返回值，此时返回null\n                                                            若原方法若为静态方法，此时形参Object obj可为null\n                                                            若原方法形参列表为空，则Object[] args为null\n                                                            若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。\n                                                            \nsetAccessible                                               Method和Field、Constructor对象都有setAccessible()方法\n                                                            setAccessible启动和禁用访问安全检查的开关。\n\n\n# 哪些类型可以有Class对象\n\n（1）class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类 （2）interface：接口 （3）[]：数组 （4）enum：枚举 （5）annotation：注解@interface （6）primitive type：基本数据类型 （7）void\n\n\n# 类加载过程\n\n源文件---\x3eclass文件---\x3e加载\n\n类的加载：将字节码文件加载到内存的过程 运行时类：加载到内存中的类，此运行时类作为Class的实例\n\n类加载器的作用：\n\n * **类加载的作用：**将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。\n\n * **类缓存：**标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。\n\n * 加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。\n\n * 链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。\n   \n   * 验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题\n   \n   * 准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。\n   \n   * 解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。\n\n * 初始化：\n   \n   * 执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。\n   \n   * 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n   \n   * 虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。\n\n\n# ClassLoader\n\n类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的\n\n类的加载器。\n\n\n# 什么时候会发生类初始化\n\n类的主动引用（一定会发生类的初始化）\n\n * 当虚拟机启动，先初始化main方法所在的类\n\n * new一个类的对象\n\n * 调用类的静态成员（除了final常量）和静态方法\n\n * 使用java.lang.reflect包的方法对类进行反射调用\n\n * 当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类\n\n类的被动引用（不会发生类的初始化）\n\n * 当访问一个静态域时，只有真正声明这个域的类才会被初始化\n\n * 当通过子类引用父类的静态变量，不会导致子类初始化\n\n * 通过数组定义类引用，不会触发此类的初始化\n\n * 引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）\n\n\n# 类的字面量\n\n类.class\n\n适用于：普通类、接口、数组、基本数据类型\n\nTYPE\n\nTYPE字段是引用字段，指向对应的基本数据类型的Class对象\n\n...等价于...       \nboolean.class   Boolean.TYPE\nchar.class      Character.TYPE\nbyte.class      Byte.TYPE\nshort.class     Short.TYPE\nint.class       Integer.TYPE\nlong.class      Long.TYPE\nfloat.class     Float.TYPE\ndouble.class    Double.TYPE\nvoid.Class      Void.TYPE',normalizedContent:'# se基础--反射机制--2.class信息\n\n\n# class方法\n\n方法名                                                         功能\n一个静态方法获取字节码对象                                               \nstatic class forname(string name)                           返回指定类名 name 的 class 对象\n获取类加载器对象                                                    \nclassloader getclassloader()                                返回该类的类加载器\n                                                            \n获取类相关信息                                                     \ngetname()                                                   完整类名\ngetcanonicalname()\ngetsimplename()                                             类名\nclass getsuperclass()                                       获得父类的class对象\nclass getsuperclass()                                       获取超类的class对象\nclass [] getinterfaces()                                    返回实现类class数组\nisinterface()                                               判断是否是接口\npackage getpackage()                                        类所在的包\nisinstance()                                                判断是否可以强制类型转换\ncast()                                                      强制类型转换\n                                                            \n获取实例对象                                                      \nobject newinstance()                                        "虚拟构造器"。使用newinstance()来创建的类，\n                                                            必须带有无参数的构造器，通常设置为public\n                                                            \n构造器 constructor                                             \ngetconstructors()                                           获取构造器\ngetdeclaredconstructors()\ngetconstructor()\ngetdeclaredconstructor()\nconstructor类中                                               \npublic int getmodifiers();                                  取得修饰符\npublic string getname();                                    取得方法名称\npublic class<?>[] getparametertypes();                      取得参数的类型\n                                                            \n成员变量 field                                                  \ngetfields()                                                 获取成员变量\ngetdeclaredfields()\ngetfield(string name)\ngetdeclaredfield(string name)\nmethod getmethod(string name,class … paramtypes)            返回一个method对象，此对象的形参类型为paramtype\nfield 类中                                                    \npublic int getmodifiers()                                   以整数形式返回此field的修饰符\npublic class<?> gettype()                                   得到field的属性类型\npublic string getname()                                     返回field的名称。\npublic object get(object obj)                               取得指定对象obj上此field的属性内容\npublic void set(object obj,object value)                    设置指定对象obj上此field的属性内容\n                                                            \n成员方法 method                                                 \nmethod[] getmethods()                                       返回所有成员方法对象的数组（只能拿public的）\nmethod[] getdeclaredmethods()                               返回所有成员方法对象的数组，存在就能拿到\nmethod getmethod(string name, class<?>... parametertypes)   返回单个成员方法对象（只能拿public的）\nmethod getdeclaredmethod(string name, class<?>...           返回单个成员方法对象，存在就能拿到\nparametertypes)\nmethod 类中                                                   \npublic class<?> getreturntype()                             取得全部的返回值\npublic class<?>[] getparametertypes()                       取得全部的参数\npublic int getmodifiers()                                   取得修饰符\npublic class<?>[] getexceptiontypes()                       取得异常信息\n                                                            \nannotation相关                                                \nget annotation(class<t> annotationclass)                    \ngetdeclaredannotations()                                    \n                                                            \n泛型相关                                                        \ntype getgenericsuperclass()                                 获取父类泛型类型\nparameterizedtype                                           泛型类型\ngetactualtypearguments()                                    获取实际的泛型类型参数数组\n                                                            \n调用指定方法                                                      \nobject invoke(object obj, object[] args)                    若原方法无返回值，此时返回null\n                                                            若原方法若为静态方法，此时形参object obj可为null\n                                                            若原方法形参列表为空，则object[] args为null\n                                                            若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setaccessible(true)方法，将可访问private的方法。\n                                                            \nsetaccessible                                               method和field、constructor对象都有setaccessible()方法\n                                                            setaccessible启动和禁用访问安全检查的开关。\n\n\n# 哪些类型可以有class对象\n\n（1）class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类 （2）interface：接口 （3）[]：数组 （4）enum：枚举 （5）annotation：注解@interface （6）primitive type：基本数据类型 （7）void\n\n\n# 类加载过程\n\n源文件---\x3eclass文件---\x3e加载\n\n类的加载：将字节码文件加载到内存的过程 运行时类：加载到内存中的类，此运行时类作为class的实例\n\n类加载器的作用：\n\n * **类加载的作用：**将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.class对象，作为方法区中类数据的访问入口。\n\n * **类缓存：**标准的javase类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过jvm垃圾回收机制可以回收这些class对象。\n\n * 加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个class对象。这个加载的过程需要类加载器参与。\n\n * 链接：将java类的二进制代码合并到jvm的运行状态之中的过程。\n   \n   * 验证：确保加载的类信息符合jvm规范，例如：以cafe开头，没有安全方面的问题\n   \n   * 准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。\n   \n   * 解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。\n\n * 初始化：\n   \n   * 执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。\n   \n   * 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n   \n   * 虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。\n\n\n# classloader\n\n类加载器作用是用来把类(class)装载进内存的。jvm 规范定义了如下类型的\n\n类的加载器。\n\n\n# 什么时候会发生类初始化\n\n类的主动引用（一定会发生类的初始化）\n\n * 当虚拟机启动，先初始化main方法所在的类\n\n * new一个类的对象\n\n * 调用类的静态成员（除了final常量）和静态方法\n\n * 使用java.lang.reflect包的方法对类进行反射调用\n\n * 当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类\n\n类的被动引用（不会发生类的初始化）\n\n * 当访问一个静态域时，只有真正声明这个域的类才会被初始化\n\n * 当通过子类引用父类的静态变量，不会导致子类初始化\n\n * 通过数组定义类引用，不会触发此类的初始化\n\n * 引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）\n\n\n# 类的字面量\n\n类.class\n\n适用于：普通类、接口、数组、基本数据类型\n\ntype\n\ntype字段是引用字段，指向对应的基本数据类型的class对象\n\n...等价于...       \nboolean.class   boolean.type\nchar.class      character.type\nbyte.class      byte.type\nshort.class     short.type\nint.class       integer.type\nlong.class      long.type\nfloat.class     float.type\ndouble.class    double.type\nvoid.class      void.type',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705976498e3},{title:"hutool包的io整理",frontmatter:{title:"hutool包的io整理","autoGroup-1":"经典白学"},regularPath:"/zs-se/io/hutool%E6%95%B4%E7%90%86%E6%96%87%E6%A1%A3.html",relativePath:"zs-se/io/hutool整理文档.md",key:"v-4989ceee",path:"/zs-se/io/hutool%E6%95%B4%E7%90%86%E6%96%87%E6%A1%A3.html",headers:[{level:3,title:"FileUtil",slug:"fileutil",normalizedTitle:"fileutil",charIndex:114}],lastUpdated:"2023年12月11日星期一晚上7点36分",lastUpdatedTimestamp:1702294589e3,headersStr:"FileUtil",content:'官网： https://hutool.cn/ API文档： https://apidoc.gitee.com/dromara/hutool/\n\n中文使用文档： https://hutool.cn/docs/#/\n\n\n\n\n\n\n# FileUtil\n\n\n\n\n//可变参数名称\nFile file1 = FileUtil.file("D:\\\\", "aaa", "bbb", "a.txt");\nSystem.out.println(file1);//D:\\aaa\\bbb\\a.txt\n\n//父目录不存在则自动创建\nFile touch = FileUtil.touch(file1);\nSystem.out.println(touch);\n\n\nArrayList<String> list = new ArrayList<>();\nlist.add("aaa");\nlist.add("aaa");\nlist.add("aaa");\n//覆盖写\nFile file2 = FileUtil.writeLines(list, "D:\\\\a.txt", "UTF-8");\nSystem.out.println(file2);\n\nArrayList<String> list = new ArrayList<>();\nlist.add("aaa");\nlist.add("aaa");\nlist.add("aaa");\n//追加写\nFile file3 = FileUtil.appendLines(list, "D:\\\\a.txt", "UTF-8");\nSystem.out.println(file3);\n\n//读取行\nList<String> list = FileUtil.readLines("D:\\\\a.txt", "UTF-8");\nSystem.out.println(list);\n\n',normalizedContent:'官网： https://hutool.cn/ api文档： https://apidoc.gitee.com/dromara/hutool/\n\n中文使用文档： https://hutool.cn/docs/#/\n\n\n\n\n\n\n# fileutil\n\n\n\n\n//可变参数名称\nfile file1 = fileutil.file("d:\\\\", "aaa", "bbb", "a.txt");\nsystem.out.println(file1);//d:\\aaa\\bbb\\a.txt\n\n//父目录不存在则自动创建\nfile touch = fileutil.touch(file1);\nsystem.out.println(touch);\n\n\narraylist<string> list = new arraylist<>();\nlist.add("aaa");\nlist.add("aaa");\nlist.add("aaa");\n//覆盖写\nfile file2 = fileutil.writelines(list, "d:\\\\a.txt", "utf-8");\nsystem.out.println(file2);\n\narraylist<string> list = new arraylist<>();\nlist.add("aaa");\nlist.add("aaa");\nlist.add("aaa");\n//追加写\nfile file3 = fileutil.appendlines(list, "d:\\\\a.txt", "utf-8");\nsystem.out.println(file3);\n\n//读取行\nlist<string> list = fileutil.readlines("d:\\\\a.txt", "utf-8");\nsystem.out.println(list);\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702294589e3},{title:"se基础--反射机制--3.动态代理",frontmatter:{},regularPath:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--3.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",relativePath:"zs-se/基础/se基础--反射机制--3.动态代理.md",key:"v-127c4432",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--3.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",headers:[{level:2,title:"jdk动态代理API",slug:"jdk动态代理api",normalizedTitle:"jdk动态代理api",charIndex:401},{level:3,title:"代码演示",slug:"代码演示",normalizedTitle:"代码演示",charIndex:1349}],lastUpdated:"2024年1月23日星期二上午10点21分",lastUpdatedTimestamp:1705976498e3,headersStr:"jdk动态代理API 代码演示",content:'# se基础--反射机制--3.动态代理\n\n代理设计模式的原理:\n\n使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。\n\n * 之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。**最好可以通过一个代理类完成全部的代理功能。**动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。\n\n * 动态代理使用场合:\n\n * 调试\n\n * 远程方法调用\n\n * **动态代理相比于静态代理的优点：**抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法\n\n\n# jdk动态代理API\n\n> 静态代理\n\n//代理类\nclass ProxyClothFactory implements ClothFactory {\n    private ClothFactory factory;\n    public ProxyClothFactory(ClothFactory factory) {\n        this.factory = factory;\n    }\n    @Override\n    public void produceCloth() {\n        sout("代理前工作。。。");\n        factory.produceCloth;\n        sout("代理后工作");\n    }\n}\n\n//被代理类\nClass NikeClothFactory implements ClothFactory {\n    @Override\n    public void produceCloth() {\n        sout("nike....")\n    }\n}\n\n\n\nNikeClothFactory nike = new NikeClothFactory();\nProxyClothFactory proxyClothFactory = new ProxyClothFactory(nike);\nproxyClothFactory.produceCloth();\n\n\nProxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。\n\n方法                                                   作用\nstatic Class<?> getProxyClass(ClassLoader loader,    创建一个动态代理类所对应的Class对象\nClass<?>... interfaces)\nstatic Object newProxyInstance(ClassLoader loader,   直接创建一个动态代理对象\nClass<?>[] interfaces,InvocationHandler h)\n\n\n\n\n# 代码演示\n\n\n\n> 接口\n\npublic interface Human {\n    String getBelief();\n\n    void eat(String food);\n}\n\n\n> 被代理对象\n\n/**\n * 被代理类\n */\npublic class SuperMan implements Human{\n    @Override\n    public String getBelief() {\n        return "I believe I can fly!";\n    }\n\n    @Override\n    public void eat(String food) {\n        System.out.println("I\'m eating " + food);\n    }\n}\n\n\n> 代理工厂\n\n/**\n * 想要实现动态代理，需要解决的问题\n * 1、如何加载到内存中的被代理类，动态创建一个代理类的对象\n * 2、通过代理类的对象调用方法时，如何动态调用被代理类同名方法\n */\npublic class ProxyFactory {\n    public static Object getProxyInstance(Object obj){\n        /*\n        参数一：被代理类的 ClassLoader对象\n        参数二：被代理类的 接口字节码对象\n        参数三：实现这个接口InvocationHandler对象\n            参数一：代理对象\n            参数二：代理对象调用的方法\n            参数三：方法参数\n\n            方法反射调用：被代理对象，方法参数\n            return返回的是方法的返回值\n         */\n        return Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(),\n                (proxy, method, args) ->{\n                    System.out.println("代理执行了"+method.getName()+"方法");\n                    return method.invoke(obj, args);\n                });\n    }\n}\n\n\n> 测试\n\npublic class TestProxy {\n\n    @Test\n    public void test01(){\n        SuperMan superMan = new SuperMan();\n        Human proxyMan = (Human) ProxyFactory.getProxyInstance(superMan);\n        proxyMan.getBelief();\n        proxyMan.eat("麻辣烫");\n    }\n}\n',normalizedContent:'# se基础--反射机制--3.动态代理\n\n代理设计模式的原理:\n\n使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。\n\n * 之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。**最好可以通过一个代理类完成全部的代理功能。**动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。\n\n * 动态代理使用场合:\n\n * 调试\n\n * 远程方法调用\n\n * **动态代理相比于静态代理的优点：**抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法\n\n\n# jdk动态代理api\n\n> 静态代理\n\n//代理类\nclass proxyclothfactory implements clothfactory {\n    private clothfactory factory;\n    public proxyclothfactory(clothfactory factory) {\n        this.factory = factory;\n    }\n    @override\n    public void producecloth() {\n        sout("代理前工作。。。");\n        factory.producecloth;\n        sout("代理后工作");\n    }\n}\n\n//被代理类\nclass nikeclothfactory implements clothfactory {\n    @override\n    public void producecloth() {\n        sout("nike....")\n    }\n}\n\n\n\nnikeclothfactory nike = new nikeclothfactory();\nproxyclothfactory proxyclothfactory = new proxyclothfactory(nike);\nproxyclothfactory.producecloth();\n\n\nproxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。\n\n方法                                                   作用\nstatic class<?> getproxyclass(classloader loader,    创建一个动态代理类所对应的class对象\nclass<?>... interfaces)\nstatic object newproxyinstance(classloader loader,   直接创建一个动态代理对象\nclass<?>[] interfaces,invocationhandler h)\n\n\n\n\n# 代码演示\n\n\n\n> 接口\n\npublic interface human {\n    string getbelief();\n\n    void eat(string food);\n}\n\n\n> 被代理对象\n\n/**\n * 被代理类\n */\npublic class superman implements human{\n    @override\n    public string getbelief() {\n        return "i believe i can fly!";\n    }\n\n    @override\n    public void eat(string food) {\n        system.out.println("i\'m eating " + food);\n    }\n}\n\n\n> 代理工厂\n\n/**\n * 想要实现动态代理，需要解决的问题\n * 1、如何加载到内存中的被代理类，动态创建一个代理类的对象\n * 2、通过代理类的对象调用方法时，如何动态调用被代理类同名方法\n */\npublic class proxyfactory {\n    public static object getproxyinstance(object obj){\n        /*\n        参数一：被代理类的 classloader对象\n        参数二：被代理类的 接口字节码对象\n        参数三：实现这个接口invocationhandler对象\n            参数一：代理对象\n            参数二：代理对象调用的方法\n            参数三：方法参数\n\n            方法反射调用：被代理对象，方法参数\n            return返回的是方法的返回值\n         */\n        return proxy.newproxyinstance(obj.getclass().getclassloader(), obj.getclass().getinterfaces(),\n                (proxy, method, args) ->{\n                    system.out.println("代理执行了"+method.getname()+"方法");\n                    return method.invoke(obj, args);\n                });\n    }\n}\n\n\n> 测试\n\npublic class testproxy {\n\n    @test\n    public void test01(){\n        superman superman = new superman();\n        human proxyman = (human) proxyfactory.getproxyinstance(superman);\n        proxyman.getbelief();\n        proxyman.eat("麻辣烫");\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705976498e3},{title:"se基础--类的成员--5.内部类",frontmatter:{},regularPath:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98--5.%E5%86%85%E9%83%A8%E7%B1%BB.html",relativePath:"zs-se/基础/se基础--类的成员--5.内部类.md",key:"v-1f85e204",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98--5.%E5%86%85%E9%83%A8%E7%B1%BB.html",headers:[{level:2,title:"分类",slug:"分类",normalizedTitle:"分类",charIndex:97},{level:2,title:"局部内部类",slug:"局部内部类",normalizedTitle:"局部内部类",charIndex:111},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:536},{level:3,title:"如何声明局部内部类",slug:"如何声明局部内部类",normalizedTitle:"如何声明局部内部类",charIndex:823},{level:3,title:"演示局部内部类使用",slug:"演示局部内部类使用",normalizedTitle:"演示局部内部类使用",charIndex:1136},{level:3,title:"源码中的案例",slug:"源码中的案例",normalizedTitle:"源码中的案例",charIndex:1697},{level:2,title:"匿名内部类",slug:"匿名内部类",normalizedTitle:"匿名内部类",charIndex:421},{level:2,title:"成员内部类",slug:"成员内部类",normalizedTitle:"成员内部类",charIndex:132},{level:3,title:"特点",slug:"特点-2",normalizedTitle:"特点",charIndex:536},{level:3,title:"如何声明成员内部类",slug:"如何声明成员内部类",normalizedTitle:"如何声明成员内部类",charIndex:2781},{level:3,title:"实例化成员内部类",slug:"实例化成员内部类",normalizedTitle:"实例化成员内部类",charIndex:3884},{level:3,title:"成员内部类中区分调用外部类结构",slug:"成员内部类中区分调用外部类结构",normalizedTitle:"成员内部类中区分调用外部类结构",charIndex:4282},{level:3,title:"外部类调用成员内部类结构",slug:"外部类调用成员内部类结构",normalizedTitle:"外部类调用成员内部类结构",charIndex:5050}],lastUpdated:"2024年1月23日星期二上午10点21分",lastUpdatedTimestamp:1705976498e3,headersStr:"分类 局部内部类 特点 如何声明局部内部类 演示局部内部类使用 源码中的案例 匿名内部类 成员内部类 特点 如何声明成员内部类 实例化成员内部类 成员内部类中区分调用外部类结构 外部类调用成员内部类结构",content:'# se基础--类的成员--5.内部类\n\n当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\n\n\n# 分类\n\n按位置分：\n\n * 局部内部类（方法、构造器、代码块）\n * 成员内部类（静态、非静态）\n\n在Java中，内部类可以分为\n\n 1. 静态内部类（Static Nested Class）：静态内部类与普通内部类的唯一区别是，静态内部类在定义时需要使用static关键字。静态内部类不能访问外部类的非静态成员。\n 2. 非静态内部类（Non-Static Nested Class）：也被称为成员内部类。它访问外部类的所有成员（包括静态和非静态），包括其方法、变量等。非静态内部类在创建时需要一个外部类的实例。\n 3. 局部内部类（Local Inner Class）：在方法内部定义的内部类。它只能访问方法内的final变量和参数。\n 4. 匿名内部类（Anonymous Inner Class）：没有名称的内部类。这种类通常用于一次性实现接口或者抽象类。\n\n需要注意的是，对于局部内部类和匿名内部类，它们不能有构造函数，因为它们没有名称。\n\n\n# 局部内部类\n\n\n# 特点\n\n * 内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。\n * 只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。\n * 局部内部类可以使用外部类的成员，包括私有的。\n * 局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致。\n * 局部内部类和局部变量地位类似，不能使用public,protected,缺省,private\n * 局部内部类不能使用static修饰，因此也不能包含静态成员\n\n\n# 如何声明局部内部类\n\n声明在 方法、构造器、代码块中\n\nclass Person {\n    //方法内\n    public void method(){\n\t\t//局部内部类\n        class AA {\n            \n        }\n    }\n    \n    //构造器内\n    Person(){\n        class BB {\n            \n        }\n    }\n    \n    \n    //代码块内\n    {\n        //局部内部类\n        class CC {\n            \n        }\n    }\n}\n\n\n\n# 演示局部内部类使用\n\nclass Person {\n\n    //方式一\n    public Comparable getComparable() {\n        class MyComparable implements Comparable {\n            @Override\n            public int compareTo(Object o) {\n                // 实现比较逻辑\n                return 0;\n            }\n        }\n        return new MyComparable();\n    }\n    //匿名局部内部类\n    public Comparable getComparableTwo() {\n        return new  Comparable (){\n            @Override\n            public int compareTo(Object o) {\n                // 实现比较逻辑\n                return 0;\n            }\n        };\n    }\n}\n\n\n\n# 源码中的案例\n\n\n\n\n# 匿名内部类\n\n匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类\n\nnew 父类构造器（实参列表）|实现接口(){\n    //匿名内部类的类体部分\n}\n\n\n匿名内部类的特点\n\n * 匿名内部类必须继承父类或实现接口\n * 匿名内部类只能有一个对象\n * 匿名内部类对象只能使用多态形式引用\n\ninterface A {\n    public abstract void fun1();\n}\n\npublic class Outer {\n    public static void main(String[] args) {\n        new Outer().callInner(new A() {\n            //接口是不能new但此处比较特殊是子类对象实现接口，只不过没有为对象取名\n            public void fun1() {\n                System.out.println("implement for fun1 ");\n            }\n        });// 两步写成一步了\n    }\n\n    public void callInner(A a) {\n        a.fun1();\n    }\n}\n\n\n\n# 成员内部类\n\n\n# 特点\n\n成员内部类作为类的成员的角色：\n\n * 和外部类不同，Inner class还可以声明为private或protected；\n * 可以调用外部类的结构\n * Inner class 可以声明为static的，但此时就不能再使用外层类的非static的成员变量；\n\n成员内部类作为类的角色：\n\n * 可以在内部定义属性、方法、构造器等结构\n * 可以声明为abstract类 ，因此可以被其它的内部类继承\n * 可以声明为final的\n * 编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）\n\n【注意】\n\n * 非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。\n * 外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式\n * 成员内部类可以直接使用外部类的所有成员，包括私有的数据\n * 当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的\n\n\n# 如何声明成员内部类\n\nclass Person {\n    //非静态成员内部类\n    class AA {\n\n    }\n    //静态成员内部类\n    static class BB {\n        \n    }\n}\n\n\n> 一方面作为类：\n> \n>  * 类内部可以定义：属性、方法、构造器等\n>  * 可被final修饰\n>  * 可以被abstract修饰\n\nclass Person {\n    //非静态成员内部类\n    final class AA {\n\t\tString name;\n        public AA(){\n            \n        }\n        public void show(){\n            System.out.println("zs")\n        }\n    }\n    //静态成员内部类\n    static class BB {\n        String name;\n        int age;\n        public void show(){\n            System.out.println("zs")\n        }\n    }\n}\n\n\n> 二方面作为成员\n> \n>  * 静态内部类中只能调用外部类静态的方法或属性，非静态可以调用外部类成员方法\n>    \n>    省略了外部类.this.外部类方法()\n> \n>  * 可以被static修饰\n> \n>  * 可以被权限修饰符修饰\n\nclass Person {\n    public void eat(){\n        \n    }\n    \n    //非静态成员内部类\n    final class AA {\n\t\tString name;\n        public AA(){\n            //省略了Person.this.eat()\n            eat();\n        }\n        public void show(){\n            System.out.println("zs")\n        }\n    }\n    //静态成员内部类\n    static class BB {\n        String name;\n        int age;\n        public void show(){\n            System.out.println("zs")\n        }\n    }\n}\n\n\n\n# 实例化成员内部类\n\nclass Person {\n    //非静态成员内部类\n    class AA {\n        public void show(){\n            System.out.println("zs")\n        }\n    }\n    //静态成员内部类\n    static class BB {\n        public void show(){\n            System.out.println("zs")\n        }\n    }\n}\n\n\n//创建静态成员内部类对象\nPerson.BB bb = new Person.BB();\nbb.show();\n\n//创建非静态成员内部类对象\nPerson p = new Person();\nPerson.AA aa = p.new AA();\naa.show();\n\n\n\n# 成员内部类中区分调用外部类结构\n\nclass Person {\n    String name;\n    String age;\n    //外部类同名方法\n    public void show() {\n        System.out.println("外部类 show");\n    }\n    public void b() {\n        System.out.println("外部类 b");\n    }\n    //非静态成员内部类\n    class AA {\n        String name;\n\n        public void show(){\n            System.out.println("zs");\n        }\n        public void a(){\n            //调用外部类同名方法\n            Person.this.show();\n            //没有同名方法时可直接调用\n            b();\n        }\n        public void display(String name) {\n            //有同名时调用外部类属性\n            System.out.println(name);\n            System.out.println(this.name);\n            System.out.println(Person.this.name);\n            //没有同名时直接调用外部类属性\n            System.out.println(age);\n        }\n    }\n}\n\n\n\n\n# 外部类调用成员内部类结构\n\n非静态成员内部类\n\n * 外部类中可直接实例化内部类对象，且无视内部类中的所有权限修饰符，可直接操作\n\n * 其他类中实例化内部类对象受权限修饰符影响，且访问内部类成员也受内部类成员权限修饰符影响\n\n静态成员内部类\n\n * 外部类中可直接实例化内部类对象，且无视内部类中的所有权限修饰符，可直接操作\n * 这是因为静态内部类是静态的，不属于任何对象，所以它的访问权限不受外部类的影响。\n\nclass Person {\n    //外部类同名方法\n    public void show() {\n        System.out.println("外部类 show");\n        //=====调用内部类成员或方法=====\n        //实例化内部类对象\n        AA aa = new AA();\n        //可直接操作内部类私有的成员或方法\n        aa.show();\n        aa.name = "zs";\n\n        //=====调用内部类成员或方法=====\n        BB bb = new BB();\n        BB.age = "18";\n        bb.show();\n    }\n\n    //非静态成员内部类\n    private class AA {\n        private String name = "default";\n\n        private void show() {\n            System.out.println("内部类 show");\n        }\n    }\n\n    static class BB {\n        private String name = "default";\n        private static String age = "default";\n\n        private void show() {\n            System.out.println("内部类 show");\n        }\n    }\n}\n\n\nclass Outer {\n    private int s;\n    public class Inner {\n        public void mb() {\n            s = 100;\n            System.out.println("在内部类Inner中s=" + s);\n        }\n    }\n    public void ma() {\n        Inner i = new Inner();\n        i.mb();\n    }\n}\n\npublic class InnerTest {\n    public static void main(String args[]) {\n        Outer o = new Outer();\n        o.ma();\n    }\n}\n\n\npublic class Outer {\n    private int s = 111;\n\n    public class Inner {\n        private int s = 222;\n\n            public void mb(int s) {\n            System.out.println(s); // 局部变量s\n            System.out.println(this.s); // 内部类对象的属性s\n            System.out.println(Outer.this.s); // 外部类对象属性s\n        }\n    }\n\n    public static void main(String args[]) {\n        Outer a = new Outer();\n        Outer.Inner b = a.new Inner();\n        b.mb(333);\n    }\n}\n',normalizedContent:'# se基础--类的成员--5.内部类\n\n当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\n\n\n# 分类\n\n按位置分：\n\n * 局部内部类（方法、构造器、代码块）\n * 成员内部类（静态、非静态）\n\n在java中，内部类可以分为\n\n 1. 静态内部类（static nested class）：静态内部类与普通内部类的唯一区别是，静态内部类在定义时需要使用static关键字。静态内部类不能访问外部类的非静态成员。\n 2. 非静态内部类（non-static nested class）：也被称为成员内部类。它访问外部类的所有成员（包括静态和非静态），包括其方法、变量等。非静态内部类在创建时需要一个外部类的实例。\n 3. 局部内部类（local inner class）：在方法内部定义的内部类。它只能访问方法内的final变量和参数。\n 4. 匿名内部类（anonymous inner class）：没有名称的内部类。这种类通常用于一次性实现接口或者抽象类。\n\n需要注意的是，对于局部内部类和匿名内部类，它们不能有构造函数，因为它们没有名称。\n\n\n# 局部内部类\n\n\n# 特点\n\n * 内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。\n * 只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。\n * 局部内部类可以使用外部类的成员，包括私有的。\n * 局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致。\n * 局部内部类和局部变量地位类似，不能使用public,protected,缺省,private\n * 局部内部类不能使用static修饰，因此也不能包含静态成员\n\n\n# 如何声明局部内部类\n\n声明在 方法、构造器、代码块中\n\nclass person {\n    //方法内\n    public void method(){\n\t\t//局部内部类\n        class aa {\n            \n        }\n    }\n    \n    //构造器内\n    person(){\n        class bb {\n            \n        }\n    }\n    \n    \n    //代码块内\n    {\n        //局部内部类\n        class cc {\n            \n        }\n    }\n}\n\n\n\n# 演示局部内部类使用\n\nclass person {\n\n    //方式一\n    public comparable getcomparable() {\n        class mycomparable implements comparable {\n            @override\n            public int compareto(object o) {\n                // 实现比较逻辑\n                return 0;\n            }\n        }\n        return new mycomparable();\n    }\n    //匿名局部内部类\n    public comparable getcomparabletwo() {\n        return new  comparable (){\n            @override\n            public int compareto(object o) {\n                // 实现比较逻辑\n                return 0;\n            }\n        };\n    }\n}\n\n\n\n# 源码中的案例\n\n\n\n\n# 匿名内部类\n\n匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类\n\nnew 父类构造器（实参列表）|实现接口(){\n    //匿名内部类的类体部分\n}\n\n\n匿名内部类的特点\n\n * 匿名内部类必须继承父类或实现接口\n * 匿名内部类只能有一个对象\n * 匿名内部类对象只能使用多态形式引用\n\ninterface a {\n    public abstract void fun1();\n}\n\npublic class outer {\n    public static void main(string[] args) {\n        new outer().callinner(new a() {\n            //接口是不能new但此处比较特殊是子类对象实现接口，只不过没有为对象取名\n            public void fun1() {\n                system.out.println("implement for fun1 ");\n            }\n        });// 两步写成一步了\n    }\n\n    public void callinner(a a) {\n        a.fun1();\n    }\n}\n\n\n\n# 成员内部类\n\n\n# 特点\n\n成员内部类作为类的成员的角色：\n\n * 和外部类不同，inner class还可以声明为private或protected；\n * 可以调用外部类的结构\n * inner class 可以声明为static的，但此时就不能再使用外层类的非static的成员变量；\n\n成员内部类作为类的角色：\n\n * 可以在内部定义属性、方法、构造器等结构\n * 可以声明为abstract类 ，因此可以被其它的内部类继承\n * 可以声明为final的\n * 编译以后生成outerclass$innerclass.class字节码文件（也适用于局部内部类）\n\n【注意】\n\n * 非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。\n * 外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式\n * 成员内部类可以直接使用外部类的所有成员，包括私有的数据\n * 当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的\n\n\n# 如何声明成员内部类\n\nclass person {\n    //非静态成员内部类\n    class aa {\n\n    }\n    //静态成员内部类\n    static class bb {\n        \n    }\n}\n\n\n> 一方面作为类：\n> \n>  * 类内部可以定义：属性、方法、构造器等\n>  * 可被final修饰\n>  * 可以被abstract修饰\n\nclass person {\n    //非静态成员内部类\n    final class aa {\n\t\tstring name;\n        public aa(){\n            \n        }\n        public void show(){\n            system.out.println("zs")\n        }\n    }\n    //静态成员内部类\n    static class bb {\n        string name;\n        int age;\n        public void show(){\n            system.out.println("zs")\n        }\n    }\n}\n\n\n> 二方面作为成员\n> \n>  * 静态内部类中只能调用外部类静态的方法或属性，非静态可以调用外部类成员方法\n>    \n>    省略了外部类.this.外部类方法()\n> \n>  * 可以被static修饰\n> \n>  * 可以被权限修饰符修饰\n\nclass person {\n    public void eat(){\n        \n    }\n    \n    //非静态成员内部类\n    final class aa {\n\t\tstring name;\n        public aa(){\n            //省略了person.this.eat()\n            eat();\n        }\n        public void show(){\n            system.out.println("zs")\n        }\n    }\n    //静态成员内部类\n    static class bb {\n        string name;\n        int age;\n        public void show(){\n            system.out.println("zs")\n        }\n    }\n}\n\n\n\n# 实例化成员内部类\n\nclass person {\n    //非静态成员内部类\n    class aa {\n        public void show(){\n            system.out.println("zs")\n        }\n    }\n    //静态成员内部类\n    static class bb {\n        public void show(){\n            system.out.println("zs")\n        }\n    }\n}\n\n\n//创建静态成员内部类对象\nperson.bb bb = new person.bb();\nbb.show();\n\n//创建非静态成员内部类对象\nperson p = new person();\nperson.aa aa = p.new aa();\naa.show();\n\n\n\n# 成员内部类中区分调用外部类结构\n\nclass person {\n    string name;\n    string age;\n    //外部类同名方法\n    public void show() {\n        system.out.println("外部类 show");\n    }\n    public void b() {\n        system.out.println("外部类 b");\n    }\n    //非静态成员内部类\n    class aa {\n        string name;\n\n        public void show(){\n            system.out.println("zs");\n        }\n        public void a(){\n            //调用外部类同名方法\n            person.this.show();\n            //没有同名方法时可直接调用\n            b();\n        }\n        public void display(string name) {\n            //有同名时调用外部类属性\n            system.out.println(name);\n            system.out.println(this.name);\n            system.out.println(person.this.name);\n            //没有同名时直接调用外部类属性\n            system.out.println(age);\n        }\n    }\n}\n\n\n\n\n# 外部类调用成员内部类结构\n\n非静态成员内部类\n\n * 外部类中可直接实例化内部类对象，且无视内部类中的所有权限修饰符，可直接操作\n\n * 其他类中实例化内部类对象受权限修饰符影响，且访问内部类成员也受内部类成员权限修饰符影响\n\n静态成员内部类\n\n * 外部类中可直接实例化内部类对象，且无视内部类中的所有权限修饰符，可直接操作\n * 这是因为静态内部类是静态的，不属于任何对象，所以它的访问权限不受外部类的影响。\n\nclass person {\n    //外部类同名方法\n    public void show() {\n        system.out.println("外部类 show");\n        //=====调用内部类成员或方法=====\n        //实例化内部类对象\n        aa aa = new aa();\n        //可直接操作内部类私有的成员或方法\n        aa.show();\n        aa.name = "zs";\n\n        //=====调用内部类成员或方法=====\n        bb bb = new bb();\n        bb.age = "18";\n        bb.show();\n    }\n\n    //非静态成员内部类\n    private class aa {\n        private string name = "default";\n\n        private void show() {\n            system.out.println("内部类 show");\n        }\n    }\n\n    static class bb {\n        private string name = "default";\n        private static string age = "default";\n\n        private void show() {\n            system.out.println("内部类 show");\n        }\n    }\n}\n\n\nclass outer {\n    private int s;\n    public class inner {\n        public void mb() {\n            s = 100;\n            system.out.println("在内部类inner中s=" + s);\n        }\n    }\n    public void ma() {\n        inner i = new inner();\n        i.mb();\n    }\n}\n\npublic class innertest {\n    public static void main(string args[]) {\n        outer o = new outer();\n        o.ma();\n    }\n}\n\n\npublic class outer {\n    private int s = 111;\n\n    public class inner {\n        private int s = 222;\n\n            public void mb(int s) {\n            system.out.println(s); // 局部变量s\n            system.out.println(this.s); // 内部类对象的属性s\n            system.out.println(outer.this.s); // 外部类对象属性s\n        }\n    }\n\n    public static void main(string args[]) {\n        outer a = new outer();\n        outer.inner b = a.new inner();\n        b.mb(333);\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705976498e3},{title:"设计模式--3.2.7.结构型--代理模式",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.2.7.%E7%BB%93%E6%9E%84%E5%9E%8B--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",relativePath:"zs-se/设计模式/设计模式--3.2.7.结构型--代理模式.md",key:"v-6ac8ccd2",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.2.7.%E7%BB%93%E6%9E%84%E5%9E%8B--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",headers:[{level:2,title:"静态代理(接口、父类)",slug:"静态代理-接口、父类",normalizedTitle:"静态代理(接口、父类)",charIndex:273},{level:3,title:"静态代码模式的基本介绍",slug:"静态代码模式的基本介绍",normalizedTitle:"静态代码模式的基本介绍",charIndex:289},{level:3,title:"应用实例",slug:"应用实例",normalizedTitle:"应用实例",charIndex:362},{level:3,title:"代码实现",slug:"代码实现",normalizedTitle:"代码实现",charIndex:575},{level:3,title:"静态代理优缺点",slug:"静态代理优缺点",normalizedTitle:"静态代理优缺点",charIndex:1665},{level:2,title:"动态代理(jdk代理、接口代理)",slug:"动态代理-jdk代理、接口代理",normalizedTitle:"动态代理(jdk代理、接口代理)",charIndex:1783},{level:3,title:"动态代理模式的基本介绍",slug:"动态代理模式的基本介绍",normalizedTitle:"动态代理模式的基本介绍",charIndex:1804},{level:3,title:"JDK 中生成代理对象的 API",slug:"jdk-中生成代理对象的-api",normalizedTitle:"jdk 中生成代理对象的 api",charIndex:1926},{level:3,title:"应用实例",slug:"应用实例-2",normalizedTitle:"应用实例",charIndex:362},{level:3,title:"代码实现",slug:"代码实现-2",normalizedTitle:"代码实现",charIndex:575},{level:2,title:"Cglib 代理",slug:"cglib-代理",normalizedTitle:"cglib 代理",charIndex:210},{level:3,title:"Cglib 代理模式的基本介绍",slug:"cglib-代理模式的基本介绍",normalizedTitle:"cglib 代理模式的基本介绍",charIndex:4576},{level:3,title:"Cglib 代理模式实现步骤",slug:"cglib-代理模式实现步骤",normalizedTitle:"cglib 代理模式实现步骤",charIndex:4984},{level:3,title:"应用实例",slug:"应用实例-3",normalizedTitle:"应用实例",charIndex:362},{level:3,title:"代码实现+Debug 源码[待 debug]",slug:"代码实现-debug-源码-待-debug",normalizedTitle:"代码实现+debug 源码[待 debug]",charIndex:5214},{level:2,title:"几种常见的代理模式介绍— 几种变体",slug:"几种常见的代理模式介绍-几种变体",normalizedTitle:"几种常见的代理模式介绍— 几种变体",charIndex:7064}],lastUpdated:"2024年1月22日星期一晚上7点55分",lastUpdatedTimestamp:170592452e4,headersStr:"静态代理(接口、父类) 静态代码模式的基本介绍 应用实例 代码实现 静态代理优缺点 动态代理(jdk代理、接口代理) 动态代理模式的基本介绍 JDK 中生成代理对象的 API 应用实例 代码实现 Cglib 代理 Cglib 代理模式的基本介绍 Cglib 代理模式实现步骤 应用实例 代码实现+Debug 源码[待 debug] 几种常见的代理模式介绍— 几种变体",content:'# 设计模式--3.2.7.结构型--代理模式\n\n代理模式的基本介绍\n\n1）代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。 2）被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象 3） 代理模式有不同的形式, 主要有三种 静态代理、**动态代理 (JDK 代理、接口代理)**和 Cglib 代理 (可以在内存 动态的创建对象，而不需要实现接口， 他是属于动态代理的范畴) 。 4）代理模式示意图\n\n\n# 静态代理(接口、父类)\n\n\n# 静态代码模式的基本介绍\n\n静态代理在使用时,需要定义接口或者父类,被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同父类\n\n\n# 应用实例\n\n具体要求\n\n 1. 定义一个接口:ITeacherDao\n\n 2. 目标对象 TeacherDao 实现接口 ITeacherDao\n\n 3. 使用静态代理方式,就需要在代理对象 TeacherDaoProxy 中也实现 ITeacherDao\n\n 4. 调用的时候通过调用代理对象的方法来调用目标对象.\n\n 5. 特别提醒：代理对象与目标对象要实现相同的接口,然后通过调用相同的方法来调用目标对象的方法\n\n\n# 代码实现\n\npackage com.zs.design.proxy.staticproxy;\n\npublic class Client {\n    public static void main(String[] args) {\n        //创建目标对象(被代理对象)\n        TeacherDao teacherDao = new TeacherDao();\n\n        //创建代理对象, 同时将被代理对象传递给代理对象\n        TeacherDaoProxy teacherDaoProxy = new TeacherDaoProxy(teacherDao);\n\n        //通过代理对象, 调用被代理对象的方法\n        //即：执行的是代理对象的方法，代理对象再去调用目标对象的方法\n        teacherDaoProxy.teach();\n    }\n}\n\n\n//接口\npublic interface ITeacherDao {\n    void teach(); // 授课的方法\n}\n\n\npackage com.zs.design.proxy.staticproxy;\n\npublic class TeacherDao  implements ITeacherDao{\n    @Override\n    public void teach() {\n        System.out.println(" 老师授课中 。。。。。");\n    }\n}\n\n\npackage com.zs.design.proxy.staticproxy;\n\n//代理对象,静态代理\npublic class TeacherDaoProxy implements ITeacherDao{\n\n    private ITeacherDao target; // 目标对象，通过接口来聚合\n\n    //构造器\n    public TeacherDaoProxy(ITeacherDao target) {\n        this.target = target;\n    }\n\n    @Override\n    public void teach() {\n        System.out.println("开始代理 完成某些操作。。。。。 ");//方法\n        target.teach();\n        System.out.println("提交。。。。。");//方法\n    }\n}\n\n\n\n# 静态代理优缺点\n\n 1. 优点：在不修改目标对象的功能前提下, 能通过代理对象对目标功能扩展\n\n 2. 缺点：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类\n\n 3. 一旦接口增加方法,目标对象与代理对象都要维护\n\n\n# 动态代理(jdk代理、接口代理)\n\n\n# 动态代理模式的基本介绍\n\n 1. 代理对象,不需要实现接口，但是目标对象要实现接口，否则不能用动态代理\n\n 2. 代理对象的生成，是利用 JDK 的 API，动态的在内存中构建代理对象\n\n 3. 动态代理也叫做：JDK 代理、接口代理\n\n\n# JDK 中生成代理对象的 API\n\n 1. 代理类所在包:java.lang.reflect.Proxy\n\n 2. JDK 实现代理只需要使用 newProxyInstance 方法,但是该方法需要接收三个参数,完整的写法是: static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h )\n\n\n# 应用实例\n\n应用实例要求\n\n将前面的静态代理改进成动态代理模式(即：JDK 代理模式)\n\n思路图解(类图)\n\n\n# 代码实现\n\npackage com.zs.design.proxy.jdkproxy;\n\npublic class Client {\n    public static void main(String[] args) {\n        //创建目标对象(被代理对象)\n        TeacherDao target = new TeacherDao();\n\n        //给目标对象，创建代理对象, 可以转成 ITeacherDao\n        ITeacherDao proxyInstance = (ITeacherDao)new ProxyFactory(target).getProxyInstance();\n\n        // proxyInstance=class com.sun.proxy.$Proxy0 内存中动态生成了代理对象\n        System.out.println("proxyInstance=" + proxyInstance.getClass());\n\n        //通过代理对象，调用目标对象的方法\n        //proxyInstance.teach();\n        proxyInstance.sayHello(" tom ");\n    }\n}\n\n\npackage com.zs.design.proxy.jdkproxy;\n\n//接口\npublic interface ITeacherDao {\n    void teach(); // 授课的方法\n    void sayHello(String name);\n}\n\n\npackage com.zs.design.proxy.jdkproxy;\n\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class ProxyFactory {\n    //维护一个目标对象 , Object\n    private Object target;\n\n    //构造器 ， 对 target 进行初始化\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    //给目标对象 生成一个代理对象\n    public Object getProxyInstance() {\n        //说明\n        /*\n         * public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)\n        //1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定\n        //2. Class<?>[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型\n        //3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入\n        */\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        System.out.println("JDK 代理开始~~");\n                        //反射机制调用目标对象的方法\n                        Object returnVal = method.invoke(target, args);\n                        System.out.println("JDK 代理提交");\n                        return returnVal;\n                    }\n                });\n    }\n}\n\n\npackage com.zs.design.proxy.jdkproxy;\n\n\npublic class TeacherDao implements ITeacherDao {\n    @Override\n    public void teach() {\n        System.out.println(" 老师授课中 。。。。。");\n    }\n\n    @Override\n    public void sayHello(String name) {\n        System.out.println("hello " + name);\n    }\n}\n\n\n\n# Cglib 代理\n\n\n# Cglib 代理模式的基本介绍\n\n 1. 静态代理和 JDK 代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个单独的对象,并没有实 现任何的接口,这个时候可使用目标对象子类来实现代理-这就是 Cglib 代理\n 2. Cglib 代理也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能扩展, 有些书也将 Cglib 代 理归属到动态代理。\n 3. Cglib 是一个强大的高性能的代码生成包,它可以在运行期扩展 java 类与实现 java 接口.它广泛的被许多 AOP 的 框架使用,例如 Spring AOP，实现方法拦截\n 4. 在 AOP 编程中如何选择代理模式：\n    1. 目标对象需要实现接口，用 JDK 代理\n    2. 目标对象不需要实现接口，用 Cglib 代理\n 5. Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类\n\n\n# Cglib 代理模式实现步骤\n\n 1. 需要引入 cglib 的 jar 文件\n    \n    \n\n 2. 在内存中动态构建子类，注意代理的类不能为 final，否则报错java.lang.IllegalArgumentException:\n\n 3. 目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.\n\n\n# 应用实例\n\n应用实例要求\n\n将前面的案例用 Cglib 代理模式实现\n\n思路图解(类图)\n\n\n# 代码实现+Debug 源码[待 debug]\n\n<dependency>\n    <groupId>cglib</groupId>\n    <artifactId>cglib</artifactId>\n    <version>3.3.0</version>\n</dependency>\n\n\npackage com.zs.design.proxy.cglibproxy;\npublic class Client {\n    public static void main(String[] args) {\n        //创建目标对象\n        TeacherDao target = new TeacherDao();\n        //获取到代理对象，并且将目标对象传递给代理对象\n        TeacherDao proxyInstance = (TeacherDao) new ProxyFactory(target).getProxyInstance();\n        //执行代理对象的方法，触发 intecept 方法，从而实现 对目标对象的调用\n        String res = proxyInstance.teach();\n        System.out.println("res=" + res);\n    }\n}\n\n\npackage com.zs.design.proxy.cglibproxy;\n\nimport net.sf.cglib.proxy.Enhancer;\nimport net.sf.cglib.proxy.MethodInterceptor;\nimport net.sf.cglib.proxy.MethodProxy;\n\nimport java.lang.reflect.Method;\n\npublic class ProxyFactory implements MethodInterceptor {\n\n    //维护一个目标对象\n    private Object target;\n\n    //构造器，传入一个被代理的对象\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    //返回一个代理对象: 是 target 对象的代理对象\n    public Object getProxyInstance() {\n        //1. 创建一个工具类\n        Enhancer enhancer = new Enhancer();\n        //2. 设置父类\n        enhancer.setSuperclass(target.getClass());\n        //3. 设置回调函数\n        enhancer.setCallback(this);\n        //4. 创建子类对象，即代理对象\n        return enhancer.create();\n    }\n    //重写 intercept 方法，会调用目标对象的方法\n\n\n    @Override\n    public Object intercept(Object arg0, Method method, Object[] args, MethodProxy arg3) throws Throwable {\n        System.out.println("Cglib 代理模式 ~~ 开始");\n        Object returnVal = method.invoke(target, args);\n        System.out.println("Cglib 代理模式 ~~ 提交");\n        return returnVal;\n    }\n\n}\n\n\npackage com.zs.design.proxy.cglibproxy;\n\npublic class TeacherDao {\n    public String teach() {\n        System.out.println(" 老师授课中 ， 我是 cglib 代理，不需要实现接口 ");\n        return "hello";\n    }\n}\n\n\n\n# 几种常见的代理模式介绍— 几种变体\n\n 1. 防火墙代理 内网通过代理穿透防火墙，实现对公网的访问。\n\n 2. 缓存代理 比如：当请求图片文件等资源时，先到缓存代理取，如果取到资源则 ok,如果取不到资源，再到公网或者数据库取，然后缓存。\n\n 3. 远程代理 远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息。\n\n 4. 同步代理：主要使用在多线程编程中，完成多线程间同步工作 同步代理：主要使用在多线程编程中，完成多线程间同步工作',normalizedContent:'# 设计模式--3.2.7.结构型--代理模式\n\n代理模式的基本介绍\n\n1）代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。 2）被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象 3） 代理模式有不同的形式, 主要有三种 静态代理、**动态代理 (jdk 代理、接口代理)**和 cglib 代理 (可以在内存 动态的创建对象，而不需要实现接口， 他是属于动态代理的范畴) 。 4）代理模式示意图\n\n\n# 静态代理(接口、父类)\n\n\n# 静态代码模式的基本介绍\n\n静态代理在使用时,需要定义接口或者父类,被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同父类\n\n\n# 应用实例\n\n具体要求\n\n 1. 定义一个接口:iteacherdao\n\n 2. 目标对象 teacherdao 实现接口 iteacherdao\n\n 3. 使用静态代理方式,就需要在代理对象 teacherdaoproxy 中也实现 iteacherdao\n\n 4. 调用的时候通过调用代理对象的方法来调用目标对象.\n\n 5. 特别提醒：代理对象与目标对象要实现相同的接口,然后通过调用相同的方法来调用目标对象的方法\n\n\n# 代码实现\n\npackage com.zs.design.proxy.staticproxy;\n\npublic class client {\n    public static void main(string[] args) {\n        //创建目标对象(被代理对象)\n        teacherdao teacherdao = new teacherdao();\n\n        //创建代理对象, 同时将被代理对象传递给代理对象\n        teacherdaoproxy teacherdaoproxy = new teacherdaoproxy(teacherdao);\n\n        //通过代理对象, 调用被代理对象的方法\n        //即：执行的是代理对象的方法，代理对象再去调用目标对象的方法\n        teacherdaoproxy.teach();\n    }\n}\n\n\n//接口\npublic interface iteacherdao {\n    void teach(); // 授课的方法\n}\n\n\npackage com.zs.design.proxy.staticproxy;\n\npublic class teacherdao  implements iteacherdao{\n    @override\n    public void teach() {\n        system.out.println(" 老师授课中 。。。。。");\n    }\n}\n\n\npackage com.zs.design.proxy.staticproxy;\n\n//代理对象,静态代理\npublic class teacherdaoproxy implements iteacherdao{\n\n    private iteacherdao target; // 目标对象，通过接口来聚合\n\n    //构造器\n    public teacherdaoproxy(iteacherdao target) {\n        this.target = target;\n    }\n\n    @override\n    public void teach() {\n        system.out.println("开始代理 完成某些操作。。。。。 ");//方法\n        target.teach();\n        system.out.println("提交。。。。。");//方法\n    }\n}\n\n\n\n# 静态代理优缺点\n\n 1. 优点：在不修改目标对象的功能前提下, 能通过代理对象对目标功能扩展\n\n 2. 缺点：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类\n\n 3. 一旦接口增加方法,目标对象与代理对象都要维护\n\n\n# 动态代理(jdk代理、接口代理)\n\n\n# 动态代理模式的基本介绍\n\n 1. 代理对象,不需要实现接口，但是目标对象要实现接口，否则不能用动态代理\n\n 2. 代理对象的生成，是利用 jdk 的 api，动态的在内存中构建代理对象\n\n 3. 动态代理也叫做：jdk 代理、接口代理\n\n\n# jdk 中生成代理对象的 api\n\n 1. 代理类所在包:java.lang.reflect.proxy\n\n 2. jdk 实现代理只需要使用 newproxyinstance 方法,但是该方法需要接收三个参数,完整的写法是: static object newproxyinstance(classloader loader, class<?>[] interfaces,invocationhandler h )\n\n\n# 应用实例\n\n应用实例要求\n\n将前面的静态代理改进成动态代理模式(即：jdk 代理模式)\n\n思路图解(类图)\n\n\n# 代码实现\n\npackage com.zs.design.proxy.jdkproxy;\n\npublic class client {\n    public static void main(string[] args) {\n        //创建目标对象(被代理对象)\n        teacherdao target = new teacherdao();\n\n        //给目标对象，创建代理对象, 可以转成 iteacherdao\n        iteacherdao proxyinstance = (iteacherdao)new proxyfactory(target).getproxyinstance();\n\n        // proxyinstance=class com.sun.proxy.$proxy0 内存中动态生成了代理对象\n        system.out.println("proxyinstance=" + proxyinstance.getclass());\n\n        //通过代理对象，调用目标对象的方法\n        //proxyinstance.teach();\n        proxyinstance.sayhello(" tom ");\n    }\n}\n\n\npackage com.zs.design.proxy.jdkproxy;\n\n//接口\npublic interface iteacherdao {\n    void teach(); // 授课的方法\n    void sayhello(string name);\n}\n\n\npackage com.zs.design.proxy.jdkproxy;\n\n\nimport java.lang.reflect.invocationhandler;\nimport java.lang.reflect.method;\nimport java.lang.reflect.proxy;\n\npublic class proxyfactory {\n    //维护一个目标对象 , object\n    private object target;\n\n    //构造器 ， 对 target 进行初始化\n    public proxyfactory(object target) {\n        this.target = target;\n    }\n\n    //给目标对象 生成一个代理对象\n    public object getproxyinstance() {\n        //说明\n        /*\n         * public static object newproxyinstance(classloader loader,class<?>[] interfaces,invocationhandler h)\n        //1. classloader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定\n        //2. class<?>[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型\n        //3. invocationhandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入\n        */\n        return proxy.newproxyinstance(target.getclass().getclassloader(),\n                target.getclass().getinterfaces(),\n                new invocationhandler() {\n                    @override\n                    public object invoke(object proxy, method method, object[] args) throws throwable {\n                        system.out.println("jdk 代理开始~~");\n                        //反射机制调用目标对象的方法\n                        object returnval = method.invoke(target, args);\n                        system.out.println("jdk 代理提交");\n                        return returnval;\n                    }\n                });\n    }\n}\n\n\npackage com.zs.design.proxy.jdkproxy;\n\n\npublic class teacherdao implements iteacherdao {\n    @override\n    public void teach() {\n        system.out.println(" 老师授课中 。。。。。");\n    }\n\n    @override\n    public void sayhello(string name) {\n        system.out.println("hello " + name);\n    }\n}\n\n\n\n# cglib 代理\n\n\n# cglib 代理模式的基本介绍\n\n 1. 静态代理和 jdk 代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个单独的对象,并没有实 现任何的接口,这个时候可使用目标对象子类来实现代理-这就是 cglib 代理\n 2. cglib 代理也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能扩展, 有些书也将 cglib 代 理归属到动态代理。\n 3. cglib 是一个强大的高性能的代码生成包,它可以在运行期扩展 java 类与实现 java 接口.它广泛的被许多 aop 的 框架使用,例如 spring aop，实现方法拦截\n 4. 在 aop 编程中如何选择代理模式：\n    1. 目标对象需要实现接口，用 jdk 代理\n    2. 目标对象不需要实现接口，用 cglib 代理\n 5. cglib 包的底层是通过使用字节码处理框架 asm 来转换字节码并生成新的类\n\n\n# cglib 代理模式实现步骤\n\n 1. 需要引入 cglib 的 jar 文件\n    \n    \n\n 2. 在内存中动态构建子类，注意代理的类不能为 final，否则报错java.lang.illegalargumentexception:\n\n 3. 目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.\n\n\n# 应用实例\n\n应用实例要求\n\n将前面的案例用 cglib 代理模式实现\n\n思路图解(类图)\n\n\n# 代码实现+debug 源码[待 debug]\n\n<dependency>\n    <groupid>cglib</groupid>\n    <artifactid>cglib</artifactid>\n    <version>3.3.0</version>\n</dependency>\n\n\npackage com.zs.design.proxy.cglibproxy;\npublic class client {\n    public static void main(string[] args) {\n        //创建目标对象\n        teacherdao target = new teacherdao();\n        //获取到代理对象，并且将目标对象传递给代理对象\n        teacherdao proxyinstance = (teacherdao) new proxyfactory(target).getproxyinstance();\n        //执行代理对象的方法，触发 intecept 方法，从而实现 对目标对象的调用\n        string res = proxyinstance.teach();\n        system.out.println("res=" + res);\n    }\n}\n\n\npackage com.zs.design.proxy.cglibproxy;\n\nimport net.sf.cglib.proxy.enhancer;\nimport net.sf.cglib.proxy.methodinterceptor;\nimport net.sf.cglib.proxy.methodproxy;\n\nimport java.lang.reflect.method;\n\npublic class proxyfactory implements methodinterceptor {\n\n    //维护一个目标对象\n    private object target;\n\n    //构造器，传入一个被代理的对象\n    public proxyfactory(object target) {\n        this.target = target;\n    }\n\n    //返回一个代理对象: 是 target 对象的代理对象\n    public object getproxyinstance() {\n        //1. 创建一个工具类\n        enhancer enhancer = new enhancer();\n        //2. 设置父类\n        enhancer.setsuperclass(target.getclass());\n        //3. 设置回调函数\n        enhancer.setcallback(this);\n        //4. 创建子类对象，即代理对象\n        return enhancer.create();\n    }\n    //重写 intercept 方法，会调用目标对象的方法\n\n\n    @override\n    public object intercept(object arg0, method method, object[] args, methodproxy arg3) throws throwable {\n        system.out.println("cglib 代理模式 ~~ 开始");\n        object returnval = method.invoke(target, args);\n        system.out.println("cglib 代理模式 ~~ 提交");\n        return returnval;\n    }\n\n}\n\n\npackage com.zs.design.proxy.cglibproxy;\n\npublic class teacherdao {\n    public string teach() {\n        system.out.println(" 老师授课中 ， 我是 cglib 代理，不需要实现接口 ");\n        return "hello";\n    }\n}\n\n\n\n# 几种常见的代理模式介绍— 几种变体\n\n 1. 防火墙代理 内网通过代理穿透防火墙，实现对公网的访问。\n\n 2. 缓存代理 比如：当请求图片文件等资源时，先到缓存代理取，如果取到资源则 ok,如果取不到资源，再到公网或者数据库取，然后缓存。\n\n 3. 远程代理 远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息。\n\n 4. 同步代理：主要使用在多线程编程中，完成多线程间同步工作 同步代理：主要使用在多线程编程中，完成多线程间同步工作',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170592452e4},{title:"设计模式--2.设计模式概述",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--2.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0.html",relativePath:"zs-se/设计模式/设计模式--2.设计模式概述.md",key:"v-379be5aa",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--2.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0.html",headers:[{level:2,title:"掌握设计模式的层次",slug:"掌握设计模式的层次",normalizedTitle:"掌握设计模式的层次",charIndex:21},{level:2,title:"设计模式介绍",slug:"设计模式介绍",normalizedTitle:"设计模式介绍",charIndex:263},{level:2,title:"设计模式类型",slug:"设计模式类型",normalizedTitle:"设计模式类型",charIndex:582}],lastUpdated:"2024年1月22日星期一晚上7点55分",lastUpdatedTimestamp:170592452e4,headersStr:"掌握设计模式的层次 设计模式介绍 设计模式类型",content:"# 设计模式--2.设计模式概述\n\n\n# 掌握设计模式的层次\n\n 1. 第 1 层：刚开始学编程不久，听说过什么是设计模式\n 2. 第 2 层：有很长时间的编程经验，自己写了很多代码，其中用到了设计模式，但是自己却不知道\n 3. 第 3 层：学习过了设计模式，发现自己已经在使用了，并且发现了一些新的模式挺好用的\n 4. 第 4 层：阅读了很多别人写的源码和框架，在其中看到别人设计模式，并且能够领会设计模式的精妙和带来的好处。\n 5. 第 5 层：代码写着写着，自己都没有意识到使用了设计模式，并且熟练的写了出来。\n\n\n# 设计模式介绍\n\n 1. 设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式不是代码，而是某类问题的通用解决方案，设计模式（Design pattern）代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n 2. 设计模式的本质提高 软件的维护性，通用性和扩展性，并降低软件的复杂度。\n\n 3. <<设计模式>> 是经典的书，作者是 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides Design（俗称 “四人组 GOF”）\n\n 4. 设计模式并不局限于某种语言，java，php，c++ 都有设计模式.\n\n\n# 设计模式类型\n\n设计模式分为三种类型，共 23 种\n\n 1. 创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。\n\n 2. 结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n\n 3. 行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、 解释器模式（Interpreter 模式）、状态模式、策略模式、职责链模式(责任链模式)。\n\n注意：不同的书籍上对分类和名称略有差别",normalizedContent:"# 设计模式--2.设计模式概述\n\n\n# 掌握设计模式的层次\n\n 1. 第 1 层：刚开始学编程不久，听说过什么是设计模式\n 2. 第 2 层：有很长时间的编程经验，自己写了很多代码，其中用到了设计模式，但是自己却不知道\n 3. 第 3 层：学习过了设计模式，发现自己已经在使用了，并且发现了一些新的模式挺好用的\n 4. 第 4 层：阅读了很多别人写的源码和框架，在其中看到别人设计模式，并且能够领会设计模式的精妙和带来的好处。\n 5. 第 5 层：代码写着写着，自己都没有意识到使用了设计模式，并且熟练的写了出来。\n\n\n# 设计模式介绍\n\n 1. 设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式不是代码，而是某类问题的通用解决方案，设计模式（design pattern）代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n 2. 设计模式的本质提高 软件的维护性，通用性和扩展性，并降低软件的复杂度。\n\n 3. <<设计模式>> 是经典的书，作者是 erich gamma、richard helm、ralph johnson 和 john vlissides design（俗称 “四人组 gof”）\n\n 4. 设计模式并不局限于某种语言，java，php，c++ 都有设计模式.\n\n\n# 设计模式类型\n\n设计模式分为三种类型，共 23 种\n\n 1. 创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。\n\n 2. 结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n\n 3. 行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、 解释器模式（interpreter 模式）、状态模式、策略模式、职责链模式(责任链模式)。\n\n注意：不同的书籍上对分类和名称略有差别",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170592452e4},{title:"设计模式--0.Java 设计模式内容介绍",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--0.Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D.html",relativePath:"zs-se/设计模式/设计模式--0.Java 设计模式内容介绍.md",key:"v-83ed7e72",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--0.Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D.html",headers:[{level:2,title:"设计模式--0.Java 设计模式内容介绍",slug:"设计模式-0-java-设计模式内容介绍",normalizedTitle:"设计模式--0.java 设计模式内容介绍",charIndex:2},{level:3,title:"先看几个经典的面试题",slug:"先看几个经典的面试题",normalizedTitle:"先看几个经典的面试题",charIndex:28},{level:2,title:"设计模式的重要性",slug:"设计模式的重要性",normalizedTitle:"设计模式的重要性",charIndex:754}],lastUpdated:"2024年1月22日星期一晚上8点05分",lastUpdatedTimestamp:1705925105e3,headersStr:"设计模式--0.Java 设计模式内容介绍 先看几个经典的面试题 设计模式的重要性",content:'# 设计模式--0.Java 设计模式内容介绍\n\n\n# 先看几个经典的面试题\n\n# 原型设计模式问题\n\n 1. 有请使用 UML 类图画出原型模式核心角色\n\n 2. 原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写 clone 方法实现深拷贝、使用序 列化来实现深拷贝)\n\n 3. 在 Spring 框架中哪里使用到原型模式，并对源码进行分析\n    \n    beans.xml\n    <bean id="id01" class="com.atguigu.spring.bean.Monster" scope="prototype"/>\n    \n\n 4. Spring 中原型 bean 的创建，就是\n\n 5. 原型模式的应用\n\n 6. 代码分析+Debug 源码\n    \n    \n\n# 设计模式的七大原则\n\n要求：1) 七大设计原则核心思想 2) 能够以类图的说明设计原则 3) 在项目实际开发中，你在哪里使用到了 ocp 原则\n\n# 状态设计模式\n\n\n\n# 解释器设计模式\n\n 1. 介绍解释器设计模式是什么?\n\n 2. 画出解释器设计模式的 UML 类图,分析设计模式中的各个角色是什么?\n\n 3. 请说明 Spring 的框架中，哪里使用到了解释器设计模式，并做源码级别的分析\n\n 4. Spring 框架中 SpelExpressionParser 就使用到解释器模式\n\n 5. 代码分析+Debug 源码+模式角色分析说明\n    \n    \n\n# 单例模式\n\n单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的优点和缺点?\n\n单例设计模式一共有 8 种写法，后面我们会依次讲到 饿汉式 两种 懒汉式 三种 双重检查 静态内部类 枚举\n\n\n# 设计模式的重要性\n\n 1. 软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方 案。这个术语是由埃里希·伽玛（Erich Gamma）等人在 1990 年代从建筑设计领域引入到计算机科学的\n\n 2. 大厦 VS 简易房\n    \n    \n\n 3. 拿实际工作经历来说, 当一个项目开发完后，如果客户提出增新功能，怎么办?。（可扩展性,使用设计模式，软 件具有很好的扩展性）\n\n 4. 如果项目开发完后，原来程序员离职，你接手维护该项目怎么办? (维护性[可读性、规范性])\n\n 5. 目前程序员门槛越来越高，一线 IT 公司(大厂)，都会问你在实际项目中使用过什么设计模式，怎样使用的，解决了什么问题。\n\n 6. 设计模式在软件中哪里？`面向对象(oo)=>功能模块[设计模式+算法(数据结构)]=>框架[使用到多种设计模式]=>架构 [服务器集群]\n\n 7. 如果想成为合格软件工程师，那就花时间来研究下设计模式是非常必要的.',normalizedContent:'# 设计模式--0.java 设计模式内容介绍\n\n\n# 先看几个经典的面试题\n\n# 原型设计模式问题\n\n 1. 有请使用 uml 类图画出原型模式核心角色\n\n 2. 原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写 clone 方法实现深拷贝、使用序 列化来实现深拷贝)\n\n 3. 在 spring 框架中哪里使用到原型模式，并对源码进行分析\n    \n    beans.xml\n    <bean id="id01" class="com.atguigu.spring.bean.monster" scope="prototype"/>\n    \n\n 4. spring 中原型 bean 的创建，就是\n\n 5. 原型模式的应用\n\n 6. 代码分析+debug 源码\n    \n    \n\n# 设计模式的七大原则\n\n要求：1) 七大设计原则核心思想 2) 能够以类图的说明设计原则 3) 在项目实际开发中，你在哪里使用到了 ocp 原则\n\n# 状态设计模式\n\n\n\n# 解释器设计模式\n\n 1. 介绍解释器设计模式是什么?\n\n 2. 画出解释器设计模式的 uml 类图,分析设计模式中的各个角色是什么?\n\n 3. 请说明 spring 的框架中，哪里使用到了解释器设计模式，并做源码级别的分析\n\n 4. spring 框架中 spelexpressionparser 就使用到解释器模式\n\n 5. 代码分析+debug 源码+模式角色分析说明\n    \n    \n\n# 单例模式\n\n单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的优点和缺点?\n\n单例设计模式一共有 8 种写法，后面我们会依次讲到 饿汉式 两种 懒汉式 三种 双重检查 静态内部类 枚举\n\n\n# 设计模式的重要性\n\n 1. 软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方 案。这个术语是由埃里希·伽玛（erich gamma）等人在 1990 年代从建筑设计领域引入到计算机科学的\n\n 2. 大厦 vs 简易房\n    \n    \n\n 3. 拿实际工作经历来说, 当一个项目开发完后，如果客户提出增新功能，怎么办?。（可扩展性,使用设计模式，软 件具有很好的扩展性）\n\n 4. 如果项目开发完后，原来程序员离职，你接手维护该项目怎么办? (维护性[可读性、规范性])\n\n 5. 目前程序员门槛越来越高，一线 it 公司(大厂)，都会问你在实际项目中使用过什么设计模式，怎样使用的，解决了什么问题。\n\n 6. 设计模式在软件中哪里？`面向对象(oo)=>功能模块[设计模式+算法(数据结构)]=>框架[使用到多种设计模式]=>架构 [服务器集群]\n\n 7. 如果想成为合格软件工程师，那就花时间来研究下设计模式是非常必要的.',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705925105e3},{title:"设计模式--1.UML类图",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--1.UML%E7%B1%BB%E5%9B%BE.html",relativePath:"zs-se/设计模式/设计模式--1.UML类图.md",key:"v-1944b1b2",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--1.UML%E7%B1%BB%E5%9B%BE.html",headers:[{level:2,title:"UML 基本介绍",slug:"uml-基本介绍",normalizedTitle:"uml 基本介绍",charIndex:20},{level:2,title:"UML 图",slug:"uml-图",normalizedTitle:"uml 图",charIndex:268},{level:2,title:"UML 类图",slug:"uml-类图",normalizedTitle:"uml 类图",charIndex:507},{level:2,title:"类图—依赖关系（Dependence）",slug:"类图-依赖关系-dependence",normalizedTitle:"类图—依赖关系（dependence）",charIndex:846},{level:2,title:"类图—泛化关系(generalization）",slug:"类图-泛化关系-generalization",normalizedTitle:"类图—泛化关系(generalization）",charIndex:1350},{level:2,title:"类图—实现关系（Implementation）",slug:"类图-实现关系-implementation",normalizedTitle:"类图—实现关系（implementation）",charIndex:1652},{level:2,title:"类图—关联关系（Association）",slug:"类图-关联关系-association",normalizedTitle:"类图—关联关系（association）",charIndex:1898},{level:2,title:"类图—聚合关系（Aggregation）",slug:"类图-聚合关系-aggregation",normalizedTitle:"类图—聚合关系（aggregation）",charIndex:2258},{level:3,title:"基本介绍",slug:"基本介绍",normalizedTitle:"基本介绍",charIndex:24},{level:3,title:"应用实例",slug:"应用实例",normalizedTitle:"应用实例",charIndex:2441},{level:2,title:"类图—组合关系（Composition）",slug:"类图-组合关系-composition",normalizedTitle:"类图—组合关系（composition）",charIndex:2452},{level:3,title:"基本介绍",slug:"基本介绍-2",normalizedTitle:"基本介绍",charIndex:24},{level:3,title:"应用案例",slug:"应用案例",normalizedTitle:"应用案例",charIndex:2729}],lastUpdated:"2024年1月22日星期一晚上8点05分",lastUpdatedTimestamp:1705925105e3,headersStr:"UML 基本介绍 UML 图 UML 类图 类图—依赖关系（Dependence） 类图—泛化关系(generalization） 类图—实现关系（Implementation） 类图—关联关系（Association） 类图—聚合关系（Aggregation） 基本介绍 应用实例 类图—组合关系（Composition） 基本介绍 应用案例",content:"# 设计模式--1.UML类图\n\n\n# UML 基本介绍\n\n 1. UML——Unified modeling language UML (统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用 于帮助软件开发人员进行思考和记录思路的结果\n 2. UML 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他 们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等，如右图:\n\n 3. 使用 UML 来建模，常用的工具有 Rational Rose , 也可以使用一些插件来建模\n\n\n# UML 图\n\n画 UML 图与写文章差不多，都是把自己的思想描述给别人看，关键在于思路和条理，UML 图分类：\n\n 1. 用例图(use case)\n 2. 静态结构图：类图、对象图、包图、组件图、部署图\n 3. 动态行为图：交互图（时序图与协作图）、状态图、活动图\n\n说明：\n\n 1. 类图是描述类与类之间的关系的，是 UML 图中最核心的\n 2. 在讲解设计模式时，我们必然会使用类图，为了让学员们能够把设计模式学到位，需要先给大家讲解类图\n 3. 温馨提示：如果已经掌握 UML 类图的学员，可以直接听设计模式的章节\n\n\n# UML 类图\n\n 1. 用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系。\n 2. 类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合。\n 3. 类图简单举例\n\npublic class Person { //代码形式->类图\n    private Integer id;\n    private String name;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\n\n\n# 类图—依赖关系（Dependence）\n\n只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编绎都通过不了。\n\npublic class PersonServiceBean {\n    private PersonDao personDao;//类\n\n    public void save(Person person) {\n    }\n\n    public IDCard getIDCard(Integer personid) {\n    }\n\n    public void modify() {\n        Department department = new Department();\n    }\n}\npublic class PersonDao {}\npublic class IDCard {}\npublic class Person {}\npublic class Department {}\n\n\n对应的类图：\n\n小结\n\n 1. 类中用到了对方\n 2. 如果是类的成员属性\n 3. 如果是方法的返回类型\n 4. 是方法接收的参数类型\n 5. 方法中使用到\n\n\n# 类图—泛化关系(generalization）\n\n泛化关系实际上就是继承关系，他是依赖关系的特例\n\npublic abstract class DaoSupport {\n    public void save(Object entity) {\n    }\n\n    public void delete(Object id) {\n    }\n}\n\npublic class PersonServiceBean extends Daosupport { }\n\n\n对应的类图\n\n小结:\n\n 1. 泛化关系实际上就是继承关系\n\n 2. 如果 A 类继承了 B 类，我们就说 A 和 B 存在泛化关系\n\n\n# 类图—实现关系（Implementation）\n\n实现关系实际上就是 A 类实现 B 接口，他是依赖关系的特例\n\npublic interface PersonService {\n    public void delete(Interger id);\n}\n\npublic class PersonServiceBean implements PersonService {\n    public void delete(Interger id) {}\n}\n\n\n对应的类图\n\n小结:\n\n\n# 类图—关联关系（Association）\n\n关联关系实际上是类与类之间的联系，他是依赖关系的特例\n\n关联具有导航性：即双向关系或单向关系\n\n关系具有多重性：如“1”（表示有且仅有一个），“0...”（表示0个或者多个），“0,1”（表示0个或者一个），“n...m”（表示n到m个都可以），“m...*”（表示至少m个）。\n\n单向一对一关系\n\npublic class Person {\n    private IDCard card;\n}\npublic class IDCard {}\n\n\n双向一对一关系\n\npublic class Person {\n    private IDCard card;\n}\npublic class IDCard {\n    private Person card;\n}\n\n\n\n\n\n# 类图—聚合关系（Aggregation）\n\n\n# 基本介绍\n\n聚合关系（Aggregation）表示的是整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。\n\n如：一台电脑由键盘(keyboard)、显示器(monitor)，鼠标等组成； 组成电脑的各个配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示：\n\n\n# 应用实例\n\n\n\n\n# 类图—组合关系（Composition）\n\n\n# 基本介绍\n\n组合关系：也是整体与部分的关系，但是整体与部分不可以分开。\n\n基本介绍 组合关系：也是整体与部分的关系，但是整体与部分不可以分开。 再看一个案例：在程序中我们定义实体：Person 与 IDCard、Head, 那么 Head 和 Person 就是 组合，IDCard 和Person 就是聚合。\n\n但是如果在程序中 Person 实体中定义了对 IDCard 进行级联删除，即删除 Person 时连同 IDCard 一起删除，那么 IDCard 和 Person 就是组合了.\n\n\n# 应用案例\n\npublic class Person {\n    private IDCard card;\n    private Head head = new Head();\n}\n\npublic class IDCard { }\n\npublic class Head { }\n\n\n对应的类图:\n\n案例 2\n\npublic class Computer {\n    private Mouse mouse = new Mouse(); //鼠标可以和 computer 不能分离\n    private Moniter moniter = new Moniter();//显示器可以和 Computer 不能分离\n\n    public void setMouse(Mouse mouse) {\n        this.mouse = mouse;\n    }\n\n    public void setMoniter(Moniter moniter) {\n        this.moniter = moniter;\n    }\n}\n\npublic class Mouse { }\n\npublic class Moniter { }\n\n\n对应的类图",normalizedContent:"# 设计模式--1.uml类图\n\n\n# uml 基本介绍\n\n 1. uml——unified modeling language uml (统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用 于帮助软件开发人员进行思考和记录思路的结果\n 2. uml 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他 们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等，如右图:\n\n 3. 使用 uml 来建模，常用的工具有 rational rose , 也可以使用一些插件来建模\n\n\n# uml 图\n\n画 uml 图与写文章差不多，都是把自己的思想描述给别人看，关键在于思路和条理，uml 图分类：\n\n 1. 用例图(use case)\n 2. 静态结构图：类图、对象图、包图、组件图、部署图\n 3. 动态行为图：交互图（时序图与协作图）、状态图、活动图\n\n说明：\n\n 1. 类图是描述类与类之间的关系的，是 uml 图中最核心的\n 2. 在讲解设计模式时，我们必然会使用类图，为了让学员们能够把设计模式学到位，需要先给大家讲解类图\n 3. 温馨提示：如果已经掌握 uml 类图的学员，可以直接听设计模式的章节\n\n\n# uml 类图\n\n 1. 用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系。\n 2. 类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合。\n 3. 类图简单举例\n\npublic class person { //代码形式->类图\n    private integer id;\n    private string name;\n\n    public void setname(string name) {\n        this.name = name;\n    }\n\n    public string getname() {\n        return name;\n    }\n}\n\n\n\n# 类图—依赖关系（dependence）\n\n只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编绎都通过不了。\n\npublic class personservicebean {\n    private persondao persondao;//类\n\n    public void save(person person) {\n    }\n\n    public idcard getidcard(integer personid) {\n    }\n\n    public void modify() {\n        department department = new department();\n    }\n}\npublic class persondao {}\npublic class idcard {}\npublic class person {}\npublic class department {}\n\n\n对应的类图：\n\n小结\n\n 1. 类中用到了对方\n 2. 如果是类的成员属性\n 3. 如果是方法的返回类型\n 4. 是方法接收的参数类型\n 5. 方法中使用到\n\n\n# 类图—泛化关系(generalization）\n\n泛化关系实际上就是继承关系，他是依赖关系的特例\n\npublic abstract class daosupport {\n    public void save(object entity) {\n    }\n\n    public void delete(object id) {\n    }\n}\n\npublic class personservicebean extends daosupport { }\n\n\n对应的类图\n\n小结:\n\n 1. 泛化关系实际上就是继承关系\n\n 2. 如果 a 类继承了 b 类，我们就说 a 和 b 存在泛化关系\n\n\n# 类图—实现关系（implementation）\n\n实现关系实际上就是 a 类实现 b 接口，他是依赖关系的特例\n\npublic interface personservice {\n    public void delete(interger id);\n}\n\npublic class personservicebean implements personservice {\n    public void delete(interger id) {}\n}\n\n\n对应的类图\n\n小结:\n\n\n# 类图—关联关系（association）\n\n关联关系实际上是类与类之间的联系，他是依赖关系的特例\n\n关联具有导航性：即双向关系或单向关系\n\n关系具有多重性：如“1”（表示有且仅有一个），“0...”（表示0个或者多个），“0,1”（表示0个或者一个），“n...m”（表示n到m个都可以），“m...*”（表示至少m个）。\n\n单向一对一关系\n\npublic class person {\n    private idcard card;\n}\npublic class idcard {}\n\n\n双向一对一关系\n\npublic class person {\n    private idcard card;\n}\npublic class idcard {\n    private person card;\n}\n\n\n\n\n\n# 类图—聚合关系（aggregation）\n\n\n# 基本介绍\n\n聚合关系（aggregation）表示的是整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。\n\n如：一台电脑由键盘(keyboard)、显示器(monitor)，鼠标等组成； 组成电脑的各个配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示：\n\n\n# 应用实例\n\n\n\n\n# 类图—组合关系（composition）\n\n\n# 基本介绍\n\n组合关系：也是整体与部分的关系，但是整体与部分不可以分开。\n\n基本介绍 组合关系：也是整体与部分的关系，但是整体与部分不可以分开。 再看一个案例：在程序中我们定义实体：person 与 idcard、head, 那么 head 和 person 就是 组合，idcard 和person 就是聚合。\n\n但是如果在程序中 person 实体中定义了对 idcard 进行级联删除，即删除 person 时连同 idcard 一起删除，那么 idcard 和 person 就是组合了.\n\n\n# 应用案例\n\npublic class person {\n    private idcard card;\n    private head head = new head();\n}\n\npublic class idcard { }\n\npublic class head { }\n\n\n对应的类图:\n\n案例 2\n\npublic class computer {\n    private mouse mouse = new mouse(); //鼠标可以和 computer 不能分离\n    private moniter moniter = new moniter();//显示器可以和 computer 不能分离\n\n    public void setmouse(mouse mouse) {\n        this.mouse = mouse;\n    }\n\n    public void setmoniter(moniter moniter) {\n        this.moniter = moniter;\n    }\n}\n\npublic class mouse { }\n\npublic class moniter { }\n\n\n对应的类图",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705925105e3},{title:"se基础--反射机制--1.反射",frontmatter:{},regularPath:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--1.%E5%8F%8D%E5%B0%84.html",relativePath:"zs-se/基础/se基础--反射机制--1.反射.md",key:"v-085160c4",path:"/zs-se/%E5%9F%BA%E7%A1%80/se%E5%9F%BA%E7%A1%80--%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6--1.%E5%8F%8D%E5%B0%84.html",headers:[{level:2,title:"1.1 反射的概述：",slug:"_1-1-反射的概述",normalizedTitle:"1.1 反射的概述：",charIndex:23},{level:2,title:"1.2 反射学习内容",slug:"_1-2-反射学习内容",normalizedTitle:"1.2 反射学习内容",charIndex:611},{level:2,title:"1.3 获取字节码文件对象（4种）",slug:"_1-3-获取字节码文件对象-4种",normalizedTitle:"1.3 获取字节码文件对象（4种）",charIndex:738},{level:2,title:"1.4 获取构造方法",slug:"_1-4-获取构造方法",normalizedTitle:"1.4 获取构造方法",charIndex:1761},{level:2,title:"1.5 创建对象",slug:"_1-5-创建对象",normalizedTitle:"1.5 创建对象",charIndex:3540},{level:2,title:"1.6 获取成员变量",slug:"_1-6-获取成员变量",normalizedTitle:"1.6 获取成员变量",charIndex:4609},{level:3,title:"修改成员变量",slug:"修改成员变量",normalizedTitle:"修改成员变量",charIndex:6610},{level:2,title:"1.7 获取成员方法",slug:"_1-7-获取成员方法",normalizedTitle:"1.7 获取成员方法",charIndex:8154},{level:3,title:"执行成员方法",slug:"执行成员方法",normalizedTitle:"执行成员方法",charIndex:9659},{level:2,title:"面试题：",slug:"面试题",normalizedTitle:"面试题：",charIndex:11212},{level:2,title:"练习：泛型擦除（掌握概念，了解代码）",slug:"练习-泛型擦除-掌握概念-了解代码",normalizedTitle:"练习：泛型擦除（掌握概念，了解代码）",charIndex:11325},{level:2,title:"练习：修改字符串的内容（掌握概念，了解代码）",slug:"练习-修改字符串的内容-掌握概念-了解代码",normalizedTitle:"练习：修改字符串的内容（掌握概念，了解代码）",charIndex:12137},{level:2,title:"练习：反射和配置文件结合动态获取的练习（重点）",slug:"练习-反射和配置文件结合动态获取的练习-重点",normalizedTitle:"练习：反射和配置文件结合动态获取的练习（重点）",charIndex:12964},{level:2,title:"利用反射保存对象中的信息（重点）",slug:"利用反射保存对象中的信息-重点",normalizedTitle:"利用反射保存对象中的信息（重点）",charIndex:14188}],lastUpdated:"2024年1月23日星期二上午10点21分",lastUpdatedTimestamp:1705976498e3,headersStr:"1.1 反射的概述： 1.2 反射学习内容 1.3 获取字节码文件对象（4种） 1.4 获取构造方法 1.5 创建对象 1.6 获取成员变量 修改成员变量 1.7 获取成员方法 执行成员方法 面试题： 练习：泛型擦除（掌握概念，了解代码） 练习：修改字符串的内容（掌握概念，了解代码） 练习：反射和配置文件结合动态获取的练习（重点） 利用反射保存对象中的信息（重点）",content:'# se基础--反射机制--1.反射\n\n\n# 1.1 反射的概述：\n\nReflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。\n\nJava反射机制提供的功能\n\n * 在运行时判断任意一个对象所属的类\n\n * 在运行时构造任意一个类的对象\n\n * 在运行时判断任意一个类所具有的成员变量和方法\n\n * 在运行时获取泛型信息\n\n * 在运行时调用任意一个对象的成员变量和方法\n\n * 在运行时处理注解\n\n * 生成动态代理\n\njava.lang.Class:代表一个类 **java.lang.reflect.Method:**代表类的方法 **java.lang.reflect.Field:**代表类的成员变量 **java.lang.reflect.Constructor:**代表类的构造器\n\nClass本身也是一个类 Class 对象只能由系统建立对象 一个加载的类在 JVM 中只会有一个Class实例 一个Class对象对应的是一个加载到JVM中的一个.class文件 每个类的实例都会记得自己是由哪个 Class 实例所生成 通过Class可以完整地得到一个类中的所有被加载的结构 Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象\n\n\n# 1.2 反射学习内容\n\n反射都是从class字节码文件中获取的内容。\n\n * 如何获取class字节码文件的对象\n * 利用反射如何获取构造方法（创建对象）\n * 利用反射如何获取成员变量（赋值，获取值）\n * 利用反射如何获取成员方法（运行）\n\n\n# 1.3 获取字节码文件对象（4种）\n\n * 全限定名：Class.forName("全类名")（最常用）\n * 字面量获取：类.class\n * 对象获取：obj.getClass()\n * classLoader获取：classLoader.loadClass("全类名")\n\n代码示例：\n\n//1.Class这个类里面的静态方法forName\n//Class.forName("类的全类名")： 全类名 = 包名 + 类名\nClass clazz1 = Class.forName("com.itheima.reflectdemo.Student");\n//源代码阶段获取 --- 先把Student加载到内存中，再获取字节码文件的对象\n//clazz 就表示Student这个类的字节码文件对象。\n//就是当Student.class这个文件加载到内存之后，产生的字节码文件对象\n\n\n//2.通过class属性获取\n//类名.class\nClass clazz2 = Student.class;\n\n//因为class文件在硬盘中是唯一的，所以，当这个文件加载到内存之后产生的对象也是唯一的\nSystem.out.println(clazz1 == clazz2);//true\n\n\n//3.通过Student对象获取字节码文件对象\nStudent s = new Student();\nClass clazz3 = s.getClass();\nSystem.out.println(clazz1 == clazz2);//true\nSystem.out.println(clazz2 == clazz3);//true\n\n//4.classLoader获取\nClassLoader cl = this.getClass().getClassLoader();\nClass clazz4 = cl.loadClass(“类的全类名”);\n\n\n> 字节码文件和字节码文件对象\n\njava文件：就是我们自己编写的java代码。\n\n字节码文件：就是通过java文件编译之后的class文件（是在硬盘上真实存在的，用眼睛能看到的）\n\n字节码文件对象：当class文件加载到内存之后，虚拟机自动创建出来的对象。\n\n这个对象里面至少包含了：构造方法，成员变量，成员方法。\n\n而我们的反射获取的是什么？字节码文件对象，这个对象在内存中是唯一的。\n\n\n# 1.4 获取构造方法\n\n方法名                                                         说明\nConstructor<?>[] getConstructors()                          获得所有的构造（只能public修饰）\nConstructor<?>[] getDeclaredConstructors()                  获得所有的构造（包含private修饰）\nConstructor<T> getConstructor(Class<?>... parameterTypes)   获取指定构造（只能public修饰）\nConstructor<T> getDeclaredConstructor(Class<?>...           获取指定构造（包含private修饰）\nparameterTypes)\n\n代码示例：\n\npublic class ReflectDemo2 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException {\n        //1.获得整体（class字节码文件对象）\n        Class clazz = Class.forName("com.itheima.reflectdemo.Student");\n\n\n        //获取所有构造方法（public）\n        Constructor[] constructors1 = clazz.getConstructors();\n        for (Constructor constructor : constructors1) {\n            System.out.println(constructor);\n        }\n        System.out.println("=======================");\n\n        //获取所有构造（带私有的）\n        Constructor[] constructors2 = clazz.getDeclaredConstructors();\n        for (Constructor constructor : constructors2) {\n            System.out.println(constructor);\n        }\n        System.out.println("=======================");\n\n        //获取指定的空参构造\n        Constructor con1 = clazz.getConstructor();\n        System.out.println(con1);\n\n        Constructor con2 = clazz.getConstructor(String.class,int.class);\n        System.out.println(con2);\n\n        System.out.println("=======================");\n        //获取指定的构造(所有构造都可以获取到，包括public包括private)\n        Constructor con3 = clazz.getDeclaredConstructor();\n        System.out.println(con3);\n        //了解 System.out.println(con3 == con1);\n        //每一次获取构造方法对象的时候，都会新new一个。\n\n        Constructor con4 = clazz.getDeclaredConstructor(String.class);\n        System.out.println(con4);\n    }\n}\n\n\n\n# 1.5 创建对象\n\n字节码对象：clazz.newInstance()\n\n构造器对象：con.newInstance()\n\n代码示例：\n\n//首先要有一个javabean类\npublic class Student {\n    private String name;\n    private int age;\n\n    public Student() {\n    }\n\n    public Student(String name) {\n        this.name = name;\n    }\n    private Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    ...get...set...tostring...\n}\n\n\n//测试类中的代码：\n//需求1：\n//获取空参，并创建对象\n//1.获取整体的字节码文件对象\nClass clazz = Class.forName("com.itheima.a02reflectdemo1.Student");\n//2.获取空参的构造方法\nConstructor con = clazz.getConstructor();\n//3.利用空参构造方法创建对象\nStudent stu = (Student) con.newInstance();\nSystem.out.println(stu);\n\n\nSystem.out.println("=============================================");\n\n\n//测试类中的代码：\n//需求2：\n//获取带参构造，并创建对象\n//1.获取整体的字节码文件对象\nClass clazz = Class.forName("com.itheima.a02reflectdemo1.Student");\n//2.获取有参构造方法\nConstructor con = clazz.getDeclaredConstructor(String.class, int.class);\n//3.临时修改构造方法的访问权限（暴力反射）\ncon.setAccessible(true);\n//4.直接创建对象\nStudent stu = (Student) con.newInstance("zhangsan", 23);\nSystem.out.println(stu);\n\n\n\n# 1.6 获取成员变量\n\n方法名                                   说明\nField[] getFields()                   返回所有成员变量对象的数组（只能拿public的）\nField[] getDeclaredFields()           返回所有成员变量对象的数组，存在就能拿到\nField getField(String name)           返回单个成员变量对象（只能拿public的）\nField getDeclaredField(String name)   返回单个成员变量对象，存在就能拿到\n\n代码示例：\n\npublic class ReflectDemo4 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n        //1.获取class对象\n        Class clazz = Class.forName("com.itheima.reflectdemo.Student");\n\n        //2.getFields() 获取成员变量的对象（Field对象)只能获取public修饰的\n        Field[] fields1 = clazz.getFields();\n        for (Field field : fields1) {\n            System.out.println(field);\n        }\n        System.out.println("===============================");\n\n        //getDeclaredFields()获取成员变量的对象（public + private）\n        Field[] fields2 = clazz.getDeclaredFields();\n        for (Field field : fields2) {\n            System.out.println(field);\n        }\n        System.out.println("===============================");\n        \n        //获得单个成员变量对象\n        //如果获取的属性是不存在的，那么会报异常\n        //Field field3 = clazz.getField("aaa");\n        //System.out.println(field3);//NoSuchFieldException\n        Field field4 = clazz.getField("gender");\n        System.out.println(field4);\n\n        System.out.println("===============================");\n        //获取单个成员变量（私有）\n        Field field5 = clazz.getDeclaredField("name");\n        System.out.println(field5);\n    }\n}\n\npublic class Student {\n    private String name;\n    private int age;\n    public String gender;\n    public String address;\n\n    public Student() {\n    }\n\n    public Student(String name, int age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n    public Student(String name, int age, String gender, String address) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.address = address;\n    }\n\t...get...set...tostring...\n}\n\n\n\n# 修改成员变量\n\n方法                                   说明\nvoid set(Object obj, Object value）   赋值\nObject get(Object obj)               获取值\n\n示例\n\npublic class ReflectDemo5 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n        Student s = new Student("zhangsan",23,"广州");\n        Student ss = new Student("lisi",24,"北京");\n\n        //需求：\n        //利用反射获取成员变量并获取值和修改值\n        //1.获取class对象\n        Class clazz = Class.forName("com.itheima.reflectdemo.Student");\n\n        //2.获取name成员变量\n        //field就表示name这个属性的对象\n        Field field = clazz.getDeclaredField("name");\n        //临时修饰他的访问权限\n        field.setAccessible(true);\n\n        //3.设置(修改)name的值\n        //参数一：表示要修改哪个对象的name？\n        //参数二：表示要修改为多少？\n        field.set(s,"wangwu");\n\n        //3.获取name的值\n        //表示我要获取这个对象的name的值\n        String result = (String)field.get(s);\n\n        //4.打印结果\n        System.out.println(result);\n\n        System.out.println(s);\n        System.out.println(ss);\n\n    }\n}\n\n\npublic class Student {\n    private String name;\n    private int age;\n    public String gender;\n    public String address;\n\n\n    public Student() {\n    }\n\n    public Student(String name, int age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n\n    public Student(String name, int age, String gender, String address) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.address = address;\n    }\n\n\t...get...set...\n}\n\n\n\n# 1.7 获取成员方法\n\n方法名                                                         说明\nMethod[] getMethods()                                       返回所有成员方法对象的数组（只能拿public的）\nMethod[] getDeclaredMethods()                               返回所有成员方法对象的数组，存在就能拿到\nMethod getMethod(String name, Class<?>... parameterTypes)   返回单个成员方法对象（只能拿public的）\nMethod getDeclaredMethod(String name, Class<?>...           返回单个成员方法对象，存在就能拿到\nparameterTypes)\n\n代码示例：\n\npublic class ReflectDemo6 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException {\n        //1.获取class对象\n        Class<?> clazz = Class.forName("com.itheima.reflectdemo.Student");\n\n\n        //2.获取方法\n        //getMethods可以获取父类中public修饰的方法\n        Method[] methods1 = clazz.getMethods();\n        for (Method method : methods1) {\n            System.out.println(method);\n        }\n\n        System.out.println("===========================");\n        //获取所有的方法（包含私有）\n        //但是只能获取自己类中的方法\n        Method[] methods2 = clazz.getDeclaredMethods();\n        for (Method method : methods2) {\n            System.out.println(method);\n        }\n\n        System.out.println("===========================");\n        //获取指定的方法（空参）\n        Method method3 = clazz.getMethod("sleep");\n        System.out.println(method3);\n\n        Method method4 = clazz.getMethod("eat",String.class);\n        System.out.println(method4);\n\n        //获取指定的私有方法\n        Method method5 = clazz.getDeclaredMethod("playGame");\n        System.out.println(method5);\n    }\n}\n\n\n\n# 执行成员方法\n\nObject invoke(Object obj, Object... args)：运行方法\n\n代码示例：\n\npackage com.itheima.a02reflectdemo1;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class ReflectDemo6 {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        //1.获取字节码文件对象\n        Class clazz = Class.forName("com.itheima.a02reflectdemo1.Student");\n\t\t\n        //2.获取一个对象\n        //需要用这个对象去调用方法\n        Student s = new Student();\n        \n        //3.获取一个指定的方法\n        //参数一：方法名\n        //参数二：参数列表，如果没有可以不写\n        Method eatMethod = clazz.getMethod("eat",String.class);\n        \n        //运行\n        //参数一：表示方法的调用对象\n        //参数二：方法在运行时需要的实际参数\n        //注意点：如果方法有返回值，那么需要接收invoke的结果\n        //如果方法没有返回值，则不需要接收\n        String result = (String) eatMethod.invoke(s, "重庆小面");\n        System.out.println(result);\n\n    }\n}\n\n\n\npublic class Student {\n    private String name;\n    private int age;\n    public String gender;\n    public String address;\n\n\n    public Student() {\n\n    }\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    private Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n...get...set...\n\n    private void study(){\n        System.out.println("学生在学习");\n    }\n\n    private void sleep(){\n        System.out.println("学生在睡觉");\n    }\n\n    public String eat(String something){\n        System.out.println("学生在吃" + something);\n        return "学生已经吃完了，非常happy";\n    }\n}\n\n\n\n# 面试题：\n\n你觉得反射好不好？好，有两个方向\n\n第一个方向：无视修饰符访问类中的内容。但是这种操作在开发中一般不用，都是框架底层来用的。\n\n第二个方向：反射可以跟配置文件结合起来使用，动态的创建对象，动态的调用方法。\n\n\n# 练习：泛型擦除（掌握概念，了解代码）\n\n集合中的泛型只在java文件中存在，当编译成class文件之后，就没有泛型了。\n\n代码示例：（了解）\n\npackage com.itheima.reflectdemo;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\n\npublic class ReflectDemo8 {\n    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        //1.创建集合对象\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(123);\n//        list.add("aaa");\n\n        //2.利用反射运行add方法去添加字符串\n        //因为反射使用的是class字节码文件\n\n        //获取class对象\n        Class clazz = list.getClass();\n\n        //获取add方法对象\n        Method method = clazz.getMethod("add", Object.class);\n\n        //运行方法\n        method.invoke(list,"aaa");\n\n        //打印集合\n        System.out.println(list);\n    }\n}\n\n\n\n# 练习：修改字符串的内容（掌握概念，了解代码）\n\n在这个练习中，我需要你掌握的是字符串不能修改的真正原因。\n\n字符串，在底层是一个byte类型的字节数组，名字叫做value\n\nprivate final byte[] value;\n\n\n真正不能被修改的原因：final和private\n\nfinal修饰value表示value记录的地址值不能修改。\n\nprivate修饰value而且没有对外提供getvalue和setvalue的方法。所以，在外界不能获取或修改value记录的地址值。\n\n如果要强行修改可以用反射：\n\n代码示例：（了解）代码示例：（了解）\n\nString s = "abc";\nString ss = "abc";\n// private final byte[] value= {97,98,99};\n// 没有对外提供getvalue和setvalue的方法，不能修改value记录的地址值\n// 如果我们利用反射获取了value的地址值。\n// 也是可以修改的，final修饰的value\n// 真正不可变的value数组的地址值，里面的内容利用反射还是可以修改的，比较危险\n\n//1.获取class对象\nClass clazz = s.getClass();\n\n//2.获取value成员变量（private）\nField field = clazz.getDeclaredField("value");\n//但是这种操作非常危险\n//JDK高版本已经屏蔽了这种操作，低版本还是可以的\n//临时修改权限\nfield.setAccessible(true);\n\n//3.获取value记录的地址值\nbyte[] bytes = (byte[]) field.get(s);\nbytes[0] = 100;\n\nSystem.out.println(s);//dbc\nSystem.out.println(ss);//dbc\n\n\n\n# 练习：反射和配置文件结合动态获取的练习（重点）\n\n需求: 利用反射根据文件中的不同类名和方法名，创建不同的对象并调用方法。\n\n分析:\n\n①通过Properties加载配置文件\n\n②得到类名和方法名\n\n③通过类名反射得到Class对象\n\n④通过Class对象创建一个对象\n\n⑤通过Class对象得到方法\n\n⑥调用方法\n\n代码示例：\n\npublic class ReflectDemo9 {\n    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        //1.读取配置文件的信息\n        Properties prop = new Properties();\n        FileInputStream fis = new FileInputStream("day14-code\\\\prop.properties");\n        prop.load(fis);\n        fis.close();\n        System.out.println(prop);\n\n        String classname = prop.get("classname") + "";\n        String methodname = prop.get("methodname") + "";\n\n        //2.获取字节码文件对象\n        Class clazz = Class.forName(classname);\n\n        //3.要先创建这个类的对象\n        Constructor con = clazz.getDeclaredConstructor();\n        con.setAccessible(true);\n        Object o = con.newInstance();\n        System.out.println(o);\n\n        //4.获取方法的对象\n        Method method = clazz.getDeclaredMethod(methodname);\n        method.setAccessible(true);\n\n        //5.运行方法\n        method.invoke(o);\n    }\n}\n\n配置文件中的信息：\nclassname=com.itheima.a02reflectdemo1.Student\nmethodname=sleep\n\n\n\n# 利用反射保存对象中的信息（重点）\n\npublic class MyReflectDemo {\n    public static void main(String[] args) throws IllegalAccessException, IOException {\n    /*\n        对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去\n    */\n       Student s = new Student("小A",23,\'女\',167.5,"睡觉");\n       Teacher t = new Teacher("播妞",10000);\n       saveObject(s);\n    }\n\n    //把对象里面所有的成员变量名和值保存到本地文件中\n    public static void saveObject(Object obj) throws IllegalAccessException, IOException {\n        //1.获取字节码文件的对象\n        Class clazz = obj.getClass();\n        //2. 创建IO流\n        BufferedWriter bw = new BufferedWriter(new FileWriter("myreflect\\\\a.txt"));\n        //3. 获取所有的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            field.setAccessible(true);\n            //获取成员变量的名字\n            String name = field.getName();\n            //获取成员变量的值\n            Object value = field.get(obj);\n            //写出数据\n            bw.write(name + "=" + value);\n            bw.newLine();\n        }\n\n        bw.close();\n\n    }\n}\n\n\npublic class Student {\n    private String name;\n    private int age;\n    private char gender;\n    private double height;\n    private String hobby;\n\n    public Student() {\n    }\n\n    public Student(String name, int age, char gender, double height, String hobby) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.height = height;\n        this.hobby = hobby;\n    }\n\n   \t...get...set...tostring...\n}\n\n\npublic class Teacher {\n    private String name;\n    private double salary;\n\n    public Teacher() {\n    }\n\n    public Teacher(String name, double salary) {\n        this.name = name;\n        this.salary = salary;\n    }\n\n\t...get...set...tostring...\n}\n\n\n\n封装性：解决建议使用\n\n反射：我能不能的问题\n\n',normalizedContent:'# se基础--反射机制--1.反射\n\n\n# 1.1 反射的概述：\n\nreflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于reflection api取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。\n\njava反射机制提供的功能\n\n * 在运行时判断任意一个对象所属的类\n\n * 在运行时构造任意一个类的对象\n\n * 在运行时判断任意一个类所具有的成员变量和方法\n\n * 在运行时获取泛型信息\n\n * 在运行时调用任意一个对象的成员变量和方法\n\n * 在运行时处理注解\n\n * 生成动态代理\n\njava.lang.class:代表一个类 **java.lang.reflect.method:**代表类的方法 **java.lang.reflect.field:**代表类的成员变量 **java.lang.reflect.constructor:**代表类的构造器\n\nclass本身也是一个类 class 对象只能由系统建立对象 一个加载的类在 jvm 中只会有一个class实例 一个class对象对应的是一个加载到jvm中的一个.class文件 每个类的实例都会记得自己是由哪个 class 实例所生成 通过class可以完整地得到一个类中的所有被加载的结构 class类是reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的class对象\n\n\n# 1.2 反射学习内容\n\n反射都是从class字节码文件中获取的内容。\n\n * 如何获取class字节码文件的对象\n * 利用反射如何获取构造方法（创建对象）\n * 利用反射如何获取成员变量（赋值，获取值）\n * 利用反射如何获取成员方法（运行）\n\n\n# 1.3 获取字节码文件对象（4种）\n\n * 全限定名：class.forname("全类名")（最常用）\n * 字面量获取：类.class\n * 对象获取：obj.getclass()\n * classloader获取：classloader.loadclass("全类名")\n\n代码示例：\n\n//1.class这个类里面的静态方法forname\n//class.forname("类的全类名")： 全类名 = 包名 + 类名\nclass clazz1 = class.forname("com.itheima.reflectdemo.student");\n//源代码阶段获取 --- 先把student加载到内存中，再获取字节码文件的对象\n//clazz 就表示student这个类的字节码文件对象。\n//就是当student.class这个文件加载到内存之后，产生的字节码文件对象\n\n\n//2.通过class属性获取\n//类名.class\nclass clazz2 = student.class;\n\n//因为class文件在硬盘中是唯一的，所以，当这个文件加载到内存之后产生的对象也是唯一的\nsystem.out.println(clazz1 == clazz2);//true\n\n\n//3.通过student对象获取字节码文件对象\nstudent s = new student();\nclass clazz3 = s.getclass();\nsystem.out.println(clazz1 == clazz2);//true\nsystem.out.println(clazz2 == clazz3);//true\n\n//4.classloader获取\nclassloader cl = this.getclass().getclassloader();\nclass clazz4 = cl.loadclass(“类的全类名”);\n\n\n> 字节码文件和字节码文件对象\n\njava文件：就是我们自己编写的java代码。\n\n字节码文件：就是通过java文件编译之后的class文件（是在硬盘上真实存在的，用眼睛能看到的）\n\n字节码文件对象：当class文件加载到内存之后，虚拟机自动创建出来的对象。\n\n这个对象里面至少包含了：构造方法，成员变量，成员方法。\n\n而我们的反射获取的是什么？字节码文件对象，这个对象在内存中是唯一的。\n\n\n# 1.4 获取构造方法\n\n方法名                                                         说明\nconstructor<?>[] getconstructors()                          获得所有的构造（只能public修饰）\nconstructor<?>[] getdeclaredconstructors()                  获得所有的构造（包含private修饰）\nconstructor<t> getconstructor(class<?>... parametertypes)   获取指定构造（只能public修饰）\nconstructor<t> getdeclaredconstructor(class<?>...           获取指定构造（包含private修饰）\nparametertypes)\n\n代码示例：\n\npublic class reflectdemo2 {\n    public static void main(string[] args) throws classnotfoundexception, nosuchmethodexception {\n        //1.获得整体（class字节码文件对象）\n        class clazz = class.forname("com.itheima.reflectdemo.student");\n\n\n        //获取所有构造方法（public）\n        constructor[] constructors1 = clazz.getconstructors();\n        for (constructor constructor : constructors1) {\n            system.out.println(constructor);\n        }\n        system.out.println("=======================");\n\n        //获取所有构造（带私有的）\n        constructor[] constructors2 = clazz.getdeclaredconstructors();\n        for (constructor constructor : constructors2) {\n            system.out.println(constructor);\n        }\n        system.out.println("=======================");\n\n        //获取指定的空参构造\n        constructor con1 = clazz.getconstructor();\n        system.out.println(con1);\n\n        constructor con2 = clazz.getconstructor(string.class,int.class);\n        system.out.println(con2);\n\n        system.out.println("=======================");\n        //获取指定的构造(所有构造都可以获取到，包括public包括private)\n        constructor con3 = clazz.getdeclaredconstructor();\n        system.out.println(con3);\n        //了解 system.out.println(con3 == con1);\n        //每一次获取构造方法对象的时候，都会新new一个。\n\n        constructor con4 = clazz.getdeclaredconstructor(string.class);\n        system.out.println(con4);\n    }\n}\n\n\n\n# 1.5 创建对象\n\n字节码对象：clazz.newinstance()\n\n构造器对象：con.newinstance()\n\n代码示例：\n\n//首先要有一个javabean类\npublic class student {\n    private string name;\n    private int age;\n\n    public student() {\n    }\n\n    public student(string name) {\n        this.name = name;\n    }\n    private student(string name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    ...get...set...tostring...\n}\n\n\n//测试类中的代码：\n//需求1：\n//获取空参，并创建对象\n//1.获取整体的字节码文件对象\nclass clazz = class.forname("com.itheima.a02reflectdemo1.student");\n//2.获取空参的构造方法\nconstructor con = clazz.getconstructor();\n//3.利用空参构造方法创建对象\nstudent stu = (student) con.newinstance();\nsystem.out.println(stu);\n\n\nsystem.out.println("=============================================");\n\n\n//测试类中的代码：\n//需求2：\n//获取带参构造，并创建对象\n//1.获取整体的字节码文件对象\nclass clazz = class.forname("com.itheima.a02reflectdemo1.student");\n//2.获取有参构造方法\nconstructor con = clazz.getdeclaredconstructor(string.class, int.class);\n//3.临时修改构造方法的访问权限（暴力反射）\ncon.setaccessible(true);\n//4.直接创建对象\nstudent stu = (student) con.newinstance("zhangsan", 23);\nsystem.out.println(stu);\n\n\n\n# 1.6 获取成员变量\n\n方法名                                   说明\nfield[] getfields()                   返回所有成员变量对象的数组（只能拿public的）\nfield[] getdeclaredfields()           返回所有成员变量对象的数组，存在就能拿到\nfield getfield(string name)           返回单个成员变量对象（只能拿public的）\nfield getdeclaredfield(string name)   返回单个成员变量对象，存在就能拿到\n\n代码示例：\n\npublic class reflectdemo4 {\n    public static void main(string[] args) throws classnotfoundexception, nosuchfieldexception {\n        //1.获取class对象\n        class clazz = class.forname("com.itheima.reflectdemo.student");\n\n        //2.getfields() 获取成员变量的对象（field对象)只能获取public修饰的\n        field[] fields1 = clazz.getfields();\n        for (field field : fields1) {\n            system.out.println(field);\n        }\n        system.out.println("===============================");\n\n        //getdeclaredfields()获取成员变量的对象（public + private）\n        field[] fields2 = clazz.getdeclaredfields();\n        for (field field : fields2) {\n            system.out.println(field);\n        }\n        system.out.println("===============================");\n        \n        //获得单个成员变量对象\n        //如果获取的属性是不存在的，那么会报异常\n        //field field3 = clazz.getfield("aaa");\n        //system.out.println(field3);//nosuchfieldexception\n        field field4 = clazz.getfield("gender");\n        system.out.println(field4);\n\n        system.out.println("===============================");\n        //获取单个成员变量（私有）\n        field field5 = clazz.getdeclaredfield("name");\n        system.out.println(field5);\n    }\n}\n\npublic class student {\n    private string name;\n    private int age;\n    public string gender;\n    public string address;\n\n    public student() {\n    }\n\n    public student(string name, int age, string address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n    public student(string name, int age, string gender, string address) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.address = address;\n    }\n\t...get...set...tostring...\n}\n\n\n\n# 修改成员变量\n\n方法                                   说明\nvoid set(object obj, object value）   赋值\nobject get(object obj)               获取值\n\n示例\n\npublic class reflectdemo5 {\n    public static void main(string[] args) throws classnotfoundexception, nosuchfieldexception, illegalaccessexception {\n        student s = new student("zhangsan",23,"广州");\n        student ss = new student("lisi",24,"北京");\n\n        //需求：\n        //利用反射获取成员变量并获取值和修改值\n        //1.获取class对象\n        class clazz = class.forname("com.itheima.reflectdemo.student");\n\n        //2.获取name成员变量\n        //field就表示name这个属性的对象\n        field field = clazz.getdeclaredfield("name");\n        //临时修饰他的访问权限\n        field.setaccessible(true);\n\n        //3.设置(修改)name的值\n        //参数一：表示要修改哪个对象的name？\n        //参数二：表示要修改为多少？\n        field.set(s,"wangwu");\n\n        //3.获取name的值\n        //表示我要获取这个对象的name的值\n        string result = (string)field.get(s);\n\n        //4.打印结果\n        system.out.println(result);\n\n        system.out.println(s);\n        system.out.println(ss);\n\n    }\n}\n\n\npublic class student {\n    private string name;\n    private int age;\n    public string gender;\n    public string address;\n\n\n    public student() {\n    }\n\n    public student(string name, int age, string address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n\n    public student(string name, int age, string gender, string address) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.address = address;\n    }\n\n\t...get...set...\n}\n\n\n\n# 1.7 获取成员方法\n\n方法名                                                         说明\nmethod[] getmethods()                                       返回所有成员方法对象的数组（只能拿public的）\nmethod[] getdeclaredmethods()                               返回所有成员方法对象的数组，存在就能拿到\nmethod getmethod(string name, class<?>... parametertypes)   返回单个成员方法对象（只能拿public的）\nmethod getdeclaredmethod(string name, class<?>...           返回单个成员方法对象，存在就能拿到\nparametertypes)\n\n代码示例：\n\npublic class reflectdemo6 {\n    public static void main(string[] args) throws classnotfoundexception, nosuchmethodexception {\n        //1.获取class对象\n        class<?> clazz = class.forname("com.itheima.reflectdemo.student");\n\n\n        //2.获取方法\n        //getmethods可以获取父类中public修饰的方法\n        method[] methods1 = clazz.getmethods();\n        for (method method : methods1) {\n            system.out.println(method);\n        }\n\n        system.out.println("===========================");\n        //获取所有的方法（包含私有）\n        //但是只能获取自己类中的方法\n        method[] methods2 = clazz.getdeclaredmethods();\n        for (method method : methods2) {\n            system.out.println(method);\n        }\n\n        system.out.println("===========================");\n        //获取指定的方法（空参）\n        method method3 = clazz.getmethod("sleep");\n        system.out.println(method3);\n\n        method method4 = clazz.getmethod("eat",string.class);\n        system.out.println(method4);\n\n        //获取指定的私有方法\n        method method5 = clazz.getdeclaredmethod("playgame");\n        system.out.println(method5);\n    }\n}\n\n\n\n# 执行成员方法\n\nobject invoke(object obj, object... args)：运行方法\n\n代码示例：\n\npackage com.itheima.a02reflectdemo1;\n\nimport java.lang.reflect.invocationtargetexception;\nimport java.lang.reflect.method;\n\npublic class reflectdemo6 {\n    public static void main(string[] args) throws classnotfoundexception, nosuchmethodexception, invocationtargetexception, illegalaccessexception {\n        //1.获取字节码文件对象\n        class clazz = class.forname("com.itheima.a02reflectdemo1.student");\n\t\t\n        //2.获取一个对象\n        //需要用这个对象去调用方法\n        student s = new student();\n        \n        //3.获取一个指定的方法\n        //参数一：方法名\n        //参数二：参数列表，如果没有可以不写\n        method eatmethod = clazz.getmethod("eat",string.class);\n        \n        //运行\n        //参数一：表示方法的调用对象\n        //参数二：方法在运行时需要的实际参数\n        //注意点：如果方法有返回值，那么需要接收invoke的结果\n        //如果方法没有返回值，则不需要接收\n        string result = (string) eatmethod.invoke(s, "重庆小面");\n        system.out.println(result);\n\n    }\n}\n\n\n\npublic class student {\n    private string name;\n    private int age;\n    public string gender;\n    public string address;\n\n\n    public student() {\n\n    }\n\n    public student(string name) {\n        this.name = name;\n    }\n\n    private student(string name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n...get...set...\n\n    private void study(){\n        system.out.println("学生在学习");\n    }\n\n    private void sleep(){\n        system.out.println("学生在睡觉");\n    }\n\n    public string eat(string something){\n        system.out.println("学生在吃" + something);\n        return "学生已经吃完了，非常happy";\n    }\n}\n\n\n\n# 面试题：\n\n你觉得反射好不好？好，有两个方向\n\n第一个方向：无视修饰符访问类中的内容。但是这种操作在开发中一般不用，都是框架底层来用的。\n\n第二个方向：反射可以跟配置文件结合起来使用，动态的创建对象，动态的调用方法。\n\n\n# 练习：泛型擦除（掌握概念，了解代码）\n\n集合中的泛型只在java文件中存在，当编译成class文件之后，就没有泛型了。\n\n代码示例：（了解）\n\npackage com.itheima.reflectdemo;\n\nimport java.lang.reflect.invocationtargetexception;\nimport java.lang.reflect.method;\nimport java.util.arraylist;\n\npublic class reflectdemo8 {\n    public static void main(string[] args) throws nosuchmethodexception, invocationtargetexception, illegalaccessexception {\n        //1.创建集合对象\n        arraylist<integer> list = new arraylist<>();\n        list.add(123);\n//        list.add("aaa");\n\n        //2.利用反射运行add方法去添加字符串\n        //因为反射使用的是class字节码文件\n\n        //获取class对象\n        class clazz = list.getclass();\n\n        //获取add方法对象\n        method method = clazz.getmethod("add", object.class);\n\n        //运行方法\n        method.invoke(list,"aaa");\n\n        //打印集合\n        system.out.println(list);\n    }\n}\n\n\n\n# 练习：修改字符串的内容（掌握概念，了解代码）\n\n在这个练习中，我需要你掌握的是字符串不能修改的真正原因。\n\n字符串，在底层是一个byte类型的字节数组，名字叫做value\n\nprivate final byte[] value;\n\n\n真正不能被修改的原因：final和private\n\nfinal修饰value表示value记录的地址值不能修改。\n\nprivate修饰value而且没有对外提供getvalue和setvalue的方法。所以，在外界不能获取或修改value记录的地址值。\n\n如果要强行修改可以用反射：\n\n代码示例：（了解）代码示例：（了解）\n\nstring s = "abc";\nstring ss = "abc";\n// private final byte[] value= {97,98,99};\n// 没有对外提供getvalue和setvalue的方法，不能修改value记录的地址值\n// 如果我们利用反射获取了value的地址值。\n// 也是可以修改的，final修饰的value\n// 真正不可变的value数组的地址值，里面的内容利用反射还是可以修改的，比较危险\n\n//1.获取class对象\nclass clazz = s.getclass();\n\n//2.获取value成员变量（private）\nfield field = clazz.getdeclaredfield("value");\n//但是这种操作非常危险\n//jdk高版本已经屏蔽了这种操作，低版本还是可以的\n//临时修改权限\nfield.setaccessible(true);\n\n//3.获取value记录的地址值\nbyte[] bytes = (byte[]) field.get(s);\nbytes[0] = 100;\n\nsystem.out.println(s);//dbc\nsystem.out.println(ss);//dbc\n\n\n\n# 练习：反射和配置文件结合动态获取的练习（重点）\n\n需求: 利用反射根据文件中的不同类名和方法名，创建不同的对象并调用方法。\n\n分析:\n\n①通过properties加载配置文件\n\n②得到类名和方法名\n\n③通过类名反射得到class对象\n\n④通过class对象创建一个对象\n\n⑤通过class对象得到方法\n\n⑥调用方法\n\n代码示例：\n\npublic class reflectdemo9 {\n    public static void main(string[] args) throws ioexception, classnotfoundexception, nosuchmethodexception, invocationtargetexception, instantiationexception, illegalaccessexception {\n        //1.读取配置文件的信息\n        properties prop = new properties();\n        fileinputstream fis = new fileinputstream("day14-code\\\\prop.properties");\n        prop.load(fis);\n        fis.close();\n        system.out.println(prop);\n\n        string classname = prop.get("classname") + "";\n        string methodname = prop.get("methodname") + "";\n\n        //2.获取字节码文件对象\n        class clazz = class.forname(classname);\n\n        //3.要先创建这个类的对象\n        constructor con = clazz.getdeclaredconstructor();\n        con.setaccessible(true);\n        object o = con.newinstance();\n        system.out.println(o);\n\n        //4.获取方法的对象\n        method method = clazz.getdeclaredmethod(methodname);\n        method.setaccessible(true);\n\n        //5.运行方法\n        method.invoke(o);\n    }\n}\n\n配置文件中的信息：\nclassname=com.itheima.a02reflectdemo1.student\nmethodname=sleep\n\n\n\n# 利用反射保存对象中的信息（重点）\n\npublic class myreflectdemo {\n    public static void main(string[] args) throws illegalaccessexception, ioexception {\n    /*\n        对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去\n    */\n       student s = new student("小a",23,\'女\',167.5,"睡觉");\n       teacher t = new teacher("播妞",10000);\n       saveobject(s);\n    }\n\n    //把对象里面所有的成员变量名和值保存到本地文件中\n    public static void saveobject(object obj) throws illegalaccessexception, ioexception {\n        //1.获取字节码文件的对象\n        class clazz = obj.getclass();\n        //2. 创建io流\n        bufferedwriter bw = new bufferedwriter(new filewriter("myreflect\\\\a.txt"));\n        //3. 获取所有的成员变量\n        field[] fields = clazz.getdeclaredfields();\n        for (field field : fields) {\n            field.setaccessible(true);\n            //获取成员变量的名字\n            string name = field.getname();\n            //获取成员变量的值\n            object value = field.get(obj);\n            //写出数据\n            bw.write(name + "=" + value);\n            bw.newline();\n        }\n\n        bw.close();\n\n    }\n}\n\n\npublic class student {\n    private string name;\n    private int age;\n    private char gender;\n    private double height;\n    private string hobby;\n\n    public student() {\n    }\n\n    public student(string name, int age, char gender, double height, string hobby) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.height = height;\n        this.hobby = hobby;\n    }\n\n   \t...get...set...tostring...\n}\n\n\npublic class teacher {\n    private string name;\n    private double salary;\n\n    public teacher() {\n    }\n\n    public teacher(string name, double salary) {\n        this.name = name;\n        this.salary = salary;\n    }\n\n\t...get...set...tostring...\n}\n\n\n\n封装性：解决建议使用\n\n反射：我能不能的问题\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705976498e3},{title:"设计模式--3.3.3.行为型--访问者模式",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.3.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html",relativePath:"zs-se/设计模式/设计模式--3.3.3.行为型--访问者模式.md",key:"v-ad53b70e",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.3.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html",headers:[{level:2,title:"测评系统的需求",slug:"测评系统的需求",normalizedTitle:"测评系统的需求",charIndex:29},{level:2,title:"传统方式的问题分析",slug:"传统方式的问题分析",normalizedTitle:"传统方式的问题分析",charIndex:182},{level:2,title:"访问者模式基本介绍",slug:"访问者模式基本介绍",normalizedTitle:"访问者模式基本介绍",charIndex:323},{level:2,title:"访问者模式的原理类图",slug:"访问者模式的原理类图",normalizedTitle:"访问者模式的原理类图",charIndex:579},{level:2,title:"访问者模式应用实例",slug:"访问者模式应用实例",normalizedTitle:"访问者模式应用实例",charIndex:850},{level:2,title:"访问者模式的注意事项和细节",slug:"访问者模式的注意事项和细节",normalizedTitle:"访问者模式的注意事项和细节",charIndex:1196}],lastUpdated:"2024年1月22日星期一晚上7点55分",lastUpdatedTimestamp:170592452e4,headersStr:"测评系统的需求 传统方式的问题分析 访问者模式基本介绍 访问者模式的原理类图 访问者模式应用实例 访问者模式的注意事项和细节",content:'# 设计模式--3.3.3.行为型--访问者模式\n\n\n# 测评系统的需求\n\n完成测评系统需求\n\n 1. 将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)\n    \n    \n\n 2. 传统方案\n    \n    将【成功】、【失败】、【待定】判断方法放入到子类内部进行实现\n\n\n# 传统方式的问题分析\n\n 1. 如果系统比较小，还是 ok 的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了 ocp 原则， 不利于维护\n 2. 扩展性不好，比如 增加了 新的人员类型，或者管理方法，都不好做\n 3. 引出我们会使用新的设计模式 – 访问者模式\n\n\n# 访问者模式基本介绍\n\n 1. 访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。\n 2. 主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题\n 3. 访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口\n\n 4. 访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时需要避免让这些操作"污染"这些对象的类，可以选用访问者模式解决\n\n\n# 访问者模式的原理类图\n\n\n\n 1. Visitor 是抽象访问者，为该对象结构中的 ConcreteElement 的每一个类声明visit 操作\n 2. ConcreteVisitor ：是一个具体的访问者 实现每个有 Visitor 声明的操作，是每个操作实现的部分.\n 3. ObjectStructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素\n 4. Element 定义一个 accept 方法，接收一个访问者对象\n 5. ConcreteElement 为具体元素，实现了 accept 方法\n\n\n# 访问者模式应用实例\n\n应用实例要求\n\n 1. 将人分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同 的种类，比如 成功、失败 等)，请使用访问者模式来说实现\n\n 2. 思路分析和图解(类图)\n\n 3. 类图\n    \n    \n\n 4. 应用案例的小结-双分派\n    \n    * 上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。 双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型\n    * 以上述实例为例，假设我们要添加一个 Wait 的状态类，考察 Man 类和 Woman 类的反应， 由于使用了双分派，只需增加一个 Action 子类即可在客户端调用即可，不需要改动任何其他类的代码。\n\n\n# 访问者模式的注意事项和细节\n\n优点\n\n 1. 访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高\n 2. 访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统\n\n缺点\n\n 1. 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样造成了具体元素变更比较困难\n 2. 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素\n 3. 因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的',normalizedContent:'# 设计模式--3.3.3.行为型--访问者模式\n\n\n# 测评系统的需求\n\n完成测评系统需求\n\n 1. 将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)\n    \n    \n\n 2. 传统方案\n    \n    将【成功】、【失败】、【待定】判断方法放入到子类内部进行实现\n\n\n# 传统方式的问题分析\n\n 1. 如果系统比较小，还是 ok 的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了 ocp 原则， 不利于维护\n 2. 扩展性不好，比如 增加了 新的人员类型，或者管理方法，都不好做\n 3. 引出我们会使用新的设计模式 – 访问者模式\n\n\n# 访问者模式基本介绍\n\n 1. 访问者模式（visitor pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。\n 2. 主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题\n 3. 访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口\n\n 4. 访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时需要避免让这些操作"污染"这些对象的类，可以选用访问者模式解决\n\n\n# 访问者模式的原理类图\n\n\n\n 1. visitor 是抽象访问者，为该对象结构中的 concreteelement 的每一个类声明visit 操作\n 2. concretevisitor ：是一个具体的访问者 实现每个有 visitor 声明的操作，是每个操作实现的部分.\n 3. objectstructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素\n 4. element 定义一个 accept 方法，接收一个访问者对象\n 5. concreteelement 为具体元素，实现了 accept 方法\n\n\n# 访问者模式应用实例\n\n应用实例要求\n\n 1. 将人分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同 的种类，比如 成功、失败 等)，请使用访问者模式来说实现\n\n 2. 思路分析和图解(类图)\n\n 3. 类图\n    \n    \n\n 4. 应用案例的小结-双分派\n    \n    * 上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。 双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型\n    * 以上述实例为例，假设我们要添加一个 wait 的状态类，考察 man 类和 woman 类的反应， 由于使用了双分派，只需增加一个 action 子类即可在客户端调用即可，不需要改动任何其他类的代码。\n\n\n# 访问者模式的注意事项和细节\n\n优点\n\n 1. 访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高\n 2. 访问者模式可以对功能进行统一，可以做报表、ui、拦截器与过滤器，适用于数据结构相对稳定的系统\n\n缺点\n\n 1. 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样造成了具体元素变更比较困难\n 2. 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素\n 3. 因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170592452e4},{title:"设计模式--3.3.2.行为型--模板方法",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.1.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.html",relativePath:"zs-se/设计模式/设计模式--3.3.1.行为型--模板方法.md",key:"v-7925df42",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.1.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.html",headers:[{level:2,title:"豆浆制作问题",slug:"豆浆制作问题",normalizedTitle:"豆浆制作问题",charIndex:28},{level:2,title:"基本介绍",slug:"基本介绍",normalizedTitle:"基本介绍",charIndex:240},{level:3,title:"原理类图",slug:"原理类图",normalizedTitle:"原理类图",charIndex:465},{level:2,title:"解决豆浆制作问题",slug:"解决豆浆制作问题",normalizedTitle:"解决豆浆制作问题",charIndex:646},{level:2,title:"钩子方法",slug:"钩子方法",normalizedTitle:"钩子方法",charIndex:2367},{level:2,title:"Spring框架应用的源码分析",slug:"spring框架应用的源码分析",normalizedTitle:"spring框架应用的源码分析",charIndex:3628},{level:2,title:"模板方法模式的注意事项和细节",slug:"模板方法模式的注意事项和细节",normalizedTitle:"模板方法模式的注意事项和细节",charIndex:3726}],lastUpdated:"2024年1月22日星期一晚上7点55分",lastUpdatedTimestamp:170592452e4,headersStr:"豆浆制作问题 基本介绍 原理类图 解决豆浆制作问题 钩子方法 Spring框架应用的源码分析 模板方法模式的注意事项和细节",content:'# 设计模式--3.3.2.行为型--模板方法\n\n\n# 豆浆制作问题\n\n编写制作豆浆的程序，说明如下:\n\n 1. 制作豆浆的流程 选材---\x3e添加配料---\x3e浸泡---\x3e放到豆浆机打碎\n 2. 通过添加不同的配料，可以制作出不同口味的豆浆\n 3. 选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的\n 4. 请使用 模板方法模式 完成 (说明：因为模板方法模式，比较简单，很容易就想到这个方案，因此就直接使用， 不再使用传统的方案来引出模板方法模式 )\n\n\n# 基本介绍\n\n 1. 模板方法模式（Template Method Pattern），又叫模板模式(Template Pattern)， 在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。\n 2. 简单说，模板方法模式 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤\n 3. 这种类型的设计模式属于行为型模式。\n\n\n# 原理类图\n\n\n\n对原理类图的说明-即(模板方法模式的角色及职责)\n\n 1. AbstractClass 抽象类， 类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现 其它的抽象 方法 operationr2,3,4\n 2. ConcreteClass 实现抽象方法 operationr2,3,4, 以完成算法中特点子类的步骤\n\n\n# 解决豆浆制作问题\n\n 1. 应用实例要求 编写制作豆浆的程序，说明如下: 制作豆浆的流程 选材---\x3e添加配料---\x3e浸泡---\x3e放到豆浆机打碎 通过添加不同的配料，可以制作出不同口味的豆浆 选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的(红豆、花生豆浆。。。)\n\n 2. 思路分析和图解(类图)\n\n 3. 代码实现\n    \n    package com.zs.design.template;\n    \n    public class Client {\n        public static void main(String[] args) {\n            //制作红豆豆浆\n            System.out.println("----制作红豆豆浆----");\n            SoyaMilk redBeanSoyaMilk = new RedBeanSoyaMilk();\n            redBeanSoyaMilk.make();\n            System.out.println("----制作花生豆浆----");\n            SoyaMilk peanutSoyaMilk = new PeanutSoyaMilk();\n            peanutSoyaMilk.make();\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    //抽象类，表示豆浆\n    public abstract class SoyaMilk {\n        //模板方法, make , 模板方法可以做成 final , 不让子类去覆盖.\n        final void make() {\n            select();\n            addCondiments();\n            soak();\n            beat();\n        }\n    \n        //选材料\n        void select() {\n            System.out.println("第一步：选择好的新鲜黄豆 ");\n        }\n    \n        //添加不同的配料， 抽象方法, 子类具体实现\n        abstract void addCondiments();\n    \n        //浸泡\n        void soak() {\n            System.out.println("第三步， 黄豆和配料开始浸泡， 需要 3 小时 ");\n        }\n    \n        void beat() {\n            System.out.println("第四步：黄豆和配料放到豆浆机去打碎 ");\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    public class PeanutSoyaMilk extends SoyaMilk {\n        @Override\n        void addCondiments() {\n            System.out.println(" 加入上好的花生 ");\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    public class RedBeanSoyaMilk extends SoyaMilk {\n        @Override\n        void addCondiments() {\n            System.out.println(" 加入上好的红豆 ");\n        }\n    }\n    \n\n\n# 钩子方法\n\n 1. 在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方 法称为“钩子”。\n\n 2. 还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面 的模板方法进行改造\n\n 3. 代码演示：\n    \n    package com.zs.design.template;\n    \n    //抽象类，表示豆浆\n    public abstract class SoyaMilk {\n        //模板方法, make , 模板方法可以做成 final , 不让子类去覆盖.\n        final void make() {\n            select();\n            //钩子方法判断\n            if(customerWantCondiments()) {\n                addCondiments();\n            }\n            soak();\n            beat();\n        }\n        //钩子方法，决定是否需要添加配料\n        boolean customerWantCondiments() {\n            return true;\n        }\n    \n        //选材料\n        void select() {\n            System.out.println("第一步：选择好的新鲜黄豆 ");\n        }\n    \n        //添加不同的配料， 抽象方法, 子类具体实现\n        abstract void addCondiments();\n    \n        //浸泡\n        void soak() {\n            System.out.println("第三步， 黄豆和配料开始浸泡， 需要 3 小时 ");\n        }\n    \n        void beat() {\n            System.out.println("第四步：黄豆和配料放到豆浆机去打碎 ");\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    public class PureSoyaMilk extends SoyaMilk{\n        @Override\n        void addCondiments() {}\n    \n        @Override\n        boolean customerWantCondiments() {\n            return false;\n        }\n    }\n    \n    \n\n\n# Spring框架应用的源码分析\n\n 1. Spring IOC 容器初始化时运用到的模板方法模式\n\n 2. 代码分析+角色分析+说明类图\n\n 3. 针对源码的类图(说明层次关系)\n\n\n\n\n\n\n# 模板方法模式的注意事项和细节\n\n 1. 基本思想是：** 算法只存在于一个地方，也就是在父类中，容易修改。 **需要修改算法时，只要修改父类的模板方 法或者已经实现的某些步骤，子类就会继承这些修改\n 2. ** 实现了最大化代码复用。**父类的模板方法和已实现的某些步骤会被子类继承而直接使用。\n 3. ** 既统一了算法，也提供了很大的灵活性。**父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步 骤的实现。\n 4. 该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大\n 5. 一般模板方法都加上 ** final ** 关键字， 防止子类重写模板方法.\n 6. 模板方法模式使用场景：当要完成在某个过程，** 该过程要执行一系列步骤** ，这一系列的步骤基本相同，但其 个别步骤在实现时 可能不同，通常考虑用模板方法模式来处理',normalizedContent:'# 设计模式--3.3.2.行为型--模板方法\n\n\n# 豆浆制作问题\n\n编写制作豆浆的程序，说明如下:\n\n 1. 制作豆浆的流程 选材---\x3e添加配料---\x3e浸泡---\x3e放到豆浆机打碎\n 2. 通过添加不同的配料，可以制作出不同口味的豆浆\n 3. 选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的\n 4. 请使用 模板方法模式 完成 (说明：因为模板方法模式，比较简单，很容易就想到这个方案，因此就直接使用， 不再使用传统的方案来引出模板方法模式 )\n\n\n# 基本介绍\n\n 1. 模板方法模式（template method pattern），又叫模板模式(template pattern)， 在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。\n 2. 简单说，模板方法模式 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤\n 3. 这种类型的设计模式属于行为型模式。\n\n\n# 原理类图\n\n\n\n对原理类图的说明-即(模板方法模式的角色及职责)\n\n 1. abstractclass 抽象类， 类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现 其它的抽象 方法 operationr2,3,4\n 2. concreteclass 实现抽象方法 operationr2,3,4, 以完成算法中特点子类的步骤\n\n\n# 解决豆浆制作问题\n\n 1. 应用实例要求 编写制作豆浆的程序，说明如下: 制作豆浆的流程 选材---\x3e添加配料---\x3e浸泡---\x3e放到豆浆机打碎 通过添加不同的配料，可以制作出不同口味的豆浆 选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的(红豆、花生豆浆。。。)\n\n 2. 思路分析和图解(类图)\n\n 3. 代码实现\n    \n    package com.zs.design.template;\n    \n    public class client {\n        public static void main(string[] args) {\n            //制作红豆豆浆\n            system.out.println("----制作红豆豆浆----");\n            soyamilk redbeansoyamilk = new redbeansoyamilk();\n            redbeansoyamilk.make();\n            system.out.println("----制作花生豆浆----");\n            soyamilk peanutsoyamilk = new peanutsoyamilk();\n            peanutsoyamilk.make();\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    //抽象类，表示豆浆\n    public abstract class soyamilk {\n        //模板方法, make , 模板方法可以做成 final , 不让子类去覆盖.\n        final void make() {\n            select();\n            addcondiments();\n            soak();\n            beat();\n        }\n    \n        //选材料\n        void select() {\n            system.out.println("第一步：选择好的新鲜黄豆 ");\n        }\n    \n        //添加不同的配料， 抽象方法, 子类具体实现\n        abstract void addcondiments();\n    \n        //浸泡\n        void soak() {\n            system.out.println("第三步， 黄豆和配料开始浸泡， 需要 3 小时 ");\n        }\n    \n        void beat() {\n            system.out.println("第四步：黄豆和配料放到豆浆机去打碎 ");\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    public class peanutsoyamilk extends soyamilk {\n        @override\n        void addcondiments() {\n            system.out.println(" 加入上好的花生 ");\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    public class redbeansoyamilk extends soyamilk {\n        @override\n        void addcondiments() {\n            system.out.println(" 加入上好的红豆 ");\n        }\n    }\n    \n\n\n# 钩子方法\n\n 1. 在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方 法称为“钩子”。\n\n 2. 还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面 的模板方法进行改造\n\n 3. 代码演示：\n    \n    package com.zs.design.template;\n    \n    //抽象类，表示豆浆\n    public abstract class soyamilk {\n        //模板方法, make , 模板方法可以做成 final , 不让子类去覆盖.\n        final void make() {\n            select();\n            //钩子方法判断\n            if(customerwantcondiments()) {\n                addcondiments();\n            }\n            soak();\n            beat();\n        }\n        //钩子方法，决定是否需要添加配料\n        boolean customerwantcondiments() {\n            return true;\n        }\n    \n        //选材料\n        void select() {\n            system.out.println("第一步：选择好的新鲜黄豆 ");\n        }\n    \n        //添加不同的配料， 抽象方法, 子类具体实现\n        abstract void addcondiments();\n    \n        //浸泡\n        void soak() {\n            system.out.println("第三步， 黄豆和配料开始浸泡， 需要 3 小时 ");\n        }\n    \n        void beat() {\n            system.out.println("第四步：黄豆和配料放到豆浆机去打碎 ");\n        }\n    }\n    \n    \n    package com.zs.design.template;\n    \n    public class puresoyamilk extends soyamilk{\n        @override\n        void addcondiments() {}\n    \n        @override\n        boolean customerwantcondiments() {\n            return false;\n        }\n    }\n    \n    \n\n\n# spring框架应用的源码分析\n\n 1. spring ioc 容器初始化时运用到的模板方法模式\n\n 2. 代码分析+角色分析+说明类图\n\n 3. 针对源码的类图(说明层次关系)\n\n\n\n\n\n\n# 模板方法模式的注意事项和细节\n\n 1. 基本思想是：** 算法只存在于一个地方，也就是在父类中，容易修改。 **需要修改算法时，只要修改父类的模板方 法或者已经实现的某些步骤，子类就会继承这些修改\n 2. ** 实现了最大化代码复用。**父类的模板方法和已实现的某些步骤会被子类继承而直接使用。\n 3. ** 既统一了算法，也提供了很大的灵活性。**父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步 骤的实现。\n 4. 该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大\n 5. 一般模板方法都加上 ** final ** 关键字， 防止子类重写模板方法.\n 6. 模板方法模式使用场景：当要完成在某个过程，** 该过程要执行一系列步骤** ，这一系列的步骤基本相同，但其 个别步骤在实现时 可能不同，通常考虑用模板方法模式来处理',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170592452e4},{title:"设计模式--3.3.2.行为型--命令模式.md",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.2.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html",relativePath:"zs-se/设计模式/设计模式--3.3.2.行为型--命令模式.md",key:"v-8a58cf10",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.2.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html",headers:[{level:2,title:"智能生活项目需求",slug:"智能生活项目需求",normalizedTitle:"智能生活项目需求",charIndex:31},{level:2,title:"命令模式基本介绍",slug:"命令模式基本介绍",normalizedTitle:"命令模式基本介绍",charIndex:340},{level:2,title:"命令模式的原理类图",slug:"命令模式的原理类图",normalizedTitle:"命令模式的原理类图",charIndex:737},{level:2,title:"命令模式解决智能生活项目",slug:"命令模式解决智能生活项目",normalizedTitle:"命令模式解决智能生活项目",charIndex:938},{level:2,title:"spring框架JdbcTemplate应用的源码分析",slug:"spring框架jdbctemplate应用的源码分析",normalizedTitle:"spring框架jdbctemplate应用的源码分析",charIndex:4495}],lastUpdated:"2024年1月22日星期一晚上7点55分",lastUpdatedTimestamp:170592452e4,headersStr:"智能生活项目需求 命令模式基本介绍 命令模式的原理类图 命令模式解决智能生活项目 spring框架JdbcTemplate应用的源码分析",content:'# 设计模式--3.3.2.行为型--命令模式.md\n\n\n# 智能生活项目需求\n\n看一个具体的需求\n\n\n\n 1. 我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装 app 就可以控制对这些家电 工作。\n 2. 这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个 App，分别控制，我们希望只要一个 app 就可以控制全部智能家电。\n 3. 要实现一个 app 控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给 app 调用，这时 就 可以考虑使用命令模式。\n 4. 命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.\n 5. 在我们的例子中，动作的请求者是手机 app，动作的执行者是每个厂商的一个家电产品\n\n\n# 命令模式基本介绍\n\n 1. 命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收 者是谁，也不知道被请求的操作是哪个， 我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计\n\n 2. 命名模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。\n\n 3. 在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求(即命名)，同时命令模式 也支持可撤销的操作。\n\n 4. 通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色：将军（命令发布者）、士兵（命令的具体执 行者）、命令(连接将军和士兵)。 Invoker 是调用者（将军），Receiver 是被调用者（士兵），MyCommand 是命令，实现了 Command 接口，持 有接收对象\n\n\n# 命令模式的原理类图\n\n\n\n对原理类图的说明-即(命名模式的角色及职责)\n\n 1. Invoker 是调用者角色\n 2. Command: 是命令角色，需要执行的所有命令都在这里，可以是接口或抽象类\n 3. Receiver: 接受者角色，知道如何实施和执行一个请求相关的操作\n 4. ConcreteCommand: 将一个接受者对象与一个动作绑定，调用接受者相应的操作，实现 execute\n\n\n# 命令模式解决智能生活项目\n\n应用实例要求\n\n 1. 编写程序，使用命令模式 完成前面的智能家电项目\n\n 2. 思路分析和图解\n    \n    \n\n 3. 代码实现\n\n> Command接口\n\npackage com.zs.design.command;\n\n//创建命令接口\npublic interface Command {\n    //执行动作(操作)\n    public void execute();\n\n    //撤销动作(操作)\n    public void undo();\n}\n\n\n\n> NoCommand\n\n/**\n* 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做\n* 其实，这样是一种设计模式, 可以省掉对空判断\n* @author Administrator\n*/\npublic class NoCommand implements Command {\n    @Override\n    public void execute() {\n    }\n\n    @Override\n    public void undo() {\n    }\n}\n\n\n> 灯具命令执行者角色\n> \n> LightReceiver\n\npublic class LightReceiver {\n    public void on() {\n        System.out.println(" 电灯打开了.. ");\n    }\n    public void off() {\n        System.out.println(" 电灯关闭了.. ");\n    }\n}\n\n\n> 灯具命令\n\npublic class LightOffCommand implements Command {\n    // 聚合 LightReceiver\n    LightReceiver light;\n    // 构造器\n    public LightOffCommand(LightReceiver light) {\n        super();\n        this.light = light;\n    }\n    @Override\n    public void execute() {\n        // 调用接收者的方法\n        light.off();\n    }\n    @Override\n    public void undo() {\n        // 调用接收者的方法\n        light.on();\n    }\n}\n\n\npublic class LightOnCommand implements Command {\n    //聚合 LightReceiver\n    LightReceiver light;\n    //构造器\n    public LightOnCommand(LightReceiver light) {\n        super();\n        this.light = light;\n    }\n    @Override\n    public void execute() {\n        //调用接收者的方法\n        light.on();\n    }\n    @Override\n    public void undo() {\n        //调用接收者的方法\n        light.off();\n    }\n}\n\n\n> 控制器\n\npackage com.zs.design.command;\n\npublic class RemoteController {\n\n    // 开 按钮的命令数组\n    Command[] onCommands;\n    Command[] offCommands;\n\n    // 执行撤销的命令\n    Command undoCommand;\n\n    // 构造器，完成对按钮初始化\n    public RemoteController() {\n        onCommands = new Command[5];\n        offCommands = new Command[5];\n\n        for (int i = 0; i < 5; i++) {\n            onCommands[i] = new NoCommand();\n            offCommands[i] = new NoCommand();\n        }\n    }\n\n    // 给我们的按钮设置你需要的命令\n    public void setCommand(int no, Command onCommand, Command offCommand) {\n        onCommands[no] = onCommand;\n        offCommands[no] = offCommand;\n    }\n\n    // 按下开按钮\n    public void onButtonWasPushed(int no) { // no 0\n        // 找到你按下的开的按钮， 并调用对应方法\n        onCommands[no].execute();\n        // 记录这次的操作，用于撤销\n        undoCommand = onCommands[no];\n    }\n\n    // 按下关按钮\n    public void offButtonWasPushed(int no) { // no 0\n        // 找到你按下的关的按钮， 并调用对应方法\n        offCommands[no].execute();\n        // 记录这次的操作，用于撤销\n        undoCommand = offCommands[no];\n    }\n\n    // 按下撤销按钮\n    public void undoButtonWasPushed() {\n        undoCommand = new NoCommand();\n        undoCommand.undo();\n    }\n}\n\n\n> 客户端\n\npublic class Client {\n    public static void main(String[] args) {\n        //使用命令设计模式，完成通过遥控器，对电灯的操作\n        //创建电灯的对象(接受者)\n        LightReceiver lightReceiver = new LightReceiver();\n        //创建电灯相关的开关命令\n        LightOnCommand lightOnCommand = new LightOnCommand(lightReceiver);\n        LightOffCommand lightOffCommand = new LightOffCommand(lightReceiver);\n        //需要一个遥控器\n        RemoteController remoteController = new RemoteController();\n        //给我们的遥控器设置命令, 比如 no = 0 是电灯的开和关的操作\n        remoteController.setCommand(0, lightOnCommand, lightOffCommand);\n        System.out.println("--------按下灯的开按钮-----------");\n        remoteController.onButtonWasPushed(0);\n        System.out.println("--------按下灯的关按钮-----------");\n        remoteController.offButtonWasPushed(0);\n        System.out.println("--------按下撤销按钮-----------");\n        remoteController.undoButtonWasPushed();\n    }\n}\n\n\n\n# spring框架JdbcTemplate应用的源码分析\n\n\n\n',normalizedContent:'# 设计模式--3.3.2.行为型--命令模式.md\n\n\n# 智能生活项目需求\n\n看一个具体的需求\n\n\n\n 1. 我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装 app 就可以控制对这些家电 工作。\n 2. 这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个 app，分别控制，我们希望只要一个 app 就可以控制全部智能家电。\n 3. 要实现一个 app 控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给 app 调用，这时 就 可以考虑使用命令模式。\n 4. 命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.\n 5. 在我们的例子中，动作的请求者是手机 app，动作的执行者是每个厂商的一个家电产品\n\n\n# 命令模式基本介绍\n\n 1. 命令模式（command pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收 者是谁，也不知道被请求的操作是哪个， 我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计\n\n 2. 命名模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。\n\n 3. 在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求(即命名)，同时命令模式 也支持可撤销的操作。\n\n 4. 通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色：将军（命令发布者）、士兵（命令的具体执 行者）、命令(连接将军和士兵)。 invoker 是调用者（将军），receiver 是被调用者（士兵），mycommand 是命令，实现了 command 接口，持 有接收对象\n\n\n# 命令模式的原理类图\n\n\n\n对原理类图的说明-即(命名模式的角色及职责)\n\n 1. invoker 是调用者角色\n 2. command: 是命令角色，需要执行的所有命令都在这里，可以是接口或抽象类\n 3. receiver: 接受者角色，知道如何实施和执行一个请求相关的操作\n 4. concretecommand: 将一个接受者对象与一个动作绑定，调用接受者相应的操作，实现 execute\n\n\n# 命令模式解决智能生活项目\n\n应用实例要求\n\n 1. 编写程序，使用命令模式 完成前面的智能家电项目\n\n 2. 思路分析和图解\n    \n    \n\n 3. 代码实现\n\n> command接口\n\npackage com.zs.design.command;\n\n//创建命令接口\npublic interface command {\n    //执行动作(操作)\n    public void execute();\n\n    //撤销动作(操作)\n    public void undo();\n}\n\n\n\n> nocommand\n\n/**\n* 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做\n* 其实，这样是一种设计模式, 可以省掉对空判断\n* @author administrator\n*/\npublic class nocommand implements command {\n    @override\n    public void execute() {\n    }\n\n    @override\n    public void undo() {\n    }\n}\n\n\n> 灯具命令执行者角色\n> \n> lightreceiver\n\npublic class lightreceiver {\n    public void on() {\n        system.out.println(" 电灯打开了.. ");\n    }\n    public void off() {\n        system.out.println(" 电灯关闭了.. ");\n    }\n}\n\n\n> 灯具命令\n\npublic class lightoffcommand implements command {\n    // 聚合 lightreceiver\n    lightreceiver light;\n    // 构造器\n    public lightoffcommand(lightreceiver light) {\n        super();\n        this.light = light;\n    }\n    @override\n    public void execute() {\n        // 调用接收者的方法\n        light.off();\n    }\n    @override\n    public void undo() {\n        // 调用接收者的方法\n        light.on();\n    }\n}\n\n\npublic class lightoncommand implements command {\n    //聚合 lightreceiver\n    lightreceiver light;\n    //构造器\n    public lightoncommand(lightreceiver light) {\n        super();\n        this.light = light;\n    }\n    @override\n    public void execute() {\n        //调用接收者的方法\n        light.on();\n    }\n    @override\n    public void undo() {\n        //调用接收者的方法\n        light.off();\n    }\n}\n\n\n> 控制器\n\npackage com.zs.design.command;\n\npublic class remotecontroller {\n\n    // 开 按钮的命令数组\n    command[] oncommands;\n    command[] offcommands;\n\n    // 执行撤销的命令\n    command undocommand;\n\n    // 构造器，完成对按钮初始化\n    public remotecontroller() {\n        oncommands = new command[5];\n        offcommands = new command[5];\n\n        for (int i = 0; i < 5; i++) {\n            oncommands[i] = new nocommand();\n            offcommands[i] = new nocommand();\n        }\n    }\n\n    // 给我们的按钮设置你需要的命令\n    public void setcommand(int no, command oncommand, command offcommand) {\n        oncommands[no] = oncommand;\n        offcommands[no] = offcommand;\n    }\n\n    // 按下开按钮\n    public void onbuttonwaspushed(int no) { // no 0\n        // 找到你按下的开的按钮， 并调用对应方法\n        oncommands[no].execute();\n        // 记录这次的操作，用于撤销\n        undocommand = oncommands[no];\n    }\n\n    // 按下关按钮\n    public void offbuttonwaspushed(int no) { // no 0\n        // 找到你按下的关的按钮， 并调用对应方法\n        offcommands[no].execute();\n        // 记录这次的操作，用于撤销\n        undocommand = offcommands[no];\n    }\n\n    // 按下撤销按钮\n    public void undobuttonwaspushed() {\n        undocommand = new nocommand();\n        undocommand.undo();\n    }\n}\n\n\n> 客户端\n\npublic class client {\n    public static void main(string[] args) {\n        //使用命令设计模式，完成通过遥控器，对电灯的操作\n        //创建电灯的对象(接受者)\n        lightreceiver lightreceiver = new lightreceiver();\n        //创建电灯相关的开关命令\n        lightoncommand lightoncommand = new lightoncommand(lightreceiver);\n        lightoffcommand lightoffcommand = new lightoffcommand(lightreceiver);\n        //需要一个遥控器\n        remotecontroller remotecontroller = new remotecontroller();\n        //给我们的遥控器设置命令, 比如 no = 0 是电灯的开和关的操作\n        remotecontroller.setcommand(0, lightoncommand, lightoffcommand);\n        system.out.println("--------按下灯的开按钮-----------");\n        remotecontroller.onbuttonwaspushed(0);\n        system.out.println("--------按下灯的关按钮-----------");\n        remotecontroller.offbuttonwaspushed(0);\n        system.out.println("--------按下撤销按钮-----------");\n        remotecontroller.undobuttonwaspushed();\n    }\n}\n\n\n\n# spring框架jdbctemplate应用的源码分析\n\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170592452e4},{title:"普通文件上传",frontmatter:{title:"普通文件上传",autoSort:990},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/2%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html",relativePath:"zs-tool-小结/文件/2、普通文件上传.md",key:"v-790a347f",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/2%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html",headers:[{level:3,title:"接口接收文件，写入文件",slug:"接口接收文件-写入文件",normalizedTitle:"接口接收文件，写入文件",charIndex:2},{level:3,title:"httpClient转发上传文件",slug:"httpclient转发上传文件",normalizedTitle:"httpclient转发上传文件",charIndex:373}],lastUpdated:"2023年12月12日星期二下午3点28分",lastUpdatedTimestamp:1702366094e3,headersStr:"接口接收文件，写入文件 httpClient转发上传文件",content:'# 接口接收文件，写入文件\n\n@ResponseBody\n@PostMapping("/upload")\npublic ResponseVo upload(@RequestParam(value = "file", required = false) MultipartFile multipartFile) {\n    File file=new File("上传到服务器的文件地址");\n    try {\n        FileUtil.copy(multipartFile.getBytes(), file);\n    } catch (IOException e) {\n        return  ResultUtil.error();\n    }\n    return ResultUtil.success();\n}\n\n\n\n# httpClient转发上传文件\n\n简单描述我的需求：封装一个公共接口，调用其他系统的接口做文件上传\n\n1 引入hutool的依赖\n\n\x3c!-- hutool 工具包 --\x3e\n<dependency>\n    <groupId>cn.hutool</groupId>\n    <artifactId>hutool-all</artifactId>\n    <version>5.7.7</version>\n</dependency>\n\x3c!-- fastjson工具包 --\x3e\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.1.23</version>\n</dependency>\n\n\n\n2 编写controller代码\n\n@ApiOperation(value = "公共文件上传")\n@PostMapping(value = "/commons/fileUpload")\npublic JSONObject fileUpload(MultipartFile file) throws Exception {\n    return  webPostAccountingService.fileUpload(file);\n}\n\n\n\n3 编写service代码\n\n这里的代码是核心，整个url请求，以及参数都这这里处理的，代码如下\n\nprivate JSONObject fileUpload(MultipartFile multipartFile) throws Exception {\n    HashMap<String, Object> paramMaps = new HashMap<>(4);\n    paramMaps.put("xxx", );\n    // 将MultipartFile转换为File\n    paramMaps.put("file", this.multipartFileToFile(multipartFile));\n    HttpResponse response = HttpRequest.post("xxx")\n        .header("xxx", xx)\n        .form(paramMaps)\n        .execute();\n    int status = response.getStatus();\n    System.out.println("请求响应状态码:" + status);\n    String body = response.body();\n    System.out.println(body);\n    JSONObject jsonObject = JSONObject.parseObject(body);\n    Object msg = jsonObject.get("msg");\n    System.out.println(msg);\n    Object code = jsonObject.get("code");\n    System.out.println(code);\n    return jsonObject;\n}\n\n\n4 将MultipartFile转换为File方法\n\n所以需要将MultipartFile转换为File，方法如下\n\n\nprivate  File multipartFileToFile(MultipartFile multiFile) {\n    // 获取文件名\n    String fileName = multiFile.getOriginalFilename();\n    // 获取文件后缀\n    String prefix = fileName.substring(fileName.lastIndexOf("."));\n    // 若须要防止生成的临时文件重复,能够在文件名后添加随机码\n    try {\n        File file = File.createTempFile(fileName, prefix);\n        multiFile.transferTo(file);\n        return file;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n',normalizedContent:'# 接口接收文件，写入文件\n\n@responsebody\n@postmapping("/upload")\npublic responsevo upload(@requestparam(value = "file", required = false) multipartfile multipartfile) {\n    file file=new file("上传到服务器的文件地址");\n    try {\n        fileutil.copy(multipartfile.getbytes(), file);\n    } catch (ioexception e) {\n        return  resultutil.error();\n    }\n    return resultutil.success();\n}\n\n\n\n# httpclient转发上传文件\n\n简单描述我的需求：封装一个公共接口，调用其他系统的接口做文件上传\n\n1 引入hutool的依赖\n\n\x3c!-- hutool 工具包 --\x3e\n<dependency>\n    <groupid>cn.hutool</groupid>\n    <artifactid>hutool-all</artifactid>\n    <version>5.7.7</version>\n</dependency>\n\x3c!-- fastjson工具包 --\x3e\n<dependency>\n    <groupid>com.alibaba</groupid>\n    <artifactid>fastjson</artifactid>\n    <version>1.1.23</version>\n</dependency>\n\n\n\n2 编写controller代码\n\n@apioperation(value = "公共文件上传")\n@postmapping(value = "/commons/fileupload")\npublic jsonobject fileupload(multipartfile file) throws exception {\n    return  webpostaccountingservice.fileupload(file);\n}\n\n\n\n3 编写service代码\n\n这里的代码是核心，整个url请求，以及参数都这这里处理的，代码如下\n\nprivate jsonobject fileupload(multipartfile multipartfile) throws exception {\n    hashmap<string, object> parammaps = new hashmap<>(4);\n    parammaps.put("xxx", );\n    // 将multipartfile转换为file\n    parammaps.put("file", this.multipartfiletofile(multipartfile));\n    httpresponse response = httprequest.post("xxx")\n        .header("xxx", xx)\n        .form(parammaps)\n        .execute();\n    int status = response.getstatus();\n    system.out.println("请求响应状态码:" + status);\n    string body = response.body();\n    system.out.println(body);\n    jsonobject jsonobject = jsonobject.parseobject(body);\n    object msg = jsonobject.get("msg");\n    system.out.println(msg);\n    object code = jsonobject.get("code");\n    system.out.println(code);\n    return jsonobject;\n}\n\n\n4 将multipartfile转换为file方法\n\n所以需要将multipartfile转换为file，方法如下\n\n\nprivate  file multipartfiletofile(multipartfile multifile) {\n    // 获取文件名\n    string filename = multifile.getoriginalfilename();\n    // 获取文件后缀\n    string prefix = filename.substring(filename.lastindexof("."));\n    // 若须要防止生成的临时文件重复,能够在文件名后添加随机码\n    try {\n        file file = file.createtempfile(filename, prefix);\n        multifile.transferto(file);\n        return file;\n    } catch (exception e) {\n        e.printstacktrace();\n    }\n    return null;\n}\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702366094e3},{title:"设计模式--3.3.9.行为型--状态模式",frontmatter:{},regularPath:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.9.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html",relativePath:"zs-se/设计模式/设计模式--3.3.9.行为型--状态模式.md",key:"v-29c3dad9",path:"/zs-se/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--3.3.9.%E8%A1%8C%E4%B8%BA%E5%9E%8B--%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html",headers:[{level:2,title:"APP 抽奖活动问题",slug:"app-抽奖活动问题",normalizedTitle:"app 抽奖活动问题",charIndex:28},{level:2,title:"状态模式基本介绍",slug:"状态模式基本介绍",normalizedTitle:"状态模式基本介绍",charIndex:183},{level:2,title:"状态模式的原理类图",slug:"状态模式的原理类图",normalizedTitle:"状态模式的原理类图",charIndex:325},{level:2,title:"状态模式解决 APP 抽奖问",slug:"状态模式解决-app-抽奖问",normalizedTitle:"状态模式解决 app 抽奖问",charIndex:515}],lastUpdated:"2024年1月22日星期一晚上7点55分",lastUpdatedTimestamp:170592452e4,headersStr:"APP 抽奖活动问题 状态模式基本介绍 状态模式的原理类图 状态模式解决 APP 抽奖问",content:'# 设计模式--3.3.9.行为型--状态模式\n\n\n# APP 抽奖活动问题\n\n请编写程序完成 APP 抽奖活动 具体要求如下:\n\n 1. 假如每参加一次这个活动要扣除用户 50 积分，中奖概率是 10%\n\n 2. 奖品数量固定，抽完就不能抽奖\n\n 3. 活动有四个状态: 可以抽奖、不能抽奖、发放奖品和奖品领完\n\n 4. 活动的四个状态转换关系图(右图)\n\n\n# 状态模式基本介绍\n\n基本介绍\n\n 1. 状态模式（State Pattern）：它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换\n\n 2. 当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类\n\n\n# 状态模式的原理类图\n\n\n\n对原理类图的说明-即(状态模式的角色及职责)\n\n 1. Context 类为环境角色, 用于维护 State 实例,这个实例定义当前状态\n\n 2. State 是抽象状态角色,定义一个接口封装与 Context 的一个特定接口相关行为\n\n 3. ConcreteState 具体的状态角色，每个子类实现一个与 Context 的一个状态相关行为\n\n\n# 状态模式解决 APP 抽奖问\n\n 1. 应用实例要求 完成 APP 抽奖活动项目，使用状态模式.\n\n 2. 思路分析和图解(类图)\n    \n    * 定义出一个接口叫状态接口，每个状态都实现它。\n    * 接口有扣除积分方法、抽奖方法、发放奖品方法\n    \n    \n\n 3. 代码实现\n\n> 状态抽象类\n\n\n/**\n * 状态抽象类\n *\n * @author Administrator\n */\npublic abstract class State {\n    // 扣除积分 - 50\n    public abstract void deductMoney();\n\n    // 是否抽中奖品\n    public abstract boolean raffle();\n\n    // 发放奖品\n    public abstract void dispensePrize();\n}\n\n\n> 状态\n\npackage com.zs.design.state;\n\n/**\n * 不能抽奖状态\n *\n * @author Administrator\n */\npublic class NoRaffleState extends State {\n    // 初始化时传入活动引用，扣除积分后改变其状态\n    RaffleActivity activity;\n\n    public NoRaffleState(RaffleActivity activity) {\n        this.activity = activity;\n    }\n\n    // 当前状态可以扣积分 , 扣除后，将状态设置成可以抽奖状态\n    @Override\n    public void deductMoney() {\n        System.out.println("扣除 50 积分成功，您可以抽奖了");\n        activity.setState(activity.getCanRaffleState());\n    }\n\n    // 当前状态不能抽奖\n    @Override\n    public boolean raffle() {\n        System.out.println("扣了积分才能抽奖喔！");\n        return false;\n    }\n\n    // 当前状态不能发奖品\n    @Override\n    public void dispensePrize() {\n        System.out.println("不能发放奖品");\n    }\n}\n\n\npackage com.zs.design.state;\n\nimport java.util.Random;\n\n/**\n * Create by 张邵\n * 2024/1/22 18:31\n */\npublic class CanRaffleState extends State {\n    RaffleActivity activity;\n    public CanRaffleState(RaffleActivity activity) {\n        this.activity = activity;\n    }\n\n    //已经扣除了积分，不能再扣\n    @Override\n    public void deductMoney() {\n        System.out.println("已经扣取过了积分");\n    }\n\n    //可以抽奖, 抽完奖后，根据实际情况，改成新的状态\n    @Override\n    public boolean raffle() {\n        System.out.println("正在抽奖，请稍等！");\n        Random r = new Random();\n        int num = r.nextInt(10);\n        // 10%中奖机会\n        if(num == 0){\n            // 改变活动状态为发放奖品 context\n            activity.setState(activity.getDispenseState());\n            return true;\n        }else{\n            System.out.println("很遗憾没有抽中奖品！");\n            // 改变状态为不能抽奖\n            activity.setState(activity.getNoRafflleState());\n            return false;\n        }\n    }\n\n    // 不能发放奖品\n    @Override\n    public void dispensePrize() {\n        System.out.println("没中奖，不能发放奖品");\n    }\n}\n\n\npackage com.zs.design.state;\n\n/**\n * 奖品发放完毕状态\n * 说明，当我们 activity 改变成 DispenseOutState， 抽奖活动结束\n *\n * @author Administrator\n */\npublic class DispenseState extends State {\n\n    // 初始化时传入活动引用，发放奖品后改变其状态\n    RaffleActivity activity;\n\n    public DispenseState(RaffleActivity activity) {\n        this.activity = activity;\n    }\n\n\n    @Override\n    public void deductMoney() {\n        System.out.println("不能扣除积分");\n    }\n\n    @Override\n    public boolean raffle() {\n        System.out.println("不能抽奖");\n        return false;\n    }\n\n    //发放奖品\n    @Override\n    public void dispensePrize() {\n        if (activity.getCount() > 0) {\n            System.out.println("恭喜中奖了");\n            // 改变状态为不能抽奖\n            activity.setState(activity.getNoRafflleState());\n        } else {\n            System.out.println("很遗憾，奖品发送完了");\n            // 改变状态为奖品发送完毕, 后面我们就不可以抽奖\n            activity.setState(activity.getDispensOutState());\n            //System.out.println("抽奖活动结束");\n            //System.exit(0);\n        }\n    }\n}\n\n\npackage com.zs.design.state;\n\n/**\n * 奖品发放完毕状态\n * 说明，当我们 activity 改变成 DispenseOutState， 抽奖活动结束\n * @author Administrator\n *\n */\npublic class DispenseOutState extends State{\n\n\n    // 初始化时传入活动引用\n    RaffleActivity activity;\n\n    public DispenseOutState(RaffleActivity activity){\n        this.activity = activity;\n    }\n\n    @Override\n    public void deductMoney() {\n        System.out.println("奖品发送完了，请下次再参加");\n    }\n\n    @Override\n    public boolean raffle() {\n        System.out.println("奖品发送完了，请下次再参加");\n        return false;\n    }\n\n    @Override\n    public void dispensePrize() {\n        System.out.println("奖品发送完了，请下次再参加");\n    }\n}\n\n\n> 活动上下文对象\n\npackage com.zs.design.state;\n\n/**\n * 抽奖活动 //\n *\n * @author Administrator\n */\npublic class RaffleActivity {\n\n    // state 表示活动当前的状态，是变化\n    State state = null;\n\n    // 奖品数量\n    int count = 0;\n\n    // 四个属性，表示四种状态\n    State noRafflleState = new NoRaffleState(this);\n    State canRaffleState = new CanRaffleState(this);\n    State dispenseState = new DispenseState(this);\n    State dispensOutState = new DispenseOutState(this);\n\n\n    //构造器\n    //1. 初始化当前的状态为 noRafflleState（即不能抽奖的状态）\n    //2. 初始化奖品的数量\n    public RaffleActivity(int count) {\n        this.state = getNoRafflleState();\n        this.count = count;\n    }\n\n\n    //扣分, 调用当前状态的 deductMoney\n    public void deductMoney() {\n        state.deductMoney();\n    }\n\n    //抽奖\n    public boolean raffle() {\n        // 如果当前的状态是抽奖成功\n        boolean raffle = state.raffle();\n        if (raffle) {\n            //领取奖品\n            state.dispensePrize();\n        }\n        return raffle;\n    }\n\n\n    public State getState() {\n        return state;\n    }\n\n    public void setState(State state) {\n        this.state = state;\n    }\n\n    //这里请大家注意，每领取一次奖品，count--\n    public int getCount() {\n        int curCount = count;\n        count--;\n        return curCount;\n    }\n\n    public void setCount(int count) {\n        this.count = count;\n    }\n\n    public State getNoRafflleState() {\n        return noRafflleState;\n    }\n\n    public void setNoRafflleState(State noRafflleState) {\n        this.noRafflleState = noRafflleState;\n    }\n\n    public State getCanRaffleState() {\n        return canRaffleState;\n    }\n\n    public void setCanRaffleState(State canRaffleState) {\n        this.canRaffleState = canRaffleState;\n    }\n\n    public State getDispenseState() {\n        return dispenseState;\n    }\n\n    public void setDispenseState(State dispenseState) {\n        this.dispenseState = dispenseState;\n    }\n\n    public State getDispensOutState() {\n        return dispensOutState;\n    }\n\n    public void setDispensOutState(State dispensOutState) {\n        this.dispensOutState = dispensOutState;\n    }\n}\n\n\n\n> Client测试\n\npackage com.zs.design.state;\n\n/**\n * 状态模式测试类\n *\n * @author Administrator\n */\npublic class ClientTest {\n    public static void main(String[] args) {\n        // 创建活动对象，奖品有 1 个奖品\n        RaffleActivity activity = new RaffleActivity(1);\n        // 我们连续抽 300 次奖\n        for (int i = 0; i < 30; i++) {\n            System.out.println("--------第" + (i + 1) + "次抽奖----------");\n            // 参加抽奖，第一步点击扣除积分\n            activity.deductMoney();\n            // 第二步抽奖\n            if (activity.raffle()) break;\n        }\n    }\n}\n',normalizedContent:'# 设计模式--3.3.9.行为型--状态模式\n\n\n# app 抽奖活动问题\n\n请编写程序完成 app 抽奖活动 具体要求如下:\n\n 1. 假如每参加一次这个活动要扣除用户 50 积分，中奖概率是 10%\n\n 2. 奖品数量固定，抽完就不能抽奖\n\n 3. 活动有四个状态: 可以抽奖、不能抽奖、发放奖品和奖品领完\n\n 4. 活动的四个状态转换关系图(右图)\n\n\n# 状态模式基本介绍\n\n基本介绍\n\n 1. 状态模式（state pattern）：它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换\n\n 2. 当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类\n\n\n# 状态模式的原理类图\n\n\n\n对原理类图的说明-即(状态模式的角色及职责)\n\n 1. context 类为环境角色, 用于维护 state 实例,这个实例定义当前状态\n\n 2. state 是抽象状态角色,定义一个接口封装与 context 的一个特定接口相关行为\n\n 3. concretestate 具体的状态角色，每个子类实现一个与 context 的一个状态相关行为\n\n\n# 状态模式解决 app 抽奖问\n\n 1. 应用实例要求 完成 app 抽奖活动项目，使用状态模式.\n\n 2. 思路分析和图解(类图)\n    \n    * 定义出一个接口叫状态接口，每个状态都实现它。\n    * 接口有扣除积分方法、抽奖方法、发放奖品方法\n    \n    \n\n 3. 代码实现\n\n> 状态抽象类\n\n\n/**\n * 状态抽象类\n *\n * @author administrator\n */\npublic abstract class state {\n    // 扣除积分 - 50\n    public abstract void deductmoney();\n\n    // 是否抽中奖品\n    public abstract boolean raffle();\n\n    // 发放奖品\n    public abstract void dispenseprize();\n}\n\n\n> 状态\n\npackage com.zs.design.state;\n\n/**\n * 不能抽奖状态\n *\n * @author administrator\n */\npublic class norafflestate extends state {\n    // 初始化时传入活动引用，扣除积分后改变其状态\n    raffleactivity activity;\n\n    public norafflestate(raffleactivity activity) {\n        this.activity = activity;\n    }\n\n    // 当前状态可以扣积分 , 扣除后，将状态设置成可以抽奖状态\n    @override\n    public void deductmoney() {\n        system.out.println("扣除 50 积分成功，您可以抽奖了");\n        activity.setstate(activity.getcanrafflestate());\n    }\n\n    // 当前状态不能抽奖\n    @override\n    public boolean raffle() {\n        system.out.println("扣了积分才能抽奖喔！");\n        return false;\n    }\n\n    // 当前状态不能发奖品\n    @override\n    public void dispenseprize() {\n        system.out.println("不能发放奖品");\n    }\n}\n\n\npackage com.zs.design.state;\n\nimport java.util.random;\n\n/**\n * create by 张邵\n * 2024/1/22 18:31\n */\npublic class canrafflestate extends state {\n    raffleactivity activity;\n    public canrafflestate(raffleactivity activity) {\n        this.activity = activity;\n    }\n\n    //已经扣除了积分，不能再扣\n    @override\n    public void deductmoney() {\n        system.out.println("已经扣取过了积分");\n    }\n\n    //可以抽奖, 抽完奖后，根据实际情况，改成新的状态\n    @override\n    public boolean raffle() {\n        system.out.println("正在抽奖，请稍等！");\n        random r = new random();\n        int num = r.nextint(10);\n        // 10%中奖机会\n        if(num == 0){\n            // 改变活动状态为发放奖品 context\n            activity.setstate(activity.getdispensestate());\n            return true;\n        }else{\n            system.out.println("很遗憾没有抽中奖品！");\n            // 改变状态为不能抽奖\n            activity.setstate(activity.getnoraffllestate());\n            return false;\n        }\n    }\n\n    // 不能发放奖品\n    @override\n    public void dispenseprize() {\n        system.out.println("没中奖，不能发放奖品");\n    }\n}\n\n\npackage com.zs.design.state;\n\n/**\n * 奖品发放完毕状态\n * 说明，当我们 activity 改变成 dispenseoutstate， 抽奖活动结束\n *\n * @author administrator\n */\npublic class dispensestate extends state {\n\n    // 初始化时传入活动引用，发放奖品后改变其状态\n    raffleactivity activity;\n\n    public dispensestate(raffleactivity activity) {\n        this.activity = activity;\n    }\n\n\n    @override\n    public void deductmoney() {\n        system.out.println("不能扣除积分");\n    }\n\n    @override\n    public boolean raffle() {\n        system.out.println("不能抽奖");\n        return false;\n    }\n\n    //发放奖品\n    @override\n    public void dispenseprize() {\n        if (activity.getcount() > 0) {\n            system.out.println("恭喜中奖了");\n            // 改变状态为不能抽奖\n            activity.setstate(activity.getnoraffllestate());\n        } else {\n            system.out.println("很遗憾，奖品发送完了");\n            // 改变状态为奖品发送完毕, 后面我们就不可以抽奖\n            activity.setstate(activity.getdispensoutstate());\n            //system.out.println("抽奖活动结束");\n            //system.exit(0);\n        }\n    }\n}\n\n\npackage com.zs.design.state;\n\n/**\n * 奖品发放完毕状态\n * 说明，当我们 activity 改变成 dispenseoutstate， 抽奖活动结束\n * @author administrator\n *\n */\npublic class dispenseoutstate extends state{\n\n\n    // 初始化时传入活动引用\n    raffleactivity activity;\n\n    public dispenseoutstate(raffleactivity activity){\n        this.activity = activity;\n    }\n\n    @override\n    public void deductmoney() {\n        system.out.println("奖品发送完了，请下次再参加");\n    }\n\n    @override\n    public boolean raffle() {\n        system.out.println("奖品发送完了，请下次再参加");\n        return false;\n    }\n\n    @override\n    public void dispenseprize() {\n        system.out.println("奖品发送完了，请下次再参加");\n    }\n}\n\n\n> 活动上下文对象\n\npackage com.zs.design.state;\n\n/**\n * 抽奖活动 //\n *\n * @author administrator\n */\npublic class raffleactivity {\n\n    // state 表示活动当前的状态，是变化\n    state state = null;\n\n    // 奖品数量\n    int count = 0;\n\n    // 四个属性，表示四种状态\n    state noraffllestate = new norafflestate(this);\n    state canrafflestate = new canrafflestate(this);\n    state dispensestate = new dispensestate(this);\n    state dispensoutstate = new dispenseoutstate(this);\n\n\n    //构造器\n    //1. 初始化当前的状态为 noraffllestate（即不能抽奖的状态）\n    //2. 初始化奖品的数量\n    public raffleactivity(int count) {\n        this.state = getnoraffllestate();\n        this.count = count;\n    }\n\n\n    //扣分, 调用当前状态的 deductmoney\n    public void deductmoney() {\n        state.deductmoney();\n    }\n\n    //抽奖\n    public boolean raffle() {\n        // 如果当前的状态是抽奖成功\n        boolean raffle = state.raffle();\n        if (raffle) {\n            //领取奖品\n            state.dispenseprize();\n        }\n        return raffle;\n    }\n\n\n    public state getstate() {\n        return state;\n    }\n\n    public void setstate(state state) {\n        this.state = state;\n    }\n\n    //这里请大家注意，每领取一次奖品，count--\n    public int getcount() {\n        int curcount = count;\n        count--;\n        return curcount;\n    }\n\n    public void setcount(int count) {\n        this.count = count;\n    }\n\n    public state getnoraffllestate() {\n        return noraffllestate;\n    }\n\n    public void setnoraffllestate(state noraffllestate) {\n        this.noraffllestate = noraffllestate;\n    }\n\n    public state getcanrafflestate() {\n        return canrafflestate;\n    }\n\n    public void setcanrafflestate(state canrafflestate) {\n        this.canrafflestate = canrafflestate;\n    }\n\n    public state getdispensestate() {\n        return dispensestate;\n    }\n\n    public void setdispensestate(state dispensestate) {\n        this.dispensestate = dispensestate;\n    }\n\n    public state getdispensoutstate() {\n        return dispensoutstate;\n    }\n\n    public void setdispensoutstate(state dispensoutstate) {\n        this.dispensoutstate = dispensoutstate;\n    }\n}\n\n\n\n> client测试\n\npackage com.zs.design.state;\n\n/**\n * 状态模式测试类\n *\n * @author administrator\n */\npublic class clienttest {\n    public static void main(string[] args) {\n        // 创建活动对象，奖品有 1 个奖品\n        raffleactivity activity = new raffleactivity(1);\n        // 我们连续抽 300 次奖\n        for (int i = 0; i < 30; i++) {\n            system.out.println("--------第" + (i + 1) + "次抽奖----------");\n            // 参加抽奖，第一步点击扣除积分\n            activity.deductmoney();\n            // 第二步抽奖\n            if (activity.raffle()) break;\n        }\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170592452e4},{title:"文件上传下载等操作",frontmatter:{title:"文件上传下载等操作"},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/",relativePath:"zs-tool-小结/文件/README.md",key:"v-32128328",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/",lastUpdated:"2023年12月12日星期二下午3点39分",lastUpdatedTimestamp:1702366765e3,headersStr:null,content:"# 文件操作\n\n涉及到的 javaSE io相关内容，可以参考java-se io\n\n> 优秀的开源项目\n\nx-file-storage",normalizedContent:"# 文件操作\n\n涉及到的 javase io相关内容，可以参考java-se io\n\n> 优秀的开源项目\n\nx-file-storage",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701950399e3},{title:"常见的response响应头属性",frontmatter:{title:"常见的response响应头属性","autoGroup-1":"附录"},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E5%B8%B8%E8%A7%81%E7%9A%84response%E5%8F%82%E6%95%B0.html",relativePath:"zs-tool-小结/文件/常见的response参数.md",key:"v-0d238d66",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E5%B8%B8%E8%A7%81%E7%9A%84response%E5%8F%82%E6%95%B0.html",lastUpdated:"2023年12月12日星期二下午3点28分",lastUpdatedTimestamp:1702366094e3,headersStr:null,content:'# response.setContentType()与response.setHeader()\n\n这三个 HTTP 响应头都是用来控制浏览器缓存的，具体作用如下：\n1. `Cache-Control`: 该响应头用于控制缓存行为，常见的取值有以下几种：\n   - `no-cache`: 表示不缓存响应内容，每次请求都需要向服务器重新发起请求。\n   - `no-store`: 表示不缓存响应内容，并且不存储请求和响应的任何部分。\n   - `max-age`: 表示缓存内容的最大有效时间，单位为秒。例如，`Cache-Control: max-age=3600` 表示缓存内容在 1 小时后过期。\n   - `private`: 表示响应内容只能被客户端缓存，而不能被中间代理服务器缓存。\n   - `public`: 表示响应内容可以被客户端和中间代理服务器缓存。\n2. `Pragma`: 该响应头用于控制缓存行为，但已经被弃用，现在建议使用 `Cache-Control` 响应头。\n   - `no-cache`: 与 `Cache-Control: no-cache` 作用相同，表示不缓存响应内容。\n\n3. `Expires`: 该响应头用于指定缓存内容的过期时间，是一个绝对时间，表示一个日期时间值。例如，`Expires: Wed, 21 Oct 2015 07:28:00 GMT` 表示缓存内容在该时间之后过期。\n在实际应用中，我们可以根据需要选择适当的缓存策略。例如，如果我们的网站提供的是实时数据，需要保证每次请求都能及时获取最新的数据，可以使用 `Cache-Control: no-cache` 或 `Pragma: no-cache` 响应头来禁用缓存；如果我们的网站提供的是静态资源（例如图片、CSS、JavaScript 文件等），可以使用较长的缓存时间，减少不必要的网络请求，提高页面加载速度，可以使用 `Cache-Control: max-age` 或 `Expires` 响应头来设置缓存时间。\n\n\n1、一秒刷新页面一次 response.setHeader("refresh","1");\n\n2、二秒跳到其他页面 response.setHeader("refresh","2;URL=otherPagename");\n\n3、没有缓存： response.setHeader("Pragma", "No-cache"); response.setHeader("Cache-Control", "no-cache");\n\n4、设置过期的时间期限\n\nresponse.setDateHeader("Expires", System.currentTimeMillis()+自己设置的时间期限);\n\n5、访问别的页面：response.setStatus（302）; response.setHeader("location","url");\n\n6、下载文件\n\nContent-Type的作用：该实体头的作用是让服务器告诉浏览器它发送的数据属于什么文件类型。\n\n例如：当Content-Type 的值设置为text/html和text/plain时,前者会让浏览器把接收到的实体内容以HTML格式解析,后者会让浏览器以普通文本解析.\n\nContent-Disposition 的作用：当Content-Type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型\n\nresponse.setHeader("Content-Type","video/x-msvideo");\n\nresponse.setHeader( "Content-Disposition", "attachment;filename=" + new String( “文件名称”.getBytes("gb2312"), "ISO8859-1" ) );\n\n7、通知浏览器数据采用的压缩格式：response.setHeader("Content-Encoding","压缩后的数据"); 高速浏览器压缩数据的长度：response.setHeader("Content-Length",压缩后的数据.length+"");\n\n8、高速浏览器图片或视频：response.setHeader("Content-type","这个参数在tomcat里conf下的web.xml里面找");\n\ninputstream in= this.getServletContext.getResourceAsStream("/2.jpg"); int len=0; byte buffer[]= new byte[1024]\n\noutputStream out = response.getOutputStream();\n\nwhile(len=in.read(buffer)>0){ out.write(buffer,0,len) }\n\n9、高速浏览器已下载的形式：\n\nresponse.setHeader("Content-disposition","attachment;filename=2.jpg");\n\ninputstream in= this.getServletContext.getResourceAsStream("/2.jpg"); int len=0; byte buffer[]= new byte[1024]\n\noutputStream out = response.getOutputStream();\n\nwhile(len=in.read(buffer)>0){ out.write(buffer,0,len) }\n\n10.contentType\n\nresponse.setContentType(MIME)的作用是使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。 例如web浏览器就是通过MIME类型来判断文件是GIF图片。通过MIME类型来处理json字符串。 Tomcat的安装目录\\conf\\web.xml 中就定义了大量MIME类型 ，可以参考。 response.setContentType("text/html; charset=utf-8"); html .setContentType("text/plain; charset=utf-8"); 文本 text/javascript json数据 application/xml xml数据 这 个方法设置发送到客户端的响应的内容类型，此时响应还没有提交。给出的内容类型可以包括字符编码说明，例 如：text/html;charset=UTF-8.如果该方法在getWriter()方法被调用之前调用，那么响应的字符编码将仅从给出的内容类型 中设置。该方法如果在getWriter()方法被调用之后或者在被提交之后调用，将不会设置响应的字符编码，在使用http协议的情况中，该方法设 置 Content-type实体报头。 一般在Servlet中，习惯性的会首先设置请求以及响应的内容类型以及编码方式： response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8");\n\nresponse.setContentType()的String参数及对应类型\n\n文件扩展名                 CONTENT-TYPE(MIME-TYPE)                   文件扩展名      CONTENT-TYPE(MIME-TYPE)\n.*（ 二进制流，不知道下载文件类型）   application/octet-stream                  .tif       image/tiff\n.001                  application/x-001                         .301       application/x-301\n.323                  text/h323                                 .906       application/x-906\n.907                  drawing/907                               .a11       application/x-a11\n.acp                  audio/x-mei-aac                           .ai        application/postscript\n.aif                  audio/aiff                                .aifc      audio/aiff\n.aiff                 audio/aiff                                .anv       application/x-anv\n.asa                  text/asa                                  .asf       video/x-ms-asf\n.asp                  text/asp                                  .asx       video/x-ms-asf\n.au                   audio/basic                               .avi       video/avi\n.awf                  application/vnd.adobe.workflow            .biz       text/xml\n.bmp                  application/x-bmp                         .bot       application/x-bot\n.c4t                  application/x-c4t                         .c90       application/x-c90\n.cal                  application/x-cals                        .cat       application/vnd.ms-pki.seccat\n.cdf                  application/x-netcdf                      .cdr       application/x-cdr\n.cel                  application/x-cel                         .cer       application/x-x509-ca-cert\n.cg4                  application/x-g4                          .cgm       application/x-cgm\n.cit                  application/x-cit                         .class     java/*\n.cml                  text/xml                                  .cmp       application/x-cmp\n.cmx                  application/x-cmx                         .cot       application/x-cot\n.crl                  application/pkix-crl                      .crt       application/x-x509-ca-cert\n.csi                  application/x-csi                         .css       text/css\n.cut                  application/x-cut                         .dbf       application/x-dbf\n.dbm                  application/x-dbm                         .dbx       application/x-dbx\n.dcd                  text/xml                                  .dcx       application/x-dcx\n.der                  application/x-x509-ca-cert                .dgn       application/x-dgn\n.dib                  application/x-dib                         .dll       application/x-msdownload\n.doc                  application/msword                        .dot       application/msword\n.drw                  application/x-drw                         .dtd       text/xml\n.dwf                  Model/vnd.dwf                             .dwf       application/x-dwf\n.dwg                  application/x-dwg                         .dxb       application/x-dxb\n.dxf                  application/x-dxf                         .edn       application/vnd.adobe.edn\n.emf                  application/x-emf                         .eml       message/rfc822\n.ent                  text/xml                                  .epi       application/x-epi\n.eps                  application/x-ps                          .eps       application/postscript\n.etd                  application/x-ebx                         .exe       application/x-msdownload\n.fax                  image/fax                                 .fdf       application/vnd.fdf\n.fif                  application/fractals                      .fo        text/xml\n.frm                  application/x-frm                         .g4        application/x-g4\n.gbr                  application/x-gbr                         .          application/x-\n.gif                  image/gif                                 .gl2       application/x-gl2\n.gp4                  application/x-gp4                         .hgl       application/x-hgl\n.hmr                  application/x-hmr                         .hpg       application/x-hpgl\n.hpl                  application/x-hpl                         .hqx       application/mac-binhex40\n.hrf                  application/x-hrf                         .hta       application/hta\n.htc                  text/x-component                          .htm       text/html\n.html                 text/html                                 .htt       text/webviewhtml\n.htx                  text/html                                 .icb       application/x-icb\n.ico                  image/x-icon                              .ico       application/x-ico\n.iff                  application/x-iff                         .ig4       application/x-g4\n.igs                  application/x-igs                         .iii       application/x-iphone\n.img                  application/x-img                         .ins       application/x-internet-signup\n.isp                  application/x-internet-signup             .IVF       video/x-ivf\n.java                 java/*                                    .jfif      image/jpeg\n.jpe                  image/jpeg                                .jpe       application/x-jpe\n.jpeg                 image/jpeg                                .jpg       image/jpeg\n.jpg                  application/x-jpg                         .js        application/x-javascript\n.jsp                  text/html                                 .la1       audio/x-liquid-file\n.lar                  application/x-laplayer-reg                .latex     application/x-latex\n.lavs                 audio/x-liquid-secure                     .lbm       application/x-lbm\n.lmsff                audio/x-la-lms                            .ls        application/x-javascript\n.ltr                  application/x-ltr                         .m1v       video/x-mpeg\n.m2v                  video/x-mpeg                              .m3u       audio/mpegurl\n.m4e                  video/mpeg4                               .mac       application/x-mac\n.man                  application/x-troff-man                   .math      text/xml\n.mdb                  application/msaccess                      .mdb       application/x-mdb\n.mfp                  application/x-shockwave-flash             .mht       message/rfc822\n.mhtml                message/rfc822                            .mi        application/x-mi\n.mid                  audio/mid                                 .midi      audio/mid\n.mil                  application/x-mil                         .mml       text/xml\n.mnd                  audio/x-musicnet-download                 .mns       audio/x-musicnet-stream\n.mocha                application/x-javascript                  .movie     video/x-sgi-movie\n.mp1                  audio/mp1                                 .mp2       audio/mp2\n.mp2v                 video/mpeg                                .mp3       audio/mp3\n.mp4                  video/mpeg4                               .mpa       video/x-mpg\n.mpd                  application/vnd.ms-project                .mpe       video/x-mpeg\n.mpeg                 video/mpg                                 .mpg       video/mpg\n.mpga                 audio/rn-mpeg                             .mpp       application/vnd.ms-project\n.mps                  video/x-mpeg                              .mpt       application/vnd.ms-project\n.mpv                  video/mpg                                 .mpv2      video/mpeg\n.mpw                  application/vnd.ms-project                .mpx       application/vnd.ms-project\n.mtx                  text/xml                                  .mxp       application/x-mmxp\n.net                  image/pnetvue                             .nrf       application/x-nrf\n.nws                  message/rfc822                            .odc       text/x-ms-odc\n.out                  application/x-out                         .p10       application/pkcs10\n.p12                  application/x-pkcs12                      .p7b       application/x-pkcs7-certificates\n.p7c                  application/pkcs7-mime                    .p7m       application/pkcs7-mime\n.p7r                  application/x-pkcs7-certreqresp           .p7s       application/pkcs7-signature\n.pc5                  application/x-pc5                         .pci       application/x-pci\n.pcl                  application/x-pcl                         .pcx       application/x-pcx\n.pdf                  application/pdf                           .pdf       application/pdf\n.pdx                  application/vnd.adobe.pdx                 .pfx       application/x-pkcs12\n.pgl                  application/x-pgl                         .pic       application/x-pic\n.pko                  application/vnd.ms-pki.pko                .pl        application/x-perl\n.plg                  text/html                                 .pls       audio/scpls\n.plt                  application/x-plt                         .png       image/png\n.png                  application/x-png                         .pot       application/vnd.ms-powerpoint\n.ppa                  application/vnd.ms-powerpoint             .ppm       application/x-ppm\n.pps                  application/vnd.ms-powerpoint             .ppt       application/vnd.ms-powerpoint\n.ppt                  application/x-ppt                         .pr        application/x-pr\n.prf                  application/pics-rules                    .prn       application/x-prn\n.prt                  application/x-prt                         .ps        application/x-ps\n.ps                   application/postscript                    .ptn       application/x-ptn\n.pwz                  application/vnd.ms-powerpoint             .r3t       text/vnd.rn-realtext3d\n.ra                   audio/vnd.rn-realaudio                    .ram       audio/x-pn-realaudio\n.ras                  application/x-ras                         .rat       application/rat-file\n.rdf                  text/xml                                  .rec       application/vnd.rn-recording\n.red                  application/x-red                         .rgb       application/x-rgb\n.rjs                  application/vnd.rn-realsystem-rjs         .rjt       application/vnd.rn-realsystem-rjt\n.rlc                  application/x-rlc                         .rle       application/x-rle\n.rm                   application/vnd.rn-realmedia              .rmf       application/vnd.adobe.rmf\n.rmi                  audio/mid                                 .rmj       application/vnd.rn-realsystem-rmj\n.rmm                  audio/x-pn-realaudio                      .rmp       application/vnd.rn-rn_music_package\n.rms                  application/vnd.rn-realmedia-secure       .rmvb      application/vnd.rn-realmedia-vbr\n.rmx                  application/vnd.rn-realsystem-rmx         .rnx       application/vnd.rn-realplayer\n.rp                   image/vnd.rn-realpix                      .rpm       audio/x-pn-realaudio-plugin\n.rsml                 application/vnd.rn-rsml                   .rt        text/vnd.rn-realtext\n.rtf                  application/msword                        .rtf       application/x-rtf\n.rv                   video/vnd.rn-realvideo                    .sam       application/x-sam\n.sat                  application/x-sat                         .sdp       application/sdp\n.sdw                  application/x-sdw                         .sit       application/x-stuffit\n.slb                  application/x-slb                         .sld       application/x-sld\n.slk                  drawing/x-slk                             .smi       application/smil\n.smil                 application/smil                          .smk       application/x-smk\n.snd                  audio/basic                               .sol       text/plain\n.sor                  text/plain                                .spc       application/x-pkcs7-certificates\n.spl                  application/futuresplash                  .spp       text/xml\n.ssm                  application/streamingmedia                .sst       application/vnd.ms-pki.certstore\n.stl                  application/vnd.ms-pki.stl                .stm       text/html\n.sty                  application/x-sty                         .svg       text/xml\n.swf                  application/x-shockwave-flash             .tdf       application/x-tdf\n.tg4                  application/x-tg4                         .tga       application/x-tga\n.tif                  image/tiff                                .tif       application/x-tif\n.tiff                 image/tiff                                .tld       text/xml\n.top                  drawing/x-top                             .torrent   application/x-bittorrent\n.tsd                  text/xml                                  .txt       text/plain\n.uin                  application/x-icq                         .uls       text/iuls\n.vcf                  text/x-vcard                              .vda       application/x-vda\n.vdx                  application/vnd.visio                     .vml       text/xml\n.vpg                  application/x-vpeg005                     .vsd       application/vnd.visio\n.vsd                  application/x-vsd                         .vss       application/vnd.visio\n.vst                  application/vnd.visio                     .vst       application/x-vst\n.vsw                  application/vnd.visio                     .vsx       application/vnd.visio\n.vtx                  application/vnd.visio                     .vxml      text/xml\n.wav                  audio/wav                                 .wax       audio/x-ms-wax\n.wb1                  application/x-wb1                         .wb2       application/x-wb2\n.wb3                  application/x-wb3                         .wbmp      image/vnd.wap.wbmp\n.wiz                  application/msword                        .wk3       application/x-wk3\n.wk4                  application/x-wk4                         .wkq       application/x-wkq\n.wks                  application/x-wks                         .wm        video/x-ms-wm\n.wma                  audio/x-ms-wma                            .wmd       application/x-ms-wmd\n.wmf                  application/x-wmf                         .wml       text/vnd.wap.wml\n.wmv                  video/x-ms-wmv                            .wmx       video/x-ms-wmx\n.wmz                  application/x-ms-wmz                      .wp6       application/x-wp6\n.wpd                  application/x-wpd                         .wpg       application/x-wpg\n.wpl                  application/vnd.ms-wpl                    .wq1       application/x-wq1\n.wr1                  application/x-wr1                         .wri       application/x-wri\n.wrk                  application/x-wrk                         .ws        application/x-ws\n.ws2                  application/x-ws                          .wsc       text/scriptlet\n.wsdl                 text/xml                                  .wvx       video/x-ms-wvx\n.xdp                  application/vnd.adobe.xdp                 .xdr       text/xml\n.xfd                  application/vnd.adobe.xfd                 .xfdf      application/vnd.adobe.xfdf\n.xhtml                text/html                                 .xls       application/vnd.ms-excel\n.xls                  application/x-xls                         .xlw       application/x-xlw\n.xml                  text/xml                                  .xpl       audio/scpls\n.xq                   text/xml                                  .xql       text/xml\n.xquery               text/xml                                  .xsd       text/xml\n.xsl                  text/xml                                  .xslt      text/xml\n.xwd                  application/x-xwd                         .x_b       application/x-x_b\n.sis                  application/vnd.symbian.install           .sisx      application/vnd.symbian.install\n.x_t                  application/x-x_t                         .ipa       application/vnd.iphone\n.apk                  application/vnd.android.package-archive   .xap       application/x-silverlight-app\n\n另外有：ContentType为application/zip,文件后缀名是.zip',normalizedContent:'# response.setcontenttype()与response.setheader()\n\n这三个 http 响应头都是用来控制浏览器缓存的，具体作用如下：\n1. `cache-control`: 该响应头用于控制缓存行为，常见的取值有以下几种：\n   - `no-cache`: 表示不缓存响应内容，每次请求都需要向服务器重新发起请求。\n   - `no-store`: 表示不缓存响应内容，并且不存储请求和响应的任何部分。\n   - `max-age`: 表示缓存内容的最大有效时间，单位为秒。例如，`cache-control: max-age=3600` 表示缓存内容在 1 小时后过期。\n   - `private`: 表示响应内容只能被客户端缓存，而不能被中间代理服务器缓存。\n   - `public`: 表示响应内容可以被客户端和中间代理服务器缓存。\n2. `pragma`: 该响应头用于控制缓存行为，但已经被弃用，现在建议使用 `cache-control` 响应头。\n   - `no-cache`: 与 `cache-control: no-cache` 作用相同，表示不缓存响应内容。\n\n3. `expires`: 该响应头用于指定缓存内容的过期时间，是一个绝对时间，表示一个日期时间值。例如，`expires: wed, 21 oct 2015 07:28:00 gmt` 表示缓存内容在该时间之后过期。\n在实际应用中，我们可以根据需要选择适当的缓存策略。例如，如果我们的网站提供的是实时数据，需要保证每次请求都能及时获取最新的数据，可以使用 `cache-control: no-cache` 或 `pragma: no-cache` 响应头来禁用缓存；如果我们的网站提供的是静态资源（例如图片、css、javascript 文件等），可以使用较长的缓存时间，减少不必要的网络请求，提高页面加载速度，可以使用 `cache-control: max-age` 或 `expires` 响应头来设置缓存时间。\n\n\n1、一秒刷新页面一次 response.setheader("refresh","1");\n\n2、二秒跳到其他页面 response.setheader("refresh","2;url=otherpagename");\n\n3、没有缓存： response.setheader("pragma", "no-cache"); response.setheader("cache-control", "no-cache");\n\n4、设置过期的时间期限\n\nresponse.setdateheader("expires", system.currenttimemillis()+自己设置的时间期限);\n\n5、访问别的页面：response.setstatus（302）; response.setheader("location","url");\n\n6、下载文件\n\ncontent-type的作用：该实体头的作用是让服务器告诉浏览器它发送的数据属于什么文件类型。\n\n例如：当content-type 的值设置为text/html和text/plain时,前者会让浏览器把接收到的实体内容以html格式解析,后者会让浏览器以普通文本解析.\n\ncontent-disposition 的作用：当content-type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型\n\nresponse.setheader("content-type","video/x-msvideo");\n\nresponse.setheader( "content-disposition", "attachment;filename=" + new string( “文件名称”.getbytes("gb2312"), "iso8859-1" ) );\n\n7、通知浏览器数据采用的压缩格式：response.setheader("content-encoding","压缩后的数据"); 高速浏览器压缩数据的长度：response.setheader("content-length",压缩后的数据.length+"");\n\n8、高速浏览器图片或视频：response.setheader("content-type","这个参数在tomcat里conf下的web.xml里面找");\n\ninputstream in= this.getservletcontext.getresourceasstream("/2.jpg"); int len=0; byte buffer[]= new byte[1024]\n\noutputstream out = response.getoutputstream();\n\nwhile(len=in.read(buffer)>0){ out.write(buffer,0,len) }\n\n9、高速浏览器已下载的形式：\n\nresponse.setheader("content-disposition","attachment;filename=2.jpg");\n\ninputstream in= this.getservletcontext.getresourceasstream("/2.jpg"); int len=0; byte buffer[]= new byte[1024]\n\noutputstream out = response.getoutputstream();\n\nwhile(len=in.read(buffer)>0){ out.write(buffer,0,len) }\n\n10.contenttype\n\nresponse.setcontenttype(mime)的作用是使客户端浏览器，区分不同种类的数据，并根据不同的mime调用浏览器内不同的程序嵌入模块来处理相应的数据。 例如web浏览器就是通过mime类型来判断文件是gif图片。通过mime类型来处理json字符串。 tomcat的安装目录\\conf\\web.xml 中就定义了大量mime类型 ，可以参考。 response.setcontenttype("text/html; charset=utf-8"); html .setcontenttype("text/plain; charset=utf-8"); 文本 text/javascript json数据 application/xml xml数据 这 个方法设置发送到客户端的响应的内容类型，此时响应还没有提交。给出的内容类型可以包括字符编码说明，例 如：text/html;charset=utf-8.如果该方法在getwriter()方法被调用之前调用，那么响应的字符编码将仅从给出的内容类型 中设置。该方法如果在getwriter()方法被调用之后或者在被提交之后调用，将不会设置响应的字符编码，在使用http协议的情况中，该方法设 置 content-type实体报头。 一般在servlet中，习惯性的会首先设置请求以及响应的内容类型以及编码方式： response.setcontenttype("text/html;charset=utf-8"); request.setcharacterencoding("utf-8");\n\nresponse.setcontenttype()的string参数及对应类型\n\n文件扩展名                 content-type(mime-type)                   文件扩展名      content-type(mime-type)\n.*（ 二进制流，不知道下载文件类型）   application/octet-stream                  .tif       image/tiff\n.001                  application/x-001                         .301       application/x-301\n.323                  text/h323                                 .906       application/x-906\n.907                  drawing/907                               .a11       application/x-a11\n.acp                  audio/x-mei-aac                           .ai        application/postscript\n.aif                  audio/aiff                                .aifc      audio/aiff\n.aiff                 audio/aiff                                .anv       application/x-anv\n.asa                  text/asa                                  .asf       video/x-ms-asf\n.asp                  text/asp                                  .asx       video/x-ms-asf\n.au                   audio/basic                               .avi       video/avi\n.awf                  application/vnd.adobe.workflow            .biz       text/xml\n.bmp                  application/x-bmp                         .bot       application/x-bot\n.c4t                  application/x-c4t                         .c90       application/x-c90\n.cal                  application/x-cals                        .cat       application/vnd.ms-pki.seccat\n.cdf                  application/x-netcdf                      .cdr       application/x-cdr\n.cel                  application/x-cel                         .cer       application/x-x509-ca-cert\n.cg4                  application/x-g4                          .cgm       application/x-cgm\n.cit                  application/x-cit                         .class     java/*\n.cml                  text/xml                                  .cmp       application/x-cmp\n.cmx                  application/x-cmx                         .cot       application/x-cot\n.crl                  application/pkix-crl                      .crt       application/x-x509-ca-cert\n.csi                  application/x-csi                         .css       text/css\n.cut                  application/x-cut                         .dbf       application/x-dbf\n.dbm                  application/x-dbm                         .dbx       application/x-dbx\n.dcd                  text/xml                                  .dcx       application/x-dcx\n.der                  application/x-x509-ca-cert                .dgn       application/x-dgn\n.dib                  application/x-dib                         .dll       application/x-msdownload\n.doc                  application/msword                        .dot       application/msword\n.drw                  application/x-drw                         .dtd       text/xml\n.dwf                  model/vnd.dwf                             .dwf       application/x-dwf\n.dwg                  application/x-dwg                         .dxb       application/x-dxb\n.dxf                  application/x-dxf                         .edn       application/vnd.adobe.edn\n.emf                  application/x-emf                         .eml       message/rfc822\n.ent                  text/xml                                  .epi       application/x-epi\n.eps                  application/x-ps                          .eps       application/postscript\n.etd                  application/x-ebx                         .exe       application/x-msdownload\n.fax                  image/fax                                 .fdf       application/vnd.fdf\n.fif                  application/fractals                      .fo        text/xml\n.frm                  application/x-frm                         .g4        application/x-g4\n.gbr                  application/x-gbr                         .          application/x-\n.gif                  image/gif                                 .gl2       application/x-gl2\n.gp4                  application/x-gp4                         .hgl       application/x-hgl\n.hmr                  application/x-hmr                         .hpg       application/x-hpgl\n.hpl                  application/x-hpl                         .hqx       application/mac-binhex40\n.hrf                  application/x-hrf                         .hta       application/hta\n.htc                  text/x-component                          .htm       text/html\n.html                 text/html                                 .htt       text/webviewhtml\n.htx                  text/html                                 .icb       application/x-icb\n.ico                  image/x-icon                              .ico       application/x-ico\n.iff                  application/x-iff                         .ig4       application/x-g4\n.igs                  application/x-igs                         .iii       application/x-iphone\n.img                  application/x-img                         .ins       application/x-internet-signup\n.isp                  application/x-internet-signup             .ivf       video/x-ivf\n.java                 java/*                                    .jfif      image/jpeg\n.jpe                  image/jpeg                                .jpe       application/x-jpe\n.jpeg                 image/jpeg                                .jpg       image/jpeg\n.jpg                  application/x-jpg                         .js        application/x-javascript\n.jsp                  text/html                                 .la1       audio/x-liquid-file\n.lar                  application/x-laplayer-reg                .latex     application/x-latex\n.lavs                 audio/x-liquid-secure                     .lbm       application/x-lbm\n.lmsff                audio/x-la-lms                            .ls        application/x-javascript\n.ltr                  application/x-ltr                         .m1v       video/x-mpeg\n.m2v                  video/x-mpeg                              .m3u       audio/mpegurl\n.m4e                  video/mpeg4                               .mac       application/x-mac\n.man                  application/x-troff-man                   .math      text/xml\n.mdb                  application/msaccess                      .mdb       application/x-mdb\n.mfp                  application/x-shockwave-flash             .mht       message/rfc822\n.mhtml                message/rfc822                            .mi        application/x-mi\n.mid                  audio/mid                                 .midi      audio/mid\n.mil                  application/x-mil                         .mml       text/xml\n.mnd                  audio/x-musicnet-download                 .mns       audio/x-musicnet-stream\n.mocha                application/x-javascript                  .movie     video/x-sgi-movie\n.mp1                  audio/mp1                                 .mp2       audio/mp2\n.mp2v                 video/mpeg                                .mp3       audio/mp3\n.mp4                  video/mpeg4                               .mpa       video/x-mpg\n.mpd                  application/vnd.ms-project                .mpe       video/x-mpeg\n.mpeg                 video/mpg                                 .mpg       video/mpg\n.mpga                 audio/rn-mpeg                             .mpp       application/vnd.ms-project\n.mps                  video/x-mpeg                              .mpt       application/vnd.ms-project\n.mpv                  video/mpg                                 .mpv2      video/mpeg\n.mpw                  application/vnd.ms-project                .mpx       application/vnd.ms-project\n.mtx                  text/xml                                  .mxp       application/x-mmxp\n.net                  image/pnetvue                             .nrf       application/x-nrf\n.nws                  message/rfc822                            .odc       text/x-ms-odc\n.out                  application/x-out                         .p10       application/pkcs10\n.p12                  application/x-pkcs12                      .p7b       application/x-pkcs7-certificates\n.p7c                  application/pkcs7-mime                    .p7m       application/pkcs7-mime\n.p7r                  application/x-pkcs7-certreqresp           .p7s       application/pkcs7-signature\n.pc5                  application/x-pc5                         .pci       application/x-pci\n.pcl                  application/x-pcl                         .pcx       application/x-pcx\n.pdf                  application/pdf                           .pdf       application/pdf\n.pdx                  application/vnd.adobe.pdx                 .pfx       application/x-pkcs12\n.pgl                  application/x-pgl                         .pic       application/x-pic\n.pko                  application/vnd.ms-pki.pko                .pl        application/x-perl\n.plg                  text/html                                 .pls       audio/scpls\n.plt                  application/x-plt                         .png       image/png\n.png                  application/x-png                         .pot       application/vnd.ms-powerpoint\n.ppa                  application/vnd.ms-powerpoint             .ppm       application/x-ppm\n.pps                  application/vnd.ms-powerpoint             .ppt       application/vnd.ms-powerpoint\n.ppt                  application/x-ppt                         .pr        application/x-pr\n.prf                  application/pics-rules                    .prn       application/x-prn\n.prt                  application/x-prt                         .ps        application/x-ps\n.ps                   application/postscript                    .ptn       application/x-ptn\n.pwz                  application/vnd.ms-powerpoint             .r3t       text/vnd.rn-realtext3d\n.ra                   audio/vnd.rn-realaudio                    .ram       audio/x-pn-realaudio\n.ras                  application/x-ras                         .rat       application/rat-file\n.rdf                  text/xml                                  .rec       application/vnd.rn-recording\n.red                  application/x-red                         .rgb       application/x-rgb\n.rjs                  application/vnd.rn-realsystem-rjs         .rjt       application/vnd.rn-realsystem-rjt\n.rlc                  application/x-rlc                         .rle       application/x-rle\n.rm                   application/vnd.rn-realmedia              .rmf       application/vnd.adobe.rmf\n.rmi                  audio/mid                                 .rmj       application/vnd.rn-realsystem-rmj\n.rmm                  audio/x-pn-realaudio                      .rmp       application/vnd.rn-rn_music_package\n.rms                  application/vnd.rn-realmedia-secure       .rmvb      application/vnd.rn-realmedia-vbr\n.rmx                  application/vnd.rn-realsystem-rmx         .rnx       application/vnd.rn-realplayer\n.rp                   image/vnd.rn-realpix                      .rpm       audio/x-pn-realaudio-plugin\n.rsml                 application/vnd.rn-rsml                   .rt        text/vnd.rn-realtext\n.rtf                  application/msword                        .rtf       application/x-rtf\n.rv                   video/vnd.rn-realvideo                    .sam       application/x-sam\n.sat                  application/x-sat                         .sdp       application/sdp\n.sdw                  application/x-sdw                         .sit       application/x-stuffit\n.slb                  application/x-slb                         .sld       application/x-sld\n.slk                  drawing/x-slk                             .smi       application/smil\n.smil                 application/smil                          .smk       application/x-smk\n.snd                  audio/basic                               .sol       text/plain\n.sor                  text/plain                                .spc       application/x-pkcs7-certificates\n.spl                  application/futuresplash                  .spp       text/xml\n.ssm                  application/streamingmedia                .sst       application/vnd.ms-pki.certstore\n.stl                  application/vnd.ms-pki.stl                .stm       text/html\n.sty                  application/x-sty                         .svg       text/xml\n.swf                  application/x-shockwave-flash             .tdf       application/x-tdf\n.tg4                  application/x-tg4                         .tga       application/x-tga\n.tif                  image/tiff                                .tif       application/x-tif\n.tiff                 image/tiff                                .tld       text/xml\n.top                  drawing/x-top                             .torrent   application/x-bittorrent\n.tsd                  text/xml                                  .txt       text/plain\n.uin                  application/x-icq                         .uls       text/iuls\n.vcf                  text/x-vcard                              .vda       application/x-vda\n.vdx                  application/vnd.visio                     .vml       text/xml\n.vpg                  application/x-vpeg005                     .vsd       application/vnd.visio\n.vsd                  application/x-vsd                         .vss       application/vnd.visio\n.vst                  application/vnd.visio                     .vst       application/x-vst\n.vsw                  application/vnd.visio                     .vsx       application/vnd.visio\n.vtx                  application/vnd.visio                     .vxml      text/xml\n.wav                  audio/wav                                 .wax       audio/x-ms-wax\n.wb1                  application/x-wb1                         .wb2       application/x-wb2\n.wb3                  application/x-wb3                         .wbmp      image/vnd.wap.wbmp\n.wiz                  application/msword                        .wk3       application/x-wk3\n.wk4                  application/x-wk4                         .wkq       application/x-wkq\n.wks                  application/x-wks                         .wm        video/x-ms-wm\n.wma                  audio/x-ms-wma                            .wmd       application/x-ms-wmd\n.wmf                  application/x-wmf                         .wml       text/vnd.wap.wml\n.wmv                  video/x-ms-wmv                            .wmx       video/x-ms-wmx\n.wmz                  application/x-ms-wmz                      .wp6       application/x-wp6\n.wpd                  application/x-wpd                         .wpg       application/x-wpg\n.wpl                  application/vnd.ms-wpl                    .wq1       application/x-wq1\n.wr1                  application/x-wr1                         .wri       application/x-wri\n.wrk                  application/x-wrk                         .ws        application/x-ws\n.ws2                  application/x-ws                          .wsc       text/scriptlet\n.wsdl                 text/xml                                  .wvx       video/x-ms-wvx\n.xdp                  application/vnd.adobe.xdp                 .xdr       text/xml\n.xfd                  application/vnd.adobe.xfd                 .xfdf      application/vnd.adobe.xfdf\n.xhtml                text/html                                 .xls       application/vnd.ms-excel\n.xls                  application/x-xls                         .xlw       application/x-xlw\n.xml                  text/xml                                  .xpl       audio/scpls\n.xq                   text/xml                                  .xql       text/xml\n.xquery               text/xml                                  .xsd       text/xml\n.xsl                  text/xml                                  .xslt      text/xml\n.xwd                  application/x-xwd                         .x_b       application/x-x_b\n.sis                  application/vnd.symbian.install           .sisx      application/vnd.symbian.install\n.x_t                  application/x-x_t                         .ipa       application/vnd.iphone\n.apk                  application/vnd.android.package-archive   .xap       application/x-silverlight-app\n\n另外有：contenttype为application/zip,文件后缀名是.zip',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702366094e3},{title:"multipartFile相关方法",frontmatter:{title:"multipartFile相关方法","autoGroup-1":"附录"},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/multipartFile%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html",relativePath:"zs-tool-小结/文件/multipartFile相关方法.md",key:"v-d5dff92c",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/multipartFile%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html",headers:[{level:2,title:"获取classpath路径",slug:"获取classpath路径",normalizedTitle:"获取classpath路径",charIndex:2},{level:2,title:"MultipartFile ---\x3e 文件 ---\x3e delete",slug:"multipartfile-文件-delete",normalizedTitle:"multipartfile ---&gt; 文件 ---&gt; delete",charIndex:null}],lastUpdated:"2023年12月12日星期二下午3点28分",lastUpdatedTimestamp:1702366094e3,headersStr:"获取classpath路径 MultipartFile ---\x3e 文件 ---\x3e delete",content:'# 获取classpath路径\n\n/**\n     * 获取路径 classpath：\n     *\n     * @return\n     * @throws Exception\n     */\nprivate static String getFilePath(String classpath) throws Exception {\n    String defaultPath = "/static/video/";\n    //获取当前文件的根路径\n    File path = new File(ResourceUtils.getURL("classpath:").getPath());\n    if (!path.exists()) path = new File("");\n\n    //盘符路径\n    StringBuilder codeUrl = new StringBuilder();\n    //存储路径\n    if (StringUtils.isNotBlank(classpath)) {\n        defaultPath = classpath;\n    }\n    codeUrl.append(path.getAbsolutePath()).append(defaultPath);\n    File file = new File(codeUrl.toString());\n    if (!file.exists()) {\n        file.mkdirs();\n    }\n    return codeUrl.toString();\n}\n\n\n\n\n# MultipartFile ---\x3e 文件 ---\x3e delete\n\npublic static Integer getDuration(MultipartFile multipartFile) {\n    Integer duration = 0;\n    try {\n        //默认：classpath:/static/video/\n        String filePath = getFilePath("") + UUID.randomUUID() + "_" + multipartFile.getOriginalFilename();\n        File filePathSource = new File(filePath);\n\n        //保存文件\n        multipartFile.transferTo(filePathSource);\n        //\n        duration = getDuration(filePath);\n        //删除文件\n        if (filePathSource.exists()) {\n            filePathSource.delete();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return 0;\n    }\n    return duration;\n}\n\n\n\npublic static String secToTime(int seconds) {\n    int hour = seconds / 3600;\n    int minute = (seconds - hour * 3600) / 60;\n    int second = (seconds - hour * 3600 - minute * 60);\n\n    StringBuffer sb = new StringBuffer();\n    if (hour > 0) {\n        sb.append(hour + "小时");\n    }\n    if (minute > 0)\n        sb.append(minute + "分");\n    if (second > 0) {\n        sb.append(second + "秒");\n    }\n    if (second == 0) {\n        sb.append("<1秒");\n    }\n    return sb.toString();\n}\n\n\n',normalizedContent:'# 获取classpath路径\n\n/**\n     * 获取路径 classpath：\n     *\n     * @return\n     * @throws exception\n     */\nprivate static string getfilepath(string classpath) throws exception {\n    string defaultpath = "/static/video/";\n    //获取当前文件的根路径\n    file path = new file(resourceutils.geturl("classpath:").getpath());\n    if (!path.exists()) path = new file("");\n\n    //盘符路径\n    stringbuilder codeurl = new stringbuilder();\n    //存储路径\n    if (stringutils.isnotblank(classpath)) {\n        defaultpath = classpath;\n    }\n    codeurl.append(path.getabsolutepath()).append(defaultpath);\n    file file = new file(codeurl.tostring());\n    if (!file.exists()) {\n        file.mkdirs();\n    }\n    return codeurl.tostring();\n}\n\n\n\n\n# multipartfile ---\x3e 文件 ---\x3e delete\n\npublic static integer getduration(multipartfile multipartfile) {\n    integer duration = 0;\n    try {\n        //默认：classpath:/static/video/\n        string filepath = getfilepath("") + uuid.randomuuid() + "_" + multipartfile.getoriginalfilename();\n        file filepathsource = new file(filepath);\n\n        //保存文件\n        multipartfile.transferto(filepathsource);\n        //\n        duration = getduration(filepath);\n        //删除文件\n        if (filepathsource.exists()) {\n            filepathsource.delete();\n        }\n    } catch (exception e) {\n        e.printstacktrace();\n        return 0;\n    }\n    return duration;\n}\n\n\n\npublic static string sectotime(int seconds) {\n    int hour = seconds / 3600;\n    int minute = (seconds - hour * 3600) / 60;\n    int second = (seconds - hour * 3600 - minute * 60);\n\n    stringbuffer sb = new stringbuffer();\n    if (hour > 0) {\n        sb.append(hour + "小时");\n    }\n    if (minute > 0)\n        sb.append(minute + "分");\n    if (second > 0) {\n        sb.append(second + "秒");\n    }\n    if (second == 0) {\n        sb.append("<1秒");\n    }\n    return sb.tostring();\n}\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702366094e3},{title:"优秀开源",frontmatter:{},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90.html",relativePath:"zs-tool-小结/网址收藏/优秀开源.md",key:"v-222c4871",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90.html",lastUpdated:"2024年1月20日星期六凌晨2点19分",lastUpdatedTimestamp:1705688374e3,headersStr:null,content:"# 优秀开源\n\nroyi-vue-pro\n\nhttps://gitee.com/zhijiantianya/ruoyi-vue-pro\n\nTimo\n\nhttps://gitee.com/aun/Timo\n\nSpringboot-plus\n\nhttps://gitee.com/xiandafu/springboot-plus\n\nclouddo\n\nhttps://gitee.com/xiandafu/springboot-plus\n\njeecg-boot\n\nhttps://gitee.com/jeecg/jeecg-boot",normalizedContent:"# 优秀开源\n\nroyi-vue-pro\n\nhttps://gitee.com/zhijiantianya/ruoyi-vue-pro\n\ntimo\n\nhttps://gitee.com/aun/timo\n\nspringboot-plus\n\nhttps://gitee.com/xiandafu/springboot-plus\n\nclouddo\n\nhttps://gitee.com/xiandafu/springboot-plus\n\njeecg-boot\n\nhttps://gitee.com/jeecg/jeecg-boot",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705688374e3},{title:"获取文件ContentType",frontmatter:{title:"获取文件ContentType","autoGroup-1":"附录"},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6ContentType.html",relativePath:"zs-tool-小结/文件/获取文件ContentType.md",key:"v-05c21aa2",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6ContentType.html",headers:[{level:2,title:"根据文件名判断Content-Type",slug:"根据文件名判断content-type",normalizedTitle:"根据文件名判断content-type",charIndex:2},{level:3,title:"方式一：spring提供(💯无脑选)",slug:"方式一-spring提供-💯无脑选",normalizedTitle:"方式一：spring提供(💯无脑选)",charIndex:26},{level:3,title:"方式二：枚举(💯无脑选)",slug:"方式二-枚举-💯无脑选",normalizedTitle:"方式二：枚举(💯无脑选)",charIndex:683},{level:3,title:"方式三：第三方tika(💯无脑选)",slug:"方式三-第三方tika-💯无脑选",normalizedTitle:"方式三：第三方tika(💯无脑选)",charIndex:7296},{level:3,title:"方式四：jmimemagic（不要考虑）",slug:"方式四-jmimemagic-不要考虑",normalizedTitle:"方式四：jmimemagic（不要考虑）",charIndex:7605},{level:2,title:"⛔️避免如下写法",slug:"⛔️避免如下写法",normalizedTitle:"⛔️避免如下写法",charIndex:8151},{level:3,title:"jdk自带3种方式",slug:"jdk自带3种方式",normalizedTitle:"jdk自带3种方式",charIndex:8164}],lastUpdated:"2023年12月12日星期二下午3点28分",lastUpdatedTimestamp:1702366094e3,headersStr:"根据文件名判断Content-Type 方式一：spring提供(💯无脑选) 方式二：枚举(💯无脑选) 方式三：第三方tika(💯无脑选) 方式四：jmimemagic（不要考虑） ⛔️避免如下写法 jdk自带3种方式",content:'# 根据文件名判断Content-Type\n\n\n# 方式一：spring提供(💯无脑选)\n\nspringframework提供的MediaTypeFactory工具类可以很方便的获取contentType值，代码如下\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.MediaTypeFactory;\n \nimport java.util.Optional;\n \npublic class MainTest {\n \n    public static void main(String[] args) throws Exception {\n        // 根据文件名获取content_type\n        String[] fileNames = new String[]{"file/test.PNG", "测试.pdf", "视频.mp4"};\n        for (String fileName : fileNames) {\n            Optional<MediaType> mediaType = MediaTypeFactory.getMediaType(fileName);\n            System.out.println(mediaType.orElse(MediaType.APPLICATION_OCTET_STREAM).toString());\n        }\n    }\n}\n\n\n\n# 方式二：枚举(💯无脑选)\n\n> 枚举\n\n\nimport lombok.Getter;\nimport org.springframework.util.StringUtils;\n\n/**\n * @description 通过文件扩展名获取ContentType\n **/\n@Getter\npublic enum MimeTypeEnum {\n\n    AAC("acc", "AAC音频", "audio/aac"),\n    ABW("abw", "AbiWord文件", "application/x-abiword"),\n    ARC("arc", "存档文件", "application/x-freearc"),\n    AVI("avi", "音频视频交错格式", "video/x-msvideo"),\n    AZW("azw", "亚马逊Kindle电子书格式", "application/vnd.amazon.ebook"),\n    BIN("bin", "任何类型的二进制数据", "application/octet-stream"),\n    BMP("bmp", "Windows OS / 2位图图形", "image/bmp"),\n    BZ("bz", "BZip存档", "application/x-bzip"),\n    BZ2("bz2", "BZip2存档", "application/x-bzip2"),\n    CSH("csh", "C-Shell脚本", "application/x-csh"),\n    CSS("css", "级联样式表（CSS）", "text/css"),\n    CSV("csv", "逗号分隔值（CSV）", "text/csv"),\n    DOC("doc", "微软Word文件", "application/msword"),\n    DOCX("docx", "Microsoft Word（OpenXML）", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"),\n    EOT("eot", "MS Embedded OpenType字体", "application/vnd.ms-fontobject"),\n    EPUB("epub", "电子出版物（EPUB）", "application/epub+zip"),\n    GZ("gz", "GZip压缩档案", "application/gzip"),\n    GIF("gif", "图形交换格式（GIF）", "image/gif"),\n    HTM("htm", "超文本标记语言（HTML）", "text/html"),\n    HTML("html", "超文本标记语言（HTML）", "text/html"),\n    ICO("ico", "图标格式", "image/vnd.microsoft.icon"),\n    ICS("ics", "iCalendar格式", "text/calendar"),\n    JAR("jar", "Java存档", "application/java-archive"),\n    JPEG("jpeg", "JPEG图像", "image/jpeg"),\n    JPG("jpg", "JPEG图像", "image/jpeg"),\n    JS("js", "JavaScript", "text/javascript"),\n    JSON("json", "JSON格式", "application/json"),\n    JSONLD("jsonld", "JSON-LD格式", "application/ld+json"),\n    MID("mid", "乐器数字接口（MIDI）", "audio/midi"),\n    MIDI("midi", "乐器数字接口（MIDI）", "audio/midi"),\n    MJS("mjs", "JavaScript模块", "text/javascript"),\n    MP3("mp3", "MP3音频", "audio/mpeg"),\n    MPEG("mpeg", "MPEG视频", "video/mpeg"),\n    MPKG("mpkg", "苹果安装程序包", "application/vnd.apple.installer+xml"),\n    ODP("odp", "OpenDocument演示文稿文档", "application/vnd.oasis.opendocument.presentation"),\n    ODS("ods", "OpenDocument电子表格文档", "application/vnd.oasis.opendocument.spreadsheet"),\n    ODT("odt", "OpenDocument文字文件", "application/vnd.oasis.opendocument.text"),\n    OGA("oga", "OGG音讯", "audio/ogg"),\n    OGV("ogv", "OGG视频", "video/ogg"),\n    OGX("ogx", "OGG", "application/ogg"),\n    OPUS("opus", "OPUS音频", "audio/opus"),\n    OTF("otf", "otf字体", "font/otf"),\n    PNG("png", "便携式网络图形", "image/png"),\n    PDF("pdf", "Adobe 可移植文档格式（PDF）", "application/pdf"),\n    PHP("php", "php", "application/x-httpd-php"),\n    PPT("ppt", "Microsoft PowerPoint", "application/vnd.ms-powerpoint"),\n    PPTX("pptx", "Microsoft PowerPoint（OpenXML）", "application/vnd.openxmlformats-officedocument.presentationml.presentation"),\n    RAR("rar", "RAR档案", "application/vnd.rar"),\n    RTF("rtf", "富文本格式", "application/rtf"),\n    SH("sh", "Bourne Shell脚本", "application/x-sh"),\n    SVG("svg", "可缩放矢量图形（SVG）", "image/svg+xml"),\n    SWF("swf", "小型Web格式（SWF）或Adobe Flash文档", "application/x-shockwave-flash"),\n    TAR("tar", "磁带存档（TAR）", "application/x-tar"),\n    TIF("tif", "标记图像文件格式（TIFF）", "image/tiff"),\n    TIFF("tiff", "标记图像文件格式（TIFF）", "image/tiff"),\n    TS("ts", "MPEG传输流", "video/mp2t"),\n    TTF("ttf", "ttf字体", "font/ttf"),\n    TXT("txt", "文本（通常为ASCII或ISO 8859- n", "text/plain"),\n    VSD("vsd", "微软Visio", "application/vnd.visio"),\n    WAV("wav", "波形音频格式", "audio/wav"),\n    WEBA("weba", "WEBM音频", "audio/webm"),\n    WEBM("webm", "WEBM视频", "video/webm"),\n    WEBP("webp", "WEBP图像", "image/webp"),\n    WOFF("woff", "Web开放字体格式（WOFF）", "font/woff"),\n    WOFF2("woff2", "Web开放字体格式（WOFF）", "font/woff2"),\n    XHTML("xhtml", "XHTML", "application/xhtml+xml"),\n    XLS("xls", "微软Excel", "application/vnd.ms-excel"),\n    XLSX("xlsx", "微软Excel（OpenXML）", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"),\n    XML("xml", "XML", "application/xml"),\n    XUL("xul", "XUL", "application/vnd.mozilla.xul+xml"),\n    ZIP("zip", "ZIP", "application/zip"),\n    MIME_3GP("3gp", "3GPP audio/video container", "video/3gpp"),\n    MIME_3GP_WITHOUT_VIDEO("3gp", "3GPP audio/video container doesn\'t contain video", "audio/3gpp2"),\n    MIME_3G2("3g2", "3GPP2 audio/video container", "video/3gpp2"),\n    MIME_3G2_WITHOUT_VIDEO("3g2", "3GPP2 audio/video container  doesn\'t contain video", "audio/3gpp2"),\n    MIME_7Z("7z", "7-zip存档", "application/x-7z-compressed");\n\n    //扩展名\n    private final String extension;\n    //说明\n    private final String explain;\n    //contentType/mime类型\n    private final String mimeType;\n\n    /**\n     * @param extension 上传的文件扩展名\n     * @param explain   类型说明\n     * @param mimeType  Mime对应的类型\n     */\n    MimeTypeEnum(String extension, String explain, String mimeType) {\n        this.extension = extension;\n        this.explain = explain;\n        this.mimeType = mimeType;\n    }\n\n    /**\n     * 通过扩展名获取枚举类型\n     *\n     * @param extension 扩展名\n     * @return 枚举类\n     */\n    public static MimeTypeEnum getByExtension(String extension) {\n        if (StringUtils.isEmpty(extension)) {\n            return null;\n        }\n        for (MimeTypeEnum typesEnum : MimeTypeEnum.values()) {\n            if (extension.toLowerCase().equals(typesEnum.getExtension())) {\n                return typesEnum;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Content-Type常用对照\n     * 根据后缀获取Mime\n     *\n     * @param fileType 扩展名\n     * @return mime类型\n     */\n    public static String getContentType(String fileType) {\n        MimeTypeEnum mimeTypeEnum = MimeTypeEnum.getByExtension(fileType);\n        if (mimeTypeEnum != null) {\n            return mimeTypeEnum.getMimeType();\n        }\n        return "application/octet-stream";\n    }\n\n    /**\n     * Content-Type常用对照\n     * 根据文件名获取Mime\n     *\n     * @param objectName 文件名\n     * @return mime类型\n     */\n    public static String getContentTypeByObjectName(String objectName) {\n        if (StringUtils.isEmpty(objectName)) {\n            return null;\n        }\n        MimeTypeEnum mimeTypeEnum = MimeTypeEnum.getByExtension(objectName.substring(objectName.lastIndexOf(".") + 1));\n        if (mimeTypeEnum != null) {\n            return mimeTypeEnum.getMimeType();\n        }\n        return "application/octet-stream";\n    }\n\n}\n\n\n> 测试\n\n/**\n * @description\n **/\npublic class ContentTypeTest {\n    public static void main(String[] args) {\n        // 根据文件名获取content_type\n        String[] fileNames = new String[]{"file/.test.PNG", "测试.pdf", "视频.xx"};\n        for (String fileName : fileNames) {\n            String contentType = MimeTypeEnum.getContentTypeByObjectName(fileName);\n            System.out.println(contentType);\n\n        }\n    }\n}\n\n\n\n# 方式三：第三方tika(💯无脑选)\n\n\x3c!-- Tika 获取文件类型 --\x3e\n<dependency>\n    <groupId>org.apache.tika</groupId>\n    <artifactId>tika-core</artifactId>\n    <version>2.4.1</version>\n</dependency>\n\n\n//支持文件名，文件路径，网络文件路径\nString detect = new Tika().detect("MyApplication.class");\nSystem.out.println(detect);//application/java-vm\n\n\n\n# 方式四：jmimemagic（不要考虑）\n\n<dependency>\n    <groupId>net.sf.jmimemagic</groupId>\n    <artifactId>jmimemagic</artifactId>\n    <version>0.1.4</version>\n</dependency>\n\n\nString pathname = "D:\\\\...";\n\ntry {\n    Magic parser = new Magic() ;\n    MagicMatch match = parser.getMagicMatch(new File(pathname),false);\n    System.out.println("Magic: " + match.getMimeType()) ;\n} catch (MagicParseException e) {\n    e.printStackTrace();\n} catch (MagicMatchNotFoundException e) {\n    e.printStackTrace();\n} catch (MagicException e) {\n    e.printStackTrace();\n}\n\n\n\n# ⛔️避免如下写法\n\n\n# jdk自带3种方式\n\nimport java.io.File; \nimport java.io.IOException; \nimport java.net.FileNameMap; \nimport java.net.URLConnection; \nimport java.nio.file.Files; \nimport java.nio.file.Path; \nimport java.nio.file.Paths;  \nimport javax.activation.MimetypesFileTypeMap; \n\n\n> ❌ Files.probeContentType 该api获取时及其不稳定🚫\n\n/** \n   * 方式一 \n   * 该方式只支持本地文件,有时候会存在获取为null的情况 \n   * @param fileUrl \n   */ \npublic static String getContentTypeByLocal(String fileUrl) { \n    String contentType = null; \n    Path path = Paths.get(fileUrl); \n    try { \n        contentType = Files.probeContentType(path); \n    } catch (IOException e) {  \n        e.printStackTrace(); \n    } \n    System.out.println("getContentTypeByLocal, File ContentType is : " + contentType); \n    return contentType; \n} \n\n\n> ❌new MimetypesFileTypeMap().getContentType(new File(fileUrl))🚫该api不稳定，经常出错\n\n/** \n   * 方式二 \n   * 该方式支持本地文件，也支持http/https远程文件 \n   * @param fileUrl \n   */ \npublic static String getContentType(String fileUrl) { \n    String contentType = null; \n    try { \n        contentType = new MimetypesFileTypeMap().getContentType(new File(fileUrl)); \n    } catch (Exception e) { \n        e.printStackTrace(); \n    } \n    System.out.println("getContentType, File ContentType is : " + contentType); \n    return contentType; \n} \n\n\n> ❌\n> \n> FileNameMap fileNameMap = URLConnection.getFileNameMap();\n> \n> fileNameMap.getContentTypeFor(fileUrl)\n> \n> 🚫该api不稳定，经常出错\n\n/** \n   * 方式三 \n   * @param fileUrl,有时候会存在获取为null的情况 \n   */ \npublic static String getContentTypeByType(String fileUrl) { \n    String contentType = null; \n    try { \n        FileNameMap fileNameMap = URLConnection.getFileNameMap(); \n        contentType = fileNameMap.getContentTypeFor(fileUrl); \n    } catch (Exception e) { \n        e.printStackTrace(); \n    } \n    System.out.println("getContentTypeByType, File ContentType is : " + contentType); \n    return contentType; \n} \n',normalizedContent:'# 根据文件名判断content-type\n\n\n# 方式一：spring提供(💯无脑选)\n\nspringframework提供的mediatypefactory工具类可以很方便的获取contenttype值，代码如下\n\nimport org.springframework.http.mediatype;\nimport org.springframework.http.mediatypefactory;\n \nimport java.util.optional;\n \npublic class maintest {\n \n    public static void main(string[] args) throws exception {\n        // 根据文件名获取content_type\n        string[] filenames = new string[]{"file/test.png", "测试.pdf", "视频.mp4"};\n        for (string filename : filenames) {\n            optional<mediatype> mediatype = mediatypefactory.getmediatype(filename);\n            system.out.println(mediatype.orelse(mediatype.application_octet_stream).tostring());\n        }\n    }\n}\n\n\n\n# 方式二：枚举(💯无脑选)\n\n> 枚举\n\n\nimport lombok.getter;\nimport org.springframework.util.stringutils;\n\n/**\n * @description 通过文件扩展名获取contenttype\n **/\n@getter\npublic enum mimetypeenum {\n\n    aac("acc", "aac音频", "audio/aac"),\n    abw("abw", "abiword文件", "application/x-abiword"),\n    arc("arc", "存档文件", "application/x-freearc"),\n    avi("avi", "音频视频交错格式", "video/x-msvideo"),\n    azw("azw", "亚马逊kindle电子书格式", "application/vnd.amazon.ebook"),\n    bin("bin", "任何类型的二进制数据", "application/octet-stream"),\n    bmp("bmp", "windows os / 2位图图形", "image/bmp"),\n    bz("bz", "bzip存档", "application/x-bzip"),\n    bz2("bz2", "bzip2存档", "application/x-bzip2"),\n    csh("csh", "c-shell脚本", "application/x-csh"),\n    css("css", "级联样式表（css）", "text/css"),\n    csv("csv", "逗号分隔值（csv）", "text/csv"),\n    doc("doc", "微软word文件", "application/msword"),\n    docx("docx", "microsoft word（openxml）", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"),\n    eot("eot", "ms embedded opentype字体", "application/vnd.ms-fontobject"),\n    epub("epub", "电子出版物（epub）", "application/epub+zip"),\n    gz("gz", "gzip压缩档案", "application/gzip"),\n    gif("gif", "图形交换格式（gif）", "image/gif"),\n    htm("htm", "超文本标记语言（html）", "text/html"),\n    html("html", "超文本标记语言（html）", "text/html"),\n    ico("ico", "图标格式", "image/vnd.microsoft.icon"),\n    ics("ics", "icalendar格式", "text/calendar"),\n    jar("jar", "java存档", "application/java-archive"),\n    jpeg("jpeg", "jpeg图像", "image/jpeg"),\n    jpg("jpg", "jpeg图像", "image/jpeg"),\n    js("js", "javascript", "text/javascript"),\n    json("json", "json格式", "application/json"),\n    jsonld("jsonld", "json-ld格式", "application/ld+json"),\n    mid("mid", "乐器数字接口（midi）", "audio/midi"),\n    midi("midi", "乐器数字接口（midi）", "audio/midi"),\n    mjs("mjs", "javascript模块", "text/javascript"),\n    mp3("mp3", "mp3音频", "audio/mpeg"),\n    mpeg("mpeg", "mpeg视频", "video/mpeg"),\n    mpkg("mpkg", "苹果安装程序包", "application/vnd.apple.installer+xml"),\n    odp("odp", "opendocument演示文稿文档", "application/vnd.oasis.opendocument.presentation"),\n    ods("ods", "opendocument电子表格文档", "application/vnd.oasis.opendocument.spreadsheet"),\n    odt("odt", "opendocument文字文件", "application/vnd.oasis.opendocument.text"),\n    oga("oga", "ogg音讯", "audio/ogg"),\n    ogv("ogv", "ogg视频", "video/ogg"),\n    ogx("ogx", "ogg", "application/ogg"),\n    opus("opus", "opus音频", "audio/opus"),\n    otf("otf", "otf字体", "font/otf"),\n    png("png", "便携式网络图形", "image/png"),\n    pdf("pdf", "adobe 可移植文档格式（pdf）", "application/pdf"),\n    php("php", "php", "application/x-httpd-php"),\n    ppt("ppt", "microsoft powerpoint", "application/vnd.ms-powerpoint"),\n    pptx("pptx", "microsoft powerpoint（openxml）", "application/vnd.openxmlformats-officedocument.presentationml.presentation"),\n    rar("rar", "rar档案", "application/vnd.rar"),\n    rtf("rtf", "富文本格式", "application/rtf"),\n    sh("sh", "bourne shell脚本", "application/x-sh"),\n    svg("svg", "可缩放矢量图形（svg）", "image/svg+xml"),\n    swf("swf", "小型web格式（swf）或adobe flash文档", "application/x-shockwave-flash"),\n    tar("tar", "磁带存档（tar）", "application/x-tar"),\n    tif("tif", "标记图像文件格式（tiff）", "image/tiff"),\n    tiff("tiff", "标记图像文件格式（tiff）", "image/tiff"),\n    ts("ts", "mpeg传输流", "video/mp2t"),\n    ttf("ttf", "ttf字体", "font/ttf"),\n    txt("txt", "文本（通常为ascii或iso 8859- n", "text/plain"),\n    vsd("vsd", "微软visio", "application/vnd.visio"),\n    wav("wav", "波形音频格式", "audio/wav"),\n    weba("weba", "webm音频", "audio/webm"),\n    webm("webm", "webm视频", "video/webm"),\n    webp("webp", "webp图像", "image/webp"),\n    woff("woff", "web开放字体格式（woff）", "font/woff"),\n    woff2("woff2", "web开放字体格式（woff）", "font/woff2"),\n    xhtml("xhtml", "xhtml", "application/xhtml+xml"),\n    xls("xls", "微软excel", "application/vnd.ms-excel"),\n    xlsx("xlsx", "微软excel（openxml）", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"),\n    xml("xml", "xml", "application/xml"),\n    xul("xul", "xul", "application/vnd.mozilla.xul+xml"),\n    zip("zip", "zip", "application/zip"),\n    mime_3gp("3gp", "3gpp audio/video container", "video/3gpp"),\n    mime_3gp_without_video("3gp", "3gpp audio/video container doesn\'t contain video", "audio/3gpp2"),\n    mime_3g2("3g2", "3gpp2 audio/video container", "video/3gpp2"),\n    mime_3g2_without_video("3g2", "3gpp2 audio/video container  doesn\'t contain video", "audio/3gpp2"),\n    mime_7z("7z", "7-zip存档", "application/x-7z-compressed");\n\n    //扩展名\n    private final string extension;\n    //说明\n    private final string explain;\n    //contenttype/mime类型\n    private final string mimetype;\n\n    /**\n     * @param extension 上传的文件扩展名\n     * @param explain   类型说明\n     * @param mimetype  mime对应的类型\n     */\n    mimetypeenum(string extension, string explain, string mimetype) {\n        this.extension = extension;\n        this.explain = explain;\n        this.mimetype = mimetype;\n    }\n\n    /**\n     * 通过扩展名获取枚举类型\n     *\n     * @param extension 扩展名\n     * @return 枚举类\n     */\n    public static mimetypeenum getbyextension(string extension) {\n        if (stringutils.isempty(extension)) {\n            return null;\n        }\n        for (mimetypeenum typesenum : mimetypeenum.values()) {\n            if (extension.tolowercase().equals(typesenum.getextension())) {\n                return typesenum;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * content-type常用对照\n     * 根据后缀获取mime\n     *\n     * @param filetype 扩展名\n     * @return mime类型\n     */\n    public static string getcontenttype(string filetype) {\n        mimetypeenum mimetypeenum = mimetypeenum.getbyextension(filetype);\n        if (mimetypeenum != null) {\n            return mimetypeenum.getmimetype();\n        }\n        return "application/octet-stream";\n    }\n\n    /**\n     * content-type常用对照\n     * 根据文件名获取mime\n     *\n     * @param objectname 文件名\n     * @return mime类型\n     */\n    public static string getcontenttypebyobjectname(string objectname) {\n        if (stringutils.isempty(objectname)) {\n            return null;\n        }\n        mimetypeenum mimetypeenum = mimetypeenum.getbyextension(objectname.substring(objectname.lastindexof(".") + 1));\n        if (mimetypeenum != null) {\n            return mimetypeenum.getmimetype();\n        }\n        return "application/octet-stream";\n    }\n\n}\n\n\n> 测试\n\n/**\n * @description\n **/\npublic class contenttypetest {\n    public static void main(string[] args) {\n        // 根据文件名获取content_type\n        string[] filenames = new string[]{"file/.test.png", "测试.pdf", "视频.xx"};\n        for (string filename : filenames) {\n            string contenttype = mimetypeenum.getcontenttypebyobjectname(filename);\n            system.out.println(contenttype);\n\n        }\n    }\n}\n\n\n\n# 方式三：第三方tika(💯无脑选)\n\n\x3c!-- tika 获取文件类型 --\x3e\n<dependency>\n    <groupid>org.apache.tika</groupid>\n    <artifactid>tika-core</artifactid>\n    <version>2.4.1</version>\n</dependency>\n\n\n//支持文件名，文件路径，网络文件路径\nstring detect = new tika().detect("myapplication.class");\nsystem.out.println(detect);//application/java-vm\n\n\n\n# 方式四：jmimemagic（不要考虑）\n\n<dependency>\n    <groupid>net.sf.jmimemagic</groupid>\n    <artifactid>jmimemagic</artifactid>\n    <version>0.1.4</version>\n</dependency>\n\n\nstring pathname = "d:\\\\...";\n\ntry {\n    magic parser = new magic() ;\n    magicmatch match = parser.getmagicmatch(new file(pathname),false);\n    system.out.println("magic: " + match.getmimetype()) ;\n} catch (magicparseexception e) {\n    e.printstacktrace();\n} catch (magicmatchnotfoundexception e) {\n    e.printstacktrace();\n} catch (magicexception e) {\n    e.printstacktrace();\n}\n\n\n\n# ⛔️避免如下写法\n\n\n# jdk自带3种方式\n\nimport java.io.file; \nimport java.io.ioexception; \nimport java.net.filenamemap; \nimport java.net.urlconnection; \nimport java.nio.file.files; \nimport java.nio.file.path; \nimport java.nio.file.paths;  \nimport javax.activation.mimetypesfiletypemap; \n\n\n> ❌ files.probecontenttype 该api获取时及其不稳定🚫\n\n/** \n   * 方式一 \n   * 该方式只支持本地文件,有时候会存在获取为null的情况 \n   * @param fileurl \n   */ \npublic static string getcontenttypebylocal(string fileurl) { \n    string contenttype = null; \n    path path = paths.get(fileurl); \n    try { \n        contenttype = files.probecontenttype(path); \n    } catch (ioexception e) {  \n        e.printstacktrace(); \n    } \n    system.out.println("getcontenttypebylocal, file contenttype is : " + contenttype); \n    return contenttype; \n} \n\n\n> ❌new mimetypesfiletypemap().getcontenttype(new file(fileurl))🚫该api不稳定，经常出错\n\n/** \n   * 方式二 \n   * 该方式支持本地文件，也支持http/https远程文件 \n   * @param fileurl \n   */ \npublic static string getcontenttype(string fileurl) { \n    string contenttype = null; \n    try { \n        contenttype = new mimetypesfiletypemap().getcontenttype(new file(fileurl)); \n    } catch (exception e) { \n        e.printstacktrace(); \n    } \n    system.out.println("getcontenttype, file contenttype is : " + contenttype); \n    return contenttype; \n} \n\n\n> ❌\n> \n> filenamemap filenamemap = urlconnection.getfilenamemap();\n> \n> filenamemap.getcontenttypefor(fileurl)\n> \n> 🚫该api不稳定，经常出错\n\n/** \n   * 方式三 \n   * @param fileurl,有时候会存在获取为null的情况 \n   */ \npublic static string getcontenttypebytype(string fileurl) { \n    string contenttype = null; \n    try { \n        filenamemap filenamemap = urlconnection.getfilenamemap(); \n        contenttype = filenamemap.getcontenttypefor(fileurl); \n    } catch (exception e) { \n        e.printstacktrace(); \n    } \n    system.out.println("getcontenttypebytype, file contenttype is : " + contenttype); \n    return contenttype; \n} \n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701950399e3},{title:"普通文件下载",frontmatter:{title:"普通文件下载",autoSort:1e3},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/1%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html",relativePath:"zs-tool-小结/文件/1、普通文件下载.md",key:"v-ad01f9a8",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E6%96%87%E4%BB%B6/1%E3%80%81%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html",headers:[{level:3,title:"文件下载说明",slug:"文件下载说明",normalizedTitle:"文件下载说明",charIndex:2},{level:3,title:"本地文件下载参考示例",slug:"本地文件下载参考示例",normalizedTitle:"本地文件下载参考示例",charIndex:102},{level:3,title:"在线打开的方式",slug:"在线打开的方式",normalizedTitle:"在线打开的方式",charIndex:6975},{level:3,title:"Excel文件导出",slug:"excel文件导出",normalizedTitle:"excel文件导出",charIndex:7977},{level:3,title:"URL下载",slug:"url下载",normalizedTitle:"url下载",charIndex:10101},{level:3,title:"URL打包下载",slug:"url打包下载",normalizedTitle:"url打包下载",charIndex:13508},{level:3,title:"URL保存到本地",slug:"url保存到本地",normalizedTitle:"url保存到本地",charIndex:14927},{level:3,title:"URL流量返回",slug:"url流量返回",normalizedTitle:"url流量返回",charIndex:15320},{level:3,title:"将文件转换成base64",slug:"将文件转换成base64",normalizedTitle:"将文件转换成base64",charIndex:15851},{level:3,title:"将MultipartFile转换为File",slug:"将multipartfile转换为file",normalizedTitle:"将multipartfile转换为file",charIndex:16569},{level:3,title:"httpClient转发下载",slug:"httpclient转发下载",normalizedTitle:"httpclient转发下载",charIndex:22377},{level:3,title:"多个文件压缩并批量下载",slug:"多个文件压缩并批量下载",normalizedTitle:"多个文件压缩并批量下载",charIndex:24198},{level:3,title:"第三方接口，文件流转发",slug:"第三方接口-文件流转发",normalizedTitle:"第三方接口，文件流转发",charIndex:25618}],lastUpdated:"2023年12月12日星期二下午3点28分",lastUpdatedTimestamp:1702366094e3,headersStr:"文件下载说明 本地文件下载参考示例 在线打开的方式 Excel文件导出 URL下载 URL打包下载 URL保存到本地 URL流量返回 将文件转换成base64 将MultipartFile转换为File httpClient转发下载 多个文件压缩并批量下载 第三方接口，文件流转发",content:'# 文件下载说明\n\n文件下载核心：一个流，两个头\n\n * 输出流response.getOutputStream()\n * Content-Disposition\n * Content-Type\n\n\n# 本地文件下载参考示例\n\n> 使用缓冲流返回\n\n/**\n* 下载文件\n* @param path\n* @param fileName\n* @param response\n*/\npublic static void downLoad(String path, String fileName,HttpServletResponse response) {\n\t// 服务器保存的文件地址，即你要下载的文件地址（全路径）\n\tFile file = new File(path);\n\tInputStream inputStream = null;\n\tOutputStream outputStream = null;\n\ttry {\n\t\tinputStream = new BufferedInputStream(new FileInputStream(file));\n\t\tbyte[] buffer = new byte[inputStream.available()];\n\t\tinputStream.read(buffer);\n\t\tresponse.reset();\n\t\tresponse.addHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));\n\t\tresponse.addHeader("Content-Length", "" + file.length());\n\t\tresponse.setContentType("application/octet-stream");\n\t\toutputStream = new BufferedOutputStream(response.getOutputStream());\n\t\toutputStream.write(buffer);\n\t\toutputStream.flush();\n\t}\n\tcatch (IOException e) {\n\t\te.printStackTrace();\n\t\tthrow new GGException(e.getMessage());\n\t}\n\tfinally {\n\t\ttry {\n\t\t\tif (outputStream != null) {\n\t\t\t\toutputStream.close();\n\t\t\t}\n\t\t\tif (inputStream != null) {\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n\npublic HttpServletResponse download(String path, HttpServletResponse response) {\n\n    try {\n        // path是指欲下载的文件的路径。\n        File file = new File(path);\n        // 取得文件名。\n        String filename = file.getName();\n        // 取得文件的后缀名。\n        String ext = filename.substring(filename.lastIndexOf(".") + 1).toUpperCase();\n        // 以流的形式下载文件。\n        InputStream fis = new BufferedInputStream(new FileInputStream(path));\n        byte[] buffer = new byte[fis.available()];\n        fis.read(buffer);\n        fis.close();\n        // 清空response\n        response.reset();\n        // 设置response的Header\n        response.addHeader("Content-Disposition", "attachment;filename=" + new String(filename.getBytes()));\n        response.addHeader("Content-Length", "" + file.length());\n        OutputStream toClient = new BufferedOutputStream(response.getOutputStream());\n        response.setContentType("application/octet-stream");\n        toClient.write(buffer);\n        toClient.flush();\n        toClient.close();\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n    return response;\n}\n\n\n\n\npublic void downloadLocal(HttpServletResponse response) throws FileNotFoundException {\n\n    // 下载本地文件\n    String fileName = "Operator.doc".toString(); // 文件的默认保存名\n    // 读到流中\n    InputStream inStream = new FileInputStream("c:/Operator.doc");// 文件的存放路径\n    // 设置输出的格式\n    response.reset();\n    response.setContentType("bin");\n    response.addHeader("Content-Disposition", "attachment; filename=\\"" + fileName + "\\"");\n    // 循环取出流中的数据\n    byte[] b = new byte[100];\n    int len;\n    try {\n        while ((len = inStream.read(b)) > 0)\n            response.getOutputStream().write(b, 0, len);\n        inStream.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n\n\n> 使用commons-io工具\n\n/**\n     * 下载文件\n     * @param path\n     * @param response\n     */\npublic static void nativeDownload(String path, HttpServletResponse response) {\n    // 服务器保存的文件地址，即你要下载的文件地址（全路径）\n    File file = new File(path);\n    try {\n        //2、两个头\n        //获取Content-type\n        Optional<MediaType> mediaType = MediaTypeFactory.getMediaType(path);\n        String contentType = mediaType.orElse(MediaType.APPLICATION_OCTET_STREAM).toString();\n        response.addHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + URLEncoder.encode(file.getName(), "UTF-8"));\n        response.setContentType(contentType);\n        //1、一个流\n        InputStream is = Files.newInputStream(file.toPath());\n        ServletOutputStream os = response.getOutputStream();\n        IOUtils.copy(is,os);\n        IOUtils.closeQuietly(is);\n    } catch (IOException e) {\n        e.printStackTrace();\n        throw new RuntimeException(e.getMessage());\n    }\n}\n\n\n> 网络收集\n\n1、使用HttpServletResponse输出流实现\n\n@GetMapping("/download")\npublic void bianPdfDownload(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n    // 请求类型、请求参数、请求头 根据需求制定即可\n    // 获取到需要下载的文件\n    // 如何生成文件，根据实际业务需求改造即可\n    String outputFilePath = "/data/file-store-temp/2023年05月13日分析报告.pdf";\n    log.debug("待下载文件:{}", outputFilePath);\n    // 下载文件\n    // 设置响应的内容类型，让浏览器知道下载的是一个文件\n    ServletContext context = request.getServletContext();\n    // get MIME type of the file\n    String mimeType = context.getMimeType(outputFilePath);\n    if (mimeType == null) {\n        // set to binary type if MIME mapping not found\n        mimeType = "application/octet-stream";\n        log.debug("context getMimeType is null");\n    }\n    log.debug("MIME type: " + mimeType);\n    // 设置响应头信息，告诉浏览器文件的名称和长度\n    // set content attributes for the response\n    response.setContentType(mimeType);\n    response.setContentLength((int) file.length());\n    // 设置编码\n    response.setCharacterEncoding("utf-8");\n    // 设置请求头参数以及下载的文件名称,中文名称转义防止乱码\n    String headerValue = String.format("attachment; filename=%s",\n                                       UriUtils.encode(fileName1, StandardCharsets.UTF_8));\n\n    response.setHeader(HttpHeaders.CONTENT_DISPOSITION, headerValue);\n    // Copy the stream to the response\'s output stream.\n    try {\n        InputStream myStream = new FileInputStream(outputFilePath);\n        IOUtils.copy(myStream, response.getOutputStream());\n        response.flushBuffer();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n\n\n2、使用ResponseEntity实现\n\nimport org.springframework.web.util.UriUtils;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.UrlResource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\n\n@GetMapping("/download")\npublic ResponseEntity<Resource> downloadFile() throws Exception {\n\n    // 请求类型、请求参数、请求头 根据需求制定即可\n    // 获取到需要下载的文件\n    // 如何生成文件，根据实际业务需求改造即可\n    String fileName = "2023年05月13日分析报告.pdf";\n    String outputFilePath = "/data/file-store-temp/" + fileName;\n    log.debug("待下载文件:{}", outputFilePath);\n    Path path = Paths.get(outputFilePath);\n    Resource resource = null;\n    try {\n        resource = new UrlResource(path.toUri());\n    } catch (MalformedURLException e) {\n        e.printStackTrace();\n    }\n    // 设置请求头参数以及下载的文件名称,中文名称转义防止乱码\n    HttpHeaders headers = new HttpHeaders();\n    headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename*=UTF-8\'\'" +\n                UriUtils.encode(fileName, StandardCharsets.UTF_8));\n    // \n    headers.add("Cache-Control", "no-cache, no-store, must-revalidate");\n    headers.add("Pragma", "no-cache");\n    headers.add("Expires", "0");\n    // 返回响应实体，包含文件内容和响应头\n    return ResponseEntity.ok()\n        .headers(headers)\n        .contentLength(resource.contentLength())\n        .contentType(MediaType.parseMediaType("application/octet-stream"))\n        .body(resource);\n}\n\n\n\n# 在线打开的方式\n\npublic void downLoad(String filePath, HttpServletResponse response, boolean isOnLine) throws Exception {\n\n    File f = new File(filePath);\n    if (!f.exists()) {\n        response.sendError(404, "File not found!");\n        return;\n    }\n    BufferedInputStream br = new BufferedInputStream(new FileInputStream(f));\n    byte[] buf = new byte[1024];\n    int len = 0;\n    response.reset(); // 非常重要\n    if (isOnLine) { // 在线打开方式\n        URL u = new URL("file:///" + filePath);\n        response.setContentType(u.openConnection().getContentType());\n        response.setHeader("Content-Disposition", "inline; filename=" + f.getName());\n        // 文件名应该编码成UTF-8\n    } else { // 纯下载方式\n        response.setContentType("application/x-msdownload");\n        response.setHeader("Content-Disposition", "attachment; filename=" + f.getName());\n    }\n    OutputStream out = response.getOutputStream();\n    while ((len = br.read(buf)) > 0)\n        out.write(buf, 0, len);\n    br.close();\n    out.close();\n}\n\n\n\n\n# Excel文件导出\n\n    public void downLoadXlsByJxl(HttpServletResponse response){\n        try {\n//            创建一个工作薄\n            ServletOutputStream outputStream = response.getOutputStream();\n            WritableWorkbook workbook = jxl.Workbook.createWorkbook(outputStream);\n//            创建一个工作表\n            WritableSheet sheet = workbook.createSheet("一个JXL入门", 0);\n//            设置列宽\n            sheet.setColumnView(0,5);//参数一：列索引，参数二：一个字母标准宽度\n            sheet.setColumnView(1,8);\n            sheet.setColumnView(2,15);\n            sheet.setColumnView(3,15);\n            sheet.setColumnView(4,30);\n//            处理标题\n            String[] titles = new String[]{"编号","姓名","手机号","入职日期","现住址"};\n            Label label = null;\n            for (int i = 0; i < titles.length; i++) {\n                label = new Label(i,0,titles[i]);\n                sheet.addCell(label);\n            }\n//            处理导出的内容\n            List<User> userList = this.findAll();\n            int rowIndex = 1;\n            for (User user : userList) {\n                label = new Label(0,rowIndex,user.getId().toString());\n                sheet.addCell(label);\n                label = new Label(1,rowIndex,user.getUserName());\n                sheet.addCell(label);\n                label = new Label(2,rowIndex,user.getPhone());\n                sheet.addCell(label);\n                label = new Label(3,rowIndex,simpleDateFormat.format(user.getHireDate()));\n                sheet.addCell(label);\n                label = new Label(4,rowIndex,user.getAddress());\n                sheet.addCell(label);\n                rowIndex++;\n            }\n\n            //            导出的文件名称\n            String filename="一个JXL入门.xls";\n//            设置文件的打开方式和mime类型\n            response.setHeader( "Content-Disposition", "attachment;filename="  + new String(filename.getBytes(),"ISO8859-1"));\n            response.setContentType("application/vnd.ms-excel");\n//            导出\n            workbook.write();\n//            关闭资源\n            workbook.close();\n            outputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n\n# URL下载\n\n> 网络收集\n\npublic void download2(HttpServletResponse response, String bucketName, String minFileName) {\n    InputStream fileInputStream = null;\n    //获取文件后缀\n    String fileType = minFileName.substring(minFileName.indexOf(".") + 1);\n    try {\n        //mp4视频\n        if("mp4".equals(fileType)){\n            //我这里的访问路径是http开头的（minio文件服务器）\n            URL url=new URL(“文件路径”);\n            URLConnection connection = url.openConnection();\n            fileInputStream = connection.getInputStream();\n            response.addHeader("Content-Type","video/mp4;charset=UTF-8");\n        }else {\n            //我这里是minio文件服务器获取流\n            fileInputStream = client.getObject(GetObjectArgs.builder()\n                                               .bucket(bucketName)\n                                               .object(minFileName).build());\n            if ("jpg".equals(fileType) || "png".equals(fileType) || "gif".equals(fileType)) {\n                response.setContentType("image/" + fileType);\n            } else {\n                //如果是其他方式进行下载操作\n                String filename = URLEncoder.encode(minFileName.substring(minFileName.indexOf("-") + 1),"UTF-8");\n                response.setHeader("Content-Disposition", "attachment;filename=" + filename);\n                response.setContentType("application/force-download");\n                response.setCharacterEncoding("UTF-8");\n            }\n        }\n        //流转换\n        IOUtils.copy(fileInputStream, response.getOutputStream());\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        // 关闭流\n        if (Objects.nonNull(fileInputStream)) {\n            try {\n                fileInputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\npublic void downloadNet(HttpServletResponse response) throws MalformedURLException {\n\n    // 下载网络文件\n    int bytesum = 0;\n    int byteread = 0;\n    URL url = new URL("windine.blogdriver.com/logo.gif");\n    try {\n        URLConnection conn = url.openConnection();\n        InputStream inStream = conn.getInputStream();\n        FileOutputStream fs = new FileOutputStream("c:/abc.gif");\n        byte[] buffer = new byte[1204];\n        int length;\n        while ((byteread = inStream.read(buffer)) != -1) {\n            bytesum += byteread;\n            System.out.println(bytesum);\n            fs.write(buffer, 0, byteread);\n        }\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n\n\npublic void downLoadFile(HttpServletResponse response, String httpUrl) {\n    ServletOutputStream out = null;\n    try {\n        //与服务器建立连接\n        URL url = new URL(httpUrl);\n        URLConnection conn = url.openConnection();\n        InputStream inputStream = conn.getInputStream();\n        try {\n            //1.设置文件ContentType类型，这样设置，会自动判断下载文件类型\n            response.setContentType("multipart/form-data");\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        out = response.getOutputStream();\n        // 读取文件流\n        int len = 0;\n        byte[] buffer = new byte[1024 * 10];\n        while ((len = inputStream.read(buffer)) != -1) {\n            out.write(buffer, 0, len);\n        }\n        out.flush();\n        out.close();\n        inputStream.close();\n    } catch (Exception e){\n        e.printStackTrace();\n    }\n}\n\n\n\n# URL打包下载\n\n> 网络收集 使用了压缩流\n\npublic void download(HttpServletRequest request, HttpServletResponse response){\n\n    try {\n        String downloadFilename = "中文.zip";//文件的名称\n        downloadFilename = URLEncoder.encode(downloadFilename, "UTF-8");//转换中文否则可能会产生乱码\n        response.setContentType("application/octet-stream");// 指明response的返回对象是文件流 \n        response.setHeader("Content-Disposition", "attachment;filename=" + downloadFilename);// 设置在下载框默认显示的文件名\n        ZipOutputStream zos = new ZipOutputStream(response.getOutputStream());\n        String[] files = new String[]{"http://xxxx/xx.jpg","http://xxx/xx.jpg"};\n        for (int i=0;i<files.length;i++) {\n            URL url = new URL(files[i]);\n            zos.putNextEntry(new ZipEntry(i+".jpg"));\n            //FileInputStream fis = new FileInputStream(new File(files[i]));  \n            InputStream fis = url.openConnection().getInputStream();   \n            byte[] buffer = new byte[1024];     \n            int r = 0;     \n            while ((r = fis.read(buffer)) != -1) {     \n                zos.write(buffer, 0, r);     \n            }     \n            fis.close();   \n        }  \n        zos.flush();     \n        zos.close();\n    } catch (UnsupportedEncodingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }  \n}\n\n\n\n# URL保存到本地\n\npublic String httpDownload(String httpUrl){\n    try {\n        URL url = new URL(httpUrl) ;\n        //filePath文件地址，fileName文件名\n        File file = new File(filePath, fileName);\n        FileUtils.copyURLToFile(url,file);\n    } catch (IOException e) {\n        logger.info("用印文件下载失败:{}",e.getMessage());\n        return null;\n    }\n    //文件地址\n    return basePath + "/" + fileName;\n}\n\n\n\n# URL流量返回\n\npublic void httpDownload(String httpUrl,HttpServletResponse response)throws IOException{\n        URL url = new URL(httpUrl) ;\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection() ;\n        urlConnection.connect() ;\n        OutputStream outputStream = response.getOutputStream();\n        InputStream inputStream = urlConnection.getInputStream() ;\n        IOUtils.copy(inputStream,outputStream);\n        inputStream.close();\n        response.flushBuffer();\n        outputStream.close();\n}\n\n\n\n# 将文件转换成base64\n\n/**\n     * 将文件转为base64\n     */\npublic static String getBase64FromFile(File file) throws IOException {\n    FileInputStream in = null;\n    ByteArrayOutputStream out = null;\n    try {\n        in = new FileInputStream(file);\n        out = new ByteArrayOutputStream();\n        int read = 0;\n        byte[] buffer = new byte[1024];\n        while ((read = in.read(buffer, 0, 1024)) != -1) {\n            out.write(buffer, 0, read);\n        }\n\n        return Base64.getEncoder().encodeToString(out.toByteArray());\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (in != null) {\n            in.close();\n        }\n        if (out != null){\n            out.close();\n        }\n    }\n}\n\n\n\n\n\n# 将MultipartFile转换为File\n\n/**\n     * 将MultipartFile转换为File\n     */\npublic static File MultipartFileToFile(MultipartFile multiFile) throws IOException {\n    String fileName = multiFile.getOriginalFilename();\n    String prefix = fileName.substring(fileName.lastIndexOf("."));\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n        File file = File.createTempFile(fileName, prefix);\n        out = new FileOutputStream(file);\n        in = multiFile.getInputStream();\n        int read = 0;\n        byte[] buffer = new byte[1024];\n        while ((read = in.read(buffer, 0, 1024)) != -1) {\n            out.write(buffer, 0, read);\n        }\n\n        return file;\n    } catch (Exception e) {\n        throw e;\n    }finally {\n        if (in != null){\n            in.close();\n        }\n        if (out != null){\n            out.close();\n        }\n    }\n}\n\n\n\npublic void download2(HttpServletResponse response, String bucketName, String minFileName) {\n    InputStream fileInputStream = null;\n    //获取文件后缀\n    String fileType = minFileName.substring(minFileName.indexOf(".") + 1);\n    try {\n        //mp4视频\n        if("mp4".equals(fileType)){\n            //我这里的访问路径是http开头的（minio文件服务器）\n            URL url=new URL(“文件路径”);\n            URLConnection connection = url.openConnection();\n            fileInputStream = connection.getInputStream();\n            response.addHeader("Content-Type","video/mp4;charset=UTF-8");\n        }else {\n            //我这里是minio文件服务器获取流\n            fileInputStream = client.getObject(GetObjectArgs.builder()\n                                               .bucket(bucketName)\n                                               .object(minFileName).build());\n            if ("jpg".equals(fileType) || "png".equals(fileType) || "gif".equals(fileType)) {\n                response.setContentType("image/" + fileType);\n            } else {\n                //如果是其他方式进行下载操作\n                String filename = URLEncoder.encode(minFileName.substring(minFileName.indexOf("-") + 1),"UTF-8");\n                response.setHeader("Content-Disposition", "attachment;filename=" + filename);\n                response.setContentType("application/force-download");\n                response.setCharacterEncoding("UTF-8");\n            }\n        }\n        //流转换\n        IOUtils.copy(fileInputStream, response.getOutputStream());\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        // 关闭流\n        if (Objects.nonNull(fileInputStream)) {\n            try {\n                fileInputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\n\nesponse.setContentType（）参数有哪些，该博主地址有统计https://blog.csdn.net/weixin_41926301/article/details/83827032\n\n@ApiOperation("下载")\n@GetMapping("/download/{id}")\n@ApiImplicitParams({\n    @ApiImplicitParam(name="id",value = "文件id",required = true)\n})\npublic void download(@PathVariable @NotBlank(message = "id不能为空") String id, HttpServletResponse response) throws JsonProcessingException {\n    FileInfo fileInfo = voiceFileService.getById(id);\n    if (fileInfo == null) {\n        WebUtils.responseResult(response,ResponseBean.fail("未找到上传文件信息"));\n        return;\n    }\n    String contentType = fileInfo.getContentType();\n    response.addHeader(HttpHeaders.CONTENT_DISPOSITION,"attachment; filename*=UTF-8\'\'" +\n                       UriUtils.encode(fileInfo.getOriginalFilename(), StandardCharsets.UTF_8)\n                      );\n    response.setHeader(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, HttpHeaders.CONTENT_DISPOSITION);\n    response.setContentType(contentType);\n    try {\n        fileStorageService.download(fileInfo).outputStream(response.getOutputStream());\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n\n\npackage com.jysp.voice.common.core.utils;\n\nimport com.alibaba.fastjson.JSON;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jydw.da.common.core.dataModel.common.vo.ResponseBean;\nimport lombok.extern.slf4j.Slf4j;\nimport org.xnio.Result;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n@Slf4j\npublic class WebUtils {\n\n    private static ObjectMapper mapper =  new ObjectMapper();\n    /**\n     * 将字符串渲染到客户端\n     *\n     * @param response 渲染对象\n     * @param string   待渲染的字符串\n     * @return null\n     */\n    public static String renderString(HttpServletResponse response, String string) {\n        try {\n            response.setStatus(200);\n            response.setContentType("application/json");\n            response.setCharacterEncoding("utf-8");\n            response.getWriter().print(string);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n\n    public static void responseResult(HttpServletResponse response, ResponseBean<?> result) {\n        response.setCharacterEncoding("UTF-8");\n        response.setHeader("Content-Type", "application/json;charset=UTF-8");\n        response.setHeader("Access-Control-Allow-Credentials", "true");\n        response.setHeader("Access-Control-Allow-Methods", "GET, POST");\n        response.setHeader("Access-Control-Allow-Origin", "*");\n        response.setHeader("Access-Control-Max-Age", "3600");\n        response.setStatus(HttpServletResponse.SC_OK);\n        PrintWriter writer = null;\n        try {\n            // JSON.toJSONString(result)要获取完整的json字符串，每一个字段都要有set和get方法，不然会缺少某个字段\n            writer = response.getWriter();\n            //            writer.write(JSON.toJSONString(result));\n            writer.write(mapper.writeValueAsString(result));\n            writer.flush();\n        } catch (IOException ex) {\n            log.error(ex.getMessage());\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n        }\n    }\n}\n\n\n\n# httpClient转发下载\n\n调用第三方文件下载接口,通过HttpClient的方式进行调用,需要从HttpResponse解析出参数,并读取流变成文件下载 调用部分\n\n/**\n*   调用GET请求  文件下载\n*\n*/\npublic static void fileDownload(String url,String cookie) throws Exception {\n\tHttpClient client = null;\n\tHttpGet get = new HttpGet(url);\n\tget.setHeader("Content-Type", "application/x-www-form-urlencoded");\n\tget.setHeader("Cookie", cookie);\n\ttry {\n\t\tRequestConfig.Builder customReqConf = RequestConfig.custom();\n\t\tcustomReqConf.setConnectTimeout(DEFAULT_CONNECTION_TIME_OUT.intValue());\n\t\tcustomReqConf.setSocketTimeout(DEFAULT_CONNECTION_TIME_OUT.intValue());\n\t\tget.setConfig(customReqConf.build());\n\t\tHttpResponse res = null;\n\t\tclient = createSSLInsecureClient();\n\t\tres = client.execute(get);\n\t\tHttpEntity entity = res.getEntity();\n\t\tInputStream inputStream = entity.getContent();\n        \n        //这里的流文件亦可以直接转换成 MutiParFile文件 ,\n        MultipartFile multipartFile = new MockMultipartFile("temp.jpg","temp.jpg","", inputStream);\n        \n\t\tString rootPath ="C:\\\\Users\\\\Administrator\\\\Desktop\\\\";\n\n\t\tString suffix = ".png";\n\t\tLong index = System.currentTimeMillis();\n\n\t\tString fileName = rootPath + index + suffix;\n\t\twriteToLocal(fileName,inputStream);\n\n\t\t\n\t} finally {\n\t\tget.releaseConnection();\n\t\tif ((url.startsWith("https")) && (client != null) && ((client instanceof CloseableHttpClient))) {\n\t\t\t((CloseableHttpClient) client).close();\n\t\t}\n\t}\n}\n\n\t/**\n\t * 文件下载\n\t * @param destination  下载路径\n\t * @param input\n\t * @throws IOException\n\t */\npublic static void writeToLocal(String destination, InputStream input)\n\t\t\tthrows IOException {\n\tint index;\n\tbyte[] bytes = new byte[1024];\n\tFileOutputStream downloadFile = new FileOutputStream(destination);\n\twhile ((index = input.read(bytes)) != -1) {\n\t\tdownloadFile.write(bytes, 0, index);\n\t\tdownloadFile.flush();\n\t}\n\tinput.close();\n\tdownloadFile.close();\n\n\t}\n\n\n\n\n# 多个文件压缩并批量下载\n\nprivate void getZip(List<String> files,HttpServletResponse response){\n\n    response.setContentType("application/x-msdownload");\n    response.setHeader("Content-Disposition","attachment;filename=人脸图像.zip");\n\n    String rootPath = configuration.getRootpath();\n    if(CollectionUtils.isEmpty(files)){\n\n        log.error(rootPath + "路径不存");\n    }\n    String zipName ="人脸图像.zip";\n    String zipPath = rootPath + zipName;\n    BufferedInputStream bis =null;\n    try {\n        //ZipOutputStream zipOutput = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipPath)));\n        ZipOutputStream zipOutput = new ZipOutputStream(response.getOutputStream());\n        for(String str :  files) {\n            File  file = new File(rootPath ,str);\n            if(!file.exists()){\n                log.error("文件被删除");\n                continue;\n            }\n            ZipEntry zEntry = new ZipEntry(file.getName());\n            zipOutput.putNextEntry(zEntry);\n            bis = new BufferedInputStream(new FileInputStream(file));\n            byte[] buffer = new byte[1024];\n            int read = 0;\n            while((read = bis.read(buffer)) != -1){\n                zipOutput.write(buffer, 0, read);\n            }\n        }\n        zipOutput.finish();\n        bis.close();\n        zipOutput.close();\n\n    } catch (Exception e) {\n        e.printStackTrace();\n        log.error(e.getMessage());\n    }\n}\n\n\n\n# 第三方接口，文件流转发\n\npackage com.example.demo;\n\nimport cn.hutool.core.util.IdUtil;\nimport org.springframework.util.FileCopyUtils;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\n\nimport static org.apache.catalina.manager.Constants.CHARSET;\n\n@RestController\n@RequestMapping("file")\npublic class TestController {\n\n    /**\n     * 前端下载文件\n     * @param response\n     * @throws UnsupportedEncodingException\n     */\n    @GetMapping(value = "/test1")\n    public void test(HttpServletResponse response) throws UnsupportedEncodingException {\n        // 设置编码\n        response.setCharacterEncoding("UTF-8");\n        response.setContentType("application/vnd.openxmlformats-officedocument.wordprocessingml.document");\n        response.addHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode("test.pdf", "UTF-8"));\n        String path = "D://test.pdf";\n        try {\n            FileInputStream in = new FileInputStream(new File(path));\n            FileCopyUtils.copy(in, response.getOutputStream());\n        } catch (FileNotFoundException e) {\n            System.out.println("文件不存在");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 前端预览文件\n     * @param response\n     * @throws IOException\n     */\n    @RequestMapping("download")\n    public void download(HttpServletResponse response) throws IOException {\n        String filePath = "D:\\\\test.pdf";\n        System.out.println("filePath:" + filePath);\n        File f = new File(filePath);\n        if (!f.exists()) {\n            response.sendError(404, "File not found!");\n            return;\n        }\n        BufferedInputStream br = new BufferedInputStream(new FileInputStream(f));\n        byte[] bs = new byte[1024];\n        int len = 0;\n        response.reset(); // 非常重要\n        URL u = new URL("file:///" + filePath);\n        String contentType = u.openConnection().getContentType();\n        response.setContentType(contentType);\n        response.setHeader("Content-Disposition", "inline;filename="\n                + "test.pdf");\n        // 文件名应该编码成utf-8，注意：使用时，我们可忽略这句\n        OutputStream out = response.getOutputStream();\n        while ((len = br.read(bs)) > 0) {\n            out.write(bs, 0, len);\n        }\n        out.flush();\n        out.close();\n        br.close();\n    }\n\n    /**\n     * 调用第三方流接口， 将文件保存到本地、读取本地文件返回前端预览\n     * @param response\n     * @throws IOException\n     */\n    @RequestMapping("test2")\n    public void test2(HttpServletResponse response) throws IOException {\n        HttpURLConnection urlConnection = null;\n        FileOutputStream fileOutputStream;\n        InputStream inputStream;\n        String fileName = IdUtil.nanoId();\n        try {\n            URL url = new URL("http://localhost:8080/file/download");\n            urlConnection = (HttpURLConnection) url.openConnection();\n            urlConnection.setRequestMethod("POST");\n            urlConnection.setConnectTimeout(20000);\n            urlConnection.setDoOutput(true);\n            urlConnection.setDoInput(true);\n            urlConnection.setUseCaches(false);\n            urlConnection.setRequestProperty("Content-Type", "application/json; charset=" + CHARSET);\n            urlConnection.connect();\n\n            File file = new File("D://"+fileName+".pdf");\n            if (!file.getParentFile().exists()) {\n                file.getParentFile().mkdirs();\n            }\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            inputStream = urlConnection.getInputStream();\n            BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);\n            fileOutputStream = new FileOutputStream("D://"+fileName+".pdf");\n            BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream);\n\n            byte[] buf = new byte[4096];\n            int length = bufferedInputStream.read(buf);\n            while (-1 != length) {\n                bufferedOutputStream.write(buf, 0, length);\n                length = bufferedInputStream.read(buf);\n            }\n            bufferedInputStream.close();\n            bufferedOutputStream.close();\n        } catch (Exception e) {\n            System.out.println("getFile error: " + e);\n        } finally {\n            if (null != urlConnection) {\n                urlConnection.disconnect();\n            }\n        }\n        String filePath = "D://"+fileName+".pdf";\n        File f = new File("D://"+fileName+".pdf");\n        if (!f.exists()) {\n            response.sendError(404, "File not found!");\n            return;\n        }\n        BufferedInputStream br = new BufferedInputStream(new FileInputStream(f));\n        byte[] bs = new byte[1024];\n        int len = 0;\n        response.reset(); // 非常重要\n        URL u = new URL("file:///" + filePath);\n        String contentType = u.openConnection().getContentType();\n        response.setContentType(contentType);\n        response.setHeader("Content-Disposition", "inline;filename="\n                + fileName + ".pdf");\n        // 文件名应该编码成utf-8，注意：使用时，我们可忽略这句\n        OutputStream out = response.getOutputStream();\n        while ((len = br.read(bs)) > 0) {\n            out.write(bs, 0, len);\n        }\n        out.flush();\n        out.close();\n        br.close();\n    }\n\n    /**\n     * 调用第三方流接口， 将文件流返回前端预览\n     * @param request\n     * @param response\n     */\n    @RequestMapping("test3")\n    public void test3(HttpServletRequest request, HttpServletResponse response) {\n        HttpURLConnection urlConnection = null;\n        InputStream inputStream;\n        try {\n            URL url = new URL("http://localhost:8080/file/download");\n            urlConnection = (HttpURLConnection) url.openConnection();\n            urlConnection.setRequestMethod("POST");\n            urlConnection.setConnectTimeout(20000);\n            urlConnection.setDoOutput(true);\n            urlConnection.setDoInput(true);\n            urlConnection.setUseCaches(false);\n            urlConnection.setRequestProperty("Content-Type", "application/json; charset=" + CHARSET);\n            urlConnection.connect();\n            inputStream = urlConnection.getInputStream();\n            BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);\n            byte[] buf = new byte[4096];\n            int length = bufferedInputStream.read(buf);\n            ServletOutputStream out = response.getOutputStream();\n            while (-1 != length) {\n                out.write(buf, 0,length);\n                length = bufferedInputStream.read(buf);\n            }\n            out.flush();\n            out.close();\n            bufferedInputStream.close();\n        } catch (Exception e) {\n            System.out.println("getFile error: " + e);\n        } finally {\n            if (null != urlConnection) {\n                urlConnection.disconnect();\n            }\n        }\n    }\n}\n',normalizedContent:'# 文件下载说明\n\n文件下载核心：一个流，两个头\n\n * 输出流response.getoutputstream()\n * content-disposition\n * content-type\n\n\n# 本地文件下载参考示例\n\n> 使用缓冲流返回\n\n/**\n* 下载文件\n* @param path\n* @param filename\n* @param response\n*/\npublic static void download(string path, string filename,httpservletresponse response) {\n\t// 服务器保存的文件地址，即你要下载的文件地址（全路径）\n\tfile file = new file(path);\n\tinputstream inputstream = null;\n\toutputstream outputstream = null;\n\ttry {\n\t\tinputstream = new bufferedinputstream(new fileinputstream(file));\n\t\tbyte[] buffer = new byte[inputstream.available()];\n\t\tinputstream.read(buffer);\n\t\tresponse.reset();\n\t\tresponse.addheader("content-disposition", "attachment;filename=" + urlencoder.encode(filename, "utf-8"));\n\t\tresponse.addheader("content-length", "" + file.length());\n\t\tresponse.setcontenttype("application/octet-stream");\n\t\toutputstream = new bufferedoutputstream(response.getoutputstream());\n\t\toutputstream.write(buffer);\n\t\toutputstream.flush();\n\t}\n\tcatch (ioexception e) {\n\t\te.printstacktrace();\n\t\tthrow new ggexception(e.getmessage());\n\t}\n\tfinally {\n\t\ttry {\n\t\t\tif (outputstream != null) {\n\t\t\t\toutputstream.close();\n\t\t\t}\n\t\t\tif (inputstream != null) {\n\t\t\t\tinputstream.close();\n\t\t\t}\n\t\t}\n\t\tcatch (ioexception e) {\n\t\t\te.printstacktrace();\n\t\t}\n\t}\n}\n\n\npublic httpservletresponse download(string path, httpservletresponse response) {\n\n    try {\n        // path是指欲下载的文件的路径。\n        file file = new file(path);\n        // 取得文件名。\n        string filename = file.getname();\n        // 取得文件的后缀名。\n        string ext = filename.substring(filename.lastindexof(".") + 1).touppercase();\n        // 以流的形式下载文件。\n        inputstream fis = new bufferedinputstream(new fileinputstream(path));\n        byte[] buffer = new byte[fis.available()];\n        fis.read(buffer);\n        fis.close();\n        // 清空response\n        response.reset();\n        // 设置response的header\n        response.addheader("content-disposition", "attachment;filename=" + new string(filename.getbytes()));\n        response.addheader("content-length", "" + file.length());\n        outputstream toclient = new bufferedoutputstream(response.getoutputstream());\n        response.setcontenttype("application/octet-stream");\n        toclient.write(buffer);\n        toclient.flush();\n        toclient.close();\n    } catch (ioexception ex) {\n        ex.printstacktrace();\n    }\n    return response;\n}\n\n\n\n\npublic void downloadlocal(httpservletresponse response) throws filenotfoundexception {\n\n    // 下载本地文件\n    string filename = "operator.doc".tostring(); // 文件的默认保存名\n    // 读到流中\n    inputstream instream = new fileinputstream("c:/operator.doc");// 文件的存放路径\n    // 设置输出的格式\n    response.reset();\n    response.setcontenttype("bin");\n    response.addheader("content-disposition", "attachment; filename=\\"" + filename + "\\"");\n    // 循环取出流中的数据\n    byte[] b = new byte[100];\n    int len;\n    try {\n        while ((len = instream.read(b)) > 0)\n            response.getoutputstream().write(b, 0, len);\n        instream.close();\n    } catch (ioexception e) {\n        e.printstacktrace();\n    }\n}\n\n\n> 使用commons-io工具\n\n/**\n     * 下载文件\n     * @param path\n     * @param response\n     */\npublic static void nativedownload(string path, httpservletresponse response) {\n    // 服务器保存的文件地址，即你要下载的文件地址（全路径）\n    file file = new file(path);\n    try {\n        //2、两个头\n        //获取content-type\n        optional<mediatype> mediatype = mediatypefactory.getmediatype(path);\n        string contenttype = mediatype.orelse(mediatype.application_octet_stream).tostring();\n        response.addheader(httpheaders.content_disposition, "attachment;filename=" + urlencoder.encode(file.getname(), "utf-8"));\n        response.setcontenttype(contenttype);\n        //1、一个流\n        inputstream is = files.newinputstream(file.topath());\n        servletoutputstream os = response.getoutputstream();\n        ioutils.copy(is,os);\n        ioutils.closequietly(is);\n    } catch (ioexception e) {\n        e.printstacktrace();\n        throw new runtimeexception(e.getmessage());\n    }\n}\n\n\n> 网络收集\n\n1、使用httpservletresponse输出流实现\n\n@getmapping("/download")\npublic void bianpdfdownload(httpservletrequest request, httpservletresponse response) throws exception {\n\n    // 请求类型、请求参数、请求头 根据需求制定即可\n    // 获取到需要下载的文件\n    // 如何生成文件，根据实际业务需求改造即可\n    string outputfilepath = "/data/file-store-temp/2023年05月13日分析报告.pdf";\n    log.debug("待下载文件:{}", outputfilepath);\n    // 下载文件\n    // 设置响应的内容类型，让浏览器知道下载的是一个文件\n    servletcontext context = request.getservletcontext();\n    // get mime type of the file\n    string mimetype = context.getmimetype(outputfilepath);\n    if (mimetype == null) {\n        // set to binary type if mime mapping not found\n        mimetype = "application/octet-stream";\n        log.debug("context getmimetype is null");\n    }\n    log.debug("mime type: " + mimetype);\n    // 设置响应头信息，告诉浏览器文件的名称和长度\n    // set content attributes for the response\n    response.setcontenttype(mimetype);\n    response.setcontentlength((int) file.length());\n    // 设置编码\n    response.setcharacterencoding("utf-8");\n    // 设置请求头参数以及下载的文件名称,中文名称转义防止乱码\n    string headervalue = string.format("attachment; filename=%s",\n                                       uriutils.encode(filename1, standardcharsets.utf_8));\n\n    response.setheader(httpheaders.content_disposition, headervalue);\n    // copy the stream to the response\'s output stream.\n    try {\n        inputstream mystream = new fileinputstream(outputfilepath);\n        ioutils.copy(mystream, response.getoutputstream());\n        response.flushbuffer();\n    } catch (ioexception e) {\n        e.printstacktrace();\n    }\n}\n\n\n2、使用responseentity实现\n\nimport org.springframework.web.util.uriutils;\nimport org.springframework.core.io.resource;\nimport org.springframework.core.io.urlresource;\nimport org.springframework.http.httpheaders;\nimport org.springframework.http.mediatype;\nimport org.springframework.http.responseentity;\n\n@getmapping("/download")\npublic responseentity<resource> downloadfile() throws exception {\n\n    // 请求类型、请求参数、请求头 根据需求制定即可\n    // 获取到需要下载的文件\n    // 如何生成文件，根据实际业务需求改造即可\n    string filename = "2023年05月13日分析报告.pdf";\n    string outputfilepath = "/data/file-store-temp/" + filename;\n    log.debug("待下载文件:{}", outputfilepath);\n    path path = paths.get(outputfilepath);\n    resource resource = null;\n    try {\n        resource = new urlresource(path.touri());\n    } catch (malformedurlexception e) {\n        e.printstacktrace();\n    }\n    // 设置请求头参数以及下载的文件名称,中文名称转义防止乱码\n    httpheaders headers = new httpheaders();\n    headers.add(httpheaders.content_disposition, "attachment; filename*=utf-8\'\'" +\n                uriutils.encode(filename, standardcharsets.utf_8));\n    // \n    headers.add("cache-control", "no-cache, no-store, must-revalidate");\n    headers.add("pragma", "no-cache");\n    headers.add("expires", "0");\n    // 返回响应实体，包含文件内容和响应头\n    return responseentity.ok()\n        .headers(headers)\n        .contentlength(resource.contentlength())\n        .contenttype(mediatype.parsemediatype("application/octet-stream"))\n        .body(resource);\n}\n\n\n\n# 在线打开的方式\n\npublic void download(string filepath, httpservletresponse response, boolean isonline) throws exception {\n\n    file f = new file(filepath);\n    if (!f.exists()) {\n        response.senderror(404, "file not found!");\n        return;\n    }\n    bufferedinputstream br = new bufferedinputstream(new fileinputstream(f));\n    byte[] buf = new byte[1024];\n    int len = 0;\n    response.reset(); // 非常重要\n    if (isonline) { // 在线打开方式\n        url u = new url("file:///" + filepath);\n        response.setcontenttype(u.openconnection().getcontenttype());\n        response.setheader("content-disposition", "inline; filename=" + f.getname());\n        // 文件名应该编码成utf-8\n    } else { // 纯下载方式\n        response.setcontenttype("application/x-msdownload");\n        response.setheader("content-disposition", "attachment; filename=" + f.getname());\n    }\n    outputstream out = response.getoutputstream();\n    while ((len = br.read(buf)) > 0)\n        out.write(buf, 0, len);\n    br.close();\n    out.close();\n}\n\n\n\n\n# excel文件导出\n\n    public void downloadxlsbyjxl(httpservletresponse response){\n        try {\n//            创建一个工作薄\n            servletoutputstream outputstream = response.getoutputstream();\n            writableworkbook workbook = jxl.workbook.createworkbook(outputstream);\n//            创建一个工作表\n            writablesheet sheet = workbook.createsheet("一个jxl入门", 0);\n//            设置列宽\n            sheet.setcolumnview(0,5);//参数一：列索引，参数二：一个字母标准宽度\n            sheet.setcolumnview(1,8);\n            sheet.setcolumnview(2,15);\n            sheet.setcolumnview(3,15);\n            sheet.setcolumnview(4,30);\n//            处理标题\n            string[] titles = new string[]{"编号","姓名","手机号","入职日期","现住址"};\n            label label = null;\n            for (int i = 0; i < titles.length; i++) {\n                label = new label(i,0,titles[i]);\n                sheet.addcell(label);\n            }\n//            处理导出的内容\n            list<user> userlist = this.findall();\n            int rowindex = 1;\n            for (user user : userlist) {\n                label = new label(0,rowindex,user.getid().tostring());\n                sheet.addcell(label);\n                label = new label(1,rowindex,user.getusername());\n                sheet.addcell(label);\n                label = new label(2,rowindex,user.getphone());\n                sheet.addcell(label);\n                label = new label(3,rowindex,simpledateformat.format(user.gethiredate()));\n                sheet.addcell(label);\n                label = new label(4,rowindex,user.getaddress());\n                sheet.addcell(label);\n                rowindex++;\n            }\n\n            //            导出的文件名称\n            string filename="一个jxl入门.xls";\n//            设置文件的打开方式和mime类型\n            response.setheader( "content-disposition", "attachment;filename="  + new string(filename.getbytes(),"iso8859-1"));\n            response.setcontenttype("application/vnd.ms-excel");\n//            导出\n            workbook.write();\n//            关闭资源\n            workbook.close();\n            outputstream.close();\n        } catch (exception e) {\n            e.printstacktrace();\n        }\n    }\n\n\n\n# url下载\n\n> 网络收集\n\npublic void download2(httpservletresponse response, string bucketname, string minfilename) {\n    inputstream fileinputstream = null;\n    //获取文件后缀\n    string filetype = minfilename.substring(minfilename.indexof(".") + 1);\n    try {\n        //mp4视频\n        if("mp4".equals(filetype)){\n            //我这里的访问路径是http开头的（minio文件服务器）\n            url url=new url(“文件路径”);\n            urlconnection connection = url.openconnection();\n            fileinputstream = connection.getinputstream();\n            response.addheader("content-type","video/mp4;charset=utf-8");\n        }else {\n            //我这里是minio文件服务器获取流\n            fileinputstream = client.getobject(getobjectargs.builder()\n                                               .bucket(bucketname)\n                                               .object(minfilename).build());\n            if ("jpg".equals(filetype) || "png".equals(filetype) || "gif".equals(filetype)) {\n                response.setcontenttype("image/" + filetype);\n            } else {\n                //如果是其他方式进行下载操作\n                string filename = urlencoder.encode(minfilename.substring(minfilename.indexof("-") + 1),"utf-8");\n                response.setheader("content-disposition", "attachment;filename=" + filename);\n                response.setcontenttype("application/force-download");\n                response.setcharacterencoding("utf-8");\n            }\n        }\n        //流转换\n        ioutils.copy(fileinputstream, response.getoutputstream());\n    } catch (exception e) {\n        e.printstacktrace();\n    } finally {\n        // 关闭流\n        if (objects.nonnull(fileinputstream)) {\n            try {\n                fileinputstream.close();\n            } catch (ioexception e) {\n                e.printstacktrace();\n            }\n        }\n    }\n}\n\n\npublic void downloadnet(httpservletresponse response) throws malformedurlexception {\n\n    // 下载网络文件\n    int bytesum = 0;\n    int byteread = 0;\n    url url = new url("windine.blogdriver.com/logo.gif");\n    try {\n        urlconnection conn = url.openconnection();\n        inputstream instream = conn.getinputstream();\n        fileoutputstream fs = new fileoutputstream("c:/abc.gif");\n        byte[] buffer = new byte[1204];\n        int length;\n        while ((byteread = instream.read(buffer)) != -1) {\n            bytesum += byteread;\n            system.out.println(bytesum);\n            fs.write(buffer, 0, byteread);\n        }\n    } catch (filenotfoundexception e) {\n        e.printstacktrace();\n    } catch (ioexception e) {\n        e.printstacktrace();\n    }\n}\n\n\npublic void downloadfile(httpservletresponse response, string httpurl) {\n    servletoutputstream out = null;\n    try {\n        //与服务器建立连接\n        url url = new url(httpurl);\n        urlconnection conn = url.openconnection();\n        inputstream inputstream = conn.getinputstream();\n        try {\n            //1.设置文件contenttype类型，这样设置，会自动判断下载文件类型\n            response.setcontenttype("multipart/form-data");\n        } catch (exception e){\n            e.printstacktrace();\n        }\n        out = response.getoutputstream();\n        // 读取文件流\n        int len = 0;\n        byte[] buffer = new byte[1024 * 10];\n        while ((len = inputstream.read(buffer)) != -1) {\n            out.write(buffer, 0, len);\n        }\n        out.flush();\n        out.close();\n        inputstream.close();\n    } catch (exception e){\n        e.printstacktrace();\n    }\n}\n\n\n\n# url打包下载\n\n> 网络收集 使用了压缩流\n\npublic void download(httpservletrequest request, httpservletresponse response){\n\n    try {\n        string downloadfilename = "中文.zip";//文件的名称\n        downloadfilename = urlencoder.encode(downloadfilename, "utf-8");//转换中文否则可能会产生乱码\n        response.setcontenttype("application/octet-stream");// 指明response的返回对象是文件流 \n        response.setheader("content-disposition", "attachment;filename=" + downloadfilename);// 设置在下载框默认显示的文件名\n        zipoutputstream zos = new zipoutputstream(response.getoutputstream());\n        string[] files = new string[]{"http://xxxx/xx.jpg","http://xxx/xx.jpg"};\n        for (int i=0;i<files.length;i++) {\n            url url = new url(files[i]);\n            zos.putnextentry(new zipentry(i+".jpg"));\n            //fileinputstream fis = new fileinputstream(new file(files[i]));  \n            inputstream fis = url.openconnection().getinputstream();   \n            byte[] buffer = new byte[1024];     \n            int r = 0;     \n            while ((r = fis.read(buffer)) != -1) {     \n                zos.write(buffer, 0, r);     \n            }     \n            fis.close();   \n        }  \n        zos.flush();     \n        zos.close();\n    } catch (unsupportedencodingexception e) {\n        // todo auto-generated catch block\n        e.printstacktrace();\n    } catch (ioexception e) {\n        // todo auto-generated catch block\n        e.printstacktrace();\n    }  \n}\n\n\n\n# url保存到本地\n\npublic string httpdownload(string httpurl){\n    try {\n        url url = new url(httpurl) ;\n        //filepath文件地址，filename文件名\n        file file = new file(filepath, filename);\n        fileutils.copyurltofile(url,file);\n    } catch (ioexception e) {\n        logger.info("用印文件下载失败:{}",e.getmessage());\n        return null;\n    }\n    //文件地址\n    return basepath + "/" + filename;\n}\n\n\n\n# url流量返回\n\npublic void httpdownload(string httpurl,httpservletresponse response)throws ioexception{\n        url url = new url(httpurl) ;\n        httpurlconnection urlconnection = (httpurlconnection) url.openconnection() ;\n        urlconnection.connect() ;\n        outputstream outputstream = response.getoutputstream();\n        inputstream inputstream = urlconnection.getinputstream() ;\n        ioutils.copy(inputstream,outputstream);\n        inputstream.close();\n        response.flushbuffer();\n        outputstream.close();\n}\n\n\n\n# 将文件转换成base64\n\n/**\n     * 将文件转为base64\n     */\npublic static string getbase64fromfile(file file) throws ioexception {\n    fileinputstream in = null;\n    bytearrayoutputstream out = null;\n    try {\n        in = new fileinputstream(file);\n        out = new bytearrayoutputstream();\n        int read = 0;\n        byte[] buffer = new byte[1024];\n        while ((read = in.read(buffer, 0, 1024)) != -1) {\n            out.write(buffer, 0, read);\n        }\n\n        return base64.getencoder().encodetostring(out.tobytearray());\n    } catch (ioexception e) {\n        throw e;\n    } finally {\n        if (in != null) {\n            in.close();\n        }\n        if (out != null){\n            out.close();\n        }\n    }\n}\n\n\n\n\n\n# 将multipartfile转换为file\n\n/**\n     * 将multipartfile转换为file\n     */\npublic static file multipartfiletofile(multipartfile multifile) throws ioexception {\n    string filename = multifile.getoriginalfilename();\n    string prefix = filename.substring(filename.lastindexof("."));\n    inputstream in = null;\n    outputstream out = null;\n    try {\n        file file = file.createtempfile(filename, prefix);\n        out = new fileoutputstream(file);\n        in = multifile.getinputstream();\n        int read = 0;\n        byte[] buffer = new byte[1024];\n        while ((read = in.read(buffer, 0, 1024)) != -1) {\n            out.write(buffer, 0, read);\n        }\n\n        return file;\n    } catch (exception e) {\n        throw e;\n    }finally {\n        if (in != null){\n            in.close();\n        }\n        if (out != null){\n            out.close();\n        }\n    }\n}\n\n\n\npublic void download2(httpservletresponse response, string bucketname, string minfilename) {\n    inputstream fileinputstream = null;\n    //获取文件后缀\n    string filetype = minfilename.substring(minfilename.indexof(".") + 1);\n    try {\n        //mp4视频\n        if("mp4".equals(filetype)){\n            //我这里的访问路径是http开头的（minio文件服务器）\n            url url=new url(“文件路径”);\n            urlconnection connection = url.openconnection();\n            fileinputstream = connection.getinputstream();\n            response.addheader("content-type","video/mp4;charset=utf-8");\n        }else {\n            //我这里是minio文件服务器获取流\n            fileinputstream = client.getobject(getobjectargs.builder()\n                                               .bucket(bucketname)\n                                               .object(minfilename).build());\n            if ("jpg".equals(filetype) || "png".equals(filetype) || "gif".equals(filetype)) {\n                response.setcontenttype("image/" + filetype);\n            } else {\n                //如果是其他方式进行下载操作\n                string filename = urlencoder.encode(minfilename.substring(minfilename.indexof("-") + 1),"utf-8");\n                response.setheader("content-disposition", "attachment;filename=" + filename);\n                response.setcontenttype("application/force-download");\n                response.setcharacterencoding("utf-8");\n            }\n        }\n        //流转换\n        ioutils.copy(fileinputstream, response.getoutputstream());\n    } catch (exception e) {\n        e.printstacktrace();\n    } finally {\n        // 关闭流\n        if (objects.nonnull(fileinputstream)) {\n            try {\n                fileinputstream.close();\n            } catch (ioexception e) {\n                e.printstacktrace();\n            }\n        }\n    }\n}\n\n\n\nesponse.setcontenttype（）参数有哪些，该博主地址有统计https://blog.csdn.net/weixin_41926301/article/details/83827032\n\n@apioperation("下载")\n@getmapping("/download/{id}")\n@apiimplicitparams({\n    @apiimplicitparam(name="id",value = "文件id",required = true)\n})\npublic void download(@pathvariable @notblank(message = "id不能为空") string id, httpservletresponse response) throws jsonprocessingexception {\n    fileinfo fileinfo = voicefileservice.getbyid(id);\n    if (fileinfo == null) {\n        webutils.responseresult(response,responsebean.fail("未找到上传文件信息"));\n        return;\n    }\n    string contenttype = fileinfo.getcontenttype();\n    response.addheader(httpheaders.content_disposition,"attachment; filename*=utf-8\'\'" +\n                       uriutils.encode(fileinfo.getoriginalfilename(), standardcharsets.utf_8)\n                      );\n    response.setheader(httpheaders.access_control_expose_headers, httpheaders.content_disposition);\n    response.setcontenttype(contenttype);\n    try {\n        filestorageservice.download(fileinfo).outputstream(response.getoutputstream());\n    } catch (ioexception e) {\n        e.printstacktrace();\n    }\n}\n\n\npackage com.jysp.voice.common.core.utils;\n\nimport com.alibaba.fastjson.json;\nimport com.fasterxml.jackson.databind.objectmapper;\nimport com.jydw.da.common.core.datamodel.common.vo.responsebean;\nimport lombok.extern.slf4j.slf4j;\nimport org.xnio.result;\n\nimport javax.servlet.http.httpservletresponse;\nimport java.io.ioexception;\nimport java.io.printwriter;\n\n@slf4j\npublic class webutils {\n\n    private static objectmapper mapper =  new objectmapper();\n    /**\n     * 将字符串渲染到客户端\n     *\n     * @param response 渲染对象\n     * @param string   待渲染的字符串\n     * @return null\n     */\n    public static string renderstring(httpservletresponse response, string string) {\n        try {\n            response.setstatus(200);\n            response.setcontenttype("application/json");\n            response.setcharacterencoding("utf-8");\n            response.getwriter().print(string);\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n        return null;\n    }\n\n\n    public static void responseresult(httpservletresponse response, responsebean<?> result) {\n        response.setcharacterencoding("utf-8");\n        response.setheader("content-type", "application/json;charset=utf-8");\n        response.setheader("access-control-allow-credentials", "true");\n        response.setheader("access-control-allow-methods", "get, post");\n        response.setheader("access-control-allow-origin", "*");\n        response.setheader("access-control-max-age", "3600");\n        response.setstatus(httpservletresponse.sc_ok);\n        printwriter writer = null;\n        try {\n            // json.tojsonstring(result)要获取完整的json字符串，每一个字段都要有set和get方法，不然会缺少某个字段\n            writer = response.getwriter();\n            //            writer.write(json.tojsonstring(result));\n            writer.write(mapper.writevalueasstring(result));\n            writer.flush();\n        } catch (ioexception ex) {\n            log.error(ex.getmessage());\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n        }\n    }\n}\n\n\n\n# httpclient转发下载\n\n调用第三方文件下载接口,通过httpclient的方式进行调用,需要从httpresponse解析出参数,并读取流变成文件下载 调用部分\n\n/**\n*   调用get请求  文件下载\n*\n*/\npublic static void filedownload(string url,string cookie) throws exception {\n\thttpclient client = null;\n\thttpget get = new httpget(url);\n\tget.setheader("content-type", "application/x-www-form-urlencoded");\n\tget.setheader("cookie", cookie);\n\ttry {\n\t\trequestconfig.builder customreqconf = requestconfig.custom();\n\t\tcustomreqconf.setconnecttimeout(default_connection_time_out.intvalue());\n\t\tcustomreqconf.setsockettimeout(default_connection_time_out.intvalue());\n\t\tget.setconfig(customreqconf.build());\n\t\thttpresponse res = null;\n\t\tclient = createsslinsecureclient();\n\t\tres = client.execute(get);\n\t\thttpentity entity = res.getentity();\n\t\tinputstream inputstream = entity.getcontent();\n        \n        //这里的流文件亦可以直接转换成 mutiparfile文件 ,\n        multipartfile multipartfile = new mockmultipartfile("temp.jpg","temp.jpg","", inputstream);\n        \n\t\tstring rootpath ="c:\\\\users\\\\administrator\\\\desktop\\\\";\n\n\t\tstring suffix = ".png";\n\t\tlong index = system.currenttimemillis();\n\n\t\tstring filename = rootpath + index + suffix;\n\t\twritetolocal(filename,inputstream);\n\n\t\t\n\t} finally {\n\t\tget.releaseconnection();\n\t\tif ((url.startswith("https")) && (client != null) && ((client instanceof closeablehttpclient))) {\n\t\t\t((closeablehttpclient) client).close();\n\t\t}\n\t}\n}\n\n\t/**\n\t * 文件下载\n\t * @param destination  下载路径\n\t * @param input\n\t * @throws ioexception\n\t */\npublic static void writetolocal(string destination, inputstream input)\n\t\t\tthrows ioexception {\n\tint index;\n\tbyte[] bytes = new byte[1024];\n\tfileoutputstream downloadfile = new fileoutputstream(destination);\n\twhile ((index = input.read(bytes)) != -1) {\n\t\tdownloadfile.write(bytes, 0, index);\n\t\tdownloadfile.flush();\n\t}\n\tinput.close();\n\tdownloadfile.close();\n\n\t}\n\n\n\n\n# 多个文件压缩并批量下载\n\nprivate void getzip(list<string> files,httpservletresponse response){\n\n    response.setcontenttype("application/x-msdownload");\n    response.setheader("content-disposition","attachment;filename=人脸图像.zip");\n\n    string rootpath = configuration.getrootpath();\n    if(collectionutils.isempty(files)){\n\n        log.error(rootpath + "路径不存");\n    }\n    string zipname ="人脸图像.zip";\n    string zippath = rootpath + zipname;\n    bufferedinputstream bis =null;\n    try {\n        //zipoutputstream zipoutput = new zipoutputstream(new bufferedoutputstream(new fileoutputstream(zippath)));\n        zipoutputstream zipoutput = new zipoutputstream(response.getoutputstream());\n        for(string str :  files) {\n            file  file = new file(rootpath ,str);\n            if(!file.exists()){\n                log.error("文件被删除");\n                continue;\n            }\n            zipentry zentry = new zipentry(file.getname());\n            zipoutput.putnextentry(zentry);\n            bis = new bufferedinputstream(new fileinputstream(file));\n            byte[] buffer = new byte[1024];\n            int read = 0;\n            while((read = bis.read(buffer)) != -1){\n                zipoutput.write(buffer, 0, read);\n            }\n        }\n        zipoutput.finish();\n        bis.close();\n        zipoutput.close();\n\n    } catch (exception e) {\n        e.printstacktrace();\n        log.error(e.getmessage());\n    }\n}\n\n\n\n# 第三方接口，文件流转发\n\npackage com.example.demo;\n\nimport cn.hutool.core.util.idutil;\nimport org.springframework.util.filecopyutils;\nimport org.springframework.web.bind.annotation.getmapping;\nimport org.springframework.web.bind.annotation.requestmapping;\nimport org.springframework.web.bind.annotation.restcontroller;\n\nimport javax.servlet.servletoutputstream;\nimport javax.servlet.http.httpservletrequest;\nimport javax.servlet.http.httpservletresponse;\nimport java.io.*;\nimport java.net.httpurlconnection;\nimport java.net.url;\nimport java.net.urlencoder;\n\nimport static org.apache.catalina.manager.constants.charset;\n\n@restcontroller\n@requestmapping("file")\npublic class testcontroller {\n\n    /**\n     * 前端下载文件\n     * @param response\n     * @throws unsupportedencodingexception\n     */\n    @getmapping(value = "/test1")\n    public void test(httpservletresponse response) throws unsupportedencodingexception {\n        // 设置编码\n        response.setcharacterencoding("utf-8");\n        response.setcontenttype("application/vnd.openxmlformats-officedocument.wordprocessingml.document");\n        response.addheader("content-disposition", "attachment;filename=" + urlencoder.encode("test.pdf", "utf-8"));\n        string path = "d://test.pdf";\n        try {\n            fileinputstream in = new fileinputstream(new file(path));\n            filecopyutils.copy(in, response.getoutputstream());\n        } catch (filenotfoundexception e) {\n            system.out.println("文件不存在");\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n    }\n\n    /**\n     * 前端预览文件\n     * @param response\n     * @throws ioexception\n     */\n    @requestmapping("download")\n    public void download(httpservletresponse response) throws ioexception {\n        string filepath = "d:\\\\test.pdf";\n        system.out.println("filepath:" + filepath);\n        file f = new file(filepath);\n        if (!f.exists()) {\n            response.senderror(404, "file not found!");\n            return;\n        }\n        bufferedinputstream br = new bufferedinputstream(new fileinputstream(f));\n        byte[] bs = new byte[1024];\n        int len = 0;\n        response.reset(); // 非常重要\n        url u = new url("file:///" + filepath);\n        string contenttype = u.openconnection().getcontenttype();\n        response.setcontenttype(contenttype);\n        response.setheader("content-disposition", "inline;filename="\n                + "test.pdf");\n        // 文件名应该编码成utf-8，注意：使用时，我们可忽略这句\n        outputstream out = response.getoutputstream();\n        while ((len = br.read(bs)) > 0) {\n            out.write(bs, 0, len);\n        }\n        out.flush();\n        out.close();\n        br.close();\n    }\n\n    /**\n     * 调用第三方流接口， 将文件保存到本地、读取本地文件返回前端预览\n     * @param response\n     * @throws ioexception\n     */\n    @requestmapping("test2")\n    public void test2(httpservletresponse response) throws ioexception {\n        httpurlconnection urlconnection = null;\n        fileoutputstream fileoutputstream;\n        inputstream inputstream;\n        string filename = idutil.nanoid();\n        try {\n            url url = new url("http://localhost:8080/file/download");\n            urlconnection = (httpurlconnection) url.openconnection();\n            urlconnection.setrequestmethod("post");\n            urlconnection.setconnecttimeout(20000);\n            urlconnection.setdooutput(true);\n            urlconnection.setdoinput(true);\n            urlconnection.setusecaches(false);\n            urlconnection.setrequestproperty("content-type", "application/json; charset=" + charset);\n            urlconnection.connect();\n\n            file file = new file("d://"+filename+".pdf");\n            if (!file.getparentfile().exists()) {\n                file.getparentfile().mkdirs();\n            }\n            if (!file.exists()) {\n                file.createnewfile();\n            }\n            inputstream = urlconnection.getinputstream();\n            bufferedinputstream bufferedinputstream = new bufferedinputstream(inputstream);\n            fileoutputstream = new fileoutputstream("d://"+filename+".pdf");\n            bufferedoutputstream bufferedoutputstream = new bufferedoutputstream(fileoutputstream);\n\n            byte[] buf = new byte[4096];\n            int length = bufferedinputstream.read(buf);\n            while (-1 != length) {\n                bufferedoutputstream.write(buf, 0, length);\n                length = bufferedinputstream.read(buf);\n            }\n            bufferedinputstream.close();\n            bufferedoutputstream.close();\n        } catch (exception e) {\n            system.out.println("getfile error: " + e);\n        } finally {\n            if (null != urlconnection) {\n                urlconnection.disconnect();\n            }\n        }\n        string filepath = "d://"+filename+".pdf";\n        file f = new file("d://"+filename+".pdf");\n        if (!f.exists()) {\n            response.senderror(404, "file not found!");\n            return;\n        }\n        bufferedinputstream br = new bufferedinputstream(new fileinputstream(f));\n        byte[] bs = new byte[1024];\n        int len = 0;\n        response.reset(); // 非常重要\n        url u = new url("file:///" + filepath);\n        string contenttype = u.openconnection().getcontenttype();\n        response.setcontenttype(contenttype);\n        response.setheader("content-disposition", "inline;filename="\n                + filename + ".pdf");\n        // 文件名应该编码成utf-8，注意：使用时，我们可忽略这句\n        outputstream out = response.getoutputstream();\n        while ((len = br.read(bs)) > 0) {\n            out.write(bs, 0, len);\n        }\n        out.flush();\n        out.close();\n        br.close();\n    }\n\n    /**\n     * 调用第三方流接口， 将文件流返回前端预览\n     * @param request\n     * @param response\n     */\n    @requestmapping("test3")\n    public void test3(httpservletrequest request, httpservletresponse response) {\n        httpurlconnection urlconnection = null;\n        inputstream inputstream;\n        try {\n            url url = new url("http://localhost:8080/file/download");\n            urlconnection = (httpurlconnection) url.openconnection();\n            urlconnection.setrequestmethod("post");\n            urlconnection.setconnecttimeout(20000);\n            urlconnection.setdooutput(true);\n            urlconnection.setdoinput(true);\n            urlconnection.setusecaches(false);\n            urlconnection.setrequestproperty("content-type", "application/json; charset=" + charset);\n            urlconnection.connect();\n            inputstream = urlconnection.getinputstream();\n            bufferedinputstream bufferedinputstream = new bufferedinputstream(inputstream);\n            byte[] buf = new byte[4096];\n            int length = bufferedinputstream.read(buf);\n            servletoutputstream out = response.getoutputstream();\n            while (-1 != length) {\n                out.write(buf, 0,length);\n                length = bufferedinputstream.read(buf);\n            }\n            out.flush();\n            out.close();\n            bufferedinputstream.close();\n        } catch (exception e) {\n            system.out.println("getfile error: " + e);\n        } finally {\n            if (null != urlconnection) {\n                urlconnection.disconnect();\n            }\n        }\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702366094e3},{title:"前端实用",frontmatter:{},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%94%A8.html",relativePath:"zs-tool-小结/网址收藏/前端实用.md",key:"v-17b8acf5",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%94%A8.html",lastUpdated:"2024年1月26日星期五上午10点11分",lastUpdatedTimestamp:1706235081e3,headersStr:null,content:"# 前端实用\n\n国内静态文件公共库\n\n * BootCDN：https://www.bootcdn.cn/ 稳定、快速、免费的前端开源项目 CDN 加速服务，共收录了 3934 个前端开源项目\n\n * 七牛云存储开放静态文件CDN：http://www.staticfile.org/ 由七牛云提供包括 JS、CSS、image 和 swf 等静态文件的\n\n * 字节跳动静态资源库：http://cdn.bytedance.com/ 字节跳动静态资源库很齐全。\n\n * 腾讯网静态资源库：https://libs.qq.com/ 腾讯网静态资源库仅支持几个常用的静态资源（jquery、zepto等）\n\n * 新浪云计算CDN公共库：http://lib.sinaapp.com/\n\n * 又拍云JS库CDN服务：http://jscdn.upai.com/\n\n国外静态文件公共库\n\n * Google Hosted Libraries：https://developers.google.com/speed/libraries/\n   \n   Google出品，必属精品了，谷歌的公共CDN公共库应该是 最强大的了，像其中的前卫的各种代码类库和Google Web Font 字体库，但国内被墙\n\n * CDNJS：http://www.cdnjs.com/ cdnjs是一种免费和开源的CDN服务，超过10%的网站都使用他们的服务，由Cloudflare提供支持\n\n * Microsoft Ajax CDN：https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview 微软的静态文件公共库\n\n * jsDelivr：http://www.jsdelivr.com/ jsDelivr是基于MaxCDN的一个免费开源的 CDN 解决方案，支持npm, GitHub, WordPress, Deno等。每月处理超过800亿次请求。jsDelivr是唯一拥有国内颁发的有效ICP许可证的公共CDN，并直接拥有数百个网点。",normalizedContent:"# 前端实用\n\n国内静态文件公共库\n\n * bootcdn：https://www.bootcdn.cn/ 稳定、快速、免费的前端开源项目 cdn 加速服务，共收录了 3934 个前端开源项目\n\n * 七牛云存储开放静态文件cdn：http://www.staticfile.org/ 由七牛云提供包括 js、css、image 和 swf 等静态文件的\n\n * 字节跳动静态资源库：http://cdn.bytedance.com/ 字节跳动静态资源库很齐全。\n\n * 腾讯网静态资源库：https://libs.qq.com/ 腾讯网静态资源库仅支持几个常用的静态资源（jquery、zepto等）\n\n * 新浪云计算cdn公共库：http://lib.sinaapp.com/\n\n * 又拍云js库cdn服务：http://jscdn.upai.com/\n\n国外静态文件公共库\n\n * google hosted libraries：https://developers.google.com/speed/libraries/\n   \n   google出品，必属精品了，谷歌的公共cdn公共库应该是 最强大的了，像其中的前卫的各种代码类库和google web font 字体库，但国内被墙\n\n * cdnjs：http://www.cdnjs.com/ cdnjs是一种免费和开源的cdn服务，超过10%的网站都使用他们的服务，由cloudflare提供支持\n\n * microsoft ajax cdn：https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview 微软的静态文件公共库\n\n * jsdelivr：http://www.jsdelivr.com/ jsdelivr是基于maxcdn的一个免费开源的 cdn 解决方案，支持npm, github, wordpress, deno等。每月处理超过800亿次请求。jsdelivr是唯一拥有国内颁发的有效icp许可证的公共cdn，并直接拥有数百个网点。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706183331e3},{title:"实用网站",frontmatter:{},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99.html",relativePath:"zs-tool-小结/网址收藏/实用网站.md",key:"v-1e0b223e",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99.html",headers:[{level:2,title:"博客工具",slug:"博客工具",normalizedTitle:"博客工具",charIndex:11},{level:2,title:"优秀博客",slug:"优秀博客",normalizedTitle:"优秀博客",charIndex:64},{level:2,title:"图片工具",slug:"图片工具",normalizedTitle:"图片工具",charIndex:500},{level:2,title:"绘图工具",slug:"绘图工具",normalizedTitle:"绘图工具",charIndex:572},{level:2,title:"魔法上网工具",slug:"魔法上网工具",normalizedTitle:"魔法上网工具",charIndex:620},{level:2,title:"官网",slug:"官网",normalizedTitle:"官网",charIndex:710},{level:2,title:"检索类网站",slug:"检索类网站",normalizedTitle:"检索类网站",charIndex:1053},{level:3,title:"Linux命令",slug:"linux命令",normalizedTitle:"linux命令",charIndex:1063},{level:2,title:"项目博客",slug:"项目博客",normalizedTitle:"项目博客",charIndex:1124}],lastUpdated:"2024年1月25日星期四晚上7点48分",lastUpdatedTimestamp:1706183331e3,headersStr:"博客工具 优秀博客 图片工具 绘图工具 魔法上网工具 官网 检索类网站 Linux命令 项目博客",content:"# 实用网站\n\n\n# 博客工具\n\nhtml2md https://www.helloworld.net/html2md\n\n\n# 优秀博客\n\nvuepress案例\n\nhttps://github.com/zs-mcu/notes-vuepress\n\nhttps://www.sofineday.com/vuepress-comment.html#%E6%B3%A8%E5%86%8C-leancloud\n\nhttps://www.bajins.com/\n\nhttps://www.moyundong.com/\n\n代码块折叠 https://cloud.tencent.com/developer/article/2072502\n\nhttps://shields.io/badges)\n\nhttps://dtink.ink/index.php#/register?code=bnpFasnt)\n\nhttps://www.yuque.com/snab/mallchat)\n\nhttps://github.com/shanyuhai123/vuepress-plugin-auto-sidebar)\n\n\n# 图片工具\n\nfavicon网站 https://favicon.io/\n\n徽章生成 https://shields.io/badges\n\n\n# 绘图工具\n\nplantUML在线\n\nhttps://www.plantuml.com/\n\n\n# 魔法上网工具\n\nhttps://dtink.ink/index.php#/register?code=bnpFasnt\n\nhttps://clashgithub.com/\n\n\n# 官网\n\nvuepress官网 https://www.vuepress.cn/https://www.vuepress.cn/)\n\nruoyi官方文档\n\nhttps://doc.ruoyi.vip/\n\nvuepress-plugin-auto-sidebar\n\nhttps://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/\n\nhttps://github.com/shanyuhai123/vuepress-plugin-auto-sidebar\n\njdk下载\n\nhttps://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html\n\n\n# 检索类网站\n\n\n# Linux命令\n\nhttps://linux265.com/course/linux-commands.html\n\n\n# 项目博客\n\n少年阿斌 mallchat pgwc\n\nhttps://www.yuque.com/snab/mallchat",normalizedContent:"# 实用网站\n\n\n# 博客工具\n\nhtml2md https://www.helloworld.net/html2md\n\n\n# 优秀博客\n\nvuepress案例\n\nhttps://github.com/zs-mcu/notes-vuepress\n\nhttps://www.sofineday.com/vuepress-comment.html#%e6%b3%a8%e5%86%8c-leancloud\n\nhttps://www.bajins.com/\n\nhttps://www.moyundong.com/\n\n代码块折叠 https://cloud.tencent.com/developer/article/2072502\n\nhttps://shields.io/badges)\n\nhttps://dtink.ink/index.php#/register?code=bnpfasnt)\n\nhttps://www.yuque.com/snab/mallchat)\n\nhttps://github.com/shanyuhai123/vuepress-plugin-auto-sidebar)\n\n\n# 图片工具\n\nfavicon网站 https://favicon.io/\n\n徽章生成 https://shields.io/badges\n\n\n# 绘图工具\n\nplantuml在线\n\nhttps://www.plantuml.com/\n\n\n# 魔法上网工具\n\nhttps://dtink.ink/index.php#/register?code=bnpfasnt\n\nhttps://clashgithub.com/\n\n\n# 官网\n\nvuepress官网 https://www.vuepress.cn/https://www.vuepress.cn/)\n\nruoyi官方文档\n\nhttps://doc.ruoyi.vip/\n\nvuepress-plugin-auto-sidebar\n\nhttps://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/\n\nhttps://github.com/shanyuhai123/vuepress-plugin-auto-sidebar\n\njdk下载\n\nhttps://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html\n\n\n# 检索类网站\n\n\n# linux命令\n\nhttps://linux265.com/course/linux-commands.html\n\n\n# 项目博客\n\n少年阿斌 mallchat pgwc\n\nhttps://www.yuque.com/snab/mallchat",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705688374e3},{title:"需求来源",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%89%87-0.%E6%96%87%E7%AB%A0%E8%AF%B4%E6%98%8E.html",relativePath:"zs-tool-框架/java报表/POI--导出图片-0.文章说明.md",key:"v-3374ee87",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%89%87-0.%E6%96%87%E7%AB%A0%E8%AF%B4%E6%98%8E.html",headers:[{level:2,title:"需求来源",slug:"需求来源",normalizedTitle:"需求来源",charIndex:2},{level:2,title:"实现思路",slug:"实现思路",normalizedTitle:"实现思路",charIndex:141},{level:3,title:"思路3：java-robot",slug:"思路3-java-robot",normalizedTitle:"思路3：java-robot",charIndex:491},{level:3,title:"思路2：poi解析-java2d绘制",slug:"思路2-poi解析-java2d绘制",normalizedTitle:"思路2：poi解析-java2d绘制",charIndex:3768}],lastUpdated:"2024年2月5日星期一下午4点16分",lastUpdatedTimestamp:1707120968e3,headersStr:"需求来源 实现思路 思路3：java-robot 思路2：poi解析-java2d绘制",content:'# 需求来源\n\n> 需求诞生\n> \n> https://www.cnblogs.com/newflydd/p/4893414.html\n\n如题所示，先抛出一个问题，如何使用JAVA将Excel中的报表导出为图片格式？\n\n需求产生原因：将数据生成报表明天定时发送到指定微信上\n\n\n# 实现思路\n\n> https://www.cnblogs.com/newflydd/p/4899610.html\n\n思路1：将报表中的背景、边框等截图下来作为模型图片，需要定时更新的数据通过JDBC读取Oracle中的数据绘制到模型图片上\n\n思路2：不需要报表原型，生成Excel报表后，使用jxl或者poi一个单元一个单元读取报表内所有单元格，包括单元格的数据和格式，边框、宽度、高度、字体前景色、背景色都要读取出来，然后通过JAVA绘图，最终生成JPG格式的报表。\n\n思路3：比较奇葩，属于博主突发奇想的招式，通过WPS或者Office打开Excel，编写Robot机器人将鼠标移动到两个指定坐标所覆盖指定区域，Robot模拟敲击Ctrl+C，接着将剪贴板上的数据绘图，导出到JPG文件。\n\n\n# 思路3：java-robot\n\npackage com.newflypig.excel;\n\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.Robot;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.event.InputEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport javax.imageio.ImageIO;\n\npublic class OpenExcelDemo {\n\n    public static void main(String[] args) throws Exception {\n        openExcel("d:\\\\新增积分月报表.xlsx");\n\n        copyRectByPix(37, 207, 1215, 665); //给定两个坐标点的数据，圈定截图范围\n\n        createImageFileFromClip("d:/" + getTimeStr() + ".jpg");\n\n        closeExcel((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth() - 15, 12);    //需要模拟关闭事件，将Excel关闭，以便下次能正确打开报表    \n    }\n\n    private static void closeExcel(int i, int j) throws Exception {\n        Robot robot = new Robot();\n\n        robot.delay(500);\n        robot.mouseMove(i,j);\n        robot.delay(500);\n        robot.mousePress(InputEvent.BUTTON1_MASK);\n        robot.delay(500);\n        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n        robot.delay(500);\n        robot.keyPress(KeyEvent.VK_ENTER);\n    }\n\n    public static void openExcel(String dir) throws Exception {\n        Runtime.getRuntime().exec("cmd /k " + dir + "");\n    }\n\n    public static void copyRectByPix(int fromX, int fromY, int toX, int toY)\n            throws Exception {\n        Robot robot = new Robot();\n        robot.delay(3000); // 延时3000毫秒\n\n        robot.mouseMove(fromX, fromY);\n        robot.delay(500);\n        robot.mousePress(InputEvent.BUTTON1_MASK);\n        robot.delay(500);\n        robot.mouseMove(toX, toY);\n        robot.delay(500);\n        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n\n        robot.setAutoDelay(200);\n        robot.keyPress(KeyEvent.VK_CONTROL);\n        robot.keyPress(KeyEvent.VK_C);\n        robot.keyRelease(KeyEvent.VK_CONTROL);\n        robot.keyRelease(KeyEvent.VK_C);\n    }\n\n    public static void createImageFileFromClip(String dir) throws Exception {\n        Transferable t = Toolkit.getDefaultToolkit().getSystemClipboard()\n                .getContents(null);\n        if (null != t && t.isDataFlavorSupported(DataFlavor.imageFlavor)) {\n            Image image = (Image) t.getTransferData(DataFlavor.imageFlavor);\n            savePic(image, dir);\n        }\n    }\n\n    public static String savePic(Image iamge, String dir) throws Exception {\n        int w = iamge.getWidth(null);\n        int h = iamge.getHeight(null);\n\n        // 首先创建一个BufferedImage变量，因为ImageIO写图片用到了BufferedImage变量。\n        BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_3BYTE_BGR);\n\n        // 再创建一个Graphics变量，用来画出来要保持的图片，及上面传递过来的Image变量\n        Graphics g = bi.getGraphics();\n\n        g.drawImage(iamge, 0, 0, null);\n\n        // 将BufferedImage变量写入文件中。\n        ImageIO.write(bi, "jpg", new File(dir));\n        return dir;\n    }\n\n    public static String getTimeStr() {\n        String time = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());\n        return time;\n    }\n}\n\n\n试图使用这种方式将复杂的Excel报表转化成无差别的PNG图片\n\n但是这种方式遇到了严重的问题\n\n程序运行在服务器上，服务器大多数情况下需要远程桌面\n\n一旦远程桌面断开后，后台执行截图的程序只能截取到黑屏\n\n再次连接远程桌面后，又可以正常截图\n\n博主查看了好多现成的截图工具，都会出现这个情况\n\n远程桌面一旦断开，根本无法进行有效的后台截图\n\n\n# 思路2：poi解析-java2d绘制\n\n> https://www.cnblogs.com/newflydd/p/4912662.html\n\n这就是要使用Apache公司的POI工具，对整个excel进行解析\n\n将excel的每一个单元格，数据，格式，边框全都读取出来\n\n其中需要考虑到单元格的合并，行列的隐藏等等复杂的问题\n\n最终使用JAVA 2d将读取到的数据绘制到PNG图片上。\n\n第一张是Excel原样截图\n\n贴上源代码，其中涉及到使用POI读取单元格背景色，字体前景色等颜色操作，还是比较复杂的。\n\npackage com.newflyig.jpg;\n \n/**\n * width:pix=getColumnWidthInPixels*1.15\n * height:pix=getHeightInPoints*96/72\n *\n * 本示例用来读取Excel报表文件，并力图将报表无差别转化成PNG图片\n * 使用POI读取Excel各项数据\n * 使用JAVA 2D绘制PNG\n * TODO 本示例基本实现了常见Excel的所有样式输出，但Office2007以后的版本添加了条件样式功能，因为POI的API无法读取条件样式，所以无法实现\n * 今后可以通过关键字标注等方法，在Excel中需要加入条件样式的单元格用注解标明，使用JAVA计算得出样式再绘制出来\n */\n \nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.List;\n \nimport javax.imageio.ImageIO;\n \nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.ss.usermodel.CellStyle;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\nimport org.apache.poi.ss.util.CellRangeAddress;\nimport org.apache.poi.xssf.usermodel.XSSFFont;\n \nimport sun.awt.SunHints;\n \npublic class DrawFromExcel {\n \n    public static void main(String[] args) throws Exception {\n        // 给定两个初始值，标志出导出区域，两个行列组合的单元格\n        int[] fromIndex = { 0, 0 };\n        int[] toIndex = { 17, 20 };\n \n        int imageWidth = 0;\n        int imageHeight = 0;\n \n        Workbook wb = WorkbookFactory.create(new File("d:/2014年1月营销活动报表140116.xlsx"));\n        Sheet sheet = wb.getSheet("test");\n        List<CellRangeAddress> rangeAddress = sheet.getMergedRegions(); // 获取整个sheet中合并单元格组合的集合\n \n        // 首先做初步的边界检测，如果指定区域是不合法的则抛出异常\n        int rowSum = sheet.getPhysicalNumberOfRows();\n        int colSum = sheet.getRow(0).getPhysicalNumberOfCells();\n        if (fromIndex[0] > rowSum || fromIndex[0] > toIndex[0] || toIndex[0] > rowSum) {\n            throw new Exception("the rowIndex of the area is wrong!");\n        }\n        if (fromIndex[1] > colSum || fromIndex[1] > toIndex[1] || toIndex[1] > colSum) {\n            throw new Exception("the colIndex of the area is wrong!");\n        }\n \n        // 计算实际需要载入内存的二维Cell数组的大小，剔除隐藏行列\n        int rowSize = toIndex[0]+1;\n        int colSize = toIndex[1]+1;\n \n        // 遍历需要扫描的区域\n         \n        UserCell[][] cells = new UserCell[rowSize][colSize];\n        int[] rowPixPos = new int[rowSize + 1];\n        rowPixPos[0] = 0;\n        int[] colPixPos = new int[colSize + 1];\n        colPixPos[0] = 0;\n        for (int i = 0; i < rowSize; i++) {\n \n            for (int j = 0; j < colSize; j++) {\n \n                cells[i][j] = new UserCell();\n                cells[i][j].setCell(sheet.getRow(i).getCell(j));\n                cells[i][j].setRow(i);\n                cells[i][j].setCol(j);\n                boolean ifShow=(i>=fromIndex[0]) && (j>=fromIndex[1]);    //首先行列要在指定区域之间\n                ifShow=ifShow && !(sheet.isColumnHidden(j) || sheet.getRow(i).getZeroHeight()); //其次行列不可以隐藏\n                cells[i][j].setShow(ifShow);\n \n                // 计算所求区域宽度\n                float widthPix = !ifShow ? 0 : sheet.getColumnWidthInPixels(j); // 如果该单元格是隐藏的，则置宽度为0\n                if (i == fromIndex[0]) {\n                    imageWidth += widthPix;\n                }\n                 \n                colPixPos[j+1] = (int) (widthPix * 1.15 + colPixPos[j]);\n \n            }\n \n            // 计算所求区域高度\n            boolean ifShow=(i>=fromIndex[0]);    //行序列在指定区域中间\n            ifShow=ifShow && !sheet.getRow(i).getZeroHeight();  //行序列不能隐藏\n            float heightPoint = !ifShow ? 0 : sheet.getRow(i).getHeightInPoints(); // 如果该单元格是隐藏的，则置高度为0\n            imageHeight += heightPoint;        \n            rowPixPos[i+1] = (int) (heightPoint * 96 / 72) + rowPixPos[i];\n \n        }\n \n        imageHeight = imageHeight * 96 / 72;\n        imageWidth = imageWidth * 115 / 100;\n \n        wb.close();\n \n        List<Grid> grids = new ArrayList<Grid>();\n        for (int i = 0; i < rowSize; i++) {\n            for (int j = 0; j < colSize; j++) {\n                Grid grid = new Grid();\n                // 设置坐标和宽高\n                grid.setX(colPixPos[j]);\n                grid.setY(rowPixPos[i]);\n                grid.setWidth(colPixPos[j + 1] - colPixPos[j]);\n                grid.setHeight(rowPixPos[i + 1] - rowPixPos[i]);\n                grid.setRow(cells[i][j].getRow());\n                grid.setCol(cells[i][j].getCol());\n                grid.setShow(cells[i][j].isShow());\n \n                // 判断是否为合并单元格\n                int[] isInMergedStatus = isInMerged(grid.getRow(), grid.getCol(), rangeAddress);\n \n                if (isInMergedStatus[0] == 0 && isInMergedStatus[1] == 0) {\n                    // 此单元格是合并单元格，并且不是第一个单元格，需要跳过本次循环，不进行绘制\n                    continue;\n                } else if (isInMergedStatus[0] != -1 && isInMergedStatus[1] != -1) {\n                    // 此单元格是合并单元格，并且属于第一个单元格，则需要调整网格大小                 \n                    int lastRowPos=isInMergedStatus[0]>rowSize-1?rowSize-1:isInMergedStatus[0];\n                    int lastColPos=isInMergedStatus[1]>colSize-1?colSize-1:isInMergedStatus[1];                 \n                     \n                    grid.setWidth(colPixPos[lastColPos + 1] - colPixPos[j]);\n                    grid.setHeight(rowPixPos[lastRowPos + 1] - rowPixPos[i]);\n                     \n                     \n                }\n \n                // 单元格背景颜色\n                CellStyle cs = cells[i][j].getCell().getCellStyle();\n                if (cs.getFillPattern() == CellStyle.SOLID_FOREGROUND)\n                    grid.setBgColor(cells[i][j].getCell().getCellStyle().getFillForegroundColorColor());\n \n                // 设置字体\n                org.apache.poi.ss.usermodel.Font font = wb.getFontAt(cs.getFontIndex());\n                grid.setFont(font);\n \n                // 设置字体前景色\n                if (font instanceof XSSFFont) {\n                    XSSFFont xf = (XSSFFont) font;\n \n                    grid.setFtColor(xf.getXSSFColor());\n                }\n \n                // 设置文本\n                String strCell = "";\n                switch (cells[i][j].getCell().getCellType()) {\n                case HSSFCell.CELL_TYPE_NUMERIC:                                       \n                    strCell = String.valueOf(cells[i][j].getCell().getNumericCellValue());\n                    break;\n                case HSSFCell.CELL_TYPE_STRING:\n                    strCell = cells[i][j].getCell().getStringCellValue();\n                    break;\n                case HSSFCell.CELL_TYPE_BOOLEAN:\n                    strCell = String.valueOf(cells[i][j].getCell().getBooleanCellValue());\n                    break;\n                case HSSFCell.CELL_TYPE_FORMULA:\n                     \n                    try {\n                        strCell = String.valueOf(cells[i][j].getCell().getNumericCellValue());\n                    } catch (IllegalStateException e) {\n                        strCell = String.valueOf(cells[i][j].getCell().getRichStringCellValue());\n                    }\n                    break;\n                default:\n                    strCell = "";\n                }\n                 \n                if(cells[i][j].getCell().getCellStyle().getDataFormatString().contains("0.00%")){\n                    try{\n                        double dbCell=Double.valueOf(strCell);\n                        strCell=new DecimalFormat("#.00").format(dbCell*100)+"%";\n                    }catch(NumberFormatException e){}                  \n                }\n                                 \n                grid.setText(strCell.matches("\\\\w*\\\\.0") ? strCell.substring(0, strCell.length() - 2) : strCell);\n \n                grids.add(grid);\n            }\n        }\n \n        BufferedImage image = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_RGB);\n        Graphics2D g2d = image.createGraphics();\n        // 平滑字体\n        g2d.setRenderingHint(SunHints.KEY_ANTIALIASING, SunHints.VALUE_ANTIALIAS_OFF);\n        g2d.setRenderingHint(SunHints.KEY_TEXT_ANTIALIASING, SunHints.VALUE_TEXT_ANTIALIAS_DEFAULT);\n        g2d.setRenderingHint(SunHints.KEY_STROKE_CONTROL, SunHints.VALUE_STROKE_DEFAULT);\n        g2d.setRenderingHint(SunHints.KEY_TEXT_ANTIALIAS_LCD_CONTRAST, 140);\n        g2d.setRenderingHint(SunHints.KEY_FRACTIONALMETRICS, SunHints.VALUE_FRACTIONALMETRICS_OFF);\n        g2d.setRenderingHint(SunHints.KEY_RENDERING, SunHints.VALUE_RENDER_DEFAULT);\n \n        g2d.setColor(Color.white);\n        g2d.fillRect(0, 0, imageWidth, imageHeight);\n \n        // 绘制表格\n        for (Grid g : grids) {\n            if (!g.isShow())\n                continue;\n \n            // 绘制背景色\n            g2d.setColor(g.getBgColor() == null ? Color.white : g.getBgColor());\n            g2d.fillRect(g.getX(), g.getY(), g.getWidth(), g.getHeight());\n \n            // 绘制边框\n            g2d.setColor(Color.black);\n            g2d.setStroke(new BasicStroke(1));\n            g2d.drawRect(g.getX(), g.getY(), g.getWidth(), g.getHeight());\n \n            // 绘制文字,居中显示\n            g2d.setColor(g.getFtColor());\n            Font font = g.getFont();\n            FontMetrics fm = g2d.getFontMetrics(font);\n            int strWidth = fm.stringWidth(g.getText());// 获取将要绘制的文字宽度\n            g2d.setFont(font);\n            g2d.drawString(g.getText(),\n                    g.getX() + (g.getWidth() - strWidth) / 2,\n                    g.getY() + (g.getHeight() - font.getSize()) / 2 + font.getSize());\n        }\n \n        g2d.dispose();\n        ImageIO.write(image, "png", new File("d:/test.png"));\n         \n        System.out.println("Output to PNG file Success!");\n    }\n \n    /**\n     * 判断Excel中的单元格是否为合并单元格\n     *\n     * @param row\n     * @param col\n     * @param rangeAddress\n     * @return 如果不是合并单元格返回{-1,-1},如果是合并单元格并且是一个单元格返回{lastRow,lastCol},\n     *         如果是合并单元格并且不是第一个格子返回{0,0}\n     */\n    private static int[] isInMerged(int row, int col, List<CellRangeAddress> rangeAddress) {\n        int[] isInMergedStatus = { -1, -1 };\n        for (CellRangeAddress cra : rangeAddress) {\n            if (row == cra.getFirstRow() && col == cra.getFirstColumn()) {\n                isInMergedStatus[0] = cra.getLastRow();\n                isInMergedStatus[1] = cra.getLastColumn();\n                return isInMergedStatus;\n            }\n            if (row >= cra.getFirstRow() && row <= cra.getLastRow()) {\n                if (col >= cra.getFirstColumn() && col <= cra.getLastColumn()) {\n                    isInMergedStatus[0] = 0;\n                    isInMergedStatus[1] = 0;\n                    return isInMergedStatus;\n                }\n            }\n        }\n        return isInMergedStatus;\n    }\n}\n',normalizedContent:'# 需求来源\n\n> 需求诞生\n> \n> https://www.cnblogs.com/newflydd/p/4893414.html\n\n如题所示，先抛出一个问题，如何使用java将excel中的报表导出为图片格式？\n\n需求产生原因：将数据生成报表明天定时发送到指定微信上\n\n\n# 实现思路\n\n> https://www.cnblogs.com/newflydd/p/4899610.html\n\n思路1：将报表中的背景、边框等截图下来作为模型图片，需要定时更新的数据通过jdbc读取oracle中的数据绘制到模型图片上\n\n思路2：不需要报表原型，生成excel报表后，使用jxl或者poi一个单元一个单元读取报表内所有单元格，包括单元格的数据和格式，边框、宽度、高度、字体前景色、背景色都要读取出来，然后通过java绘图，最终生成jpg格式的报表。\n\n思路3：比较奇葩，属于博主突发奇想的招式，通过wps或者office打开excel，编写robot机器人将鼠标移动到两个指定坐标所覆盖指定区域，robot模拟敲击ctrl+c，接着将剪贴板上的数据绘图，导出到jpg文件。\n\n\n# 思路3：java-robot\n\npackage com.newflypig.excel;\n\nimport java.awt.graphics;\nimport java.awt.image;\nimport java.awt.robot;\nimport java.awt.toolkit;\nimport java.awt.datatransfer.dataflavor;\nimport java.awt.datatransfer.transferable;\nimport java.awt.event.inputevent;\nimport java.awt.event.keyevent;\nimport java.awt.image.bufferedimage;\nimport java.io.file;\nimport java.text.simpledateformat;\nimport java.util.date;\n\nimport javax.imageio.imageio;\n\npublic class openexceldemo {\n\n    public static void main(string[] args) throws exception {\n        openexcel("d:\\\\新增积分月报表.xlsx");\n\n        copyrectbypix(37, 207, 1215, 665); //给定两个坐标点的数据，圈定截图范围\n\n        createimagefilefromclip("d:/" + gettimestr() + ".jpg");\n\n        closeexcel((int)toolkit.getdefaulttoolkit().getscreensize().getwidth() - 15, 12);    //需要模拟关闭事件，将excel关闭，以便下次能正确打开报表    \n    }\n\n    private static void closeexcel(int i, int j) throws exception {\n        robot robot = new robot();\n\n        robot.delay(500);\n        robot.mousemove(i,j);\n        robot.delay(500);\n        robot.mousepress(inputevent.button1_mask);\n        robot.delay(500);\n        robot.mouserelease(inputevent.button1_mask);\n        robot.delay(500);\n        robot.keypress(keyevent.vk_enter);\n    }\n\n    public static void openexcel(string dir) throws exception {\n        runtime.getruntime().exec("cmd /k " + dir + "");\n    }\n\n    public static void copyrectbypix(int fromx, int fromy, int tox, int toy)\n            throws exception {\n        robot robot = new robot();\n        robot.delay(3000); // 延时3000毫秒\n\n        robot.mousemove(fromx, fromy);\n        robot.delay(500);\n        robot.mousepress(inputevent.button1_mask);\n        robot.delay(500);\n        robot.mousemove(tox, toy);\n        robot.delay(500);\n        robot.mouserelease(inputevent.button1_mask);\n\n        robot.setautodelay(200);\n        robot.keypress(keyevent.vk_control);\n        robot.keypress(keyevent.vk_c);\n        robot.keyrelease(keyevent.vk_control);\n        robot.keyrelease(keyevent.vk_c);\n    }\n\n    public static void createimagefilefromclip(string dir) throws exception {\n        transferable t = toolkit.getdefaulttoolkit().getsystemclipboard()\n                .getcontents(null);\n        if (null != t && t.isdataflavorsupported(dataflavor.imageflavor)) {\n            image image = (image) t.gettransferdata(dataflavor.imageflavor);\n            savepic(image, dir);\n        }\n    }\n\n    public static string savepic(image iamge, string dir) throws exception {\n        int w = iamge.getwidth(null);\n        int h = iamge.getheight(null);\n\n        // 首先创建一个bufferedimage变量，因为imageio写图片用到了bufferedimage变量。\n        bufferedimage bi = new bufferedimage(w, h, bufferedimage.type_3byte_bgr);\n\n        // 再创建一个graphics变量，用来画出来要保持的图片，及上面传递过来的image变量\n        graphics g = bi.getgraphics();\n\n        g.drawimage(iamge, 0, 0, null);\n\n        // 将bufferedimage变量写入文件中。\n        imageio.write(bi, "jpg", new file(dir));\n        return dir;\n    }\n\n    public static string gettimestr() {\n        string time = new simpledateformat("yyyymmddhhmmss").format(new date());\n        return time;\n    }\n}\n\n\n试图使用这种方式将复杂的excel报表转化成无差别的png图片\n\n但是这种方式遇到了严重的问题\n\n程序运行在服务器上，服务器大多数情况下需要远程桌面\n\n一旦远程桌面断开后，后台执行截图的程序只能截取到黑屏\n\n再次连接远程桌面后，又可以正常截图\n\n博主查看了好多现成的截图工具，都会出现这个情况\n\n远程桌面一旦断开，根本无法进行有效的后台截图\n\n\n# 思路2：poi解析-java2d绘制\n\n> https://www.cnblogs.com/newflydd/p/4912662.html\n\n这就是要使用apache公司的poi工具，对整个excel进行解析\n\n将excel的每一个单元格，数据，格式，边框全都读取出来\n\n其中需要考虑到单元格的合并，行列的隐藏等等复杂的问题\n\n最终使用java 2d将读取到的数据绘制到png图片上。\n\n第一张是excel原样截图\n\n贴上源代码，其中涉及到使用poi读取单元格背景色，字体前景色等颜色操作，还是比较复杂的。\n\npackage com.newflyig.jpg;\n \n/**\n * width:pix=getcolumnwidthinpixels*1.15\n * height:pix=getheightinpoints*96/72\n *\n * 本示例用来读取excel报表文件，并力图将报表无差别转化成png图片\n * 使用poi读取excel各项数据\n * 使用java 2d绘制png\n * todo 本示例基本实现了常见excel的所有样式输出，但office2007以后的版本添加了条件样式功能，因为poi的api无法读取条件样式，所以无法实现\n * 今后可以通过关键字标注等方法，在excel中需要加入条件样式的单元格用注解标明，使用java计算得出样式再绘制出来\n */\n \nimport java.awt.basicstroke;\nimport java.awt.color;\nimport java.awt.font;\nimport java.awt.fontmetrics;\nimport java.awt.graphics2d;\nimport java.awt.image.bufferedimage;\nimport java.io.file;\nimport java.text.decimalformat;\nimport java.util.arraylist;\nimport java.util.list;\n \nimport javax.imageio.imageio;\n \nimport org.apache.poi.hssf.usermodel.hssfcell;\nimport org.apache.poi.ss.usermodel.cellstyle;\nimport org.apache.poi.ss.usermodel.sheet;\nimport org.apache.poi.ss.usermodel.workbook;\nimport org.apache.poi.ss.usermodel.workbookfactory;\nimport org.apache.poi.ss.util.cellrangeaddress;\nimport org.apache.poi.xssf.usermodel.xssffont;\n \nimport sun.awt.sunhints;\n \npublic class drawfromexcel {\n \n    public static void main(string[] args) throws exception {\n        // 给定两个初始值，标志出导出区域，两个行列组合的单元格\n        int[] fromindex = { 0, 0 };\n        int[] toindex = { 17, 20 };\n \n        int imagewidth = 0;\n        int imageheight = 0;\n \n        workbook wb = workbookfactory.create(new file("d:/2014年1月营销活动报表140116.xlsx"));\n        sheet sheet = wb.getsheet("test");\n        list<cellrangeaddress> rangeaddress = sheet.getmergedregions(); // 获取整个sheet中合并单元格组合的集合\n \n        // 首先做初步的边界检测，如果指定区域是不合法的则抛出异常\n        int rowsum = sheet.getphysicalnumberofrows();\n        int colsum = sheet.getrow(0).getphysicalnumberofcells();\n        if (fromindex[0] > rowsum || fromindex[0] > toindex[0] || toindex[0] > rowsum) {\n            throw new exception("the rowindex of the area is wrong!");\n        }\n        if (fromindex[1] > colsum || fromindex[1] > toindex[1] || toindex[1] > colsum) {\n            throw new exception("the colindex of the area is wrong!");\n        }\n \n        // 计算实际需要载入内存的二维cell数组的大小，剔除隐藏行列\n        int rowsize = toindex[0]+1;\n        int colsize = toindex[1]+1;\n \n        // 遍历需要扫描的区域\n         \n        usercell[][] cells = new usercell[rowsize][colsize];\n        int[] rowpixpos = new int[rowsize + 1];\n        rowpixpos[0] = 0;\n        int[] colpixpos = new int[colsize + 1];\n        colpixpos[0] = 0;\n        for (int i = 0; i < rowsize; i++) {\n \n            for (int j = 0; j < colsize; j++) {\n \n                cells[i][j] = new usercell();\n                cells[i][j].setcell(sheet.getrow(i).getcell(j));\n                cells[i][j].setrow(i);\n                cells[i][j].setcol(j);\n                boolean ifshow=(i>=fromindex[0]) && (j>=fromindex[1]);    //首先行列要在指定区域之间\n                ifshow=ifshow && !(sheet.iscolumnhidden(j) || sheet.getrow(i).getzeroheight()); //其次行列不可以隐藏\n                cells[i][j].setshow(ifshow);\n \n                // 计算所求区域宽度\n                float widthpix = !ifshow ? 0 : sheet.getcolumnwidthinpixels(j); // 如果该单元格是隐藏的，则置宽度为0\n                if (i == fromindex[0]) {\n                    imagewidth += widthpix;\n                }\n                 \n                colpixpos[j+1] = (int) (widthpix * 1.15 + colpixpos[j]);\n \n            }\n \n            // 计算所求区域高度\n            boolean ifshow=(i>=fromindex[0]);    //行序列在指定区域中间\n            ifshow=ifshow && !sheet.getrow(i).getzeroheight();  //行序列不能隐藏\n            float heightpoint = !ifshow ? 0 : sheet.getrow(i).getheightinpoints(); // 如果该单元格是隐藏的，则置高度为0\n            imageheight += heightpoint;        \n            rowpixpos[i+1] = (int) (heightpoint * 96 / 72) + rowpixpos[i];\n \n        }\n \n        imageheight = imageheight * 96 / 72;\n        imagewidth = imagewidth * 115 / 100;\n \n        wb.close();\n \n        list<grid> grids = new arraylist<grid>();\n        for (int i = 0; i < rowsize; i++) {\n            for (int j = 0; j < colsize; j++) {\n                grid grid = new grid();\n                // 设置坐标和宽高\n                grid.setx(colpixpos[j]);\n                grid.sety(rowpixpos[i]);\n                grid.setwidth(colpixpos[j + 1] - colpixpos[j]);\n                grid.setheight(rowpixpos[i + 1] - rowpixpos[i]);\n                grid.setrow(cells[i][j].getrow());\n                grid.setcol(cells[i][j].getcol());\n                grid.setshow(cells[i][j].isshow());\n \n                // 判断是否为合并单元格\n                int[] isinmergedstatus = isinmerged(grid.getrow(), grid.getcol(), rangeaddress);\n \n                if (isinmergedstatus[0] == 0 && isinmergedstatus[1] == 0) {\n                    // 此单元格是合并单元格，并且不是第一个单元格，需要跳过本次循环，不进行绘制\n                    continue;\n                } else if (isinmergedstatus[0] != -1 && isinmergedstatus[1] != -1) {\n                    // 此单元格是合并单元格，并且属于第一个单元格，则需要调整网格大小                 \n                    int lastrowpos=isinmergedstatus[0]>rowsize-1?rowsize-1:isinmergedstatus[0];\n                    int lastcolpos=isinmergedstatus[1]>colsize-1?colsize-1:isinmergedstatus[1];                 \n                     \n                    grid.setwidth(colpixpos[lastcolpos + 1] - colpixpos[j]);\n                    grid.setheight(rowpixpos[lastrowpos + 1] - rowpixpos[i]);\n                     \n                     \n                }\n \n                // 单元格背景颜色\n                cellstyle cs = cells[i][j].getcell().getcellstyle();\n                if (cs.getfillpattern() == cellstyle.solid_foreground)\n                    grid.setbgcolor(cells[i][j].getcell().getcellstyle().getfillforegroundcolorcolor());\n \n                // 设置字体\n                org.apache.poi.ss.usermodel.font font = wb.getfontat(cs.getfontindex());\n                grid.setfont(font);\n \n                // 设置字体前景色\n                if (font instanceof xssffont) {\n                    xssffont xf = (xssffont) font;\n \n                    grid.setftcolor(xf.getxssfcolor());\n                }\n \n                // 设置文本\n                string strcell = "";\n                switch (cells[i][j].getcell().getcelltype()) {\n                case hssfcell.cell_type_numeric:                                       \n                    strcell = string.valueof(cells[i][j].getcell().getnumericcellvalue());\n                    break;\n                case hssfcell.cell_type_string:\n                    strcell = cells[i][j].getcell().getstringcellvalue();\n                    break;\n                case hssfcell.cell_type_boolean:\n                    strcell = string.valueof(cells[i][j].getcell().getbooleancellvalue());\n                    break;\n                case hssfcell.cell_type_formula:\n                     \n                    try {\n                        strcell = string.valueof(cells[i][j].getcell().getnumericcellvalue());\n                    } catch (illegalstateexception e) {\n                        strcell = string.valueof(cells[i][j].getcell().getrichstringcellvalue());\n                    }\n                    break;\n                default:\n                    strcell = "";\n                }\n                 \n                if(cells[i][j].getcell().getcellstyle().getdataformatstring().contains("0.00%")){\n                    try{\n                        double dbcell=double.valueof(strcell);\n                        strcell=new decimalformat("#.00").format(dbcell*100)+"%";\n                    }catch(numberformatexception e){}                  \n                }\n                                 \n                grid.settext(strcell.matches("\\\\w*\\\\.0") ? strcell.substring(0, strcell.length() - 2) : strcell);\n \n                grids.add(grid);\n            }\n        }\n \n        bufferedimage image = new bufferedimage(imagewidth, imageheight, bufferedimage.type_int_rgb);\n        graphics2d g2d = image.creategraphics();\n        // 平滑字体\n        g2d.setrenderinghint(sunhints.key_antialiasing, sunhints.value_antialias_off);\n        g2d.setrenderinghint(sunhints.key_text_antialiasing, sunhints.value_text_antialias_default);\n        g2d.setrenderinghint(sunhints.key_stroke_control, sunhints.value_stroke_default);\n        g2d.setrenderinghint(sunhints.key_text_antialias_lcd_contrast, 140);\n        g2d.setrenderinghint(sunhints.key_fractionalmetrics, sunhints.value_fractionalmetrics_off);\n        g2d.setrenderinghint(sunhints.key_rendering, sunhints.value_render_default);\n \n        g2d.setcolor(color.white);\n        g2d.fillrect(0, 0, imagewidth, imageheight);\n \n        // 绘制表格\n        for (grid g : grids) {\n            if (!g.isshow())\n                continue;\n \n            // 绘制背景色\n            g2d.setcolor(g.getbgcolor() == null ? color.white : g.getbgcolor());\n            g2d.fillrect(g.getx(), g.gety(), g.getwidth(), g.getheight());\n \n            // 绘制边框\n            g2d.setcolor(color.black);\n            g2d.setstroke(new basicstroke(1));\n            g2d.drawrect(g.getx(), g.gety(), g.getwidth(), g.getheight());\n \n            // 绘制文字,居中显示\n            g2d.setcolor(g.getftcolor());\n            font font = g.getfont();\n            fontmetrics fm = g2d.getfontmetrics(font);\n            int strwidth = fm.stringwidth(g.gettext());// 获取将要绘制的文字宽度\n            g2d.setfont(font);\n            g2d.drawstring(g.gettext(),\n                    g.getx() + (g.getwidth() - strwidth) / 2,\n                    g.gety() + (g.getheight() - font.getsize()) / 2 + font.getsize());\n        }\n \n        g2d.dispose();\n        imageio.write(image, "png", new file("d:/test.png"));\n         \n        system.out.println("output to png file success!");\n    }\n \n    /**\n     * 判断excel中的单元格是否为合并单元格\n     *\n     * @param row\n     * @param col\n     * @param rangeaddress\n     * @return 如果不是合并单元格返回{-1,-1},如果是合并单元格并且是一个单元格返回{lastrow,lastcol},\n     *         如果是合并单元格并且不是第一个格子返回{0,0}\n     */\n    private static int[] isinmerged(int row, int col, list<cellrangeaddress> rangeaddress) {\n        int[] isinmergedstatus = { -1, -1 };\n        for (cellrangeaddress cra : rangeaddress) {\n            if (row == cra.getfirstrow() && col == cra.getfirstcolumn()) {\n                isinmergedstatus[0] = cra.getlastrow();\n                isinmergedstatus[1] = cra.getlastcolumn();\n                return isinmergedstatus;\n            }\n            if (row >= cra.getfirstrow() && row <= cra.getlastrow()) {\n                if (col >= cra.getfirstcolumn() && col <= cra.getlastcolumn()) {\n                    isinmergedstatus[0] = 0;\n                    isinmergedstatus[1] = 0;\n                    return isinmergedstatus;\n                }\n            }\n        }\n        return isinmergedstatus;\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1707120968e3},{title:"JXL--0.了解",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/JXL--0.%E4%BA%86%E8%A7%A3.html",relativePath:"zs-tool-框架/java报表/JXL--0.了解.md",key:"v-9b9ae1c6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/JXL--0.%E4%BA%86%E8%A7%A3.html",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:16},{level:2,title:"入门使用",slug:"入门使用",normalizedTitle:"入门使用",charIndex:702},{level:3,title:"导出Excel",slug:"导出excel",normalizedTitle:"导出excel",charIndex:711}],lastUpdated:"2024年2月2日星期五凌晨1点05分",lastUpdatedTimestamp:1706807119e3,headersStr:"简介 入门使用 导出Excel",content:'# JXL--0.了解\n\n\n# 简介\n\n官网\n\nhttps://jexcelapi.sourceforge.net/\n\n\n\nJava Excel API - 用于读取、写入和修改 Excel 电子表格的 Java API\n\nJava Excel API 是一个成熟的开源 Java API，使开发人员能够动态读取、写入和修改 Excel 电子表格。现在，Java 开发人员可以读取 Excel 电子表格，使用方便且简单的 API 对其进行修改，并将更改写入任何输出流（例如磁盘、HTTP、数据库或任何套接字）。\n\n任何可以运行 Java 虚拟机的操作系统（即不仅仅是 Windows）都可以处理和提供 Excel 电子表格。因为它是 Java，所以可以从 servlet 内调用 API，从而可以通过 Internet 和 Intranet Web 应用程序访问 Excel 电子表格。\n\n一些特点\n\n从 Excel 95、97、2000、XP 和 2003工作簿读取数据\n\n读取和写入公式（仅限 Excel 97 及更高版本）\n\n生成 Excel 2000 格式的电子表格\n\n支持字体、数字和日期格式\n\n支持单元格的底纹、边框和着色\n\n修改现有工作表\n\n是国际化的，可以在几乎任何区域设置、国家/地区、语言或字符编码中进行处理（目前仅支持英语、法语、西班牙语和德语的公式，但如果翻译的话可以添加更多内容）\n\n支持图表复制\n\n支持将图像插入和复制到电子表格中\n\n支持使用 Jakarta Commons Logging、log4j、JDK 1.4 Logger 等进行日志记录\n\n...以及更多\n\n\n# 入门使用\n\n\n# 导出Excel\n\n包                                版本\nspring-boot-starter-parent       2.3.12.RELEASE\njxl                              2.6.12\npagehelper-spring-boot-starter   1.3.1\nmapper-spring-boot-starter       2.1.5\nmybatis-spring-boot-starter      2.2.0\n\n\npublic void downLoadXlsByJxl(HttpServletResponse response) throws Exception {\n    //   编号 姓名 手机号 入职日期 现住址\n    ServletOutputStream outputStream = response.getOutputStream();\n    //创建了一个全新的工作薄\n    WritableWorkbook workbook = Workbook.createWorkbook(outputStream);\n    //创建了一个工作表\n    WritableSheet sheet = workbook.createSheet("一个JXL入门", 0);\n\n    //调整列宽\n    sheet.setColumnView(0,5); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setColumnView(1,8); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setColumnView(2,15); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setColumnView(3,15); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setColumnView(4,30); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n\n    //处理标题开始\n    String[] titles = new String[]{"编号","姓名","手机号","入职日期","现住址"};\n    Label label = null;\n    for (int i = 0; i < titles.length; i++) {\n        label = new Label(i,0,titles[i]); //列脚标, 行脚标, 单元格中的内容\n        sheet.addCell(label);\n    }\n    //处理标题结束\n\n    //查询所有用户的数据\n    List<User> userList = userMapper.selectAll();\n    int rowIndex = 1;\n    for (User user : userList) {\n        label = new Label(0,rowIndex,user.getId().toString()); //列脚标, 行脚标, 单元格中的内容 编号\n        sheet.addCell(label);\n\n        label = new Label(1,rowIndex,user.getUserName()); //列脚标, 行脚标, 单元格中的内容 姓名\n        sheet.addCell(label);\n\n        label = new Label(2,rowIndex,user.getPhone()); //列脚标, 行脚标, 单元格中的内容 手机号\n        sheet.addCell(label);\n\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");\n        label = new Label(3,rowIndex,simpleDateFormat.format( user.getHireDate())); //列脚标, 行脚标, 单元格中的内容 入职日期\n        sheet.addCell(label);\n\n        label = new Label(4,rowIndex,user.getAddress()); //列脚标, 行脚标, 单元格中的内容 现住址\n        sheet.addCell(label);\n        rowIndex++;\n    }\n    //文件的导出 一个流（outputStream）两个头（文件的打开方式 in-line attachment，文件的下载时mime类型） application/vnd.ms-excel\n    String filename="一个JXL入门.xls";\n    response.setHeader("content-disposition","attachment;filename="+ new String(filename.getBytes(),"ISO8859-1"));\n    response.setContentType("application/vnd.ms-excel");\n    workbook.write();\n    workbook.close();\n    outputStream.close();\n}\n\n\n\n\n',normalizedContent:'# jxl--0.了解\n\n\n# 简介\n\n官网\n\nhttps://jexcelapi.sourceforge.net/\n\n\n\njava excel api - 用于读取、写入和修改 excel 电子表格的 java api\n\njava excel api 是一个成熟的开源 java api，使开发人员能够动态读取、写入和修改 excel 电子表格。现在，java 开发人员可以读取 excel 电子表格，使用方便且简单的 api 对其进行修改，并将更改写入任何输出流（例如磁盘、http、数据库或任何套接字）。\n\n任何可以运行 java 虚拟机的操作系统（即不仅仅是 windows）都可以处理和提供 excel 电子表格。因为它是 java，所以可以从 servlet 内调用 api，从而可以通过 internet 和 intranet web 应用程序访问 excel 电子表格。\n\n一些特点\n\n从 excel 95、97、2000、xp 和 2003工作簿读取数据\n\n读取和写入公式（仅限 excel 97 及更高版本）\n\n生成 excel 2000 格式的电子表格\n\n支持字体、数字和日期格式\n\n支持单元格的底纹、边框和着色\n\n修改现有工作表\n\n是国际化的，可以在几乎任何区域设置、国家/地区、语言或字符编码中进行处理（目前仅支持英语、法语、西班牙语和德语的公式，但如果翻译的话可以添加更多内容）\n\n支持图表复制\n\n支持将图像插入和复制到电子表格中\n\n支持使用 jakarta commons logging、log4j、jdk 1.4 logger 等进行日志记录\n\n...以及更多\n\n\n# 入门使用\n\n\n# 导出excel\n\n包                                版本\nspring-boot-starter-parent       2.3.12.release\njxl                              2.6.12\npagehelper-spring-boot-starter   1.3.1\nmapper-spring-boot-starter       2.1.5\nmybatis-spring-boot-starter      2.2.0\n\n\npublic void downloadxlsbyjxl(httpservletresponse response) throws exception {\n    //   编号 姓名 手机号 入职日期 现住址\n    servletoutputstream outputstream = response.getoutputstream();\n    //创建了一个全新的工作薄\n    writableworkbook workbook = workbook.createworkbook(outputstream);\n    //创建了一个工作表\n    writablesheet sheet = workbook.createsheet("一个jxl入门", 0);\n\n    //调整列宽\n    sheet.setcolumnview(0,5); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setcolumnview(1,8); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setcolumnview(2,15); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setcolumnview(3,15); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n    sheet.setcolumnview(4,30); //  第一个参数：列的索引值  第二个参数：1代表一个标准字母的宽度\n\n    //处理标题开始\n    string[] titles = new string[]{"编号","姓名","手机号","入职日期","现住址"};\n    label label = null;\n    for (int i = 0; i < titles.length; i++) {\n        label = new label(i,0,titles[i]); //列脚标, 行脚标, 单元格中的内容\n        sheet.addcell(label);\n    }\n    //处理标题结束\n\n    //查询所有用户的数据\n    list<user> userlist = usermapper.selectall();\n    int rowindex = 1;\n    for (user user : userlist) {\n        label = new label(0,rowindex,user.getid().tostring()); //列脚标, 行脚标, 单元格中的内容 编号\n        sheet.addcell(label);\n\n        label = new label(1,rowindex,user.getusername()); //列脚标, 行脚标, 单元格中的内容 姓名\n        sheet.addcell(label);\n\n        label = new label(2,rowindex,user.getphone()); //列脚标, 行脚标, 单元格中的内容 手机号\n        sheet.addcell(label);\n\n        simpledateformat simpledateformat = new simpledateformat("yyyy-mm-dd");\n        label = new label(3,rowindex,simpledateformat.format( user.gethiredate())); //列脚标, 行脚标, 单元格中的内容 入职日期\n        sheet.addcell(label);\n\n        label = new label(4,rowindex,user.getaddress()); //列脚标, 行脚标, 单元格中的内容 现住址\n        sheet.addcell(label);\n        rowindex++;\n    }\n    //文件的导出 一个流（outputstream）两个头（文件的打开方式 in-line attachment，文件的下载时mime类型） application/vnd.ms-excel\n    string filename="一个jxl入门.xls";\n    response.setheader("content-disposition","attachment;filename="+ new string(filename.getbytes(),"iso8859-1"));\n    response.setcontenttype("application/vnd.ms-excel");\n    workbook.write();\n    workbook.close();\n    outputstream.close();\n}\n\n\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706807119e3},{title:"POI--1.基础api",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--1.%E5%9F%BA%E7%A1%80api.html",relativePath:"zs-tool-框架/java报表/POI--1.基础api.md",key:"v-6b64c32f",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--1.%E5%9F%BA%E7%A1%80api.html",headers:[{level:2,title:"POI操作Excel高低版本区别",slug:"poi操作excel高低版本区别",normalizedTitle:"poi操作excel高低版本区别",charIndex:434},{level:2,title:"创建Excel",slug:"创建excel",normalizedTitle:"创建excel",charIndex:717},{level:2,title:"读取Excel",slug:"读取excel",normalizedTitle:"读取excel",charIndex:2423},{level:3,title:"需求",slug:"需求",normalizedTitle:"需求",charIndex:2435},{level:3,title:"思路",slug:"思路",normalizedTitle:"思路",charIndex:2518},{level:3,title:"代码实现",slug:"代码实现",normalizedTitle:"代码实现",charIndex:2747},{level:2,title:"导出Excel",slug:"导出excel",normalizedTitle:"导出excel",charIndex:4819},{level:3,title:"导出xlsx",slug:"导出xlsx",normalizedTitle:"导出xlsx",charIndex:4952},{level:2,title:"单位",slug:"单位",normalizedTitle:"单位",charIndex:6957},{level:2,title:"样式设置",slug:"样式设置",normalizedTitle:"样式设置",charIndex:8631},{level:3,title:"框线",slug:"框线",normalizedTitle:"框线",charIndex:8640},{level:3,title:"合并单元格",slug:"合并单元格",normalizedTitle:"合并单元格",charIndex:9214},{level:3,title:"设置行高",slug:"设置行高",normalizedTitle:"设置行高",charIndex:9320},{level:3,title:"设置列宽",slug:"设置列宽",normalizedTitle:"设置列宽",charIndex:5424},{level:3,title:"自动换行",slug:"自动换行",normalizedTitle:"自动换行",charIndex:9337},{level:3,title:"锁住单元格",slug:"锁住单元格",normalizedTitle:"锁住单元格",charIndex:13517},{level:3,title:"对齐方式和字体",slug:"对齐方式和字体",normalizedTitle:"对齐方式和字体",charIndex:14613},{level:2,title:"案例展示",slug:"案例展示",normalizedTitle:"案例展示",charIndex:15155},{level:3,title:"导出带样式的Excel",slug:"导出带样式的excel",normalizedTitle:"导出带样式的excel",charIndex:15164}],lastUpdated:"2024年2月2日星期五凌晨1点05分",lastUpdatedTimestamp:1706807119e3,headersStr:"POI操作Excel高低版本区别 创建Excel 读取Excel 需求 思路 代码实现 导出Excel 导出xlsx 单位 样式设置 框线 合并单元格 设置行高 设置列宽 自动换行 锁住单元格 对齐方式和字体 案例展示 导出带样式的Excel",content:'# POI--1.基础api\n\n添加所需的依赖：\n\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi</artifactId>\n    <version>4.0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi-ooxml</artifactId>\n    <version>4.0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi-ooxml-schemas</artifactId>\n    <version>4.0.1</version>\n</dependency>\n\n\n\n# POI操作Excel高低版本区别\n\n在POI包中有如下几个主要对象和excel的几个对象对应：\n\n对应EXCEL名称   低版本中的类名         高版本中的类名\n工作簿         HSSFWorkbook    XSSFWorkbook\n工作表         HSSFSheet       XSSFSheet\n行           HSSFRow         XSSFRow\n单元格         HSSFCell        XSSFCell\n单元格样式       HSSFCellStyle   XSSFCellStyle\n\n\n# 创建Excel\n\n入门案例代码：创建一个新的工作薄，里面随便写一句话\n\n操作低版本：\n\npackage com.itheima.demo;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport java.io.FileOutputStream;\npublic class POIDemo01 {\n    public static void main(String[] args) throws Exception{\n        //创建了一个全新（里面什么都没有）的工作薄\n        Workbook workbook = new HSSFWorkbook(); \n        //创建了一个全新（里面什么都没有）的工作表\n        Sheet sheet = workbook.createSheet("demo测试");  \n        //创建了第一行（空的）\n        Row row = sheet.createRow(0);\n        //创建的是第一行的第一个单元格\n        Cell cell = row.createCell(0);\n        //写入数据\n        cell.setCellValue("这是我第一次玩POI");\n//        把工作薄输出到本地磁盘\n        workbook.write(new FileOutputStream("d://test.xls"));\n    }\n}\n\n\n\n操作高版本：\n\npackage com.itheima.demo;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\nimport java.io.FileOutputStream;\n \npublic class POIDemo02 {\n    public static void main(String[] args) throws Exception{\n        Workbook workbook = new XSSFWorkbook(); //创建了一个全新（里面什么都没有）的工作薄\n        Sheet sheet = workbook.createSheet("demo测试");  //创建了一个全新（里面什么都没有）的工作表\n        Row row = sheet.createRow(0);  //创建了第一行（空的）\n        Cell cell = row.createCell(0);//创建的是第一行的第一个单元格\n        cell.setCellValue("这是我第一次玩POI");\n//        把工作薄输出到本地磁盘\n        workbook.write(new FileOutputStream("d://test.xlsx"));\n    }\n}\n\n\n\n比较上面两个代码会发现，在开发中只是类的名称不一样，方法是一样的。\n\n\n# 读取Excel\n\n\n# 需求\n\n把资料中的《用户导入测试数据.xlsx》文档中的数据导入到系统中，\n\n内容如下：\n\n\n\n数据的导入就是读取excel中的内容，转成对象插入到数据库中\n\n\n# 思路\n\n一般来说，即将导入的文件，每个列代表什么意思基本上都是固定的，比如第1列就是用户姓名，最后一列就是用户的现住址，并且在做excel时对每个列的类型都是有要求的，这样就可以给我们开发带来很大的简便。\n\n最终的目标就是读取每一行数据，把数据转成用户的对象，保存到表中\n\n实现的步骤：1、根据上传的文件创建Workbook\n\n2、获取到第一个sheet工作表\n\n3、从第二行开始读取数据\n\n4、读取每一个单元格，把内容放入到用户对象的相关的属性中\n\n\n# 代码实现\n\n第一步：在Controller接收文件,具体的实现交给service\n\n@PostMapping(value = "/uploadExcel", name = "上传用户数据")\npublic void uploadExcel(MultipartFile file)  throws Exception{\n   userService.uploadExcel(file);\n}\n\n\n第二步：UserService添加上传用户的方法\n\npublic void uploadExcel(MultipartFile file) throws Exception {\n    Workbook workbook = new XSSFWorkbook(file.getInputStream()); //根据上传的输入流创建workbook\n    Sheet sheet = workbook.getSheetAt(0); //获取工作薄中的第一个工作表\n    int lastRowIndex = sheet.getLastRowNum(); //获取这个sheet中最后一行数据，为了循环遍历\n\n    //        以下三个为了节省栈内存，所以提到循环的外面\n    User user = null;\n    Row row = null;\n    Cell cell = null;\n\n    //开始循环每行，获取每行的单元格中的值，放入到user属性中\n    for (int i = 1; i <= lastRowIndex; i++) {\n        row = sheet.getRow(i);\n        user = new User();\n        //          因为第一个列单元格中是字符串，可以直接使用getStringCellValue方法\n        String userName = row.getCell(0).getStringCellValue(); //用户名\n        user.setUserName(userName);\n        String phone = null; //手机号\n        try {\n            phone = row.getCell(1).getStringCellValue();\n        } catch (IllegalStateException e) {\n            phone = row.getCell(1).getNumericCellValue()+"";\n        }\n        user.setPhone(phone);\n        String province = row.getCell(2).getStringCellValue(); //省份\n        user.setProvince(province);\n        String city = row.getCell(3).getStringCellValue(); //城市\n        user.setCity(city);\n        //            因为在填写excel中的数据时就可以约定这个列只能填写数值，所以可以直接用getNumericCellValue方法\n        Integer salary = ((Double)row.getCell(4).getNumericCellValue()).intValue(); //工资\n        user.setSalary(salary);\n        String hireDateStr = row.getCell(5).getStringCellValue(); //入职日期\n        Date hireDate = simpleDateFormat.parse(hireDateStr);\n        user.setHireDate(hireDate);\n        String birthdayStr = row.getCell(6).getStringCellValue(); //出生日期\n        Date birthday = simpleDateFormat.parse(birthdayStr);\n        user.setBirthday(birthday);\n\n        String address = row.getCell(7).getStringCellValue(); //现住地址\n        user.setAddress(address);\n        userMapper.insert(user);\n    }\n\n}\n\n\n上传成功后直接查询数据库中的数据：\n\n\n\n\n# 导出Excel\n\n基本思路\n\n1、创建一个全新的工作薄\n\n2、在新的工作薄中创建一个新的工作表\n\n3、在工作表创建第一行作为标题行，标题固定\n\n4、从第二行循环遍历创建，有多少条用户数据就应该创建多少行\n\n5、把每一个user对象的属性放入到相应的单元格中\n\n\n# 导出xlsx\n\n第一步：在Controller添加方法,具体的实现交给service\n\n@GetMapping(value = "/downLoadXlsxByPoi",name = "使用POI下载高版本")\npublic void downLoadXlsx(HttpServletResponse response) throws Exception{\n    userService.downLoadXlsx(response);\n}\n\n\n第二步：UserService中实现\n\npublic void downLoadXlsx(HttpServletResponse response) throws Exception {\n    //        创建一个空的工作薄\n    Workbook workbook = new XSSFWorkbook();\n    //        在工作薄中创建一个工作表\n    Sheet sheet = workbook.createSheet("测试");\n    //        设置列宽\n    sheet.setColumnWidth(0,5*256);\n    sheet.setColumnWidth(1,8*256);\n    sheet.setColumnWidth(2,15*256);\n    sheet.setColumnWidth(3,15*256);\n    sheet.setColumnWidth(4,30*256);\n    //            处理标题\n    String[] titles = new String[]{"编号","姓名","手机号","入职日期","现住址"};\n\n    //        创建标题行\n    Row titleRow = sheet.createRow(0);\n    Cell cell = null;\n    for (int i = 0; i < titles.length; i++) {\n        cell = titleRow.createCell(i);\n        cell.setCellValue(titles[i]);\n    }\n    //        处理内容\n    List<User> userList = this.findAll();\n    int rowIndex = 1;\n    Row row = null;\n    for (User user : userList) {\n        row = sheet.createRow(rowIndex);\n        cell = row.createCell(0);\n        cell.setCellValue(user.getId());\n\n        cell = row.createCell(1);\n        cell.setCellValue(user.getUserName());\n\n        cell = row.createCell(2);\n        cell.setCellValue(user.getPhone());\n\n        cell = row.createCell(3);\n        cell.setCellValue(simpleDateFormat.format(user.getHireDate()));\n\n        cell = row.createCell(4);\n        cell.setCellValue(user.getAddress());\n\n        rowIndex++;\n    }\n    //            导出的文件名称\n    String filename="员工数据.xlsx";\n    //            设置文件的打开方式和mime类型\n    ServletOutputStream outputStream = response.getOutputStream();\n    response.setHeader( "Content-Disposition", "attachment;filename="  + new String(filename.getBytes(),"ISO8859-1"));\n    response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");\n    workbook.write(outputStream);\n\n}\n\n\n\n\n\n# 单位\n\n# 单位\npt是绝对长度，表⽰point（磅），是印刷⾏业常⽤单位，等于1/72英⼨。\ndpi（或ppi）表⽰分辨率，即pixel（dot）per inch，每英⼨的像素（点）数。\npx是相对长度，表⽰pixel（像素），是屏幕上显⽰数据的最基本的点。\n\n1pt = 20twips\n1px = 0.75pt\n1px = 15twips\n1pt = 1/72 inch\n\n# Excel\nexcel中的默认单位是磅（pt）\n\n\n# poi 行高\npoi中的⾏⾼单位和excel中的⾏⾼单位是不⼀样的，excel中的⾏⾼单位是pt（point，磅），⽽poi中的⾏⾼单位则是twips\n1pt = 20twips\n导出excle中⾏⾼最多为409pt（磅），也就是409*20=8180twips（缇）。\n\n# poi 列宽\nPOI中Sheet的列宽单位是一个字符宽度的1/256\n每列可以显示的最大字符数为255\n如果要显示两个字符宽度 2*256\n\n10pt = 1.23字符\n11pt = 1.42字符\n\n\n\n [注意]字号、pt、px、inch、cm 之间的关系及对照表\n \n 引自http://www.cnprint.org/bbs/thread/72/67855/\n在印刷排版中，“point”是一个绝对的单位，它等于 1/72 英寸，可以用尺子丈量的，物理的英寸。但在 CSS 中 pt 的含义却非如此，例如我们指定一个字体是 9pt，我们会以为按照 CSS 规范，它等于:\n\n　　9 * 1/72 = 1/8 inch\n\n　　这是一个误解，因为我们的显示器被分割为了一个个的像素，单个像素只能有一种颜色 (为了简化，这里暂不讨论次像素反锯齿技术)，要在屏幕上显示，必须先把以 pt 为单位的长度转换为以像素为单位的长度，这个转换的媒介，就是 DPI (事实上，这里的所谓的 DPI，是操作系统和浏览器中使用的术语，即为 PPI, pixels per inch，和扫描仪、打印机、数码相机中的 DPI 是不同的概念)。\n\n　　例如，无论在哪个操作系统中，Firefox 浏览器默认的 DPI 都是 96，那么实际上 9pt = 9 * 1/72 * 96 = 12px。\n\n　　所以，虽然“DPI”中的“I”和“1pt 等于 1/72 inch”中的“inch”，都不代表物理上的英寸，但这两个单位互相之间是相等的，也就在相乘中约掉了。\n\n　　那么，真实的物理长度怎么计算呢?请拿出一把尺子，丈量你的显示器的可见宽度 (我这里是 11.2992 英寸)，除以横向分辨率 (我这里是 1024 像素)，得到的就是每个像素的物理长度。\n\n　　现在我们可以回答这样一个问题，网页上 9pt 的字体究竟占用了多宽的空间?\n答案是:\n\n　　9 * 1/72 * 96 * 11.2992 / 1024 = 0.1324 英寸 = 0.3363 厘米。\n　　\nCSS相对长度单位(relative length unit)\n\n　　CSS相对长度单位中的相对二字，表明了其长度单位会随着它的参考值的变化而变化，不是固定的。\n\n　　以下是CSS相对长度单位列表：\n\nCSS相对长度单位 说明\nem 元素的字体高度The height of the element\'s font\nex 字母x的高度The height of the letter "x"\npx 像素Pixels\n% 百分比Percentage\n\nCSS绝对长度单位(absolute length unit)\n绝对长度单位是一个固定的值。比如我们常用的有mm，就是毫米的意思。\n\n以下是CSS绝对长度单位列表：\n\nCSS绝对长度单位 说明\nin 英寸Inches (1 英寸 = 2.54 厘米)\ncm 厘米Centimeters\nmm 毫米Millimeters\npt 点Points (1点 = 1/72英寸)\npc 皮卡Picas (1 皮卡 = 12 点)\n\n\n\n# 样式设置\n\n\n# 框线\n\n//===============3.10.Final===============\nCellStyle style = workbook.createCellStyle();\nstyle.setBorderBottom(CellStyle.BORDER_THIN);\nstyle.setBorderLeft(CellStyle.BORDER_THIN);\nstyle.setBorderTop(CellStyle.BORDER_THIN);\nstyle.setBorderRight(CellStyle.BORDER_THIN);\n\n\n//===============3.17、4.0.1===============\nCellStyle style = workbook.createCellStyle();\nstyle.setBorderBottom(BorderStyle.THIN); //下边框  BorderStyle.THIN 细线\nstyle.setBorderLeft(BorderStyle.THIN);  //左边框\nstyle.setBorderRight(BorderStyle.THIN);  //右边框\nstyle.setBorderTop(BorderStyle.THIN);  //上边框\n\n\n\n\n# 合并单元格\n\n//3.17、4.0.1\n//合并单元格 起始行, 结束行, 起始列, 结束列\nsheet.addMergedRegion(new CellRangeAddress(0,0,0,4));\n\n\n\n# 设置行高\n\n注意,设置了固定行高,自动换行就不会自适应行高了\n\n\n/**\n设置行高\n\npoi中的⾏⾼单位和excel中的⾏⾼单位是不⼀样的，excel中的⾏⾼单位是pt（point，磅），⽽poi中的⾏⾼单位则是twips\n1pt = 20twips\n导出excle中⾏⾼最多为409pt（磅），也就是409*20=8180twips（缇）。\n*/\n//全局设置行高：\n//单位 pt *****\nsheet.setDefaultRowHeightInPoints();\n//单位 twips\nsheet.setDefaultRowHeight();\n\n\n//设置指定行行高\n//以twips为单位\nsheet.getRow(1).setHeight((short)(50*20);\n//以pt为单位，推荐使用*****\nbigTitleRow.setHeightInPoints(50); //设置行高\n                          \n                          \n                          \n//设置自适应行高\n//一行中没有合并单元格的单元格\nXSSFRow xssfRow = sheet.getRow(rowIndex);\nCTRow ctRow = xssfRow.getCTRow();\t\nctRow.setCustomHeight(false);\n//有合并的单元格\n/*\n总体计算思路：\n                获取字符高度：单位：twips\n                获取单元格宽度：单位：字符\n                获取内容长度：个数\n\n                由于中文和英文的字符长度不同，所以需要统计出英式字符个数\n                一个中文字符约占用两个英文字符的长度，这里就按2.25来处理\n                字体高度单位转换：\n                twips --\x3e pt\n                twips 转 pt  1pt = 20twips\n                pt --\x3e 字符\n                1pt 约为 0.123 个字符\n\n  文字内容宽度 = (英式字符个数 * 256 + 中式字符个数 * 2 * 256) * (fontHeight / 20) * 0.123;\n*/\n//字体的高度\n//高度单位 twips 1pt = 20twips 如 220twips --\x3e 11pt --\x3e 1.42字符\nshort fontHeight = font.getFontHeight();//cell内容字符串总宽度\nint engStrCount = calcEnglishStrCount(cellContent);\ndouble cellContentWidth = (engStrCount * 256  + cellContent.length() * 256 * 2) * (fontHeight / 20.0) * 0.123;\n\n\n\n\n# 设置列宽\n\n/*\npoi 列宽\nPOI中Sheet的列宽单位是一个字符宽度的1/256\n每列可以显示的最大字符数为255\n如果要显示两个字符宽度 2*256\n*/\n//===============3.17、4.0.1===============\n//全局设置列宽\nsheet.setDefaultColumnWidth(2*256);\n\n//设置指定列宽\nsheet.setColumnWidth(0,2*256);\nsheet.setColumnWidth(1,8*256);\n\n//自适应列宽\n//注意：第一个方法在合并单元格的的单元格并不好使，必须用第二个方法。\nsheet.autoSizeColumn(1);\nsheet.autoSizeColumn(1, true);\n\n//这种自适应的api在遇到行数多一点的数据的时候,就会耗费大量的时间,1000行花了2分钟\n//而且这两个方法对英文数字还好, 对中文支持的并不好\nsheet.trackAllColumnsForAutoSizing();\nsheet.autoSizeColumn(i);\n\n//把最大宽度限制在10000到15000左右是比较合适的, 然后剩下的就交给excel的自动换行\n\n\n//自定义自适应\nint width = Math.max(15 * 256, Math.min(255 * 256, sh.getColumnWidth(i) * 12 / 10));\n//=========================================\n\n\n\n\n# 自动换行\n\n设置自动换行后,不要设置固定的行高,否则超出的部分也会被遮住不显示\n\n//设置样式\nCellStyle blackStyle = workbook.createCellStyle();\n\n\n// 创建Excel文件\nHSSFWorkbook workbook = new HSSFWorkbook();\nHSSFSheet sheet = workbook.createSheet("sheet");\n//设置样式\n CellStyle blackStyle = workbook.createCellStyle();\n//自动换行*重要*\n blackStyle.setWrapText(true);\n \n//存储最大列宽\nMap<Integer,Integer> maxWidth = new HashMap<>();\n// 标题行\nHSSFRow titleRow = sheet.createRow(0);\ntitleRow.setHeightInPoints(20);//目的是想把行高设置成20px\ntitleRow.createCell(0).setCellValue("sku编号");\ntitleRow.createCell(1).setCellValue("商品标题");\ntitleRow.createCell(2).setCellValue("商品名");\n// 初始化标题的列宽,字体\nfor (int i= 0; i<=3;i++){\n    maxWidth.put(i,titleRow.getCell(i).getStringCellValue().getBytes().length  * 256 + 200);\n    titleRow.getCell(i).setCellStyle(blackStyle);//设置自动换行\n}\n \nfor (Map<String, Object> map : list) {\n    int currentRowNum = sheet.getLastRowNum() + 1;\n    //数据行\n    HSSFRow dataRow = sheet.createRow(currentRowNum);\n    // 记录这一行的每列的长度\n    List<Object> valueList = new ArrayList<Object>();\n \n    String val0 = map.get("skuId") == null ? "—" : ((Double) (map.get("skuId"))).intValue()+"";\n    valueList.add(val0);\n    dataRow.createCell(0).setCellValue(val0);\n    String val1 = map.get("title") == null ? "" : map.get("title").toString();\n    valueList.add(val1);\n    dataRow.createCell(1).setCellValue(val1);\n    String val2 = map.get("goodsName") == null ? "" : map.get("goodsName").toString();\n    valueList.add(val2);\n    dataRow.createCell(2).setCellValue(val2);\n    String val3 = map.get("catName") == null ? "" : map.get("catName").toString();\n    valueList.add(val3);\n    dataRow.createCell(3).setCellValue(val3);\n    String val4 = map.get("brandName") == null ? "" : map.get("brandName").toString();\n \n     for(int i = 0;i<=3;i++){\n         int length = valueList.get(i).toString().getBytes().length  * 256 + 200;\n         //这里把宽度最大限制到15000\n         if (length>15000){\n             length = 15000;\n         }\n         maxWidth.put(i,Math.max(length,maxWidth.get(i)));\n          dataRow.getCell(i).setCellStyle(blackStyle);//设置自动换行\n    }\n}\n \n \nfor (int i= 0; i<=3;i++){\n      //设置列宽\n     sheet.setColumnWidth(i,maxWidth.get(i));\n }\n\n\n\n# 锁住单元格\n\n导出excel , 自然就有导入excel 了, 比如导出一些数据出来, 修改一些再导入进去, 但是这时, 一些基本信息我们不希望用户随意去修改, 这里就用到了excel的锁\n\n\n\n//===============全系列支持===============\n//锁定sheet\nsheet.protectSheet("密码");\n//开放一些单元格可以修改\nCellStyle unlockCell = workbook.createCellStyle();\nunlockCell.setLocked(false);\n// 设置dataRow这一行的第i个单元格不锁定\ndataRow.getCell(i).setCellStyle(unlockCell);\n\n\n//锁定sheet\nsheet.protectSheet("1234");\n((XSSFSheet) sheet).lockDeleteColumns(false);\n((XSSFSheet) sheet).lockAutoFilter(false);\n((XSSFSheet) sheet).lockDeleteColumns(false);\n((XSSFSheet) sheet).lockDeleteRows(false);\n((XSSFSheet) sheet).lockFormatCells(false);\n((XSSFSheet) sheet).lockFormatColumns(false);\n((XSSFSheet) sheet).lockFormatRows(false);\n((XSSFSheet) sheet).lockInsertColumns(false);\n((XSSFSheet) sheet).lockInsertHyperlinks(false);\n((XSSFSheet) sheet).lockInsertRows(false);\n((XSSFSheet) sheet).lockObjects(false);\n((XSSFSheet) sheet).lockPivotTables(false);\n((XSSFSheet) sheet).lockScenarios(false);\n((XSSFSheet) sheet).lockSelectLockedCells(false);\n((XSSFSheet) sheet).lockSelectUnlockedCells(false);\n((XSSFSheet) sheet).lockSort(false);\n\n\n\n# 对齐方式和字体\n\n//===============3.10.Final===============\nstyle.setAlignment(CellStyle. ALIGN_CENTER);//水平居中\nstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);//垂直居中\n\n//===============3.17、4.0.1===============\nstyle.setAlignment(HorizontalAlignment.CENTER); //水平居中对齐\nstyle.setVerticalAlignment(VerticalAlignment.CENTER); // 垂直居中对齐\n\n\n\n//===============全系列支持===============\nHSSFFont font = book.createFont();//创建字体\nfont.setFontName("宋体");//设置字体名称\nfont.setFontHeightInPoints((short)11);//设置字体大小\nfont.setBold//加粗\nstyle.setFont(font);//对样式设置字体\n\n\n\n# 案例展示\n\n\n# 导出带样式的Excel\n\n/Volumes/zs-2T/zs-study/zs-tool-框架/java报表/资料/code/zs-excel-poi-img\n\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\nimport java.io.FileOutputStream;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n//导出一个有样式的excel\n//    1、边框线 2、合并单元格 3、行高列宽 4、对齐方式 5、字体\npublic class POIDemoByUtil {\n\n    public static void main(String[] args) throws Exception {\n        Workbook workbook = new XSSFWorkbook();\n        Sheet sheet = workbook.createSheet("有样式的数据");\n        \n        //大标题\n        Row bigTitleRow = sheet.createRow(0);\n        //设置单元格数据\n        Cell cell00 = bigTitleRow.createCell(0);\n        //合并单元格\n        ExcelExportUtil_3_17.addMergedRegion(workbook, sheet, 0, 0, 0, 4);\n        //设置数据\n        CellStyle titleStyle = ExcelExportUtil_3_17.setTitleStyle(workbook);\n        ExcelExportUtil_3_17.setCellValue(titleStyle, cell00, "用户信息数据");\n        //自适应高度\n        ExcelExportUtil_3_17.calcAndSetRowHeight(cell00,40);\n        bigTitleRow.setHeightInPoints(42);//固定高度\n\n        //小标题\n        //编号\t姓名\t手机号\t入职日期\t现住址\n        Row titleRow = sheet.createRow(1);\n        String[] titles = new String[]{"编号", "姓名", "手机号", "入职日期", "现住址"};\n        CellStyle littleTitleStyle = ExcelExportUtil_3_17.setLittleTitleStyle(workbook);\n        for (int i = 0; i < titles.length; i++) {\n            Cell cell = titleRow.createCell(i);\n            cell.setCellValue(titles[i]);\n            cell.setCellStyle(littleTitleStyle);\n        }\n\n        //存储最大列宽\n        Map<Integer, Integer> maxWidth = new HashMap<>();\n        // 初始化标题的列宽,字体\n        for (int i = 0; i < titles.length; i++) {\n            double calcCellWidth = ExcelExportUtil_3_17.calcCellWidth(titleRow.getCell(i));\n            maxWidth.put(i, (int) (calcCellWidth + 200));\n        }\n\n        String[] users = new String[]{"1","大一","13800000001","2001-03-29","北京市西城区宣武大街1号院"};\n        for (int rowNum = 0; rowNum < 5; rowNum++) {\n            Row row = sheet.createRow(2 + rowNum);\n            for (int colNum = 0; colNum < titles.length; colNum++) {\n                Cell cell = row.createCell(colNum);\n                ExcelExportUtil_3_17.setCellValue(workbook,cell,users[colNum]);\n\n                int length  = (int) (ExcelExportUtil_3_17.calcCellWidth(cell));\n                length = Math.min(length, 15000);\n                maxWidth.put(colNum,Math.max(length,maxWidth.get(colNum)));\n            }\n        }\n\n        //设置统计好的列宽\n        for (int i = 0; i < titles.length; i++) {\n            sheet.setColumnWidth(i, maxWidth.get(i));\n        }\n        \n        workbook.write(new FileOutputStream("./testStyle" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()).toString() + ".xlsx"));\n    }\n\n}\n\n\n',normalizedContent:'# poi--1.基础api\n\n添加所需的依赖：\n\n<dependency>\n    <groupid>org.apache.poi</groupid>\n    <artifactid>poi</artifactid>\n    <version>4.0.1</version>\n</dependency>\n\n<dependency>\n    <groupid>org.apache.poi</groupid>\n    <artifactid>poi-ooxml</artifactid>\n    <version>4.0.1</version>\n</dependency>\n\n<dependency>\n    <groupid>org.apache.poi</groupid>\n    <artifactid>poi-ooxml-schemas</artifactid>\n    <version>4.0.1</version>\n</dependency>\n\n\n\n# poi操作excel高低版本区别\n\n在poi包中有如下几个主要对象和excel的几个对象对应：\n\n对应excel名称   低版本中的类名         高版本中的类名\n工作簿         hssfworkbook    xssfworkbook\n工作表         hssfsheet       xssfsheet\n行           hssfrow         xssfrow\n单元格         hssfcell        xssfcell\n单元格样式       hssfcellstyle   xssfcellstyle\n\n\n# 创建excel\n\n入门案例代码：创建一个新的工作薄，里面随便写一句话\n\n操作低版本：\n\npackage com.itheima.demo;\nimport org.apache.poi.hssf.usermodel.hssfworkbook;\nimport org.apache.poi.ss.usermodel.cell;\nimport org.apache.poi.ss.usermodel.row;\nimport org.apache.poi.ss.usermodel.sheet;\nimport org.apache.poi.ss.usermodel.workbook;\nimport org.apache.poi.xssf.usermodel.xssfworkbook;\nimport java.io.fileoutputstream;\npublic class poidemo01 {\n    public static void main(string[] args) throws exception{\n        //创建了一个全新（里面什么都没有）的工作薄\n        workbook workbook = new hssfworkbook(); \n        //创建了一个全新（里面什么都没有）的工作表\n        sheet sheet = workbook.createsheet("demo测试");  \n        //创建了第一行（空的）\n        row row = sheet.createrow(0);\n        //创建的是第一行的第一个单元格\n        cell cell = row.createcell(0);\n        //写入数据\n        cell.setcellvalue("这是我第一次玩poi");\n//        把工作薄输出到本地磁盘\n        workbook.write(new fileoutputstream("d://test.xls"));\n    }\n}\n\n\n\n操作高版本：\n\npackage com.itheima.demo;\nimport org.apache.poi.ss.usermodel.cell;\nimport org.apache.poi.ss.usermodel.row;\nimport org.apache.poi.ss.usermodel.sheet;\nimport org.apache.poi.ss.usermodel.workbook;\nimport org.apache.poi.xssf.usermodel.xssfworkbook;\n\nimport java.io.fileoutputstream;\n \npublic class poidemo02 {\n    public static void main(string[] args) throws exception{\n        workbook workbook = new xssfworkbook(); //创建了一个全新（里面什么都没有）的工作薄\n        sheet sheet = workbook.createsheet("demo测试");  //创建了一个全新（里面什么都没有）的工作表\n        row row = sheet.createrow(0);  //创建了第一行（空的）\n        cell cell = row.createcell(0);//创建的是第一行的第一个单元格\n        cell.setcellvalue("这是我第一次玩poi");\n//        把工作薄输出到本地磁盘\n        workbook.write(new fileoutputstream("d://test.xlsx"));\n    }\n}\n\n\n\n比较上面两个代码会发现，在开发中只是类的名称不一样，方法是一样的。\n\n\n# 读取excel\n\n\n# 需求\n\n把资料中的《用户导入测试数据.xlsx》文档中的数据导入到系统中，\n\n内容如下：\n\n\n\n数据的导入就是读取excel中的内容，转成对象插入到数据库中\n\n\n# 思路\n\n一般来说，即将导入的文件，每个列代表什么意思基本上都是固定的，比如第1列就是用户姓名，最后一列就是用户的现住址，并且在做excel时对每个列的类型都是有要求的，这样就可以给我们开发带来很大的简便。\n\n最终的目标就是读取每一行数据，把数据转成用户的对象，保存到表中\n\n实现的步骤：1、根据上传的文件创建workbook\n\n2、获取到第一个sheet工作表\n\n3、从第二行开始读取数据\n\n4、读取每一个单元格，把内容放入到用户对象的相关的属性中\n\n\n# 代码实现\n\n第一步：在controller接收文件,具体的实现交给service\n\n@postmapping(value = "/uploadexcel", name = "上传用户数据")\npublic void uploadexcel(multipartfile file)  throws exception{\n   userservice.uploadexcel(file);\n}\n\n\n第二步：userservice添加上传用户的方法\n\npublic void uploadexcel(multipartfile file) throws exception {\n    workbook workbook = new xssfworkbook(file.getinputstream()); //根据上传的输入流创建workbook\n    sheet sheet = workbook.getsheetat(0); //获取工作薄中的第一个工作表\n    int lastrowindex = sheet.getlastrownum(); //获取这个sheet中最后一行数据，为了循环遍历\n\n    //        以下三个为了节省栈内存，所以提到循环的外面\n    user user = null;\n    row row = null;\n    cell cell = null;\n\n    //开始循环每行，获取每行的单元格中的值，放入到user属性中\n    for (int i = 1; i <= lastrowindex; i++) {\n        row = sheet.getrow(i);\n        user = new user();\n        //          因为第一个列单元格中是字符串，可以直接使用getstringcellvalue方法\n        string username = row.getcell(0).getstringcellvalue(); //用户名\n        user.setusername(username);\n        string phone = null; //手机号\n        try {\n            phone = row.getcell(1).getstringcellvalue();\n        } catch (illegalstateexception e) {\n            phone = row.getcell(1).getnumericcellvalue()+"";\n        }\n        user.setphone(phone);\n        string province = row.getcell(2).getstringcellvalue(); //省份\n        user.setprovince(province);\n        string city = row.getcell(3).getstringcellvalue(); //城市\n        user.setcity(city);\n        //            因为在填写excel中的数据时就可以约定这个列只能填写数值，所以可以直接用getnumericcellvalue方法\n        integer salary = ((double)row.getcell(4).getnumericcellvalue()).intvalue(); //工资\n        user.setsalary(salary);\n        string hiredatestr = row.getcell(5).getstringcellvalue(); //入职日期\n        date hiredate = simpledateformat.parse(hiredatestr);\n        user.sethiredate(hiredate);\n        string birthdaystr = row.getcell(6).getstringcellvalue(); //出生日期\n        date birthday = simpledateformat.parse(birthdaystr);\n        user.setbirthday(birthday);\n\n        string address = row.getcell(7).getstringcellvalue(); //现住地址\n        user.setaddress(address);\n        usermapper.insert(user);\n    }\n\n}\n\n\n上传成功后直接查询数据库中的数据：\n\n\n\n\n# 导出excel\n\n基本思路\n\n1、创建一个全新的工作薄\n\n2、在新的工作薄中创建一个新的工作表\n\n3、在工作表创建第一行作为标题行，标题固定\n\n4、从第二行循环遍历创建，有多少条用户数据就应该创建多少行\n\n5、把每一个user对象的属性放入到相应的单元格中\n\n\n# 导出xlsx\n\n第一步：在controller添加方法,具体的实现交给service\n\n@getmapping(value = "/downloadxlsxbypoi",name = "使用poi下载高版本")\npublic void downloadxlsx(httpservletresponse response) throws exception{\n    userservice.downloadxlsx(response);\n}\n\n\n第二步：userservice中实现\n\npublic void downloadxlsx(httpservletresponse response) throws exception {\n    //        创建一个空的工作薄\n    workbook workbook = new xssfworkbook();\n    //        在工作薄中创建一个工作表\n    sheet sheet = workbook.createsheet("测试");\n    //        设置列宽\n    sheet.setcolumnwidth(0,5*256);\n    sheet.setcolumnwidth(1,8*256);\n    sheet.setcolumnwidth(2,15*256);\n    sheet.setcolumnwidth(3,15*256);\n    sheet.setcolumnwidth(4,30*256);\n    //            处理标题\n    string[] titles = new string[]{"编号","姓名","手机号","入职日期","现住址"};\n\n    //        创建标题行\n    row titlerow = sheet.createrow(0);\n    cell cell = null;\n    for (int i = 0; i < titles.length; i++) {\n        cell = titlerow.createcell(i);\n        cell.setcellvalue(titles[i]);\n    }\n    //        处理内容\n    list<user> userlist = this.findall();\n    int rowindex = 1;\n    row row = null;\n    for (user user : userlist) {\n        row = sheet.createrow(rowindex);\n        cell = row.createcell(0);\n        cell.setcellvalue(user.getid());\n\n        cell = row.createcell(1);\n        cell.setcellvalue(user.getusername());\n\n        cell = row.createcell(2);\n        cell.setcellvalue(user.getphone());\n\n        cell = row.createcell(3);\n        cell.setcellvalue(simpledateformat.format(user.gethiredate()));\n\n        cell = row.createcell(4);\n        cell.setcellvalue(user.getaddress());\n\n        rowindex++;\n    }\n    //            导出的文件名称\n    string filename="员工数据.xlsx";\n    //            设置文件的打开方式和mime类型\n    servletoutputstream outputstream = response.getoutputstream();\n    response.setheader( "content-disposition", "attachment;filename="  + new string(filename.getbytes(),"iso8859-1"));\n    response.setcontenttype("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");\n    workbook.write(outputstream);\n\n}\n\n\n\n\n\n# 单位\n\n# 单位\npt是绝对长度，表⽰point（磅），是印刷⾏业常⽤单位，等于1/72英⼨。\ndpi（或ppi）表⽰分辨率，即pixel（dot）per inch，每英⼨的像素（点）数。\npx是相对长度，表⽰pixel（像素），是屏幕上显⽰数据的最基本的点。\n\n1pt = 20twips\n1px = 0.75pt\n1px = 15twips\n1pt = 1/72 inch\n\n# excel\nexcel中的默认单位是磅（pt）\n\n\n# poi 行高\npoi中的⾏⾼单位和excel中的⾏⾼单位是不⼀样的，excel中的⾏⾼单位是pt（point，磅），⽽poi中的⾏⾼单位则是twips\n1pt = 20twips\n导出excle中⾏⾼最多为409pt（磅），也就是409*20=8180twips（缇）。\n\n# poi 列宽\npoi中sheet的列宽单位是一个字符宽度的1/256\n每列可以显示的最大字符数为255\n如果要显示两个字符宽度 2*256\n\n10pt = 1.23字符\n11pt = 1.42字符\n\n\n\n [注意]字号、pt、px、inch、cm 之间的关系及对照表\n \n 引自http://www.cnprint.org/bbs/thread/72/67855/\n在印刷排版中，“point”是一个绝对的单位，它等于 1/72 英寸，可以用尺子丈量的，物理的英寸。但在 css 中 pt 的含义却非如此，例如我们指定一个字体是 9pt，我们会以为按照 css 规范，它等于:\n\n　　9 * 1/72 = 1/8 inch\n\n　　这是一个误解，因为我们的显示器被分割为了一个个的像素，单个像素只能有一种颜色 (为了简化，这里暂不讨论次像素反锯齿技术)，要在屏幕上显示，必须先把以 pt 为单位的长度转换为以像素为单位的长度，这个转换的媒介，就是 dpi (事实上，这里的所谓的 dpi，是操作系统和浏览器中使用的术语，即为 ppi, pixels per inch，和扫描仪、打印机、数码相机中的 dpi 是不同的概念)。\n\n　　例如，无论在哪个操作系统中，firefox 浏览器默认的 dpi 都是 96，那么实际上 9pt = 9 * 1/72 * 96 = 12px。\n\n　　所以，虽然“dpi”中的“i”和“1pt 等于 1/72 inch”中的“inch”，都不代表物理上的英寸，但这两个单位互相之间是相等的，也就在相乘中约掉了。\n\n　　那么，真实的物理长度怎么计算呢?请拿出一把尺子，丈量你的显示器的可见宽度 (我这里是 11.2992 英寸)，除以横向分辨率 (我这里是 1024 像素)，得到的就是每个像素的物理长度。\n\n　　现在我们可以回答这样一个问题，网页上 9pt 的字体究竟占用了多宽的空间?\n答案是:\n\n　　9 * 1/72 * 96 * 11.2992 / 1024 = 0.1324 英寸 = 0.3363 厘米。\n　　\ncss相对长度单位(relative length unit)\n\n　　css相对长度单位中的相对二字，表明了其长度单位会随着它的参考值的变化而变化，不是固定的。\n\n　　以下是css相对长度单位列表：\n\ncss相对长度单位 说明\nem 元素的字体高度the height of the element\'s font\nex 字母x的高度the height of the letter "x"\npx 像素pixels\n% 百分比percentage\n\ncss绝对长度单位(absolute length unit)\n绝对长度单位是一个固定的值。比如我们常用的有mm，就是毫米的意思。\n\n以下是css绝对长度单位列表：\n\ncss绝对长度单位 说明\nin 英寸inches (1 英寸 = 2.54 厘米)\ncm 厘米centimeters\nmm 毫米millimeters\npt 点points (1点 = 1/72英寸)\npc 皮卡picas (1 皮卡 = 12 点)\n\n\n\n# 样式设置\n\n\n# 框线\n\n//===============3.10.final===============\ncellstyle style = workbook.createcellstyle();\nstyle.setborderbottom(cellstyle.border_thin);\nstyle.setborderleft(cellstyle.border_thin);\nstyle.setbordertop(cellstyle.border_thin);\nstyle.setborderright(cellstyle.border_thin);\n\n\n//===============3.17、4.0.1===============\ncellstyle style = workbook.createcellstyle();\nstyle.setborderbottom(borderstyle.thin); //下边框  borderstyle.thin 细线\nstyle.setborderleft(borderstyle.thin);  //左边框\nstyle.setborderright(borderstyle.thin);  //右边框\nstyle.setbordertop(borderstyle.thin);  //上边框\n\n\n\n\n# 合并单元格\n\n//3.17、4.0.1\n//合并单元格 起始行, 结束行, 起始列, 结束列\nsheet.addmergedregion(new cellrangeaddress(0,0,0,4));\n\n\n\n# 设置行高\n\n注意,设置了固定行高,自动换行就不会自适应行高了\n\n\n/**\n设置行高\n\npoi中的⾏⾼单位和excel中的⾏⾼单位是不⼀样的，excel中的⾏⾼单位是pt（point，磅），⽽poi中的⾏⾼单位则是twips\n1pt = 20twips\n导出excle中⾏⾼最多为409pt（磅），也就是409*20=8180twips（缇）。\n*/\n//全局设置行高：\n//单位 pt *****\nsheet.setdefaultrowheightinpoints();\n//单位 twips\nsheet.setdefaultrowheight();\n\n\n//设置指定行行高\n//以twips为单位\nsheet.getrow(1).setheight((short)(50*20);\n//以pt为单位，推荐使用*****\nbigtitlerow.setheightinpoints(50); //设置行高\n                          \n                          \n                          \n//设置自适应行高\n//一行中没有合并单元格的单元格\nxssfrow xssfrow = sheet.getrow(rowindex);\nctrow ctrow = xssfrow.getctrow();\t\nctrow.setcustomheight(false);\n//有合并的单元格\n/*\n总体计算思路：\n                获取字符高度：单位：twips\n                获取单元格宽度：单位：字符\n                获取内容长度：个数\n\n                由于中文和英文的字符长度不同，所以需要统计出英式字符个数\n                一个中文字符约占用两个英文字符的长度，这里就按2.25来处理\n                字体高度单位转换：\n                twips --\x3e pt\n                twips 转 pt  1pt = 20twips\n                pt --\x3e 字符\n                1pt 约为 0.123 个字符\n\n  文字内容宽度 = (英式字符个数 * 256 + 中式字符个数 * 2 * 256) * (fontheight / 20) * 0.123;\n*/\n//字体的高度\n//高度单位 twips 1pt = 20twips 如 220twips --\x3e 11pt --\x3e 1.42字符\nshort fontheight = font.getfontheight();//cell内容字符串总宽度\nint engstrcount = calcenglishstrcount(cellcontent);\ndouble cellcontentwidth = (engstrcount * 256  + cellcontent.length() * 256 * 2) * (fontheight / 20.0) * 0.123;\n\n\n\n\n# 设置列宽\n\n/*\npoi 列宽\npoi中sheet的列宽单位是一个字符宽度的1/256\n每列可以显示的最大字符数为255\n如果要显示两个字符宽度 2*256\n*/\n//===============3.17、4.0.1===============\n//全局设置列宽\nsheet.setdefaultcolumnwidth(2*256);\n\n//设置指定列宽\nsheet.setcolumnwidth(0,2*256);\nsheet.setcolumnwidth(1,8*256);\n\n//自适应列宽\n//注意：第一个方法在合并单元格的的单元格并不好使，必须用第二个方法。\nsheet.autosizecolumn(1);\nsheet.autosizecolumn(1, true);\n\n//这种自适应的api在遇到行数多一点的数据的时候,就会耗费大量的时间,1000行花了2分钟\n//而且这两个方法对英文数字还好, 对中文支持的并不好\nsheet.trackallcolumnsforautosizing();\nsheet.autosizecolumn(i);\n\n//把最大宽度限制在10000到15000左右是比较合适的, 然后剩下的就交给excel的自动换行\n\n\n//自定义自适应\nint width = math.max(15 * 256, math.min(255 * 256, sh.getcolumnwidth(i) * 12 / 10));\n//=========================================\n\n\n\n\n# 自动换行\n\n设置自动换行后,不要设置固定的行高,否则超出的部分也会被遮住不显示\n\n//设置样式\ncellstyle blackstyle = workbook.createcellstyle();\n\n\n// 创建excel文件\nhssfworkbook workbook = new hssfworkbook();\nhssfsheet sheet = workbook.createsheet("sheet");\n//设置样式\n cellstyle blackstyle = workbook.createcellstyle();\n//自动换行*重要*\n blackstyle.setwraptext(true);\n \n//存储最大列宽\nmap<integer,integer> maxwidth = new hashmap<>();\n// 标题行\nhssfrow titlerow = sheet.createrow(0);\ntitlerow.setheightinpoints(20);//目的是想把行高设置成20px\ntitlerow.createcell(0).setcellvalue("sku编号");\ntitlerow.createcell(1).setcellvalue("商品标题");\ntitlerow.createcell(2).setcellvalue("商品名");\n// 初始化标题的列宽,字体\nfor (int i= 0; i<=3;i++){\n    maxwidth.put(i,titlerow.getcell(i).getstringcellvalue().getbytes().length  * 256 + 200);\n    titlerow.getcell(i).setcellstyle(blackstyle);//设置自动换行\n}\n \nfor (map<string, object> map : list) {\n    int currentrownum = sheet.getlastrownum() + 1;\n    //数据行\n    hssfrow datarow = sheet.createrow(currentrownum);\n    // 记录这一行的每列的长度\n    list<object> valuelist = new arraylist<object>();\n \n    string val0 = map.get("skuid") == null ? "—" : ((double) (map.get("skuid"))).intvalue()+"";\n    valuelist.add(val0);\n    datarow.createcell(0).setcellvalue(val0);\n    string val1 = map.get("title") == null ? "" : map.get("title").tostring();\n    valuelist.add(val1);\n    datarow.createcell(1).setcellvalue(val1);\n    string val2 = map.get("goodsname") == null ? "" : map.get("goodsname").tostring();\n    valuelist.add(val2);\n    datarow.createcell(2).setcellvalue(val2);\n    string val3 = map.get("catname") == null ? "" : map.get("catname").tostring();\n    valuelist.add(val3);\n    datarow.createcell(3).setcellvalue(val3);\n    string val4 = map.get("brandname") == null ? "" : map.get("brandname").tostring();\n \n     for(int i = 0;i<=3;i++){\n         int length = valuelist.get(i).tostring().getbytes().length  * 256 + 200;\n         //这里把宽度最大限制到15000\n         if (length>15000){\n             length = 15000;\n         }\n         maxwidth.put(i,math.max(length,maxwidth.get(i)));\n          datarow.getcell(i).setcellstyle(blackstyle);//设置自动换行\n    }\n}\n \n \nfor (int i= 0; i<=3;i++){\n      //设置列宽\n     sheet.setcolumnwidth(i,maxwidth.get(i));\n }\n\n\n\n# 锁住单元格\n\n导出excel , 自然就有导入excel 了, 比如导出一些数据出来, 修改一些再导入进去, 但是这时, 一些基本信息我们不希望用户随意去修改, 这里就用到了excel的锁\n\n\n\n//===============全系列支持===============\n//锁定sheet\nsheet.protectsheet("密码");\n//开放一些单元格可以修改\ncellstyle unlockcell = workbook.createcellstyle();\nunlockcell.setlocked(false);\n// 设置datarow这一行的第i个单元格不锁定\ndatarow.getcell(i).setcellstyle(unlockcell);\n\n\n//锁定sheet\nsheet.protectsheet("1234");\n((xssfsheet) sheet).lockdeletecolumns(false);\n((xssfsheet) sheet).lockautofilter(false);\n((xssfsheet) sheet).lockdeletecolumns(false);\n((xssfsheet) sheet).lockdeleterows(false);\n((xssfsheet) sheet).lockformatcells(false);\n((xssfsheet) sheet).lockformatcolumns(false);\n((xssfsheet) sheet).lockformatrows(false);\n((xssfsheet) sheet).lockinsertcolumns(false);\n((xssfsheet) sheet).lockinserthyperlinks(false);\n((xssfsheet) sheet).lockinsertrows(false);\n((xssfsheet) sheet).lockobjects(false);\n((xssfsheet) sheet).lockpivottables(false);\n((xssfsheet) sheet).lockscenarios(false);\n((xssfsheet) sheet).lockselectlockedcells(false);\n((xssfsheet) sheet).lockselectunlockedcells(false);\n((xssfsheet) sheet).locksort(false);\n\n\n\n# 对齐方式和字体\n\n//===============3.10.final===============\nstyle.setalignment(cellstyle. align_center);//水平居中\nstyle.setverticalalignment(cellstyle.vertical_center);//垂直居中\n\n//===============3.17、4.0.1===============\nstyle.setalignment(horizontalalignment.center); //水平居中对齐\nstyle.setverticalalignment(verticalalignment.center); // 垂直居中对齐\n\n\n\n//===============全系列支持===============\nhssffont font = book.createfont();//创建字体\nfont.setfontname("宋体");//设置字体名称\nfont.setfontheightinpoints((short)11);//设置字体大小\nfont.setbold//加粗\nstyle.setfont(font);//对样式设置字体\n\n\n\n# 案例展示\n\n\n# 导出带样式的excel\n\n/volumes/zs-2t/zs-study/zs-tool-框架/java报表/资料/code/zs-excel-poi-img\n\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.xssfworkbook;\n\nimport java.io.fileoutputstream;\nimport java.text.simpledateformat;\nimport java.util.date;\nimport java.util.hashmap;\nimport java.util.map;\n\n//导出一个有样式的excel\n//    1、边框线 2、合并单元格 3、行高列宽 4、对齐方式 5、字体\npublic class poidemobyutil {\n\n    public static void main(string[] args) throws exception {\n        workbook workbook = new xssfworkbook();\n        sheet sheet = workbook.createsheet("有样式的数据");\n        \n        //大标题\n        row bigtitlerow = sheet.createrow(0);\n        //设置单元格数据\n        cell cell00 = bigtitlerow.createcell(0);\n        //合并单元格\n        excelexportutil_3_17.addmergedregion(workbook, sheet, 0, 0, 0, 4);\n        //设置数据\n        cellstyle titlestyle = excelexportutil_3_17.settitlestyle(workbook);\n        excelexportutil_3_17.setcellvalue(titlestyle, cell00, "用户信息数据");\n        //自适应高度\n        excelexportutil_3_17.calcandsetrowheight(cell00,40);\n        bigtitlerow.setheightinpoints(42);//固定高度\n\n        //小标题\n        //编号\t姓名\t手机号\t入职日期\t现住址\n        row titlerow = sheet.createrow(1);\n        string[] titles = new string[]{"编号", "姓名", "手机号", "入职日期", "现住址"};\n        cellstyle littletitlestyle = excelexportutil_3_17.setlittletitlestyle(workbook);\n        for (int i = 0; i < titles.length; i++) {\n            cell cell = titlerow.createcell(i);\n            cell.setcellvalue(titles[i]);\n            cell.setcellstyle(littletitlestyle);\n        }\n\n        //存储最大列宽\n        map<integer, integer> maxwidth = new hashmap<>();\n        // 初始化标题的列宽,字体\n        for (int i = 0; i < titles.length; i++) {\n            double calccellwidth = excelexportutil_3_17.calccellwidth(titlerow.getcell(i));\n            maxwidth.put(i, (int) (calccellwidth + 200));\n        }\n\n        string[] users = new string[]{"1","大一","13800000001","2001-03-29","北京市西城区宣武大街1号院"};\n        for (int rownum = 0; rownum < 5; rownum++) {\n            row row = sheet.createrow(2 + rownum);\n            for (int colnum = 0; colnum < titles.length; colnum++) {\n                cell cell = row.createcell(colnum);\n                excelexportutil_3_17.setcellvalue(workbook,cell,users[colnum]);\n\n                int length  = (int) (excelexportutil_3_17.calccellwidth(cell));\n                length = math.min(length, 15000);\n                maxwidth.put(colnum,math.max(length,maxwidth.get(colnum)));\n            }\n        }\n\n        //设置统计好的列宽\n        for (int i = 0; i < titles.length; i++) {\n            sheet.setcolumnwidth(i, maxwidth.get(i));\n        }\n        \n        workbook.write(new fileoutputstream("./teststyle" + new simpledateformat("yyyymmddhhmmss").format(new date()).tostring() + ".xlsx"));\n    }\n\n}\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706807119e3},{title:"POI--读取图片",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87.html",relativePath:"zs-tool-框架/java报表/POI--读取图片.md",key:"v-5a84ce64",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87.html",headers:[{level:2,title:"1.测试文件如下，xls-2003,xlsx-2007",slug:"_1-测试文件如下-xls-2003-xlsx-2007",normalizedTitle:"1.测试文件如下，xls-2003,xlsx-2007",charIndex:16},{level:2,title:"2.读取表格中的浮动图片",slug:"_2-读取表格中的浮动图片",normalizedTitle:"2.读取表格中的浮动图片",charIndex:52},{level:3,title:"2.2.1读取xls文件中图片（2003）",slug:"_2-2-1读取xls文件中图片-2003",normalizedTitle:"2.2.1读取xls文件中图片（2003）",charIndex:946},{level:2,title:"2.3获取嵌入表格中的图片数据",slug:"_2-3获取嵌入表格中的图片数据",normalizedTitle:"2.3获取嵌入表格中的图片数据",charIndex:8544}],lastUpdated:"2024年2月5日星期一下午4点16分",lastUpdatedTimestamp:1707120968e3,headersStr:"1.测试文件如下，xls-2003,xlsx-2007 2.读取表格中的浮动图片 2.2.1读取xls文件中图片（2003） 2.3获取嵌入表格中的图片数据",content:'# POI--读取图片\n\n\n# 1.测试文件如下，xls-2003,xlsx-2007\n\n\n\n\n\n\n# 2.读取表格中的浮动图片\n\n2.1读取表格前需要了解，以下是读取整个工作簿中图片文件方法，但是真实读取图片数据往往需要和其他数据进行对应，比如当有多个工作表（Sheet）时，测试中的那一张图片是vivo手机的图片，是非常不好对应的，这就需要从工作表(Sheet进行图片读取)。\n\n//xls-2003，低版本EXCEL\nHSSFWorkbook book1 = new HSSFWorkbook(new FileInputStream(file));\n//获取工作簿中所有图片\nList<HSSFPictureData> allPictures = book1.getAllPictures();\n//获取工作簿中所有文档对象\nList<HSSFObjectData> allEmbeddedObjects = book1.getAllEmbeddedObjects();\n\n//xlsx-2007，高版本EXCEL\nXSSFWorkbook book = new XSSFWorkbook(new FileInputStream(file));\n//获取工作簿中所有图片\nList<XSSFPictureData> allPictures1 = book.getAllPictures();\n//获取工作簿中所有包数据\nList<PackagePart> allEmbeddedParts = book.getAllEmbeddedParts();\n\n\n2.2读取单个工作表（Sheet）中图片。\n\n public static void main(String[] args) throws Exception {\n      File file= new File("C:/Users/Administrator/Desktop/excel/测试.xls");\n      //File file = new File("C:\\\\Users\\\\Administrator\\\\Desktop\\\\excel\\\\测试.xlsx");\n      read(file); \n }\n\n\n\n# 2.2.1读取xls文件中图片（2003）\n\npublic static void read(File file) throws Exception {\n        HSSFWorkbook book1 = new HSSFWorkbook(new FileInputStream(file));\n        //方式1 获取sheet数量，采用下标方式遍历读取每个工作表数据\n        int sheetsNos = book1.getNumberOfSheets();\n        for (int sheetNo = 0; sheetNo < sheetsNos; sheetNo++) {\n            //HSSFSheet sheet = book1.getSheetAt(sheetNo);\n            Sheet sheet = book1.getSheetAt(sheetNo);\n        }\n        //方式2 获取sheet数量，直接遍历读取每个工作表数据\n        for (Sheet sheet : book1) {\n            HSSFSheet hssSheet = (HSSFSheet) sheet;\n            //获取工作表中绘图包\n            HSSFPatriarch drawingPatriarch = hssSheet.getDrawingPatriarch();\n            if (drawingPatriarch != null) {\n                //获取所有图像形状\n                List<HSSFShape> shapes = drawingPatriarch.getChildren();\n                if (shapes != null) {\n                    //遍历所有形状\n                    for (HSSFShape shape : shapes) {\n                        //获取形状在工作表中的顶点位置信息（anchor锚点）\n                        HSSFClientAnchor anchor = (HSSFClientAnchor) shape.getAnchor();\n                        if (shape instanceof HSSFPicture) {\n                            //形状获取对应的图片数据\n                            HSSFPicture pic = (HSSFPicture) shape;\n                            HSSFPictureData picData = pic.getPictureData();\n                            //图片形状在工作表中的位置, 所在行列起点和终点位置\n                            short c1 = anchor.getCol1();\n                            //short c2 = anchor.getCol2();\n                            int r1 = anchor.getRow1();\n                            //int r2 = anchor.getRow2();\n                            String key = r1 + "行," + c1 + "列";\n                            //TODO 此处可以将图片位置和数据存入缓存中，以便解析表格数据进行对应操作及保存\n                            //保存图片到本地\n                            byte[] data = picData.getData();\n                            //文件扩展名\n                            String suffix = picData.suggestFileExtension();\n                            File dir = new File("C:/Users/Administrator/Desktop/excel/img2003/");\n                            if (!dir.exists()) {\n                                dir.mkdirs();\n                            }\n                            FileUtils.writeByteArrayToFile(new File(dir.getPath() + "/" + key + "." + suffix), data);\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n\n下图可以看见成功读取到xls中的浮动图片，嵌入图片并未被读取到\n\n\n\n\n\n2.2.2读取xlsx文件中图片（2007）\n\npublic static void read(File file) throws Exception {\n        XSSFWorkbook book = new XSSFWorkbook(new FileInputStream(file));\n        //方式1 获取sheet数量，采用下标方式遍历读取每个工作表数据\n        int sheetsNos = book.getNumberOfSheets();\n        for (int sheetNo = 0; sheetNo < sheetsNos; sheetNo++) {\n            //XSSFSheet sheet = book1.getSheetAt(sheetNo);\n            Sheet sheet = book.getSheetAt(sheetNo);\n        }\n        //方式2 获取sheet数量，直接遍历读取每个工作表数据\n        for (Sheet sheet : book) {\n            XSSFSheet xssSheet = (XSSFSheet) sheet;\n            //获取工作表中绘图包\n            XSSFDrawing drawing = xssSheet.getDrawingPatriarch();\n            if (drawing != null) {\n                //获取所有图像形状\n                List<XSSFShape> shapes = drawing.getShapes();\n                if (shapes != null) {\n                    //遍历所有形状\n                    for (XSSFShape shape : shapes) {\n                        //获取形状在工作表中的顶点位置信息（anchor锚点）\n                        XSSFClientAnchor anchor = (XSSFClientAnchor) shape.getAnchor();\n                        if (shape instanceof XSSFPicture) {\n                            //形状获取对应的图片数据\n                            XSSFPicture pic = (XSSFPicture) shape;\n                            XSSFPictureData picData = pic.getPictureData();\n                            //图片形状在工作表中的位置, 所在行列起点和终点位置\n                            short c1 = anchor.getCol1();\n                            //short c2 = anchor.getCol2();\n                            int r1 = anchor.getRow1();\n                            //int r2 = anchor.getRow2();\n                            String key = r1 + "行," + c1 + "列";\n                            //TODO 此处可以将图片位置和数据存入缓存中，以便解析表格数据进行对应操作及保存\n                            //保存图片到本地\n                            byte[] data = picData.getData();\n                            //文件扩展名\n                            String suffix = picData.suggestFileExtension();\n                            File dir = new File("C:/Users/Administrator/Desktop/excel/img2007/");\n                            if (!dir.exists()) {\n                                dir.mkdirs();\n                            }\n                            FileUtils.writeByteArrayToFile(new File(dir.getPath() + "/" + key + "." + suffix), data);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n下图可以看见成功读取到xls中的浮动图片，嵌入图片并未被读取到\n\n\n\n\n\n获取xlsx-2007表格中浮动图片，方式2\n\npublic static void read(File file) throws Exception {\n        XSSFWorkbook book = new XSSFWorkbook(new FileInputStream(file));\n        //方式1 获取sheet数量，采用下标方式遍历读取每个工作表数据\n        int sheetsNos = book.getNumberOfSheets();\n        for (int sheetNo = 0; sheetNo < sheetsNos; sheetNo++) {\n            //XSSFSheet sheet = book1.getSheetAt(sheetNo);\n            Sheet sheet = book.getSheetAt(sheetNo);\n        }\n        //方式2 获取sheet数量，直接遍历读取每个工作表数据\n        for (Sheet sheet : book) {\n            XSSFSheet xssSheet = (XSSFSheet) sheet;\n            List<POIXMLDocumentPart> list = xssSheet.getRelations();\n            for (POIXMLDocumentPart part : list) {\n                if (part instanceof XSSFDrawing) {\n                    //获取工作表中绘图包\n                    XSSFDrawing drawing = (XSSFDrawing) part;\n                    if (drawing != null) {\n                        //获取所有图像形状\n                        List<XSSFShape> shapes = drawing.getShapes();\n                        if (shapes != null) {\n                            //遍历所有形状\n                            for (XSSFShape shape : shapes) {\n                                //获取形状在工作表中的顶点位置信息（anchor锚点）\n                                XSSFClientAnchor anchor = (XSSFClientAnchor) shape.getAnchor();\n                                if (shape instanceof XSSFPicture) {\n                                    //形状获取对应的图片数据\n                                    XSSFPicture pic = (XSSFPicture) shape;\n                                    XSSFPictureData picData = pic.getPictureData();\n                                    //图片形状在工作表中的位置, 所在行列起点和终点位置\n                                    short c1 = anchor.getCol1();\n                                    //short c2 = anchor.getCol2();\n                                    int r1 = anchor.getRow1();\n                                    //int r2 = anchor.getRow2();\n                                    String key = r1 + "行," + c1 + "列";\n                                    //TODO 此处可以将图片位置和数据存入缓存中，以便解析表格数据进行对应操作及保存\n                                    //保存图片到本地\n                                    byte[] data = picData.getData();\n                                    //文件扩展名\n                                    String suffix = picData.suggestFileExtension();\n                                    File dir = new File("C:/Users/Administrator/Desktop/excel/img2007/");\n                                    if (!dir.exists()) {\n                                        dir.mkdirs();\n                                    }\n                                    FileUtils.writeByteArrayToFile(new File(dir.getPath() + "/" + key + "." + suffix), data);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n\n# 2.3获取嵌入表格中的图片数据\n\n2.3.1读取xlsx文件中嵌入单元格图片（2007）\n\n效果如下：\n\n\n\n实现原理：\n\n（1）将xlsx文件扩展名改为zip，变成压缩文件，再解压，如下图\n\n\n\n\n\n\n\n（2）以下3个关键文件信息，定位表格单元格位置，图片ID，图片编号ID，图片文件地址，如下图。\n\n/xl/\\_rels/cellimages.xml.rels  rid与图片文件地址关系\n/xl/cellimages.xml rid与图片编号ID关系\n/xl/worksheets/sheet1.xml 工作表与图片关系**（/xl/worksheets/目录下有多个sheet.xml文件，分别代表不同的工作表，sheet1.xml表示是第一个工作表）**\n\n\n\n\n\n\n由上知道相关信息，以及图片文件，于是可以读取嵌入单元格思路及方法为：\n\na.将xlsx变为压缩包再读取压缩包中的数据，直接读取xlsx中压缩包数据\n\nb.解析压缩包中关键xml文件数据，获取图片与表格单元格关系，以及图片文件信息\n\nc.解析表格数据，对应图片及保存图片\n\n以下示例中，使用PackageHelper直接打开的xlsx压缩包文件，SAX解析XML文件，且最后并未进行单元格列位置与图片映射。\n\n关键代码片段：\n\n    public static void read(File file) throws Exception {\n        //包管理工具打开压缩包\n        OPCPackage opc = PackageHelper.open(new FileInputStream(file));\n        //获取所有包文件\n        List<PackagePart> parts = opc.getParts();\n        //获取每个工作表中的包文件\n        Map<Integer, List<PackagePart>> picturePath = getEmbedPictures(parts);\n        for (Integer key : picturePath.keySet()) {\n            List<PackagePart> rows = picturePath.get(key);\n            for (int i = 0; i < rows.size(); i++) {\n                PackagePart part = rows.get(i);\n                //System.out.println("sheetNo" + key + "\\t第" + i + "行\\t" + part);\n                if (part != null) {\n                    InputStream imgIs = part.getInputStream();\n                    String name = part.getPartName().getName();\n\n                    File dir = new File("C:/Users/Administrator/Desktop/excel/img2007_embed/");\n                    if (!dir.exists()) {\n                        dir.mkdirs();\n                    }\n                    FileUtils.copyInputStreamToFile(imgIs, new File(dir.getPath() + "/工作表" + key + "," + i + "行_" + name.substring(name.lastIndexOf("/") + 1)));\n                }\n            }\n        }\n        try {\n            opc.close();\n        } catch (NullPointerException | IOException e) {\n\n        }\n    }\n\n\n核心代码片段\n\n    private static Map<Integer, List<PackagePart>> getEmbedPictures(List<PackagePart> parts) throws JDOMException, IOException, ParserConfigurationException, SAXException {\n        Map<String, Set<String>> mapImg = new HashMap<>();\n        Map<String, String> mapImgPath = new HashMap<>();\n        Map<Integer, List<String>> dataMap = new HashMap<>();\n\n        for (PackagePart part : parts) {\n//            System.out.println(part.getPartName());\n            PackagePartName partName = part.getPartName();\n            String name = partName.getName();\n            if ("/xl/cellimages.xml".equals(name)) {\n                SAXBuilder builder = new SAXBuilder();\n                // 获取文档\n                Document doc = builder.build(part.getInputStream());\n                // 获取根节点\n                Element root = doc.getRootElement();\n                List<Element> cellImageList = root.getChildren();\n                for (Element imgEle : cellImageList) {\n                    Element xdrPic = imgEle.getChildren().get(0);\n                    Element xdrNvPicPr = xdrPic.getChildren().get(0);\n                    Element xdrBlipFill = xdrPic.getChildren().get(1);\n                    Element aBlip = xdrBlipFill.getChildren().get(0);\n                    Attribute attr = aBlip.getAttributes().get(0);\n                    String imgId = xdrNvPicPr.getChildren().get(0).getAttributeValue("name");\n                    String id = attr.getValue();\n//                    if (id.equals("rId12")) {\n//                        System.out.println(attr.getValue() + "\\t" + imgId);\n//                    }\n                    if (mapImg.containsKey(id)) {\n                        mapImg.get(id).add(imgId);\n                    } else {\n                        Set<String> set = new HashSet<>();\n                        set.add(imgId);\n                        mapImg.put(id, set);\n                    }\n                }\n            }\n\n            if ("/xl/_rels/cellimages.xml.rels".equals(name)) {\n                SAXBuilder builder = new SAXBuilder();\n                // 获取文档\n                Document doc = builder.build(part.getInputStream());\n                // 获取根节点\n                Element root = doc.getRootElement();\n                List<Element> relationshipList = root.getChildren();\n                /*\n                  <Relationship Id="rId999" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="media/image1000.jpeg"/>\n                 */\n                for (Element relationship : relationshipList) {\n                    String id = relationship.getAttributeValue("Id");\n                    String target = relationship.getAttributeValue("Target");\n                    mapImgPath.put(id, target);\n//                    if (id.equals("rId12")) {\n//                        System.out.println(id + "\\t" + target);\n//                    }\n                }\n            }\n\n            if (name.contains("/xl/worksheets/sheet")) {\n//                SAXBuilder builder = new SAXBuilder();\n                // 获取文档\n                String sheetNoStr = name.replace("/xl/worksheets/sheet", "").replace(".xml", "");\n                Integer sheetNo = Integer.valueOf(sheetNoStr) - 1;\n                // 步骤1：创建SAXParserFactory实例\n                SAXParserFactory factory = SAXParserFactory.newInstance();\n                // 步骤2：创建SAXParser实例\n                SAXParser parser = factory.newSAXParser();\n                MySAXParserHandler handler = new MySAXParserHandler();\n                parser.parse(part.getInputStream(), handler);\n\n                List<String> rows = handler.getRows();\n\n                dataMap.put(sheetNo, rows);\n            }\n\n        }\n\n//        for (Integer sheetNo : dataMap.keySet()) {\n//            System.out.println(sheetNo + "\\t" + dataMap.get(sheetNo).size());\n//        }\n\n        Map<String, String> imgMap = new HashMap<>();\n        for (String id : mapImg.keySet()) {\n            Set<String> imgIds = mapImg.get(id);\n            String path = mapImgPath.get(id);\n            for (String imgId : imgIds) {\n                imgMap.put(imgId, path);\n            }\n        }\n        for (Integer key : dataMap.keySet()) {\n            List<String> rows = dataMap.get(key);\n            for (int i = 0; i < rows.size(); i++) {\n                String imgId = rows.get(i);\n                if (imgMap.containsKey(imgId)) {\n                    rows.set(i, imgMap.get(imgId));\n                }\n            }\n        }\n\n        Map<Integer, List<PackagePart>> map = new HashMap<>();\n        for (Integer key : dataMap.keySet()) {\n            List<PackagePart> list = new ArrayList<>();\n            map.put(key, list);\n            List<String> pathList = dataMap.get(key);\n            for (int i = 0; i < pathList.size(); i++) {\n                list.add(i, null);\n                String path = pathList.get(i);\n                if (StringUtils.isNotEmpty(path)) {\n                    for (PackagePart part : parts) {\n                        PackagePartName partName = part.getPartName();\n                        String name = partName.getName();\n                        // /xl/media/image373.jpeg = media/image702.jpeg\n                        if (name.contains(path)) {\n                            list.set(i, part);\n                            break;\n                        }\n                    }\n                }\n\n            }\n        }\n        return map;\n    }\n\n\n插件代码（XML解析），采用的是SAX解析XML\n\npackage com.sx.jz.modules.tm.utils.vo;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * xml解析\n *\n * @author NoClient\n * @date 2023/8/15 14:24\n * @since 1.0\n */\npublic class MySAXParserHandler extends DefaultHandler {\n    String value = null;\n\n    List<String> rows = new ArrayList<>();\n\n    int rowIndex = 0;\n\n    public List<String> getRows() {\n        return rows;\n    }\n\n    /**\n     * 用来标识解析开始\n     */\n    @Override\n    public void startDocument() throws SAXException {\n        // TODO Auto-generated method stub\n        super.startDocument();\n        // System.out.println("SAX解析开始");\n    }\n\n    /**\n     * 用来标识解析结束\n     */\n    @Override\n    public void endDocument() throws SAXException {\n        // TODO Auto-generated method stub\n        super.endDocument();\n        // System.out.println("SAX解析结束");\n    }\n\n    /**\n     * 解析xml元素\n     */\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n        // 调用DefaultHandler类的startElement方法\n        super.startElement(uri, localName, qName, attributes);\n        if (qName.equals("row")) {\n            value = "";\n        }\n\n    }\n\n    @Override\n    public void endElement(String uri, String localName, String qName)\n            throws SAXException {\n        //调用DefaultHandler类的endElement方法\n        super.endElement(uri, localName, qName);\n        if (qName.equals("row")) {\n            if (value != null && value.contains("DISPIMG")) {\n                value = value.substring(value.lastIndexOf("DISPIMG(")).replace("DISPIMG(\\"", "");\n                value = value.substring(0, value.indexOf("\\""));\n                rows.add(rowIndex, value);\n            } else {\n                rows.add(rowIndex, null);\n            }\n            rowIndex++;\n            value = "";\n        }\n    }\n\n    @Override\n    public void characters(char[] ch, int start, int length)\n            throws SAXException {\n        super.characters(ch, start, length);\n        value += new String(ch, start, length);\n    }\n}\n\n\n\n本文转自 https://blog.csdn.net/qq_23123177/article/details/133638391?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-133638391-blog-133701891.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-133638391-blog-133701891.235%5Ev43%5Econtrol&utm_relevant_index=2，如有侵权，请联系删除。',normalizedContent:'# poi--读取图片\n\n\n# 1.测试文件如下，xls-2003,xlsx-2007\n\n\n\n\n\n\n# 2.读取表格中的浮动图片\n\n2.1读取表格前需要了解，以下是读取整个工作簿中图片文件方法，但是真实读取图片数据往往需要和其他数据进行对应，比如当有多个工作表（sheet）时，测试中的那一张图片是vivo手机的图片，是非常不好对应的，这就需要从工作表(sheet进行图片读取)。\n\n//xls-2003，低版本excel\nhssfworkbook book1 = new hssfworkbook(new fileinputstream(file));\n//获取工作簿中所有图片\nlist<hssfpicturedata> allpictures = book1.getallpictures();\n//获取工作簿中所有文档对象\nlist<hssfobjectdata> allembeddedobjects = book1.getallembeddedobjects();\n\n//xlsx-2007，高版本excel\nxssfworkbook book = new xssfworkbook(new fileinputstream(file));\n//获取工作簿中所有图片\nlist<xssfpicturedata> allpictures1 = book.getallpictures();\n//获取工作簿中所有包数据\nlist<packagepart> allembeddedparts = book.getallembeddedparts();\n\n\n2.2读取单个工作表（sheet）中图片。\n\n public static void main(string[] args) throws exception {\n      file file= new file("c:/users/administrator/desktop/excel/测试.xls");\n      //file file = new file("c:\\\\users\\\\administrator\\\\desktop\\\\excel\\\\测试.xlsx");\n      read(file); \n }\n\n\n\n# 2.2.1读取xls文件中图片（2003）\n\npublic static void read(file file) throws exception {\n        hssfworkbook book1 = new hssfworkbook(new fileinputstream(file));\n        //方式1 获取sheet数量，采用下标方式遍历读取每个工作表数据\n        int sheetsnos = book1.getnumberofsheets();\n        for (int sheetno = 0; sheetno < sheetsnos; sheetno++) {\n            //hssfsheet sheet = book1.getsheetat(sheetno);\n            sheet sheet = book1.getsheetat(sheetno);\n        }\n        //方式2 获取sheet数量，直接遍历读取每个工作表数据\n        for (sheet sheet : book1) {\n            hssfsheet hsssheet = (hssfsheet) sheet;\n            //获取工作表中绘图包\n            hssfpatriarch drawingpatriarch = hsssheet.getdrawingpatriarch();\n            if (drawingpatriarch != null) {\n                //获取所有图像形状\n                list<hssfshape> shapes = drawingpatriarch.getchildren();\n                if (shapes != null) {\n                    //遍历所有形状\n                    for (hssfshape shape : shapes) {\n                        //获取形状在工作表中的顶点位置信息（anchor锚点）\n                        hssfclientanchor anchor = (hssfclientanchor) shape.getanchor();\n                        if (shape instanceof hssfpicture) {\n                            //形状获取对应的图片数据\n                            hssfpicture pic = (hssfpicture) shape;\n                            hssfpicturedata picdata = pic.getpicturedata();\n                            //图片形状在工作表中的位置, 所在行列起点和终点位置\n                            short c1 = anchor.getcol1();\n                            //short c2 = anchor.getcol2();\n                            int r1 = anchor.getrow1();\n                            //int r2 = anchor.getrow2();\n                            string key = r1 + "行," + c1 + "列";\n                            //todo 此处可以将图片位置和数据存入缓存中，以便解析表格数据进行对应操作及保存\n                            //保存图片到本地\n                            byte[] data = picdata.getdata();\n                            //文件扩展名\n                            string suffix = picdata.suggestfileextension();\n                            file dir = new file("c:/users/administrator/desktop/excel/img2003/");\n                            if (!dir.exists()) {\n                                dir.mkdirs();\n                            }\n                            fileutils.writebytearraytofile(new file(dir.getpath() + "/" + key + "." + suffix), data);\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n\n下图可以看见成功读取到xls中的浮动图片，嵌入图片并未被读取到\n\n\n\n\n\n2.2.2读取xlsx文件中图片（2007）\n\npublic static void read(file file) throws exception {\n        xssfworkbook book = new xssfworkbook(new fileinputstream(file));\n        //方式1 获取sheet数量，采用下标方式遍历读取每个工作表数据\n        int sheetsnos = book.getnumberofsheets();\n        for (int sheetno = 0; sheetno < sheetsnos; sheetno++) {\n            //xssfsheet sheet = book1.getsheetat(sheetno);\n            sheet sheet = book.getsheetat(sheetno);\n        }\n        //方式2 获取sheet数量，直接遍历读取每个工作表数据\n        for (sheet sheet : book) {\n            xssfsheet xsssheet = (xssfsheet) sheet;\n            //获取工作表中绘图包\n            xssfdrawing drawing = xsssheet.getdrawingpatriarch();\n            if (drawing != null) {\n                //获取所有图像形状\n                list<xssfshape> shapes = drawing.getshapes();\n                if (shapes != null) {\n                    //遍历所有形状\n                    for (xssfshape shape : shapes) {\n                        //获取形状在工作表中的顶点位置信息（anchor锚点）\n                        xssfclientanchor anchor = (xssfclientanchor) shape.getanchor();\n                        if (shape instanceof xssfpicture) {\n                            //形状获取对应的图片数据\n                            xssfpicture pic = (xssfpicture) shape;\n                            xssfpicturedata picdata = pic.getpicturedata();\n                            //图片形状在工作表中的位置, 所在行列起点和终点位置\n                            short c1 = anchor.getcol1();\n                            //short c2 = anchor.getcol2();\n                            int r1 = anchor.getrow1();\n                            //int r2 = anchor.getrow2();\n                            string key = r1 + "行," + c1 + "列";\n                            //todo 此处可以将图片位置和数据存入缓存中，以便解析表格数据进行对应操作及保存\n                            //保存图片到本地\n                            byte[] data = picdata.getdata();\n                            //文件扩展名\n                            string suffix = picdata.suggestfileextension();\n                            file dir = new file("c:/users/administrator/desktop/excel/img2007/");\n                            if (!dir.exists()) {\n                                dir.mkdirs();\n                            }\n                            fileutils.writebytearraytofile(new file(dir.getpath() + "/" + key + "." + suffix), data);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n下图可以看见成功读取到xls中的浮动图片，嵌入图片并未被读取到\n\n\n\n\n\n获取xlsx-2007表格中浮动图片，方式2\n\npublic static void read(file file) throws exception {\n        xssfworkbook book = new xssfworkbook(new fileinputstream(file));\n        //方式1 获取sheet数量，采用下标方式遍历读取每个工作表数据\n        int sheetsnos = book.getnumberofsheets();\n        for (int sheetno = 0; sheetno < sheetsnos; sheetno++) {\n            //xssfsheet sheet = book1.getsheetat(sheetno);\n            sheet sheet = book.getsheetat(sheetno);\n        }\n        //方式2 获取sheet数量，直接遍历读取每个工作表数据\n        for (sheet sheet : book) {\n            xssfsheet xsssheet = (xssfsheet) sheet;\n            list<poixmldocumentpart> list = xsssheet.getrelations();\n            for (poixmldocumentpart part : list) {\n                if (part instanceof xssfdrawing) {\n                    //获取工作表中绘图包\n                    xssfdrawing drawing = (xssfdrawing) part;\n                    if (drawing != null) {\n                        //获取所有图像形状\n                        list<xssfshape> shapes = drawing.getshapes();\n                        if (shapes != null) {\n                            //遍历所有形状\n                            for (xssfshape shape : shapes) {\n                                //获取形状在工作表中的顶点位置信息（anchor锚点）\n                                xssfclientanchor anchor = (xssfclientanchor) shape.getanchor();\n                                if (shape instanceof xssfpicture) {\n                                    //形状获取对应的图片数据\n                                    xssfpicture pic = (xssfpicture) shape;\n                                    xssfpicturedata picdata = pic.getpicturedata();\n                                    //图片形状在工作表中的位置, 所在行列起点和终点位置\n                                    short c1 = anchor.getcol1();\n                                    //short c2 = anchor.getcol2();\n                                    int r1 = anchor.getrow1();\n                                    //int r2 = anchor.getrow2();\n                                    string key = r1 + "行," + c1 + "列";\n                                    //todo 此处可以将图片位置和数据存入缓存中，以便解析表格数据进行对应操作及保存\n                                    //保存图片到本地\n                                    byte[] data = picdata.getdata();\n                                    //文件扩展名\n                                    string suffix = picdata.suggestfileextension();\n                                    file dir = new file("c:/users/administrator/desktop/excel/img2007/");\n                                    if (!dir.exists()) {\n                                        dir.mkdirs();\n                                    }\n                                    fileutils.writebytearraytofile(new file(dir.getpath() + "/" + key + "." + suffix), data);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n\n# 2.3获取嵌入表格中的图片数据\n\n2.3.1读取xlsx文件中嵌入单元格图片（2007）\n\n效果如下：\n\n\n\n实现原理：\n\n（1）将xlsx文件扩展名改为zip，变成压缩文件，再解压，如下图\n\n\n\n\n\n\n\n（2）以下3个关键文件信息，定位表格单元格位置，图片id，图片编号id，图片文件地址，如下图。\n\n/xl/\\_rels/cellimages.xml.rels  rid与图片文件地址关系\n/xl/cellimages.xml rid与图片编号id关系\n/xl/worksheets/sheet1.xml 工作表与图片关系**（/xl/worksheets/目录下有多个sheet.xml文件，分别代表不同的工作表，sheet1.xml表示是第一个工作表）**\n\n\n\n\n\n\n由上知道相关信息，以及图片文件，于是可以读取嵌入单元格思路及方法为：\n\na.将xlsx变为压缩包再读取压缩包中的数据，直接读取xlsx中压缩包数据\n\nb.解析压缩包中关键xml文件数据，获取图片与表格单元格关系，以及图片文件信息\n\nc.解析表格数据，对应图片及保存图片\n\n以下示例中，使用packagehelper直接打开的xlsx压缩包文件，sax解析xml文件，且最后并未进行单元格列位置与图片映射。\n\n关键代码片段：\n\n    public static void read(file file) throws exception {\n        //包管理工具打开压缩包\n        opcpackage opc = packagehelper.open(new fileinputstream(file));\n        //获取所有包文件\n        list<packagepart> parts = opc.getparts();\n        //获取每个工作表中的包文件\n        map<integer, list<packagepart>> picturepath = getembedpictures(parts);\n        for (integer key : picturepath.keyset()) {\n            list<packagepart> rows = picturepath.get(key);\n            for (int i = 0; i < rows.size(); i++) {\n                packagepart part = rows.get(i);\n                //system.out.println("sheetno" + key + "\\t第" + i + "行\\t" + part);\n                if (part != null) {\n                    inputstream imgis = part.getinputstream();\n                    string name = part.getpartname().getname();\n\n                    file dir = new file("c:/users/administrator/desktop/excel/img2007_embed/");\n                    if (!dir.exists()) {\n                        dir.mkdirs();\n                    }\n                    fileutils.copyinputstreamtofile(imgis, new file(dir.getpath() + "/工作表" + key + "," + i + "行_" + name.substring(name.lastindexof("/") + 1)));\n                }\n            }\n        }\n        try {\n            opc.close();\n        } catch (nullpointerexception | ioexception e) {\n\n        }\n    }\n\n\n核心代码片段\n\n    private static map<integer, list<packagepart>> getembedpictures(list<packagepart> parts) throws jdomexception, ioexception, parserconfigurationexception, saxexception {\n        map<string, set<string>> mapimg = new hashmap<>();\n        map<string, string> mapimgpath = new hashmap<>();\n        map<integer, list<string>> datamap = new hashmap<>();\n\n        for (packagepart part : parts) {\n//            system.out.println(part.getpartname());\n            packagepartname partname = part.getpartname();\n            string name = partname.getname();\n            if ("/xl/cellimages.xml".equals(name)) {\n                saxbuilder builder = new saxbuilder();\n                // 获取文档\n                document doc = builder.build(part.getinputstream());\n                // 获取根节点\n                element root = doc.getrootelement();\n                list<element> cellimagelist = root.getchildren();\n                for (element imgele : cellimagelist) {\n                    element xdrpic = imgele.getchildren().get(0);\n                    element xdrnvpicpr = xdrpic.getchildren().get(0);\n                    element xdrblipfill = xdrpic.getchildren().get(1);\n                    element ablip = xdrblipfill.getchildren().get(0);\n                    attribute attr = ablip.getattributes().get(0);\n                    string imgid = xdrnvpicpr.getchildren().get(0).getattributevalue("name");\n                    string id = attr.getvalue();\n//                    if (id.equals("rid12")) {\n//                        system.out.println(attr.getvalue() + "\\t" + imgid);\n//                    }\n                    if (mapimg.containskey(id)) {\n                        mapimg.get(id).add(imgid);\n                    } else {\n                        set<string> set = new hashset<>();\n                        set.add(imgid);\n                        mapimg.put(id, set);\n                    }\n                }\n            }\n\n            if ("/xl/_rels/cellimages.xml.rels".equals(name)) {\n                saxbuilder builder = new saxbuilder();\n                // 获取文档\n                document doc = builder.build(part.getinputstream());\n                // 获取根节点\n                element root = doc.getrootelement();\n                list<element> relationshiplist = root.getchildren();\n                /*\n                  <relationship id="rid999" type="http://schemas.openxmlformats.org/officedocument/2006/relationships/image" target="media/image1000.jpeg"/>\n                 */\n                for (element relationship : relationshiplist) {\n                    string id = relationship.getattributevalue("id");\n                    string target = relationship.getattributevalue("target");\n                    mapimgpath.put(id, target);\n//                    if (id.equals("rid12")) {\n//                        system.out.println(id + "\\t" + target);\n//                    }\n                }\n            }\n\n            if (name.contains("/xl/worksheets/sheet")) {\n//                saxbuilder builder = new saxbuilder();\n                // 获取文档\n                string sheetnostr = name.replace("/xl/worksheets/sheet", "").replace(".xml", "");\n                integer sheetno = integer.valueof(sheetnostr) - 1;\n                // 步骤1：创建saxparserfactory实例\n                saxparserfactory factory = saxparserfactory.newinstance();\n                // 步骤2：创建saxparser实例\n                saxparser parser = factory.newsaxparser();\n                mysaxparserhandler handler = new mysaxparserhandler();\n                parser.parse(part.getinputstream(), handler);\n\n                list<string> rows = handler.getrows();\n\n                datamap.put(sheetno, rows);\n            }\n\n        }\n\n//        for (integer sheetno : datamap.keyset()) {\n//            system.out.println(sheetno + "\\t" + datamap.get(sheetno).size());\n//        }\n\n        map<string, string> imgmap = new hashmap<>();\n        for (string id : mapimg.keyset()) {\n            set<string> imgids = mapimg.get(id);\n            string path = mapimgpath.get(id);\n            for (string imgid : imgids) {\n                imgmap.put(imgid, path);\n            }\n        }\n        for (integer key : datamap.keyset()) {\n            list<string> rows = datamap.get(key);\n            for (int i = 0; i < rows.size(); i++) {\n                string imgid = rows.get(i);\n                if (imgmap.containskey(imgid)) {\n                    rows.set(i, imgmap.get(imgid));\n                }\n            }\n        }\n\n        map<integer, list<packagepart>> map = new hashmap<>();\n        for (integer key : datamap.keyset()) {\n            list<packagepart> list = new arraylist<>();\n            map.put(key, list);\n            list<string> pathlist = datamap.get(key);\n            for (int i = 0; i < pathlist.size(); i++) {\n                list.add(i, null);\n                string path = pathlist.get(i);\n                if (stringutils.isnotempty(path)) {\n                    for (packagepart part : parts) {\n                        packagepartname partname = part.getpartname();\n                        string name = partname.getname();\n                        // /xl/media/image373.jpeg = media/image702.jpeg\n                        if (name.contains(path)) {\n                            list.set(i, part);\n                            break;\n                        }\n                    }\n                }\n\n            }\n        }\n        return map;\n    }\n\n\n插件代码（xml解析），采用的是sax解析xml\n\npackage com.sx.jz.modules.tm.utils.vo;\n\nimport org.xml.sax.attributes;\nimport org.xml.sax.saxexception;\nimport org.xml.sax.helpers.defaulthandler;\n\nimport java.util.arraylist;\nimport java.util.list;\n\n/**\n * xml解析\n *\n * @author noclient\n * @date 2023/8/15 14:24\n * @since 1.0\n */\npublic class mysaxparserhandler extends defaulthandler {\n    string value = null;\n\n    list<string> rows = new arraylist<>();\n\n    int rowindex = 0;\n\n    public list<string> getrows() {\n        return rows;\n    }\n\n    /**\n     * 用来标识解析开始\n     */\n    @override\n    public void startdocument() throws saxexception {\n        // todo auto-generated method stub\n        super.startdocument();\n        // system.out.println("sax解析开始");\n    }\n\n    /**\n     * 用来标识解析结束\n     */\n    @override\n    public void enddocument() throws saxexception {\n        // todo auto-generated method stub\n        super.enddocument();\n        // system.out.println("sax解析结束");\n    }\n\n    /**\n     * 解析xml元素\n     */\n    @override\n    public void startelement(string uri, string localname, string qname, attributes attributes) throws saxexception {\n        // 调用defaulthandler类的startelement方法\n        super.startelement(uri, localname, qname, attributes);\n        if (qname.equals("row")) {\n            value = "";\n        }\n\n    }\n\n    @override\n    public void endelement(string uri, string localname, string qname)\n            throws saxexception {\n        //调用defaulthandler类的endelement方法\n        super.endelement(uri, localname, qname);\n        if (qname.equals("row")) {\n            if (value != null && value.contains("dispimg")) {\n                value = value.substring(value.lastindexof("dispimg(")).replace("dispimg(\\"", "");\n                value = value.substring(0, value.indexof("\\""));\n                rows.add(rowindex, value);\n            } else {\n                rows.add(rowindex, null);\n            }\n            rowindex++;\n            value = "";\n        }\n    }\n\n    @override\n    public void characters(char[] ch, int start, int length)\n            throws saxexception {\n        super.characters(ch, start, length);\n        value += new string(ch, start, length);\n    }\n}\n\n\n\n本文转自 https://blog.csdn.net/qq_23123177/article/details/133638391?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7edefault%7ectrlist%7erate-1-133638391-blog-133701891.235%5ev43%5econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7edefault%7ectrlist%7erate-1-133638391-blog-133701891.235%5ev43%5econtrol&utm_relevant_index=2，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1707120968e3},{title:"java报表说明",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/",relativePath:"zs-tool-框架/java报表/README.md",key:"v-8d39bce0",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/",lastUpdated:"2024年1月23日星期二晚上8点04分",lastUpdatedTimestamp:1706011441e3,headersStr:null,content:"# java报表说明",normalizedContent:"# java报表说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706011441e3},{title:"11、back-to-top",frontmatter:{autoSort:90},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/11%E3%80%81back-to-top.html",relativePath:"zs-tool-框架/vuepress/11、back-to-top.md",key:"v-560efacf",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/11%E3%80%81back-to-top.html",lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:null,content:"# 11、back-to-top\n\n\n\n",normalizedContent:"# 11、back-to-top\n\n\n\n",charsets:{},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"12、谷歌分析",frontmatter:{autoSort:89},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/12%E3%80%81%E8%B0%B7%E6%AD%8C%E5%88%86%E6%9E%90.html",relativePath:"zs-tool-框架/vuepress/12、谷歌分析.md",key:"v-3a157f1b",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/12%E3%80%81%E8%B0%B7%E6%AD%8C%E5%88%86%E6%9E%90.html",lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:null,content:"# 12、谷歌分析\n\nhttps://analytics.google.com/\n\n\n\n",normalizedContent:"# 12、谷歌分析\n\nhttps://analytics.google.com/\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"报表--0.环境说明-Excel说明",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/%E6%8A%A5%E8%A1%A8--0.%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E-Excel%E8%AF%B4%E6%98%8E.html",relativePath:"zs-tool-框架/java报表/报表--0.环境说明-Excel说明.md",key:"v-2c32d910",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/%E6%8A%A5%E8%A1%A8--0.%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E-Excel%E8%AF%B4%E6%98%8E.html",headers:[{level:2,title:"开发环境搭建",slug:"开发环境搭建",normalizedTitle:"开发环境搭建",charIndex:148},{level:2,title:"Excel说明",slug:"excel说明",normalizedTitle:"excel说明",charIndex:13},{level:2,title:"Excel的两种版本",slug:"excel的两种版本",normalizedTitle:"excel的两种版本",charIndex:567},{level:2,title:"常见的Excel操作工具",slug:"常见的excel操作工具",normalizedTitle:"常见的excel操作工具",charIndex:755},{level:3,title:"JXL",slug:"jxl",normalizedTitle:"jxl",charIndex:795},{level:3,title:"POI",slug:"poi",normalizedTitle:"poi",charIndex:799}],lastUpdated:"2024年1月24日星期三上午9点05分",lastUpdatedTimestamp:1706058318e3,headersStr:"开发环境搭建 Excel说明 Excel的两种版本 常见的Excel操作工具 JXL POI",content:"# 报表--0.环境说明-Excel说明\n\n报表[forms for reporting to the higher organizations]，就是向上级报告情况的表格。简单的说：报表就是用表格、图表等格式来动态显示数据，可以用公式表示为：“报表 = 多样的格式 + 动态的数据”。\n\n\n# 开发环境搭建\n\n功能说明：整个案例我们操作用户表，做一个企业员工（用户）数据的导入导出。\n\n我们使用SpringBoot+通用mapper+vue方式搭建开发环境\n\n第一步：准备数据库，把资料文件夹下中的sql脚本直接执行\n\n《report_manager_db.sql》\n\n第二步：打开idea或Eclipse，导入资料文件夹中准备好的《user_management》项目\n\n以idea为例，导入后整体结构如下\n\n\n\n第三步：启动引导类，浏览器访问 http://localhost:8080/list.html\n\n\n\n\n# Excel说明\n\n在企业级应用开发中，Excel报表是一种最常见的报表需求。Excel报表开发一般分为两种形式： 1、为了方便操作，基于Excel的报表批量上传数据，也就是把Excel中的数据导入到系统中。 2、通过java代码生成Excel报表。也就是把系统中的数据导出到Excel中，方便查阅。\n\n\n# Excel的两种版本\n\n目前世面上的Excel分为两个大的版本Excel2003和Excel2007及以上两个版本； 两者之间的区别如下：\n\n\n\nExcel2003 是一个特有的二进制格式，其核心结构是复合文档类型的结构，存储数据量较小；\n\nExcel2007 的核心结构是 XML 类型的结构，采用的是基于 XML 的压缩方式，使其占用的空间更小，\n\n操作效率更高\n\n\n# 常见的Excel操作工具\n\nJava中常见的用来操作Excel的方式一般有2种：JXL和POI。\n\n\n# JXL\n\nJXL只能对Excel进行操作,属于比较老的框架，它只支持到Excel 95-2000的版本。现在已经停止更新和 维护,所以本课程中只时简单地演示一下jxl的代码，不会把它作为重点，\n\n\n# POI\n\nPOI是apache的项目,可对微软的Word,Excel,PPT进行操作,包括office2003和2007,Excle2003和2007。 poi现在一直有更新。所以现在主流使用POI。\n\nApache POI是Apache软件基金会的开源项目，由Java编写的免费开源的跨平台的 Java API，Apache POI提供API给Java语言操作Microsoft Office的功能。\n\nAPI对象介绍\n\n对象               2003           2007及以上\n工作簿   WorkBook   HSSFWordBook   XSSFWorkBook\n工作表   Sheet      HSSFSheet      XSSFSheet\n行     Row        HSSFRow        XSSFRow\n单元格   Cell       HSSFCell       XSSFCell",normalizedContent:"# 报表--0.环境说明-excel说明\n\n报表[forms for reporting to the higher organizations]，就是向上级报告情况的表格。简单的说：报表就是用表格、图表等格式来动态显示数据，可以用公式表示为：“报表 = 多样的格式 + 动态的数据”。\n\n\n# 开发环境搭建\n\n功能说明：整个案例我们操作用户表，做一个企业员工（用户）数据的导入导出。\n\n我们使用springboot+通用mapper+vue方式搭建开发环境\n\n第一步：准备数据库，把资料文件夹下中的sql脚本直接执行\n\n《report_manager_db.sql》\n\n第二步：打开idea或eclipse，导入资料文件夹中准备好的《user_management》项目\n\n以idea为例，导入后整体结构如下\n\n\n\n第三步：启动引导类，浏览器访问 http://localhost:8080/list.html\n\n\n\n\n# excel说明\n\n在企业级应用开发中，excel报表是一种最常见的报表需求。excel报表开发一般分为两种形式： 1、为了方便操作，基于excel的报表批量上传数据，也就是把excel中的数据导入到系统中。 2、通过java代码生成excel报表。也就是把系统中的数据导出到excel中，方便查阅。\n\n\n# excel的两种版本\n\n目前世面上的excel分为两个大的版本excel2003和excel2007及以上两个版本； 两者之间的区别如下：\n\n\n\nexcel2003 是一个特有的二进制格式，其核心结构是复合文档类型的结构，存储数据量较小；\n\nexcel2007 的核心结构是 xml 类型的结构，采用的是基于 xml 的压缩方式，使其占用的空间更小，\n\n操作效率更高\n\n\n# 常见的excel操作工具\n\njava中常见的用来操作excel的方式一般有2种：jxl和poi。\n\n\n# jxl\n\njxl只能对excel进行操作,属于比较老的框架，它只支持到excel 95-2000的版本。现在已经停止更新和 维护,所以本课程中只时简单地演示一下jxl的代码，不会把它作为重点，\n\n\n# poi\n\npoi是apache的项目,可对微软的word,excel,ppt进行操作,包括office2003和2007,excle2003和2007。 poi现在一直有更新。所以现在主流使用poi。\n\napache poi是apache软件基金会的开源项目，由java编写的免费开源的跨平台的 java api，apache poi提供api给java语言操作microsoft office的功能。\n\napi对象介绍\n\n对象               2003           2007及以上\n工作簿   workbook   hssfwordbook   xssfworkbook\n工作表   sheet      hssfsheet      xssfsheet\n行     row        hssfrow        xssfrow\n单元格   cell       hssfcell       xssfcell",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706000703e3},{title:"14、保护隐私信息",frontmatter:{autoSort:87,title:"14、保护隐私信息"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/14%E3%80%81%E4%BF%9D%E6%8A%A4%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF.html",relativePath:"zs-tool-框架/vuepress/14、保护隐私信息.md",key:"v-62a025b6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/14%E3%80%81%E4%BF%9D%E6%8A%A4%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF.html",lastUpdated:"2023年12月7日星期四上午11点28分",lastUpdatedTimestamp:1701919721e3,headersStr:null,content:"秘钥存储文件\n\n\n\n使用秘钥\n\n\n\n忽略提交\n\n",normalizedContent:"秘钥存储文件\n\n\n\n使用秘钥\n\n\n\n忽略提交\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"13、分割config",frontmatter:{autoSort:88},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/13%E3%80%81%E5%88%86%E5%89%B2config.html",relativePath:"zs-tool-框架/vuepress/13、分割config.md",key:"v-7680e5a4",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/13%E3%80%81%E5%88%86%E5%89%B2config.html",lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:null,content:"# 13、分割config\n\n> config.js\n\n\nconst headConfig = require('./config/headConfig');\nconst pluginsConfig = require('./config/pluginsConfig');\nconst themeConfig = require('./config/themeConfig')\n\nmodule.exports = {\n  title: \"小邵子\",\n  description: '小邵子的个人笔记',\n  head: headConfig,\n  base: \"/docs/\",\n  plugins: pluginsConfig,\n  themeConfig: themeConfig,\n}\n\n\n> 分割的js\n\n",normalizedContent:"# 13、分割config\n\n> config.js\n\n\nconst headconfig = require('./config/headconfig');\nconst pluginsconfig = require('./config/pluginsconfig');\nconst themeconfig = require('./config/themeconfig')\n\nmodule.exports = {\n  title: \"小邵子\",\n  description: '小邵子的个人笔记',\n  head: headconfig,\n  base: \"/docs/\",\n  plugins: pluginsconfig,\n  themeconfig: themeconfig,\n}\n\n\n> 分割的js\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"10、vssue评论",frontmatter:{autoSort:91,title:"10、vssue评论"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/10%E3%80%81vssue%E8%AF%84%E8%AE%BA.html",relativePath:"zs-tool-框架/vuepress/10、vssue评论.md",key:"v-480a0c5d",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/10%E3%80%81vssue%E8%AF%84%E8%AE%BA.html",headers:[{level:2,title:"vssue使用",slug:"vssue使用",normalizedTitle:"vssue使用",charIndex:2},{level:3,title:"1、创建 OAuth application",slug:"_1、创建-oauth-application",normalizedTitle:"1、创建 oauth application",charIndex:94},{level:3,title:"2、安装插件",slug:"_2、安装插件",normalizedTitle:"2、安装插件",charIndex:169},{level:3,title:"3、插件使用",slug:"_3、插件使用",normalizedTitle:"3、插件使用",charIndex:273},{level:3,title:"4、测试验证",slug:"_4、测试验证",normalizedTitle:"4、测试验证",charIndex:650},{level:3,title:"优化1、自动创建issues",slug:"优化1、自动创建issues",normalizedTitle:"优化1、自动创建issues",charIndex:667},{level:3,title:"优化2、全局引入",slug:"优化2、全局引入",normalizedTitle:"优化2、全局引入",charIndex:700}],lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:"vssue使用 1、创建 OAuth application 2、安装插件 3、插件使用 4、测试验证 优化1、自动创建issues 优化2、全局引入",content:"# vssue使用\n\nhttps://vssue.js.org/\n\n\n\n\n\n\n\n按照文档 https://vssue.js.org/zh/guide/github.html 操作\n\n\n# 1、创建 OAuth application\n\nhttps://github.com/settings/applications/new\n\n\n\n\n# 2、安装插件\n\n\n\nyarn add @vssue/vuepress-plugin-vssue\n\n# 这里安装的是v4后面配置时需要注意\nyarn add @vssue/api-github-v4\n\n\n\n# 3、插件使用\n\n'@vssue/vuepress-plugin-vssue': {\n    // 设置 `platform` 而不是 `api`\n    platform: 'github-v4',//这里需要加-v4来使用v4版本的api\n\n    // 其他的 Vssue 配置\n    //GitHub账号名称\n    owner: 'zs-mcu',\n    //仓库名称\n    repo: 'docs',\n    //Oauth信息\n    clientId: '09b48aa193526adeb1a8',\n    clientSecret: 'e3bfa36d814f2a4cc89ebefbb42858d714b4091e',\n  },\n\n\n不然会出现下面提示\n\n\n\n正确的配置的启动效果是这样\n\n\n\n\n\n填入配置项中\n\n\n\n\n\n\n# 4、测试验证\n\n\n\n\n\n\n\n\n# 优化1、自动创建issues\n\n\n\n\n\n设置中文显示\n\n\n\n\n# 优化2、全局引入\n\n需要修改默认主体\n\n> 创建js文件继承原有主题\n\n\n\n> 文件覆盖约定\n\n\n\n> 从官网复制出文件，以及文件所需的工具类\n\n\n\n> 修改测试\n\n\n\n\n\n> 将vssue组件添加到页面底部的插槽中\n\n\n\n> 修改为正式环境地址，发布测试\n\n",normalizedContent:"# vssue使用\n\nhttps://vssue.js.org/\n\n\n\n\n\n\n\n按照文档 https://vssue.js.org/zh/guide/github.html 操作\n\n\n# 1、创建 oauth application\n\nhttps://github.com/settings/applications/new\n\n\n\n\n# 2、安装插件\n\n\n\nyarn add @vssue/vuepress-plugin-vssue\n\n# 这里安装的是v4后面配置时需要注意\nyarn add @vssue/api-github-v4\n\n\n\n# 3、插件使用\n\n'@vssue/vuepress-plugin-vssue': {\n    // 设置 `platform` 而不是 `api`\n    platform: 'github-v4',//这里需要加-v4来使用v4版本的api\n\n    // 其他的 vssue 配置\n    //github账号名称\n    owner: 'zs-mcu',\n    //仓库名称\n    repo: 'docs',\n    //oauth信息\n    clientid: '09b48aa193526adeb1a8',\n    clientsecret: 'e3bfa36d814f2a4cc89ebefbb42858d714b4091e',\n  },\n\n\n不然会出现下面提示\n\n\n\n正确的配置的启动效果是这样\n\n\n\n\n\n填入配置项中\n\n\n\n\n\n\n# 4、测试验证\n\n\n\n\n\n\n\n\n# 优化1、自动创建issues\n\n\n\n\n\n设置中文显示\n\n\n\n\n# 优化2、全局引入\n\n需要修改默认主体\n\n> 创建js文件继承原有主题\n\n\n\n> 文件覆盖约定\n\n\n\n> 从官网复制出文件，以及文件所需的工具类\n\n\n\n> 修改测试\n\n\n\n\n\n> 将vssue组件添加到页面底部的插槽中\n\n\n\n> 修改为正式环境地址，发布测试\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"15、md用法进阶",frontmatter:{autoSort:86,title:"15、md用法进阶"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/15%E3%80%81md%E7%94%A8%E6%B3%95%E8%BF%9B%E9%98%B6.html",relativePath:"zs-tool-框架/vuepress/15、md用法进阶.md",key:"v-23e5c39c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/15%E3%80%81md%E7%94%A8%E6%B3%95%E8%BF%9B%E9%98%B6.html",headers:[{level:2,title:"示例：封装countUp.js为Vue组件",slug:"示例-封装countup-js为vue组件",normalizedTitle:"示例：封装countup.js为vue组件",charIndex:71},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:181},{level:3,title:"创建vue文件",slug:"创建vue文件",normalizedTitle:"创建vue文件",charIndex:210},{level:3,title:"引入使用",slug:"引入使用",normalizedTitle:"引入使用",charIndex:1679},{level:3,title:"Markdown 导入代码段",slug:"markdown-导入代码段",normalizedTitle:"markdown 导入代码段",charIndex:1720}],lastUpdated:"2023年12月7日星期四上午11点28分",lastUpdatedTimestamp:1701919721e3,headersStr:"示例：封装countUp.js为Vue组件 安装 创建vue文件 引入使用 Markdown 导入代码段",content:'vuepress markdown说明文档\n\nhttps://www.vuepress.cn/guide/markdown.html\n\n\n# 示例：封装countUp.js为Vue组件\n\nhttps://github.com/inorganik/countUp.js\n\nhttps://inorganik.github.io/countUp.js/\n\n\n\n\n# 安装\n\nyarn add countup.js\n\n\n\n# 创建vue文件\n\n> 全局Vue组件存放位置\n\n\n\n> 使用 <ClientOnly>包裹我们的组件内容\n\n\n\n> 在mounted中导入第三方组件\n\n\n\n> 官方文档使用方式\n> \n> https://github.com/inorganik/countUp.js\n\n\n\n\n\n> 编写完整代码\n\n<template>\r\n  <div>\r\n    <ClientOnly>\r\n      <slot name="before" />\r\n      <span ref="countUp"></span>\r\n    </ClientOnly>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: "CountUp",\r\n  props: {\r\n    startVal: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    endVal: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    decimalPlaces: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    duration: {\r\n      type: Number,\r\n      default: 2\r\n    },\r\n    delay: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  mounted() { \r\n    this.init();\r\n  },\r\n  data() {\r\n    return {\r\n      counter: null\r\n    }\r\n  },\r\n  methods: {\r\n    init() {\r\n      import("countup.js").then(module => {\r\n        this.$nextTick(() => {\r\n          //构造counter对象：目标元素，结束数字，其他配置项\r\n          this.counter = new module.CountUp(this.$refs.countUp,this.endVal,{\r\n            //起始数字\r\n            startVal: this.startVal,\r\n            //数字分割符\r\n            decimalPlaces: this.decimalPlaces,\r\n            //动画时长\r\n            duration: this.duration\r\n          });\r\n\r\n          //启动\r\n          setTimeout(() => {\r\n            this.counter.start();\r\n          }, this.delay);\r\n        })\r\n      })\r\n    },\r\n    //销毁\r\n    beforeDestroy() {\r\n      this.counter.reset();\r\n      this.counter = null;\r\n    },\r\n  }\r\n}\r\n<\/script>\r\n\n\n\n# 引入使用\n\n<CountUp :endVal = "2020"/>\n\n\n\n\n\n# Markdown 导入代码段\n\n> <<< @/filepath\n> \n> \n> https://www.vuepress.cn/guide/markdown.html#%E5%AF%BC%E5%85%A5%E4%BB%A3%E7%A0%81%E6%AE%B5\n\n\n\n',normalizedContent:'vuepress markdown说明文档\n\nhttps://www.vuepress.cn/guide/markdown.html\n\n\n# 示例：封装countup.js为vue组件\n\nhttps://github.com/inorganik/countup.js\n\nhttps://inorganik.github.io/countup.js/\n\n\n\n\n# 安装\n\nyarn add countup.js\n\n\n\n# 创建vue文件\n\n> 全局vue组件存放位置\n\n\n\n> 使用 <clientonly>包裹我们的组件内容\n\n\n\n> 在mounted中导入第三方组件\n\n\n\n> 官方文档使用方式\n> \n> https://github.com/inorganik/countup.js\n\n\n\n\n\n> 编写完整代码\n\n<template>\r\n  <div>\r\n    <clientonly>\r\n      <slot name="before" />\r\n      <span ref="countup"></span>\r\n    </clientonly>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: "countup",\r\n  props: {\r\n    startval: {\r\n      type: number,\r\n      default: 0\r\n    },\r\n    endval: {\r\n      type: number,\r\n      required: true\r\n    },\r\n    decimalplaces: {\r\n      type: number,\r\n      default: 0\r\n    },\r\n    duration: {\r\n      type: number,\r\n      default: 2\r\n    },\r\n    delay: {\r\n      type: number,\r\n      default: 0\r\n    }\r\n  },\r\n  mounted() { \r\n    this.init();\r\n  },\r\n  data() {\r\n    return {\r\n      counter: null\r\n    }\r\n  },\r\n  methods: {\r\n    init() {\r\n      import("countup.js").then(module => {\r\n        this.$nexttick(() => {\r\n          //构造counter对象：目标元素，结束数字，其他配置项\r\n          this.counter = new module.countup(this.$refs.countup,this.endval,{\r\n            //起始数字\r\n            startval: this.startval,\r\n            //数字分割符\r\n            decimalplaces: this.decimalplaces,\r\n            //动画时长\r\n            duration: this.duration\r\n          });\r\n\r\n          //启动\r\n          settimeout(() => {\r\n            this.counter.start();\r\n          }, this.delay);\r\n        })\r\n      })\r\n    },\r\n    //销毁\r\n    beforedestroy() {\r\n      this.counter.reset();\r\n      this.counter = null;\r\n    },\r\n  }\r\n}\r\n<\/script>\r\n\n\n\n# 引入使用\n\n<countup :endval = "2020"/>\n\n\n\n\n\n# markdown 导入代码段\n\n> <<< @/filepath\n> \n> \n> https://www.vuepress.cn/guide/markdown.html#%e5%af%bc%e5%85%a5%e4%bb%a3%e7%a0%81%e6%ae%b5\n\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"POI--工具类封装3-17使用文档",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%853-17%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.html",relativePath:"zs-tool-框架/java报表/POI--工具类封装3-17使用文档.md",key:"v-51c2e62a",path:"/zs-tool-%E6%A1%86%E6%9E%B6/java%E6%8A%A5%E8%A1%A8/POI--%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%853-17%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.html",headers:[{level:2,title:"合并单元格",slug:"合并单元格",normalizedTitle:"合并单元格",charIndex:47},{level:2,title:"合并单元格自适应高度",slug:"合并单元格自适应高度",normalizedTitle:"合并单元格自适应高度",charIndex:337},{level:2,title:"锁定单元格",slug:"锁定单元格",normalizedTitle:"锁定单元格",charIndex:113},{level:2,title:"单元格注释",slug:"单元格注释",normalizedTitle:"单元格注释",charIndex:134},{level:2,title:"自适应宽度",slug:"自适应宽度",normalizedTitle:"自适应宽度",charIndex:1151},{level:2,title:"设置水印",slug:"设置水印",normalizedTitle:"设置水印",charIndex:1887},{level:2,title:"设置下拉框",slug:"设置下拉框",normalizedTitle:"设置下拉框",charIndex:2012},{level:2,title:"设置密码",slug:"设置密码",normalizedTitle:"设置密码",charIndex:2294},{level:2,title:"Excel转图片",slug:"excel转图片",normalizedTitle:"excel转图片",charIndex:2597}],lastUpdated:"2024年2月5日星期一下午4点16分",lastUpdatedTimestamp:1707120968e3,headersStr:"合并单元格 合并单元格自适应高度 锁定单元格 单元格注释 自适应宽度 设置水印 设置下拉框 设置密码 Excel转图片",content:'# POI--工具类封装3-17使用文档\n\n功能            XLS   XLSX\n合并单元格         ✅     ✅\n合并单元格的自适应行高   ✅     ✅\n自适应列宽         ✅     ✅\n锁定单元格               \n单元格注释         ✅     ✅\n设置下拉          ✅     ✅\nsheet水印       ❌     ✅\n文档加密          ❌     ✅\n图片导出          ✅     ✅\n\n\n# 合并单元格\n\n\n\n//合并单元格\nExcelExportUtil_3_17.addMergedRegion(workbook, sheet, 0, 0, 0, 4);\n\n\n\n# 合并单元格自适应高度\n\n\n\n//合并单元格\nExcelExportUtil_3_17.addMergedRegion(workbook, sheet, 0, 0, 0, 4);\n//设置数据\nCellStyle titleStyle = ExcelExportUtil_3_17.setTitleStyle(workbook);\nExcelExportUtil_3_17.setCellValue(titleStyle, cell00, "用户信息数据");\n//自适应高度\nExcelExportUtil_3_17.calcAndSetRowHeight(cell00, 40);\n//bigTitleRow.setHeightInPoints(42);//固定高度\n\n\n\n# 锁定单元格\n\n\n# 单元格注释\n\n\n\n//绘制单元格数据\nString[] users = new String[]{"1", "大一", "13800000001", "2001-03-29", "北京市西城区宣武大街1号院"};\nfor (int rowNum = 0; rowNum < 5; rowNum++) {\n    Row row = sheet.createRow(2 + rowNum);\n    for (int colNum = 0; colNum < titles.length; colNum++) {\n        Cell cell = row.createCell(colNum);\n        ExcelExportUtil_3_17.setCellValue(workbook, cell, users[colNum]);\n        //单元格注释\n        ExcelExportUtil_3_17.setCellPatriarch(cell, "注释测试");\n    }\n}\n\n\n\n# 自适应宽度\n\n\n\n//存储最大列宽\nMap<Integer, Integer> maxWidth = new HashMap<>();\n\n//绘制单元格数据\nString[] users = new String[]{"1", "大一", "13800000001", "2001-03-29", "北京市西城区宣武大街1号院"};\nfor (int rowNum = 0; rowNum < 5; rowNum++) {\n    Row row = sheet.createRow(2 + rowNum);\n    for (int colNum = 0; colNum < titles.length; colNum++) {\n        Cell cell = row.createCell(colNum);\n        ExcelExportUtil_3_17.setCellValue(workbook, cell, users[colNum]);\n\n        int length = (int) (ExcelExportUtil_3_17.calcCellWidth(cell));\n        length = Math.min(length, 15000);\n        maxWidth.put(colNum, Math.max(length, maxWidth.get(colNum)));\n    }\n}\n\n//设置统计好的自适应列宽\nfor (int i = 0; i < titles.length; i++) {\n    sheet.setColumnWidth(i, maxWidth.get(i));\n}\n\n\n\n# 设置水印\n\n\n\n//设置水印\nExcelExportUtil_3_17.setWatermarkImage(sheet);\n\n//去除水印\nExcelExportUtil_3_17.removeWatermarkImage(sheet);\n\n\n\n# 设置下拉框\n\n\n\n//设置下拉框\nExcelExportUtil_3_17.dynamicOptions(\n    new ExcelExportUtil_3_17.DynamicOptionInfo()\n    .setSheet(sheet)\n    .setOptions(new String[]{"a", "b", "c", "d"})\n    .setPromptBoxShow(true)\n    .setPromptBoxMessage("请选择")\n    .setFirstCol(1)\n    .setLastCol(1)\n);\n\n\n\n\n# 设置密码\n\n\n\n//设置密码\nExcelExportUtil_3_17.setPassword(workbook, fos, "1234");\nfos.close();\n\n//取消密码\nFileInputStream fis2 = new FileInputStream(new File("./testStyle-pwd.xlsx"));\nFileOutputStream fos2 = new FileOutputStream("./testStyle-pwd-3.xlsx");\nExcelExportUtil_3_17.removePassword(fis2,fos2,"1234");\n\n\n\n# Excel转图片\n\nExcelExportUtil_3_17.excel2image("./file.xlsx","./");\n\n\n',normalizedContent:'# poi--工具类封装3-17使用文档\n\n功能            xls   xlsx\n合并单元格         ✅     ✅\n合并单元格的自适应行高   ✅     ✅\n自适应列宽         ✅     ✅\n锁定单元格               \n单元格注释         ✅     ✅\n设置下拉          ✅     ✅\nsheet水印       ❌     ✅\n文档加密          ❌     ✅\n图片导出          ✅     ✅\n\n\n# 合并单元格\n\n\n\n//合并单元格\nexcelexportutil_3_17.addmergedregion(workbook, sheet, 0, 0, 0, 4);\n\n\n\n# 合并单元格自适应高度\n\n\n\n//合并单元格\nexcelexportutil_3_17.addmergedregion(workbook, sheet, 0, 0, 0, 4);\n//设置数据\ncellstyle titlestyle = excelexportutil_3_17.settitlestyle(workbook);\nexcelexportutil_3_17.setcellvalue(titlestyle, cell00, "用户信息数据");\n//自适应高度\nexcelexportutil_3_17.calcandsetrowheight(cell00, 40);\n//bigtitlerow.setheightinpoints(42);//固定高度\n\n\n\n# 锁定单元格\n\n\n# 单元格注释\n\n\n\n//绘制单元格数据\nstring[] users = new string[]{"1", "大一", "13800000001", "2001-03-29", "北京市西城区宣武大街1号院"};\nfor (int rownum = 0; rownum < 5; rownum++) {\n    row row = sheet.createrow(2 + rownum);\n    for (int colnum = 0; colnum < titles.length; colnum++) {\n        cell cell = row.createcell(colnum);\n        excelexportutil_3_17.setcellvalue(workbook, cell, users[colnum]);\n        //单元格注释\n        excelexportutil_3_17.setcellpatriarch(cell, "注释测试");\n    }\n}\n\n\n\n# 自适应宽度\n\n\n\n//存储最大列宽\nmap<integer, integer> maxwidth = new hashmap<>();\n\n//绘制单元格数据\nstring[] users = new string[]{"1", "大一", "13800000001", "2001-03-29", "北京市西城区宣武大街1号院"};\nfor (int rownum = 0; rownum < 5; rownum++) {\n    row row = sheet.createrow(2 + rownum);\n    for (int colnum = 0; colnum < titles.length; colnum++) {\n        cell cell = row.createcell(colnum);\n        excelexportutil_3_17.setcellvalue(workbook, cell, users[colnum]);\n\n        int length = (int) (excelexportutil_3_17.calccellwidth(cell));\n        length = math.min(length, 15000);\n        maxwidth.put(colnum, math.max(length, maxwidth.get(colnum)));\n    }\n}\n\n//设置统计好的自适应列宽\nfor (int i = 0; i < titles.length; i++) {\n    sheet.setcolumnwidth(i, maxwidth.get(i));\n}\n\n\n\n# 设置水印\n\n\n\n//设置水印\nexcelexportutil_3_17.setwatermarkimage(sheet);\n\n//去除水印\nexcelexportutil_3_17.removewatermarkimage(sheet);\n\n\n\n# 设置下拉框\n\n\n\n//设置下拉框\nexcelexportutil_3_17.dynamicoptions(\n    new excelexportutil_3_17.dynamicoptioninfo()\n    .setsheet(sheet)\n    .setoptions(new string[]{"a", "b", "c", "d"})\n    .setpromptboxshow(true)\n    .setpromptboxmessage("请选择")\n    .setfirstcol(1)\n    .setlastcol(1)\n);\n\n\n\n\n# 设置密码\n\n\n\n//设置密码\nexcelexportutil_3_17.setpassword(workbook, fos, "1234");\nfos.close();\n\n//取消密码\nfileinputstream fis2 = new fileinputstream(new file("./teststyle-pwd.xlsx"));\nfileoutputstream fos2 = new fileoutputstream("./teststyle-pwd-3.xlsx");\nexcelexportutil_3_17.removepassword(fis2,fos2,"1234");\n\n\n\n# excel转图片\n\nexcelexportutil_3_17.excel2image("./file.xlsx","./");\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1707120968e3},{title:"hello world11",frontmatter:{autoSort:85,autoIgnore:!0},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/16%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20Travis-CI.html",relativePath:"zs-tool-框架/vuepress/16、自动化部署 Travis-CI.md",key:"v-7f68a142",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/16%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20Travis-CI.html",headers:[{level:2,title:"hello world11",slug:"hello-world11",normalizedTitle:"hello world11",charIndex:2}],lastUpdated:"2023年11月29日星期三下午4点57分",lastUpdatedTimestamp:1701248257e3,headersStr:"hello world11",content:"# hello world11",normalizedContent:"# hello world11",charsets:{},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"hello world12",frontmatter:{autoSort:84,autoIgnore:!0},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/17%E3%80%81%E9%80%BC%E6%A0%BC%E5%BE%BD%E7%AB%A0.html",relativePath:"zs-tool-框架/vuepress/17、逼格徽章.md",key:"v-30ed5bb5",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/17%E3%80%81%E9%80%BC%E6%A0%BC%E5%BE%BD%E7%AB%A0.html",headers:[{level:2,title:"hello world12",slug:"hello-world12",normalizedTitle:"hello world12",charIndex:2}],lastUpdated:"2023年12月7日星期四下午3点05分",lastUpdatedTimestamp:1701932708e3,headersStr:"hello world12",content:"# hello world12\n\nhttps://www.travis-ci.com/\n\nhttps://shields.io/badges",normalizedContent:"# hello world12\n\nhttps://www.travis-ci.com/\n\nhttps://shields.io/badges",charsets:{},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"18、图片缩放",frontmatter:{autoSort:83,title:"18、图片缩放"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/18%E3%80%81%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE.html",relativePath:"zs-tool-框架/vuepress/18、图片缩放.md",key:"v-069b1591",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/18%E3%80%81%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE.html",headers:[{level:3,title:"图片引入两种方式",slug:"图片引入两种方式",normalizedTitle:"图片引入两种方式",charIndex:2},{level:3,title:"图片缩放插件",slug:"图片缩放插件",normalizedTitle:"图片缩放插件",charIndex:99},{level:3,title:"实战",slug:"实战",normalizedTitle:"实战",charIndex:112}],lastUpdated:"2023年12月7日星期四下午3点05分",lastUpdatedTimestamp:1701932708e3,headersStr:"图片引入两种方式 图片缩放插件 实战",content:"# 图片引入两种方式\n\nhttps://www.vuepress.cn/guide/assets.html#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84\n\n\n\n\n\n\n# 图片缩放插件\n\n\n\n\n# 实战\n\n> md文件引入图片\n\n<img class=\"zoom-custom-imgs\" :src=\"$withBase('/favicon.ico')\" alt=\"favicon\">\n\n\n> 安装配置插件\n\n  '@vuepress/medium-zoom': {\n    selector: 'img.zoom-custom-imgs',\n  },\n\n\n> 效果展示\n\n",normalizedContent:"# 图片引入两种方式\n\nhttps://www.vuepress.cn/guide/assets.html#%e7%9b%b8%e5%af%b9%e8%b7%af%e5%be%84\n\n\n\n\n\n\n# 图片缩放插件\n\n\n\n\n# 实战\n\n> md文件引入图片\n\n<img class=\"zoom-custom-imgs\" :src=\"$withbase('/favicon.ico')\" alt=\"favicon\">\n\n\n> 安装配置插件\n\n  '@vuepress/medium-zoom': {\n    selector: 'img.zoom-custom-imgs',\n  },\n\n\n> 效果展示\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"19.1、自动生成侧边栏",frontmatter:{autoSort:82,title:"19.1、自动生成侧边栏"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.1%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F.html",relativePath:"zs-tool-框架/vuepress/19.1、自动生成侧边栏.md",key:"v-457e115b",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.1%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F.html",headers:[{level:3,title:"生成导航栏",slug:"生成导航栏",normalizedTitle:"生成导航栏",charIndex:417},{level:3,title:"排序",slug:"排序",normalizedTitle:"排序",charIndex:429}],lastUpdated:"2024年1月8日星期一下午2点46分",lastUpdatedTimestamp:1704696387e3,headersStr:"生成导航栏 排序",content:"自动生成侧边栏插件\n\nhttps://github.com/shanyuhai123/vuepress-plugin-auto-sidebar\n\nhttps://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/\n\n安装\n\nnpm i vuepress-plugin-auto-sidebar -D\n\n\nmodule.exports = {\n  plugins: [\n    [\"vuepress-plugin-auto-sidebar\", {\n      // options\n    }]\n  ]\n}\n\n\nmodule.exports = {\n  //logo: '/assets/img/logo.png',\n  nav: nav,\n  //使用自动生成\n  //sidebar: sidebarConfig ,\n  lastUpdated: '更新时间',\n}\n\n\n\n# 生成导航栏\n\n\n\n\n# 排序\n\n详细说明\n\n",normalizedContent:"自动生成侧边栏插件\n\nhttps://github.com/shanyuhai123/vuepress-plugin-auto-sidebar\n\nhttps://shanyuhai123.github.io/vuepress-plugin-auto-sidebar/\n\n安装\n\nnpm i vuepress-plugin-auto-sidebar -d\n\n\nmodule.exports = {\n  plugins: [\n    [\"vuepress-plugin-auto-sidebar\", {\n      // options\n    }]\n  ]\n}\n\n\nmodule.exports = {\n  //logo: '/assets/img/logo.png',\n  nav: nav,\n  //使用自动生成\n  //sidebar: sidebarconfig ,\n  lastupdated: '更新时间',\n}\n\n\n\n# 生成导航栏\n\n\n\n\n# 排序\n\n详细说明\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704696387e3},{title:"19.2、自动生成侧边栏--自定义排序规则",frontmatter:{autoSort:82},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.2%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F--%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99.html",relativePath:"zs-tool-框架/vuepress/19.2、自动生成侧边栏--自定义排序规则.md",key:"v-218406de",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/19.2%E3%80%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BE%A7%E8%BE%B9%E6%A0%8F--%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99.html",lastUpdated:"2024年1月8日星期一下午2点46分",lastUpdatedTimestamp:1704696387e3,headersStr:null,content:'# 19.2、自动生成侧边栏--自定义排序规则\n\n> pluginsConfig.js\n\n  "vuepress-plugin-auto-sidebar": {\n    sort: {\n      // 更多选项: \n      // `asc`、`desc`、`created_time_asc`、`created_time_desc`  | custom\n      // 在使用 created_time_asc 和 created_time_desc 必须使用 git (opens new window)跟踪文件。\n      // 自定义排序  mode: "custom"  fn: sortFn\n      mode: "custom",\n      //README文件一直在前面\n      readmeFirstForce: true,\n      //所有文件会根据 autoSort 的大小进行排序，数值大的在前，数值小的在后，负数值会排在不具有 autoSort 属性的文件后。\n      fn: sortFn\n    },\n    sidebarDepth: 1,\n    collapse: {\n      open: true\n    },\n  },\n\n\nconst pinyin = require("../public/js/pinyin_getFirstLetterList") \n\n// 判断字符串是否全是中文\nfunction isAllChinese(str) {\n  return /^[\\u4E00-\\u9FA5]+$/.test(str)\n}\n// 判断字符是否为中文\nfunction isChinese(char) {\n  return /^[\\u4E00-\\u9FA5]$/.test(char)\n}\nconst sortFn = (Afile, Bfile) => {\n  let a=Afile.filename\n  let b=Bfile.filename\n  // 数字排在字符串前面\n  if (typeof a === \'number\' && typeof b === \'string\') {\n    return -1\n  }\n  if (typeof a === \'string\' && typeof b === \'number\') {\n    return 1\n  }\n\n\n  // 当存在非数字时\n  if (isNaN(a) || isNaN(b)) {\n    // 全汉字的排在非全汉字的后面\n    if (isAllChinese(a) && !isAllChinese(b)) {\n      return 1\n    }\n\n    if (!isAllChinese(a) && isAllChinese(b)) {\n      return -1\n    }\n    \n\n    // 存在非数字的数据时，都转为字符串进行比较\n    a = a.toString()\n    b = b.toString()\n\n    let result = 0\n    // 依次比较两个字符串的各项字符\n    for (let index = 0; index < ((a.length - b.length) ? b.length : a.length); index++) {\n      // 汉字排在非汉字的后面\n      if (!isChinese(a[index]) && isChinese(b[index])) {\n        result = -1\n      }\n      if (isChinese(a[index]) && !isChinese(b[index])) {\n        result = 1\n      }\n      if (a[index] && b[index] &&  a[index].match(/^\\d+$/) && b[index].match(/^\\d+$/)) {\n        let anum_str=""\n        let bnum_str=""\n        for (let i = index; i < a.length; i++) {\n          if(a[i].match(/^\\d+$/)){\n            anum_str+=a[i]\n          } else {\n            break;\n          }      \n        }\n        for (let i = index; i < b.length; i++) {\n          if(b[i].match(/^\\d+$/)){\n            bnum_str+=b[i]\n          } else {\n            break;\n          }\n        }\n        result = +anum_str - +bnum_str;\n      }else{\n        // 若两个汉字进行比较，则比较他们的拼音首字母\n        if (isChinese(a[index]) && isChinese(b[index])) {\n          let pinyinA = pinyin.getFirstLetterList(a[index]).toString()\n          let pinyinB = pinyin.getFirstLetterList(b[index]).toString()\n          result = pinyinA.localeCompare(pinyinB, \'zh-Hans-CN\', { sensitivity: \'accent\' })\n        }\n      }\n      // 若已经比较出结果，则跳出循环，不再继续比较剩余字符\n      if (result !== 0) {\n        break\n      }\n    }\n    // 只要有一个无法转换为数字——转换为字符串进行比较——先按字符排序，然后按照数字排序\n    let num =  result || a.toString().localeCompare(b.toString(), \'zh-Hans-CN\', { sensitivity: \'accent\' })\n    return num\n  }else{\n    // 都能转换为数字——转换为数字进行比较——从小到大排序\n    return Number(a) - Number(b)\n  }\n}\n\n\n> pinyin_getFirstLetterList.js\n\nvar strChineseFirstPY = "";\n//此处收录了375个多音字\nvar oMultiDiff = { "19969": "DZ", "19975": "WM", "19988": "QJ", "20048": "YL", "20056": "SC", "20060": "NM", "20094": "QG", "20127": "QJ", "20167": "QC", "20193": "YG", "20250": "KH", "20256": "ZC", "20282": "SC", "20285": "QJG", "20291": "TD", "20314": "YD", "20340": "NE", "20375": "TD", "20389": "YJ", "20391": "CZ", "20415": "PB", "20446": "YS", "20447": "SQ", "20504": "TC", "20608": "KG", "20854": "QJ", "20857": "ZC", "20911": "PF", "20504": "TC", "20608": "KG", "20854": "QJ", "20857": "ZC", "20911": "PF", "20985": "AW", "21032": "PB", "21048": "XQ", "21049": "SC", "21089": "YS", "21119": "JC", "21242": "SB", "21273": "SC", "21305": "YP", "21306": "QO", "21330": "ZC", "21333": "SDC", "21345": "QK", "21378": "CA", "21397": "SC", "21414": "XS", "21442": "SC", "21477": "JG", "21480": "TD", "21484": "ZS", "21494": "YX", "21505": "YX", "21512": "HG", "21523": "XH", "21537": "PB", "21542": "PF", "21549": "KH", "21571": "E", "21574": "DA", "21588": "TD", "21589": "O", "21618": "ZC", "21621": "KHA", "21632": "ZJ", "21654": "KG", "21679": "LKG", "21683": "KH", "21710": "A", "21719": "YH", "21734": "WOE", "21769": "A", "21780": "WN", "21804": "XH", "21834": "A", "21899": "ZD", "21903": "RN", "21908": "WO", "21939": "ZC", "21956": "SA", "21964": "YA", "21970": "TD", "22003": "A", "22031": "JG", "22040": "XS", "22060": "ZC", "22066": "ZC", "22079": "MH", "22129": "XJ", "22179": "XA", "22237": "NJ", "22244": "TD", "22280": "JQ", "22300": "YH", "22313": "XW", "22331": "YQ", "22343": "YJ", "22351": "PH", "22395": "DC", "22412": "TD", "22484": "PB", "22500": "PB", "22534": "ZD", "22549": "DH", "22561": "PB", "22612": "TD", "22771": "KQ", "22831": "HB", "22841": "JG", "22855": "QJ", "22865": "XQ", "23013": "ML", "23081": "WM", "23487": "SX", "23558": "QJ", "23561": "YW", "23586": "YW", "23614": "YW", "23615": "SN", "23631": "PB", "23646": "ZS", "23663": "ZT", "23673": "YG", "23762": "TD", "23769": "ZS", "23780": "QJ", "23884": "QK", "24055": "XH", "24113": "DC", "24162": "ZC", "24191": "GA", "24273": "QJ", "24324": "NL", "24377": "TD", "24378": "QJ", "24439": "PF", "24554": "ZS", "24683": "TD", "24694": "WE", "24733": "LK", "24925": "TN", "25094": "ZG", "25100": "XQ", "25103": "XH", "25153": "PB", "25170": "PB", "25179": "KG", "25203": "PB", "25240": "ZS", "25282": "FB", "25303": "NA", "25324": "KG", "25341": "ZY", "25373": "WZ", "25375": "XJ", "25384": "A", "25457": "A", "25528": "SD", "25530": "SC", "25552": "TD", "25774": "ZC", "25874": "ZC", "26044": "YW", "26080": "WM", "26292": "PB", "26333": "PB", "26355": "ZY", "26366": "CZ", "26397": "ZC", "26399": "QJ", "26415": "ZS", "26451": "SB", "26526": "ZC", "26552": "JG", "26561": "TD", "26588": "JG", "26597": "CZ", "26629": "ZS", "26638": "YL", "26646": "XQ", "26653": "KG", "26657": "XJ", "26727": "HG", "26894": "ZC", "26937": "ZS", "26946": "ZC", "26999": "KJ", "27099": "KJ", "27449": "YQ", "27481": "XS", "27542": "ZS", "27663": "ZS", "27748": "TS", "27784": "SC", "27788": "ZD", "27795": "TD", "27812": "O", "27850": "PB", "27852": "MB", "27895": "SL", "27898": "PL", "27973": "QJ", "27981": "KH", "27986": "HX", "27994": "XJ", "28044": "YC", "28065": "WG", "28177": "SM", "28267": "QJ", "28291": "KH", "28337": "ZQ", "28463": "TL", "28548": "DC", "28601": "TD", "28689": "PB", "28805": "JG", "28820": "QG", "28846": "PB", "28952": "TD", "28975": "ZC", "29100": "A", "29325": "QJ", "29575": "SL", "29602": "FB", "30010": "TD", "30044": "CX", "30058": "PF", "30091": "YSP", "30111": "YN", "30229": "XJ", "30427": "SC", "30465": "SX", "30631": "YQ", "30655": "QJ", "30684": "QJG", "30707": "SD", "30729": "XH", "30796": "LG", "30917": "PB", "31074": "NM", "31085": "JZ", "31109": "SC", "31181": "ZC", "31192": "MLB", "31293": "JQ", "31400": "YX", "31584": "YJ", "31896": "ZN", "31909": "ZY", "31995": "XJ", "32321": "PF", "32327": "ZY", "32418": "HG", "32420": "XQ", "32421": "HG", "32438": "LG", "32473": "GJ", "32488": "TD", "32521": "QJ", "32527": "PB", "32562": "ZSQ", "32564": "JZ", "32735": "ZD", "32793": "PB", "33071": "PF", "33098": "XL", "33100": "YA", "33152": "PB", "33261": "CX", "33324": "BP", "33333": "TD", "33406": "YA", "33426": "WM", "33432": "PB", "33445": "JG", "33486": "ZN", "33493": "TS", "33507": "QJ", "33540": "QJ", "33544": "ZC", "33564": "XQ", "33617": "YT", "33632": "QJ", "33636": "XH", "33637": "YX", "33694": "WG", "33705": "PF", "33728": "YW", "33882": "SR", "34067": "WM", "34074": "YW", "34121": "QJ", "34255": "ZC", "34259": "XL", "34425": "JH", "34430": "XH", "34485": "KH", "34503": "YS", "34532": "HG", "34552": "XS", "34558": "YE", "34593": "ZL", "34660": "YQ", "34892": "XH", "34928": "SC", "34999": "QJ", "35048": "PB", "35059": "SC", "35098": "ZC", "35203": "TQ", "35265": "JX", "35299": "JX", "35782": "SZ", "35828": "YS", "35830": "E", "35843": "TD", "35895": "YG", "35977": "MH", "36158": "JG", "36228": "QJ", "36426": "XQ", "36466": "DC", "36710": "JC", "36711": "ZYG", "36767": "PB", "36866": "SK", "36951": "YW", "37034": "YX", "37063": "XH", "37218": "ZC", "37325": "ZC", "38063": "PB", "38079": "TD", "38085": "QY", "38107": "DC", "38116": "TD", "38123": "YD", "38224": "HG", "38241": "XTC", "38271": "ZC", "38415": "YE", "38426": "KH", "38461": "YD", "38463": "AE", "38466": "PB", "38477": "XJ", "38518": "YT", "38551": "WK", "38585": "ZC", "38704": "XS", "38739": "LJ", "38761": "GJ", "38808": "SQ", "39048": "JG", "39049": "XJ", "39052": "HG", "39076": "CZ", "39271": "XT", "39534": "TD", "39552": "TD", "39584": "PB", "39647": "SB", "39730": "LG", "39748": "TPB", "40109": "ZQ", "40479": "ND", "40516": "HG", "40536": "HG", "40583": "QJ", "40765": "YQ", "40784": "QJ", "40840": "YK", "40863": "QJG" };\n \n \nfunction checkCh(ch) {\n    var uni = ch.charCodeAt(0);\n    //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数\n    if (uni > 40869 || uni < 19968)\n        return ch; //dealWithOthers(ch);\n    //检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母\n    return (oMultiDiff[uni] ? oMultiDiff[uni] : (strChineseFirstPY.charAt(uni - 19968)));\n}\n \nfunction mkRslt(arr) {\n    var arrRslt = [""];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        var str = arr[i];\n        var strlen = str.length;\n        if (strlen == 1) {\n            for (var k = 0; k < arrRslt.length; k++) {\n                arrRslt[k] += str;\n            }\n        } else {\n            var tmpArr = arrRslt.slice(0);\n            arrRslt = [];\n            for (k = 0; k < strlen; k++) {\n                //复制一个相同的arrRslt\n                var tmp = tmpArr.slice(0);\n                //把当前字符str[k]添加到每个元素末尾\n                for (var j = 0; j < tmp.length; j++) {\n                    tmp[j] += str.charAt(k);\n                }\n                //把复制并修改后的数组连接到arrRslt上\n                arrRslt = arrRslt.concat(tmp);\n            }\n        }\n    }\n    return arrRslt;\n}\n//两端去空格函数\nString.prototype.trim = function() { return this.replace(/(^\\s*)|(\\s*$)/g, ""); }\n \n//参数——中文字符串\n//返回值——拼音首字母串数组\nfunction getFirstLetterList(str) {\n    if (typeof(str) != "string")\n        throw new Error(-1, "请传入字符串类型的参数!");\n    var arrResult = new Array(); //保存中间结果的数组\n    for (var i = 0, len = str.length; i < len; i++) {\n        //获得unicode码\n        var ch = str.charAt(i);\n        //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理\n        arrResult.push(checkCh(ch));\n    }\n    //处理arrResult,返回所有可能的拼音首字母串数组\n    return mkRslt(arrResult);\n}\n\nmodule.exports = {\n  getFirstLetterList: getFirstLetterList\n}\n',normalizedContent:'# 19.2、自动生成侧边栏--自定义排序规则\n\n> pluginsconfig.js\n\n  "vuepress-plugin-auto-sidebar": {\n    sort: {\n      // 更多选项: \n      // `asc`、`desc`、`created_time_asc`、`created_time_desc`  | custom\n      // 在使用 created_time_asc 和 created_time_desc 必须使用 git (opens new window)跟踪文件。\n      // 自定义排序  mode: "custom"  fn: sortfn\n      mode: "custom",\n      //readme文件一直在前面\n      readmefirstforce: true,\n      //所有文件会根据 autosort 的大小进行排序，数值大的在前，数值小的在后，负数值会排在不具有 autosort 属性的文件后。\n      fn: sortfn\n    },\n    sidebardepth: 1,\n    collapse: {\n      open: true\n    },\n  },\n\n\nconst pinyin = require("../public/js/pinyin_getfirstletterlist") \n\n// 判断字符串是否全是中文\nfunction isallchinese(str) {\n  return /^[\\u4e00-\\u9fa5]+$/.test(str)\n}\n// 判断字符是否为中文\nfunction ischinese(char) {\n  return /^[\\u4e00-\\u9fa5]$/.test(char)\n}\nconst sortfn = (afile, bfile) => {\n  let a=afile.filename\n  let b=bfile.filename\n  // 数字排在字符串前面\n  if (typeof a === \'number\' && typeof b === \'string\') {\n    return -1\n  }\n  if (typeof a === \'string\' && typeof b === \'number\') {\n    return 1\n  }\n\n\n  // 当存在非数字时\n  if (isnan(a) || isnan(b)) {\n    // 全汉字的排在非全汉字的后面\n    if (isallchinese(a) && !isallchinese(b)) {\n      return 1\n    }\n\n    if (!isallchinese(a) && isallchinese(b)) {\n      return -1\n    }\n    \n\n    // 存在非数字的数据时，都转为字符串进行比较\n    a = a.tostring()\n    b = b.tostring()\n\n    let result = 0\n    // 依次比较两个字符串的各项字符\n    for (let index = 0; index < ((a.length - b.length) ? b.length : a.length); index++) {\n      // 汉字排在非汉字的后面\n      if (!ischinese(a[index]) && ischinese(b[index])) {\n        result = -1\n      }\n      if (ischinese(a[index]) && !ischinese(b[index])) {\n        result = 1\n      }\n      if (a[index] && b[index] &&  a[index].match(/^\\d+$/) && b[index].match(/^\\d+$/)) {\n        let anum_str=""\n        let bnum_str=""\n        for (let i = index; i < a.length; i++) {\n          if(a[i].match(/^\\d+$/)){\n            anum_str+=a[i]\n          } else {\n            break;\n          }      \n        }\n        for (let i = index; i < b.length; i++) {\n          if(b[i].match(/^\\d+$/)){\n            bnum_str+=b[i]\n          } else {\n            break;\n          }\n        }\n        result = +anum_str - +bnum_str;\n      }else{\n        // 若两个汉字进行比较，则比较他们的拼音首字母\n        if (ischinese(a[index]) && ischinese(b[index])) {\n          let pinyina = pinyin.getfirstletterlist(a[index]).tostring()\n          let pinyinb = pinyin.getfirstletterlist(b[index]).tostring()\n          result = pinyina.localecompare(pinyinb, \'zh-hans-cn\', { sensitivity: \'accent\' })\n        }\n      }\n      // 若已经比较出结果，则跳出循环，不再继续比较剩余字符\n      if (result !== 0) {\n        break\n      }\n    }\n    // 只要有一个无法转换为数字——转换为字符串进行比较——先按字符排序，然后按照数字排序\n    let num =  result || a.tostring().localecompare(b.tostring(), \'zh-hans-cn\', { sensitivity: \'accent\' })\n    return num\n  }else{\n    // 都能转换为数字——转换为数字进行比较——从小到大排序\n    return number(a) - number(b)\n  }\n}\n\n\n> pinyin_getfirstletterlist.js\n\nvar strchinesefirstpy = "";\n//此处收录了375个多音字\nvar omultidiff = { "19969": "dz", "19975": "wm", "19988": "qj", "20048": "yl", "20056": "sc", "20060": "nm", "20094": "qg", "20127": "qj", "20167": "qc", "20193": "yg", "20250": "kh", "20256": "zc", "20282": "sc", "20285": "qjg", "20291": "td", "20314": "yd", "20340": "ne", "20375": "td", "20389": "yj", "20391": "cz", "20415": "pb", "20446": "ys", "20447": "sq", "20504": "tc", "20608": "kg", "20854": "qj", "20857": "zc", "20911": "pf", "20504": "tc", "20608": "kg", "20854": "qj", "20857": "zc", "20911": "pf", "20985": "aw", "21032": "pb", "21048": "xq", "21049": "sc", "21089": "ys", "21119": "jc", "21242": "sb", "21273": "sc", "21305": "yp", "21306": "qo", "21330": "zc", "21333": "sdc", "21345": "qk", "21378": "ca", "21397": "sc", "21414": "xs", "21442": "sc", "21477": "jg", "21480": "td", "21484": "zs", "21494": "yx", "21505": "yx", "21512": "hg", "21523": "xh", "21537": "pb", "21542": "pf", "21549": "kh", "21571": "e", "21574": "da", "21588": "td", "21589": "o", "21618": "zc", "21621": "kha", "21632": "zj", "21654": "kg", "21679": "lkg", "21683": "kh", "21710": "a", "21719": "yh", "21734": "woe", "21769": "a", "21780": "wn", "21804": "xh", "21834": "a", "21899": "zd", "21903": "rn", "21908": "wo", "21939": "zc", "21956": "sa", "21964": "ya", "21970": "td", "22003": "a", "22031": "jg", "22040": "xs", "22060": "zc", "22066": "zc", "22079": "mh", "22129": "xj", "22179": "xa", "22237": "nj", "22244": "td", "22280": "jq", "22300": "yh", "22313": "xw", "22331": "yq", "22343": "yj", "22351": "ph", "22395": "dc", "22412": "td", "22484": "pb", "22500": "pb", "22534": "zd", "22549": "dh", "22561": "pb", "22612": "td", "22771": "kq", "22831": "hb", "22841": "jg", "22855": "qj", "22865": "xq", "23013": "ml", "23081": "wm", "23487": "sx", "23558": "qj", "23561": "yw", "23586": "yw", "23614": "yw", "23615": "sn", "23631": "pb", "23646": "zs", "23663": "zt", "23673": "yg", "23762": "td", "23769": "zs", "23780": "qj", "23884": "qk", "24055": "xh", "24113": "dc", "24162": "zc", "24191": "ga", "24273": "qj", "24324": "nl", "24377": "td", "24378": "qj", "24439": "pf", "24554": "zs", "24683": "td", "24694": "we", "24733": "lk", "24925": "tn", "25094": "zg", "25100": "xq", "25103": "xh", "25153": "pb", "25170": "pb", "25179": "kg", "25203": "pb", "25240": "zs", "25282": "fb", "25303": "na", "25324": "kg", "25341": "zy", "25373": "wz", "25375": "xj", "25384": "a", "25457": "a", "25528": "sd", "25530": "sc", "25552": "td", "25774": "zc", "25874": "zc", "26044": "yw", "26080": "wm", "26292": "pb", "26333": "pb", "26355": "zy", "26366": "cz", "26397": "zc", "26399": "qj", "26415": "zs", "26451": "sb", "26526": "zc", "26552": "jg", "26561": "td", "26588": "jg", "26597": "cz", "26629": "zs", "26638": "yl", "26646": "xq", "26653": "kg", "26657": "xj", "26727": "hg", "26894": "zc", "26937": "zs", "26946": "zc", "26999": "kj", "27099": "kj", "27449": "yq", "27481": "xs", "27542": "zs", "27663": "zs", "27748": "ts", "27784": "sc", "27788": "zd", "27795": "td", "27812": "o", "27850": "pb", "27852": "mb", "27895": "sl", "27898": "pl", "27973": "qj", "27981": "kh", "27986": "hx", "27994": "xj", "28044": "yc", "28065": "wg", "28177": "sm", "28267": "qj", "28291": "kh", "28337": "zq", "28463": "tl", "28548": "dc", "28601": "td", "28689": "pb", "28805": "jg", "28820": "qg", "28846": "pb", "28952": "td", "28975": "zc", "29100": "a", "29325": "qj", "29575": "sl", "29602": "fb", "30010": "td", "30044": "cx", "30058": "pf", "30091": "ysp", "30111": "yn", "30229": "xj", "30427": "sc", "30465": "sx", "30631": "yq", "30655": "qj", "30684": "qjg", "30707": "sd", "30729": "xh", "30796": "lg", "30917": "pb", "31074": "nm", "31085": "jz", "31109": "sc", "31181": "zc", "31192": "mlb", "31293": "jq", "31400": "yx", "31584": "yj", "31896": "zn", "31909": "zy", "31995": "xj", "32321": "pf", "32327": "zy", "32418": "hg", "32420": "xq", "32421": "hg", "32438": "lg", "32473": "gj", "32488": "td", "32521": "qj", "32527": "pb", "32562": "zsq", "32564": "jz", "32735": "zd", "32793": "pb", "33071": "pf", "33098": "xl", "33100": "ya", "33152": "pb", "33261": "cx", "33324": "bp", "33333": "td", "33406": "ya", "33426": "wm", "33432": "pb", "33445": "jg", "33486": "zn", "33493": "ts", "33507": "qj", "33540": "qj", "33544": "zc", "33564": "xq", "33617": "yt", "33632": "qj", "33636": "xh", "33637": "yx", "33694": "wg", "33705": "pf", "33728": "yw", "33882": "sr", "34067": "wm", "34074": "yw", "34121": "qj", "34255": "zc", "34259": "xl", "34425": "jh", "34430": "xh", "34485": "kh", "34503": "ys", "34532": "hg", "34552": "xs", "34558": "ye", "34593": "zl", "34660": "yq", "34892": "xh", "34928": "sc", "34999": "qj", "35048": "pb", "35059": "sc", "35098": "zc", "35203": "tq", "35265": "jx", "35299": "jx", "35782": "sz", "35828": "ys", "35830": "e", "35843": "td", "35895": "yg", "35977": "mh", "36158": "jg", "36228": "qj", "36426": "xq", "36466": "dc", "36710": "jc", "36711": "zyg", "36767": "pb", "36866": "sk", "36951": "yw", "37034": "yx", "37063": "xh", "37218": "zc", "37325": "zc", "38063": "pb", "38079": "td", "38085": "qy", "38107": "dc", "38116": "td", "38123": "yd", "38224": "hg", "38241": "xtc", "38271": "zc", "38415": "ye", "38426": "kh", "38461": "yd", "38463": "ae", "38466": "pb", "38477": "xj", "38518": "yt", "38551": "wk", "38585": "zc", "38704": "xs", "38739": "lj", "38761": "gj", "38808": "sq", "39048": "jg", "39049": "xj", "39052": "hg", "39076": "cz", "39271": "xt", "39534": "td", "39552": "td", "39584": "pb", "39647": "sb", "39730": "lg", "39748": "tpb", "40109": "zq", "40479": "nd", "40516": "hg", "40536": "hg", "40583": "qj", "40765": "yq", "40784": "qj", "40840": "yk", "40863": "qjg" };\n \n \nfunction checkch(ch) {\n    var uni = ch.charcodeat(0);\n    //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数\n    if (uni > 40869 || uni < 19968)\n        return ch; //dealwithothers(ch);\n    //检查是否是多音字,是按多音字处理,不是就直接在strchinesefirstpy字符串中找对应的首字母\n    return (omultidiff[uni] ? omultidiff[uni] : (strchinesefirstpy.charat(uni - 19968)));\n}\n \nfunction mkrslt(arr) {\n    var arrrslt = [""];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        var str = arr[i];\n        var strlen = str.length;\n        if (strlen == 1) {\n            for (var k = 0; k < arrrslt.length; k++) {\n                arrrslt[k] += str;\n            }\n        } else {\n            var tmparr = arrrslt.slice(0);\n            arrrslt = [];\n            for (k = 0; k < strlen; k++) {\n                //复制一个相同的arrrslt\n                var tmp = tmparr.slice(0);\n                //把当前字符str[k]添加到每个元素末尾\n                for (var j = 0; j < tmp.length; j++) {\n                    tmp[j] += str.charat(k);\n                }\n                //把复制并修改后的数组连接到arrrslt上\n                arrrslt = arrrslt.concat(tmp);\n            }\n        }\n    }\n    return arrrslt;\n}\n//两端去空格函数\nstring.prototype.trim = function() { return this.replace(/(^\\s*)|(\\s*$)/g, ""); }\n \n//参数——中文字符串\n//返回值——拼音首字母串数组\nfunction getfirstletterlist(str) {\n    if (typeof(str) != "string")\n        throw new error(-1, "请传入字符串类型的参数!");\n    var arrresult = new array(); //保存中间结果的数组\n    for (var i = 0, len = str.length; i < len; i++) {\n        //获得unicode码\n        var ch = str.charat(i);\n        //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理\n        arrresult.push(checkch(ch));\n    }\n    //处理arrresult,返回所有可能的拼音首字母串数组\n    return mkrslt(arrresult);\n}\n\nmodule.exports = {\n  getfirstletterlist: getfirstletterlist\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704696387e3},{title:"20、全文搜索",frontmatter:{autoSort:81,title:"20、全文搜索"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/20%E3%80%81%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2.html",relativePath:"zs-tool-框架/vuepress/20、全文搜索.md",key:"v-113afd78",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/20%E3%80%81%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2.html",headers:[{level:2,title:"通过插件 vuepress-plugin-fulltext-search 实现全文搜索",slug:"通过插件-vuepress-plugin-fulltext-search-实现全文搜索",normalizedTitle:"通过插件 vuepress-plugin-fulltext-search 实现全文搜索",charIndex:125},{level:2,title:"通过插件 vuepress-plugin-flexsearch 实现全文搜索",slug:"通过插件-vuepress-plugin-flexsearch-实现全文搜索",normalizedTitle:"通过插件 vuepress-plugin-flexsearch 实现全文搜索",charIndex:582},{level:2,title:"集成第三方免费搜索服务 algolia",slug:"集成第三方免费搜索服务-algolia",normalizedTitle:"集成第三方免费搜索服务 algolia",charIndex:995}],lastUpdated:"2023年12月7日星期四下午3点05分",lastUpdatedTimestamp:1701932708e3,headersStr:"通过插件 vuepress-plugin-fulltext-search 实现全文搜索 通过插件 vuepress-plugin-flexsearch 实现全文搜索 集成第三方免费搜索服务 algolia",content:"默认主题自带的搜索, 只会为页面的标题、h2、h3 以及 tags构建搜索索引。所以尽量将围绕知识点的关键字体现到标题上。而 tags 更为灵活，可以把相关的能想到的关键字都配置到 tags 中，以方便搜索。\n\n默认插件介绍\n\n默认主体配置\n\n\n# 通过插件 vuepress-plugin-fulltext-search 实现全文搜索\n\n 1. 安装依赖 vuepress-plugin-fulltext-search\n    \n    yarn add -D vuepress-plugin-fulltext-search\n    \n\n 2. 修改配置 vi docs/.vuepress/config.js\n    \n      module.exports = {\n      // ...\n      plugins: ['fulltext-search'],\n      }\n    \n\n搜索效果如下, 展示效果和 algolia 相似\n\n\n\n> 提示\n> \n> 安装了该依赖后, 后面再用 yarn 安装其它依赖会报错,为避免影响其它插件正常使用,我最后决定从系统中移除了该插件\n\n参考文档\n\n> 提示\n> \n> 发现的不足:\n> \n>  1. 没有提供额外的调整参数, 如最大搜索结果数量等\n> \n>  2. 关键词不高亮显示\n\n官方文档\n\n\n# 通过插件 vuepress-plugin-flexsearch 实现全文搜索\n\n 1. 安装依赖\n    \n    yarn add -D vuepress-plugin-flexsearch\n    \n\n 2. 修改配置\n    \n    // .vuepress/config.js\n    \n    module.exports = {\n        plugins: [\n          ['flexsearch'],\n          // other plugins\n        ]\n    }\n    \n    \n    > 提示\n    > \n    > 优点:\n    > \n    >  1. 提供了更多的配置项\n    >  2. 搜索结果高亮显示\n    > \n    > 但是按官方文档没有配置好对中文分词的支持，待日后完善。\n    \n    > 官方文档\n\n搜索效果如下\n\n\n\n\n# 集成第三方免费搜索服务 algolia\n\nhttps://docsearch.algolia.com/apply/\n\n\n\n\n\n\n\n",normalizedContent:"默认主题自带的搜索, 只会为页面的标题、h2、h3 以及 tags构建搜索索引。所以尽量将围绕知识点的关键字体现到标题上。而 tags 更为灵活，可以把相关的能想到的关键字都配置到 tags 中，以方便搜索。\n\n默认插件介绍\n\n默认主体配置\n\n\n# 通过插件 vuepress-plugin-fulltext-search 实现全文搜索\n\n 1. 安装依赖 vuepress-plugin-fulltext-search\n    \n    yarn add -d vuepress-plugin-fulltext-search\n    \n\n 2. 修改配置 vi docs/.vuepress/config.js\n    \n      module.exports = {\n      // ...\n      plugins: ['fulltext-search'],\n      }\n    \n\n搜索效果如下, 展示效果和 algolia 相似\n\n\n\n> 提示\n> \n> 安装了该依赖后, 后面再用 yarn 安装其它依赖会报错,为避免影响其它插件正常使用,我最后决定从系统中移除了该插件\n\n参考文档\n\n> 提示\n> \n> 发现的不足:\n> \n>  1. 没有提供额外的调整参数, 如最大搜索结果数量等\n> \n>  2. 关键词不高亮显示\n\n官方文档\n\n\n# 通过插件 vuepress-plugin-flexsearch 实现全文搜索\n\n 1. 安装依赖\n    \n    yarn add -d vuepress-plugin-flexsearch\n    \n\n 2. 修改配置\n    \n    // .vuepress/config.js\n    \n    module.exports = {\n        plugins: [\n          ['flexsearch'],\n          // other plugins\n        ]\n    }\n    \n    \n    > 提示\n    > \n    > 优点:\n    > \n    >  1. 提供了更多的配置项\n    >  2. 搜索结果高亮显示\n    > \n    > 但是按官方文档没有配置好对中文分词的支持，待日后完善。\n    \n    > 官方文档\n\n搜索效果如下\n\n\n\n\n# 集成第三方免费搜索服务 algolia\n\nhttps://docsearch.algolia.com/apply/\n\n\n\n\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701932708e3},{title:"21、代码块拷贝插件",frontmatter:{autoSort:80,title:"21、代码块拷贝插件"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/21%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6.html",relativePath:"zs-tool-框架/vuepress/21、代码块拷贝插件.md",key:"v-57f0ce7c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/21%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6.html",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:149},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:240},{level:2,title:"选项",slug:"选项",normalizedTitle:"选项",charIndex:373},{level:3,title:"选择器",slug:"选择器",normalizedTitle:"选择器",charIndex:104},{level:3,title:"对齐",slug:"对齐",normalizedTitle:"对齐",charIndex:756},{level:3,title:"颜色",slug:"颜色",normalizedTitle:"颜色",charIndex:842},{level:3,title:"背景过渡",slug:"背景过渡",normalizedTitle:"背景过渡",charIndex:904},{level:3,title:"背景颜色",slug:"背景颜色",normalizedTitle:"背景颜色",charIndex:966},{level:3,title:"成功文本",slug:"成功文本",normalizedTitle:"成功文本",charIndex:1033},{level:3,title:"静态图标",slug:"静态图标",normalizedTitle:"静态图标",charIndex:1091}],lastUpdated:"2023年12月7日星期四下午3点47分",lastUpdatedTimestamp:1701935235e3,headersStr:"安装 用法 选项 选择器 对齐 颜色 背景过渡 背景颜色 成功文本 静态图标",content:'https://github.com/znicholasbrown/vuepress-plugin-code-copy\n\n\n# Vuepress 代码复制插件\n\nVuepress 的插件，将复制按钮附加到给定选择器的每个实例（默认为div[class*="language-"] pre）\n\n\n# 安装\n\n$ npm install vuepress-plugin-code-copy\n# OR\n$ yarn add vuepress-plugin-code-copy\n\n\n\n# 用法\n\n该插件可以添加到.vuepress/config.js您的 Vuepress 项目中plugins：\n\nmodule.exports = {\n    plugins: [[\'vuepress-plugin-code-copy\', true]]\n}\n\n\n\n# 选项\n\n该插件采用许多选项，可以通过选项对象中的插件配置传递这些选项：\n\nmodule.exports = {\n  plugins: [\n    ["vuepress-plugin-code-copy", {\n        selector: String,\n        align: String,\n        color: String,\n        backgroundTransition: Boolean,\n        backgroundColor: String,\n        successText: String\n        }\n    ]\n  ]\n}\n\n\n\n# 选择器\n\n * 类型：String\n * 默认：div[class*="language-"] pre\n\n这是复制按钮组件将附加到的CSS 选择器。\n\n\n# 对齐\n\n * 类型：String\n * 默认：bottom\n * 支持的选项：top和bottom\n\n该选项描述了复制按钮组件的垂直位置以及successText\n\n\n# 颜色\n\n * 类型：String\n * 默认：#27b1ff\n\n这设置复制按钮的颜色并且可以采用任何十六进制代码。\n\n\n# 背景过渡\n\n * 类型：Boolean\n * 默认：true\n\n当用户按下复制按钮时启用附加代码块的背景过渡动画。\n\n\n# 背景颜色\n\n * 类型：String\n * 默认：#0075b8\n\n这设置背景过渡动画的颜色，并且可以采用任何十六进制代码。\n\n\n# 成功文本\n\n * 类型：String\n * 默认：Copied!\n\n这设置当用户按下复制按钮时显示的文本。\n\n\n# 静态图标\n\n * 类型：Boolean\n * 默认：false\n\n复制图标仅在将鼠标悬停在代码块上时可见或始终可见。',normalizedContent:'https://github.com/znicholasbrown/vuepress-plugin-code-copy\n\n\n# vuepress 代码复制插件\n\nvuepress 的插件，将复制按钮附加到给定选择器的每个实例（默认为div[class*="language-"] pre）\n\n\n# 安装\n\n$ npm install vuepress-plugin-code-copy\n# or\n$ yarn add vuepress-plugin-code-copy\n\n\n\n# 用法\n\n该插件可以添加到.vuepress/config.js您的 vuepress 项目中plugins：\n\nmodule.exports = {\n    plugins: [[\'vuepress-plugin-code-copy\', true]]\n}\n\n\n\n# 选项\n\n该插件采用许多选项，可以通过选项对象中的插件配置传递这些选项：\n\nmodule.exports = {\n  plugins: [\n    ["vuepress-plugin-code-copy", {\n        selector: string,\n        align: string,\n        color: string,\n        backgroundtransition: boolean,\n        backgroundcolor: string,\n        successtext: string\n        }\n    ]\n  ]\n}\n\n\n\n# 选择器\n\n * 类型：string\n * 默认：div[class*="language-"] pre\n\n这是复制按钮组件将附加到的css 选择器。\n\n\n# 对齐\n\n * 类型：string\n * 默认：bottom\n * 支持的选项：top和bottom\n\n该选项描述了复制按钮组件的垂直位置以及successtext\n\n\n# 颜色\n\n * 类型：string\n * 默认：#27b1ff\n\n这设置复制按钮的颜色并且可以采用任何十六进制代码。\n\n\n# 背景过渡\n\n * 类型：boolean\n * 默认：true\n\n当用户按下复制按钮时启用附加代码块的背景过渡动画。\n\n\n# 背景颜色\n\n * 类型：string\n * 默认：#0075b8\n\n这设置背景过渡动画的颜色，并且可以采用任何十六进制代码。\n\n\n# 成功文本\n\n * 类型：string\n * 默认：copied!\n\n这设置当用户按下复制按钮时显示的文本。\n\n\n# 静态图标\n\n * 类型：boolean\n * 默认：false\n\n复制图标仅在将鼠标悬停在代码块上时可见或始终可见。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701935235e3},{title:"1、快速开始",frontmatter:{autoSort:100},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/1%E3%80%81%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",relativePath:"zs-tool-框架/vuepress/1、快速开始.md",key:"v-4bb9b0a1",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/1%E3%80%81%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",headers:[{level:2,title:"创建工程",slug:"创建工程",normalizedTitle:"创建工程",charIndex:15}],lastUpdated:"2023年11月29日星期三下午4点57分",lastUpdatedTimestamp:1701248257e3,headersStr:"创建工程",content:'# 1、快速开始\n\n\n\n * 创建工程\n\n\n\n\n# 创建工程\n\n本文会帮助你从头搭建一个简单的 VuePress 文档。如果你想在一个现有项目中使用 VuePress 管理文档，从步骤 3 开始。\n\n 1. 创建并进入一个新目录\n    \n    mkdir vuepress-starter && cd vuepress-starter\n    \n\n 2. 使用你喜欢的包管理器进行初始化\n    \n    yarn init # npm init\n    \n\n 3. 将 VuePress 安装为本地依赖\n    \n    我们已经不再推荐全局安装 VuePress\n    \n    yarn add -D vuepress # npm install -D vuepress\n    \n    \n    注意\n    \n    如果你的现有项目依赖了 webpack 3.x，我们推荐使用 Yarn (opens new window)而不是 npm 来安装 VuePress。因为在这种情形下，npm 会生成错误的依赖树。\n\n 4. 创建你的第一篇文档\n    \n    mkdir docs && echo \'# Hello VuePress\' > docs/README.md\n    \n\n 5. 在 package.json 中添加一些 scripts(opens new window)\n    \n    这一步骤是可选的，但我们推荐你完成它。在下文中，我们会默认这些 scripts 已经被添加。\n    \n    {\n      "scripts": {\n        "docs:dev": "vuepress dev docs",\n        "docs:build": "vuepress build docs"\n      }\n    }\n    \n\n 6. 在本地启动服务器\n    \n    yarn docs:dev # npm run docs:dev\n    \n    \n    VuePress 会在 http://localhost:8080 (opens new window)启动一个热重载的开发服务器。',normalizedContent:'# 1、快速开始\n\n\n\n * 创建工程\n\n\n\n\n# 创建工程\n\n本文会帮助你从头搭建一个简单的 vuepress 文档。如果你想在一个现有项目中使用 vuepress 管理文档，从步骤 3 开始。\n\n 1. 创建并进入一个新目录\n    \n    mkdir vuepress-starter && cd vuepress-starter\n    \n\n 2. 使用你喜欢的包管理器进行初始化\n    \n    yarn init # npm init\n    \n\n 3. 将 vuepress 安装为本地依赖\n    \n    我们已经不再推荐全局安装 vuepress\n    \n    yarn add -d vuepress # npm install -d vuepress\n    \n    \n    注意\n    \n    如果你的现有项目依赖了 webpack 3.x，我们推荐使用 yarn (opens new window)而不是 npm 来安装 vuepress。因为在这种情形下，npm 会生成错误的依赖树。\n\n 4. 创建你的第一篇文档\n    \n    mkdir docs && echo \'# hello vuepress\' > docs/readme.md\n    \n\n 5. 在 package.json 中添加一些 scripts(opens new window)\n    \n    这一步骤是可选的，但我们推荐你完成它。在下文中，我们会默认这些 scripts 已经被添加。\n    \n    {\n      "scripts": {\n        "docs:dev": "vuepress dev docs",\n        "docs:build": "vuepress build docs"\n      }\n    }\n    \n\n 6. 在本地启动服务器\n    \n    yarn docs:dev # npm run docs:dev\n    \n    \n    vuepress 会在 http://localhost:8080 (opens new window)启动一个热重载的开发服务器。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"22、其他评论方案",frontmatter:{autoSort:79,title:"22、其他评论方案"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/22%E3%80%81%E5%85%B6%E4%BB%96%E8%AF%84%E8%AE%BA%E6%96%B9%E6%A1%88.html",relativePath:"zs-tool-框架/vuepress/22、其他评论方案.md",key:"v-0df701a2",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/22%E3%80%81%E5%85%B6%E4%BB%96%E8%AF%84%E8%AE%BA%E6%96%B9%E6%A1%88.html",headers:[{level:2,title:"[#](about:blank#%E6%B3%A8%E5%86%8C-leancloud) 注册 leancloud",slug:"注册-leancloud",normalizedTitle:'<a href="about:blank#%e6%b3%a8%e5%86%8c-leancloud">#</a> 注册 leancloud',charIndex:null},{level:2,title:"[#](about:blank#%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6) 添加评论插件",slug:"添加评论插件",normalizedTitle:'<a href="about:blank#%e6%b7%bb%e5%8a%a0%e8%af%84%e8%ae%ba%e6%8f%92%e4%bb%b6">#</a> 添加评论插件',charIndex:null}],lastUpdated:"2023年12月7日星期四下午3点49分",lastUpdatedTimestamp:1701935365e3,headersStr:"[#](about:blank#%E6%B3%A8%E5%86%8C-leancloud) 注册 leancloud [#](about:blank#%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6) 添加评论插件",content:'# vuepress 支持评论\n\n本文讲述 vuepress 站点如何集成评论系统，选型是 valine+leancloud, 支持匿名评论，缺点是数据没有存储在自己手里。市面上也有其他的方案, 如 gitalk,vssue 等, 但需要用户登录 github 才能发表评论, 但 github 经常无法连接,导致体验非常差。\n\n> 参考文档 (opens new window)\n\n\n# # 注册 leancloud\n\n * 注册leancloud (opens new window)账号,创建应用\n\n * 复制 AppID 和 AppKey\n   \n   \n\n提示\n\n可通过 leancloud 后台管理评论内容\n\n\n# # 添加评论插件\n\n * yarn add vuepress-plugin-comment -D\n * vi ./config.js\n\n// 评论插件\n[\n  "vuepress-plugin-comment",\n  {\n    choosen: "valine",\n    // options选项中的所有参数，会传给Valine的配置\n    options: {\n      el: "#valine-vuepress-comment",\n      appId: "cxPSbJA9SE1uXWt0ywBRl0Cr-gzGzoHsz",\n      appKey: "jKPdKyf3rUlfcVV03gPyBSd1",\n      path: \'<%- frontmatter.to.path %>\'\n    }\n  }\n]\n\n\n\n注意\n\n若不配置 path，则切换页面时评论内容不会刷新',normalizedContent:'# vuepress 支持评论\n\n本文讲述 vuepress 站点如何集成评论系统，选型是 valine+leancloud, 支持匿名评论，缺点是数据没有存储在自己手里。市面上也有其他的方案, 如 gitalk,vssue 等, 但需要用户登录 github 才能发表评论, 但 github 经常无法连接,导致体验非常差。\n\n> 参考文档 (opens new window)\n\n\n# # 注册 leancloud\n\n * 注册leancloud (opens new window)账号,创建应用\n\n * 复制 appid 和 appkey\n   \n   \n\n提示\n\n可通过 leancloud 后台管理评论内容\n\n\n# # 添加评论插件\n\n * yarn add vuepress-plugin-comment -d\n * vi ./config.js\n\n// 评论插件\n[\n  "vuepress-plugin-comment",\n  {\n    choosen: "valine",\n    // options选项中的所有参数，会传给valine的配置\n    options: {\n      el: "#valine-vuepress-comment",\n      appid: "cxpsbja9se1uxwt0ywbrl0cr-gzgzohsz",\n      appkey: "jkpdkyf3rulfcvv03gpybsd1",\n      path: \'<%- frontmatter.to.path %>\'\n    }\n  }\n]\n\n\n\n注意\n\n若不配置 path，则切换页面时评论内容不会刷新',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701935235e3},{title:"25、vuepress 右侧目录",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/25%E3%80%81%E5%8F%B3%E4%BE%A7%E7%9B%AE%E5%BD%95.html",relativePath:"zs-tool-框架/vuepress/25、右侧目录.md",key:"v-157ffd50",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/25%E3%80%81%E5%8F%B3%E4%BE%A7%E7%9B%AE%E5%BD%95.html",headers:[{level:2,title:"版本",slug:"版本",normalizedTitle:"版本",charIndex:164},{level:2,title:"特性",slug:"特性",normalizedTitle:"特性",charIndex:274},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:368},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:360},{level:2,title:"样式",slug:"样式",normalizedTitle:"样式",charIndex:603},{level:2,title:"全局配置",slug:"全局配置",normalizedTitle:"全局配置",charIndex:1301},{level:2,title:"参数说明",slug:"参数说明",normalizedTitle:"参数说明",charIndex:1705},{level:3,title:"showDepth",slug:"showdepth",normalizedTitle:"showdepth",charIndex:1450},{level:3,title:"ignore",slug:"ignore",normalizedTitle:"ignore",charIndex:1472},{level:3,title:"expand",slug:"expand",normalizedTitle:"expand",charIndex:1553},{level:3,title:"customClass",slug:"customclass",normalizedTitle:"customclass",charIndex:1647},{level:2,title:"页面单独配置",slug:"页面单独配置",normalizedTitle:"页面单独配置",charIndex:2202}],lastUpdated:"2023年12月14日星期四晚上6点03分",lastUpdatedTimestamp:170254821e4,headersStr:"版本 特性 安装 使用 样式 全局配置 参数说明 showDepth ignore expand customClass 页面单独配置",content:"# 25、vuepress 右侧目录\n\nhttps://github.com/xuek9900/vuepress-plugin-right-anchor\n\n\nvuepress-plugin-right-anchor\n\n\n\nEnglish ｜中文\n\n> 在用 Vuepress 2.x 编写的文档页面右侧添加 锚点导航栏\n\n\n# 版本\n\n * 2.x.x -> Vuepress 2.x -> npm next -> master 分支\n * 0.x.x -> Vuepress 1.x -> npm latest -> legacy 分支\n\n\n# 特性\n\n * 简化左侧边栏结构的同时不丢失页面内标题导航的功能。\n * 点击锚点标签页面滚动过度。\n * 页面滚动时对应锚点标签跟随高亮。\n * 非全局组件，可在页面内自由使用。\n\n\n# 安装\n\nyarn add vuepress-plugin-right-anchor@next\n# or\nnpm i vuepress-plugin-right-anchor@next -D\n\n\n\n# 使用\n\n在 .vuepress/config.js 添加如下配置。\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    ['vuepress-plugin-right-anchor']\n  ]\n}\n\n\n\n# 样式\n\n在 .vuepress/styles/index.scss 添加样式变量。\n\n.right-anchor {\n  --rightAnchorTextColor: var(--c-text);\n  --rightAnchorFontSize: 14px;\n  /* Btn */\n  --rightAnchorBtnTextColor: var(--rightAnchorTextColor);\n  --rightAnchorBtnBgColor: var(--c-bg);\n  /* Menu */\n  --rightAnchorMenuTextColor: var(--rightAnchorTextColor);\n  --rightAnchorMenuBgColor: var(--c-bg);\n}\n\n/* dark theme */\n.dark .right-anchor {\n  --rightAnchorTextColor: var(--c-text);\n  --rightAnchorFontSize: 14px;\n  /* Btn */\n  --rightAnchorBtnTextColor: var(--rightAnchorTextColor);\n  --rightAnchorBtnBgColor: var(--c-bg);\n  /* Menu */\n  --rightAnchorMenuTextColor: var(--rightAnchorTextColor);\n  --rightAnchorMenuBgColor: var(--c-bg);\n}\n\n\n\n# 全局配置\n\n在 .vuepress/config.js 添加如下配置。\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    [\n      'vuepress-plugin-right-anchor',\n      {\n        showDepth: 1,\n        ignore: [\n          '/',\n          '/api/'\n          // 更多...\n        ],\n        expand: {\n          trigger: 'hover',\n          clickModeDefaultOpen: true\n        },\n        customClass: 'your-customClass',\n      }\n    ]\n  ]\n}\n\n\n\n# 参数说明\n\n\n# showDepth\n\n在右锚显示中将使用哪一级别的标题。 该值的指向含义与 themeconfig.sidebardepth 相同。\n\n * Type: null | number\n * Default: null\n\n\n# ignore\n\n不显示 right-anchor 的页面。\n\n * Type: array\n * Default: []\n\n\n# expand\n\n关于菜单的展开配置。\n\n * Type: object\n   * trigger: string => 展开菜单的触发方式。 'hover' | 'click'\n   * clickModeDefaultOpen: boolean => 点击模式下是否默认打开菜单?\n * Default:\n   \n   {\n     trigger: 'hover',\n     clickModeDefaultOpen: true\n   }\n   \n\n\n# customClass\n\n自定义的 right-anchor 类名。\n\n * Type: null | string\n * Default: null\n\n\n# 页面单独配置\n\n在 .md 中通过 vuepress 推荐的方式设置 front-matter。\n\n---\nrightAnchor: \n  showDepth: 1\n  expand:\n    trigger: hover\n    clickModeDefaultOpen: true\n  customClass: your-customClass\n---\n\n\n\n\n",normalizedContent:"# 25、vuepress 右侧目录\n\nhttps://github.com/xuek9900/vuepress-plugin-right-anchor\n\n\nvuepress-plugin-right-anchor\n\n\n\nenglish ｜中文\n\n> 在用 vuepress 2.x 编写的文档页面右侧添加 锚点导航栏\n\n\n# 版本\n\n * 2.x.x -> vuepress 2.x -> npm next -> master 分支\n * 0.x.x -> vuepress 1.x -> npm latest -> legacy 分支\n\n\n# 特性\n\n * 简化左侧边栏结构的同时不丢失页面内标题导航的功能。\n * 点击锚点标签页面滚动过度。\n * 页面滚动时对应锚点标签跟随高亮。\n * 非全局组件，可在页面内自由使用。\n\n\n# 安装\n\nyarn add vuepress-plugin-right-anchor@next\n# or\nnpm i vuepress-plugin-right-anchor@next -d\n\n\n\n# 使用\n\n在 .vuepress/config.js 添加如下配置。\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    ['vuepress-plugin-right-anchor']\n  ]\n}\n\n\n\n# 样式\n\n在 .vuepress/styles/index.scss 添加样式变量。\n\n.right-anchor {\n  --rightanchortextcolor: var(--c-text);\n  --rightanchorfontsize: 14px;\n  /* btn */\n  --rightanchorbtntextcolor: var(--rightanchortextcolor);\n  --rightanchorbtnbgcolor: var(--c-bg);\n  /* menu */\n  --rightanchormenutextcolor: var(--rightanchortextcolor);\n  --rightanchormenubgcolor: var(--c-bg);\n}\n\n/* dark theme */\n.dark .right-anchor {\n  --rightanchortextcolor: var(--c-text);\n  --rightanchorfontsize: 14px;\n  /* btn */\n  --rightanchorbtntextcolor: var(--rightanchortextcolor);\n  --rightanchorbtnbgcolor: var(--c-bg);\n  /* menu */\n  --rightanchormenutextcolor: var(--rightanchortextcolor);\n  --rightanchormenubgcolor: var(--c-bg);\n}\n\n\n\n# 全局配置\n\n在 .vuepress/config.js 添加如下配置。\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    [\n      'vuepress-plugin-right-anchor',\n      {\n        showdepth: 1,\n        ignore: [\n          '/',\n          '/api/'\n          // 更多...\n        ],\n        expand: {\n          trigger: 'hover',\n          clickmodedefaultopen: true\n        },\n        customclass: 'your-customclass',\n      }\n    ]\n  ]\n}\n\n\n\n# 参数说明\n\n\n# showdepth\n\n在右锚显示中将使用哪一级别的标题。 该值的指向含义与 themeconfig.sidebardepth 相同。\n\n * type: null | number\n * default: null\n\n\n# ignore\n\n不显示 right-anchor 的页面。\n\n * type: array\n * default: []\n\n\n# expand\n\n关于菜单的展开配置。\n\n * type: object\n   * trigger: string => 展开菜单的触发方式。 'hover' | 'click'\n   * clickmodedefaultopen: boolean => 点击模式下是否默认打开菜单?\n * default:\n   \n   {\n     trigger: 'hover',\n     clickmodedefaultopen: true\n   }\n   \n\n\n# customclass\n\n自定义的 right-anchor 类名。\n\n * type: null | string\n * default: null\n\n\n# 页面单独配置\n\n在 .md 中通过 vuepress 推荐的方式设置 front-matter。\n\n---\nrightanchor: \n  showdepth: 1\n  expand:\n    trigger: hover\n    clickmodedefaultopen: true\n  customclass: your-customclass\n---\n\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170254821e4},{title:"2、初体验",frontmatter:{autoSort:99},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/2%E3%80%81%E5%88%9D%E4%BD%93%E9%AA%8C.html",relativePath:"zs-tool-框架/vuepress/2、初体验.md",key:"v-ea0fa4a6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/2%E3%80%81%E5%88%9D%E4%BD%93%E9%AA%8C.html",lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:null,content:"# 2、初体验\n\n\n\n\n\n\n\n目标\n\n * 创建GitHub账号\n * 创建Github项目\n * 初体验vuepress\n * 默认主体的首页\n\n初体验\n\n\n\n---\nhome: true\nheroImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /zh/guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---\n\n\n",normalizedContent:"# 2、初体验\n\n\n\n\n\n\n\n目标\n\n * 创建github账号\n * 创建github项目\n * 初体验vuepress\n * 默认主体的首页\n\n初体验\n\n\n\n---\nhome: true\nheroimage: /hero.png\nherotext: hero 标题\ntagline: hero 副标题\nactiontext: 快速上手 →\nactionlink: /zh/guide/\nfeatures:\n- title: 简洁至上\n  details: 以 markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: vue驱动\n  details: 享受 vue + webpack 的开发体验，在 markdown 中使用 vue 组件，同时可以使用 vue 来开发自定义主题。\n- title: 高性能\n  details: vuepress 为每个页面预渲染生成静态的 html，同时在页面被加载的时候，将作为 spa 运行。\nfooter: mit licensed | copyright © 2018-present evan you\n---\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"23、百度分析",frontmatter:{autoSort:78,title:"23、百度分析"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/23%E3%80%81%E7%99%BE%E5%BA%A6%E5%88%86%E6%9E%90.html",relativePath:"zs-tool-框架/vuepress/23、百度分析.md",key:"v-3cde78c8",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/23%E3%80%81%E7%99%BE%E5%BA%A6%E5%88%86%E6%9E%90.html",headers:[{level:3,title:"开通百度统计",slug:"开通百度统计",normalizedTitle:"开通百度统计",charIndex:2},{level:3,title:"配置代码",slug:"配置代码",normalizedTitle:"配置代码",charIndex:148},{level:3,title:"数据导出",slug:"数据导出",normalizedTitle:"数据导出",charIndex:706},{level:3,title:"[](https://blog.csdn.net/weixin_45732455/article/details/129975128)展示浏览量",slug:"展示浏览量",normalizedTitle:'<a href="https://blog.csdn.net/weixin_45732455/article/details/129975128" target="_blank" rel="noopener noreferrer"><outboundlink/></a>展示浏览量',charIndex:null},{level:3,title:"[](https://blog.csdn.net/weixin_45732455/article/details/129975128)调试",slug:"调试",normalizedTitle:'<a href="https://blog.csdn.net/weixin_45732455/article/details/129975128" target="_blank" rel="noopener noreferrer"><outboundlink/></a>调试',charIndex:null},{level:3,title:"[](https://blog.csdn.net/weixin_45732455/article/details/129975128)其他",slug:"其他",normalizedTitle:'<a href="https://blog.csdn.net/weixin_45732455/article/details/129975128" target="_blank" rel="noopener noreferrer"><outboundlink/></a>其他',charIndex:null}],lastUpdated:"2023年12月7日星期四下午3点59分",lastUpdatedTimestamp:1701935965e3,headersStr:"开通百度统计 配置代码 数据导出 [](https://blog.csdn.net/weixin_45732455/article/details/129975128)展示浏览量 [](https://blog.csdn.net/weixin_45732455/article/details/129975128)调试 [](https://blog.csdn.net/weixin_45732455/article/details/129975128)其他",content:'# 开通百度统计\n\n我是使用百度统计来统计浏览量的，首先要注册账号，如果有了也可以直接登陆。我用的账号的普通的百度账号，而不是营销账号。\n\n登陆之后就能看到如下界面，并且点击使用设置：\n\n\n点击之后进入设置页面，可以新建网站：\n\n\n然后填入信息：\n\n\n确定之后就能看到百度给的脚本了：\n\n\n\n# 配置代码\n\n按照他的教程，把脚本添加到我们的所有页面里面。由于使用vuepress构建后的是静态页面，切换页面也不会触发请求，所以我们需要在进去网站的时候就把这段脚本加上，而且在切换页面的时候也需要触发统计。\n\n现在先把代码加到我们的页面中：\n\n\n接下来添加 config 同级文件 enhanceApp.js，添加如下代码：\n\nexport default ({ router }) => {\n  // 路由切换事件处理\n  router.beforeEach((to, from, next) => {\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      if (to.path) {\n        _hmt.push(["_trackPageview", to.fullPath]);\n      }\n    }\n    next();\n  });\n};\n\n\n\n然后等一段时间，大概20分钟，如果配置正确的话就能看到数据了！\n\n\n那么接下来就是把数据引入到我们的网站里面了。我们可以阅读百度统计的文档来开通数据api，但是开通需要前一天网站的阅读量超过100才可以，所以目前我还开通不了，自己随便点点几下就好了，只能明天再继续了。\n\n\n# 数据导出\n\n– one day later –\n今天可以开通数据导出服务了，开通后我们会获取到API Key与Secret Key，如下图：\n\n\n注意图中的统计工具和文档，后面调试的时候需要用到。\n\n然后我们点击 此文档 继续后面的操作。\n\n首先利用 api key 去获取 code：\n\n http://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id={CLIENT_ID}&redirect_uri=oob&scope=basic&display=popup\n\n\n\n其中的CLIENT_ID就是api key。\n\n获取到code之后，通过code、CLIENT_ID和Secret Key去获取 ACCESS_TOKEN，这个就是我们要调用接口的凭证了：\n\nhttp://openapi.baidu.com/oauth/2.0/token?grant_type=authorization_code&code={CODE}&client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&redirect_uri=oob\n\n\n\n返回结果如下：\n\n{\n    "expires_in": 2592000,\n    "refresh_token":"2.385d55f8615fdfd9edb7c4b5ebdc3e39.604800.1293440400-2346678-124328",\n    "access_token":"1.a6b7dbd428f731035f771b8d15063f61.86400.1292922000-2346678-124328",\n    "session_secret":"ANXxSNjwQDugf8615OnqeikRMu2bKaXCdlLxn",\n    "session_key":" 248APxvxjCZ0VEC43EYrvxqaK4oZExMB",\n    "scope":"basic"\n}\n\n\n\n此外还有一个参数需要获取，那就是site_id，也就是我们网站的id，需要调用查询自己的网站列表api去获取：\n\nhttps://openapi.baidu.com/rest/2.0/tongji/config/getSiteList?access_token=1.a6b7dbd428f731035f771b8d15063f61.86400.1292922000-2346678-124328\n\n\n\n把其中的 access_token 换成你自己的。\n\n返回的结果如下：\n\n{\n    "list": [\n        {\n            "site_id": 18957957,\n            "domain": "xxx",\n            "status": 0,\n            "create_time": "2023-04-04 17:58:49",\n            "sub_dir_list": []\n        }\n    ]\n}\n\n\n\n记住这个site_id。\n\n然后我们回到刚开通数据导出服务的那个页面，点击api调试工具，来到调试界面，选择百度账号之后，填入自己的 access_token，选择获取报告数据，网站概况(趋势数据)，最后再填入参数就OK啦。\n\n这里我们简单试一下，查询一下浏览量：\n\n点击提交之后，就会自动帮我们生成请求链接和响应结果：\n\n\n我们就可以拿着这个链接放到我们的博客里啦。\n\n然后我只能查出总的访问量，不能看到每个子页面的访问量，可能是我设置站点的时候有些地方出错了。但经过查阅用户手册，发现可以通过调用 受访页面 的接口来获取每个页面的访问量。\n\nhttps://openapi.baidu.com/rest/2.0/tongji/report/getData?access_token=xxxxxxxx&site_id=xxxx&method=visit/toppage/a&start_date=20190101&end_date=20190105&metrics=pv_count,visitor_count\n\n\n\n其实就是 method 不一样。\n\n那么我们可以在之前的 enhanceApp.js 中请求访问量，代码如下：\n\nimport { getPV } from "../util/api";\nexport default ({ router }) => {\n  // 路由切换事件处理\n  router.beforeEach((to, from, next) => {\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      if (to.path) {\n        _hmt.push(["_trackPageview", to.fullPath]);\n        getPV().then(res => {\n          if (res.error_code) {\n            // Access token 过期了\n          } else {\n            const items = res.data.result.items || []\n            const page = items[0] || [], vis = items[1] || []\n            let pv = 0\n            // 主页统计全部\n            if(to.path == \'/\') {\n              page.forEach((value, index) => {\n                // 只统计该域名下的，因为开发的时候访问也会被计算这里分开统计\n                if(value[0].name.indexOf(window.location.origin) > -1) {\n                  pv += vis[index][0]\n                }\n              })\n            } else {\n              const pathUrl = window.location.origin + to.path\n              for(let i = 0, n = page.length; i < n; i++) {\n                if(page[i][0].name == pathUrl) {\n                  pv = vis[i][0]\n                  break\n                }\n              }\n            }\n            console.log(pv)\n          }\n        })\n      }\n    }\n    next();\n  });\n};\n\n\n\n\n# 展示浏览量\n\n到这里已经只差最后一步了，那就是把浏览量展示到我们的主页还有每篇博客上面。因为我使用的主题是vuepress-theme-reco，所以需要在node_modules中找到主题的源代码，自己修改想要显示浏览量的位置。\n\n例如在首页中，我希望把浏览量设置在底部备案的位置：\n\n\n所以我们需要找到Footer组件，经过我的一番寻找，发现他在node_modules/vuepress-theme-reco/components下，我们直接把备案的那串代码注释掉，添加如下代码：\n\n\x3c!-- template --\x3e\n<span>\n  <reco-icon icon="reco-eye" />\n  <a>\n    <span>{{ pv }}</span>\n  </a>\n</span>\n\n\x3c!-- js --\x3e\nsetup() {\n  ...\n  const pv = window.pv\n  return { ..., pv}\n}\n\n\n\n然后重新启动项目，就能看到效果了：\n\n\n接下来就是在博客文章的页面加上了，继续翻源码，还是在刚刚的component目录下，找到PageInfo，进去刚刚相同的操作就好了。但是发现他原本就有这一段代码：\n\n<reco-icon\n  v-if="showAccessNumber === true"\n  icon="reco-eye"\n>\n  <AccessNumber :idVal="pageInfo.path" :numStyle="numStyle" />\n</reco-icon>\n\n\n\n也就是说官方是支持阅读量的，但通过查阅官方文档后，他们的这么解释的：\n\n> 浏览量 仅在使用 Valine 时显示；\n> \n> 因为 浏览量 需要在页面加载时去调用相关接口，所以列表页的所有数据会一起加载下来，如果文章数量很多会影响加载速度，所以在 1.2.0 之后去掉文章列表的浏览量。\n\n那我们也不用管了，直接使用百度的统计API就行。\n\n修改之后可以看到如下效果：\n\n\n\n# 调试\n\n本以为大功告成了，没想到回到首页一看，寄，首页中文章列表也是用的这个组件，所以浏览量变成了首页的：\n\n\n那么现在的问题是在首页的时候需要获取到各个页面的浏览量，这个好办，我们把之前pv变量设置成一个对象，把页面的url作为key，然后值为浏览量。稍微修改一下 enhanceApp.js 中相关的部分：\n\nimport { getPV } from "../util/api";\nexport default ({ router }) => {\n  // 路由切换事件处理\n  router.beforeEach(async (to, from, next) => {\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      if (to.path) {\n        _hmt.push(["_trackPageview", to.fullPath]);\n        await getPV().then(res => {\n          let pv = {} // 修改为一个对象\n          if (res.error_code) {\n            // Access token 过期了\n          } else {\n            const items = res.data.result.items || []\n            const page = items[0] || [], vis = items[1] || []\n            const n = page.length\n            // 首页把全部页面的浏览量添加进去\n            if(to.path == \'/\') {\n              let total = 0\n              page.forEach((value, index) => {\n                if(value[0].name.indexOf(window.location.origin) > -1) {\n                  total += vis[index][0]\n                }\n              })\n              pv[\'home\'] = total\n              for(let i = 0; i < n; i++) {\n                pv[page[i][0].name] = vis[i][0]\n              }\n            } else {\n              const pathUrl = window.location.origin + to.path\n              for(let i = 0; i < n; i++) {\n                if(page[i][0].name == pathUrl) {\n                  pv[pathUrl] = vis[i][0] // 不是首页只添加自己的页面\n                  break\n                }\n              }\n            }\n          }\n          window.pv = pv\n        })\n      }\n    }\n    next();\n  });\n};\n\n\n\n然后对应修改 Footer 组件和 PageInfo 组件的 pv 取值：\n\n// Footer.vue\nconst pv = window.pv[\'home\'] || 0\n\n// PageInfo.vue\nconst pv = window.pv[window.location.origin + props.pageInfo.path] || 0\n\n// 原本我还在想，首页中是如何知道每个PageInfo组件是属于哪一篇文章的呢，因为官方原本也有实现这个功能。结果打印props一看，好家伙，信息都在里面。\n// 所以可以拿到这个 props.pageInfo.path，匹配到对应的页面就可以拿到浏览量了。\n\n\n\n本以为真的没问题了，没想到一打包，报了一堆错误QAQ，发现是window is not defined。又是经过了一阵查找，发现没什么特别好的解决方法。只能综合网上的方法自己想一个了。\n\n我们就是要个全局变量可以存储 pv 这个对象，那么可以把他挂在 Vue 实例上。但又有一个问题，我们在服务端获取不了当前的页面路径，使用 window.location.domain 也会报错。最后发现 enhanceApp.js 中可以接收一个变量 isServer，判断当前是否是服务端。那么只要不是在服务端，我们就能使用 window 了。\n\n最终修改代码如下：\n\n// enhanceApp.js\nimport { getPV } from "../util/api";\nimport Vue from \'vue\'\nexport default ({ router, isServer }) => {\n  // 路由切换事件处理\n  router.beforeEach(async (to, from, next) => {\n    Vue.prototype.isServer = isServer\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      // 这里稍微修改了一下，因为被编译成html了，hash值改变就不再重复添加了\n      if (to.path && (to.path == \'/\' || to.path != from.path)) {\n        _hmt.push(["_trackPageview", to.path]);\n        await getPV().then(res => {\n          let pv = {}\n          if (res.error_code) {\n            // Access token 过期了\n          } else {\n            const items = res.data.result.items || []\n            const page = items[0] || [], vis = items[1] || []\n            const n = page.length\n            if(to.path == \'/\') {\n              let total = 0\n              page.forEach((value, index) => {\n                if(value[0].name.indexOf(window.location.origin) > -1) {\n                  total += vis[index][0]\n                }\n              })\n              pv[\'home\'] = total\n              for(let i = 0; i < n; i++) {\n                pv[page[i][0].name] = vis[i][0]\n              }\n            } else {\n              const pathUrl = window.location.origin + to.path\n              for(let i = 0; i < n; i++) {\n                if(page[i][0].name == pathUrl) {\n                  pv[pathUrl] = vis[i][0]\n                  break\n                }\n              }\n            }\n          }\n          Vue.prototype.pv = pv\n        })\n      }\n    }\n    next();\n  });\n};\n\n// PageInfo.vue\nlet pv = 0\nif(!Vue.prototype.isServer && Vue.prototype.pv) {\n  pv = Vue.prototype.pv[window.location.origin + props.pageInfo.path]\n}\n\n// Footer.vue\nlet pv = 0\nif(!Vue.prototype.isServer && Vue.prototype.pv) {\n  pv = Vue.prototype.pv[\'home\']\n}\n\n\n\n期间还有一个小插曲，就是本地没问题，到服务端却报错了，Uncaught DOMException: Failed to execute ‘appendChild’ on ‘Node’: This node type does not support this method. at Object.appendChild 。经过查阅和调试之后，发现是 v-if 的问题，也就是在 PageInfo 和 Footer 组件中，如果你用了 v-if 去控制浏览量的显隐，因为在服务端是不会渲染的，而到了浏览器就报错了。所以把 v-if 修改成 v-show 就可以了。\n\n这么修改之后就基本就没问题了，看看最后的效果：\n\n\n这下终于大功告成了！虽然走了不少弯路，还修改了主题的源码，好在最终想要的效果也实现了。\n\n\n# 其他\n\n还有一点就是百度统计的 access_token 有效期只有一个月，过期了需要用 refresh_token 去获取新的，在使用手册里面也有介绍方法。等过期了我看看啥情况再做一下自动更新吧。\n\n本文转自 https://blog.csdn.net/weixin_45732455/article/details/129975128，如有侵权，请联系删除。',normalizedContent:'# 开通百度统计\n\n我是使用百度统计来统计浏览量的，首先要注册账号，如果有了也可以直接登陆。我用的账号的普通的百度账号，而不是营销账号。\n\n登陆之后就能看到如下界面，并且点击使用设置：\n\n\n点击之后进入设置页面，可以新建网站：\n\n\n然后填入信息：\n\n\n确定之后就能看到百度给的脚本了：\n\n\n\n# 配置代码\n\n按照他的教程，把脚本添加到我们的所有页面里面。由于使用vuepress构建后的是静态页面，切换页面也不会触发请求，所以我们需要在进去网站的时候就把这段脚本加上，而且在切换页面的时候也需要触发统计。\n\n现在先把代码加到我们的页面中：\n\n\n接下来添加 config 同级文件 enhanceapp.js，添加如下代码：\n\nexport default ({ router }) => {\n  // 路由切换事件处理\n  router.beforeeach((to, from, next) => {\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      if (to.path) {\n        _hmt.push(["_trackpageview", to.fullpath]);\n      }\n    }\n    next();\n  });\n};\n\n\n\n然后等一段时间，大概20分钟，如果配置正确的话就能看到数据了！\n\n\n那么接下来就是把数据引入到我们的网站里面了。我们可以阅读百度统计的文档来开通数据api，但是开通需要前一天网站的阅读量超过100才可以，所以目前我还开通不了，自己随便点点几下就好了，只能明天再继续了。\n\n\n# 数据导出\n\n– one day later –\n今天可以开通数据导出服务了，开通后我们会获取到api key与secret key，如下图：\n\n\n注意图中的统计工具和文档，后面调试的时候需要用到。\n\n然后我们点击 此文档 继续后面的操作。\n\n首先利用 api key 去获取 code：\n\n http://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id={client_id}&redirect_uri=oob&scope=basic&display=popup\n\n\n\n其中的client_id就是api key。\n\n获取到code之后，通过code、client_id和secret key去获取 access_token，这个就是我们要调用接口的凭证了：\n\nhttp://openapi.baidu.com/oauth/2.0/token?grant_type=authorization_code&code={code}&client_id={client_id}&client_secret={client_secret}&redirect_uri=oob\n\n\n\n返回结果如下：\n\n{\n    "expires_in": 2592000,\n    "refresh_token":"2.385d55f8615fdfd9edb7c4b5ebdc3e39.604800.1293440400-2346678-124328",\n    "access_token":"1.a6b7dbd428f731035f771b8d15063f61.86400.1292922000-2346678-124328",\n    "session_secret":"anxxsnjwqdugf8615onqeikrmu2bkaxcdllxn",\n    "session_key":" 248apxvxjcz0vec43eyrvxqak4ozexmb",\n    "scope":"basic"\n}\n\n\n\n此外还有一个参数需要获取，那就是site_id，也就是我们网站的id，需要调用查询自己的网站列表api去获取：\n\nhttps://openapi.baidu.com/rest/2.0/tongji/config/getsitelist?access_token=1.a6b7dbd428f731035f771b8d15063f61.86400.1292922000-2346678-124328\n\n\n\n把其中的 access_token 换成你自己的。\n\n返回的结果如下：\n\n{\n    "list": [\n        {\n            "site_id": 18957957,\n            "domain": "xxx",\n            "status": 0,\n            "create_time": "2023-04-04 17:58:49",\n            "sub_dir_list": []\n        }\n    ]\n}\n\n\n\n记住这个site_id。\n\n然后我们回到刚开通数据导出服务的那个页面，点击api调试工具，来到调试界面，选择百度账号之后，填入自己的 access_token，选择获取报告数据，网站概况(趋势数据)，最后再填入参数就ok啦。\n\n这里我们简单试一下，查询一下浏览量：\n\n点击提交之后，就会自动帮我们生成请求链接和响应结果：\n\n\n我们就可以拿着这个链接放到我们的博客里啦。\n\n然后我只能查出总的访问量，不能看到每个子页面的访问量，可能是我设置站点的时候有些地方出错了。但经过查阅用户手册，发现可以通过调用 受访页面 的接口来获取每个页面的访问量。\n\nhttps://openapi.baidu.com/rest/2.0/tongji/report/getdata?access_token=xxxxxxxx&site_id=xxxx&method=visit/toppage/a&start_date=20190101&end_date=20190105&metrics=pv_count,visitor_count\n\n\n\n其实就是 method 不一样。\n\n那么我们可以在之前的 enhanceapp.js 中请求访问量，代码如下：\n\nimport { getpv } from "../util/api";\nexport default ({ router }) => {\n  // 路由切换事件处理\n  router.beforeeach((to, from, next) => {\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      if (to.path) {\n        _hmt.push(["_trackpageview", to.fullpath]);\n        getpv().then(res => {\n          if (res.error_code) {\n            // access token 过期了\n          } else {\n            const items = res.data.result.items || []\n            const page = items[0] || [], vis = items[1] || []\n            let pv = 0\n            // 主页统计全部\n            if(to.path == \'/\') {\n              page.foreach((value, index) => {\n                // 只统计该域名下的，因为开发的时候访问也会被计算这里分开统计\n                if(value[0].name.indexof(window.location.origin) > -1) {\n                  pv += vis[index][0]\n                }\n              })\n            } else {\n              const pathurl = window.location.origin + to.path\n              for(let i = 0, n = page.length; i < n; i++) {\n                if(page[i][0].name == pathurl) {\n                  pv = vis[i][0]\n                  break\n                }\n              }\n            }\n            console.log(pv)\n          }\n        })\n      }\n    }\n    next();\n  });\n};\n\n\n\n\n# 展示浏览量\n\n到这里已经只差最后一步了，那就是把浏览量展示到我们的主页还有每篇博客上面。因为我使用的主题是vuepress-theme-reco，所以需要在node_modules中找到主题的源代码，自己修改想要显示浏览量的位置。\n\n例如在首页中，我希望把浏览量设置在底部备案的位置：\n\n\n所以我们需要找到footer组件，经过我的一番寻找，发现他在node_modules/vuepress-theme-reco/components下，我们直接把备案的那串代码注释掉，添加如下代码：\n\n\x3c!-- template --\x3e\n<span>\n  <reco-icon icon="reco-eye" />\n  <a>\n    <span>{{ pv }}</span>\n  </a>\n</span>\n\n\x3c!-- js --\x3e\nsetup() {\n  ...\n  const pv = window.pv\n  return { ..., pv}\n}\n\n\n\n然后重新启动项目，就能看到效果了：\n\n\n接下来就是在博客文章的页面加上了，继续翻源码，还是在刚刚的component目录下，找到pageinfo，进去刚刚相同的操作就好了。但是发现他原本就有这一段代码：\n\n<reco-icon\n  v-if="showaccessnumber === true"\n  icon="reco-eye"\n>\n  <accessnumber :idval="pageinfo.path" :numstyle="numstyle" />\n</reco-icon>\n\n\n\n也就是说官方是支持阅读量的，但通过查阅官方文档后，他们的这么解释的：\n\n> 浏览量 仅在使用 valine 时显示；\n> \n> 因为 浏览量 需要在页面加载时去调用相关接口，所以列表页的所有数据会一起加载下来，如果文章数量很多会影响加载速度，所以在 1.2.0 之后去掉文章列表的浏览量。\n\n那我们也不用管了，直接使用百度的统计api就行。\n\n修改之后可以看到如下效果：\n\n\n\n# 调试\n\n本以为大功告成了，没想到回到首页一看，寄，首页中文章列表也是用的这个组件，所以浏览量变成了首页的：\n\n\n那么现在的问题是在首页的时候需要获取到各个页面的浏览量，这个好办，我们把之前pv变量设置成一个对象，把页面的url作为key，然后值为浏览量。稍微修改一下 enhanceapp.js 中相关的部分：\n\nimport { getpv } from "../util/api";\nexport default ({ router }) => {\n  // 路由切换事件处理\n  router.beforeeach(async (to, from, next) => {\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      if (to.path) {\n        _hmt.push(["_trackpageview", to.fullpath]);\n        await getpv().then(res => {\n          let pv = {} // 修改为一个对象\n          if (res.error_code) {\n            // access token 过期了\n          } else {\n            const items = res.data.result.items || []\n            const page = items[0] || [], vis = items[1] || []\n            const n = page.length\n            // 首页把全部页面的浏览量添加进去\n            if(to.path == \'/\') {\n              let total = 0\n              page.foreach((value, index) => {\n                if(value[0].name.indexof(window.location.origin) > -1) {\n                  total += vis[index][0]\n                }\n              })\n              pv[\'home\'] = total\n              for(let i = 0; i < n; i++) {\n                pv[page[i][0].name] = vis[i][0]\n              }\n            } else {\n              const pathurl = window.location.origin + to.path\n              for(let i = 0; i < n; i++) {\n                if(page[i][0].name == pathurl) {\n                  pv[pathurl] = vis[i][0] // 不是首页只添加自己的页面\n                  break\n                }\n              }\n            }\n          }\n          window.pv = pv\n        })\n      }\n    }\n    next();\n  });\n};\n\n\n\n然后对应修改 footer 组件和 pageinfo 组件的 pv 取值：\n\n// footer.vue\nconst pv = window.pv[\'home\'] || 0\n\n// pageinfo.vue\nconst pv = window.pv[window.location.origin + props.pageinfo.path] || 0\n\n// 原本我还在想，首页中是如何知道每个pageinfo组件是属于哪一篇文章的呢，因为官方原本也有实现这个功能。结果打印props一看，好家伙，信息都在里面。\n// 所以可以拿到这个 props.pageinfo.path，匹配到对应的页面就可以拿到浏览量了。\n\n\n\n本以为真的没问题了，没想到一打包，报了一堆错误qaq，发现是window is not defined。又是经过了一阵查找，发现没什么特别好的解决方法。只能综合网上的方法自己想一个了。\n\n我们就是要个全局变量可以存储 pv 这个对象，那么可以把他挂在 vue 实例上。但又有一个问题，我们在服务端获取不了当前的页面路径，使用 window.location.domain 也会报错。最后发现 enhanceapp.js 中可以接收一个变量 isserver，判断当前是否是服务端。那么只要不是在服务端，我们就能使用 window 了。\n\n最终修改代码如下：\n\n// enhanceapp.js\nimport { getpv } from "../util/api";\nimport vue from \'vue\'\nexport default ({ router, isserver }) => {\n  // 路由切换事件处理\n  router.beforeeach(async (to, from, next) => {\n    vue.prototype.isserver = isserver\n    //触发百度的pv统计\n    if (typeof _hmt != "undefined") {\n      // 这里稍微修改了一下，因为被编译成html了，hash值改变就不再重复添加了\n      if (to.path && (to.path == \'/\' || to.path != from.path)) {\n        _hmt.push(["_trackpageview", to.path]);\n        await getpv().then(res => {\n          let pv = {}\n          if (res.error_code) {\n            // access token 过期了\n          } else {\n            const items = res.data.result.items || []\n            const page = items[0] || [], vis = items[1] || []\n            const n = page.length\n            if(to.path == \'/\') {\n              let total = 0\n              page.foreach((value, index) => {\n                if(value[0].name.indexof(window.location.origin) > -1) {\n                  total += vis[index][0]\n                }\n              })\n              pv[\'home\'] = total\n              for(let i = 0; i < n; i++) {\n                pv[page[i][0].name] = vis[i][0]\n              }\n            } else {\n              const pathurl = window.location.origin + to.path\n              for(let i = 0; i < n; i++) {\n                if(page[i][0].name == pathurl) {\n                  pv[pathurl] = vis[i][0]\n                  break\n                }\n              }\n            }\n          }\n          vue.prototype.pv = pv\n        })\n      }\n    }\n    next();\n  });\n};\n\n// pageinfo.vue\nlet pv = 0\nif(!vue.prototype.isserver && vue.prototype.pv) {\n  pv = vue.prototype.pv[window.location.origin + props.pageinfo.path]\n}\n\n// footer.vue\nlet pv = 0\nif(!vue.prototype.isserver && vue.prototype.pv) {\n  pv = vue.prototype.pv[\'home\']\n}\n\n\n\n期间还有一个小插曲，就是本地没问题，到服务端却报错了，uncaught domexception: failed to execute ‘appendchild’ on ‘node’: this node type does not support this method. at object.appendchild 。经过查阅和调试之后，发现是 v-if 的问题，也就是在 pageinfo 和 footer 组件中，如果你用了 v-if 去控制浏览量的显隐，因为在服务端是不会渲染的，而到了浏览器就报错了。所以把 v-if 修改成 v-show 就可以了。\n\n这么修改之后就基本就没问题了，看看最后的效果：\n\n\n这下终于大功告成了！虽然走了不少弯路，还修改了主题的源码，好在最终想要的效果也实现了。\n\n\n# 其他\n\n还有一点就是百度统计的 access_token 有效期只有一个月，过期了需要用 refresh_token 去获取新的，在使用手册里面也有介绍方法。等过期了我看看啥情况再做一下自动更新吧。\n\n本文转自 https://blog.csdn.net/weixin_45732455/article/details/129975128，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701935965e3},{title:"26、渲染 Mermaid 绘图",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/26%E3%80%81%E6%B8%B2%E6%9F%93%20Mermaid%20%E7%BB%98%E5%9B%BE.html",relativePath:"zs-tool-框架/vuepress/26、渲染 Mermaid 绘图.md",key:"v-2bdc633a",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/26%E3%80%81%E6%B8%B2%E6%9F%93%20Mermaid%20%E7%BB%98%E5%9B%BE.html",headers:[{level:3,title:"安装插件",slug:"安装插件",normalizedTitle:"安装插件",charIndex:214},{level:3,title:"配置插件",slug:"配置插件",normalizedTitle:"配置插件",charIndex:322}],lastUpdated:"2024年1月17日星期三下午2点17分",lastUpdatedTimestamp:1705472246e3,headersStr:"安装插件 配置插件",content:"# 26、渲染 Mermaid 绘图\n\nhttps://www.techgrow.cn/posts/bc19d204.html\n\n本文将介绍 VuePress 如何渲染 Mermaid 绘图，适用于 VuePress 1.x 与 VuePress 2.x。\n\nVuePress 1.x 可以直接安装第三方插件 vuepress-plugin-mermaidjs 来渲染 Mermaid 绘图，插件的详细文档可看 这里。\n\n\n# 安装插件\n\n安装插件时必须指定具体的版本号，否则默认会安装最新版本的插件，最新版本不兼容 VuePres 1.x。\n\nyarn add vuepress-plugin-mermaidjs@1.9.1 -D\n\n\n\n# 配置插件\n\n编辑 VuePress 1.x 的 .vuepress/config.js 配置文件，新增 mermaidjs 插件，如下所示：\n\nmodule.exports = {\n    plugins: [\n        'vuepress-plugin-mermaidjs'\n    ]\n}\n",normalizedContent:"# 26、渲染 mermaid 绘图\n\nhttps://www.techgrow.cn/posts/bc19d204.html\n\n本文将介绍 vuepress 如何渲染 mermaid 绘图，适用于 vuepress 1.x 与 vuepress 2.x。\n\nvuepress 1.x 可以直接安装第三方插件 vuepress-plugin-mermaidjs 来渲染 mermaid 绘图，插件的详细文档可看 这里。\n\n\n# 安装插件\n\n安装插件时必须指定具体的版本号，否则默认会安装最新版本的插件，最新版本不兼容 vuepres 1.x。\n\nyarn add vuepress-plugin-mermaidjs@1.9.1 -d\n\n\n\n# 配置插件\n\n编辑 vuepress 1.x 的 .vuepress/config.js 配置文件，新增 mermaidjs 插件，如下所示：\n\nmodule.exports = {\n    plugins: [\n        'vuepress-plugin-mermaidjs'\n    ]\n}\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705472246e3},{title:"24、侧边栏广告位",frontmatter:{autoSort:77,title:"24、侧边栏广告位"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/24%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B9%BF%E5%91%8A%E4%BD%8D.html",relativePath:"zs-tool-框架/vuepress/24、侧边栏广告位.md",key:"v-22537c84",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/24%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%B9%BF%E5%91%8A%E4%BD%8D.html",lastUpdated:"2023年12月7日星期四下午4点10分",lastUpdatedTimestamp:1701936617e3,headersStr:null,content:'> Header中导入js\n\nmodule.exports = [\n  ["script", { charset: "utf-8", src: "/js/custom.js" }],//加载右侧菜单栏图片\n]\n\n\n> .vuepress/public/js/custom.js\n\n/*\nif(top.location!==self.location){\n\ttop.location.href=self.location.href;\n}\nif(document.location.host != "hliedu.com" \n\t&& location.href.indexOf(\'http\') >-1 \n\t&& location.href.indexOf(\'localhost\')==-1){\n\tlocation.replace(\'https://book.hliedu.com/\')\n}\n\t*/\nwindow.aCallFun = function(elem, args) {\n  if(elem[0] && elem[0].src){\n    var reg = /(http:\\/\\/|https:\\/\\/)(.*?)\\/{1}(.*)/i;\n    var url = elem[0].src || elem[0].getAttribute(\'src\');\n    var host = url.replace(reg,"$2");\n    \n    if(host.indexOf(\'baidu\')>-1 || host.indexOf(\'weibo\')>-1 || host.indexOf(\'sina\')>-1|| host.indexOf(\'hliedu.com\')>-1 || host.indexOf(\'http\')===-1){\n        return true;\n    }else{\n        return false;\n    }\n  }else if(elem[0].id && elem[0].id.indexOf(\'cproIframe\')>-1){\n    return false;\n  }else{\n    return true;\n  }\n}\nwindow.f = Element.prototype.appendChild;\nElement.prototype.appendChild = function() {\n    var flag = window.aCallFun.call(this, arguments);\n    if(flag === true){\n        return window.f.apply(this, arguments);\n    }else{\n        // return window.f.apply(this, arguments);\n    }\n};\n\nvar _hrefs = "https://www.aliyun.com/minisite/goods?taskPkg=1111ydsrwb&pkgSid=11811&userCode=goqhbyn3";\nfunction vueSidebarShow() {\n\tvar windowWidth = document.body.clientWidth || window.innerWidth;\n\tif(windowWidth > 760){\n\t\tloadSidebar(_hrefs);\n\t}\n}\n\n//添加图片到侧边栏\nfunction loadSidebar(hrefTxt) {\n\tvar sidebars = document.getElementsByClassName("sidebar");\tvar divNode = document.createElement("div");divNode.setAttribute("style" , "text-align: center; padding: 10px;");divNode.innerHTML = \'<a href="\' + hrefTxt + \'" target="_blank"><img src="/img/sidebar_280140.png"></a>\';\n\tconsole.log(sidebars)\n\tsidebars[0].insertBefore(divNode , sidebars[0].childNodes[0]);\n\tvar e = document.getElementsByClassName("hide");if(e[1])e[1].remove();\n}\n\n//页面延时一秒\nsetTimeout("vueSidebarShow()",1000)\n\n\n',normalizedContent:'> header中导入js\n\nmodule.exports = [\n  ["script", { charset: "utf-8", src: "/js/custom.js" }],//加载右侧菜单栏图片\n]\n\n\n> .vuepress/public/js/custom.js\n\n/*\nif(top.location!==self.location){\n\ttop.location.href=self.location.href;\n}\nif(document.location.host != "hliedu.com" \n\t&& location.href.indexof(\'http\') >-1 \n\t&& location.href.indexof(\'localhost\')==-1){\n\tlocation.replace(\'https://book.hliedu.com/\')\n}\n\t*/\nwindow.acallfun = function(elem, args) {\n  if(elem[0] && elem[0].src){\n    var reg = /(http:\\/\\/|https:\\/\\/)(.*?)\\/{1}(.*)/i;\n    var url = elem[0].src || elem[0].getattribute(\'src\');\n    var host = url.replace(reg,"$2");\n    \n    if(host.indexof(\'baidu\')>-1 || host.indexof(\'weibo\')>-1 || host.indexof(\'sina\')>-1|| host.indexof(\'hliedu.com\')>-1 || host.indexof(\'http\')===-1){\n        return true;\n    }else{\n        return false;\n    }\n  }else if(elem[0].id && elem[0].id.indexof(\'cproiframe\')>-1){\n    return false;\n  }else{\n    return true;\n  }\n}\nwindow.f = element.prototype.appendchild;\nelement.prototype.appendchild = function() {\n    var flag = window.acallfun.call(this, arguments);\n    if(flag === true){\n        return window.f.apply(this, arguments);\n    }else{\n        // return window.f.apply(this, arguments);\n    }\n};\n\nvar _hrefs = "https://www.aliyun.com/minisite/goods?taskpkg=1111ydsrwb&pkgsid=11811&usercode=goqhbyn3";\nfunction vuesidebarshow() {\n\tvar windowwidth = document.body.clientwidth || window.innerwidth;\n\tif(windowwidth > 760){\n\t\tloadsidebar(_hrefs);\n\t}\n}\n\n//添加图片到侧边栏\nfunction loadsidebar(hreftxt) {\n\tvar sidebars = document.getelementsbyclassname("sidebar");\tvar divnode = document.createelement("div");divnode.setattribute("style" , "text-align: center; padding: 10px;");divnode.innerhtml = \'<a href="\' + hreftxt + \'" target="_blank"><img src="/img/sidebar_280140.png"></a>\';\n\tconsole.log(sidebars)\n\tsidebars[0].insertbefore(divnode , sidebars[0].childnodes[0]);\n\tvar e = document.getelementsbyclassname("hide");if(e[1])e[1].remove();\n}\n\n//页面延时一秒\nsettimeout("vuesidebarshow()",1000)\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701936617e3},{title:"3、导航栏",frontmatter:{autoSort:98},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/3%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F.html",relativePath:"zs-tool-框架/vuepress/3、导航栏.md",key:"v-2a02e242",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/3%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F.html",headers:[{level:2,title:"页面目录结构约定",slug:"页面目录结构约定",normalizedTitle:"页面目录结构约定",charIndex:12},{level:2,title:"导航栏logo",slug:"导航栏logo",normalizedTitle:"导航栏logo",charIndex:1342},{level:3,title:"导航栏 Logo",slug:"导航栏-logo",normalizedTitle:"导航栏 logo",charIndex:1354},{level:3,title:"导航栏链接",slug:"导航栏链接",normalizedTitle:"导航栏链接",charIndex:1731},{level:3,title:"禁用导航栏",slug:"禁用导航栏",normalizedTitle:"禁用导航栏",charIndex:3262}],lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:"页面目录结构约定 导航栏logo 导航栏 Logo 导航栏链接 禁用导航栏",content:"# 3、导航栏\n\n\n# 页面目录结构约定\n\n.\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n\n\ndocs/.vuepress: 用于存放全局的配置、组件、静态资源等。\ndocs/.vuepress/components: 该目录中的 Vue 组件将会被自动注册为全局组件。\ndocs/.vuepress/theme: 用于存放本地主题。\ndocs/.vuepress/styles: 用于存放样式相关的文件。\ndocs/.vuepress/styles/index.styl: 将会被自动应用的全局样式文件，会生成在最终的 CSS 文件结尾，具有比默认样式更高的优先级。\ndocs/.vuepress/styles/palette.styl: 用于重写默认颜色常量，或者设置新的 stylus 颜色常量。\ndocs/.vuepress/public: 静态资源目录。\ndocs/.vuepress/templates: 存储 HTML 模板文件。\ndocs/.vuepress/templates/dev.html: 用于开发环境的 HTML 模板文件。\ndocs/.vuepress/templates/ssr.html: 构建时基于 Vue SSR 的 HTML 模板文件。\ndocs/.vuepress/config.js: 配置文件的入口文件，也可以是 YML 或 toml。\ndocs/.vuepress/enhanceApp.js: 客户端应用的增强。\n\n\n对于上述的目录结构，默认页面路由地址如下：\n\n文件的相对路径            页面路由地址\n/README.md         /\n/guide/README.md   /guide/\n/config.md         /config.html\n\n创建about页面\n\ndocs\n├── README.md\n└── about\n    └── README.md\n\n\n\n\ndocs\n├── README.md\n├── about\n│   └── README.md\n└── about.md\n\n\n\n\n\n# 导航栏\n\n\n# 导航栏logo\n\n\n# 导航栏 Logo\n\n你可以通过 themeConfig.logo 增加导航栏 Logo ，Logo 可以被放置在公共文件目录：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n    logo: '/assets/img/logo.png',\n  }\n}\n\n\ndocs\n├── .vuepress\n│   ├── config.js\n│   └── public\n│       └── assets\n│           └── img\n│               ├── hero.png\n│               └── logo.png\n├── README.md\n├── about\n│   └── README.md\n└── about.md\n\n\n\n\n\n# 导航栏链接\n\n你可以通过 themeConfig.nav 增加一些导航栏链接:\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n    logo: '/assets/img/logo.png',\n    nav: [\n      { text: '主页', link: '/' },\n      { text: '关于我', link: '/about/' },\n      { text: '关于我html', link: '/about.html' },\n      { text: 'google', link: 'https://google.com' },\n    ]\n  }\n}\n\n\n\n\n外部链接 <a> 标签的特性将默认包含target=\"_blank\" rel=\"noopener noreferrer\"，你可以提供 target 与 rel，它们将被作为特性被增加到 <a> 标签上：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n    nav: [\n      { text: 'External', link: 'https://google.com', target:'_self', rel:'' },\n      { text: 'Guide', link: '/guide/', target:'_blank' }\n    ]\n  }\n}\n\n\n当你提供了一个 items 数组而不是一个单一的 link 时，它将显示为一个 下拉列表 ：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n    nav: [\n      {\n        text: 'Languages',\n        ariaLabel: 'Language Menu',\n        items: [\n          { text: 'Chinese', link: '/language/chinese/' },\n          { text: 'Japanese', link: '/language/japanese/' }\n        ]\n      }\n    ]\n  }\n}\n\n\n示例\n\nmodule.exports = {\n  themeConfig: {\n    logo: '/assets/img/logo.png',\n    nav: [\n      { text: '主页', link: '/' },\n      { text: '关于我', link: '/about/' },\n      { text: '关于我html', link: '/about.html', target: '_blank' },\n      { text: 'google', link: 'https://google.com', target: '_self', rel: '' },\n      {\n        text: '关于我',\n        ariaLabel: '关于我',\n        items: [\n          { text: 'about', link: '/about/' },\n          { text: 'about.html', link: '/about.html' }\n        ]\n      }\n    ]\n  }\n}\n\n\n\n\n\n# 禁用导航栏\n\n你可以使用 themeConfig.navbar 来禁用==所有页面==的导航栏：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n    navbar: false\n  }\n}\n\n\n你也可以通过 YAML front matter 来禁用某个==指定页面==的导航栏：\n\n---\nnavbar: false\n---\n\n\n",normalizedContent:"# 3、导航栏\n\n\n# 页面目录结构约定\n\n.\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceapp.js (可选的)\n│   │ \n│   ├── readme.md\n│   ├── guide\n│   │   └── readme.md\n│   └── config.md\n│ \n└── package.json\n\n\ndocs/.vuepress: 用于存放全局的配置、组件、静态资源等。\ndocs/.vuepress/components: 该目录中的 vue 组件将会被自动注册为全局组件。\ndocs/.vuepress/theme: 用于存放本地主题。\ndocs/.vuepress/styles: 用于存放样式相关的文件。\ndocs/.vuepress/styles/index.styl: 将会被自动应用的全局样式文件，会生成在最终的 css 文件结尾，具有比默认样式更高的优先级。\ndocs/.vuepress/styles/palette.styl: 用于重写默认颜色常量，或者设置新的 stylus 颜色常量。\ndocs/.vuepress/public: 静态资源目录。\ndocs/.vuepress/templates: 存储 html 模板文件。\ndocs/.vuepress/templates/dev.html: 用于开发环境的 html 模板文件。\ndocs/.vuepress/templates/ssr.html: 构建时基于 vue ssr 的 html 模板文件。\ndocs/.vuepress/config.js: 配置文件的入口文件，也可以是 yml 或 toml。\ndocs/.vuepress/enhanceapp.js: 客户端应用的增强。\n\n\n对于上述的目录结构，默认页面路由地址如下：\n\n文件的相对路径            页面路由地址\n/readme.md         /\n/guide/readme.md   /guide/\n/config.md         /config.html\n\n创建about页面\n\ndocs\n├── readme.md\n└── about\n    └── readme.md\n\n\n\n\ndocs\n├── readme.md\n├── about\n│   └── readme.md\n└── about.md\n\n\n\n\n\n# 导航栏\n\n\n# 导航栏logo\n\n\n# 导航栏 logo\n\n你可以通过 themeconfig.logo 增加导航栏 logo ，logo 可以被放置在公共文件目录：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n    logo: '/assets/img/logo.png',\n  }\n}\n\n\ndocs\n├── .vuepress\n│   ├── config.js\n│   └── public\n│       └── assets\n│           └── img\n│               ├── hero.png\n│               └── logo.png\n├── readme.md\n├── about\n│   └── readme.md\n└── about.md\n\n\n\n\n\n# 导航栏链接\n\n你可以通过 themeconfig.nav 增加一些导航栏链接:\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n    logo: '/assets/img/logo.png',\n    nav: [\n      { text: '主页', link: '/' },\n      { text: '关于我', link: '/about/' },\n      { text: '关于我html', link: '/about.html' },\n      { text: 'google', link: 'https://google.com' },\n    ]\n  }\n}\n\n\n\n\n外部链接 <a> 标签的特性将默认包含target=\"_blank\" rel=\"noopener noreferrer\"，你可以提供 target 与 rel，它们将被作为特性被增加到 <a> 标签上：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n    nav: [\n      { text: 'external', link: 'https://google.com', target:'_self', rel:'' },\n      { text: 'guide', link: '/guide/', target:'_blank' }\n    ]\n  }\n}\n\n\n当你提供了一个 items 数组而不是一个单一的 link 时，它将显示为一个 下拉列表 ：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n    nav: [\n      {\n        text: 'languages',\n        arialabel: 'language menu',\n        items: [\n          { text: 'chinese', link: '/language/chinese/' },\n          { text: 'japanese', link: '/language/japanese/' }\n        ]\n      }\n    ]\n  }\n}\n\n\n示例\n\nmodule.exports = {\n  themeconfig: {\n    logo: '/assets/img/logo.png',\n    nav: [\n      { text: '主页', link: '/' },\n      { text: '关于我', link: '/about/' },\n      { text: '关于我html', link: '/about.html', target: '_blank' },\n      { text: 'google', link: 'https://google.com', target: '_self', rel: '' },\n      {\n        text: '关于我',\n        arialabel: '关于我',\n        items: [\n          { text: 'about', link: '/about/' },\n          { text: 'about.html', link: '/about.html' }\n        ]\n      }\n    ]\n  }\n}\n\n\n\n\n\n# 禁用导航栏\n\n你可以使用 themeconfig.navbar 来禁用==所有页面==的导航栏：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n    navbar: false\n  }\n}\n\n\n你也可以通过 yaml front matter 来禁用某个==指定页面==的导航栏：\n\n---\nnavbar: false\n---\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"5、SEO",frontmatter:{autoSort:96},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/5%E3%80%81SEO.html",relativePath:"zs-tool-框架/vuepress/5、SEO.md",key:"v-7c7f3f8f",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/5%E3%80%81SEO.html",lastUpdated:"2023年11月29日星期三下午4点57分",lastUpdatedTimestamp:1701248257e3,headersStr:null,content:"# 5、SEO\n\n * 标题\n * 描述信息\n * 作者\n * favicon\n * keywords\n\n图标下载：https://favicon.io/\n\n个人博客SEO属性设置\n\nmodule.exports = { \n    title: \"小邵子\",\n    description: '小邵子的个人笔记',\n    head: [\n        ['link', { rel: 'icon', href: '/favicon.ico' }],\n        ['meta', { name: 'author', content: '小邵子' }],\n        ['meta', { name: 'keywords', content: '张邵,小邵子的 vuepress 个人博客' }]\n    ],\n}\n",normalizedContent:"# 5、seo\n\n * 标题\n * 描述信息\n * 作者\n * favicon\n * keywords\n\n图标下载：https://favicon.io/\n\n个人博客seo属性设置\n\nmodule.exports = { \n    title: \"小邵子\",\n    description: '小邵子的个人笔记',\n    head: [\n        ['link', { rel: 'icon', href: '/favicon.ico' }],\n        ['meta', { name: 'author', content: '小邵子' }],\n        ['meta', { name: 'keywords', content: '张邵,小邵子的 vuepress 个人博客' }]\n    ],\n}\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"4、侧边栏",frontmatter:{autoSort:97},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/4%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F.html",relativePath:"zs-tool-框架/vuepress/4、侧边栏.md",key:"v-22146f5c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/4%E3%80%81%E4%BE%A7%E8%BE%B9%E6%A0%8F.html",headers:[{level:2,title:"自动生成侧栏",slug:"自动生成侧栏",normalizedTitle:"自动生成侧栏",charIndex:12},{level:2,title:"侧边栏分组",slug:"侧边栏分组",normalizedTitle:"侧边栏分组",charIndex:397},{level:2,title:"数组形式：分组侧边栏",slug:"数组形式-分组侧边栏",normalizedTitle:"数组形式：分组侧边栏",charIndex:528},{level:2,title:"对象形式：",slug:"对象形式",normalizedTitle:"对象形式：",charIndex:843}],lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:"自动生成侧栏 侧边栏分组 数组形式：分组侧边栏 对象形式：",content:"# 4、侧边栏\n\n\n# 自动生成侧栏\n\n如果你希望自动生成一个仅仅包含了当前页面标题（headers）链接的侧边栏，你可以通过 YAML front matter 来实现：\n\n---\nsidebar: auto\n---\n\n\n你也可以通过配置来在所有页面中启用它：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n    sidebar: 'auto'\n  }\n}\n\n\n在 多语言 模式下, 你也可以将其应用到某一特定的语言下：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n     '/zh/': {\n       sidebar: 'auto'\n     }\n  }\n}\n\n\n\n\nhome页面中的home: true会抑制侧边栏的生成\n\n\n# 侧边栏分组\n\n记得关闭自动生成侧边栏的功能\n\nsidebar: [\n    '/',\n    ['/about/','关于我'],\n    ['/about.html', '关于我的HTML'],\n    ['/about/','关于我'],\n]\n\n\n\n\n\n# 数组形式：分组侧边栏\n\nsidebar: [\n    '/',\n    '/about/',\n    {\n        title: '美丽的 CSS',\n        path: '/css/',\n        collapsable: false, // 可选的, 默认值是 true,\n        sidebarDepth: 1,    // 可选的, 默认值是 1\n        children: [\n            '/css/c-aaa',\n            '/css/c-bbb',\n            '/css/c-ccc',\n        ]\n    }\n]\n\n\n\n\n\n# 对象形式：\n\nsidebar: {\n    \"/css/\": [\n        'c-aaa',\n        'c-bbb',\n        'c-ccc',\n    ],\n        \"/javascript/\": [\n            'j-aaa',\n            'j-bbb',\n            'j-ccc',\n        ]\n}\n\n\n\n\n视频作者开发插件\n\n作者博客",normalizedContent:"# 4、侧边栏\n\n\n# 自动生成侧栏\n\n如果你希望自动生成一个仅仅包含了当前页面标题（headers）链接的侧边栏，你可以通过 yaml front matter 来实现：\n\n---\nsidebar: auto\n---\n\n\n你也可以通过配置来在所有页面中启用它：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n    sidebar: 'auto'\n  }\n}\n\n\n在 多语言 模式下, 你也可以将其应用到某一特定的语言下：\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n     '/zh/': {\n       sidebar: 'auto'\n     }\n  }\n}\n\n\n\n\nhome页面中的home: true会抑制侧边栏的生成\n\n\n# 侧边栏分组\n\n记得关闭自动生成侧边栏的功能\n\nsidebar: [\n    '/',\n    ['/about/','关于我'],\n    ['/about.html', '关于我的html'],\n    ['/about/','关于我'],\n]\n\n\n\n\n\n# 数组形式：分组侧边栏\n\nsidebar: [\n    '/',\n    '/about/',\n    {\n        title: '美丽的 css',\n        path: '/css/',\n        collapsable: false, // 可选的, 默认值是 true,\n        sidebardepth: 1,    // 可选的, 默认值是 1\n        children: [\n            '/css/c-aaa',\n            '/css/c-bbb',\n            '/css/c-ccc',\n        ]\n    }\n]\n\n\n\n\n\n# 对象形式：\n\nsidebar: {\n    \"/css/\": [\n        'c-aaa',\n        'c-bbb',\n        'c-ccc',\n    ],\n        \"/javascript/\": [\n            'j-aaa',\n            'j-bbb',\n            'j-ccc',\n        ]\n}\n\n\n\n\n视频作者开发插件\n\n作者博客",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"6、时间更新",frontmatter:{autoSort:95},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/6%E3%80%81%E6%97%B6%E9%97%B4%E6%9B%B4%E6%96%B0.html",relativePath:"zs-tool-框架/vuepress/6、时间更新.md",key:"v-1b96b5c0",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/6%E3%80%81%E6%97%B6%E9%97%B4%E6%9B%B4%E6%96%B0.html",headers:[{level:2,title:"最后更新时间",slug:"最后更新时间",normalizedTitle:"最后更新时间",charIndex:52},{level:2,title:"时间格式修改",slug:"时间格式修改",normalizedTitle:"时间格式修改",charIndex:65}],lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:"最后更新时间 时间格式修改",content:"# 6、时间更新\n\n * 基于Git提交时间\n * 修改文字\n * 时间格式 moment\n\n\n\n\n# 最后更新时间\n\n\n\n\n# 时间格式修改\n\n下载库文件\nyarn add moment\n\n\n\nconst moment = require('moment');\nmoment.locale('zh-cn')\n\nmodule.exports = {\n    themeConfig: {\n        lastUpdated: '更新时间',\n    },\n    plugins: [\n        [\n            '@vuepress/last-updated',\n            {\n                transformer: (timestamp, lang) => {\n                    //return moment(timestamp).fromNow()\n                    return moment(timestamp).format(\"LLLL\")\n                }\n            }\n        ]\n    ],\n}\n\n\nmoment官网\n\nmoment中文网\n\n\n\n",normalizedContent:"# 6、时间更新\n\n * 基于git提交时间\n * 修改文字\n * 时间格式 moment\n\n\n\n\n# 最后更新时间\n\n\n\n\n# 时间格式修改\n\n下载库文件\nyarn add moment\n\n\n\nconst moment = require('moment');\nmoment.locale('zh-cn')\n\nmodule.exports = {\n    themeconfig: {\n        lastupdated: '更新时间',\n    },\n    plugins: [\n        [\n            '@vuepress/last-updated',\n            {\n                transformer: (timestamp, lang) => {\n                    //return moment(timestamp).fromnow()\n                    return moment(timestamp).format(\"llll\")\n                }\n            }\n        ]\n    ],\n}\n\n\nmoment官网\n\nmoment中文网\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"8、自定义域名",frontmatter:{autoSort:93},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/8%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html",relativePath:"zs-tool-框架/vuepress/8、自定义域名.md",key:"v-8e58323a",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/8%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html",headers:[{level:2,title:"自定义域名",slug:"自定义域名",normalizedTitle:"自定义域名",charIndex:4}],lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:"自定义域名",content:"# 8、自定义域名\n\n购买域名\n\n\n\n\n\n填写域名、https\n\n\n\n\n# 自定义域名\n\n\n\n\n\n\n\n",normalizedContent:"# 8、自定义域名\n\n购买域名\n\n\n\n\n\n填写域名、https\n\n\n\n\n# 自定义域名\n\n\n\n\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"9、PWA",frontmatter:{autoSort:92},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/9%E3%80%81PWA.html",relativePath:"zs-tool-框架/vuepress/9、PWA.md",key:"v-189fdcef",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/9%E3%80%81PWA.html",lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:null,content:'# 9、PWA\n\n\n\n\n\n使用babel 的插件形式\n\n   [\n      \'@vuepress/pwa\',\n      {\n        serviceWorker: true,\n        updatePopup: {\n          message: "New content is available.",\n          buttonText: "Refresh"\n        }\n      }\n    ]\n\n\n\n\n提供 Manifest 和 icons\n\n\n\n拷贝到public目录下\n\n\n\n发布后出现 service workers\n\n\n\n',normalizedContent:'# 9、pwa\n\n\n\n\n\n使用babel 的插件形式\n\n   [\n      \'@vuepress/pwa\',\n      {\n        serviceworker: true,\n        updatepopup: {\n          message: "new content is available.",\n          buttontext: "refresh"\n        }\n      }\n    ]\n\n\n\n\n提供 manifest 和 icons\n\n\n\n拷贝到public目录下\n\n\n\n发布后出现 service workers\n\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"介绍",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/",relativePath:"zs-tool-框架/vuepress/README.md",key:"v-5d5f3c5b",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/",lastUpdated:"2023年12月4日星期一上午10点08分",lastUpdatedTimestamp:1701655698e3,headersStr:null,content:"# 介绍\n\nVuePress 由两部分组成：第一部分是一个极简静态网站生成器 (opens new window)，它包含由 Vue 驱动的主题系统和插件 API，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。\n\n每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。\n\nVuePress 有很多优点：\n\n * 界面简洁优雅（个人感觉比 HEXO 好看）\n * 容易上手（半小时能搭好整个项目）\n * 更好的兼容、扩展 Markdown 语法\n * 响应式布局，PC端、手机端\n * Google Analytics 集成\n * 支持 PWA",normalizedContent:"# 介绍\n\nvuepress 由两部分组成：第一部分是一个极简静态网站生成器 (opens new window)，它包含由 vue 驱动的主题系统和插件 api，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 vue 及其子项目的文档需求。\n\n每一个由 vuepress 生成的页面都带有预渲染好的 html，也因此具有非常好的加载性能和搜索引擎优化（seo）。同时，一旦页面被加载，vue 将接管这些静态内容，并将其转换成一个完整的单页应用（spa），其他的页面则会只在用户浏览到的时候才按需加载。\n\nvuepress 有很多优点：\n\n * 界面简洁优雅（个人感觉比 hexo 好看）\n * 容易上手（半小时能搭好整个项目）\n * 更好的兼容、扩展 markdown 语法\n * 响应式布局，pc端、手机端\n * google analytics 集成\n * 支持 pwa",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"7、发布在GitHub",frontmatter:{autoSort:94},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/7%E3%80%81%E5%8F%91%E5%B8%83%E5%9C%A8GitHub.html",relativePath:"zs-tool-框架/vuepress/7、发布在GitHub.md",key:"v-69a18e3e",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/7%E3%80%81%E5%8F%91%E5%B8%83%E5%9C%A8GitHub.html",lastUpdated:"2023年12月5日星期二下午4点18分",lastUpdatedTimestamp:1701764318e3,headersStr:null,content:"# 7、发布在GitHub\n\n在你的项目中，创建一个如下的 deploy.sh 文件（请自行判断去掉高亮行的注释）:\n\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run docs:build\n\n# 进入生成的文件夹\ncd docs/.vuepress/dist\n\n# 如果是发布到自定义域名\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# 如果发布到 https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# 如果发布到 https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n\n\n\n\n\n\n",normalizedContent:"# 7、发布在github\n\n在你的项目中，创建一个如下的 deploy.sh 文件（请自行判断去掉高亮行的注释）:\n\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run docs:build\n\n# 进入生成的文件夹\ncd docs/.vuepress/dist\n\n# 如果是发布到自定义域名\n# echo 'www.example.com' > cname\n\ngit init\ngit add -a\ngit commit -m 'deploy'\n\n# 如果发布到 https://<username>.github.io\n# git push -f git@github.com:<username>/<username>.github.io.git master\n\n# 如果发布到 https://<username>.github.io/<repo>\n# git push -f git@github.com:<username>/<repo>.git master:gh-pages\n\ncd -\n\n\n\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701242569e3},{title:"附录1、vuepress中的Markdown语法",frontmatter:{title:"附录1、vuepress中的Markdown语法","autoGroup-1":"附录"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%951%E3%80%81vuepress%EF%BC%8CMarkdown%E8%AF%AD%E6%B3%95.html",relativePath:"zs-tool-框架/vuepress/附录1、vuepress，Markdown语法.md",key:"v-67381111",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%951%E3%80%81vuepress%EF%BC%8CMarkdown%E8%AF%AD%E6%B3%95.html",headers:[{level:2,title:"Markdown详解",slug:"markdown详解",normalizedTitle:"markdown详解",charIndex:2},{level:2,title:"常用语法",slug:"常用语法",normalizedTitle:"常用语法",charIndex:247},{level:3,title:"一、标题",slug:"一、标题",normalizedTitle:"一、标题",charIndex:282},{level:3,title:"二、字体",slug:"二、字体",normalizedTitle:"二、字体",charIndex:292},{level:3,title:"三、引用",slug:"三、引用",normalizedTitle:"三、引用",charIndex:302},{level:3,title:"四、分割线",slug:"四、分割线",normalizedTitle:"四、分割线",charIndex:312},{level:3,title:"五、图片",slug:"五、图片",normalizedTitle:"五、图片",charIndex:323},{level:3,title:"六、超链接",slug:"六、超链接",normalizedTitle:"六、超链接",charIndex:333},{level:3,title:"七、内部链接",slug:"七、内部链接",normalizedTitle:"七、内部链接",charIndex:344},{level:3,title:"八、列表",slug:"八、列表",normalizedTitle:"八、列表",charIndex:356},{level:3,title:"九、表格",slug:"九、表格",normalizedTitle:"九、表格",charIndex:366},{level:3,title:"十、代码块儿",slug:"十、代码块儿",normalizedTitle:"十、代码块儿",charIndex:376},{level:3,title:"十二、文字位置",slug:"十二、文字位置",normalizedTitle:"十二、文字位置",charIndex:388},{level:3,title:"十三、提示信息",slug:"十三、提示信息",normalizedTitle:"十三、提示信息",charIndex:401},{level:3,title:"十四、Emoji表情",slug:"十四、emoji表情",normalizedTitle:"十四、emoji表情",charIndex:414},{level:3,title:"十五、显示代码块行号",slug:"十五、显示代码块行号",normalizedTitle:"十五、显示代码块行号",charIndex:430},{level:3,title:"十六、显示目录",slug:"十六、显示目录",normalizedTitle:"十六、显示目录",charIndex:446}],lastUpdated:"2023年12月5日星期二中午11点51分",lastUpdatedTimestamp:1701748296e3,headersStr:"Markdown详解 常用语法 一、标题 二、字体 三、引用 四、分割线 五、图片 六、超链接 七、内部链接 八、列表 九、表格 十、代码块儿 十二、文字位置 十三、提示信息 十四、Emoji表情 十五、显示代码块行号 十六、显示目录",content:'# Markdown详解\n\nMarkdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）和亚伦·斯沃茨（Aaron Swartz）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”\n\nDANGER\n\n本文的markdown语法都是适用于vuepress的，其它工具没有试过，应该大部分都可以适用。\n这个博客所有文章都是通过markdown写的。\n\n看十遍不如动手做一遍，大家可以把内容复制到自己的文档里面看下效果\n\n\n# 常用语法\n\n\n\n * Markdown详解\n * 常用语法\n   * 一、标题\n   * 二、字体\n   * 三、引用\n   * 四、分割线\n   * 五、图片\n   * 六、超链接\n   * 七、内部链接\n   * 八、列表\n   * 九、表格\n   * 十、代码块儿\n   * 十二、文字位置\n   * 十三、提示信息\n   * 十四、Emoji表情\n   * 十五、显示代码块行号\n   * 十六、显示目录\n\n\n\n\n# 一、标题\n\n# 说明：\n\n#后面跟的内容就是标题，一个#就是一级标题，有几个#就是几级标题，例如2级标题就有两个##，markdown的2级和3级标题会默认自动作为子目录，\n注意：#后面必须有个空格，然后再跟内容，否则#就是普通字符\n\n# 示例：\n\n# 这是一级标题\n## 这是二级标题，二级标题底下有横线\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n\n\n\nWARNING\n\n编译成html后，一级标题会默认为当前页面的head的title，也可以用front-matter指定标题。\n\n\n# 二、字体\n\n# 说明：\n\n * 加粗：要加粗的文字左右分别用两个*号包起来\n * 斜体：要倾斜的文字左右分别用一个*号包起来\n * 斜体加粗：要倾斜和加粗的文字左右分别用三个*号包起来\n * 删除线：要加删除线的文字左右分别用两个~~号包起来\n\n# 示例：\n\n**这是加粗的文字**<br/>\n*这是倾斜的文字*`<br/>\n***这是斜体加粗的文字***<br/>\n~~这是加删除线的文字~~<br/>\n\n\n# 效果：\n\n这是加粗的文字\n\n这是倾斜的文字\n\n这是斜体加粗的文字\n\n这是加删除线的文字\n\n\n# 三、引用\n\n# 说明：\n\n在引用的文字前加>即可。引用也可以嵌套，如加两个>>三个>>>\n\n# 示例：\n\n>这是1级引用的内容\n\n>>这是2级引用的内容\n\n>>>这是3级引用的内容\n\n\n\n# 效果：\n\n> 这是1级引用的内容\n\n> > 这是2级引用的内容\n\n> > > 这是3级引用的内容\n\n\n# 四、分割线\n\n# 说明：\n\n三个或者三个以上的 - 或者 * 都可以。\n\n# 示例：\n\n开始分割线\n***\n使用3个或者多个“*”的分割线\n\n---\n使用3个或者多个“-”的分割线\n\n\n\n警告：\n\n注：在三个或者多个“-”的上面加文字的话会自动变成2级标题，所以要么空一行要么就使用“*”\n\n# 效果：\n\n开始分割线\n\n----------------------------------------\n\n使用3个或者多个“*”的分割线\n\n----------------------------------------\n\n使用3个或者多个“-”的分割线\n\n\n# 五、图片\n\n# 说明：\n\n格式：“![图片alt] (图片地址 “图片title”)”，含义分别如下：\n\n图片alt：就是显示在图片下面的文字，相当于对图片内容的解释。\n\n图片地址:可以是本地路径的图片，也可以是网络上的图片\n\n图片title：是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n\n警告：\n\n中括号与小括号之间是没有空格的，参考示例\n\n# 示例：\n\n本地图片\n![图片火影忍者](./img/huoying.jpeg "火影忍者")\n网络图片\n![vue官网logo](https://cn.vuejs.org/images/logo.png "vue官网logo")\n\n\n\nWARNING\n\n上面的写法，vuepress里面完全是没有问题的，简书也没有问题，但有些博客网站这样写会失效，比如CSDN（时好时坏，之前发布的文章有时候图片能看有时候不行），\n想要在CSDN里面也使用图片，那么用<img src="https://cn.vuejs.org/images/logo.png" />这种方式就可以了。这种方式vuepress也可以用，但是直接使用标签简书不行。\n\n\n# 六、超链接\n\n# 说明：\n\n格式：[超链接名] (超链接地址 “超链接title”)\n注：title可加可不加\n\n警告：\n\n中括号与小括号之间是没有空格的，参考示例\n\n# 示例：\n\n[java乐园](http://www.moyundong.com)\n[简书](http://jianshu.com)\n[百度](http://baidu.com)\n\n\n\n# 效果：\n\njava乐园\n\n简书\n\n百度\n\n\n# 七、内部链接\n\n# 说明：\n\n网站内部的链接，将会被转换成 <router-link>用于 SPA 导航。同时，站内的每一个文件夹下的README.md或者 index.md 文件都会被自动编译为index.html，对应的链接将被视为/。\n\n# 示例：\n\n以如下的文件结构为例：\n.\n├─ README.md\n├─ foo\n│  ├─ README.md\n│  ├─ one.md\n│  └─ two.md\n└─ bar\n   ├─ README.md\n   ├─ three.md\n   └─ four.md\n\n\n\n# 效果：\n\n假设你现在在 foo/one.md 中：\n[Home](/) \x3c!-- 跳转到根部的 README.md --\x3e\n[foo](/foo/) \x3c!-- 跳转到 foo 文件夹的 index.html --\x3e\n[foo](./two) \x3c!-- 跳转到 two 文件 --\x3e\n[foo heading](./#heading) \x3c!-- 跳转到 foo/index.html 的特定标题位置 --\x3e\n[bar - three](../bar/three.md) \x3c!-- 具体文件可以使用 .md 结尾（推荐） --\x3e\n[bar - four](../bar/four.html) \x3c!-- 也可以用 .html --\x3e\n\n\n\n\n# 八、列表\n\n# 说明：\n\n * 无序列表：无序列表用 - + * 任何一种加上一个空格再加内容就可以了\n * 有序列表：数字加点空格加内容\n * 列表嵌套：第二行缩进两个空格就可以嵌套了\n\n# 示例：\n\n无序列表\n- 列表内容1\n+ 列表内容2\n* 列表内容3\n有序列表\n1. 列表内容\n2. 列表内容\n3. 列表内容\n列表嵌套\n+ 一级无序列表内容1\n   1. 二级有序列表内容11\n   2. 二级有序列表内容12\n   3. 二级有序列表内容13\n+ 一级无序列表内容2\n   1. 二级有序列表内容21\n   2. 二级有序列表内容22\n   3. 二级有序列表内容23\n\n\n\n# 效果：\n\n无序列表\n\n * 列表内容1\n\n * 列表内容2\n\n * 列表内容3\n\n有序列表\n\n 1. 列表内容\n 2. 列表内容\n 3. 列表内容\n\n列表嵌套\n\n * 一级无序列表内容1\n   1. 二级有序列表内容11\n   2. 二级有序列表内容12\n   3. 二级有序列表内容13\n * 一级无序列表内容2\n   1. 二级有序列表内容21\n   2. 二级有序列表内容22\n   3. 二级有序列表内容23\n\n\n# 九、表格\n\n# 说明：\n\n表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n\n-第二行分割表头和内容。- 有一个就行，为了书写对齐，多加了几个，内容会自动撑开表格宽度\n-文字默认居左\n-在第二行“--”两边加“：”表示文字居中\n-在第二行“--”右边加“：”表示文字居右\n\n\n\n# 示例：\n\n姓名|年龄|国家\n----|:--:|--:\n内容默认居左|内容居中|内容居右\n张三|19|中华人民共和国\n李四|29|中国\n王麻子|18|中华人民共和国\n\n\n\n# 效果：\n\n姓名       年龄     国家\n内容默认居左   内容居中   内容居右\n张三       19     中华人民共和国\n李四       29     中国\n王麻子      18     中华人民共和国\n\n\n# 十、代码块儿\n\n# 说明：\n\n * 单行代码：代码之间分别用一个反引号（`）包起来就行，或者只要开头的反引号\n * 代码块儿：\n   1. 代码块儿是用一组三个反引号包起来，\n   2. 指定代码块儿的类型，三个反引号后面加个空格再加类型，类型如java，html，js，md等等。（可选）\n   3. 指定某一行高亮显示，在类型后面加个花括号，里面指定数字就可以，数字可以是一个{6}，也可以是一个范围{2-8}。（可选）\n\n# 示例：\n\n单行代码：\n`create database test;`\n代码块：\n(```js {3-6})\n  function show(){\n           console.log("这里是js代码");\n           console.log("这一行是高亮的");\n           console.log("这一行是高亮的");\n           console.log("这一行是高亮的");\n      }\n(```)\n注：实际中去掉两边小括号。为了防止转译，前后三个反引号处加了小括号，实际是没有的。\n\n\n\n# 效果：\n\n单行代码：\ncreate database test;\n\n代码块：\n\n    function show(){\n         console.log("这里是js代码");\n         console.log("这一行是高亮的");\n         console.log("这一行是高亮的");\n         console.log("这一行是高亮的");\n    }\n\n\n\n\n# 十二、文字位置\n\n# 说明：\n\n默认文字都是左对齐的（例如本句话），想要居中和右对齐需要手动添加\n\n# 示例：\n\n居中：\n<center>文字居中</center>\n右对齐：\n<p align="right">右对齐</p>\n\n\n\n# 效果：\n\n居中：\n\n文字居中\n\n右对齐：\n\n右对齐\n\n\n# 十三、提示信息\n\n# 说明：\n\n提示信息是用一组三个冒号包起来的，第一行冒号加一个空格后面跟提示级别，再加个空格后面跟别名。\n\n * 级别分别如下：\n   1. tip 提示\n   2. warning 警告\n   3. danger 危险警告\n   4. details 详情\n\n# 示例：\n\n::: tip 提示\n这是一个tip，使用了别名“提示”\n:::\n::: warning\n这是一个warning，没有使用别名\n:::\n::: danger\n这是一个danger，没有使用别名\n:::\n::: details 请看详情\n这是一个details，使用了别名“请看详情”\n:::\n\n\n# 效果：\n\n提示\n\n这是一个tip，使用了别名“提示”\n\nWARNING\n\n这是一个warning，没有使用别名\n\nDANGER\n\n这是一个danger，没有使用别名\n\n请看详情\n\n这是一个details，使用了别名“请看详情”\n\n\n# 十四、Emoji表情\n\n# 说明：\n\n所有表情都是一个符号，表情符号对应表\n\n# 示例：\n\n想使用表情，之间在md文件里面使用表情符号就可以了\n  :tada: \n  :100: \n  :game_die:\n\n\nhttps://getemoji.com/\n🥳🔥🌎 🌍 🌏 💐 🎋 🍃🌱 🌿 ☘️ 🍀🙈 🙉 🙊 🎯🎬 🎧🎮⛳️🏋️‍♀️🤾‍♂️🏂 📝📖 🎊 🎉🎀 🪄 🪅🎁 🎈📃 📄🗓 📆 📅📌 📍💯❌ ⭕️🔞\n\n\n# 效果：\n\n🎉\n💯\n🎲\n\n\n# 十五、显示代码块行号\n\n官网说明\n\n# 说明：\n\n在config.js做如下配置就可以了\n\nmodule.exports = {\n  markdown: {\n    lineNumbers: true\n  }\n}\n\n\n\n\n# 十六、显示目录\n\n# 说明：\n\n一般在最顶部使用，显示这一篇文章的目录。\n\n# 示例：\n\n[[toc]]\n直接在文档里面写一个[[top]]就可以生成目录\n\n\n\n# 效果：\n\n\n\n * Markdown详解\n * 常用语法\n   * 一、标题\n   * 二、字体\n   * 三、引用\n   * 四、分割线\n   * 五、图片\n   * 六、超链接\n   * 七、内部链接\n   * 八、列表\n   * 九、表格\n   * 十、代码块儿\n   * 十二、文字位置\n   * 十三、提示信息\n   * 十四、Emoji表情\n   * 十五、显示代码块行号\n   * 十六、显示目录\n\n\n\n本文转自 [https://blog.csdn.net/loveshanqian/article/details/106337966?ops\\_request\\_misc=%257B%2522request%255Fid%2522%253A%2522170173762816800227486253%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request\\_id=170173762816800227486253&biz\\_id=0&utm\\_medium=distribute.pc\\_search\\_result.none-task-blog-2~all~first\\_rank\\_ecpm\\_v1~rank\\_v31\\_ecpm-1-106337966-null-null.142^v96^pc\\_search\\_result\\_base2&utm\\_term=vuepress%20markdown%E7%BC%96%E5%86%99vue&spm=1018.2226.3001.4187](https://blog.csdn.net/loveshanqian/article/details/106337966?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170173762816800227486253%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170173762816800227486253&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-106337966-null-null.142^v96^pc_search_result_base2&utm_term=vuepress%20markdown%E7%BC%96%E5%86%99vue&spm=1018.2226.3001.4187)，如有侵权，请联系删除。\n',normalizedContent:'# markdown详解\n\nmarkdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（john gruber）和亚伦·斯沃茨（aaron swartz）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的xhtml(或者html)文档”\n\ndanger\n\n本文的markdown语法都是适用于vuepress的，其它工具没有试过，应该大部分都可以适用。\n这个博客所有文章都是通过markdown写的。\n\n看十遍不如动手做一遍，大家可以把内容复制到自己的文档里面看下效果\n\n\n# 常用语法\n\n\n\n * markdown详解\n * 常用语法\n   * 一、标题\n   * 二、字体\n   * 三、引用\n   * 四、分割线\n   * 五、图片\n   * 六、超链接\n   * 七、内部链接\n   * 八、列表\n   * 九、表格\n   * 十、代码块儿\n   * 十二、文字位置\n   * 十三、提示信息\n   * 十四、emoji表情\n   * 十五、显示代码块行号\n   * 十六、显示目录\n\n\n\n\n# 一、标题\n\n# 说明：\n\n#后面跟的内容就是标题，一个#就是一级标题，有几个#就是几级标题，例如2级标题就有两个##，markdown的2级和3级标题会默认自动作为子目录，\n注意：#后面必须有个空格，然后再跟内容，否则#就是普通字符\n\n# 示例：\n\n# 这是一级标题\n## 这是二级标题，二级标题底下有横线\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n\n\n\nwarning\n\n编译成html后，一级标题会默认为当前页面的head的title，也可以用front-matter指定标题。\n\n\n# 二、字体\n\n# 说明：\n\n * 加粗：要加粗的文字左右分别用两个*号包起来\n * 斜体：要倾斜的文字左右分别用一个*号包起来\n * 斜体加粗：要倾斜和加粗的文字左右分别用三个*号包起来\n * 删除线：要加删除线的文字左右分别用两个~~号包起来\n\n# 示例：\n\n**这是加粗的文字**<br/>\n*这是倾斜的文字*`<br/>\n***这是斜体加粗的文字***<br/>\n~~这是加删除线的文字~~<br/>\n\n\n# 效果：\n\n这是加粗的文字\n\n这是倾斜的文字\n\n这是斜体加粗的文字\n\n这是加删除线的文字\n\n\n# 三、引用\n\n# 说明：\n\n在引用的文字前加>即可。引用也可以嵌套，如加两个>>三个>>>\n\n# 示例：\n\n>这是1级引用的内容\n\n>>这是2级引用的内容\n\n>>>这是3级引用的内容\n\n\n\n# 效果：\n\n> 这是1级引用的内容\n\n> > 这是2级引用的内容\n\n> > > 这是3级引用的内容\n\n\n# 四、分割线\n\n# 说明：\n\n三个或者三个以上的 - 或者 * 都可以。\n\n# 示例：\n\n开始分割线\n***\n使用3个或者多个“*”的分割线\n\n---\n使用3个或者多个“-”的分割线\n\n\n\n警告：\n\n注：在三个或者多个“-”的上面加文字的话会自动变成2级标题，所以要么空一行要么就使用“*”\n\n# 效果：\n\n开始分割线\n\n----------------------------------------\n\n使用3个或者多个“*”的分割线\n\n----------------------------------------\n\n使用3个或者多个“-”的分割线\n\n\n# 五、图片\n\n# 说明：\n\n格式：“![图片alt] (图片地址 “图片title”)”，含义分别如下：\n\n图片alt：就是显示在图片下面的文字，相当于对图片内容的解释。\n\n图片地址:可以是本地路径的图片，也可以是网络上的图片\n\n图片title：是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n\n警告：\n\n中括号与小括号之间是没有空格的，参考示例\n\n# 示例：\n\n本地图片\n![图片火影忍者](./img/huoying.jpeg "火影忍者")\n网络图片\n![vue官网logo](https://cn.vuejs.org/images/logo.png "vue官网logo")\n\n\n\nwarning\n\n上面的写法，vuepress里面完全是没有问题的，简书也没有问题，但有些博客网站这样写会失效，比如csdn（时好时坏，之前发布的文章有时候图片能看有时候不行），\n想要在csdn里面也使用图片，那么用<img src="https://cn.vuejs.org/images/logo.png" />这种方式就可以了。这种方式vuepress也可以用，但是直接使用标签简书不行。\n\n\n# 六、超链接\n\n# 说明：\n\n格式：[超链接名] (超链接地址 “超链接title”)\n注：title可加可不加\n\n警告：\n\n中括号与小括号之间是没有空格的，参考示例\n\n# 示例：\n\n[java乐园](http://www.moyundong.com)\n[简书](http://jianshu.com)\n[百度](http://baidu.com)\n\n\n\n# 效果：\n\njava乐园\n\n简书\n\n百度\n\n\n# 七、内部链接\n\n# 说明：\n\n网站内部的链接，将会被转换成 <router-link>用于 spa 导航。同时，站内的每一个文件夹下的readme.md或者 index.md 文件都会被自动编译为index.html，对应的链接将被视为/。\n\n# 示例：\n\n以如下的文件结构为例：\n.\n├─ readme.md\n├─ foo\n│  ├─ readme.md\n│  ├─ one.md\n│  └─ two.md\n└─ bar\n   ├─ readme.md\n   ├─ three.md\n   └─ four.md\n\n\n\n# 效果：\n\n假设你现在在 foo/one.md 中：\n[home](/) \x3c!-- 跳转到根部的 readme.md --\x3e\n[foo](/foo/) \x3c!-- 跳转到 foo 文件夹的 index.html --\x3e\n[foo](./two) \x3c!-- 跳转到 two 文件 --\x3e\n[foo heading](./#heading) \x3c!-- 跳转到 foo/index.html 的特定标题位置 --\x3e\n[bar - three](../bar/three.md) \x3c!-- 具体文件可以使用 .md 结尾（推荐） --\x3e\n[bar - four](../bar/four.html) \x3c!-- 也可以用 .html --\x3e\n\n\n\n\n# 八、列表\n\n# 说明：\n\n * 无序列表：无序列表用 - + * 任何一种加上一个空格再加内容就可以了\n * 有序列表：数字加点空格加内容\n * 列表嵌套：第二行缩进两个空格就可以嵌套了\n\n# 示例：\n\n无序列表\n- 列表内容1\n+ 列表内容2\n* 列表内容3\n有序列表\n1. 列表内容\n2. 列表内容\n3. 列表内容\n列表嵌套\n+ 一级无序列表内容1\n   1. 二级有序列表内容11\n   2. 二级有序列表内容12\n   3. 二级有序列表内容13\n+ 一级无序列表内容2\n   1. 二级有序列表内容21\n   2. 二级有序列表内容22\n   3. 二级有序列表内容23\n\n\n\n# 效果：\n\n无序列表\n\n * 列表内容1\n\n * 列表内容2\n\n * 列表内容3\n\n有序列表\n\n 1. 列表内容\n 2. 列表内容\n 3. 列表内容\n\n列表嵌套\n\n * 一级无序列表内容1\n   1. 二级有序列表内容11\n   2. 二级有序列表内容12\n   3. 二级有序列表内容13\n * 一级无序列表内容2\n   1. 二级有序列表内容21\n   2. 二级有序列表内容22\n   3. 二级有序列表内容23\n\n\n# 九、表格\n\n# 说明：\n\n表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n\n-第二行分割表头和内容。- 有一个就行，为了书写对齐，多加了几个，内容会自动撑开表格宽度\n-文字默认居左\n-在第二行“--”两边加“：”表示文字居中\n-在第二行“--”右边加“：”表示文字居右\n\n\n\n# 示例：\n\n姓名|年龄|国家\n----|:--:|--:\n内容默认居左|内容居中|内容居右\n张三|19|中华人民共和国\n李四|29|中国\n王麻子|18|中华人民共和国\n\n\n\n# 效果：\n\n姓名       年龄     国家\n内容默认居左   内容居中   内容居右\n张三       19     中华人民共和国\n李四       29     中国\n王麻子      18     中华人民共和国\n\n\n# 十、代码块儿\n\n# 说明：\n\n * 单行代码：代码之间分别用一个反引号（`）包起来就行，或者只要开头的反引号\n * 代码块儿：\n   1. 代码块儿是用一组三个反引号包起来，\n   2. 指定代码块儿的类型，三个反引号后面加个空格再加类型，类型如java，html，js，md等等。（可选）\n   3. 指定某一行高亮显示，在类型后面加个花括号，里面指定数字就可以，数字可以是一个{6}，也可以是一个范围{2-8}。（可选）\n\n# 示例：\n\n单行代码：\n`create database test;`\n代码块：\n(```js {3-6})\n  function show(){\n           console.log("这里是js代码");\n           console.log("这一行是高亮的");\n           console.log("这一行是高亮的");\n           console.log("这一行是高亮的");\n      }\n(```)\n注：实际中去掉两边小括号。为了防止转译，前后三个反引号处加了小括号，实际是没有的。\n\n\n\n# 效果：\n\n单行代码：\ncreate database test;\n\n代码块：\n\n    function show(){\n         console.log("这里是js代码");\n         console.log("这一行是高亮的");\n         console.log("这一行是高亮的");\n         console.log("这一行是高亮的");\n    }\n\n\n\n\n# 十二、文字位置\n\n# 说明：\n\n默认文字都是左对齐的（例如本句话），想要居中和右对齐需要手动添加\n\n# 示例：\n\n居中：\n<center>文字居中</center>\n右对齐：\n<p align="right">右对齐</p>\n\n\n\n# 效果：\n\n居中：\n\n文字居中\n\n右对齐：\n\n右对齐\n\n\n# 十三、提示信息\n\n# 说明：\n\n提示信息是用一组三个冒号包起来的，第一行冒号加一个空格后面跟提示级别，再加个空格后面跟别名。\n\n * 级别分别如下：\n   1. tip 提示\n   2. warning 警告\n   3. danger 危险警告\n   4. details 详情\n\n# 示例：\n\n::: tip 提示\n这是一个tip，使用了别名“提示”\n:::\n::: warning\n这是一个warning，没有使用别名\n:::\n::: danger\n这是一个danger，没有使用别名\n:::\n::: details 请看详情\n这是一个details，使用了别名“请看详情”\n:::\n\n\n# 效果：\n\n提示\n\n这是一个tip，使用了别名“提示”\n\nwarning\n\n这是一个warning，没有使用别名\n\ndanger\n\n这是一个danger，没有使用别名\n\n请看详情\n\n这是一个details，使用了别名“请看详情”\n\n\n# 十四、emoji表情\n\n# 说明：\n\n所有表情都是一个符号，表情符号对应表\n\n# 示例：\n\n想使用表情，之间在md文件里面使用表情符号就可以了\n  :tada: \n  :100: \n  :game_die:\n\n\nhttps://getemoji.com/\n🥳🔥🌎 🌍 🌏 💐 🎋 🍃🌱 🌿 ☘️ 🍀🙈 🙉 🙊 🎯🎬 🎧🎮⛳️🏋️‍♀️🤾‍♂️🏂 📝📖 🎊 🎉🎀 🪄 🪅🎁 🎈📃 📄🗓 📆 📅📌 📍💯❌ ⭕️🔞\n\n\n# 效果：\n\n🎉\n💯\n🎲\n\n\n# 十五、显示代码块行号\n\n官网说明\n\n# 说明：\n\n在config.js做如下配置就可以了\n\nmodule.exports = {\n  markdown: {\n    linenumbers: true\n  }\n}\n\n\n\n\n# 十六、显示目录\n\n# 说明：\n\n一般在最顶部使用，显示这一篇文章的目录。\n\n# 示例：\n\n[[toc]]\n直接在文档里面写一个[[top]]就可以生成目录\n\n\n\n# 效果：\n\n\n\n * markdown详解\n * 常用语法\n   * 一、标题\n   * 二、字体\n   * 三、引用\n   * 四、分割线\n   * 五、图片\n   * 六、超链接\n   * 七、内部链接\n   * 八、列表\n   * 九、表格\n   * 十、代码块儿\n   * 十二、文字位置\n   * 十三、提示信息\n   * 十四、emoji表情\n   * 十五、显示代码块行号\n   * 十六、显示目录\n\n\n\n本文转自 [https://blog.csdn.net/loveshanqian/article/details/106337966?ops\\_request\\_misc=%257b%2522request%255fid%2522%253a%2522170173762816800227486253%2522%252c%2522scm%2522%253a%252220140713.130102334.pc%255fall.%2522%257d&request\\_id=170173762816800227486253&biz\\_id=0&utm\\_medium=distribute.pc\\_search\\_result.none-task-blog-2~all~first\\_rank\\_ecpm\\_v1~rank\\_v31\\_ecpm-1-106337966-null-null.142^v96^pc\\_search\\_result\\_base2&utm\\_term=vuepress%20markdown%e7%bc%96%e5%86%99vue&spm=1018.2226.3001.4187](https://blog.csdn.net/loveshanqian/article/details/106337966?ops_request_misc=%257b%2522request%255fid%2522%253a%2522170173762816800227486253%2522%252c%2522scm%2522%253a%252220140713.130102334.pc%255fall.%2522%257d&request_id=170173762816800227486253&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-106337966-null-null.142^v96^pc_search_result_base2&utm_term=vuepress%20markdown%e7%bc%96%e5%86%99vue&spm=1018.2226.3001.4187)，如有侵权，请联系删除。\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701740129e3},{title:"fetch--0.1.入门案例01",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/fetch--0.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",relativePath:"zs-tool-框架/消息推送/fetch--0.1.入门案例01.md",key:"v-47af8ca6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/fetch--0.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",headers:[{level:2,title:"webflux返回SSE获取数据",slug:"webflux返回sse获取数据",normalizedTitle:"webflux返回sse获取数据",charIndex:26},{level:3,title:"前端实现",slug:"前端实现",normalizedTitle:"前端实现",charIndex:47},{level:3,title:"后端实现",slug:"后端实现",normalizedTitle:"后端实现",charIndex:2764},{level:2,title:"webflux返回Fetch获取",slug:"webflux返回fetch获取",normalizedTitle:"webflux返回fetch获取",charIndex:4238},{level:3,title:"前端实现",slug:"前端实现-2",normalizedTitle:"前端实现",charIndex:47},{level:3,title:"后端实现",slug:"后端实现-2",normalizedTitle:"后端实现",charIndex:2764}],lastUpdated:"2024年1月25日星期四中午11点35分",lastUpdatedTimestamp:1706153719e3,headersStr:"webflux返回SSE获取数据 前端实现 后端实现 webflux返回Fetch获取 前端实现 后端实现",content:'# fetch--0.1.入门案例01\n\n\n\n\n# webflux返回SSE获取数据\n\n\n# 前端实现\n\n> 🚧SSE连接会在关闭时自动发起下一次连接，除非在数据接收完毕后，将连接关闭🚧\n\n//开启SSE\nui.doms.openWebfluxBtn.addEventListener(\'click\', function () {\n    if (ui.uiData.evtSource) {\n        return\n    }\n    let openurl = `/webflux/data`\n    const evtSource = new EventSource(openurl) ;\n    ui.addElementToUI(`发起连接：${evtSource.url}`)\n    ui.uiData.evtSource = evtSource;\n    evtSource.onmessage = (event) => {\n        ui.addElementToUI(`接收到消息: ${event.data}`)\n    };\n    evtSource.onopen = (event) => {\n        console.log(\'建立连接...\')\n    };\n    //数据接收完毕后，会触发\n    evtSource.onerror = (event) => {\n        console.log(\'数据接收完成...\')\n        evtSource.close();\n        console.log(\'关闭连接...否则会自动发起下一次连接...\')\n    };\n});\n\n\n> 完整代码\n\n<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="UTF-8">\n    \x3c!-- 使用Edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>SSE</title>\n</head>\n<body>\n<button class="open-webflux-button" type="button">开启webflux请求</button>\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class UIData {\n        constructor() {\n            this.evtSource = void 0;\n        }\n    }\n    class UI {\n        constructor() {\n            this.uiData = new UIData();\n            this.doms = {\n                openWebfluxBtn: document.querySelector(\'.open-webflux-button\'),\n                ulList: document.querySelector(\'#list\')\n            };\n            this.listenEvent();\n        }\n\n        // 监听各种事件\n        listenEvent() {\n\n        }\n\n        addElementToUI(text) {\n            var html = this.doms.ulList.innerHTML;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ulList.innerHTML = html;\n        }\n    }\n    var ui = new UI();\n\n    //开启SSE\n    ui.doms.openWebfluxBtn.addEventListener(\'click\', function () {\n        if (ui.uiData.evtSource) {\n            return\n        }\n        let openurl = `/webflux/data`\n        const evtSource = new EventSource(openurl) ;\n        ui.addElementToUI(`发起连接：${evtSource.url}`)\n        ui.uiData.evtSource = evtSource;\n        evtSource.onmessage = (event) => {\n            ui.addElementToUI(`接收到消息: ${event.data}`)\n        };\n        evtSource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        //数据接收完毕后，会触发\n        evtSource.onerror = (event) => {\n            console.log(\'数据接收完成...\')\n            evtSource.close();\n            console.log(\'关闭连接...否则会自动发起下一次连接...\')\n        };\n    });\n<\/script>\n</html>\n\n\n\n\n# 后端实现\n\npackage com.zs.webflux;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.reactive.function.server.ServerRequest;\nimport reactor.core.publisher.Flux;\n\nimport java.time.Duration;\n\n/**\n * Create by 张邵\n * 2024/1/24 15:08\n */\n@RestController\npublic class WebFluxController {\n    @GetMapping(value = "/webflux/data", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public Flux<String> getData() {\n        // 这里模拟从数据库或其他地方获取数据，并使用Flux来推送数据。\n        String[] strArr = {\n                "我", "懒", "得", "写", "你", "谷", "搜", "到", "处", "皆", "只", "因", "你",\n                "太", "美", "浅", "唱", "动", "人", "说", "不", "出", "我", "试", "着", "多",\n                "看", "你", "一", "眼", "却", "发", "现", "我", "已", "沉", "溺", "于", "你",\n                "的", "镜", "头", "里", "只", "因", "你", "太", "美", "所", "以", "我", "多",\n                "看", "了", "一", "眼", "只", "因", "我", "太", "傻", "所", "以", "我", "放",\n                "不", "开", "你", "的", "手", "只", "因", "你", "太", "美", "所", "以", "我",\n                "做", "了", "个", "梦", "梦", "见", "你", "在", "微", "笑", "我", "在", "注",\n                "视", "只", "因", "你", "太", "美", "所", "以", "我", "放", "了", "你", "的",\n                "手", "所", "以", "我", "会", "微", "笑", "因", "为", "你", "太", "美", "end"\n        };\n        return Flux.just(strArr).delayElements(Duration.ofMillis(30)); // 每x ms推送一个数据。你可以根据需要调整这个时间。\n    }\n}\n\n\n\n\n# webflux返回Fetch获取\n\n\n# 前端实现\n\n> 🚨这里要注意了这里返回的数据是 data:xxxx 格式\n\n\n\n\n\n> 前端fetch流式请求核心代码\n\n//开启SSE\n    ui.doms.fetchWebfluxBtn.addEventListener(\'click\', function () {\n        const url = \'/webflux/fetch\';\n        // 发送 POST 请求\n        fetch(url, {\n            method: "GET",\n            //body:JSON.stringify({ "content": msg}),\n            timeout: 0,\n            dataType: "text/event-stream",\n            headers: {\n                "Content-Type": "application/json"\n            },\n        }).then(response => {\n            // 检查响应是否成功\n            if (!response.ok) {\n                throw new Error(\'Network response was not ok\');\n            }\n            // 返回一个可读流\n            return response.body;\n        }).then(async body => {\n            const reader = body.getReader();\n            const textDecoder = new TextDecoder() // 创建解码器\n            let result = \'\';\n            // 读取数据流\n            while (true) {  // 循环读取内容\n                /* 读取其中一部分内容 done 是否读取完成， value 读取到的内容 */\n                const {done, value} = await reader.read()\n                if (done) {\n                    // console.log(result,"==========")\n                    return\n                }\n                let str = void 0;\n                if (value.length >= 5) {\n                    if (textDecoder.decode(value.slice(0, 5)) === \'data:\') {\n                        if (value.slice(value.length - 2, value.length).toString() === \'10,10\') {\n                            str = textDecoder.decode(value.slice(5, value.length - 2))\n                        } else if (value.length > 5){\n                            str = textDecoder.decode(value.slice(5))\n                        }\n                    } else {\n                        if (value.slice(value.length - 2, value.length).toString() === \'10,10\') {\n                            str = textDecoder.decode(value.slice(0, value.length - 2))\n                        } else {\n                            str = textDecoder.decode(value)\n                        }\n                    }\n                } else if (value.length === 2 && value.slice(0, 2).toString() !== \'10,10\') {\n                    str = textDecoder.decode(value)\n                }\n                if (str) {\n                    console.log(str)\n                    ui.addElementToUI(`接收到消息: ${str}`)\n                }\n            }\n        }).catch(error => {\n            console.error(\'Fetch error:\', error);\n        });\n    });\n\n\n> 可参考写法\n\nasync function getChatgptMsg() {\n  const response = await fetch(\'你的url\', {\n    method: \'POST\',\n    headers: {\n      \'Content-Type\': \'application/json\'\n    },\n    dataType: "text/event-stream",\n    body: JSON.stringify({\n      model: \'gpt-4\',\n      messages: messages,\n      frequency_penalty: 0;\n      max_tokens:4000;\n      model:"gpt-4";\n      presence_penalty: 0.6;\n      temperature: 0.5;\n      top_p :1;\n    })\n  });\n \n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n \n  const reader = response.body.getReader();\n  let decoder = new TextDecoder();\n  let resultData = \'\';\n  let result = true;\n  while (result) {\n    const { done, value } = await reader.read();\n    if (done) {\n           console.log("Stream ended");\n           result = false;\n           break;\n    }\n    resultData += decoder.decode(value);\n \n  }\n}\n\n\n<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="UTF-8">\n    \x3c!-- 使用Edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>SSE</title>\n</head>\n<body>\n<button class="open-webflux-button" type="button">开启sse-webflux请求</button>\n<button class="open-fetch-button" type="button">开启fetch-webflux请求</button>\n\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class UIData {\n        constructor() {\n            this.evtSource = void 0;\n        }\n    }\n\n    class UI {\n        constructor() {\n            this.uiData = new UIData();\n            this.doms = {\n                sseWebfluxBtn: document.querySelector(\'.open-webflux-button\'),\n                fetchWebfluxBtn: document.querySelector(\'.open-fetch-button\'),\n                ulList: document.querySelector(\'#list\')\n            };\n            this.listenEvent();\n        }\n\n        // 监听各种事件\n        listenEvent() {\n\n        }\n\n\n        addElementToUI(text) {\n            var html = this.doms.ulList.innerHTML;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ulList.innerHTML = html;\n        }\n    }\n\n    var ui = new UI();\n\n    //开启SSE\n    ui.doms.sseWebfluxBtn.addEventListener(\'click\', function () {\n        if (ui.uiData.evtSource) {\n            return\n        }\n        let openurl = `/webflux/sse`\n        const evtSource = new EventSource(openurl);\n        ui.addElementToUI(`发起连接：${evtSource.url}`)\n        ui.uiData.evtSource = evtSource;\n        evtSource.onmessage = (event) => {\n            ui.addElementToUI(`接收到消息: ${event.data}`)\n        };\n        evtSource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        evtSource.onerror = (event) => {\n            console.log(\'数据接收完成...\')\n            evtSource.close();\n            console.log(\'关闭连接...否则会自动发起下一次连接...\')\n        };\n    });\n\n    //开启SSE\n    ui.doms.fetchWebfluxBtn.addEventListener(\'click\', function () {\n        const url = \'/webflux/fetch\';\n        // 发送 POST 请求\n        fetch(url, {\n            method: "GET",\n            //body:JSON.stringify({ "content": msg}),\n            timeout: 0,\n            dataType: "text/event-stream",\n            headers: {\n                "Content-Type": "application/json"\n            },\n        }).then(response => {\n            // 检查响应是否成功\n            if (!response.ok) {\n                throw new Error(\'Network response was not ok\');\n            }\n            // 返回一个可读流\n            return response.body;\n        }).then(async body => {\n            const reader = body.getReader();\n            const textDecoder = new TextDecoder() // 创建解码器\n            let result = \'\';\n            // 读取数据流\n            while (true) {  // 循环读取内容\n                /* 读取其中一部分内容 done 是否读取完成， value 读取到的内容 */\n                const {done, value} = await reader.read()\n                if (done) {\n                    // console.log(result,"==========")\n                    return\n                }\n                let str = void 0;\n                if (value.length >= 5) {\n                    if (textDecoder.decode(value.slice(0, 5)) === \'data:\') {\n                        if (value.slice(value.length - 2, value.length).toString() === \'10,10\') {\n                            str = textDecoder.decode(value.slice(5, value.length - 2))\n                        } else if (value.length > 5){\n                            str = textDecoder.decode(value.slice(5))\n                        }\n                    } else {\n                        if (value.slice(value.length - 2, value.length).toString() === \'10,10\') {\n                            str = textDecoder.decode(value.slice(0, value.length - 2))\n                        } else {\n                            str = textDecoder.decode(value)\n                        }\n                    }\n                } else if (value.length === 2 && value.slice(0, 2).toString() !== \'10,10\') {\n                    str = textDecoder.decode(value)\n                }\n                if (str) {\n                    console.log(str)\n                    ui.addElementToUI(`接收到消息: ${str}`)\n                }\n            }\n        }).catch(error => {\n            console.error(\'Fetch error:\', error);\n        });\n    });\n\n\n    function Uint8ArrayToString(fileData) {\n        var dataString = "";\n        for (var i = 0; i < fileData.length; i++) {\n            dataString += String.fromCharCode(fileData[i]);\n        }\n\n        return dataString\n    }\n<\/script>\n</html>\n\n\n\n\n# 后端实现\n\n@GetMapping(value = "/webflux/fetch2", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\npublic Flux<String> getStreamAnswer() {\n    // 创建一个包含流数据的Flux\n    return Flux.interval(Duration.ofMillis(100))\n        .map(sequence -> "Data " + sequence)\n        // 执行50次\n        .take(50)\n        .log();\n}\n\n@GetMapping(value = "/webflux/fetch", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\npublic Flux<String> getFetch() {\n    // 这里模拟从数据库或其他地方获取数据，并使用Flux来推送数据。\n    String[] strArr = {\n        "我", "懒", "得", "写", "你", "谷", "搜", "到", "处", "皆", "只", "因", "你",\n        "太", "美", "浅", "唱", "动", "人", "说", "不", "出", "我", "试", "着", "多",\n        "看", "你", "一", "眼", "却", "发", "现", "我", "已", "沉", "溺", "于", "你",\n        "的", "镜", "头", "里", "只", "因", "你", "太", "美", "所", "以", "我", "多",\n        "看", "了", "一", "眼", "只", "因", "我", "太", "傻", "所", "以", "我", "放",\n        "不", "开", "你", "的", "手", "只", "因", "你", "太", "美", "所", "以", "我",\n        "做", "了", "个", "梦", "梦", "见", "你", "在", "微", "笑", "我", "在", "注",\n        "视", "只", "因", "你", "太", "美", "所", "以", "我", "放", "了", "你", "的",\n        "手", "所", "以", "我", "会", "微", "笑", "因", "为", "你", "太", "美", "end"\n    };\n    return Flux.just(strArr) // 示例数据，实际中从数据库或其他地方获取。\n        .delayElements(Duration.ofMillis(30)); // 每1秒推送一个数据。你可以根据需要调整这个时间。\n}\n\n\nhttp://t.csdnimg.cn/Tjdef',normalizedContent:'# fetch--0.1.入门案例01\n\n\n\n\n# webflux返回sse获取数据\n\n\n# 前端实现\n\n> 🚧sse连接会在关闭时自动发起下一次连接，除非在数据接收完毕后，将连接关闭🚧\n\n//开启sse\nui.doms.openwebfluxbtn.addeventlistener(\'click\', function () {\n    if (ui.uidata.evtsource) {\n        return\n    }\n    let openurl = `/webflux/data`\n    const evtsource = new eventsource(openurl) ;\n    ui.addelementtoui(`发起连接：${evtsource.url}`)\n    ui.uidata.evtsource = evtsource;\n    evtsource.onmessage = (event) => {\n        ui.addelementtoui(`接收到消息: ${event.data}`)\n    };\n    evtsource.onopen = (event) => {\n        console.log(\'建立连接...\')\n    };\n    //数据接收完毕后，会触发\n    evtsource.onerror = (event) => {\n        console.log(\'数据接收完成...\')\n        evtsource.close();\n        console.log(\'关闭连接...否则会自动发起下一次连接...\')\n    };\n});\n\n\n> 完整代码\n\n<!doctype html>\n<html lang="zh-cn">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="utf-8">\n    \x3c!-- 使用edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="x-ua-compatible" content="ie=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>sse</title>\n</head>\n<body>\n<button class="open-webflux-button" type="button">开启webflux请求</button>\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class uidata {\n        constructor() {\n            this.evtsource = void 0;\n        }\n    }\n    class ui {\n        constructor() {\n            this.uidata = new uidata();\n            this.doms = {\n                openwebfluxbtn: document.queryselector(\'.open-webflux-button\'),\n                ullist: document.queryselector(\'#list\')\n            };\n            this.listenevent();\n        }\n\n        // 监听各种事件\n        listenevent() {\n\n        }\n\n        addelementtoui(text) {\n            var html = this.doms.ullist.innerhtml;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ullist.innerhtml = html;\n        }\n    }\n    var ui = new ui();\n\n    //开启sse\n    ui.doms.openwebfluxbtn.addeventlistener(\'click\', function () {\n        if (ui.uidata.evtsource) {\n            return\n        }\n        let openurl = `/webflux/data`\n        const evtsource = new eventsource(openurl) ;\n        ui.addelementtoui(`发起连接：${evtsource.url}`)\n        ui.uidata.evtsource = evtsource;\n        evtsource.onmessage = (event) => {\n            ui.addelementtoui(`接收到消息: ${event.data}`)\n        };\n        evtsource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        //数据接收完毕后，会触发\n        evtsource.onerror = (event) => {\n            console.log(\'数据接收完成...\')\n            evtsource.close();\n            console.log(\'关闭连接...否则会自动发起下一次连接...\')\n        };\n    });\n<\/script>\n</html>\n\n\n\n\n# 后端实现\n\npackage com.zs.webflux;\n\nimport org.springframework.http.mediatype;\nimport org.springframework.web.bind.annotation.getmapping;\nimport org.springframework.web.bind.annotation.restcontroller;\nimport org.springframework.web.reactive.function.server.serverrequest;\nimport reactor.core.publisher.flux;\n\nimport java.time.duration;\n\n/**\n * create by 张邵\n * 2024/1/24 15:08\n */\n@restcontroller\npublic class webfluxcontroller {\n    @getmapping(value = "/webflux/data", produces = mediatype.text_event_stream_value)\n    public flux<string> getdata() {\n        // 这里模拟从数据库或其他地方获取数据，并使用flux来推送数据。\n        string[] strarr = {\n                "我", "懒", "得", "写", "你", "谷", "搜", "到", "处", "皆", "只", "因", "你",\n                "太", "美", "浅", "唱", "动", "人", "说", "不", "出", "我", "试", "着", "多",\n                "看", "你", "一", "眼", "却", "发", "现", "我", "已", "沉", "溺", "于", "你",\n                "的", "镜", "头", "里", "只", "因", "你", "太", "美", "所", "以", "我", "多",\n                "看", "了", "一", "眼", "只", "因", "我", "太", "傻", "所", "以", "我", "放",\n                "不", "开", "你", "的", "手", "只", "因", "你", "太", "美", "所", "以", "我",\n                "做", "了", "个", "梦", "梦", "见", "你", "在", "微", "笑", "我", "在", "注",\n                "视", "只", "因", "你", "太", "美", "所", "以", "我", "放", "了", "你", "的",\n                "手", "所", "以", "我", "会", "微", "笑", "因", "为", "你", "太", "美", "end"\n        };\n        return flux.just(strarr).delayelements(duration.ofmillis(30)); // 每x ms推送一个数据。你可以根据需要调整这个时间。\n    }\n}\n\n\n\n\n# webflux返回fetch获取\n\n\n# 前端实现\n\n> 🚨这里要注意了这里返回的数据是 data:xxxx 格式\n\n\n\n\n\n> 前端fetch流式请求核心代码\n\n//开启sse\n    ui.doms.fetchwebfluxbtn.addeventlistener(\'click\', function () {\n        const url = \'/webflux/fetch\';\n        // 发送 post 请求\n        fetch(url, {\n            method: "get",\n            //body:json.stringify({ "content": msg}),\n            timeout: 0,\n            datatype: "text/event-stream",\n            headers: {\n                "content-type": "application/json"\n            },\n        }).then(response => {\n            // 检查响应是否成功\n            if (!response.ok) {\n                throw new error(\'network response was not ok\');\n            }\n            // 返回一个可读流\n            return response.body;\n        }).then(async body => {\n            const reader = body.getreader();\n            const textdecoder = new textdecoder() // 创建解码器\n            let result = \'\';\n            // 读取数据流\n            while (true) {  // 循环读取内容\n                /* 读取其中一部分内容 done 是否读取完成， value 读取到的内容 */\n                const {done, value} = await reader.read()\n                if (done) {\n                    // console.log(result,"==========")\n                    return\n                }\n                let str = void 0;\n                if (value.length >= 5) {\n                    if (textdecoder.decode(value.slice(0, 5)) === \'data:\') {\n                        if (value.slice(value.length - 2, value.length).tostring() === \'10,10\') {\n                            str = textdecoder.decode(value.slice(5, value.length - 2))\n                        } else if (value.length > 5){\n                            str = textdecoder.decode(value.slice(5))\n                        }\n                    } else {\n                        if (value.slice(value.length - 2, value.length).tostring() === \'10,10\') {\n                            str = textdecoder.decode(value.slice(0, value.length - 2))\n                        } else {\n                            str = textdecoder.decode(value)\n                        }\n                    }\n                } else if (value.length === 2 && value.slice(0, 2).tostring() !== \'10,10\') {\n                    str = textdecoder.decode(value)\n                }\n                if (str) {\n                    console.log(str)\n                    ui.addelementtoui(`接收到消息: ${str}`)\n                }\n            }\n        }).catch(error => {\n            console.error(\'fetch error:\', error);\n        });\n    });\n\n\n> 可参考写法\n\nasync function getchatgptmsg() {\n  const response = await fetch(\'你的url\', {\n    method: \'post\',\n    headers: {\n      \'content-type\': \'application/json\'\n    },\n    datatype: "text/event-stream",\n    body: json.stringify({\n      model: \'gpt-4\',\n      messages: messages,\n      frequency_penalty: 0;\n      max_tokens:4000;\n      model:"gpt-4";\n      presence_penalty: 0.6;\n      temperature: 0.5;\n      top_p :1;\n    })\n  });\n \n  if (!response.ok) {\n    throw new error(`http error! status: ${response.status}`);\n  }\n \n  const reader = response.body.getreader();\n  let decoder = new textdecoder();\n  let resultdata = \'\';\n  let result = true;\n  while (result) {\n    const { done, value } = await reader.read();\n    if (done) {\n           console.log("stream ended");\n           result = false;\n           break;\n    }\n    resultdata += decoder.decode(value);\n \n  }\n}\n\n\n<!doctype html>\n<html lang="zh-cn">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="utf-8">\n    \x3c!-- 使用edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="x-ua-compatible" content="ie=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>sse</title>\n</head>\n<body>\n<button class="open-webflux-button" type="button">开启sse-webflux请求</button>\n<button class="open-fetch-button" type="button">开启fetch-webflux请求</button>\n\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class uidata {\n        constructor() {\n            this.evtsource = void 0;\n        }\n    }\n\n    class ui {\n        constructor() {\n            this.uidata = new uidata();\n            this.doms = {\n                ssewebfluxbtn: document.queryselector(\'.open-webflux-button\'),\n                fetchwebfluxbtn: document.queryselector(\'.open-fetch-button\'),\n                ullist: document.queryselector(\'#list\')\n            };\n            this.listenevent();\n        }\n\n        // 监听各种事件\n        listenevent() {\n\n        }\n\n\n        addelementtoui(text) {\n            var html = this.doms.ullist.innerhtml;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ullist.innerhtml = html;\n        }\n    }\n\n    var ui = new ui();\n\n    //开启sse\n    ui.doms.ssewebfluxbtn.addeventlistener(\'click\', function () {\n        if (ui.uidata.evtsource) {\n            return\n        }\n        let openurl = `/webflux/sse`\n        const evtsource = new eventsource(openurl);\n        ui.addelementtoui(`发起连接：${evtsource.url}`)\n        ui.uidata.evtsource = evtsource;\n        evtsource.onmessage = (event) => {\n            ui.addelementtoui(`接收到消息: ${event.data}`)\n        };\n        evtsource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        evtsource.onerror = (event) => {\n            console.log(\'数据接收完成...\')\n            evtsource.close();\n            console.log(\'关闭连接...否则会自动发起下一次连接...\')\n        };\n    });\n\n    //开启sse\n    ui.doms.fetchwebfluxbtn.addeventlistener(\'click\', function () {\n        const url = \'/webflux/fetch\';\n        // 发送 post 请求\n        fetch(url, {\n            method: "get",\n            //body:json.stringify({ "content": msg}),\n            timeout: 0,\n            datatype: "text/event-stream",\n            headers: {\n                "content-type": "application/json"\n            },\n        }).then(response => {\n            // 检查响应是否成功\n            if (!response.ok) {\n                throw new error(\'network response was not ok\');\n            }\n            // 返回一个可读流\n            return response.body;\n        }).then(async body => {\n            const reader = body.getreader();\n            const textdecoder = new textdecoder() // 创建解码器\n            let result = \'\';\n            // 读取数据流\n            while (true) {  // 循环读取内容\n                /* 读取其中一部分内容 done 是否读取完成， value 读取到的内容 */\n                const {done, value} = await reader.read()\n                if (done) {\n                    // console.log(result,"==========")\n                    return\n                }\n                let str = void 0;\n                if (value.length >= 5) {\n                    if (textdecoder.decode(value.slice(0, 5)) === \'data:\') {\n                        if (value.slice(value.length - 2, value.length).tostring() === \'10,10\') {\n                            str = textdecoder.decode(value.slice(5, value.length - 2))\n                        } else if (value.length > 5){\n                            str = textdecoder.decode(value.slice(5))\n                        }\n                    } else {\n                        if (value.slice(value.length - 2, value.length).tostring() === \'10,10\') {\n                            str = textdecoder.decode(value.slice(0, value.length - 2))\n                        } else {\n                            str = textdecoder.decode(value)\n                        }\n                    }\n                } else if (value.length === 2 && value.slice(0, 2).tostring() !== \'10,10\') {\n                    str = textdecoder.decode(value)\n                }\n                if (str) {\n                    console.log(str)\n                    ui.addelementtoui(`接收到消息: ${str}`)\n                }\n            }\n        }).catch(error => {\n            console.error(\'fetch error:\', error);\n        });\n    });\n\n\n    function uint8arraytostring(filedata) {\n        var datastring = "";\n        for (var i = 0; i < filedata.length; i++) {\n            datastring += string.fromcharcode(filedata[i]);\n        }\n\n        return datastring\n    }\n<\/script>\n</html>\n\n\n\n\n# 后端实现\n\n@getmapping(value = "/webflux/fetch2", produces = mediatype.text_event_stream_value)\npublic flux<string> getstreamanswer() {\n    // 创建一个包含流数据的flux\n    return flux.interval(duration.ofmillis(100))\n        .map(sequence -> "data " + sequence)\n        // 执行50次\n        .take(50)\n        .log();\n}\n\n@getmapping(value = "/webflux/fetch", produces = mediatype.text_event_stream_value)\npublic flux<string> getfetch() {\n    // 这里模拟从数据库或其他地方获取数据，并使用flux来推送数据。\n    string[] strarr = {\n        "我", "懒", "得", "写", "你", "谷", "搜", "到", "处", "皆", "只", "因", "你",\n        "太", "美", "浅", "唱", "动", "人", "说", "不", "出", "我", "试", "着", "多",\n        "看", "你", "一", "眼", "却", "发", "现", "我", "已", "沉", "溺", "于", "你",\n        "的", "镜", "头", "里", "只", "因", "你", "太", "美", "所", "以", "我", "多",\n        "看", "了", "一", "眼", "只", "因", "我", "太", "傻", "所", "以", "我", "放",\n        "不", "开", "你", "的", "手", "只", "因", "你", "太", "美", "所", "以", "我",\n        "做", "了", "个", "梦", "梦", "见", "你", "在", "微", "笑", "我", "在", "注",\n        "视", "只", "因", "你", "太", "美", "所", "以", "我", "放", "了", "你", "的",\n        "手", "所", "以", "我", "会", "微", "笑", "因", "为", "你", "太", "美", "end"\n    };\n    return flux.just(strarr) // 示例数据，实际中从数据库或其他地方获取。\n        .delayelements(duration.ofmillis(30)); // 每1秒推送一个数据。你可以根据需要调整这个时间。\n}\n\n\nhttp://t.csdnimg.cn/tjdef',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706153719e3},{title:"附录2、vuepress自定义home页",frontmatter:{title:"附录2、vuepress自定义home页","autoGroup-1":"附录"},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%952%E3%80%81vuepress%E8%87%AA%E5%AE%9A%E4%B9%89home%E9%A1%B5.html",relativePath:"zs-tool-框架/vuepress/附录2、vuepress自定义home页.md",key:"v-17345a4c",path:"/zs-tool-%E6%A1%86%E6%9E%B6/vuepress/%E9%99%84%E5%BD%952%E3%80%81vuepress%E8%87%AA%E5%AE%9A%E4%B9%89home%E9%A1%B5.html",headers:[{level:2,title:"1、vuepress的主体继承",slug:"_1、vuepress的主体继承",normalizedTitle:"1、vuepress的主体继承",charIndex:2},{level:2,title:"2、创建覆盖的home页面",slug:"_2、创建覆盖的home页面",normalizedTitle:"2、创建覆盖的home页面",charIndex:26},{level:2,title:"3、修改需要的样式",slug:"_3、修改需要的样式",normalizedTitle:"3、修改需要的样式",charIndex:64},{level:2,title:"效果",slug:"效果",normalizedTitle:"效果",charIndex:82}],lastUpdated:"2023年12月5日星期二下午4点31分",lastUpdatedTimestamp:1701765099e3,headersStr:"1、vuepress的主体继承 2、创建覆盖的home页面 3、修改需要的样式 效果",content:"# 1、vuepress的主体继承\n\n\n\n\n\n\n# 2、创建覆盖的home页面\n\n从Github官网仓库中拷贝文件\n\n\n\n\n# 3、修改需要的样式\n\n\n\n\n\n\n# 效果\n\n> 改之前\n\n\n\n> 改之后\n\n",normalizedContent:"# 1、vuepress的主体继承\n\n\n\n\n\n\n# 2、创建覆盖的home页面\n\n从github官网仓库中拷贝文件\n\n\n\n\n# 3、修改需要的样式\n\n\n\n\n\n\n# 效果\n\n> 改之前\n\n\n\n> 改之后\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701764318e3},{title:"旧方案存在的技术痛点",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.0.%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html",relativePath:"zs-tool-框架/消息推送/websocket--3.0.技术选型.md",key:"v-c92ce314",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.0.%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html",headers:[{level:2,title:"旧方案存在的技术痛点",slug:"旧方案存在的技术痛点",normalizedTitle:"旧方案存在的技术痛点",charIndex:2},{level:3,title:"业务场景",slug:"业务场景",normalizedTitle:"业务场景",charIndex:17},{level:3,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:149},{level:2,title:"新方案的技术目标",slug:"新方案的技术目标",normalizedTitle:"新方案的技术目标",charIndex:530},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:543},{level:2,title:"新方案的技术选型",slug:"新方案的技术选型",normalizedTitle:"新方案的技术选型",charIndex:869}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"旧方案存在的技术痛点 业务场景 问题 新方案的技术目标 特点 新方案的技术选型",content:"# 旧方案存在的技术痛点\n\n\n# 业务场景\n\n1）用户评论：实时的将评论消息推送到浏览器；\n\n2）实名认证：合同签署前需要对用户进行实名认证，用户扫描二维码后进入第三方的认证页面，认证完成后异步通知浏览器认证的状态；\n\n3）活体识别：类似实名认证，当活体识别完成后，异步将结果通知浏览器。\n\n\n# 问题\n\n1）首先：WebSocket技术栈不统一，既有基于Netty实现的，也有基于Web容器实现的，给开发和维护带来困难；\n\n2）其次：WebSocket实现分散在在各个工程中，与业务系统强耦合，如果有其他业务需要集成WebSocket，面临着重复开发的窘境，浪费成本、效率低下；\n\n3）第三：WebSocket是有状态协议的，客户端连接服务器时只和集群中一个节点连接，数据传输过程中也只与这一节点通信。WebSocket集群需要解决会话共享的问题。如果只采用单节点部署，虽然可以避免这一问题，但无法水平扩展支撑更高负载，有单点的风险；\n\n4）最后：缺乏监控与报警，虽然可以通过Linux的Socket连接数大致评估WebSocket长连接数，但数字并不准确，也无法得知用户数等具有业务含义的指标数据；无法与现有的微服务监控整合，实现统一监控和报警。\n\n\n# 新方案的技术目标\n\n\n# 特点\n\n1）集中实现长连接管理和推送能力：统一技术栈，将长连接作为基础能力沉淀，便于功能迭代和升级维护；\n\n2）与业务解耦：将业务逻辑与长连接通信分离，使业务系统不再关心通信细节，也避免了重复开发，浪费研发成本；\n\n3）使用简单：提供HTTP推送通道，方便各种开发语言的接入。业务系统只需要简单的调用，就可以实现数据推送，提升研发效率；\n\n4）分布式架构：实现多节点的集群，支持水平扩展应对业务增长带来的挑战；节点宕机不影响服务整体可用性，保证高可靠；\n\n5）多端消息同步：允许用户使用多个浏览器或标签页同时登陆在线，保证消息同步发送；\n\n6）多维度监控与报警：自定义监控指标与现有微服务监控系统打通，出现问题时可及时报警，保证服务的稳定性。\n\n\n# 新方案的技术选型\n\n在众多的WebSocket实现中，从性能、扩展性、社区支持等方面考虑，最终选择了Netty。Netty是一个高性能、事件驱动、异步非阻塞的网络通信框架，在许多知名的开源软件中被广泛使用。\n\nPS：如果你对Netty知之甚少，可以详读以下两篇：\n\n1）《史上最通俗Netty入门长文：基本介绍、环境搭建、动手实战》\n\n2）《新手入门：目前为止最透彻的的Netty高性能原理和框架架构解析》\n\nWebSocket是有状态的，无法像直接HTTP以集群方式实现负载均衡，长连接建立后即与服务端某个节点保持着会话，因此集群下想要得知会话属于哪个节点有点困难。\n\n解决以上问题一般有两种技术方案：\n\n1）一种是使用类似微服务的注册中心来维护全局的会话映射关系；\n\n2）一种是使用事件广播由各节点自行判断是否持有会话，两种方案对比如下表所示。\n\nWebSocket集群方案：\n\n方案     优点                    缺点\n注册中心   会话映射关系清晰，集群规模较大时更合适   实现复杂，强依赖注册中心，有额外运维成本\n事件广播   实现简单更加轻量              节点较多时，所有节点均被广播，资源浪费\n\n综合考虑实现成本与集群规模，选择了轻量级的事件广播方案。\n\n实现广播可以选择基于RocketMQ的消息广播、基于Redis的Publish/Subscribe、基于ZooKeeper的通知等方案，其优缺点对比如下表所示。从吞吐量、实时性、持久化、实现难易等方面考虑，最终选择了RocketMQ。\n\n广播的实现方案对比：\n\n方案            有点              缺点\n基于RocketMQ    吞吐量高、高可用、保证可靠   实时性不如Redis\n基于Redis       实时性高、实现简单       不保证可靠\n基于ZooKeeper   实现简单            写入性能差，不适合频繁写入场景\n\n",normalizedContent:"# 旧方案存在的技术痛点\n\n\n# 业务场景\n\n1）用户评论：实时的将评论消息推送到浏览器；\n\n2）实名认证：合同签署前需要对用户进行实名认证，用户扫描二维码后进入第三方的认证页面，认证完成后异步通知浏览器认证的状态；\n\n3）活体识别：类似实名认证，当活体识别完成后，异步将结果通知浏览器。\n\n\n# 问题\n\n1）首先：websocket技术栈不统一，既有基于netty实现的，也有基于web容器实现的，给开发和维护带来困难；\n\n2）其次：websocket实现分散在在各个工程中，与业务系统强耦合，如果有其他业务需要集成websocket，面临着重复开发的窘境，浪费成本、效率低下；\n\n3）第三：websocket是有状态协议的，客户端连接服务器时只和集群中一个节点连接，数据传输过程中也只与这一节点通信。websocket集群需要解决会话共享的问题。如果只采用单节点部署，虽然可以避免这一问题，但无法水平扩展支撑更高负载，有单点的风险；\n\n4）最后：缺乏监控与报警，虽然可以通过linux的socket连接数大致评估websocket长连接数，但数字并不准确，也无法得知用户数等具有业务含义的指标数据；无法与现有的微服务监控整合，实现统一监控和报警。\n\n\n# 新方案的技术目标\n\n\n# 特点\n\n1）集中实现长连接管理和推送能力：统一技术栈，将长连接作为基础能力沉淀，便于功能迭代和升级维护；\n\n2）与业务解耦：将业务逻辑与长连接通信分离，使业务系统不再关心通信细节，也避免了重复开发，浪费研发成本；\n\n3）使用简单：提供http推送通道，方便各种开发语言的接入。业务系统只需要简单的调用，就可以实现数据推送，提升研发效率；\n\n4）分布式架构：实现多节点的集群，支持水平扩展应对业务增长带来的挑战；节点宕机不影响服务整体可用性，保证高可靠；\n\n5）多端消息同步：允许用户使用多个浏览器或标签页同时登陆在线，保证消息同步发送；\n\n6）多维度监控与报警：自定义监控指标与现有微服务监控系统打通，出现问题时可及时报警，保证服务的稳定性。\n\n\n# 新方案的技术选型\n\n在众多的websocket实现中，从性能、扩展性、社区支持等方面考虑，最终选择了netty。netty是一个高性能、事件驱动、异步非阻塞的网络通信框架，在许多知名的开源软件中被广泛使用。\n\nps：如果你对netty知之甚少，可以详读以下两篇：\n\n1）《史上最通俗netty入门长文：基本介绍、环境搭建、动手实战》\n\n2）《新手入门：目前为止最透彻的的netty高性能原理和框架架构解析》\n\nwebsocket是有状态的，无法像直接http以集群方式实现负载均衡，长连接建立后即与服务端某个节点保持着会话，因此集群下想要得知会话属于哪个节点有点困难。\n\n解决以上问题一般有两种技术方案：\n\n1）一种是使用类似微服务的注册中心来维护全局的会话映射关系；\n\n2）一种是使用事件广播由各节点自行判断是否持有会话，两种方案对比如下表所示。\n\nwebsocket集群方案：\n\n方案     优点                    缺点\n注册中心   会话映射关系清晰，集群规模较大时更合适   实现复杂，强依赖注册中心，有额外运维成本\n事件广播   实现简单更加轻量              节点较多时，所有节点均被广播，资源浪费\n\n综合考虑实现成本与集群规模，选择了轻量级的事件广播方案。\n\n实现广播可以选择基于rocketmq的消息广播、基于redis的publish/subscribe、基于zookeeper的通知等方案，其优缺点对比如下表所示。从吞吐量、实时性、持久化、实现难易等方面考虑，最终选择了rocketmq。\n\n广播的实现方案对比：\n\n方案            有点              缺点\n基于rocketmq    吞吐量高、高可用、保证可靠   实时性不如redis\n基于redis       实时性高、实现简单       不保证可靠\n基于zookeeper   实现简单            写入性能差，不适合频繁写入场景\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.1.介绍",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.1.%E4%BB%8B%E7%BB%8D.html",relativePath:"zs-tool-框架/消息推送/websocket--3.1.介绍.md",key:"v-29c24882",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.1.%E4%BB%8B%E7%BB%8D.html",headers:[{level:2,title:"HTTP 与 WebSocket",slug:"http-与-websocket",normalizedTitle:"http 与 websocket",charIndex:985},{level:2,title:"websocket诞生",slug:"websocket诞生",normalizedTitle:"websocket诞生",charIndex:1448},{level:2,title:"websocket建立连接过程",slug:"websocket建立连接过程",normalizedTitle:"websocket建立连接过程",charIndex:2173},{level:2,title:"websocket协议分析",slug:"websocket协议分析",normalizedTitle:"websocket协议分析",charIndex:2193},{level:2,title:"websocket支持",slug:"websocket支持",normalizedTitle:"websocket支持",charIndex:3867},{level:2,title:"JSR356",slug:"jsr356",normalizedTitle:"jsr356",charIndex:4203},{level:2,title:"思考",slug:"思考",normalizedTitle:"思考",charIndex:4279}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"HTTP 与 WebSocket websocket诞生 websocket建立连接过程 websocket协议分析 websocket支持 JSR356 思考",content:"# websocket--3.1.介绍\n\nWebSocket 协议RFC 6455提供了一种标准化方法，通过单个 TCP 连接在客户端和服务器之间建立全双工、双向通信通道。它是与 HTTP 不同的 TCP 协议，但设计为通过 HTTP 工作，使用端口 80 和 443，并允许重复使用现有的防火墙规则。\n\nWebSocket 交互从 HTTP 请求开始，该请求使用 HTTPUpgrade标头进行升级，或者在本例中切换到 WebSocket 协议。下面的例子展示了这样的交互：\n\n> GET /spring-websocket-portfolio/portfolio HTTP/1.1\n> Host: localhost:8080\n> Upgrade: websocket ①\n> Connection: Upgrade ②\n> Sec-WebSocket-Key: Uc9l9TMkWGbHFD2qnFHltg==\n> Sec-WebSocket-Protocol: v10.stomp, v11.stomp\n> Sec-WebSocket-Version: 13\n> Origin: http://localhost:8080\n> \n> \n> ①标Upgrade头。\n> \n> ②使用Upgrade连接。\n> \n> 支持 WebSocket 的服务器返回类似于以下内容的输出，而不是通常的 200 状态代码：\n> \n> HTTP/1.1 101 Switching Protocols ①\n> Upgrade: websocket\n> Connection: Upgrade\n> Sec-WebSocket-Accept: 1qVdfYHU9hPOl4JYYNXF623Gzn0=\n> Sec-WebSocket-Protocol: v10.stomp\n> \n> \n> ①协议切换\n\n成功握手后，HTTP 升级请求底层的 TCP 套接字保持打开状态，以便客户端和服务器继续发送和接收消息。\n\n请注意，如果 WebSocket 服务器在 Web 服务器（例如 nginx）后面运行，您可能需要将其配置为将 WebSocket 升级请求传递到 WebSocket 服务器。同样，如果应用程序在云环境中运行，请检查云提供商与 WebSocket 支持相关的说明。\n\n\n# HTTP 与 WebSocket\n\n尽管 WebSocket 被设计为与 HTTP 兼容并以 HTTP 请求启动，但重要的是要了解这两种协议会导致非常不同的体系结构和应用程序编程模型。\n\n在 HTTP 和 REST 中，应用程序被建模为许多 URL。为了与应用程序交互，客户端以请求-响应方式访问这些 URL。服务器根据 HTTP URL、方法和标头将请求路由到适当的处理程序。\n\n相比之下，在 WebSocket 中，初始连接通常只有一个 URL。随后，所有应用程序消息都在同一 TCP 连接上流动。这指向完全不同的异步、事件驱动的消息传递架构。\n\nWebSocket 也是一种低级传输协议，与 HTTP 不同，它不对消息内容规定任何语义。这意味着除非客户端和服务器就消息语义达成一致，否则无法路由或处理消息。\n\nSec-WebSocket-ProtocolWebSocket 客户端和服务器可以通过HTTP 握手请求上的标头协商使用更高级别的消息传递协议（例如 STOMP） 。如果没有，他们需要制定自己的惯例。\n\n\n# websocket诞生\n\nhttp通信的痛点\n\n * 单向通信\n   \n   http的连接是单向的，即客户端可以给服务端主动发送消息，服务端做起响应。但是服务端无法主动向客户端发送消息。\n\n * 多次建立tcp连接\n   \n   另外http在每次客户端和服务端的交互中需要在基于tcp的基础上进行握手和挥手的环节，必然会造成额外资源的开销。\n\n历史解决方案\n\n * http长链接解决多次tcp连接问题\n   \n   在http1.1中，出现了http长连接，其特点是保持连接特性，当一次http交互完后该TCP通道并不会关闭，而是会保持一段时间(在不同服务器上时间不一样，可以设置)，如果在这段时间内再次发起了http请求就可以直接复用，而不用重新进行握手，从而减少了资源浪费。目前http1.1中，都是默认使用长连接，在请求头中加上\n   connection：keep-alive\n   长连接默认保持连接有效时间是2h\n\n * 轮询解决单向通信问题\n   \n   由客户端主动每间断一些时间便向服务端发起请求，询问服务端是否有消息进行同步。从而在一定的时间容错范围内，让服务端的消息同步给客户端。\n\n * 阻塞式响应解决单向通信问题\n   \n   客户端主动发起请求，服务端收到请求后如果没有响应消息，则进行阻塞，知道服务端有需要响应的信息之后，返回给客户端。然后客户端收到响应之后再次发送消息给服务端进行阻塞，如此反复。\n\n * websocket方案\n   \n   websocket是一种全双工通信的解决方案，即客户端和服务端均可以主动发送消息。\n\n实现原理：客户端和服务器之间维持一个 TCP/IP 长连接，全双工通道。\n\n\n# websocket建立连接过程\n\n\n# websocket协议分析\n\nRFC6455 https://www.rfc-editor.org/rfc/rfc6455.txt RFC6455中文版\nws协议分析\n\nRFC6455中定义了webscoket基于tcp以及http的握手、挥手以及协议帧信息\n\n * 协议帧\n\nhttps://www.rfc-editor.org/rfc/rfc6455.txt\n\n FIN:  1 bit\n    指示这是消息中的最后一个片段。第一个片段也可以是最终片段。\n      \n  RSV1, RSV2, RSV3:  1 bit each\n  \t必须为0，除非协商了定义含义的扩展对于非零值。如果接收到非零值，并且协商的扩展定义了这样一个非零的含义值，\n  \t则接收端点必须向WebSocket发送MUST _Fail）连接_。\n\n\nOpcode:  4 bits 指定数据包类型\n\t定义“有效载荷数据”的解释。如果接收到未知操作码，则接收端点必须向WebSocket连接_。定义了以下值。\n\n*  %x0 表示连续帧\n*  %x1 表示文本帧\n*  %x2 二进制\n*  %x3-7 为其他非控制帧保留\n*  %x8 关闭连接信号\n*  %x9 ping\n*  %xA pong\n*  %xB-F 为进一步的控制帧保留\n\n\nPayload length:  7 bits, 7+16 bits, or 7+64 bits\n\n有效载荷长度：7位、7+16位或7+64位\n以字节为单位：如果0-125，则为有效载荷长度。如果是126，则以下2个字节被解释为6位无符号整数是有效载荷长度。\n如果127后面的8个字节被解释为64位无符号整数（最高有效位必须是0）是有效载荷长度。\n多字节长度量以网络字节顺序表示。请注意\n\n\n> 握手\n\n * 客户端\n   \n   GET /chat HTTP/1.1\n   Host: server.example.com\n   Upgrade: webSocket\n   Connection: Upgrade\n   Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n   Origin: http://example.com\n   Sec-WebSocket-Protocol: websocket\n   Sec-WebSocket-Version: 13\n   在http的基础上进行升级（upgrade），升级成websocket协议，websocket协议的版本是13。\n   Sec-WebSocket-Key 此参数为客户端传递的密钥，会由此生成服务端产生的密钥，并由客户端判断是否进行connection。\n\n * 服务端\n   \n   HTTP/1.1 101 Switching Protocols\n   Upgrade: websocket\n   Connection: Upgrade\n   Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n   Sec-WebSocket-Protocol: websocket\n\nHTTP状态码响应为101 代表websocket协议升级成功。\nSec-WebSocket-Accept：表示服务器是否接收这个连接，如果有这个字段，这个字段的值必须为客户端提供的|Sec-WebSocket-Key|字段的值与预先定义好的GUID值进行哈希，在进行base64编码。任何其他的值都表明服务器没有接受客户端发起的请求。\n\n> 挥手\n\n挥手过程要比打开过程简单的多。 任何一端都可以发送一个Close帧来开始挥手过程，Close帧可能带有部分数据（比如描述关闭的原因以及状态码）。任何一端收到一个Close帧，如果之前没有回复过的话，需要发送Close帧。主动关闭的一端在收到对端返回的响应后，在确定没有数据需要继续接收之后，开始关闭底层连接（shutdown）。\n\n\n# websocket支持\n\n * 前端\n   \n   websocket基础需要依赖于html5。之前的版本并没有对websocket进行支持。\n   目前，支持Html5的浏览器包括Firefox（火狐浏览器）、IE9及其更高版本、Chrome（谷歌浏览器）、Safari、Opera等；国内的傲游浏览器（Maxthon）、以及基于IE或Chromium（Chrome的工程版或称实验版）所推出的360浏览器、搜狗浏览器、QQ浏览器、猎豹浏览器等国产浏览器同样具备支持HTML5的能力。\n\n * 后端\n   \n   tomcat 接入了websocket，并支持jsr356规范。可以通过war包的方式或者springboot项目的形式去集成websocket。\n\n\n# JSR356\n\nJSR356\nJSR356 是一种java语言的websocket协议实现规范。\n典型的如tomcat遵循了JSR356协议。\n\n\n# 思考\n\n当浏览器不支持websocket时，如何处理\n点对点消息如何主动发送\n广播消息如何主动发送\n分布式如何处理上述问题\n如何进行鉴权",normalizedContent:"# websocket--3.1.介绍\n\nwebsocket 协议rfc 6455提供了一种标准化方法，通过单个 tcp 连接在客户端和服务器之间建立全双工、双向通信通道。它是与 http 不同的 tcp 协议，但设计为通过 http 工作，使用端口 80 和 443，并允许重复使用现有的防火墙规则。\n\nwebsocket 交互从 http 请求开始，该请求使用 httpupgrade标头进行升级，或者在本例中切换到 websocket 协议。下面的例子展示了这样的交互：\n\n> get /spring-websocket-portfolio/portfolio http/1.1\n> host: localhost:8080\n> upgrade: websocket ①\n> connection: upgrade ②\n> sec-websocket-key: uc9l9tmkwgbhfd2qnfhltg==\n> sec-websocket-protocol: v10.stomp, v11.stomp\n> sec-websocket-version: 13\n> origin: http://localhost:8080\n> \n> \n> ①标upgrade头。\n> \n> ②使用upgrade连接。\n> \n> 支持 websocket 的服务器返回类似于以下内容的输出，而不是通常的 200 状态代码：\n> \n> http/1.1 101 switching protocols ①\n> upgrade: websocket\n> connection: upgrade\n> sec-websocket-accept: 1qvdfyhu9hpol4jyynxf623gzn0=\n> sec-websocket-protocol: v10.stomp\n> \n> \n> ①协议切换\n\n成功握手后，http 升级请求底层的 tcp 套接字保持打开状态，以便客户端和服务器继续发送和接收消息。\n\n请注意，如果 websocket 服务器在 web 服务器（例如 nginx）后面运行，您可能需要将其配置为将 websocket 升级请求传递到 websocket 服务器。同样，如果应用程序在云环境中运行，请检查云提供商与 websocket 支持相关的说明。\n\n\n# http 与 websocket\n\n尽管 websocket 被设计为与 http 兼容并以 http 请求启动，但重要的是要了解这两种协议会导致非常不同的体系结构和应用程序编程模型。\n\n在 http 和 rest 中，应用程序被建模为许多 url。为了与应用程序交互，客户端以请求-响应方式访问这些 url。服务器根据 http url、方法和标头将请求路由到适当的处理程序。\n\n相比之下，在 websocket 中，初始连接通常只有一个 url。随后，所有应用程序消息都在同一 tcp 连接上流动。这指向完全不同的异步、事件驱动的消息传递架构。\n\nwebsocket 也是一种低级传输协议，与 http 不同，它不对消息内容规定任何语义。这意味着除非客户端和服务器就消息语义达成一致，否则无法路由或处理消息。\n\nsec-websocket-protocolwebsocket 客户端和服务器可以通过http 握手请求上的标头协商使用更高级别的消息传递协议（例如 stomp） 。如果没有，他们需要制定自己的惯例。\n\n\n# websocket诞生\n\nhttp通信的痛点\n\n * 单向通信\n   \n   http的连接是单向的，即客户端可以给服务端主动发送消息，服务端做起响应。但是服务端无法主动向客户端发送消息。\n\n * 多次建立tcp连接\n   \n   另外http在每次客户端和服务端的交互中需要在基于tcp的基础上进行握手和挥手的环节，必然会造成额外资源的开销。\n\n历史解决方案\n\n * http长链接解决多次tcp连接问题\n   \n   在http1.1中，出现了http长连接，其特点是保持连接特性，当一次http交互完后该tcp通道并不会关闭，而是会保持一段时间(在不同服务器上时间不一样，可以设置)，如果在这段时间内再次发起了http请求就可以直接复用，而不用重新进行握手，从而减少了资源浪费。目前http1.1中，都是默认使用长连接，在请求头中加上\n   connection：keep-alive\n   长连接默认保持连接有效时间是2h\n\n * 轮询解决单向通信问题\n   \n   由客户端主动每间断一些时间便向服务端发起请求，询问服务端是否有消息进行同步。从而在一定的时间容错范围内，让服务端的消息同步给客户端。\n\n * 阻塞式响应解决单向通信问题\n   \n   客户端主动发起请求，服务端收到请求后如果没有响应消息，则进行阻塞，知道服务端有需要响应的信息之后，返回给客户端。然后客户端收到响应之后再次发送消息给服务端进行阻塞，如此反复。\n\n * websocket方案\n   \n   websocket是一种全双工通信的解决方案，即客户端和服务端均可以主动发送消息。\n\n实现原理：客户端和服务器之间维持一个 tcp/ip 长连接，全双工通道。\n\n\n# websocket建立连接过程\n\n\n# websocket协议分析\n\nrfc6455 https://www.rfc-editor.org/rfc/rfc6455.txt rfc6455中文版\nws协议分析\n\nrfc6455中定义了webscoket基于tcp以及http的握手、挥手以及协议帧信息\n\n * 协议帧\n\nhttps://www.rfc-editor.org/rfc/rfc6455.txt\n\n fin:  1 bit\n    指示这是消息中的最后一个片段。第一个片段也可以是最终片段。\n      \n  rsv1, rsv2, rsv3:  1 bit each\n  \t必须为0，除非协商了定义含义的扩展对于非零值。如果接收到非零值，并且协商的扩展定义了这样一个非零的含义值，\n  \t则接收端点必须向websocket发送must _fail）连接_。\n\n\nopcode:  4 bits 指定数据包类型\n\t定义“有效载荷数据”的解释。如果接收到未知操作码，则接收端点必须向websocket连接_。定义了以下值。\n\n*  %x0 表示连续帧\n*  %x1 表示文本帧\n*  %x2 二进制\n*  %x3-7 为其他非控制帧保留\n*  %x8 关闭连接信号\n*  %x9 ping\n*  %xa pong\n*  %xb-f 为进一步的控制帧保留\n\n\npayload length:  7 bits, 7+16 bits, or 7+64 bits\n\n有效载荷长度：7位、7+16位或7+64位\n以字节为单位：如果0-125，则为有效载荷长度。如果是126，则以下2个字节被解释为6位无符号整数是有效载荷长度。\n如果127后面的8个字节被解释为64位无符号整数（最高有效位必须是0）是有效载荷长度。\n多字节长度量以网络字节顺序表示。请注意\n\n\n> 握手\n\n * 客户端\n   \n   get /chat http/1.1\n   host: server.example.com\n   upgrade: websocket\n   connection: upgrade\n   sec-websocket-key: dghlihnhbxbszsbub25jzq==\n   origin: http://example.com\n   sec-websocket-protocol: websocket\n   sec-websocket-version: 13\n   在http的基础上进行升级（upgrade），升级成websocket协议，websocket协议的版本是13。\n   sec-websocket-key 此参数为客户端传递的密钥，会由此生成服务端产生的密钥，并由客户端判断是否进行connection。\n\n * 服务端\n   \n   http/1.1 101 switching protocols\n   upgrade: websocket\n   connection: upgrade\n   sec-websocket-accept: s3pplmbitxaq9kygzzhzrbk+xoo=\n   sec-websocket-protocol: websocket\n\nhttp状态码响应为101 代表websocket协议升级成功。\nsec-websocket-accept：表示服务器是否接收这个连接，如果有这个字段，这个字段的值必须为客户端提供的|sec-websocket-key|字段的值与预先定义好的guid值进行哈希，在进行base64编码。任何其他的值都表明服务器没有接受客户端发起的请求。\n\n> 挥手\n\n挥手过程要比打开过程简单的多。 任何一端都可以发送一个close帧来开始挥手过程，close帧可能带有部分数据（比如描述关闭的原因以及状态码）。任何一端收到一个close帧，如果之前没有回复过的话，需要发送close帧。主动关闭的一端在收到对端返回的响应后，在确定没有数据需要继续接收之后，开始关闭底层连接（shutdown）。\n\n\n# websocket支持\n\n * 前端\n   \n   websocket基础需要依赖于html5。之前的版本并没有对websocket进行支持。\n   目前，支持html5的浏览器包括firefox（火狐浏览器）、ie9及其更高版本、chrome（谷歌浏览器）、safari、opera等；国内的傲游浏览器（maxthon）、以及基于ie或chromium（chrome的工程版或称实验版）所推出的360浏览器、搜狗浏览器、qq浏览器、猎豹浏览器等国产浏览器同样具备支持html5的能力。\n\n * 后端\n   \n   tomcat 接入了websocket，并支持jsr356规范。可以通过war包的方式或者springboot项目的形式去集成websocket。\n\n\n# jsr356\n\njsr356\njsr356 是一种java语言的websocket协议实现规范。\n典型的如tomcat遵循了jsr356协议。\n\n\n# 思考\n\n当浏览器不支持websocket时，如何处理\n点对点消息如何主动发送\n广播消息如何主动发送\n分布式如何处理上述问题\n如何进行鉴权",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"SSE--1.1.入门案例01",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/SSE--1.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",relativePath:"zs-tool-框架/消息推送/SSE--1.1.入门案例01.md",key:"v-64bc62a6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/SSE--1.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",headers:[{level:2,title:"SSE通讯",slug:"sse通讯",normalizedTitle:"sse通讯",charIndex:22},{level:3,title:"工程结构",slug:"工程结构",normalizedTitle:"工程结构",charIndex:34},{level:3,title:"前端核心实现",slug:"前端核心实现",normalizedTitle:"前端核心实现",charIndex:338},{level:3,title:"SSE案例核心代码",slug:"sse案例核心代码",normalizedTitle:"sse案例核心代码",charIndex:674},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:1490},{level:3,title:"后端核心实现",slug:"后端核心实现",normalizedTitle:"后端核心实现",charIndex:4819},{level:3,title:"SSE案例核心代码",slug:"sse案例核心代码-2",normalizedTitle:"sse案例核心代码",charIndex:674},{level:3,title:"完整代码",slug:"完整代码-2",normalizedTitle:"完整代码",charIndex:1490},{level:2,title:"消息监听",slug:"消息监听",normalizedTitle:"消息监听",charIndex:8743},{level:3,title:"前端核心",slug:"前端核心",normalizedTitle:"前端核心",charIndex:338},{level:3,title:"前端完整代码",slug:"前端完整代码",normalizedTitle:"前端完整代码",charIndex:9289},{level:3,title:"后端核心",slug:"后端核心",normalizedTitle:"后端核心",charIndex:4819}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"SSE通讯 工程结构 前端核心实现 SSE案例核心代码 完整代码 后端核心实现 SSE案例核心代码 完整代码 消息监听 前端核心 前端完整代码 后端核心",content:'# SSE--1.1.入门案例01\n\n\n# SSE通讯\n\n\n\n\n# 工程结构\n\n.\n├── pom.xml\n└── src\n    └── main\n        ├── java\n        │   └── com\n        │       └── zs\n        │           └── sse\n        │               ├── MyApplication.java\n        │               └── SseController.java\n        └── resources\n            └── static\n                └── index.html\n\n\n\n# 前端核心实现\n\n//创建SSE对象连接\nconst evtSource = new EventSource(openurl) ;\n\n//监听连接事件\nevtSource.onmessage = (event) => {\n    ui.addElementToUI(`接收到消息: ${event.data}`)\n};\nevtSource.onopen = (event) => {\n    console.log(\'建立连接...\')\n};\nevtSource.onerror = (event) => {\n    console.error("发生错误：", event) ;\n};\n\n//关闭连接\nui.uiData.evtSource.close() ;\n\n\n\n# SSE案例核心代码\n\n//开启SSE\nui.doms.openSSE.addEventListener(\'click\', function () {\n    if (ui.uiData.evtSource) {\n        return\n    }\n    let openurl = `/sse/events/${Date.now()}`\n    const evtSource = new EventSource(openurl) ;\n    ui.addElementToUI(`发起连接：${evtSource.url}`)\n    ui.uiData.evtSource = evtSource;\n    evtSource.onmessage = (event) => {\n        ui.addElementToUI(`接收到消息: ${event.data}`)\n    };\n    evtSource.onopen = (event) => {\n        console.log(\'建立连接...\')\n    };\n    evtSource.onerror = (event) => {\n        console.error("发生错误：", event) ;\n    };\n});\n\n//关闭SSE\nui.doms.closeSSE.addEventListener(\'click\', function() {\n    if (!ui.uiData.evtSource) {\n        return\n    }\n    ui.addElementToUI(`关闭连接: ${ui.uiData.evtSource.url}`)\n    ui.uiData.evtSource.close() ;\n    ui.uiData.evtSource = void 0;\n})\n\n\n\n# 完整代码\n\n<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="UTF-8">\n    \x3c!-- 使用Edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>SSE</title>\n</head>\n<body>\n<button class="open-sse-button" type="button">开启SSE连接</button>\n<button class="close-sse-button"type="button">关闭SSE连接</button>\n<button class="send-sse-button"type="button">发送数据</button>\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class UIData {\n        constructor() {\n            this.evtSource = void 0;\n        }\n    }\n    class UI {\n        constructor() {\n            this.uiData = new UIData();\n            this.doms = {\n                openSSE: document.querySelector(\'.open-sse-button\'),\n                closeSSE: document.querySelector(\'.close-sse-button\'),\n                sendSSE: document.querySelector(\'.send-sse-button\'),\n                ulList: document.querySelector(\'#list\')\n            };\n            this.listenEvent();\n        }\n\n        // 监听各种事件\n        listenEvent() {\n\n        }\n\n\n        addElementToUI(text) {\n            var html = this.doms.ulList.innerHTML;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ulList.innerHTML = html;\n        }\n    }\n    var ui = new UI();\n\n    //开启SSE\n    ui.doms.openSSE.addEventListener(\'click\', function () {\n        if (ui.uiData.evtSource) {\n            return\n        }\n        let openurl = `/sse/events/${Date.now()}`\n        const evtSource = new EventSource(openurl) ;\n        ui.addElementToUI(`发起连接：${evtSource.url}`)\n        ui.uiData.evtSource = evtSource;\n        evtSource.onmessage = (event) => {\n            ui.addElementToUI(`接收到消息: ${event.data}`)\n        };\n        evtSource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        evtSource.onerror = (event) => {\n            console.error("发生错误：", event) ;\n        };\n    });\n    //关闭SSE\n    ui.doms.closeSSE.addEventListener(\'click\', function() {\n        if (!ui.uiData.evtSource) {\n            return\n        }\n        ui.addElementToUI(`关闭连接: ${ui.uiData.evtSource.url}`)\n        ui.uiData.evtSource.close() ;\n        ui.uiData.evtSource = void 0;\n    })\n    //发送数据\n    ui.doms.sendSSE.addEventListener(\'click\', function() {\n        if (!ui.uiData.evtSource) {\n            return\n        }\n        let url = ui.uiData.evtSource.url;\n        url = url.replace(\'/events\', \'/sender\') ;\n        fetch(url, {\n            method: \'GET\', // or \'POST\', \'PUT\', etc.\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n        })\n            .then(response => {\n                if (response.ok) {\n                    //return response.json(); // 解析响应体为JSON\n                    return response.text(); // 解析响应体为文本\n                } else {\n                    throw new Error(\'Network response was not ok\');\n                }\n            })\n            .then(data => console.log(data))\n            .catch((error) => console.error(\'Error:\', error)); // promise is rejected with an error\n    })\n<\/script>\n</html>\n\n\n\n# 后端核心实现\n\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.3.12.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n\n\n\n# SSE案例核心代码\n\n@GetMapping(path = "/events/{id}", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\npublic SseEmitter createConnect(@PathVariable("id") String id) throws IOException {\n    SseEmitter emitter = new SseEmitter(0L);\n    // 每一个客户端保存到Map中\n    sse.put(id, emitter);\n    // 当发生错误的回调\n    emitter.onError(ex -> {\n        System.err.printf("userId: %s, error: %s%n", id, ex.getMessage());\n        sse.remove(id);\n    });\n    // 异步请求完成后的回调\n    emitter.onCompletion(() -> {\n        sse.remove(id);\n        System.out.printf("%s, 请求完成...");\n    });\n    // 异步请求超时回调\n    emitter.onTimeout(() -> {\n        System.err.println("超时...");\n    });\n    return emitter;\n}\n\n\n\n# 完整代码\n\npackage com.zs.sse;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@RestController\n@RequestMapping("/sse")\npublic class SseController {\n\n    // 该集合用来管理所有客户端的连接\n    private final Map<String, SseEmitter> sse = new ConcurrentHashMap<>();\n\n    // 创建连接接口，同时指定了消息类型为text/event-stream\n    @GetMapping(path = "/events/{id}", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public SseEmitter createConnect(@PathVariable("id") String id) throws IOException {\n        SseEmitter emitter = new SseEmitter(0L);\n        // 每一个客户端保存到Map中\n        sse.put(id, emitter);\n        // 当发生错误的回调\n        emitter.onError(ex -> {\n            System.err.printf("userId: %s, error: %s%n", id, ex.getMessage());\n            sse.remove(id);\n        });\n        // 异步请求完成后的回调\n        emitter.onCompletion(() -> {\n            sse.remove(id);\n            System.out.printf("%s, 请求完成...");\n        });\n        // 异步请求超时回调\n        emitter.onTimeout(() -> {\n            System.err.println("超时...");\n        });\n        return emitter;\n    }\n\n    // 该接口用来进行消息的发送\n    // 由客户端发起请求，然后根据id获取相应的SseEmitter进行消息的发送\n    @GetMapping("/sender/{id}")\n    public String sender(@PathVariable("id") String id) throws Exception {\n        SseEmitter emitter = this.sse.get(id);\n        if (emitter != null) {\n            try {\n                emitter.send("随机消息 - " + new Random().nextInt(10000000));\n            } catch (Exception e) {\n                System.err.printf("%s%n, e.getMessage()");\n            }\n\n            String[] strArr = {\n                    "我", "懒", "得", "写", "你", "谷", "搜", "到", "处", "皆", "只", "因", "你",\n                    "太", "美", "浅", "唱", "动", "人", "说", "不", "出", "我", "试", "着", "多",\n                    "看", "你", "一", "眼", "却", "发", "现", "我", "已", "沉", "溺", "于", "你",\n                    "的", "镜", "头", "里", "只", "因", "你", "太", "美", "所", "以", "我", "多",\n                    "看", "了", "一", "眼", "只", "因", "我", "太", "傻", "所", "以", "我", "放",\n                    "不", "开", "你", "的", "手", "只", "因", "你", "太", "美", "所", "以", "我",\n                    "做", "了", "个", "梦", "梦", "见", "你", "在", "微", "笑", "我", "在", "注",\n                    "视", "只", "因", "你", "太", "美", "所", "以", "我", "放", "了", "你", "的",\n                    "手", "所", "以", "我", "会", "微", "笑", "因", "为", "你", "太", "美", "end"\n            };\n            for (int i = 0; i < strArr.length; i++) {\n                emitter.send(strArr[i]);\n                Thread.sleep(500);\n            }\n        }\n        return "success";\n    }\n}\n\n\n\n# 消息监听\n\n**注意：*默认是“message”事件，因为它可以捕获没有 event 字段的事件， * 以及具有特定类型 event：message 的事件。 它不会触发任何其他类型的事件。\n\n\n\n\n# 前端核心\n\n// 监听SSE消息\nui.doms.listenSSE.addEventListener(\'click\', function () {\n    if (!ui.uiData.evtSource) {\n        return\n    }\n    // 监听指定事件类型消息\n    ui.uiData.evtSource.addEventListener("chat", ui.addElementToUIFunc);\n})\n// 关闭监听\nui.doms.closeListen.addEventListener(\'click\', (event) => {\n    if (!ui.uiData.evtSource) {\n        return\n    }\n    // 监听指定事件类型消息\n    ui.uiData.evtSource.removeEventListener("chat", ui.addElementToUIFunc);\n})\n\n\n\n# 前端完整代码\n\n<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="UTF-8">\n    \x3c!-- 使用Edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>SSE</title>\n</head>\n<body>\n<button class="open-sse-button" type="button">开启SSE连接</button>\n<button class="close-sse-button" type="button">关闭SSE连接</button>\n<button class="send-sse-button" type="button">发送数据</button>\n<button class="listen-sse-button" type="button">监听SSE</button>\n<button class="close-listen-button" type="button">关闭监听</button>\n<button class="send-listen-button" type="button">发送SSE监听数据</button>\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class UIData {\n        constructor() {\n            this.evtSource = void 0;\n        }\n    }\n\n    class UI {\n        constructor() {\n            this.uiData = new UIData();\n            this.doms = {\n                openSSE: document.querySelector(\'.open-sse-button\'),\n                closeSSE: document.querySelector(\'.close-sse-button\'),\n                listenSSE: document.querySelector(\'.listen-sse-button\'),\n                closeListen: document.querySelector(\'.close-listen-button\'),\n                sendSSE: document.querySelector(\'.send-sse-button\'),\n                sendListen: document.querySelector(\'.send-listen-button\'),\n                ulList: document.querySelector(\'#list\')\n            };\n            this.listenEvent();\n        }\n\n        // 监听各种事件\n        listenEvent() {\n\n        }\n\n\n        addElementToUI(text) {\n            var html = this.doms.ulList.innerHTML;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ulList.innerHTML = html;\n        }\n        addElementToUIFunc(event) {\n            var html = ui.doms.ulList.innerHTML;\n            html += `\n            <li>\n                ${event.data}\n            </li>\n            `\n            ui.doms.ulList.innerHTML = html;\n        }\n    }\n\n    var ui = new UI();\n\n    //开启SSE\n    ui.doms.openSSE.addEventListener(\'click\', function () {\n        if (ui.uiData.evtSource) {\n            return\n        }\n        let openurl = `/sse/events/${Date.now()}`\n        const evtSource = new EventSource(openurl);\n        ui.addElementToUI(`发起连接：${evtSource.url}`)\n        ui.uiData.evtSource = evtSource;\n        evtSource.onmessage = (event) => {\n            ui.addElementToUI(`接收到消息: ${event.data}`)\n        };\n        evtSource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        evtSource.onerror = (event) => {\n            console.error("发生错误：", event);\n        };\n    });\n    //关闭SSE\n    ui.doms.closeSSE.addEventListener(\'click\', function () {\n        if (!ui.uiData.evtSource) {\n            return\n        }\n        ui.addElementToUI(`关闭连接: ${ui.uiData.evtSource.url}`)\n        ui.uiData.evtSource.close();\n        ui.uiData.evtSource = void 0;\n    })\n    //发送数据\n    ui.doms.sendSSE.addEventListener(\'click\', function () {\n        if (!ui.uiData.evtSource) {\n            return\n        }\n        let url = ui.uiData.evtSource.url;\n        url = url.replace(\'/events\', \'/sender\');\n        fetch(url, {\n            method: \'GET\', // or \'POST\', \'PUT\', etc.\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n        })\n            .then(response => {\n                if (response.ok) {\n                    //return response.json(); // 解析响应体为JSON\n                    return response.text(); // 解析响应体为文本\n                } else {\n                    throw new Error(\'Network response was not ok\');\n                }\n            })\n            .then(data => console.log(data))\n            .catch((error) => console.error(\'Error:\', error)); // promise is rejected with an error\n    })\n\n    // 监听SSE消息\n    ui.doms.listenSSE.addEventListener(\'click\', function () {\n        if (!ui.uiData.evtSource) {\n            return\n        }\n        // 监听指定事件类型消息\n        ui.uiData.evtSource.addEventListener("chat", ui.addElementToUIFunc);\n    })\n    // 关闭监听\n    ui.doms.closeListen.addEventListener(\'click\', (event) => {\n        if (!ui.uiData.evtSource) {\n            return\n        }\n        // 监听指定事件类型消息\n        ui.uiData.evtSource.removeEventListener("chat", ui.addElementToUIFunc);\n    })\n    //发送数据\n    ui.doms.sendListen.addEventListener(\'click\', function () {\n        if (!ui.uiData.evtSource) {\n            return\n        }\n        let url = ui.uiData.evtSource.url;\n        url = url.replace(\'/events\', \'/listen\');\n        fetch(url, {\n            method: \'GET\', // or \'POST\', \'PUT\', etc.\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n        })\n            .then(response => {\n                if (response.ok) {\n                    //return response.json(); // 解析响应体为JSON\n                    return response.text(); // 解析响应体为文本\n                } else {\n                    throw new Error(\'Network response was not ok\');\n                }\n            })\n            .then(data => console.log(data))\n            .catch((error) => console.error(\'Error:\', error)); // promise is rejected with an error\n    })\n\n<\/script>\n</html>\n\n\n\n\n# 后端核心\n\n@GetMapping("/listen/{id}")\npublic String listen(@PathVariable("id") String id) throws Exception {\n    SseEmitter emitter = this.sse.get(id) ;\n    if (emitter != null) {\n        SseEmitter.SseEventBuilder builder = SseEmitter.event() ;\n        // 指定事件类型\n        builder.name("chat") ;\n        String msg = "随机消息 - " + new Random().nextInt(10000000);\n        builder.data(msg) ;\n        try {\n            emitter.send(builder) ;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    return "success" ;\n}\n',normalizedContent:'# sse--1.1.入门案例01\n\n\n# sse通讯\n\n\n\n\n# 工程结构\n\n.\n├── pom.xml\n└── src\n    └── main\n        ├── java\n        │   └── com\n        │       └── zs\n        │           └── sse\n        │               ├── myapplication.java\n        │               └── ssecontroller.java\n        └── resources\n            └── static\n                └── index.html\n\n\n\n# 前端核心实现\n\n//创建sse对象连接\nconst evtsource = new eventsource(openurl) ;\n\n//监听连接事件\nevtsource.onmessage = (event) => {\n    ui.addelementtoui(`接收到消息: ${event.data}`)\n};\nevtsource.onopen = (event) => {\n    console.log(\'建立连接...\')\n};\nevtsource.onerror = (event) => {\n    console.error("发生错误：", event) ;\n};\n\n//关闭连接\nui.uidata.evtsource.close() ;\n\n\n\n# sse案例核心代码\n\n//开启sse\nui.doms.opensse.addeventlistener(\'click\', function () {\n    if (ui.uidata.evtsource) {\n        return\n    }\n    let openurl = `/sse/events/${date.now()}`\n    const evtsource = new eventsource(openurl) ;\n    ui.addelementtoui(`发起连接：${evtsource.url}`)\n    ui.uidata.evtsource = evtsource;\n    evtsource.onmessage = (event) => {\n        ui.addelementtoui(`接收到消息: ${event.data}`)\n    };\n    evtsource.onopen = (event) => {\n        console.log(\'建立连接...\')\n    };\n    evtsource.onerror = (event) => {\n        console.error("发生错误：", event) ;\n    };\n});\n\n//关闭sse\nui.doms.closesse.addeventlistener(\'click\', function() {\n    if (!ui.uidata.evtsource) {\n        return\n    }\n    ui.addelementtoui(`关闭连接: ${ui.uidata.evtsource.url}`)\n    ui.uidata.evtsource.close() ;\n    ui.uidata.evtsource = void 0;\n})\n\n\n\n# 完整代码\n\n<!doctype html>\n<html lang="zh-cn">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="utf-8">\n    \x3c!-- 使用edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="x-ua-compatible" content="ie=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>sse</title>\n</head>\n<body>\n<button class="open-sse-button" type="button">开启sse连接</button>\n<button class="close-sse-button"type="button">关闭sse连接</button>\n<button class="send-sse-button"type="button">发送数据</button>\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class uidata {\n        constructor() {\n            this.evtsource = void 0;\n        }\n    }\n    class ui {\n        constructor() {\n            this.uidata = new uidata();\n            this.doms = {\n                opensse: document.queryselector(\'.open-sse-button\'),\n                closesse: document.queryselector(\'.close-sse-button\'),\n                sendsse: document.queryselector(\'.send-sse-button\'),\n                ullist: document.queryselector(\'#list\')\n            };\n            this.listenevent();\n        }\n\n        // 监听各种事件\n        listenevent() {\n\n        }\n\n\n        addelementtoui(text) {\n            var html = this.doms.ullist.innerhtml;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ullist.innerhtml = html;\n        }\n    }\n    var ui = new ui();\n\n    //开启sse\n    ui.doms.opensse.addeventlistener(\'click\', function () {\n        if (ui.uidata.evtsource) {\n            return\n        }\n        let openurl = `/sse/events/${date.now()}`\n        const evtsource = new eventsource(openurl) ;\n        ui.addelementtoui(`发起连接：${evtsource.url}`)\n        ui.uidata.evtsource = evtsource;\n        evtsource.onmessage = (event) => {\n            ui.addelementtoui(`接收到消息: ${event.data}`)\n        };\n        evtsource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        evtsource.onerror = (event) => {\n            console.error("发生错误：", event) ;\n        };\n    });\n    //关闭sse\n    ui.doms.closesse.addeventlistener(\'click\', function() {\n        if (!ui.uidata.evtsource) {\n            return\n        }\n        ui.addelementtoui(`关闭连接: ${ui.uidata.evtsource.url}`)\n        ui.uidata.evtsource.close() ;\n        ui.uidata.evtsource = void 0;\n    })\n    //发送数据\n    ui.doms.sendsse.addeventlistener(\'click\', function() {\n        if (!ui.uidata.evtsource) {\n            return\n        }\n        let url = ui.uidata.evtsource.url;\n        url = url.replace(\'/events\', \'/sender\') ;\n        fetch(url, {\n            method: \'get\', // or \'post\', \'put\', etc.\n            headers: {\n                \'content-type\': \'application/json\',\n            },\n        })\n            .then(response => {\n                if (response.ok) {\n                    //return response.json(); // 解析响应体为json\n                    return response.text(); // 解析响应体为文本\n                } else {\n                    throw new error(\'network response was not ok\');\n                }\n            })\n            .then(data => console.log(data))\n            .catch((error) => console.error(\'error:\', error)); // promise is rejected with an error\n    })\n<\/script>\n</html>\n\n\n\n# 后端核心实现\n\n<parent>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-parent</artifactid>\n    <version>2.3.12.release</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n</dependencies>\n\n\n\n# sse案例核心代码\n\n@getmapping(path = "/events/{id}", produces = mediatype.text_event_stream_value)\npublic sseemitter createconnect(@pathvariable("id") string id) throws ioexception {\n    sseemitter emitter = new sseemitter(0l);\n    // 每一个客户端保存到map中\n    sse.put(id, emitter);\n    // 当发生错误的回调\n    emitter.onerror(ex -> {\n        system.err.printf("userid: %s, error: %s%n", id, ex.getmessage());\n        sse.remove(id);\n    });\n    // 异步请求完成后的回调\n    emitter.oncompletion(() -> {\n        sse.remove(id);\n        system.out.printf("%s, 请求完成...");\n    });\n    // 异步请求超时回调\n    emitter.ontimeout(() -> {\n        system.err.println("超时...");\n    });\n    return emitter;\n}\n\n\n\n# 完整代码\n\npackage com.zs.sse;\n\nimport org.springframework.http.mediatype;\nimport org.springframework.web.bind.annotation.getmapping;\nimport org.springframework.web.bind.annotation.pathvariable;\nimport org.springframework.web.bind.annotation.requestmapping;\nimport org.springframework.web.bind.annotation.restcontroller;\nimport org.springframework.web.servlet.mvc.method.annotation.sseemitter;\n\nimport java.io.ioexception;\nimport java.util.map;\nimport java.util.random;\nimport java.util.concurrent.concurrenthashmap;\n\n@restcontroller\n@requestmapping("/sse")\npublic class ssecontroller {\n\n    // 该集合用来管理所有客户端的连接\n    private final map<string, sseemitter> sse = new concurrenthashmap<>();\n\n    // 创建连接接口，同时指定了消息类型为text/event-stream\n    @getmapping(path = "/events/{id}", produces = mediatype.text_event_stream_value)\n    public sseemitter createconnect(@pathvariable("id") string id) throws ioexception {\n        sseemitter emitter = new sseemitter(0l);\n        // 每一个客户端保存到map中\n        sse.put(id, emitter);\n        // 当发生错误的回调\n        emitter.onerror(ex -> {\n            system.err.printf("userid: %s, error: %s%n", id, ex.getmessage());\n            sse.remove(id);\n        });\n        // 异步请求完成后的回调\n        emitter.oncompletion(() -> {\n            sse.remove(id);\n            system.out.printf("%s, 请求完成...");\n        });\n        // 异步请求超时回调\n        emitter.ontimeout(() -> {\n            system.err.println("超时...");\n        });\n        return emitter;\n    }\n\n    // 该接口用来进行消息的发送\n    // 由客户端发起请求，然后根据id获取相应的sseemitter进行消息的发送\n    @getmapping("/sender/{id}")\n    public string sender(@pathvariable("id") string id) throws exception {\n        sseemitter emitter = this.sse.get(id);\n        if (emitter != null) {\n            try {\n                emitter.send("随机消息 - " + new random().nextint(10000000));\n            } catch (exception e) {\n                system.err.printf("%s%n, e.getmessage()");\n            }\n\n            string[] strarr = {\n                    "我", "懒", "得", "写", "你", "谷", "搜", "到", "处", "皆", "只", "因", "你",\n                    "太", "美", "浅", "唱", "动", "人", "说", "不", "出", "我", "试", "着", "多",\n                    "看", "你", "一", "眼", "却", "发", "现", "我", "已", "沉", "溺", "于", "你",\n                    "的", "镜", "头", "里", "只", "因", "你", "太", "美", "所", "以", "我", "多",\n                    "看", "了", "一", "眼", "只", "因", "我", "太", "傻", "所", "以", "我", "放",\n                    "不", "开", "你", "的", "手", "只", "因", "你", "太", "美", "所", "以", "我",\n                    "做", "了", "个", "梦", "梦", "见", "你", "在", "微", "笑", "我", "在", "注",\n                    "视", "只", "因", "你", "太", "美", "所", "以", "我", "放", "了", "你", "的",\n                    "手", "所", "以", "我", "会", "微", "笑", "因", "为", "你", "太", "美", "end"\n            };\n            for (int i = 0; i < strarr.length; i++) {\n                emitter.send(strarr[i]);\n                thread.sleep(500);\n            }\n        }\n        return "success";\n    }\n}\n\n\n\n# 消息监听\n\n**注意：*默认是“message”事件，因为它可以捕获没有 event 字段的事件， * 以及具有特定类型 event：message 的事件。 它不会触发任何其他类型的事件。\n\n\n\n\n# 前端核心\n\n// 监听sse消息\nui.doms.listensse.addeventlistener(\'click\', function () {\n    if (!ui.uidata.evtsource) {\n        return\n    }\n    // 监听指定事件类型消息\n    ui.uidata.evtsource.addeventlistener("chat", ui.addelementtouifunc);\n})\n// 关闭监听\nui.doms.closelisten.addeventlistener(\'click\', (event) => {\n    if (!ui.uidata.evtsource) {\n        return\n    }\n    // 监听指定事件类型消息\n    ui.uidata.evtsource.removeeventlistener("chat", ui.addelementtouifunc);\n})\n\n\n\n# 前端完整代码\n\n<!doctype html>\n<html lang="zh-cn">\n<head>\n    \x3c!-- 指定字符集 --\x3e\n    <meta charset="utf-8">\n    \x3c!-- 使用edge最新的浏览器的渲染方式 --\x3e\n    <meta http-equiv="x-ua-compatible" content="ie=edge">\n    \x3c!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。\n    width: 默认宽度与设备的宽度相同\n    initial-scale: 初始的缩放比，为1:1 --\x3e\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>sse</title>\n</head>\n<body>\n<button class="open-sse-button" type="button">开启sse连接</button>\n<button class="close-sse-button" type="button">关闭sse连接</button>\n<button class="send-sse-button" type="button">发送数据</button>\n<button class="listen-sse-button" type="button">监听sse</button>\n<button class="close-listen-button" type="button">关闭监听</button>\n<button class="send-listen-button" type="button">发送sse监听数据</button>\n<hr style="margin: 2px; padding: 0px 0px;"/>\n<ul id="list"></ul>\n</body>\n<script>\n    class uidata {\n        constructor() {\n            this.evtsource = void 0;\n        }\n    }\n\n    class ui {\n        constructor() {\n            this.uidata = new uidata();\n            this.doms = {\n                opensse: document.queryselector(\'.open-sse-button\'),\n                closesse: document.queryselector(\'.close-sse-button\'),\n                listensse: document.queryselector(\'.listen-sse-button\'),\n                closelisten: document.queryselector(\'.close-listen-button\'),\n                sendsse: document.queryselector(\'.send-sse-button\'),\n                sendlisten: document.queryselector(\'.send-listen-button\'),\n                ullist: document.queryselector(\'#list\')\n            };\n            this.listenevent();\n        }\n\n        // 监听各种事件\n        listenevent() {\n\n        }\n\n\n        addelementtoui(text) {\n            var html = this.doms.ullist.innerhtml;\n            html += `\n            <li>\n                ${text}\n            </li>\n            `\n            this.doms.ullist.innerhtml = html;\n        }\n        addelementtouifunc(event) {\n            var html = ui.doms.ullist.innerhtml;\n            html += `\n            <li>\n                ${event.data}\n            </li>\n            `\n            ui.doms.ullist.innerhtml = html;\n        }\n    }\n\n    var ui = new ui();\n\n    //开启sse\n    ui.doms.opensse.addeventlistener(\'click\', function () {\n        if (ui.uidata.evtsource) {\n            return\n        }\n        let openurl = `/sse/events/${date.now()}`\n        const evtsource = new eventsource(openurl);\n        ui.addelementtoui(`发起连接：${evtsource.url}`)\n        ui.uidata.evtsource = evtsource;\n        evtsource.onmessage = (event) => {\n            ui.addelementtoui(`接收到消息: ${event.data}`)\n        };\n        evtsource.onopen = (event) => {\n            console.log(\'建立连接...\')\n        };\n        evtsource.onerror = (event) => {\n            console.error("发生错误：", event);\n        };\n    });\n    //关闭sse\n    ui.doms.closesse.addeventlistener(\'click\', function () {\n        if (!ui.uidata.evtsource) {\n            return\n        }\n        ui.addelementtoui(`关闭连接: ${ui.uidata.evtsource.url}`)\n        ui.uidata.evtsource.close();\n        ui.uidata.evtsource = void 0;\n    })\n    //发送数据\n    ui.doms.sendsse.addeventlistener(\'click\', function () {\n        if (!ui.uidata.evtsource) {\n            return\n        }\n        let url = ui.uidata.evtsource.url;\n        url = url.replace(\'/events\', \'/sender\');\n        fetch(url, {\n            method: \'get\', // or \'post\', \'put\', etc.\n            headers: {\n                \'content-type\': \'application/json\',\n            },\n        })\n            .then(response => {\n                if (response.ok) {\n                    //return response.json(); // 解析响应体为json\n                    return response.text(); // 解析响应体为文本\n                } else {\n                    throw new error(\'network response was not ok\');\n                }\n            })\n            .then(data => console.log(data))\n            .catch((error) => console.error(\'error:\', error)); // promise is rejected with an error\n    })\n\n    // 监听sse消息\n    ui.doms.listensse.addeventlistener(\'click\', function () {\n        if (!ui.uidata.evtsource) {\n            return\n        }\n        // 监听指定事件类型消息\n        ui.uidata.evtsource.addeventlistener("chat", ui.addelementtouifunc);\n    })\n    // 关闭监听\n    ui.doms.closelisten.addeventlistener(\'click\', (event) => {\n        if (!ui.uidata.evtsource) {\n            return\n        }\n        // 监听指定事件类型消息\n        ui.uidata.evtsource.removeeventlistener("chat", ui.addelementtouifunc);\n    })\n    //发送数据\n    ui.doms.sendlisten.addeventlistener(\'click\', function () {\n        if (!ui.uidata.evtsource) {\n            return\n        }\n        let url = ui.uidata.evtsource.url;\n        url = url.replace(\'/events\', \'/listen\');\n        fetch(url, {\n            method: \'get\', // or \'post\', \'put\', etc.\n            headers: {\n                \'content-type\': \'application/json\',\n            },\n        })\n            .then(response => {\n                if (response.ok) {\n                    //return response.json(); // 解析响应体为json\n                    return response.text(); // 解析响应体为文本\n                } else {\n                    throw new error(\'network response was not ok\');\n                }\n            })\n            .then(data => console.log(data))\n            .catch((error) => console.error(\'error:\', error)); // promise is rejected with an error\n    })\n\n<\/script>\n</html>\n\n\n\n\n# 后端核心\n\n@getmapping("/listen/{id}")\npublic string listen(@pathvariable("id") string id) throws exception {\n    sseemitter emitter = this.sse.get(id) ;\n    if (emitter != null) {\n        sseemitter.sseeventbuilder builder = sseemitter.event() ;\n        // 指定事件类型\n        builder.name("chat") ;\n        string msg = "随机消息 - " + new random().nextint(10000000);\n        builder.data(msg) ;\n        try {\n            emitter.send(builder) ;\n        } catch (exception e) {\n            e.printstacktrace();\n        }\n    }\n    return "success" ;\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706153719e3},{title:"websocket--3.2.springboot集成--注解方式",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F.html",relativePath:"zs-tool-框架/消息推送/websocket--3.2.springboot集成--注解方式.md",key:"v-2f7dcd14",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F.html",lastUpdated:"2024年1月30日星期二晚上6点46分",lastUpdatedTimestamp:1706611609e3,headersStr:null,content:'# websocket--3.2.springboot集成--注解方式\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.config.annotation.EnableWebSocket;\nimport org.springframework.web.socket.server.standard.ServerEndpointExporter;\n\n\n@Configuration\n@EnableWebSocket\npublic class WebSocketConfig {\n\n    @Bean\n    public ServerEndpointExporter serverEndpoint() {\n        return new ServerEndpointExporter();\n    }\n}\n\n\nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n@ServerEndpoint("/myWs")\n@Component\npublic class WsServerEndpoint {\n\n    /**\n     * 连接成功\n     *\n     * @param session\n     */\n    @OnOpen\n    public void onOpen(Session session) {\n        System.out.println("连接成功");\n    }\n\n    /**\n     * 连接关闭\n     *\n     * @param session\n     */\n    @OnClose\n    public void onClose(Session session) {\n        System.out.println("连接关闭");\n    }\n\n    /**\n     * 接收到消息\n     *\n     * @param text\n     */\n    @OnMessage\n    public String onMsg(String text) throws IOException {\n        return "servet 发送：" + text;\n    }\n}\n\n\n@ServerEndpoint\n\n 1. 通过这个 spring boot 就可以知道你暴露出去的 ws 应用的路径，有点类似我们经常用的@RequestMapping。比如你的启动端口是8080，而这个注解的值是ws，那我们就可以通过 ws://127.0.0.1:8080/ws 来连接你的应用\n\n@OnOpen\n\n 1. 当 websocket 建立连接成功后会触发这个注解修饰的方法，注意它有一个 Session 参数\n\n@OnClose\n\n 1. 当 websocket 建立的连接断开后会触发这个注解修饰的方法，注意它有一个 Session 参数\n\n@OnMessage\n\n 1. 当客户端发送消息到服务端时，会触发这个注解修改的方法，它有一个 String 入参表明客户端传入的值\n\n@OnError\n\n 1. 当 websocket 建立连接时出现异常会触发这个注解修饰的方法，注意它有一个 Session 参数\n\n另外一点就是服务端如何发送消息给客户端，服务端发送消息必须通过上面说的 Session 类，通常是在@OnOpen 方法中，当连接成功后把 session 存入 Map 的 value，key 是与 session 对应的用户标识，当要发送的时候通过 key 获得 session 再发送，这里可以通过 session.getBasicRemote().sendText()来对客户端发送消息。\n\n获取访问端点中的参数\n\n@ServerEndpoint("/webSocket/{remoteAddr}")\n@Component\npublic class SocketHandler {\n    @OnOpen\n\tpublic void onOpen(@PathParam("remoteAddr") String remoteAddr, Session session) {\n\t\t\n\t}\n\n\n接口\n\npublic class myOwnEndpoint extends javax.websocket.Endpoint {\n   public void onOpen(Session session, EndpointConfig config) {...}\n   public void onClose(Session session, CloseReason closeReason) {...}\n   public void onError (Session session, Throwable throwable) {...}\n}\n\n// 接收消息，需要通过onOpen时注册\npublic void onOpen (Session session, EndpointConfig config) {\n   final RemoteEndpoint.Basic remote = session.getBasicRemote();\n   session.addMessageHandler (new MessageHandler.Whole<String>() {\n      public void onMessage(String text) {\n                 try {\n                     remote.sendString(text.toUpperCase());\n                 } catch (IOException ioe) {\n                     // handle send failure here\n                 }\n             }\n\n   });\n}\n\n\n发送\n\n其本质是websocket内置的消息类型。当然也可以自定义。  \n字符串  \n接收：onMessage接收消息为String即可  \n发送：session.getBasicRemote().sendText(text);  \n二进制/流  \n接收：onMessage接收消息为byte\\[\\]即可  \n发送：session.getBasicRemote().sendBinary(byteBuffer);  \nping消息  \n接收：此消息会由中间件内置实现，无需处理  \n发送：session.getBasicRemote().sendPing(byteBuffer);\n\n\n编解码\n\n@ServerEndpoint(value="/endpoint", encoders = MessageEncoder.class, decoders= MessageDecoder.class)\npublic class MyEndpoint {\n...\n}\n\n\n\n\nclass MessageEncoder implements Encoder.Text<MyJavaObject> {\n   @override\n   public String encode(MyJavaObject obj) throws EncodingException {\n      ...\n   }\n}\n\nclass MessageDecoder implements Decoder.Text<MyJavaObject> {\n   @override \n   public MyJavaObject decode (String src) throws DecodeException {\n      ...\n   }\n\n   @override \n   public boolean willDecode (String src) {\n      // return true if we want to decode this String into a MyJavaObject instance\n   }\n}\n\n\nJSR356\nRFC6455\nRFC6455中文版\nws协议分析\ntomcat特定配置\nspring整合websocket官方文档',normalizedContent:'# websocket--3.2.springboot集成--注解方式\n\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.web.socket.config.annotation.enablewebsocket;\nimport org.springframework.web.socket.server.standard.serverendpointexporter;\n\n\n@configuration\n@enablewebsocket\npublic class websocketconfig {\n\n    @bean\n    public serverendpointexporter serverendpoint() {\n        return new serverendpointexporter();\n    }\n}\n\n\nimport javax.websocket.onclose;\nimport javax.websocket.onmessage;\nimport javax.websocket.onopen;\nimport javax.websocket.session;\nimport javax.websocket.server.serverendpoint;\nimport java.io.ioexception;\nimport java.util.hashmap;\nimport java.util.map;\n\n\n@serverendpoint("/myws")\n@component\npublic class wsserverendpoint {\n\n    /**\n     * 连接成功\n     *\n     * @param session\n     */\n    @onopen\n    public void onopen(session session) {\n        system.out.println("连接成功");\n    }\n\n    /**\n     * 连接关闭\n     *\n     * @param session\n     */\n    @onclose\n    public void onclose(session session) {\n        system.out.println("连接关闭");\n    }\n\n    /**\n     * 接收到消息\n     *\n     * @param text\n     */\n    @onmessage\n    public string onmsg(string text) throws ioexception {\n        return "servet 发送：" + text;\n    }\n}\n\n\n@serverendpoint\n\n 1. 通过这个 spring boot 就可以知道你暴露出去的 ws 应用的路径，有点类似我们经常用的@requestmapping。比如你的启动端口是8080，而这个注解的值是ws，那我们就可以通过 ws://127.0.0.1:8080/ws 来连接你的应用\n\n@onopen\n\n 1. 当 websocket 建立连接成功后会触发这个注解修饰的方法，注意它有一个 session 参数\n\n@onclose\n\n 1. 当 websocket 建立的连接断开后会触发这个注解修饰的方法，注意它有一个 session 参数\n\n@onmessage\n\n 1. 当客户端发送消息到服务端时，会触发这个注解修改的方法，它有一个 string 入参表明客户端传入的值\n\n@onerror\n\n 1. 当 websocket 建立连接时出现异常会触发这个注解修饰的方法，注意它有一个 session 参数\n\n另外一点就是服务端如何发送消息给客户端，服务端发送消息必须通过上面说的 session 类，通常是在@onopen 方法中，当连接成功后把 session 存入 map 的 value，key 是与 session 对应的用户标识，当要发送的时候通过 key 获得 session 再发送，这里可以通过 session.getbasicremote().sendtext()来对客户端发送消息。\n\n获取访问端点中的参数\n\n@serverendpoint("/websocket/{remoteaddr}")\n@component\npublic class sockethandler {\n    @onopen\n\tpublic void onopen(@pathparam("remoteaddr") string remoteaddr, session session) {\n\t\t\n\t}\n\n\n接口\n\npublic class myownendpoint extends javax.websocket.endpoint {\n   public void onopen(session session, endpointconfig config) {...}\n   public void onclose(session session, closereason closereason) {...}\n   public void onerror (session session, throwable throwable) {...}\n}\n\n// 接收消息，需要通过onopen时注册\npublic void onopen (session session, endpointconfig config) {\n   final remoteendpoint.basic remote = session.getbasicremote();\n   session.addmessagehandler (new messagehandler.whole<string>() {\n      public void onmessage(string text) {\n                 try {\n                     remote.sendstring(text.touppercase());\n                 } catch (ioexception ioe) {\n                     // handle send failure here\n                 }\n             }\n\n   });\n}\n\n\n发送\n\n其本质是websocket内置的消息类型。当然也可以自定义。  \n字符串  \n接收：onmessage接收消息为string即可  \n发送：session.getbasicremote().sendtext(text);  \n二进制/流  \n接收：onmessage接收消息为byte\\[\\]即可  \n发送：session.getbasicremote().sendbinary(bytebuffer);  \nping消息  \n接收：此消息会由中间件内置实现，无需处理  \n发送：session.getbasicremote().sendping(bytebuffer);\n\n\n编解码\n\n@serverendpoint(value="/endpoint", encoders = messageencoder.class, decoders= messagedecoder.class)\npublic class myendpoint {\n...\n}\n\n\n\n\nclass messageencoder implements encoder.text<myjavaobject> {\n   @override\n   public string encode(myjavaobject obj) throws encodingexception {\n      ...\n   }\n}\n\nclass messagedecoder implements decoder.text<myjavaobject> {\n   @override \n   public myjavaobject decode (string src) throws decodeexception {\n      ...\n   }\n\n   @override \n   public boolean willdecode (string src) {\n      // return true if we want to decode this string into a myjavaobject instance\n   }\n}\n\n\njsr356\nrfc6455\nrfc6455中文版\nws协议分析\ntomcat特定配置\nspring整合websocket官方文档',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.3.stomp方式-spring官方案例",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.3.stomp%E6%96%B9%E5%BC%8F01-spring%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B.html",relativePath:"zs-tool-框架/消息推送/websocket--3.3.stomp方式01-spring官方案例.md",key:"v-20897ae6",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.3.stomp%E6%96%B9%E5%BC%8F01-spring%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B.html",headers:[{level:2,title:"前端",slug:"前端",normalizedTitle:"前端",charIndex:98},{level:2,title:"后端",slug:"后端",normalizedTitle:"后端",charIndex:4058}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"前端 后端",content:'# websocket--3.3.stomp方式-spring官方案例\n\nhttps://spring.io/guides/gs/messaging-stomp-websocket/\n\n\n\n\n# 前端\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello WebSocket</title>\n    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">\n    <link href="/main.css" rel="stylesheet">\n    <script src="https://code.jquery.com/jquery-3.1.1.min.js"><\/script>\n    <script src="https://cdn.jsdelivr.net/npm/@stomp/stompjs@7.0.0/bundles/stomp.umd.min.js"><\/script>\n    <script src="/app.js"><\/script>\n</head>\n<body>\n<noscript><h2 style="color: #ff0000">Seems your browser doesn\'t support Javascript! Websocket relies on Javascript being\n    enabled. Please enable\n    Javascript and reload this page!</h2></noscript>\n<div id="main-content" class="container">\n    <div class="row">\n        <div class="col-md-6">\n            <form class="form-inline">\n                <div class="form-group">\n                    <label for="connect">WebSocket connection:</label>\n                    <button id="connect" class="btn btn-default" type="submit">Connect</button>\n                    <button id="disconnect" class="btn btn-default" type="submit" disabled="disabled">Disconnect\n                    </button>\n                </div>\n            </form>\n        </div>\n        <div class="col-md-6">\n            <form class="form-inline">\n                <div class="form-group">\n                    <label for="name">What is your name?</label>\n                    <input type="text" id="name" class="form-control" placeholder="Your name here...">\n                </div>\n                <button id="send" class="btn btn-default" type="submit">Send</button>\n            </form>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-md-12">\n            <table id="conversation" class="table table-striped">\n                <thead>\n                <tr>\n                    <th>Greetings</th>\n                </tr>\n                </thead>\n                <tbody id="greetings">\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n</body>\n</html>\n\n\nconst stompClient = new StompJs.Client({\n    brokerURL: \'ws://localhost:8082/gs-guide-websocket\'\n});\n\nstompClient.onConnect = (frame) => {\n    setConnected(true);\n    console.log(\'Connected: \' + frame);\n    stompClient.subscribe(\'/topic/greetings\', (greeting) => {\n        showGreeting(JSON.parse(greeting.body).content);\n    });\n};\n\nstompClient.onWebSocketError = (error) => {\n    console.error(\'Error with websocket\', error);\n};\n\nstompClient.onStompError = (frame) => {\n    console.error(\'Broker reported error: \' + frame.headers[\'message\']);\n    console.error(\'Additional details: \' + frame.body);\n};\n\nfunction setConnected(connected) {\n    $("#connect").prop("disabled", connected);\n    $("#disconnect").prop("disabled", !connected);\n    if (connected) {\n        $("#conversation").show();\n    }\n    else {\n        $("#conversation").hide();\n    }\n    $("#greetings").html("");\n}\n\nfunction connect() {\n    stompClient.activate();\n}\n\nfunction disconnect() {\n    stompClient.deactivate();\n    setConnected(false);\n    console.log("Disconnected");\n}\n\nfunction sendName() {\n    stompClient.publish({\n        destination: "/app/hello",\n        body: JSON.stringify({\'name\': $("#name").val()})\n    });\n}\n\nfunction showGreeting(message) {\n    $("#greetings").append("<tr><td>" + message + "</td></tr>");\n}\n\n$(function () {\n    $("form").on(\'submit\', (e) => e.preventDefault());\n    $( "#connect" ).click(() => connect());\n    $( "#disconnect" ).click(() => disconnect());\n    $( "#send" ).click(() => sendName());\n});\n\n\n\n该 JavaScript 文件需要理解的主要部分是stompClient.onConnect和sendName函数。\n\nstompClient通过brokerURL引用 path进行初始化/gs-guide-websocket，这是我们的 websockets 服务器等待连接的地方。连接成功后，客户端订阅目的地/topic/greetings，服务器将在该目的地发布问候消息。当在该目的地收到问候语时，它将向 DOM 附加一个段落元素以显示问候语消息。\n\n该sendName()函数检索用户输入的名称，并使用 STOMP 客户端将其发送到目的地/app/hello（GreetingController.greeting()接收位置）。\n\n\n# 后端\n\n@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class,args);\n    }\n}\n\n\npackage com.zs.websocket.demo02;\n\npublic class Greeting {\n\n  private String content;\n\n  public Greeting() {\n  }\n\n  public Greeting(String content) {\n    this.content = content;\n  }\n\n  public String getContent() {\n    return content;\n  }\n\n}\n\n\npackage com.zs.websocket.demo02;\n\npublic class HelloMessage {\n\n  private String name;\n\n  public HelloMessage() {\n  }\n\n  public HelloMessage(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n}\n\n\n\npackage com.zs.websocket.demo02;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.simp.config.MessageBrokerRegistry;\nimport org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\nimport org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n  @Override\n  public void configureMessageBroker(MessageBrokerRegistry config) {\n    config.enableSimpleBroker("/topic");\n    config.setApplicationDestinationPrefixes("/app");\n  }\n\n  @Override\n  public void registerStompEndpoints(StompEndpointRegistry registry) {\n    registry.addEndpoint("/gs-guide-websocket");\n  }\n\n}\n\n\n\nWebSocketConfig注释为 ，@Configuration表明它是一个 Spring 配置类。它还带有注释@EnableWebSocketMessageBroker。顾名思义，它@EnableWebSocketMessageBroker支持由消息代理支持的 WebSocket 消息处理。\n\n该方法实现了配置消息代理的configureMessageBroker()默认方法。WebSocketMessageBrokerConfigurer它首先调用以enableSimpleBroker()启用一个简单的基于内存的消息代理，将问候消息传送回前缀为 的目的地上的客户端/topic。它还指定绑定/app到用 注释的方法的消息的前缀@MessageMapping。该前缀将用于定义所有消息映射。例如，是方法映射到句柄的/app/hello端点。GreetingController.greeting()\n\n该registerStompEndpoints()方法注册/gs-guide-websocketwebsocket 连接的端点。',normalizedContent:'# websocket--3.3.stomp方式-spring官方案例\n\nhttps://spring.io/guides/gs/messaging-stomp-websocket/\n\n\n\n\n# 前端\n\n<!doctype html>\n<html>\n<head>\n    <title>hello websocket</title>\n    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-bvyiisifek1dgmjrakycuhahrg32omucww7on3rydg4va+pmstsz/k68vbdejh4u" crossorigin="anonymous">\n    <link href="/main.css" rel="stylesheet">\n    <script src="https://code.jquery.com/jquery-3.1.1.min.js"><\/script>\n    <script src="https://cdn.jsdelivr.net/npm/@stomp/stompjs@7.0.0/bundles/stomp.umd.min.js"><\/script>\n    <script src="/app.js"><\/script>\n</head>\n<body>\n<noscript><h2 style="color: #ff0000">seems your browser doesn\'t support javascript! websocket relies on javascript being\n    enabled. please enable\n    javascript and reload this page!</h2></noscript>\n<div id="main-content" class="container">\n    <div class="row">\n        <div class="col-md-6">\n            <form class="form-inline">\n                <div class="form-group">\n                    <label for="connect">websocket connection:</label>\n                    <button id="connect" class="btn btn-default" type="submit">connect</button>\n                    <button id="disconnect" class="btn btn-default" type="submit" disabled="disabled">disconnect\n                    </button>\n                </div>\n            </form>\n        </div>\n        <div class="col-md-6">\n            <form class="form-inline">\n                <div class="form-group">\n                    <label for="name">what is your name?</label>\n                    <input type="text" id="name" class="form-control" placeholder="your name here...">\n                </div>\n                <button id="send" class="btn btn-default" type="submit">send</button>\n            </form>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-md-12">\n            <table id="conversation" class="table table-striped">\n                <thead>\n                <tr>\n                    <th>greetings</th>\n                </tr>\n                </thead>\n                <tbody id="greetings">\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n</body>\n</html>\n\n\nconst stompclient = new stompjs.client({\n    brokerurl: \'ws://localhost:8082/gs-guide-websocket\'\n});\n\nstompclient.onconnect = (frame) => {\n    setconnected(true);\n    console.log(\'connected: \' + frame);\n    stompclient.subscribe(\'/topic/greetings\', (greeting) => {\n        showgreeting(json.parse(greeting.body).content);\n    });\n};\n\nstompclient.onwebsocketerror = (error) => {\n    console.error(\'error with websocket\', error);\n};\n\nstompclient.onstomperror = (frame) => {\n    console.error(\'broker reported error: \' + frame.headers[\'message\']);\n    console.error(\'additional details: \' + frame.body);\n};\n\nfunction setconnected(connected) {\n    $("#connect").prop("disabled", connected);\n    $("#disconnect").prop("disabled", !connected);\n    if (connected) {\n        $("#conversation").show();\n    }\n    else {\n        $("#conversation").hide();\n    }\n    $("#greetings").html("");\n}\n\nfunction connect() {\n    stompclient.activate();\n}\n\nfunction disconnect() {\n    stompclient.deactivate();\n    setconnected(false);\n    console.log("disconnected");\n}\n\nfunction sendname() {\n    stompclient.publish({\n        destination: "/app/hello",\n        body: json.stringify({\'name\': $("#name").val()})\n    });\n}\n\nfunction showgreeting(message) {\n    $("#greetings").append("<tr><td>" + message + "</td></tr>");\n}\n\n$(function () {\n    $("form").on(\'submit\', (e) => e.preventdefault());\n    $( "#connect" ).click(() => connect());\n    $( "#disconnect" ).click(() => disconnect());\n    $( "#send" ).click(() => sendname());\n});\n\n\n\n该 javascript 文件需要理解的主要部分是stompclient.onconnect和sendname函数。\n\nstompclient通过brokerurl引用 path进行初始化/gs-guide-websocket，这是我们的 websockets 服务器等待连接的地方。连接成功后，客户端订阅目的地/topic/greetings，服务器将在该目的地发布问候消息。当在该目的地收到问候语时，它将向 dom 附加一个段落元素以显示问候语消息。\n\n该sendname()函数检索用户输入的名称，并使用 stomp 客户端将其发送到目的地/app/hello（greetingcontroller.greeting()接收位置）。\n\n\n# 后端\n\n@springbootapplication\npublic class myapplication {\n    public static void main(string[] args) {\n        springapplication.run(myapplication.class,args);\n    }\n}\n\n\npackage com.zs.websocket.demo02;\n\npublic class greeting {\n\n  private string content;\n\n  public greeting() {\n  }\n\n  public greeting(string content) {\n    this.content = content;\n  }\n\n  public string getcontent() {\n    return content;\n  }\n\n}\n\n\npackage com.zs.websocket.demo02;\n\npublic class hellomessage {\n\n  private string name;\n\n  public hellomessage() {\n  }\n\n  public hellomessage(string name) {\n    this.name = name;\n  }\n\n  public string getname() {\n    return name;\n  }\n\n  public void setname(string name) {\n    this.name = name;\n  }\n}\n\n\n\npackage com.zs.websocket.demo02;\n\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.messaging.simp.config.messagebrokerregistry;\nimport org.springframework.web.socket.config.annotation.enablewebsocketmessagebroker;\nimport org.springframework.web.socket.config.annotation.stompendpointregistry;\nimport org.springframework.web.socket.config.annotation.websocketmessagebrokerconfigurer;\n\n@configuration\n@enablewebsocketmessagebroker\npublic class websocketconfig implements websocketmessagebrokerconfigurer {\n\n  @override\n  public void configuremessagebroker(messagebrokerregistry config) {\n    config.enablesimplebroker("/topic");\n    config.setapplicationdestinationprefixes("/app");\n  }\n\n  @override\n  public void registerstompendpoints(stompendpointregistry registry) {\n    registry.addendpoint("/gs-guide-websocket");\n  }\n\n}\n\n\n\nwebsocketconfig注释为 ，@configuration表明它是一个 spring 配置类。它还带有注释@enablewebsocketmessagebroker。顾名思义，它@enablewebsocketmessagebroker支持由消息代理支持的 websocket 消息处理。\n\n该方法实现了配置消息代理的configuremessagebroker()默认方法。websocketmessagebrokerconfigurer它首先调用以enablesimplebroker()启用一个简单的基于内存的消息代理，将问候消息传送回前缀为 的目的地上的客户端/topic。它还指定绑定/app到用 注释的方法的消息的前缀@messagemapping。该前缀将用于定义所有消息映射。例如，是方法映射到句柄的/app/hello端点。greetingcontroller.greeting()\n\n该registerstompendpoints()方法注册/gs-guide-websocketwebsocket 连接的端点。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.4.stomp方式02",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.4.stomp%E6%96%B9%E5%BC%8F02.html",relativePath:"zs-tool-框架/消息推送/websocket--3.4.stomp方式02.md",key:"v-0486f016",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.4.stomp%E6%96%B9%E5%BC%8F02.html",headers:[{level:2,title:"STOMP",slug:"stomp",normalizedTitle:"stomp",charIndex:28},{level:3,title:"Frame",slug:"frame",normalizedTitle:"frame",charIndex:413},{level:3,title:"command类别",slug:"command类别",normalizedTitle:"command类别",charIndex:481},{level:3,title:"客户端常用连接方式",slug:"客户端常用连接方式",normalizedTitle:"客户端常用连接方式",charIndex:571},{level:3,title:"服务端的实现过程",slug:"服务端的实现过程",normalizedTitle:"服务端的实现过程",charIndex:984},{level:2,title:"案例",slug:"案例",normalizedTitle:"案例",charIndex:1172}],lastUpdated:"2024年1月30日星期二晚上6点46分",lastUpdatedTimestamp:1706611609e3,headersStr:"STOMP Frame command类别 客户端常用连接方式 服务端的实现过程 案例",content:'# websocket--3.4.stomp方式02\n\nSTOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。\n\n首先，我们先理解一下为什么需要STOMP。\n\n1）常规的websocket连接和普通的TCP基本上没有什么差别的。\n\n2）那我们如果像http一样加入一些响应和请求层。\n\n3）所以STOMP在websocket上提供了一中基于帧线路格式（frame-based wire format）。\n\n4）简单一点，就是在我们的websocket（TCP）上面加了一层协议，使双方遵循这种协议来发送消息。\n\n\n# STOMP\n\n\n# Frame\n\n\n\nCONNECTED\nheart-beat:0,0\nversion:1.2\ncontent-length:0\n\n\n\n# command类别\n\nCONNECT\nSEND\nSUBSCRIBE\nUNSUBSCRIBE\nBEGIN\nCOMMIT\nABORT\nACK\nNACK\nDISCONNECT\n\n\n\n# 客户端常用连接方式\n\nws\n\nvar url = "ws://localhost:8080/websocket";\nvar client = Stomp.client(url);\n\n\nsockJs\n\n<script src="http://cdn.sockjs.org/sockjs-0.3.min.js"><\/script>\n<script>\n    // use SockJS implementation instead of the browser\'s native implementation\n    var ws = new SockJS(url);\nvar client = Stomp.over(ws);\n[...]\n <\/script>\n\n\n说明：使用ws协议需要浏览器的支持，但是一些老版本的浏览器不一定支持。**Stomp.over(ws)**的凡是就是用来定义服务websocket的协议。\n\n\n# 服务端的实现过程\n\n\n\na、服务端：/app，这里访问服务端，前缀通过设定的方式访问。\n\nb、用户：/user,这里针对的是用户消息的传递，针对于当前用户进行传递。\n\nc、其他消息：/topic、/queue，这两种方式。都是定义出来用于订阅。并且消息只能从这里通过并处理\n\n\n\n\n\nhttps://blog.51cto.com/u_16213578/7742286\n\n\n# 案例\n\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.simp.config.MessageBrokerRegistry;\nimport org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\nimport org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n\n\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        // 配置客户端尝试连接地址\n        registry.addEndpoint("/ws").setAllowedOrigins("*").withSockJS();\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        // 设置广播节点\n        registry.enableSimpleBroker("/topic", "/user");\n        // 客户端向服务端发送消息需有/app 前缀\n        registry.setApplicationDestinationPrefixes("/app");\n        // 指定用户发送（一对一）的前缀 /user/\n        registry.setUserDestinationPrefix("/user/");\n    }\n}\n\n\n通过实现 WebSocketMessageBrokerConfigurer 接口和加上**@EnableWebSocketMessageBroker**来进行 stomp 的配置与注解扫描。\n\n其中覆盖 registerStompEndpoints 方法来设置暴露的 stomp 的路径，其它一些跨域、客户端之类的设置。\n\n覆盖 configureMessageBroker 方法来进行节点的配置。\n\n 1. 其中 enableSimpleBroker 配置的广播节点，也就是服务端发送消息，客户端订阅就能接收消息的节点。\n 2. 覆盖setApplicationDestinationPrefixes 方法，设置客户端向服务端发送消息的节点。\n 3. 覆盖 setUserDestinationPrefix 方法，设置一对一通信的节点。\n\n\nimport cn.coder4j.study.example.websocket.model.RequestMessage;\nimport cn.coder4j.study.example.websocket.model.ResponseMessage;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.messaging.handler.annotation.MessageMapping;\nimport org.springframework.messaging.handler.annotation.SendTo;\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n\n@Controller\npublic class WSController {\n\n    @Autowired\n    private SimpMessagingTemplate simpMessagingTemplate;\n\n    @MessageMapping("/hello")\n    @SendTo("/topic/hello")\n    public ResponseMessage hello(RequestMessage requestMessage) {\n        System.out.println("接收消息：" + requestMessage);\n        return new ResponseMessage("服务端接收到你发的：" + requestMessage);\n    }\n\n    @GetMapping("/sendMsgByUser")\n    public @ResponseBody\n    Object sendMsgByUser(String token, String msg) {\n        simpMessagingTemplate.convertAndSendToUser(token, "/msg", msg);\n        return "success";\n    }\n\n    @GetMapping("/sendMsgByAll")\n    public @ResponseBody\n    Object sendMsgByAll(String msg) {\n        simpMessagingTemplate.convertAndSend("/topic", msg);\n        return "success";\n    }\n\n    @GetMapping("/test")\n    public String test() {\n        return "test-stomp.html";\n    }\n}\n\n\n通过 @MessageMapping 来暴露节点路径，有点类似 @RequestMapping。注意这里虽然写的是 hello ，但是我们客户端调用的真正地址是 /app/hello。 因为我们在上面的 config 里配置了registry.setApplicationDestinationPrefixes("/app")。\n\n@SendTo这个注解会把返回值的内容发送给订阅了 /topic/hello 的客户端，与之类似的还有一个**@SendToUser** 只不过他是发送给用户端一对一通信的。这两个注解一般是应答时响应的，如果服务端主动发送消息可以通过 simpMessagingTemplate类的convertAndSend方法。注意 simpMessagingTemplate.convertAndSendToUser(token, "/msg", msg) ，联系到我们上文配置的 registry.setUserDestinationPrefix("/user/"),这里客户端订阅的是/user/{token}/msg,千万不要搞错。\n\nstomp与rabbitmq整合\n\nhttps://blog.csdn.net/qq_32447301/article/details/104017643\n\nhttps://blog.csdn.net/qq_35387940/article/details/108276136?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22108276136%22%2C%22source%22%3A%22weixin_44235759%22%7D&fromshare=blogdetail\n\nhttps://blog.csdn.net/u014203449/article/details/102902078',normalizedContent:'# websocket--3.4.stomp方式02\n\nstomp即simple (or streaming) text orientated messaging protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许stomp客户端与任意stomp消息代理（broker）进行交互。stomp协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。\n\n首先，我们先理解一下为什么需要stomp。\n\n1）常规的websocket连接和普通的tcp基本上没有什么差别的。\n\n2）那我们如果像http一样加入一些响应和请求层。\n\n3）所以stomp在websocket上提供了一中基于帧线路格式（frame-based wire format）。\n\n4）简单一点，就是在我们的websocket（tcp）上面加了一层协议，使双方遵循这种协议来发送消息。\n\n\n# stomp\n\n\n# frame\n\n\n\nconnected\nheart-beat:0,0\nversion:1.2\ncontent-length:0\n\n\n\n# command类别\n\nconnect\nsend\nsubscribe\nunsubscribe\nbegin\ncommit\nabort\nack\nnack\ndisconnect\n\n\n\n# 客户端常用连接方式\n\nws\n\nvar url = "ws://localhost:8080/websocket";\nvar client = stomp.client(url);\n\n\nsockjs\n\n<script src="http://cdn.sockjs.org/sockjs-0.3.min.js"><\/script>\n<script>\n    // use sockjs implementation instead of the browser\'s native implementation\n    var ws = new sockjs(url);\nvar client = stomp.over(ws);\n[...]\n <\/script>\n\n\n说明：使用ws协议需要浏览器的支持，但是一些老版本的浏览器不一定支持。**stomp.over(ws)**的凡是就是用来定义服务websocket的协议。\n\n\n# 服务端的实现过程\n\n\n\na、服务端：/app，这里访问服务端，前缀通过设定的方式访问。\n\nb、用户：/user,这里针对的是用户消息的传递，针对于当前用户进行传递。\n\nc、其他消息：/topic、/queue，这两种方式。都是定义出来用于订阅。并且消息只能从这里通过并处理\n\n\n\n\n\nhttps://blog.51cto.com/u_16213578/7742286\n\n\n# 案例\n\n\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.messaging.simp.config.messagebrokerregistry;\nimport org.springframework.web.socket.config.annotation.enablewebsocketmessagebroker;\nimport org.springframework.web.socket.config.annotation.stompendpointregistry;\nimport org.springframework.web.socket.config.annotation.websocketmessagebrokerconfigurer;\n\n\n@configuration\n@enablewebsocketmessagebroker\npublic class websocketconfig implements websocketmessagebrokerconfigurer {\n\n    @override\n    public void registerstompendpoints(stompendpointregistry registry) {\n        // 配置客户端尝试连接地址\n        registry.addendpoint("/ws").setallowedorigins("*").withsockjs();\n    }\n\n    @override\n    public void configuremessagebroker(messagebrokerregistry registry) {\n        // 设置广播节点\n        registry.enablesimplebroker("/topic", "/user");\n        // 客户端向服务端发送消息需有/app 前缀\n        registry.setapplicationdestinationprefixes("/app");\n        // 指定用户发送（一对一）的前缀 /user/\n        registry.setuserdestinationprefix("/user/");\n    }\n}\n\n\n通过实现 websocketmessagebrokerconfigurer 接口和加上**@enablewebsocketmessagebroker**来进行 stomp 的配置与注解扫描。\n\n其中覆盖 registerstompendpoints 方法来设置暴露的 stomp 的路径，其它一些跨域、客户端之类的设置。\n\n覆盖 configuremessagebroker 方法来进行节点的配置。\n\n 1. 其中 enablesimplebroker 配置的广播节点，也就是服务端发送消息，客户端订阅就能接收消息的节点。\n 2. 覆盖setapplicationdestinationprefixes 方法，设置客户端向服务端发送消息的节点。\n 3. 覆盖 setuserdestinationprefix 方法，设置一对一通信的节点。\n\n\nimport cn.coder4j.study.example.websocket.model.requestmessage;\nimport cn.coder4j.study.example.websocket.model.responsemessage;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.messaging.handler.annotation.messagemapping;\nimport org.springframework.messaging.handler.annotation.sendto;\nimport org.springframework.messaging.simp.simpmessagingtemplate;\nimport org.springframework.stereotype.controller;\nimport org.springframework.web.bind.annotation.getmapping;\nimport org.springframework.web.bind.annotation.responsebody;\n\n\n@controller\npublic class wscontroller {\n\n    @autowired\n    private simpmessagingtemplate simpmessagingtemplate;\n\n    @messagemapping("/hello")\n    @sendto("/topic/hello")\n    public responsemessage hello(requestmessage requestmessage) {\n        system.out.println("接收消息：" + requestmessage);\n        return new responsemessage("服务端接收到你发的：" + requestmessage);\n    }\n\n    @getmapping("/sendmsgbyuser")\n    public @responsebody\n    object sendmsgbyuser(string token, string msg) {\n        simpmessagingtemplate.convertandsendtouser(token, "/msg", msg);\n        return "success";\n    }\n\n    @getmapping("/sendmsgbyall")\n    public @responsebody\n    object sendmsgbyall(string msg) {\n        simpmessagingtemplate.convertandsend("/topic", msg);\n        return "success";\n    }\n\n    @getmapping("/test")\n    public string test() {\n        return "test-stomp.html";\n    }\n}\n\n\n通过 @messagemapping 来暴露节点路径，有点类似 @requestmapping。注意这里虽然写的是 hello ，但是我们客户端调用的真正地址是 /app/hello。 因为我们在上面的 config 里配置了registry.setapplicationdestinationprefixes("/app")。\n\n@sendto这个注解会把返回值的内容发送给订阅了 /topic/hello 的客户端，与之类似的还有一个**@sendtouser** 只不过他是发送给用户端一对一通信的。这两个注解一般是应答时响应的，如果服务端主动发送消息可以通过 simpmessagingtemplate类的convertandsend方法。注意 simpmessagingtemplate.convertandsendtouser(token, "/msg", msg) ，联系到我们上文配置的 registry.setuserdestinationprefix("/user/"),这里客户端订阅的是/user/{token}/msg,千万不要搞错。\n\nstomp与rabbitmq整合\n\nhttps://blog.csdn.net/qq_32447301/article/details/104017643\n\nhttps://blog.csdn.net/qq_35387940/article/details/108276136?csdn_share_tail=%7b%22type%22%3a%22blog%22%2c%22rtype%22%3a%22article%22%2c%22rid%22%3a%22108276136%22%2c%22source%22%3a%22weixin_44235759%22%7d&fromshare=blogdetail\n\nhttps://blog.csdn.net/u014203449/article/details/102902078',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.2.springboot集成--接口方式",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F.html",relativePath:"zs-tool-框架/消息推送/websocket--3.2.springboot集成--接口方式.md",key:"v-7d251b33",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.2.springboot%E9%9B%86%E6%88%90--%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F.html",headers:[{level:2,title:"示例一：",slug:"示例一",normalizedTitle:"示例一：",charIndex:40},{level:2,title:"报错",slug:"报错",normalizedTitle:"报错",charIndex:5213},{level:3,title:"定时任务+WebSocket",slug:"定时任务-websocket",normalizedTitle:"定时任务+websocket",charIndex:5220},{level:2,title:"示例二",slug:"示例二",normalizedTitle:"示例二",charIndex:9974}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"示例一： 报错 定时任务+WebSocket 示例二",content:'# websocket--3.2.springboot集成--接口方式\n\n\n# 示例一：\n\n代码：zs-websocket-tomcat-01\n\n\n\n\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-websocket</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n</dependency>\n\n\npackage com.zs.websocket.demo01;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.socket.WebSocketSession;\n\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Slf4j\npublic class WsSessionManager {\n    /**\n     * 保存连接 session 的地方\n     */\n    public  static ConcurrentHashMap<String, WebSocketSession> SESSION_POOL = new ConcurrentHashMap<>();\n\n    /**\n     * 添加 session\n     *\n     * @param key\n     */\n    public static void add(String key, WebSocketSession session) {\n        // 添加 session\n        SESSION_POOL.put(key, session);\n    }\n\n    /**\n     * 删除 session,会返回删除的 session\n     *\n     * @param key\n     * @return\n     */\n    public static WebSocketSession remove(String key) {\n        // 删除 session\n        return SESSION_POOL.remove(key);\n    }\n\n    /**\n     * 删除并同步关闭连接\n     *\n     * @param key\n     */\n    public static void removeAndClose(String key) {\n        WebSocketSession session = remove(key);\n        if (session != null) {\n            try {\n                // 关闭连接\n                session.close();\n            } catch (IOException e) {\n                // todo: 关闭出现异常处理\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 获得 session\n     *\n     * @param key\n     * @return\n     */\n    public static WebSocketSession get(String key) {\n        // 获得 session\n        return SESSION_POOL.get(key);\n    }\n}\n\n\npackage com.zs.websocket.demo01;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.socket.TextMessage;\nimport org.springframework.web.socket.WebSocketSession;\n\nimport java.io.IOException;\n\n/**\n * ws操作相关服务\n */\n@Service\n@Slf4j\npublic class WsService {\n\n    /**\n     * 发送消息\n     * @param session\n     * @param text\n     * @return\n     * @throws IOException\n     */\n    public void sendMsg(WebSocketSession session, String text) throws IOException {\n        session.sendMessage(new TextMessage(text));\n    }\n\n    /**\n     * 广播消息\n     * @param text\n     * @return\n     * @throws IOException\n     */\n    public void broadcastMsg(String text) throws IOException {\n        for (WebSocketSession session: WsSessionManager.SESSION_POOL.values()) {\n            session.sendMessage(new TextMessage(text));\n        }\n    }\n\n}\n\n\npackage com.zs.websocket.demo01;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.socket.BinaryMessage;\nimport org.springframework.web.socket.CloseStatus;\nimport org.springframework.web.socket.TextMessage;\nimport org.springframework.web.socket.WebSocketSession;\nimport org.springframework.web.socket.handler.AbstractWebSocketHandler;\n\nimport java.time.LocalDateTime;\n\n/**\n * ws消息处理类\n */\n@Component\n@Slf4j\npublic class MyWsHandler extends AbstractWebSocketHandler {\n\n    @Override\n    public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n        log.info("建立ws连接");\n        WsSessionManager.add(session.getId(),session);\n    }\n\n    @Override\n    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {\n        log.info("发送文本消息");\n        // 获得客户端传来的消息\n        String payload = message.getPayload();\n        log.info("server 接收到消息 " + payload);\n        session.sendMessage(new TextMessage("server 发送给的消息 " + payload + "，发送时间:" + LocalDateTime.now().toString()));\n    }\n\n    @Override\n    protected void handleBinaryMessage(WebSocketSession session, BinaryMessage message) throws Exception {\n        log.info("发送二进制消息");\n    }\n\n    @Override\n    public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {\n        log.error("异常处理");\n        WsSessionManager.removeAndClose(session.getId());\n    }\n\n    @Override\n    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {\n        log.info("关闭ws连接");\n        WsSessionManager.removeAndClose(session.getId());\n    }\n}\n\n\n\npackage com.zs.websocket.demo01;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.config.annotation.EnableWebSocket;\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\nimport org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\n\n@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Autowired\n    private MyWsHandler myWsHandler;\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry\n                .addHandler(myWsHandler, "myWs")\n                //允许跨域\n                .setAllowedOrigins("*");\n    }\n}\n\n\n\n# 报错\n\n\n# 定时任务+WebSocket\n\n根据项目需求要使用定时任务+WebSocket不断的往前台推送数据。当项目同时集成WebSocket+定时任务时会报错：Bean named \'defaultSockJsTaskScheduler\' is expected to be of type···，报错信息如下\n\norg.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named \'defaultSockJsTaskScheduler\' is expected to be of type \'org.springframework.scheduling.TaskScheduler\' but was actually of type \'org.springframework.beans.factory.support.NullBean\'\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:395) ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:227) ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1172) ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1139) ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.resolveSchedulerBean(ScheduledAnnotationBeanPostProcessor.java:315) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.finishRegistration(ScheduledAnnotationBeanPostProcessor.java:256) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ScheduledAnnotationBeanPostProcessor.java:233) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ScheduledAnnotationBeanPostProcessor.java:105) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) [spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat com.niutrans.localdeploymentserver.LocalDeploymentServerApplication.main(LocalDeploymentServerApplication.java:19) [classes/:na]\n\n\n定时任务选择的是Spring自带的定时任务，先在项目中集成了WebSocket，编译，运行，测试后，功能好用。但是再加上定时任务后就报错了。\n\n# 解决方案\n\n手动添加一个定时任务的配置类来创建一个ThreadPoolTaskScheduler对象。\n\n@Configuration\npublic class ScheduledConfig {\n \n\t@Bean\n\tpublic TaskScheduler taskScheduler() {\n\t\tThreadPoolTaskScheduler scheduling = new ThreadPoolTaskScheduler();\n\t\tscheduling.setPoolSize(10);\n        scheduling.setThreadNamePrefix("scheduled-task-");\n        scheduler.setDaemon(true);\n\t\tscheduling.initialize();\n\t\treturn scheduling;\n\t}\n}\n\n\n@Bean\npublic ThreadPoolTaskScheduler taskScheduler(TaskSchedulerBuilder builder) {\n    return builder.build();\n}\n\n\n\n# 示例二\n\nimport cn.coder4j.study.example.websocket.config.WsSessionManager;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.socket.CloseStatus;\nimport org.springframework.web.socket.TextMessage;\nimport org.springframework.web.socket.WebSocketSession;\nimport org.springframework.web.socket.handler.TextWebSocketHandler;\n\nimport java.time.LocalDateTime;\n\n\n@Component\npublic class HttpAuthHandler extends TextWebSocketHandler {\n\n    /**\n     * socket 建立成功事件\n     *\n     * @param session\n     * @throws Exception\n     */\n    @Override\n    public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n        Object token = session.getAttributes().get("token");\n        if (token != null) {\n            // 用户连接成功，放入在线用户缓存\n            WsSessionManager.add(token.toString(), session);\n        } else {\n            throw new RuntimeException("用户登录已经失效!");\n        }\n    }\n\n    /**\n     * 接收消息事件\n     *\n     * @param session\n     * @param message\n     * @throws Exception\n     */\n    @Override\n    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {\n        // 获得客户端传来的消息\n        String payload = message.getPayload();\n        Object token = session.getAttributes().get("token");\n        System.out.println("server 接收到 " + token + " 发送的 " + payload);\n        session.sendMessage(new TextMessage("server 发送给 " + token + " 消息 " + payload + " " + LocalDateTime.now().toString()));\n    }\n\n    /**\n     * socket 断开连接时\n     *\n     * @param session\n     * @param status\n     * @throws Exception\n     */\n    @Override\n    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {\n        Object token = session.getAttributes().get("token");\n        if (token != null) {\n            // 用户退出，移除缓存\n            WsSessionManager.remove(token.toString());\n        }\n    }\n}\n\n\n通过继承 TextWebSocketHandler 类并覆盖相应方法，可以对 websocket 的事件进行处理，这里可以同原生注解的那几个注解连起来看\n\n 1. afterConnectionEstablished 方法是在 socket 连接成功后被触发，同原生注解里的 @OnOpen 功能\n 2. afterConnectionClosed 方法是在 socket 连接关闭后被触发，同原生注解里的 @OnClose 功能\n 3. handleTextMessage 方法是在客户端发送信息时触发，同原生注解里的 @OnMessage 功能\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.socket.WebSocketSession;\n\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\n\n\n@Slf4j\npublic class WsSessionManager {\n    /**\n     * 保存连接 session 的地方\n     */\n    private static ConcurrentHashMap<String, WebSocketSession> SESSION_POOL = new ConcurrentHashMap<>();\n\n    /**\n     * 添加 session\n     *\n     * @param key\n     */\n    public static void add(String key, WebSocketSession session) {\n        // 添加 session\n        SESSION_POOL.put(key, session);\n    }\n\n    /**\n     * 删除 session,会返回删除的 session\n     *\n     * @param key\n     * @return\n     */\n    public static WebSocketSession remove(String key) {\n        // 删除 session\n        return SESSION_POOL.remove(key);\n    }\n\n    /**\n     * 删除并同步关闭连接\n     *\n     * @param key\n     */\n    public static void removeAndClose(String key) {\n        WebSocketSession session = remove(key);\n        if (session != null) {\n            try {\n                // 关闭连接\n                session.close();\n            } catch (IOException e) {\n                // todo: 关闭出现异常处理\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 获得 session\n     *\n     * @param key\n     * @return\n     */\n    public static WebSocketSession get(String key) {\n        // 获得 session\n        return SESSION_POOL.get(key);\n    }\n}\n\n\n这里简单通过 ConcurrentHashMap 来实现了一个 session 池，用来保存已经登录的 web socket 的 session。前文提过，服务端发送消息给客户端必须要通过这个 session。\n\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.http.HttpUtil;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.socket.WebSocketHandler;\nimport org.springframework.web.socket.server.HandshakeInterceptor;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n@Component\npublic class MyInterceptor implements HandshakeInterceptor {\n\n    /**\n     * 握手前\n     *\n     * @param request\n     * @param response\n     * @param wsHandler\n     * @param attributes\n     * @return\n     * @throws Exception\n     */\n    @Override\n    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map<String, Object> attributes) throws Exception {\n        System.out.println("握手开始");\n        // 获得请求参数\n        HashMap<String, String> paramMap = HttpUtil.decodeParamMap(request.getURI().getQuery(), "utf-8");\n        String uid = paramMap.get("token");\n        if (StrUtil.isNotBlank(uid)) {\n            // 放入属性域\n            attributes.put("token", uid);\n            System.out.println("用户 token " + uid + " 握手成功！");\n            return true;\n        }\n        System.out.println("用户登录已失效");\n        return false;\n    }\n\n    /**\n     * 握手后\n     *\n     * @param request\n     * @param response\n     * @param wsHandler\n     * @param exception\n     */\n    @Override\n    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception) {\n        System.out.println("握手完成");\n    }\n}\n\n\n通过实现 HandshakeInterceptor 接口来定义握手拦截器，注意这里与上面 Handler 的事件是不同的，这里是建立握手时的事件，分为握手前与握手后，而 Handler 的事件是在握手成功后的基础上建立 socket 的连接。所以在如果把认证放在这个步骤相对来说最节省服务器资源。它主要有两个方法 beforeHandshake 与 afterHandshake ，顾名思义一个在握手前触发，一个在握手后触发。\n\nimport cn.coder4j.study.example.websocket.handler.HttpAuthHandler;\nimport cn.coder4j.study.example.websocket.interceptor.MyInterceptor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.config.annotation.EnableWebSocket;\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\nimport org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\n\n\n@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Autowired\n    private HttpAuthHandler httpAuthHandler;\n    @Autowired\n    private MyInterceptor myInterceptor;\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry\n                .addHandler(httpAuthHandler, "myWS")\n                .addInterceptors(myInterceptor)\n                .setAllowedOrigins("*");\n    }\n}\n\n\n通过实现 WebSocketConfigurer 类并覆盖相应的方法进行 websocket 的配置。我们主要覆盖 registerWebSocketHandlers 这个方法。通过向 WebSocketHandlerRegistry 设置不同参数来进行配置。其中 addHandler 方法添加我们上面的写的 ws 的 handler 处理类，第二个参数是你暴露出的 ws 路径。addInterceptors 添加我们写的握手过滤器。setAllowedOrigins("*") 这个是关闭跨域校验，方便本地调试，线上推荐打开。',normalizedContent:'# websocket--3.2.springboot集成--接口方式\n\n\n# 示例一：\n\n代码：zs-websocket-tomcat-01\n\n\n\n\n\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-web</artifactid>\n</dependency>\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-websocket</artifactid>\n</dependency>\n<dependency>\n    <groupid>org.projectlombok</groupid>\n    <artifactid>lombok</artifactid>\n    <optional>true</optional>\n</dependency>\n\n\npackage com.zs.websocket.demo01;\n\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.web.socket.websocketsession;\n\nimport java.io.ioexception;\nimport java.util.concurrent.concurrenthashmap;\n\n@slf4j\npublic class wssessionmanager {\n    /**\n     * 保存连接 session 的地方\n     */\n    public  static concurrenthashmap<string, websocketsession> session_pool = new concurrenthashmap<>();\n\n    /**\n     * 添加 session\n     *\n     * @param key\n     */\n    public static void add(string key, websocketsession session) {\n        // 添加 session\n        session_pool.put(key, session);\n    }\n\n    /**\n     * 删除 session,会返回删除的 session\n     *\n     * @param key\n     * @return\n     */\n    public static websocketsession remove(string key) {\n        // 删除 session\n        return session_pool.remove(key);\n    }\n\n    /**\n     * 删除并同步关闭连接\n     *\n     * @param key\n     */\n    public static void removeandclose(string key) {\n        websocketsession session = remove(key);\n        if (session != null) {\n            try {\n                // 关闭连接\n                session.close();\n            } catch (ioexception e) {\n                // todo: 关闭出现异常处理\n                e.printstacktrace();\n            }\n        }\n    }\n\n    /**\n     * 获得 session\n     *\n     * @param key\n     * @return\n     */\n    public static websocketsession get(string key) {\n        // 获得 session\n        return session_pool.get(key);\n    }\n}\n\n\npackage com.zs.websocket.demo01;\n\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.stereotype.service;\nimport org.springframework.web.socket.textmessage;\nimport org.springframework.web.socket.websocketsession;\n\nimport java.io.ioexception;\n\n/**\n * ws操作相关服务\n */\n@service\n@slf4j\npublic class wsservice {\n\n    /**\n     * 发送消息\n     * @param session\n     * @param text\n     * @return\n     * @throws ioexception\n     */\n    public void sendmsg(websocketsession session, string text) throws ioexception {\n        session.sendmessage(new textmessage(text));\n    }\n\n    /**\n     * 广播消息\n     * @param text\n     * @return\n     * @throws ioexception\n     */\n    public void broadcastmsg(string text) throws ioexception {\n        for (websocketsession session: wssessionmanager.session_pool.values()) {\n            session.sendmessage(new textmessage(text));\n        }\n    }\n\n}\n\n\npackage com.zs.websocket.demo01;\n\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.stereotype.component;\nimport org.springframework.web.socket.binarymessage;\nimport org.springframework.web.socket.closestatus;\nimport org.springframework.web.socket.textmessage;\nimport org.springframework.web.socket.websocketsession;\nimport org.springframework.web.socket.handler.abstractwebsockethandler;\n\nimport java.time.localdatetime;\n\n/**\n * ws消息处理类\n */\n@component\n@slf4j\npublic class mywshandler extends abstractwebsockethandler {\n\n    @override\n    public void afterconnectionestablished(websocketsession session) throws exception {\n        log.info("建立ws连接");\n        wssessionmanager.add(session.getid(),session);\n    }\n\n    @override\n    protected void handletextmessage(websocketsession session, textmessage message) throws exception {\n        log.info("发送文本消息");\n        // 获得客户端传来的消息\n        string payload = message.getpayload();\n        log.info("server 接收到消息 " + payload);\n        session.sendmessage(new textmessage("server 发送给的消息 " + payload + "，发送时间:" + localdatetime.now().tostring()));\n    }\n\n    @override\n    protected void handlebinarymessage(websocketsession session, binarymessage message) throws exception {\n        log.info("发送二进制消息");\n    }\n\n    @override\n    public void handletransporterror(websocketsession session, throwable exception) throws exception {\n        log.error("异常处理");\n        wssessionmanager.removeandclose(session.getid());\n    }\n\n    @override\n    public void afterconnectionclosed(websocketsession session, closestatus status) throws exception {\n        log.info("关闭ws连接");\n        wssessionmanager.removeandclose(session.getid());\n    }\n}\n\n\n\npackage com.zs.websocket.demo01;\n\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.web.socket.config.annotation.enablewebsocket;\nimport org.springframework.web.socket.config.annotation.websocketconfigurer;\nimport org.springframework.web.socket.config.annotation.websockethandlerregistry;\n\n@configuration\n@enablewebsocket\npublic class websocketconfig implements websocketconfigurer {\n\n    @autowired\n    private mywshandler mywshandler;\n\n    @override\n    public void registerwebsockethandlers(websockethandlerregistry registry) {\n        registry\n                .addhandler(mywshandler, "myws")\n                //允许跨域\n                .setallowedorigins("*");\n    }\n}\n\n\n\n# 报错\n\n\n# 定时任务+websocket\n\n根据项目需求要使用定时任务+websocket不断的往前台推送数据。当项目同时集成websocket+定时任务时会报错：bean named \'defaultsockjstaskscheduler\' is expected to be of type···，报错信息如下\n\norg.springframework.beans.factory.beannotofrequiredtypeexception: bean named \'defaultsockjstaskscheduler\' is expected to be of type \'org.springframework.scheduling.taskscheduler\' but was actually of type \'org.springframework.beans.factory.support.nullbean\'\n\tat org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:395) ~[spring-beans-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:227) ~[spring-beans-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.beans.factory.support.defaultlistablebeanfactory.resolvenamedbean(defaultlistablebeanfactory.java:1172) ~[spring-beans-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.beans.factory.support.defaultlistablebeanfactory.resolvenamedbean(defaultlistablebeanfactory.java:1139) ~[spring-beans-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.scheduling.annotation.scheduledannotationbeanpostprocessor.resolveschedulerbean(scheduledannotationbeanpostprocessor.java:315) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.scheduling.annotation.scheduledannotationbeanpostprocessor.finishregistration(scheduledannotationbeanpostprocessor.java:256) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.scheduling.annotation.scheduledannotationbeanpostprocessor.onapplicationevent(scheduledannotationbeanpostprocessor.java:233) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.scheduling.annotation.scheduledannotationbeanpostprocessor.onapplicationevent(scheduledannotationbeanpostprocessor.java:105) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.context.event.simpleapplicationeventmulticaster.doinvokelistener(simpleapplicationeventmulticaster.java:172) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.context.event.simpleapplicationeventmulticaster.invokelistener(simpleapplicationeventmulticaster.java:165) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.context.event.simpleapplicationeventmulticaster.multicastevent(simpleapplicationeventmulticaster.java:139) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.context.support.abstractapplicationcontext.publishevent(abstractapplicationcontext.java:404) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.context.support.abstractapplicationcontext.publishevent(abstractapplicationcontext.java:361) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.context.support.abstractapplicationcontext.finishrefresh(abstractapplicationcontext.java:898) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:554) ~[spring-context-5.2.7.release.jar:5.2.7.release]\n\tat org.springframework.boot.web.servlet.context.servletwebserverapplicationcontext.refresh(servletwebserverapplicationcontext.java:143) ~[spring-boot-2.3.1.release.jar:2.3.1.release]\n\tat org.springframework.boot.springapplication.refresh(springapplication.java:758) [spring-boot-2.3.1.release.jar:2.3.1.release]\n\tat org.springframework.boot.springapplication.refresh(springapplication.java:750) [spring-boot-2.3.1.release.jar:2.3.1.release]\n\tat org.springframework.boot.springapplication.refreshcontext(springapplication.java:397) [spring-boot-2.3.1.release.jar:2.3.1.release]\n\tat org.springframework.boot.springapplication.run(springapplication.java:315) [spring-boot-2.3.1.release.jar:2.3.1.release]\n\tat org.springframework.boot.springapplication.run(springapplication.java:1237) [spring-boot-2.3.1.release.jar:2.3.1.release]\n\tat org.springframework.boot.springapplication.run(springapplication.java:1226) [spring-boot-2.3.1.release.jar:2.3.1.release]\n\tat com.niutrans.localdeploymentserver.localdeploymentserverapplication.main(localdeploymentserverapplication.java:19) [classes/:na]\n\n\n定时任务选择的是spring自带的定时任务，先在项目中集成了websocket，编译，运行，测试后，功能好用。但是再加上定时任务后就报错了。\n\n# 解决方案\n\n手动添加一个定时任务的配置类来创建一个threadpooltaskscheduler对象。\n\n@configuration\npublic class scheduledconfig {\n \n\t@bean\n\tpublic taskscheduler taskscheduler() {\n\t\tthreadpooltaskscheduler scheduling = new threadpooltaskscheduler();\n\t\tscheduling.setpoolsize(10);\n        scheduling.setthreadnameprefix("scheduled-task-");\n        scheduler.setdaemon(true);\n\t\tscheduling.initialize();\n\t\treturn scheduling;\n\t}\n}\n\n\n@bean\npublic threadpooltaskscheduler taskscheduler(taskschedulerbuilder builder) {\n    return builder.build();\n}\n\n\n\n# 示例二\n\nimport cn.coder4j.study.example.websocket.config.wssessionmanager;\nimport org.springframework.stereotype.component;\nimport org.springframework.web.socket.closestatus;\nimport org.springframework.web.socket.textmessage;\nimport org.springframework.web.socket.websocketsession;\nimport org.springframework.web.socket.handler.textwebsockethandler;\n\nimport java.time.localdatetime;\n\n\n@component\npublic class httpauthhandler extends textwebsockethandler {\n\n    /**\n     * socket 建立成功事件\n     *\n     * @param session\n     * @throws exception\n     */\n    @override\n    public void afterconnectionestablished(websocketsession session) throws exception {\n        object token = session.getattributes().get("token");\n        if (token != null) {\n            // 用户连接成功，放入在线用户缓存\n            wssessionmanager.add(token.tostring(), session);\n        } else {\n            throw new runtimeexception("用户登录已经失效!");\n        }\n    }\n\n    /**\n     * 接收消息事件\n     *\n     * @param session\n     * @param message\n     * @throws exception\n     */\n    @override\n    protected void handletextmessage(websocketsession session, textmessage message) throws exception {\n        // 获得客户端传来的消息\n        string payload = message.getpayload();\n        object token = session.getattributes().get("token");\n        system.out.println("server 接收到 " + token + " 发送的 " + payload);\n        session.sendmessage(new textmessage("server 发送给 " + token + " 消息 " + payload + " " + localdatetime.now().tostring()));\n    }\n\n    /**\n     * socket 断开连接时\n     *\n     * @param session\n     * @param status\n     * @throws exception\n     */\n    @override\n    public void afterconnectionclosed(websocketsession session, closestatus status) throws exception {\n        object token = session.getattributes().get("token");\n        if (token != null) {\n            // 用户退出，移除缓存\n            wssessionmanager.remove(token.tostring());\n        }\n    }\n}\n\n\n通过继承 textwebsockethandler 类并覆盖相应方法，可以对 websocket 的事件进行处理，这里可以同原生注解的那几个注解连起来看\n\n 1. afterconnectionestablished 方法是在 socket 连接成功后被触发，同原生注解里的 @onopen 功能\n 2. afterconnectionclosed 方法是在 socket 连接关闭后被触发，同原生注解里的 @onclose 功能\n 3. handletextmessage 方法是在客户端发送信息时触发，同原生注解里的 @onmessage 功能\n\n\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.web.socket.websocketsession;\n\nimport java.io.ioexception;\nimport java.util.concurrent.concurrenthashmap;\n\n\n@slf4j\npublic class wssessionmanager {\n    /**\n     * 保存连接 session 的地方\n     */\n    private static concurrenthashmap<string, websocketsession> session_pool = new concurrenthashmap<>();\n\n    /**\n     * 添加 session\n     *\n     * @param key\n     */\n    public static void add(string key, websocketsession session) {\n        // 添加 session\n        session_pool.put(key, session);\n    }\n\n    /**\n     * 删除 session,会返回删除的 session\n     *\n     * @param key\n     * @return\n     */\n    public static websocketsession remove(string key) {\n        // 删除 session\n        return session_pool.remove(key);\n    }\n\n    /**\n     * 删除并同步关闭连接\n     *\n     * @param key\n     */\n    public static void removeandclose(string key) {\n        websocketsession session = remove(key);\n        if (session != null) {\n            try {\n                // 关闭连接\n                session.close();\n            } catch (ioexception e) {\n                // todo: 关闭出现异常处理\n                e.printstacktrace();\n            }\n        }\n    }\n\n    /**\n     * 获得 session\n     *\n     * @param key\n     * @return\n     */\n    public static websocketsession get(string key) {\n        // 获得 session\n        return session_pool.get(key);\n    }\n}\n\n\n这里简单通过 concurrenthashmap 来实现了一个 session 池，用来保存已经登录的 web socket 的 session。前文提过，服务端发送消息给客户端必须要通过这个 session。\n\nimport cn.hutool.core.util.strutil;\nimport cn.hutool.http.httputil;\nimport org.springframework.http.server.serverhttprequest;\nimport org.springframework.http.server.serverhttpresponse;\nimport org.springframework.stereotype.component;\nimport org.springframework.web.socket.websockethandler;\nimport org.springframework.web.socket.server.handshakeinterceptor;\n\nimport java.util.hashmap;\nimport java.util.map;\n\n\n@component\npublic class myinterceptor implements handshakeinterceptor {\n\n    /**\n     * 握手前\n     *\n     * @param request\n     * @param response\n     * @param wshandler\n     * @param attributes\n     * @return\n     * @throws exception\n     */\n    @override\n    public boolean beforehandshake(serverhttprequest request, serverhttpresponse response, websockethandler wshandler, map<string, object> attributes) throws exception {\n        system.out.println("握手开始");\n        // 获得请求参数\n        hashmap<string, string> parammap = httputil.decodeparammap(request.geturi().getquery(), "utf-8");\n        string uid = parammap.get("token");\n        if (strutil.isnotblank(uid)) {\n            // 放入属性域\n            attributes.put("token", uid);\n            system.out.println("用户 token " + uid + " 握手成功！");\n            return true;\n        }\n        system.out.println("用户登录已失效");\n        return false;\n    }\n\n    /**\n     * 握手后\n     *\n     * @param request\n     * @param response\n     * @param wshandler\n     * @param exception\n     */\n    @override\n    public void afterhandshake(serverhttprequest request, serverhttpresponse response, websockethandler wshandler, exception exception) {\n        system.out.println("握手完成");\n    }\n}\n\n\n通过实现 handshakeinterceptor 接口来定义握手拦截器，注意这里与上面 handler 的事件是不同的，这里是建立握手时的事件，分为握手前与握手后，而 handler 的事件是在握手成功后的基础上建立 socket 的连接。所以在如果把认证放在这个步骤相对来说最节省服务器资源。它主要有两个方法 beforehandshake 与 afterhandshake ，顾名思义一个在握手前触发，一个在握手后触发。\n\nimport cn.coder4j.study.example.websocket.handler.httpauthhandler;\nimport cn.coder4j.study.example.websocket.interceptor.myinterceptor;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.web.socket.config.annotation.enablewebsocket;\nimport org.springframework.web.socket.config.annotation.websocketconfigurer;\nimport org.springframework.web.socket.config.annotation.websockethandlerregistry;\n\n\n@configuration\n@enablewebsocket\npublic class websocketconfig implements websocketconfigurer {\n\n    @autowired\n    private httpauthhandler httpauthhandler;\n    @autowired\n    private myinterceptor myinterceptor;\n\n    @override\n    public void registerwebsockethandlers(websockethandlerregistry registry) {\n        registry\n                .addhandler(httpauthhandler, "myws")\n                .addinterceptors(myinterceptor)\n                .setallowedorigins("*");\n    }\n}\n\n\n通过实现 websocketconfigurer 类并覆盖相应的方法进行 websocket 的配置。我们主要覆盖 registerwebsockethandlers 这个方法。通过向 websockethandlerregistry 设置不同参数来进行配置。其中 addhandler 方法添加我们上面的写的 ws 的 handler 处理类，第二个参数是你暴露出的 ws 路径。addinterceptors 添加我们写的握手过滤器。setallowedorigins("*") 这个是关闭跨域校验，方便本地调试，线上推荐打开。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.5.netty方式01",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F01.html",relativePath:"zs-tool-框架/消息推送/websocket--3.5.netty方式01.md",key:"v-e5568d98",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F01.html",lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:null,content:'# websocket--3.5.netty方式01\n\n> 依赖配置\n\n\x3c!-- Netty --\x3e\n<dependency>\n    <groupId>io.netty</groupId>\n    <artifactId>netty-all</artifactId>\n    <version>4.1.45.Final</version>\n</dependency>\n\n\n> NettyWebSocketServer\n\npackage com.zs.websocket.netty;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.Future;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\n\n/**\n * Create by 张邵\n * 2024/1/29 09:48\n */\n@Slf4j\n@Configuration\npublic class NettyWebSocketServer {\n    public static final int WEB_SOCKET_PORT = 8090;\n    // 创建线程池执行器\n    private EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n    private EventLoopGroup workerGroup = new NioEventLoopGroup(8);\n\n    /**\n     * 启动 ws server\n     *\n     * @return\n     * @throws InterruptedException\n     */\n    @PostConstruct\n    public void start() throws InterruptedException {\n        run();\n    }\n\n    /**\n     * 销毁\n     */\n    @PreDestroy\n    public void destroy() {\n        Future<?> future = bossGroup.shutdownGracefully();\n        Future<?> future1 = workerGroup.shutdownGracefully();\n        future.syncUninterruptibly();\n        future1.syncUninterruptibly();\n        log.info("关闭 ws server 成功");\n    }\n\n\n    public void run() throws InterruptedException {\n        // 服务器启动引导对象\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .handler(new LoggingHandler(LogLevel.INFO)) // 为 bossGroup 添加 日志处理器\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        ChannelPipeline pipeline = socketChannel.pipeline();\n                        //30秒客户端没有向服务器发送心跳则关闭连接\n//                        pipeline.addLast(new IdleStateHandler(5, 0, 0));\n                        // 因为使用http协议，所以需要使用http的编码器，解码器\n                        pipeline.addLast(new HttpServerCodec());\n                        // 以块方式写，添加 chunkedWriter 处理器\n                        pipeline.addLast(new ChunkedWriteHandler());\n                        /**\n                         * 说明：\n                         *  1. http数据在传输过程中是分段的，HttpObjectAggregator可以把多个段聚合起来；\n                         *  2. 这就是为什么当浏览器发送大量数据时，就会发出多次 http请求的原因\n                         */\n                        pipeline.addLast(new HttpObjectAggregator(8192));\n                        //保存用户ip\n                        pipeline.addLast(new HttpHeadersHandler());\n                        // 自定义handler ，处理业务逻辑\n                        pipeline.addLast(new NettyWebSocketServerHandler());\n                        /**\n                         * 说明：\n                         *  1. 对于 WebSocket，它的数据是以帧frame 的形式传递的；\n                         *  2. 可以看到 WebSocketFrame 下面有6个子类\n                         *  3. 浏览器发送请求时： ws://localhost:7000/hello 表示请求的uri\n                         *  4. WebSocketServerProtocolHandler 核心功能是把 http协议升级为 ws 协议，保持长连接；\n                         *      是通过一个状态码 101 来切换的\n                         */\n                        pipeline.addLast(new WebSocketServerProtocolHandler("/ws"));\n\n                    }\n                });\n        // 启动服务器，监听端口，阻塞直到启动成功\n        serverBootstrap.bind(WEB_SOCKET_PORT).sync();\n        System.out.println("启动成功");\n    }\n}\n\n\n> 处理器\n\npackage com.zs.websocket.netty;\n\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\n\n@Slf4j\npublic class NettyWebSocketServerHandler extends SimpleChannelInboundHandler<TextWebSocketFrame> {\n    \n    /**\n     * 所有已连接的websocket连接列表和一些额外参数\n     */\n    private static final ConcurrentHashMap<Channel, String> ONLINE_WS_MAP = new ConcurrentHashMap<>();\n\n\n    // 当web客户端连接后，触发该方法\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        System.out.println("websocket 连接");\n        ONLINE_WS_MAP.put(ctx.channel(), "1");\n    }\n\n    // 客户端离线\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n        userOffLine(ctx);\n    }\n    /**\n     * 取消绑定\n     *\n     * @param ctx\n     * @throws Exception\n     */\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        // 可能出现业务判断离线后再次触发 channelInactive\n        log.warn("触发 channelInactive 掉线![{}]", ctx.channel().id());\n        userOffLine(ctx);\n    }\n\n    private void userOffLine(ChannelHandlerContext ctx) {\n        System.out.println("websocket 断开连接");\n        ONLINE_WS_MAP.remove(ctx.channel());\n        ctx.channel().close();\n    }\n\n    /**\n     * 心跳检查\n     *\n     * @param ctx\n     * @param evt\n     * @throws Exception\n     */\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n        if (evt instanceof IdleStateEvent) {\n            IdleStateEvent idleStateEvent = (IdleStateEvent) evt;\n            // 读空闲\n            if (idleStateEvent.state() == IdleState.READER_IDLE) {\n                // 关闭用户的连接\n                userOffLine(ctx);\n            }\n        }\n        super.userEventTriggered(ctx, evt);\n    }\n\n    // 处理异常\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        log.warn("异常发生，异常消息 ={}", cause.getMessage());\n        ctx.channel().close();\n    }\n\n\n    // 读取客户端发送的请求报文\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {\n        System.out.println("服务器收到消息：" + msg.text());\n    }\n}\n\n\n> ip读取\n\npackage com.zs.websocket.netty;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpHeaders;\nimport io.netty.util.AttributeKey;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.net.InetSocketAddress;\n\npublic class HttpHeadersHandler extends ChannelInboundHandlerAdapter {\n    private AttributeKey<String> key = AttributeKey.valueOf("Id");\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof FullHttpRequest) {\n            HttpHeaders headers = ((FullHttpRequest) msg).headers();\n            String ip = headers.get("X-Real-IP");\n            if (StringUtils.isEmpty(ip)) {//如果没经过nginx，就直接获取远端地址\n                InetSocketAddress address = (InetSocketAddress) ctx.channel().remoteAddress();\n                ip = address.getAddress().getHostAddress();\n            }\n            NettyUtil.setAttr(ctx.channel(), NettyUtil.IP, ip);\n        }\n        ctx.fireChannelRead(msg);\n    }\n}\n\n\n> 工具\n\npackage com.zs.websocket.netty;\n\nimport io.netty.channel.Channel;\nimport io.netty.util.Attribute;\nimport io.netty.util.AttributeKey;\n\n/**\n * Description: netty工具类\n */\n\npublic class NettyUtil {\n\n    public static AttributeKey<String> IP = AttributeKey.valueOf("ip");\n\n    public static <T> void setAttr(Channel channel, AttributeKey<T> attributeKey, T data) {\n        Attribute<T> attr = channel.attr(attributeKey);\n        attr.set(data);\n    }\n\n    public static <T> T getAttr(Channel channel, AttributeKey<T> ip) {\n        return channel.attr(ip).get();\n    }\n}\n\n',normalizedContent:'# websocket--3.5.netty方式01\n\n> 依赖配置\n\n\x3c!-- netty --\x3e\n<dependency>\n    <groupid>io.netty</groupid>\n    <artifactid>netty-all</artifactid>\n    <version>4.1.45.final</version>\n</dependency>\n\n\n> nettywebsocketserver\n\npackage com.zs.websocket.netty;\n\nimport io.netty.bootstrap.serverbootstrap;\nimport io.netty.channel.channelinitializer;\nimport io.netty.channel.channeloption;\nimport io.netty.channel.channelpipeline;\nimport io.netty.channel.eventloopgroup;\nimport io.netty.channel.nio.nioeventloopgroup;\nimport io.netty.channel.socket.socketchannel;\nimport io.netty.channel.socket.nio.nioserversocketchannel;\nimport io.netty.handler.codec.http.httpobjectaggregator;\nimport io.netty.handler.codec.http.httpservercodec;\nimport io.netty.handler.codec.http.websocketx.websocketserverprotocolhandler;\nimport io.netty.handler.logging.loglevel;\nimport io.netty.handler.logging.logginghandler;\nimport io.netty.handler.stream.chunkedwritehandler;\nimport io.netty.handler.timeout.idlestatehandler;\nimport io.netty.util.concurrent.future;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.context.annotation.configuration;\n\nimport javax.annotation.postconstruct;\nimport javax.annotation.predestroy;\n\n/**\n * create by 张邵\n * 2024/1/29 09:48\n */\n@slf4j\n@configuration\npublic class nettywebsocketserver {\n    public static final int web_socket_port = 8090;\n    // 创建线程池执行器\n    private eventloopgroup bossgroup = new nioeventloopgroup(1);\n    private eventloopgroup workergroup = new nioeventloopgroup(8);\n\n    /**\n     * 启动 ws server\n     *\n     * @return\n     * @throws interruptedexception\n     */\n    @postconstruct\n    public void start() throws interruptedexception {\n        run();\n    }\n\n    /**\n     * 销毁\n     */\n    @predestroy\n    public void destroy() {\n        future<?> future = bossgroup.shutdowngracefully();\n        future<?> future1 = workergroup.shutdowngracefully();\n        future.syncuninterruptibly();\n        future1.syncuninterruptibly();\n        log.info("关闭 ws server 成功");\n    }\n\n\n    public void run() throws interruptedexception {\n        // 服务器启动引导对象\n        serverbootstrap serverbootstrap = new serverbootstrap();\n        serverbootstrap.group(bossgroup, workergroup)\n                .channel(nioserversocketchannel.class)\n                .option(channeloption.so_backlog, 128)\n                .option(channeloption.so_keepalive, true)\n                .handler(new logginghandler(loglevel.info)) // 为 bossgroup 添加 日志处理器\n                .childhandler(new channelinitializer<socketchannel>() {\n                    @override\n                    protected void initchannel(socketchannel socketchannel) throws exception {\n                        channelpipeline pipeline = socketchannel.pipeline();\n                        //30秒客户端没有向服务器发送心跳则关闭连接\n//                        pipeline.addlast(new idlestatehandler(5, 0, 0));\n                        // 因为使用http协议，所以需要使用http的编码器，解码器\n                        pipeline.addlast(new httpservercodec());\n                        // 以块方式写，添加 chunkedwriter 处理器\n                        pipeline.addlast(new chunkedwritehandler());\n                        /**\n                         * 说明：\n                         *  1. http数据在传输过程中是分段的，httpobjectaggregator可以把多个段聚合起来；\n                         *  2. 这就是为什么当浏览器发送大量数据时，就会发出多次 http请求的原因\n                         */\n                        pipeline.addlast(new httpobjectaggregator(8192));\n                        //保存用户ip\n                        pipeline.addlast(new httpheadershandler());\n                        // 自定义handler ，处理业务逻辑\n                        pipeline.addlast(new nettywebsocketserverhandler());\n                        /**\n                         * 说明：\n                         *  1. 对于 websocket，它的数据是以帧frame 的形式传递的；\n                         *  2. 可以看到 websocketframe 下面有6个子类\n                         *  3. 浏览器发送请求时： ws://localhost:7000/hello 表示请求的uri\n                         *  4. websocketserverprotocolhandler 核心功能是把 http协议升级为 ws 协议，保持长连接；\n                         *      是通过一个状态码 101 来切换的\n                         */\n                        pipeline.addlast(new websocketserverprotocolhandler("/ws"));\n\n                    }\n                });\n        // 启动服务器，监听端口，阻塞直到启动成功\n        serverbootstrap.bind(web_socket_port).sync();\n        system.out.println("启动成功");\n    }\n}\n\n\n> 处理器\n\npackage com.zs.websocket.netty;\n\nimport io.netty.channel.channel;\nimport io.netty.channel.channelhandlercontext;\nimport io.netty.channel.simplechannelinboundhandler;\nimport io.netty.handler.codec.http.websocketx.textwebsocketframe;\nimport io.netty.handler.timeout.idlestate;\nimport io.netty.handler.timeout.idlestateevent;\nimport lombok.extern.slf4j.slf4j;\n\nimport java.util.concurrent.concurrenthashmap;\n\n\n@slf4j\npublic class nettywebsocketserverhandler extends simplechannelinboundhandler<textwebsocketframe> {\n    \n    /**\n     * 所有已连接的websocket连接列表和一些额外参数\n     */\n    private static final concurrenthashmap<channel, string> online_ws_map = new concurrenthashmap<>();\n\n\n    // 当web客户端连接后，触发该方法\n    @override\n    public void handleradded(channelhandlercontext ctx) throws exception {\n        system.out.println("websocket 连接");\n        online_ws_map.put(ctx.channel(), "1");\n    }\n\n    // 客户端离线\n    @override\n    public void handlerremoved(channelhandlercontext ctx) throws exception {\n        useroffline(ctx);\n    }\n    /**\n     * 取消绑定\n     *\n     * @param ctx\n     * @throws exception\n     */\n    @override\n    public void channelinactive(channelhandlercontext ctx) throws exception {\n        // 可能出现业务判断离线后再次触发 channelinactive\n        log.warn("触发 channelinactive 掉线![{}]", ctx.channel().id());\n        useroffline(ctx);\n    }\n\n    private void useroffline(channelhandlercontext ctx) {\n        system.out.println("websocket 断开连接");\n        online_ws_map.remove(ctx.channel());\n        ctx.channel().close();\n    }\n\n    /**\n     * 心跳检查\n     *\n     * @param ctx\n     * @param evt\n     * @throws exception\n     */\n    @override\n    public void usereventtriggered(channelhandlercontext ctx, object evt) throws exception {\n        if (evt instanceof idlestateevent) {\n            idlestateevent idlestateevent = (idlestateevent) evt;\n            // 读空闲\n            if (idlestateevent.state() == idlestate.reader_idle) {\n                // 关闭用户的连接\n                useroffline(ctx);\n            }\n        }\n        super.usereventtriggered(ctx, evt);\n    }\n\n    // 处理异常\n    @override\n    public void exceptioncaught(channelhandlercontext ctx, throwable cause) throws exception {\n        log.warn("异常发生，异常消息 ={}", cause.getmessage());\n        ctx.channel().close();\n    }\n\n\n    // 读取客户端发送的请求报文\n    @override\n    protected void channelread0(channelhandlercontext ctx, textwebsocketframe msg) throws exception {\n        system.out.println("服务器收到消息：" + msg.text());\n    }\n}\n\n\n> ip读取\n\npackage com.zs.websocket.netty;\n\nimport io.netty.channel.channelhandlercontext;\nimport io.netty.channel.channelinboundhandleradapter;\nimport io.netty.handler.codec.http.fullhttprequest;\nimport io.netty.handler.codec.http.httpheaders;\nimport io.netty.util.attributekey;\nimport org.apache.commons.lang3.stringutils;\n\nimport java.net.inetsocketaddress;\n\npublic class httpheadershandler extends channelinboundhandleradapter {\n    private attributekey<string> key = attributekey.valueof("id");\n\n    @override\n    public void channelread(channelhandlercontext ctx, object msg) throws exception {\n        if (msg instanceof fullhttprequest) {\n            httpheaders headers = ((fullhttprequest) msg).headers();\n            string ip = headers.get("x-real-ip");\n            if (stringutils.isempty(ip)) {//如果没经过nginx，就直接获取远端地址\n                inetsocketaddress address = (inetsocketaddress) ctx.channel().remoteaddress();\n                ip = address.getaddress().gethostaddress();\n            }\n            nettyutil.setattr(ctx.channel(), nettyutil.ip, ip);\n        }\n        ctx.firechannelread(msg);\n    }\n}\n\n\n> 工具\n\npackage com.zs.websocket.netty;\n\nimport io.netty.channel.channel;\nimport io.netty.util.attribute;\nimport io.netty.util.attributekey;\n\n/**\n * description: netty工具类\n */\n\npublic class nettyutil {\n\n    public static attributekey<string> ip = attributekey.valueof("ip");\n\n    public static <t> void setattr(channel channel, attributekey<t> attributekey, t data) {\n        attribute<t> attr = channel.attr(attributekey);\n        attr.set(data);\n    }\n\n    public static <t> t getattr(channel channel, attributekey<t> ip) {\n        return channel.attr(ip).get();\n    }\n}\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.5.netty方式02",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F02.html",relativePath:"zs-tool-框架/消息推送/websocket--3.5.netty方式02.md",key:"v-4ab2bff2",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F02.html",lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:null,content:'# websocket--3.5.netty方式02\n\npackage com.zs.websocket.netty2;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Slf4j\n@Component\npublic class NioWebSocketServer implements InitializingBean, DisposableBean {\n\n  @Autowired\n  private WebSocketProperties webSocketProperties;\n  @Autowired\n  private NioWebSocketChannelInitializer webSocketChannelInitializer;\n\n  private EventLoopGroup bossGroup;\n  private EventLoopGroup workGroup;\n  private ChannelFuture channelFuture;\n\n  @Override\n  public void afterPropertiesSet() throws Exception {\n    try {\n      bossGroup = new NioEventLoopGroup(webSocketProperties.getBoss());\n      workGroup = new NioEventLoopGroup(webSocketProperties.getWork());\n\n      ServerBootstrap serverBootstrap = new ServerBootstrap();\n      serverBootstrap.option(ChannelOption.SO_BACKLOG, 1024)\n          .group(bossGroup, workGroup)\n          .channel(NioServerSocketChannel.class)\n          .localAddress(webSocketProperties.getPort())\n          .childHandler(webSocketChannelInitializer);\n\n      channelFuture = serverBootstrap.bind().sync();\n    } finally {\n      if (channelFuture != null && channelFuture.isSuccess()) {\n        log.info("Netty server startup on port: {} (websocket) with context path \'{}\'", webSocketProperties.getPort(), webSocketProperties.getPath());\n      } else {\n        log.error("Netty server startup failed.");\n        if (bossGroup != null)\n          bossGroup.shutdownGracefully().sync();\n        if (workGroup != null)\n          workGroup.shutdownGracefully().sync();\n      }\n    }\n  }\n\n  @Override\n  public void destroy() throws Exception {\n    log.info("Shutting down Netty server...");\n    if (bossGroup != null)\n      bossGroup.shutdownGracefully().sync();\n    if (workGroup != null)\n      workGroup.shutdownGracefully().sync();\n    if (channelFuture != null)\n      channelFuture.channel().closeFuture().syncUninterruptibly();\n    log.info("Netty server shutdown.");\n  }\n}\n\n\n\npackage com.zs.websocket.netty2;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class NioWebSocketChannelInitializer extends ChannelInitializer<SocketChannel> {\n\n  @Autowired\n  private WebSocketProperties webSocketProperties;\n  @Autowired\n  private NioWebSocketHandler nioWebSocketHandler;\n\n  @Override\n  protected void initChannel(SocketChannel socketChannel) {\n    socketChannel.pipeline()\n        .addLast(new HttpServerCodec())\n        .addLast(new ChunkedWriteHandler())\n        .addLast(new HttpObjectAggregator(8192))\n        .addLast(nioWebSocketHandler)\n        .addLast(new WebSocketServerProtocolHandler(webSocketProperties.getPath(), null, true, 65536));\n  }\n}\n\n\npackage com.zs.websocket.netty2;\n\nimport cn.hutool.http.HttpUtil;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.websocketx.*;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\n\n@Slf4j\n@ChannelHandler.Sharable\n@Component\npublic class NioWebSocketHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n\n    @Autowired\n    private NioWebSocketChannelPool webSocketChannelPool;\n    @Autowired\n    private WebSocketProperties webSocketProperties;\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        log.debug("客户端连接：{}", ctx.channel().id());\n        webSocketChannelPool.addChannel(ctx.channel());\n        super.channelActive(ctx);\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        log.debug("客户端断开连接：{}", ctx.channel().id());\n        webSocketChannelPool.removeChannel(ctx.channel());\n        super.channelInactive(ctx);\n    }\n\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) {\n        ctx.channel().flush();\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) {\n        // 根据请求数据类型进行分发处理\n        if (frame instanceof PingWebSocketFrame) {\n            pingWebSocketFrameHandler(ctx, (PingWebSocketFrame) frame);\n        } else if (frame instanceof TextWebSocketFrame) {\n            textWebSocketFrameHandler(ctx, (TextWebSocketFrame) frame);\n        } else if (frame instanceof CloseWebSocketFrame) {\n            closeWebSocketFrameHandler(ctx, (CloseWebSocketFrame) frame);\n        }\n    }\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        log.info("客户端请求数据类型：{}", msg.getClass());\n        if (msg instanceof FullHttpRequest) {\n            fullHttpRequestHandler(ctx, (FullHttpRequest) msg);\n        }\n        super.channelRead(ctx, msg);\n    }\n\n    /**\n     * 处理连接请求，客户端WebSocket发送握手包时会执行这一次请求\n     *\n     * @param ctx\n     * @param request\n     */\n    private void fullHttpRequestHandler(ChannelHandlerContext ctx, FullHttpRequest request) {\n        String uri = request.uri();\n        HashMap<String, String> params = (HashMap<String, String>) HttpUtil.decodeParamMap(uri, StandardCharsets.UTF_8);\n        log.debug("客户端请求参数：{}", params);\n        // 判断请求路径是否跟配置中的一致\n        if (webSocketProperties.getPath().equals(RequestUriUtils.getBasePath(uri)))\n            // 因为有可能携带了参数，导致客户端一直无法返回握手包，因此在校验通过后，重置请求路径\n            request.setUri(webSocketProperties.getPath());\n        else\n            ctx.close();\n    }\n\n    /**\n     * 客户端发送断开请求处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void closeWebSocketFrameHandler(ChannelHandlerContext ctx, CloseWebSocketFrame frame) {\n        ctx.close();\n    }\n\n    /**\n     * 创建连接之后，客户端发送的消息都会在这里处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void textWebSocketFrameHandler(ChannelHandlerContext ctx, TextWebSocketFrame frame) {\n        // 客户端发送过来的内容不进行业务处理，原样返回\n        ctx.channel().writeAndFlush(frame.retain());\n    }\n\n    /**\n     * 处理客户端心跳包\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void pingWebSocketFrameHandler(ChannelHandlerContext ctx, PingWebSocketFrame frame) {\n        ctx.channel().writeAndFlush(new PongWebSocketFrame(frame.content().retain()));\n    }\n}\n\n\n\npackage com.zs.websocket.netty2;\n\nimport io.netty.channel.Channel;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.util.concurrent.GlobalEventExecutor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n@Slf4j\n@Component\npublic class NioWebSocketChannelPool {\n\n  private final ChannelGroup channels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n\n  /**\n   * 新增一个客户端通道\n   *\n   * @param channel\n   */\n  public void addChannel(Channel channel) {\n    channels.add(channel);\n  }\n\n  /**\n   * 移除一个客户端连接通道\n   *\n   * @param channel\n   */\n  public void removeChannel(Channel channel) {\n    channels.remove(channel);\n  }\n\n}\n\n\npackage com.zs.websocket.netty2;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RequestUriUtils {\n\n  /**\n   * 将路径参数转换成Map对象，如果路径参数出现重复参数名，将以最后的参数值为准\n   * @param uri 传入的携带参数的路径\n   * @return\n   */\n  public static Map<String, String> getParams(String uri) {\n    Map<String, String> params = new HashMap<>(10);\n\n    int idx = uri.indexOf("?");\n    if (idx != -1) {\n      String[] paramsArr = uri.substring(idx + 1).split("&");\n\n      for (String param : paramsArr) {\n        idx = param.indexOf("=");\n        params.put(param.substring(0, idx), param.substring(idx + 1));\n      }\n    }\n\n    return params;\n  }\n\n  /**\n   * 获取URI中参数以外部分路径\n   * @param uri\n   * @return\n   */\n  public static String getBasePath(String uri) {\n    if (uri == null || uri.isEmpty())\n      return null;\n\n    int idx = uri.indexOf("?");\n    if (idx == -1)\n      return uri;\n\n    return uri.substring(0, idx);\n  }\n}\n\n\npackage com.zs.websocket.netty2;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\n@ConfigurationProperties(prefix = "chat.websocket")\npublic class WebSocketProperties {\n\n  private Integer port = 8070; // 监听端口\n  private String path = "/ws"; // 请求路径\n  private Integer boss = 2; // bossGroup线程数\n  private Integer work = 2; // workGroup线程数\n}\n',normalizedContent:'# websocket--3.5.netty方式02\n\npackage com.zs.websocket.netty2;\n\nimport io.netty.bootstrap.serverbootstrap;\nimport io.netty.channel.channelfuture;\nimport io.netty.channel.channeloption;\nimport io.netty.channel.eventloopgroup;\nimport io.netty.channel.nio.nioeventloopgroup;\nimport io.netty.channel.socket.nio.nioserversocketchannel;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.beans.factory.disposablebean;\nimport org.springframework.beans.factory.initializingbean;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.component;\n\n@slf4j\n@component\npublic class niowebsocketserver implements initializingbean, disposablebean {\n\n  @autowired\n  private websocketproperties websocketproperties;\n  @autowired\n  private niowebsocketchannelinitializer websocketchannelinitializer;\n\n  private eventloopgroup bossgroup;\n  private eventloopgroup workgroup;\n  private channelfuture channelfuture;\n\n  @override\n  public void afterpropertiesset() throws exception {\n    try {\n      bossgroup = new nioeventloopgroup(websocketproperties.getboss());\n      workgroup = new nioeventloopgroup(websocketproperties.getwork());\n\n      serverbootstrap serverbootstrap = new serverbootstrap();\n      serverbootstrap.option(channeloption.so_backlog, 1024)\n          .group(bossgroup, workgroup)\n          .channel(nioserversocketchannel.class)\n          .localaddress(websocketproperties.getport())\n          .childhandler(websocketchannelinitializer);\n\n      channelfuture = serverbootstrap.bind().sync();\n    } finally {\n      if (channelfuture != null && channelfuture.issuccess()) {\n        log.info("netty server startup on port: {} (websocket) with context path \'{}\'", websocketproperties.getport(), websocketproperties.getpath());\n      } else {\n        log.error("netty server startup failed.");\n        if (bossgroup != null)\n          bossgroup.shutdowngracefully().sync();\n        if (workgroup != null)\n          workgroup.shutdowngracefully().sync();\n      }\n    }\n  }\n\n  @override\n  public void destroy() throws exception {\n    log.info("shutting down netty server...");\n    if (bossgroup != null)\n      bossgroup.shutdowngracefully().sync();\n    if (workgroup != null)\n      workgroup.shutdowngracefully().sync();\n    if (channelfuture != null)\n      channelfuture.channel().closefuture().syncuninterruptibly();\n    log.info("netty server shutdown.");\n  }\n}\n\n\n\npackage com.zs.websocket.netty2;\n\nimport io.netty.channel.channelinitializer;\nimport io.netty.channel.socket.socketchannel;\nimport io.netty.handler.codec.http.httpobjectaggregator;\nimport io.netty.handler.codec.http.httpservercodec;\nimport io.netty.handler.codec.http.websocketx.websocketserverprotocolhandler;\nimport io.netty.handler.stream.chunkedwritehandler;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.component;\n\n@component\npublic class niowebsocketchannelinitializer extends channelinitializer<socketchannel> {\n\n  @autowired\n  private websocketproperties websocketproperties;\n  @autowired\n  private niowebsockethandler niowebsockethandler;\n\n  @override\n  protected void initchannel(socketchannel socketchannel) {\n    socketchannel.pipeline()\n        .addlast(new httpservercodec())\n        .addlast(new chunkedwritehandler())\n        .addlast(new httpobjectaggregator(8192))\n        .addlast(niowebsockethandler)\n        .addlast(new websocketserverprotocolhandler(websocketproperties.getpath(), null, true, 65536));\n  }\n}\n\n\npackage com.zs.websocket.netty2;\n\nimport cn.hutool.http.httputil;\nimport io.netty.channel.channelhandler;\nimport io.netty.channel.channelhandlercontext;\nimport io.netty.channel.simplechannelinboundhandler;\nimport io.netty.handler.codec.http.fullhttprequest;\nimport io.netty.handler.codec.http.websocketx.*;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.component;\n\nimport java.nio.charset.charset;\nimport java.nio.charset.standardcharsets;\nimport java.util.hashmap;\n\n@slf4j\n@channelhandler.sharable\n@component\npublic class niowebsockethandler extends simplechannelinboundhandler<websocketframe> {\n\n    @autowired\n    private niowebsocketchannelpool websocketchannelpool;\n    @autowired\n    private websocketproperties websocketproperties;\n\n    @override\n    public void channelactive(channelhandlercontext ctx) throws exception {\n        log.debug("客户端连接：{}", ctx.channel().id());\n        websocketchannelpool.addchannel(ctx.channel());\n        super.channelactive(ctx);\n    }\n\n    @override\n    public void channelinactive(channelhandlercontext ctx) throws exception {\n        log.debug("客户端断开连接：{}", ctx.channel().id());\n        websocketchannelpool.removechannel(ctx.channel());\n        super.channelinactive(ctx);\n    }\n\n    @override\n    public void channelreadcomplete(channelhandlercontext ctx) {\n        ctx.channel().flush();\n    }\n\n    @override\n    protected void channelread0(channelhandlercontext ctx, websocketframe frame) {\n        // 根据请求数据类型进行分发处理\n        if (frame instanceof pingwebsocketframe) {\n            pingwebsocketframehandler(ctx, (pingwebsocketframe) frame);\n        } else if (frame instanceof textwebsocketframe) {\n            textwebsocketframehandler(ctx, (textwebsocketframe) frame);\n        } else if (frame instanceof closewebsocketframe) {\n            closewebsocketframehandler(ctx, (closewebsocketframe) frame);\n        }\n    }\n\n    @override\n    public void channelread(channelhandlercontext ctx, object msg) throws exception {\n        log.info("客户端请求数据类型：{}", msg.getclass());\n        if (msg instanceof fullhttprequest) {\n            fullhttprequesthandler(ctx, (fullhttprequest) msg);\n        }\n        super.channelread(ctx, msg);\n    }\n\n    /**\n     * 处理连接请求，客户端websocket发送握手包时会执行这一次请求\n     *\n     * @param ctx\n     * @param request\n     */\n    private void fullhttprequesthandler(channelhandlercontext ctx, fullhttprequest request) {\n        string uri = request.uri();\n        hashmap<string, string> params = (hashmap<string, string>) httputil.decodeparammap(uri, standardcharsets.utf_8);\n        log.debug("客户端请求参数：{}", params);\n        // 判断请求路径是否跟配置中的一致\n        if (websocketproperties.getpath().equals(requesturiutils.getbasepath(uri)))\n            // 因为有可能携带了参数，导致客户端一直无法返回握手包，因此在校验通过后，重置请求路径\n            request.seturi(websocketproperties.getpath());\n        else\n            ctx.close();\n    }\n\n    /**\n     * 客户端发送断开请求处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void closewebsocketframehandler(channelhandlercontext ctx, closewebsocketframe frame) {\n        ctx.close();\n    }\n\n    /**\n     * 创建连接之后，客户端发送的消息都会在这里处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void textwebsocketframehandler(channelhandlercontext ctx, textwebsocketframe frame) {\n        // 客户端发送过来的内容不进行业务处理，原样返回\n        ctx.channel().writeandflush(frame.retain());\n    }\n\n    /**\n     * 处理客户端心跳包\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void pingwebsocketframehandler(channelhandlercontext ctx, pingwebsocketframe frame) {\n        ctx.channel().writeandflush(new pongwebsocketframe(frame.content().retain()));\n    }\n}\n\n\n\npackage com.zs.websocket.netty2;\n\nimport io.netty.channel.channel;\nimport io.netty.channel.group.channelgroup;\nimport io.netty.channel.group.defaultchannelgroup;\nimport io.netty.util.concurrent.globaleventexecutor;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.stereotype.component;\n\n@slf4j\n@component\npublic class niowebsocketchannelpool {\n\n  private final channelgroup channels = new defaultchannelgroup(globaleventexecutor.instance);\n\n  /**\n   * 新增一个客户端通道\n   *\n   * @param channel\n   */\n  public void addchannel(channel channel) {\n    channels.add(channel);\n  }\n\n  /**\n   * 移除一个客户端连接通道\n   *\n   * @param channel\n   */\n  public void removechannel(channel channel) {\n    channels.remove(channel);\n  }\n\n}\n\n\npackage com.zs.websocket.netty2;\n\nimport java.util.hashmap;\nimport java.util.map;\n\npublic class requesturiutils {\n\n  /**\n   * 将路径参数转换成map对象，如果路径参数出现重复参数名，将以最后的参数值为准\n   * @param uri 传入的携带参数的路径\n   * @return\n   */\n  public static map<string, string> getparams(string uri) {\n    map<string, string> params = new hashmap<>(10);\n\n    int idx = uri.indexof("?");\n    if (idx != -1) {\n      string[] paramsarr = uri.substring(idx + 1).split("&");\n\n      for (string param : paramsarr) {\n        idx = param.indexof("=");\n        params.put(param.substring(0, idx), param.substring(idx + 1));\n      }\n    }\n\n    return params;\n  }\n\n  /**\n   * 获取uri中参数以外部分路径\n   * @param uri\n   * @return\n   */\n  public static string getbasepath(string uri) {\n    if (uri == null || uri.isempty())\n      return null;\n\n    int idx = uri.indexof("?");\n    if (idx == -1)\n      return uri;\n\n    return uri.substring(0, idx);\n  }\n}\n\n\npackage com.zs.websocket.netty2;\n\nimport lombok.getter;\nimport lombok.setter;\nimport org.springframework.boot.context.properties.configurationproperties;\nimport org.springframework.stereotype.component;\n\n@getter\n@setter\n@component\n@configurationproperties(prefix = "chat.websocket")\npublic class websocketproperties {\n\n  private integer port = 8070; // 监听端口\n  private string path = "/ws"; // 请求路径\n  private integer boss = 2; // bossgroup线程数\n  private integer work = 2; // workgroup线程数\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.xx集群方案",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.xx%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html",relativePath:"zs-tool-框架/消息推送/websocket--3.xx集群方案.md",key:"v-76707720",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.xx%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html",lastUpdated:"2024年1月30日星期二晚上6点46分",lastUpdatedTimestamp:1706611609e3,headersStr:null,content:"# websocket--3.xx集群方案\n\nhttps://mp.weixin.qq.com/s/5ZUn41iVnJi3_kQ1wW5v6w\n\nhttps://lawrenceli.me/blog/websocket-cluster\n\nhttps://github.com/la3rence/websocket-cluster",normalizedContent:"# websocket--3.xx集群方案\n\nhttps://mp.weixin.qq.com/s/5zun41ivnji3_kq1ww5v6w\n\nhttps://lawrenceli.me/blog/websocket-cluster\n\nhttps://github.com/la3rence/websocket-cluster",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.6.redis发布订阅广播集群",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.6.redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%B9%BF%E6%92%AD%E9%9B%86%E7%BE%A4.html",relativePath:"zs-tool-框架/消息推送/websocket--3.6.redis发布订阅广播集群.md",key:"v-00ab95a5",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.6.redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%B9%BF%E6%92%AD%E9%9B%86%E7%BE%A4.html",headers:[{level:2,title:"redis发布订阅",slug:"redis发布订阅",normalizedTitle:"redis发布订阅",charIndex:17}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"redis发布订阅",content:'# websocket--3.6.redis发布订阅广播集群\n\n\n\n\n# redis发布订阅\n\npackage com.zs.websocket.redis.config;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport com.zs.websocket.redis.listen.CatListener;\nimport com.zs.websocket.redis.listen.ChatListener;\nimport com.zs.websocket.redis.listen.FishListener;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.listener.PatternTopic;\nimport org.springframework.data.redis.listener.RedisMessageListenerContainer;\nimport org.springframework.data.redis.listener.adapter.MessageListenerAdapter;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n\nimport java.util.Arrays;\n\n@SuppressWarnings({"all"})\n@Configuration\n@EnableCaching\npublic class CacheConfig extends CachingConfigurerSupport {\n\n\n    /**\n     * redis消息监听器容器\n     * 可以添加多个监听不同话题的redis监听器，只需要把消息监听器和相应的消息订阅处理器绑定，该消息监听器\n     * 通过反射技术调用消息订阅处理器的相关方法进行一些业务处理\n     * @param connectionFactory\n     * @param listenerAdapter\n     * @return\n     */\n    @Bean\n    //相当于xml中的bean\n    RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory,\n                                            MessageListenerAdapter ChatAdapter) {\n        RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n        container.setConnectionFactory(connectionFactory);\n        //订阅了一个叫chat 的通道\n        container.addMessageListener(ChatAdapter, new PatternTopic("chat"));\n        //这个container 可以添加多个 messageListener\n        return container;\n    }\n\n    /**\n     * 消息监听器适配器，绑定消息处理器\n     *\n     * @param receiver\n     * @return\n     */\n    @Bean\n    MessageListenerAdapter ChatAdapter() {\n        return new MessageListenerAdapter(new ChatListener());\n    }\n\n\n    /**\n     * redis 读取内容的template\n     */\n    @Bean\n    StringRedisTemplate stringRedisTemplate(RedisConnectionFactory connectionFactory) {\n        return new StringRedisTemplate(connectionFactory);\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n\n        //定义value的序列化方式\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n\n\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.setHashKeySerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n\n\npackage com.zs.websocket.redis.listen;\n\nimport cn.hutool.json.JSONObject;\nimport cn.hutool.json.JSONUtil;\nimport com.zs.websocket.netty.handler.NettyUtil;\nimport com.zs.websocket.netty.handler.NioWebSocketHandler;\nimport io.netty.channel.Channel;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.util.AttributeKey;\nimport org.springframework.data.redis.connection.Message;\nimport org.springframework.data.redis.connection.MessageListener;\n\nimport java.util.Enumeration;\nimport java.util.concurrent.ConcurrentHashMap;\n\n\npublic class ChatListener implements MessageListener {\n\n    @Override\n    public void onMessage(Message message, byte[] bytes) {\n        ConcurrentHashMap<Channel, String> onlineWsMap = NioWebSocketHandler.ONLINE_WS_MAP;\n        JSONObject entries = JSONUtil.parseObj(message.toString());\n        //使用迭代器循环onlineWsMap\n        onlineWsMap.forEach((k,v) ->{\n            String id = entries.getStr("id");\n            if (id.equals(NettyUtil.getAttr(k, AttributeKey.valueOf("id")))) {\n                k.writeAndFlush(new TextWebSocketFrame(message.toString()));\n            }\n        });\n        //System.out.println("chat 监听器：" + message.toString());\n    }\n}\n\n\npackage com.zs.websocket.redis.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n\n@EnableScheduling //开启定时器功能\n@Component\npublic class MessageSender {\n\n    @Autowired\n    @Resource(name = "stringRedisTemplate")\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Scheduled(fixedRate = 2000) //间隔2s 通过StringRedisTemplate对象向redis消息队列cat频道发布消息\n    public void sendCatMessage(){\n        stringRedisTemplate.convertAndSend("chat","{\\"id\\":\\"1\\",\\"data\\":\\"我是发送到客户端1的消息\\"}");\n    }\n\n\n\n\n    @Scheduled(fixedRate = 1000) //间隔1s 通过StringRedisTemplate对象向redis消息队列fish频道发布消息\n    public void sendFishMessage(){\n        stringRedisTemplate.convertAndSend("chat","{\\"id\\":\\"2\\",\\"data\\":\\"我是发送到客户端2的消息\\"}");\n    }\n\n}\n',normalizedContent:'# websocket--3.6.redis发布订阅广播集群\n\n\n\n\n# redis发布订阅\n\npackage com.zs.websocket.redis.config;\n\nimport com.fasterxml.jackson.annotation.jsonautodetect;\nimport com.fasterxml.jackson.annotation.propertyaccessor;\nimport com.fasterxml.jackson.databind.objectmapper;\n\nimport com.zs.websocket.redis.listen.catlistener;\nimport com.zs.websocket.redis.listen.chatlistener;\nimport com.zs.websocket.redis.listen.fishlistener;\nimport org.springframework.cache.cachemanager;\nimport org.springframework.cache.annotation.cachingconfigurersupport;\nimport org.springframework.cache.annotation.enablecaching;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.data.redis.cache.rediscachemanager;\nimport org.springframework.data.redis.connection.redisconnectionfactory;\nimport org.springframework.data.redis.core.redistemplate;\nimport org.springframework.data.redis.core.stringredistemplate;\nimport org.springframework.data.redis.listener.patterntopic;\nimport org.springframework.data.redis.listener.redismessagelistenercontainer;\nimport org.springframework.data.redis.listener.adapter.messagelisteneradapter;\nimport org.springframework.data.redis.serializer.jackson2jsonredisserializer;\n\nimport java.util.arrays;\n\n@suppresswarnings({"all"})\n@configuration\n@enablecaching\npublic class cacheconfig extends cachingconfigurersupport {\n\n\n    /**\n     * redis消息监听器容器\n     * 可以添加多个监听不同话题的redis监听器，只需要把消息监听器和相应的消息订阅处理器绑定，该消息监听器\n     * 通过反射技术调用消息订阅处理器的相关方法进行一些业务处理\n     * @param connectionfactory\n     * @param listeneradapter\n     * @return\n     */\n    @bean\n    //相当于xml中的bean\n    redismessagelistenercontainer container(redisconnectionfactory connectionfactory,\n                                            messagelisteneradapter chatadapter) {\n        redismessagelistenercontainer container = new redismessagelistenercontainer();\n        container.setconnectionfactory(connectionfactory);\n        //订阅了一个叫chat 的通道\n        container.addmessagelistener(chatadapter, new patterntopic("chat"));\n        //这个container 可以添加多个 messagelistener\n        return container;\n    }\n\n    /**\n     * 消息监听器适配器，绑定消息处理器\n     *\n     * @param receiver\n     * @return\n     */\n    @bean\n    messagelisteneradapter chatadapter() {\n        return new messagelisteneradapter(new chatlistener());\n    }\n\n\n    /**\n     * redis 读取内容的template\n     */\n    @bean\n    stringredistemplate stringredistemplate(redisconnectionfactory connectionfactory) {\n        return new stringredistemplate(connectionfactory);\n    }\n\n    @bean\n    public redistemplate<string, string> redistemplate(redisconnectionfactory factory) {\n        stringredistemplate template = new stringredistemplate(factory);\n\n        //定义value的序列化方式\n        jackson2jsonredisserializer jackson2jsonredisserializer = new jackson2jsonredisserializer(object.class);\n        objectmapper om = new objectmapper();\n        om.setvisibility(propertyaccessor.all, jsonautodetect.visibility.any);\n        om.enabledefaulttyping(objectmapper.defaulttyping.non_final);\n        jackson2jsonredisserializer.setobjectmapper(om);\n\n\n        template.setvalueserializer(jackson2jsonredisserializer);\n        template.sethashkeyserializer(jackson2jsonredisserializer);\n        template.afterpropertiesset();\n        return template;\n    }\n}\n\n\npackage com.zs.websocket.redis.listen;\n\nimport cn.hutool.json.jsonobject;\nimport cn.hutool.json.jsonutil;\nimport com.zs.websocket.netty.handler.nettyutil;\nimport com.zs.websocket.netty.handler.niowebsockethandler;\nimport io.netty.channel.channel;\nimport io.netty.handler.codec.http.websocketx.textwebsocketframe;\nimport io.netty.util.attributekey;\nimport org.springframework.data.redis.connection.message;\nimport org.springframework.data.redis.connection.messagelistener;\n\nimport java.util.enumeration;\nimport java.util.concurrent.concurrenthashmap;\n\n\npublic class chatlistener implements messagelistener {\n\n    @override\n    public void onmessage(message message, byte[] bytes) {\n        concurrenthashmap<channel, string> onlinewsmap = niowebsockethandler.online_ws_map;\n        jsonobject entries = jsonutil.parseobj(message.tostring());\n        //使用迭代器循环onlinewsmap\n        onlinewsmap.foreach((k,v) ->{\n            string id = entries.getstr("id");\n            if (id.equals(nettyutil.getattr(k, attributekey.valueof("id")))) {\n                k.writeandflush(new textwebsocketframe(message.tostring()));\n            }\n        });\n        //system.out.println("chat 监听器：" + message.tostring());\n    }\n}\n\n\npackage com.zs.websocket.redis.service;\n\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.data.redis.core.stringredistemplate;\nimport org.springframework.scheduling.annotation.enablescheduling;\nimport org.springframework.scheduling.annotation.scheduled;\nimport org.springframework.stereotype.component;\n\nimport javax.annotation.resource;\n\n\n@enablescheduling //开启定时器功能\n@component\npublic class messagesender {\n\n    @autowired\n    @resource(name = "stringredistemplate")\n    private stringredistemplate stringredistemplate;\n\n    @scheduled(fixedrate = 2000) //间隔2s 通过stringredistemplate对象向redis消息队列cat频道发布消息\n    public void sendcatmessage(){\n        stringredistemplate.convertandsend("chat","{\\"id\\":\\"1\\",\\"data\\":\\"我是发送到客户端1的消息\\"}");\n    }\n\n\n\n\n    @scheduled(fixedrate = 1000) //间隔1s 通过stringredistemplate对象向redis消息队列fish频道发布消息\n    public void sendfishmessage(){\n        stringredistemplate.convertandsend("chat","{\\"id\\":\\"2\\",\\"data\\":\\"我是发送到客户端2的消息\\"}");\n    }\n\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"消息推送技术方案",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.html",relativePath:"zs-tool-框架/消息推送/消息推送技术方案.md",key:"v-6d876532",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.html",headers:[{level:2,title:"集群环境",slug:"集群环境",normalizedTitle:"集群环境",charIndex:808},{level:2,title:"其他处理",slug:"其他处理",normalizedTitle:"其他处理",charIndex:888}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"集群环境 其他处理",content:"# 消息推送技术方案\n\n在Web应用中，有几种实时数据推送的选择方案，包括SSE（Server-Sent Events）、WebSocket、长轮询等。\n\n * SSE （Server-Sent Events）是一种基于HTTP协议的服务器向客户端推送数据的技术。 允许服务器将数据以事件流（Event Stream）的形式发送给客户端。 与传统的轮询和长轮询相比，SSE提供了更高效和实时的数据推送机制。 客户端通过建立持久的HTTP连接，并监听事件流，可以实时接收服务器推送的数据。 特点：\n   \n   * 简单易用：SSE使用基于文本的数据格式，如纯文本、JSON等，使得数据的发送和解析都相对简单。\n   * 单向通信：SSE支持服务器向客户端的单向通信，服务器可以主动推送数据给客户端。\n   * 实时性：SSE建立长时间的连接，使得服务器可以实时地将数据推送给客户端，而无需客户端频繁地发起请求。\n\n * WebSocket 是一种双向通信模型，允许客户端和服务器之间互相发送消息。 它的优点是实时性强、延迟低，但是需要服务器端支持对应的协议栈，实现起来相对复杂一些。\n\n * 长轮询 是对短轮询的一种改进版本，通过在尽可能减少对服务器资源浪费的同时，保证消息的相对实时性。 长轮询在客户端发起请求时，服务器会保持连接打开，等待一定时间后再返回响应。 这样可以减少客户端频繁的请求，节省带宽和服务器资源。 但是，如果服务器没有新的消息产生，客户端会一直等待响应，实时性就会受到一定影响。\n\n根据实际应用场景和需求，可以选择适合的实时数据推送方案。\n\n如果只需要服务器向客户端推送数据，且对实时性要求不是特别高，可以选择SSE。\n\n如果需要客户端向服务器发送数据，或者对实时性要求较高，可以选择WebSocket或长轮询。\n\n当然，也可以根据实际情况将这几种方案结合起来使用，以满足不同的需求。\n\n\n# 集群环境\n\nhttp://t.csdnimg.cn/klzJV\n\nhttps://juejin.cn/post/7224060318652153913\n\n\n# 其他处理\n\nhttps://support.huaweicloud.com/api-obs/obs_04_0107.html",normalizedContent:"# 消息推送技术方案\n\n在web应用中，有几种实时数据推送的选择方案，包括sse（server-sent events）、websocket、长轮询等。\n\n * sse （server-sent events）是一种基于http协议的服务器向客户端推送数据的技术。 允许服务器将数据以事件流（event stream）的形式发送给客户端。 与传统的轮询和长轮询相比，sse提供了更高效和实时的数据推送机制。 客户端通过建立持久的http连接，并监听事件流，可以实时接收服务器推送的数据。 特点：\n   \n   * 简单易用：sse使用基于文本的数据格式，如纯文本、json等，使得数据的发送和解析都相对简单。\n   * 单向通信：sse支持服务器向客户端的单向通信，服务器可以主动推送数据给客户端。\n   * 实时性：sse建立长时间的连接，使得服务器可以实时地将数据推送给客户端，而无需客户端频繁地发起请求。\n\n * websocket 是一种双向通信模型，允许客户端和服务器之间互相发送消息。 它的优点是实时性强、延迟低，但是需要服务器端支持对应的协议栈，实现起来相对复杂一些。\n\n * 长轮询 是对短轮询的一种改进版本，通过在尽可能减少对服务器资源浪费的同时，保证消息的相对实时性。 长轮询在客户端发起请求时，服务器会保持连接打开，等待一定时间后再返回响应。 这样可以减少客户端频繁的请求，节省带宽和服务器资源。 但是，如果服务器没有新的消息产生，客户端会一直等待响应，实时性就会受到一定影响。\n\n根据实际应用场景和需求，可以选择适合的实时数据推送方案。\n\n如果只需要服务器向客户端推送数据，且对实时性要求不是特别高，可以选择sse。\n\n如果需要客户端向服务器发送数据，或者对实时性要求较高，可以选择websocket或长轮询。\n\n当然，也可以根据实际情况将这几种方案结合起来使用，以满足不同的需求。\n\n\n# 集群环境\n\nhttp://t.csdnimg.cn/klzjv\n\nhttps://juejin.cn/post/7224060318652153913\n\n\n# 其他处理\n\nhttps://support.huaweicloud.com/api-obs/obs_04_0107.html",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706153719e3},{title:"websocket--3.5.netty方式03",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F03.html",relativePath:"zs-tool-框架/消息推送/websocket--3.5.netty方式03.md",key:"v-0810c6b0",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.5.netty%E6%96%B9%E5%BC%8F03.html",headers:[{level:2,title:"core",slug:"core",normalizedTitle:"core",charIndex:31},{level:2,title:"handler",slug:"handler",normalizedTitle:"handler",charIndex:3369}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"core handler",content:'# websocket--3.5.netty方式03\n\n\n# core\n\npackage com.zs.websocket.netty.core;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\n\n@Slf4j\n@Configuration\npublic class NettyWebSocketServer implements InitializingBean, DisposableBean {\n    @Autowired\n    private WebSocketProperties webSocketProperties;\n\n    @Autowired\n    private NioWebSocketChannelInitializer webSocketChannelInitializer;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workGroup;\n    private ChannelFuture channelFuture;\n\n    /**\n     * 初始化时机早于@PostConstruct或者xml的init-method\n     *\n     * @throws Exception\n     */\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        try {\n            bossGroup = new NioEventLoopGroup(webSocketProperties.getBoss());\n            workGroup = new NioEventLoopGroup(webSocketProperties.getWork());\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap\n                    //半连接 + 全连接 > SO_BACKLOG 时会被拒绝\n                    .option(ChannelOption.SO_BACKLOG, 1024)\n                    //用于剔除失效连接\n                    .option(ChannelOption.SO_KEEPALIVE, true)\n                    //分工 boss 只负责 ServerSocketChannel 上accept事件 worker 只负责 socketChannel 上的读写\n                    //可以理解为：线程池 + Selector\n                    .group(bossGroup, workGroup)\n                    //选择服务 Scoket 实现类,其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现\n                    .channel(NioServerSocketChannel.class)\n                    //配置启动端口\n                    .localAddress(webSocketProperties.getPort())\n                    // childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel\n                    .childHandler(webSocketChannelInitializer);\n            //启动服务器，监听端口，阻塞直到启动成功\n            channelFuture = serverBootstrap.bind().sync();\n        } finally {\n            if (channelFuture != null && channelFuture.isSuccess()) {\n                log.info("netty服务启动端口: {} (websocket) 连接地址 \'{}\'", webSocketProperties.getPort(), webSocketProperties.getPath());\n            } else {\n                log.error("netty服务启动失败");\n                if (bossGroup != null)\n                    bossGroup.shutdownGracefully().sync();\n                if (workGroup != null)\n                    workGroup.shutdownGracefully().sync();\n            }\n        }\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        log.info("Shutting down Netty server...");\n        if (bossGroup != null)\n            bossGroup.shutdownGracefully().sync();\n        if (workGroup != null)\n            workGroup.shutdownGracefully().sync();\n        if (channelFuture != null)\n            channelFuture.channel().closeFuture().syncUninterruptibly();\n        log.info("Netty server shutdown.");\n    }\n\n}\n\n\npackage com.zs.websocket.netty.core;\n\nimport com.zs.websocket.netty.core.WebSocketProperties;\nimport com.zs.websocket.netty.handler.NioWebSocketHandler;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class NioWebSocketChannelInitializer extends ChannelInitializer<SocketChannel> {\n\n    @Autowired\n    private WebSocketProperties webSocketProperties;\n    @Autowired\n    private NioWebSocketHandler nioWebSocketHandler;\n\n    @Override\n    protected void initChannel(SocketChannel socketChannel) {\n        socketChannel.pipeline()\n                // 因为使用http协议，所以需要使用http的编码器，解码器\n                .addLast(new HttpServerCodec())\n                // 以块方式写，添加 chunkedWriter 处理器\n                .addLast(new ChunkedWriteHandler())\n                /**\n                 * 说明：\n                 *  1. http数据在传输过程中是分段的，HttpObjectAggregator可以把多个段聚合起来；\n                 *  2. 这就是为什么当浏览器发送大量数据时，就会发出多次 http请求的原因\n                 */\n                .addLast(new HttpObjectAggregator(8192))\n                // 自定义handler ，处理业务逻辑\n                .addLast(nioWebSocketHandler)\n                /**\n                 * 说明：\n                 *  1. 对于 WebSocket，它的数据是以帧frame 的形式传递的；\n                 *  2. 可以看到 WebSocketFrame 下面有6个子类\n                 *  3. 浏览器发送请求时： ws://localhost:7000/hello 表示请求的uri\n                 *  4. WebSocketServerProtocolHandler 核心功能是把 http协议升级为 ws 协议，保持长连接；\n                 *      是通过一个状态码 101 来切换的\n                 */\n                .addLast(new WebSocketServerProtocolHandler(webSocketProperties.getPath(), null, true, 65536));\n    }\n}\n\n\npackage com.zs.websocket.netty.core;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RequestUriUtils {\n\n  /**\n   * 将路径参数转换成Map对象，如果路径参数出现重复参数名，将以最后的参数值为准\n   * @param uri 传入的携带参数的路径\n   * @return\n   */\n  public static Map<String, String> getParams(String uri) {\n    Map<String, String> params = new HashMap<>(10);\n\n    int idx = uri.indexOf("?");\n    if (idx != -1) {\n      String[] paramsArr = uri.substring(idx + 1).split("&");\n\n      for (String param : paramsArr) {\n        idx = param.indexOf("=");\n        params.put(param.substring(0, idx), param.substring(idx + 1));\n      }\n    }\n\n    return params;\n  }\n\n  /**\n   * 获取URI中参数以外部分路径\n   * @param uri\n   * @return\n   */\n  public static String getBasePath(String uri) {\n    if (uri == null || uri.isEmpty())\n      return null;\n\n    int idx = uri.indexOf("?");\n    if (idx == -1)\n      return uri;\n\n    return uri.substring(0, idx);\n  }\n\n}\n\n\npackage com.zs.websocket.netty.core;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\n@ConfigurationProperties(prefix = "chat.websocket")\npublic class WebSocketProperties {\n\n  private Integer port = 8070; // 监听端口\n  private String path = "/ws"; // 请求路径\n  private Integer boss = 2; // bossGroup线程数\n  private Integer work = 8; // workGroup线程数\n}\n\n\n\n# handler\n\npackage com.zs.websocket.netty.handler;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpHeaders;\nimport io.netty.util.AttributeKey;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.net.InetSocketAddress;\n\npublic class HttpHeadersHandler extends ChannelInboundHandlerAdapter {\n    private AttributeKey<String> key = AttributeKey.valueOf("Id");\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof FullHttpRequest) {\n            HttpHeaders headers = ((FullHttpRequest) msg).headers();\n            String ip = headers.get("X-Real-IP");\n            if (StringUtils.isEmpty(ip)) {//如果没经过nginx，就直接获取远端地址\n                InetSocketAddress address = (InetSocketAddress) ctx.channel().remoteAddress();\n                ip = address.getAddress().getHostAddress();\n            }\n            NettyUtil.setAttr(ctx.channel(), NettyUtil.IP, ip);\n        }\n        ctx.fireChannelRead(msg);\n    }\n}\n\n\npackage com.zs.websocket.netty.handler;\n\nimport io.netty.channel.Channel;\nimport io.netty.util.Attribute;\nimport io.netty.util.AttributeKey;\n\n/**\n * Description: netty工具类\n */\n\npublic class NettyUtil {\n\n    public static AttributeKey<String> IP = AttributeKey.valueOf("ip");\n\n    public static <T> void setAttr(Channel channel, AttributeKey<T> attributeKey, T data) {\n        Attribute<T> attr = channel.attr(attributeKey);\n        attr.set(data);\n    }\n\n    public static <T> T getAttr(Channel channel, AttributeKey<T> ip) {\n        return channel.attr(ip).get();\n    }\n}\n\n\npackage com.zs.websocket.netty.handler;\n\nimport cn.hutool.http.HttpUtil;\nimport com.zs.websocket.netty.core.RequestUriUtils;\nimport com.zs.websocket.netty.core.WebSocketProperties;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Slf4j\n@ChannelHandler.Sharable\n@Component\npublic class NioWebSocketHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n\n    @Autowired\n    private WebSocketProperties webSocketProperties;\n\n    /**\n     * 所有已连接的websocket连接列表和一些额外参数\n     */\n    private static final ConcurrentHashMap<Channel, String> ONLINE_WS_MAP = new ConcurrentHashMap<>();\n\n\n\n    //======================================================================\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        log.debug("客户端连接：{}", ctx.channel().id());\n        ONLINE_WS_MAP.put(ctx.channel(), ctx.channel().id().asLongText());\n        super.channelActive(ctx);\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        log.debug("客户端断开连接：{}", ctx.channel().id());\n        // 可能出现业务判断离线后再次触发 channelInactive\n        log.warn("触发 channelInactive 掉线![{}]", ctx.channel().id());\n        userOffLine(ctx);\n        super.channelInactive(ctx);\n    }\n    // 客户端离线\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n        userOffLine(ctx);\n    }\n    private void userOffLine(ChannelHandlerContext ctx) {\n        log.warn("websocket 断开连接");\n        ONLINE_WS_MAP.remove(ctx.channel());\n        ctx.channel().close();\n    }\n\n    // 处理异常\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        log.warn("异常发生，异常消息 ={}", cause.getMessage());\n        ctx.channel().close();\n    }\n\n    //======================================================================\n\n\n\n    /**\n     * 心跳检查\n     *\n     * @param ctx\n     * @param evt\n     * @throws Exception\n     */\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n        if (evt instanceof IdleStateEvent) {\n            IdleStateEvent idleStateEvent = (IdleStateEvent) evt;\n            // 读空闲\n            if (idleStateEvent.state() == IdleState.READER_IDLE) {\n                // 关闭用户的连接\n                userOffLine(ctx);\n            }\n        }\n        super.userEventTriggered(ctx, evt);\n    }\n\n\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) {\n        ctx.channel().flush();\n    }\n    //======================================================================\n\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) {\n        //System.out.println("服务器收到消息：" + msg.text());\n        // 根据请求数据类型进行分发处理\n        if (frame instanceof PingWebSocketFrame) {\n            pingWebSocketFrameHandler(ctx, (PingWebSocketFrame) frame);\n        } else if (frame instanceof TextWebSocketFrame) {\n            textWebSocketFrameHandler(ctx, (TextWebSocketFrame) frame);\n        } else if (frame instanceof CloseWebSocketFrame) {\n            closeWebSocketFrameHandler(ctx, (CloseWebSocketFrame) frame);\n        }\n\n    }\n\n    /**\n     * 处理客户端心跳包\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void pingWebSocketFrameHandler(ChannelHandlerContext ctx, PingWebSocketFrame frame) {\n        ctx.channel().writeAndFlush(new PongWebSocketFrame(frame.content().retain()));\n    }\n    /**\n     * 创建连接之后，客户端发送的消息都会在这里处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void textWebSocketFrameHandler(ChannelHandlerContext ctx, TextWebSocketFrame frame) {\n        log.debug("服务端接收到消息:{}",frame.text());\n        // 客户端发送过来的内容不进行业务处理，原样返回\n        ctx.channel().writeAndFlush(frame.retain());\n    }\n\n    /**\n     * 客户端发送断开请求处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void closeWebSocketFrameHandler(ChannelHandlerContext ctx, CloseWebSocketFrame frame) {\n        ctx.close();\n    }\n\n    //======================================================================\n\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        log.debug("客户端请求数据类型：{}", msg.getClass());\n        if (msg instanceof FullHttpRequest) {\n            fullHttpRequestHandler(ctx, (FullHttpRequest) msg);\n        }\n        super.channelRead(ctx, msg);\n    }\n    /**\n     * 处理连接请求，客户端WebSocket发送握手包时会执行这一次请求\n     *\n     * @param ctx\n     * @param request\n     */\n    private void fullHttpRequestHandler(ChannelHandlerContext ctx, FullHttpRequest request) {\n        String uri = request.uri();\n        HashMap<String, String> params = (HashMap<String, String>) HttpUtil.decodeParamMap(uri, StandardCharsets.UTF_8);\n        log.debug("客户端请求参数：{}", params);\n        // 判断请求路径是否跟配置中的一致\n        if (webSocketProperties.getPath().equals(RequestUriUtils.getBasePath(uri))) {\n            // 因为有可能携带了参数，导致客户端一直无法返回握手包，因此在校验通过后，重置请求路径\n            request.setUri(webSocketProperties.getPath());\n        }else {\n            log.error("服务地址uri:{}, 客户端连接uri：{}", webSocketProperties.getPath(), RequestUriUtils.getBasePath(uri) + "请检查路径不一致");\n            ctx.close();\n        }\n    }\n}\n',normalizedContent:'# websocket--3.5.netty方式03\n\n\n# core\n\npackage com.zs.websocket.netty.core;\n\nimport io.netty.bootstrap.serverbootstrap;\nimport io.netty.channel.channelfuture;\nimport io.netty.channel.channeloption;\nimport io.netty.channel.eventloopgroup;\nimport io.netty.channel.nio.nioeventloopgroup;\nimport io.netty.channel.socket.nio.nioserversocketchannel;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.beans.factory.disposablebean;\nimport org.springframework.beans.factory.initializingbean;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.context.annotation.configuration;\n\n@slf4j\n@configuration\npublic class nettywebsocketserver implements initializingbean, disposablebean {\n    @autowired\n    private websocketproperties websocketproperties;\n\n    @autowired\n    private niowebsocketchannelinitializer websocketchannelinitializer;\n\n    private eventloopgroup bossgroup;\n    private eventloopgroup workgroup;\n    private channelfuture channelfuture;\n\n    /**\n     * 初始化时机早于@postconstruct或者xml的init-method\n     *\n     * @throws exception\n     */\n    @override\n    public void afterpropertiesset() throws exception {\n        try {\n            bossgroup = new nioeventloopgroup(websocketproperties.getboss());\n            workgroup = new nioeventloopgroup(websocketproperties.getwork());\n\n            serverbootstrap serverbootstrap = new serverbootstrap();\n            serverbootstrap\n                    //半连接 + 全连接 > so_backlog 时会被拒绝\n                    .option(channeloption.so_backlog, 1024)\n                    //用于剔除失效连接\n                    .option(channeloption.so_keepalive, true)\n                    //分工 boss 只负责 serversocketchannel 上accept事件 worker 只负责 socketchannel 上的读写\n                    //可以理解为：线程池 + selector\n                    .group(bossgroup, workgroup)\n                    //选择服务 scoket 实现类,其中 nioserversocketchannel 表示基于 nio 的服务器端实现\n                    .channel(nioserversocketchannel.class)\n                    //配置启动端口\n                    .localaddress(websocketproperties.getport())\n                    // childhandler，是接下来添加的处理器都是给 socketchannel 用的，而不是给 serversocketchannel\n                    .childhandler(websocketchannelinitializer);\n            //启动服务器，监听端口，阻塞直到启动成功\n            channelfuture = serverbootstrap.bind().sync();\n        } finally {\n            if (channelfuture != null && channelfuture.issuccess()) {\n                log.info("netty服务启动端口: {} (websocket) 连接地址 \'{}\'", websocketproperties.getport(), websocketproperties.getpath());\n            } else {\n                log.error("netty服务启动失败");\n                if (bossgroup != null)\n                    bossgroup.shutdowngracefully().sync();\n                if (workgroup != null)\n                    workgroup.shutdowngracefully().sync();\n            }\n        }\n    }\n\n    @override\n    public void destroy() throws exception {\n        log.info("shutting down netty server...");\n        if (bossgroup != null)\n            bossgroup.shutdowngracefully().sync();\n        if (workgroup != null)\n            workgroup.shutdowngracefully().sync();\n        if (channelfuture != null)\n            channelfuture.channel().closefuture().syncuninterruptibly();\n        log.info("netty server shutdown.");\n    }\n\n}\n\n\npackage com.zs.websocket.netty.core;\n\nimport com.zs.websocket.netty.core.websocketproperties;\nimport com.zs.websocket.netty.handler.niowebsockethandler;\nimport io.netty.channel.channelinitializer;\nimport io.netty.channel.socket.socketchannel;\nimport io.netty.handler.codec.http.httpobjectaggregator;\nimport io.netty.handler.codec.http.httpservercodec;\nimport io.netty.handler.codec.http.websocketx.websocketserverprotocolhandler;\nimport io.netty.handler.stream.chunkedwritehandler;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.component;\n\n@component\npublic class niowebsocketchannelinitializer extends channelinitializer<socketchannel> {\n\n    @autowired\n    private websocketproperties websocketproperties;\n    @autowired\n    private niowebsockethandler niowebsockethandler;\n\n    @override\n    protected void initchannel(socketchannel socketchannel) {\n        socketchannel.pipeline()\n                // 因为使用http协议，所以需要使用http的编码器，解码器\n                .addlast(new httpservercodec())\n                // 以块方式写，添加 chunkedwriter 处理器\n                .addlast(new chunkedwritehandler())\n                /**\n                 * 说明：\n                 *  1. http数据在传输过程中是分段的，httpobjectaggregator可以把多个段聚合起来；\n                 *  2. 这就是为什么当浏览器发送大量数据时，就会发出多次 http请求的原因\n                 */\n                .addlast(new httpobjectaggregator(8192))\n                // 自定义handler ，处理业务逻辑\n                .addlast(niowebsockethandler)\n                /**\n                 * 说明：\n                 *  1. 对于 websocket，它的数据是以帧frame 的形式传递的；\n                 *  2. 可以看到 websocketframe 下面有6个子类\n                 *  3. 浏览器发送请求时： ws://localhost:7000/hello 表示请求的uri\n                 *  4. websocketserverprotocolhandler 核心功能是把 http协议升级为 ws 协议，保持长连接；\n                 *      是通过一个状态码 101 来切换的\n                 */\n                .addlast(new websocketserverprotocolhandler(websocketproperties.getpath(), null, true, 65536));\n    }\n}\n\n\npackage com.zs.websocket.netty.core;\n\nimport java.util.hashmap;\nimport java.util.map;\n\npublic class requesturiutils {\n\n  /**\n   * 将路径参数转换成map对象，如果路径参数出现重复参数名，将以最后的参数值为准\n   * @param uri 传入的携带参数的路径\n   * @return\n   */\n  public static map<string, string> getparams(string uri) {\n    map<string, string> params = new hashmap<>(10);\n\n    int idx = uri.indexof("?");\n    if (idx != -1) {\n      string[] paramsarr = uri.substring(idx + 1).split("&");\n\n      for (string param : paramsarr) {\n        idx = param.indexof("=");\n        params.put(param.substring(0, idx), param.substring(idx + 1));\n      }\n    }\n\n    return params;\n  }\n\n  /**\n   * 获取uri中参数以外部分路径\n   * @param uri\n   * @return\n   */\n  public static string getbasepath(string uri) {\n    if (uri == null || uri.isempty())\n      return null;\n\n    int idx = uri.indexof("?");\n    if (idx == -1)\n      return uri;\n\n    return uri.substring(0, idx);\n  }\n\n}\n\n\npackage com.zs.websocket.netty.core;\n\nimport lombok.getter;\nimport lombok.setter;\nimport org.springframework.boot.context.properties.configurationproperties;\nimport org.springframework.stereotype.component;\n\n@getter\n@setter\n@component\n@configurationproperties(prefix = "chat.websocket")\npublic class websocketproperties {\n\n  private integer port = 8070; // 监听端口\n  private string path = "/ws"; // 请求路径\n  private integer boss = 2; // bossgroup线程数\n  private integer work = 8; // workgroup线程数\n}\n\n\n\n# handler\n\npackage com.zs.websocket.netty.handler;\n\nimport io.netty.channel.channelhandlercontext;\nimport io.netty.channel.channelinboundhandleradapter;\nimport io.netty.handler.codec.http.fullhttprequest;\nimport io.netty.handler.codec.http.httpheaders;\nimport io.netty.util.attributekey;\nimport org.apache.commons.lang3.stringutils;\n\nimport java.net.inetsocketaddress;\n\npublic class httpheadershandler extends channelinboundhandleradapter {\n    private attributekey<string> key = attributekey.valueof("id");\n\n    @override\n    public void channelread(channelhandlercontext ctx, object msg) throws exception {\n        if (msg instanceof fullhttprequest) {\n            httpheaders headers = ((fullhttprequest) msg).headers();\n            string ip = headers.get("x-real-ip");\n            if (stringutils.isempty(ip)) {//如果没经过nginx，就直接获取远端地址\n                inetsocketaddress address = (inetsocketaddress) ctx.channel().remoteaddress();\n                ip = address.getaddress().gethostaddress();\n            }\n            nettyutil.setattr(ctx.channel(), nettyutil.ip, ip);\n        }\n        ctx.firechannelread(msg);\n    }\n}\n\n\npackage com.zs.websocket.netty.handler;\n\nimport io.netty.channel.channel;\nimport io.netty.util.attribute;\nimport io.netty.util.attributekey;\n\n/**\n * description: netty工具类\n */\n\npublic class nettyutil {\n\n    public static attributekey<string> ip = attributekey.valueof("ip");\n\n    public static <t> void setattr(channel channel, attributekey<t> attributekey, t data) {\n        attribute<t> attr = channel.attr(attributekey);\n        attr.set(data);\n    }\n\n    public static <t> t getattr(channel channel, attributekey<t> ip) {\n        return channel.attr(ip).get();\n    }\n}\n\n\npackage com.zs.websocket.netty.handler;\n\nimport cn.hutool.http.httputil;\nimport com.zs.websocket.netty.core.requesturiutils;\nimport com.zs.websocket.netty.core.websocketproperties;\nimport io.netty.channel.channel;\nimport io.netty.channel.channelhandler;\nimport io.netty.channel.channelhandlercontext;\nimport io.netty.channel.simplechannelinboundhandler;\nimport io.netty.handler.codec.http.fullhttprequest;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.timeout.idlestate;\nimport io.netty.handler.timeout.idlestateevent;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.component;\n\nimport java.nio.charset.standardcharsets;\nimport java.util.hashmap;\nimport java.util.concurrent.concurrenthashmap;\n\n@slf4j\n@channelhandler.sharable\n@component\npublic class niowebsockethandler extends simplechannelinboundhandler<websocketframe> {\n\n    @autowired\n    private websocketproperties websocketproperties;\n\n    /**\n     * 所有已连接的websocket连接列表和一些额外参数\n     */\n    private static final concurrenthashmap<channel, string> online_ws_map = new concurrenthashmap<>();\n\n\n\n    //======================================================================\n    @override\n    public void channelactive(channelhandlercontext ctx) throws exception {\n        log.debug("客户端连接：{}", ctx.channel().id());\n        online_ws_map.put(ctx.channel(), ctx.channel().id().aslongtext());\n        super.channelactive(ctx);\n    }\n\n    @override\n    public void channelinactive(channelhandlercontext ctx) throws exception {\n        log.debug("客户端断开连接：{}", ctx.channel().id());\n        // 可能出现业务判断离线后再次触发 channelinactive\n        log.warn("触发 channelinactive 掉线![{}]", ctx.channel().id());\n        useroffline(ctx);\n        super.channelinactive(ctx);\n    }\n    // 客户端离线\n    @override\n    public void handlerremoved(channelhandlercontext ctx) throws exception {\n        useroffline(ctx);\n    }\n    private void useroffline(channelhandlercontext ctx) {\n        log.warn("websocket 断开连接");\n        online_ws_map.remove(ctx.channel());\n        ctx.channel().close();\n    }\n\n    // 处理异常\n    @override\n    public void exceptioncaught(channelhandlercontext ctx, throwable cause) throws exception {\n        log.warn("异常发生，异常消息 ={}", cause.getmessage());\n        ctx.channel().close();\n    }\n\n    //======================================================================\n\n\n\n    /**\n     * 心跳检查\n     *\n     * @param ctx\n     * @param evt\n     * @throws exception\n     */\n    @override\n    public void usereventtriggered(channelhandlercontext ctx, object evt) throws exception {\n        if (evt instanceof idlestateevent) {\n            idlestateevent idlestateevent = (idlestateevent) evt;\n            // 读空闲\n            if (idlestateevent.state() == idlestate.reader_idle) {\n                // 关闭用户的连接\n                useroffline(ctx);\n            }\n        }\n        super.usereventtriggered(ctx, evt);\n    }\n\n\n    @override\n    public void channelreadcomplete(channelhandlercontext ctx) {\n        ctx.channel().flush();\n    }\n    //======================================================================\n\n\n    @override\n    protected void channelread0(channelhandlercontext ctx, websocketframe frame) {\n        //system.out.println("服务器收到消息：" + msg.text());\n        // 根据请求数据类型进行分发处理\n        if (frame instanceof pingwebsocketframe) {\n            pingwebsocketframehandler(ctx, (pingwebsocketframe) frame);\n        } else if (frame instanceof textwebsocketframe) {\n            textwebsocketframehandler(ctx, (textwebsocketframe) frame);\n        } else if (frame instanceof closewebsocketframe) {\n            closewebsocketframehandler(ctx, (closewebsocketframe) frame);\n        }\n\n    }\n\n    /**\n     * 处理客户端心跳包\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void pingwebsocketframehandler(channelhandlercontext ctx, pingwebsocketframe frame) {\n        ctx.channel().writeandflush(new pongwebsocketframe(frame.content().retain()));\n    }\n    /**\n     * 创建连接之后，客户端发送的消息都会在这里处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void textwebsocketframehandler(channelhandlercontext ctx, textwebsocketframe frame) {\n        log.debug("服务端接收到消息:{}",frame.text());\n        // 客户端发送过来的内容不进行业务处理，原样返回\n        ctx.channel().writeandflush(frame.retain());\n    }\n\n    /**\n     * 客户端发送断开请求处理\n     *\n     * @param ctx\n     * @param frame\n     */\n    private void closewebsocketframehandler(channelhandlercontext ctx, closewebsocketframe frame) {\n        ctx.close();\n    }\n\n    //======================================================================\n\n\n    @override\n    public void channelread(channelhandlercontext ctx, object msg) throws exception {\n        log.debug("客户端请求数据类型：{}", msg.getclass());\n        if (msg instanceof fullhttprequest) {\n            fullhttprequesthandler(ctx, (fullhttprequest) msg);\n        }\n        super.channelread(ctx, msg);\n    }\n    /**\n     * 处理连接请求，客户端websocket发送握手包时会执行这一次请求\n     *\n     * @param ctx\n     * @param request\n     */\n    private void fullhttprequesthandler(channelhandlercontext ctx, fullhttprequest request) {\n        string uri = request.uri();\n        hashmap<string, string> params = (hashmap<string, string>) httputil.decodeparammap(uri, standardcharsets.utf_8);\n        log.debug("客户端请求参数：{}", params);\n        // 判断请求路径是否跟配置中的一致\n        if (websocketproperties.getpath().equals(requesturiutils.getbasepath(uri))) {\n            // 因为有可能携带了参数，导致客户端一直无法返回握手包，因此在校验通过后，重置请求路径\n            request.seturi(websocketproperties.getpath());\n        }else {\n            log.error("服务地址uri:{}, 客户端连接uri：{}", websocketproperties.getpath(), requesturiutils.getbasepath(uri) + "请检查路径不一致");\n            ctx.close();\n        }\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"websocket--3.7.java客户端",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.7.java%E5%AE%A2%E6%88%B7%E7%AB%AF.html",relativePath:"zs-tool-框架/消息推送/websocket--3.7.java客户端.md",key:"v-58912756",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/websocket--3.7.java%E5%AE%A2%E6%88%B7%E7%AB%AF.html",lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:null,content:'# websocket--3.7.java客户端\n\n<dependency>\n    <groupId>org.java-websocket</groupId>\n    <artifactId>Java-WebSocket</artifactId>\n    <version>1.5.3</version>\n</dependency>\n\n\npackage com.zs.websocket.client;\n\nimport java.net.URI;\n// import com.alibaba.fastjson.JSONObject;\nimport cn.hutool.json.JSONObject;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.enums.ReadyState;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n *  websocket客户端监听类\n * @author 。\n */\npublic class BaseWebsocketClient extends WebSocketClient {\n\n    private static Logger logger = LoggerFactory.getLogger(BaseWebsocketClient.class);\n\n    public BaseWebsocketClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake serverHandshake) {\n        logger.info(">>>>>>>>>>>websocket open");\n\n    }\n\n    @Override\n    public void onMessage(String s) {\n        logger.info(">>>>>>>>>> websocket message");\n        System.out.println(s);\n\n    }\n\n    @Override\n    public void onClose(int i, String s, boolean b) {\n        logger.info(">>>>>>>>>>>websocket close");\n    }\n\n    @Override\n    public void onError(Exception e) {\n        logger.error(">>>>>>>>>websocket error {}",e);\n    }\n\n\n    public static void main(String[] args) {\n        try {\n            BaseWebsocketClient myClient = new BaseWebsocketClient(new URI("ws://127.0.0.1:8090/ws?id=2"));\n            myClient.connect();\n            while (!myClient.getReadyState().equals(ReadyState.OPEN)) {\n                System.out.println("连接中。。。");\n                Thread.sleep(1000);\n            }\n            // 连接成功往websocket服务端发送数据\n            JSONObject object = new JSONObject();\n            object.put("message", "success连接");\n            myClient.send("是我啊");\n            System.out.println("...");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n',normalizedContent:'# websocket--3.7.java客户端\n\n<dependency>\n    <groupid>org.java-websocket</groupid>\n    <artifactid>java-websocket</artifactid>\n    <version>1.5.3</version>\n</dependency>\n\n\npackage com.zs.websocket.client;\n\nimport java.net.uri;\n// import com.alibaba.fastjson.jsonobject;\nimport cn.hutool.json.jsonobject;\nimport org.java_websocket.client.websocketclient;\nimport org.java_websocket.enums.readystate;\nimport org.java_websocket.handshake.serverhandshake;\nimport org.slf4j.logger;\nimport org.slf4j.loggerfactory;\n\n/**\n *  websocket客户端监听类\n * @author 。\n */\npublic class basewebsocketclient extends websocketclient {\n\n    private static logger logger = loggerfactory.getlogger(basewebsocketclient.class);\n\n    public basewebsocketclient(uri serveruri) {\n        super(serveruri);\n    }\n\n    @override\n    public void onopen(serverhandshake serverhandshake) {\n        logger.info(">>>>>>>>>>>websocket open");\n\n    }\n\n    @override\n    public void onmessage(string s) {\n        logger.info(">>>>>>>>>> websocket message");\n        system.out.println(s);\n\n    }\n\n    @override\n    public void onclose(int i, string s, boolean b) {\n        logger.info(">>>>>>>>>>>websocket close");\n    }\n\n    @override\n    public void onerror(exception e) {\n        logger.error(">>>>>>>>>websocket error {}",e);\n    }\n\n\n    public static void main(string[] args) {\n        try {\n            basewebsocketclient myclient = new basewebsocketclient(new uri("ws://127.0.0.1:8090/ws?id=2"));\n            myclient.connect();\n            while (!myclient.getreadystate().equals(readystate.open)) {\n                system.out.println("连接中。。。");\n                thread.sleep(1000);\n            }\n            // 连接成功往websocket服务端发送数据\n            jsonobject object = new jsonobject();\n            object.put("message", "success连接");\n            myclient.send("是我啊");\n            system.out.println("...");\n        } catch (exception e) {\n            e.printstacktrace();\n        }\n    }\n}\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"长轮询--2.1.入门案例01",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E9%95%BF%E8%BD%AE%E8%AF%A2--2.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",relativePath:"zs-tool-框架/消息推送/长轮询--2.1.入门案例01.md",key:"v-14fdb756",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E9%95%BF%E8%BD%AE%E8%AF%A2--2.1.%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B01.html",headers:[{level:2,title:"长轮询的应用",slug:"长轮询的应用",normalizedTitle:"长轮询的应用",charIndex:22},{level:2,title:"念会经",slug:"念会经",normalizedTitle:"念会经",charIndex:35},{level:2,title:"案例摘抄",slug:"案例摘抄",normalizedTitle:"案例摘抄",charIndex:477},{level:3,title:"案例描述",slug:"案例描述",normalizedTitle:"案例描述",charIndex:486},{level:2,title:"NO比比，show me the code",slug:"no比比-show-me-the-code",normalizedTitle:"no比比，show me the code",charIndex:1375},{level:3,title:"方式一：使用map缓存asyncContext对象",slug:"方式一-使用map缓存asynccontext对象",normalizedTitle:"方式一：使用map缓存asynccontext对象",charIndex:1401},{level:3,title:"后端代码",slug:"后端代码",normalizedTitle:"后端代码",charIndex:1433},{level:3,title:"方式二：使用map缓存，使用队列处理",slug:"方式二-使用map缓存-使用队列处理",normalizedTitle:"方式二：使用map缓存，使用队列处理",charIndex:4775}],lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:"长轮询的应用 念会经 案例摘抄 案例描述 NO比比，show me the code 方式一：使用map缓存asyncContext对象 后端代码 方式二：使用map缓存，使用队列处理",content:'# 长轮询--2.1.入门案例01\n\n\n# 长轮询的应用\n\n\n\n\n# 念会经\n\n轮询：说白了就是客户端定时去请求服务端， 是客户端主动请求来促使数据更新；\n\n长轮询：说白了也是客户端请求服务端，但是服务端并不是即时返回，而是当有内容更新的时候才返回内容给客户端，从流程上讲，可以理解为服务器向客户端推送内容；\n\n\n\n这里大家可能会有两个疑问：\n\n 1. 为什么达到时间就返回，既然 是长轮询，为什么不一直hold住请求，直到数据发生变更再返回呢？\n 2. 服务端hold住难道不消耗线程吗，不是线程一直阻塞在那里吗？\n\nServlet3.0提供的AsyncContext 机制。\n\nasyncContext是为了把主线程返回给tomcat线程池，不影响服务对其他客户端请求。会有线程专门处理这个长轮询，但并不是说每一个长轮询的http请求都要用一个线程阻塞在那。而是把长轮询的request的引用在一个集合中存起来，用一个或几个线程专门处理一批客户端的长轮询请求，这样就不需要为每一个长轮询单独分配线程阻塞在那了，从而大大降低了资源的消耗，\n\n\n\n\n# 案例摘抄\n\n\n# 案例描述\n\n\n\n微信扫码登陆，且需要同时关注公众号，需要用到公众号接收事件推送 用户使用手机微信app扫码后微信服务器向后端服务器回调扫码事件，由于前端无法感知到用户手机扫码的行为，所以停留在扫码登陆页面时需要持续轮询后端服务器用户是否已扫码登录，造成服务器的较大压力，于是利用Servlet3.0的异步特性，实现长轮询的方式来通信。\n\n前端扫码登录页面请求后端微信二维码，后端返回微信二维码给前端时附带随机生成的scene_id，前端显示二维码供用户手机微信扫码，前端持续轮询后端用户是否已扫码（上一次轮询未成功登陆为开启下一次轮询的条件），但需带上scene_id以区分扫码用户，此时后端不同步返回前端请求结果，而是以异步响应式的方式等待微信服务器回调后，或是超过指定时间例如30秒后再返回（可能用户打开登陆页面后停留但未成功扫码），大大减少了前端访问后端的次数。\n\n具体方式是，request对象通过startAsync()方法获得异步域对象AsyncContext，此时请求被挂起，并释放Servlet线程。请求异步域对象AsyncContext放入ConcurrentHashMap实现的请求池中，以scene_id为key。\n\n微信服务器回调服务端时会带上扫码事件（登陆为scan，关注为subscribe）以及scene_id、openid，将回调数据包装为响应事件放入响应事件队列中。\n\n使用一个守护线程监听该队列，以阻塞的方式获取队列中的响应事件对象，并调用自定义线程池，根据scene_id从请求池中找到还未响应返回的AsyncContext对象，并从中获得response对象，根据JSON对象中的openId查询到用户信息，然后返回给前端。\n\n如果30s超时后仍未接收到微信服务器的回调，则超时返回响应前端。\n\n相比普通定时轮询，由于采用响应式设计，可以大幅降低前端请求频率和服务器负载，并在事件发生后第一时间通知前端，没有轮询周期空挡导致的延迟，相比websocket则可以并避免浏览器版本过低、网关对长连接的兼容性等问题，实现上也更加简单。\n\n\n# NO比比，show me the code\n\n\n# 方式一：使用map缓存asyncContext对象\n\n\n\n\n# 后端代码\n\npackage com.zs.longpolling.demo03;\n\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.Multimap;\nimport com.google.common.collect.Multimaps;\nimport com.google.common.util.concurrent.ThreadFactoryBuilder;\nimport lombok.Data;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.AsyncContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.TimeUnit;\n\n@RestController\npublic class ConfigServer {\n    @Data\n    private static class AsyncTask {\n        // 长轮询请求的上下文，包含请求和响应体\n        private AsyncContext asyncContext;\n        // 超时标记\n        private boolean timeout;\n\n        public AsyncTask(AsyncContext asyncContext, boolean timeout) {\n            this.asyncContext = asyncContext;\n            this.timeout = timeout;\n        }\n    }\n\n    // guava 提供的多值 Map，一个 key 可以对应多个 value，这个就是我们上节说的全局集合，不会随着请求的结束而销毁\n    private volatile Multimap<String, AsyncTask> dataIdContext = Multimaps.synchronizedSetMultimap(HashMultimap\n            .create());\n\n    private ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat("longPolling-timeout-checker-%d")\n            .build();\n\n    // 创建一个延时任务，这个相当于单独的一个守护线程，所有长轮询的任务的超时检查都由这个线程处理\n    private ScheduledExecutorService timeoutChecker = new ScheduledThreadPoolExecutor(1, threadFactory);\n\n\n    //  客户端通过请求这个接口用于感知到配置是否有变更\n    @RequestMapping("/longPolling/demo03/listener")\n    public void addListener(HttpServletRequest request, HttpServletResponse response) {\n        //获取请求参数，dataId是配置的ID\n        String dataId = request.getParameter("dataId");\n\n        // 开启异步，这里是将客户端请求的request和response包装成AsyncContext对象，AsyncContext对象又被asyncTask包装\n        AsyncContext asyncContext = request.startAsync(request, response);\n        AsyncTask asyncTask = new AsyncTask(asyncContext, true);\n\n        // 把asyncTask放入到dataIdContext中，这样即使走下面的异步任务，当前主线程的任务结束，当前请求也会被hold住\n        dataIdContext.put(dataId, asyncTask);\n        // 启动定时器，30s 后写入 304 响应，\n        timeoutChecker.schedule(() -> {\n            if (asyncTask.isTimeout()) {\n                dataIdContext.remove(dataId, asyncTask);\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                asyncContext.complete();\n            }\n        }, 30000, TimeUnit.MILLISECONDS);\n    }\n\n    //  配置发布接入点，这里是修改配置的入口，\n    @RequestMapping("/longPolling/demo03/publishConfig")\n    public String publishConfig(String dataId, String configInfo) throws IOException {\n\n        // 对应的配置从dataIdContext中取出\n        Collection<AsyncTask> asyncTasks = dataIdContext.removeAll(dataId);\n\n        for (AsyncTask asyncTask : asyncTasks) {\n            asyncTask.setTimeout(false);\n            // 设置response并返回客户端\n            HttpServletResponse response = (HttpServletResponse)asyncTask.getAsyncContext().getResponse();\n            response.setStatus(HttpServletResponse.SC_OK);\n            response.getWriter().println(configInfo);\n            asyncTask.getAsyncContext().complete();\n        }\n        return "success";\n    }\n}\n\n\n\n\n# 方式二：使用map缓存，使用队列处理\n\n\n\n//发送长轮询请求示例\n@GetMapping("/poll/{requestId}")\npublic void poll(HttpServletRequest request, @PathVariable String requestId) {\n    //启动长轮询，设置\n    AsyncTaskUtil.longPolling(request ,requestId, 30);\n}\n\n//触发长轮询立即回复事件\n@GetMapping("/call/{requestId}/{content}")\npublic void call(@PathVariable String requestId,@PathVariable String content) {\n    AsyncTaskUtil.addLongPollingRespEvent(requestId, content,(t) -> {\n        return R.ok("处理后结果："+t);\n    });\n}\n\n\n//=============================队列处理====================================\n/**\n\t * 长轮询事件触发后的处理守护线程，监听长轮询立即回复事件队列\n\t */\nstatic {\n    Thread thread = new Thread(() -> {\n        while (true) {\n            try {\n                LongPollingEvent pollingEvent = LONG_POLLING_EVENT_QUEUE.take();\n                runAsync(() -> {\n                    try {\n                        R<?> resp = pollingEvent.getTask().execute(pollingEvent.getContent());\n                        writePollingResponse(pollingEvent.getRequestId(), resp);\n                    } catch (Exception e) {\n                        log.error(e.getMessage(), e);\n                    }\n                });\n            } catch (InterruptedException e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n    });\n    thread.setDaemon(true);\n    thread.start();\n}\n/**\n\t * @Description 获得指定名字的线程池，不存在则创建，线程安全\n\t * @param requestId\n\t * @param resp\n\t * @return\n\t */\nprivate static void writePollingResponse(String requestId, R<?> resp) throws IOException {\n    if (ASYNC_CONTEXT_MAP.get(requestId) != null) {\n        synchronized (requestId.intern()){\n            AsyncContext asyncContext = ASYNC_CONTEXT_MAP.get(requestId);\n            if (asyncContext != null) {\n                log.info("事件触发长轮询回复----,requestId={},resp={}",requestId,resp);\n                ServletResponse response = asyncContext.getResponse();\n                response.setContentType("application/json;charset=utf-8");\n                response.setCharacterEncoding("utf-8");\n                response.getWriter().append(JSON.toJSONString(resp));\n                asyncContext.complete();\n                ASYNC_CONTEXT_MAP.remove(requestId);\n            }else {\n                log.info("长轮询已回复，超时回复终止----,requestId={},resp={}",requestId,resp);\n            }\n        }\n    }else {\n        log.info("长轮询已回复，超时回复终止----,requestId={},resp={}",requestId,resp);\n    }\n}\n\n\n\n/**\n\t * 长轮询触发响应事件类\n\t * @param <T>\n\t */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nstatic class LongPollingEvent<T> {\n    // AsyncContext对象id\n    private String requestId;\n    // 待处理内容\n    private T content;\n    // 待处理内容的处理任务\n    private LongPollingTask<T> task;\n}\n\n/**\n\t * 添加长轮询立即响应触发事件\n\t * @param <T>\n\t * @param requestId\n\t * @param content\n\t * @return\n\t */\npublic static <T> boolean addLongPollingRespEvent(String requestId, T content, LongPollingTask<T> task) {\n    return LONG_POLLING_EVENT_QUEUE.add(new LongPollingEvent<T>(requestId, content, task));\n}\n\n//==============================asyncContext对象存储===========================================\n\n/**\n\t * @Description 长轮询\n\t * @param request\n\t * @param requestId\n\t * @param timeOutSeconds\n\t */\npublic static void longPolling(HttpServletRequest request, String requestId, long timeOutSeconds) {\n    //请求异步域对象\n    AsyncContext asyncContext = request.startAsync();\n    //关闭长轮询自动超时处理\n    asyncContext.setTimeout(0);\n    //消息等待map添加异步域对象\n    ASYNC_CONTEXT_MAP.put(requestId, asyncContext);\n    //注册长轮询超时未响应兜底任务\n    TIME_OUT_CHECKER.schedule(() -> {\n        try {\n            writePollingResponse(requestId, R.error(ExceptionEnum.POLLING_TIME_OUT));\n        } catch (IOException e) {\n            log.error(e.getMessage(), e);\n        }\n    }, timeOutSeconds,TimeUnit.SECONDS);\n}\n\n\n\nhttp://t.csdnimg.cn/Vt1wK\n\nhttp://t.csdnimg.cn/wrAI1\n\nhttp://t.csdnimg.cn/w1MU3\n\nhttp://www.mark-to-win.com/tutorial/226059.html',normalizedContent:'# 长轮询--2.1.入门案例01\n\n\n# 长轮询的应用\n\n\n\n\n# 念会经\n\n轮询：说白了就是客户端定时去请求服务端， 是客户端主动请求来促使数据更新；\n\n长轮询：说白了也是客户端请求服务端，但是服务端并不是即时返回，而是当有内容更新的时候才返回内容给客户端，从流程上讲，可以理解为服务器向客户端推送内容；\n\n\n\n这里大家可能会有两个疑问：\n\n 1. 为什么达到时间就返回，既然 是长轮询，为什么不一直hold住请求，直到数据发生变更再返回呢？\n 2. 服务端hold住难道不消耗线程吗，不是线程一直阻塞在那里吗？\n\nservlet3.0提供的asynccontext 机制。\n\nasynccontext是为了把主线程返回给tomcat线程池，不影响服务对其他客户端请求。会有线程专门处理这个长轮询，但并不是说每一个长轮询的http请求都要用一个线程阻塞在那。而是把长轮询的request的引用在一个集合中存起来，用一个或几个线程专门处理一批客户端的长轮询请求，这样就不需要为每一个长轮询单独分配线程阻塞在那了，从而大大降低了资源的消耗，\n\n\n\n\n# 案例摘抄\n\n\n# 案例描述\n\n\n\n微信扫码登陆，且需要同时关注公众号，需要用到公众号接收事件推送 用户使用手机微信app扫码后微信服务器向后端服务器回调扫码事件，由于前端无法感知到用户手机扫码的行为，所以停留在扫码登陆页面时需要持续轮询后端服务器用户是否已扫码登录，造成服务器的较大压力，于是利用servlet3.0的异步特性，实现长轮询的方式来通信。\n\n前端扫码登录页面请求后端微信二维码，后端返回微信二维码给前端时附带随机生成的scene_id，前端显示二维码供用户手机微信扫码，前端持续轮询后端用户是否已扫码（上一次轮询未成功登陆为开启下一次轮询的条件），但需带上scene_id以区分扫码用户，此时后端不同步返回前端请求结果，而是以异步响应式的方式等待微信服务器回调后，或是超过指定时间例如30秒后再返回（可能用户打开登陆页面后停留但未成功扫码），大大减少了前端访问后端的次数。\n\n具体方式是，request对象通过startasync()方法获得异步域对象asynccontext，此时请求被挂起，并释放servlet线程。请求异步域对象asynccontext放入concurrenthashmap实现的请求池中，以scene_id为key。\n\n微信服务器回调服务端时会带上扫码事件（登陆为scan，关注为subscribe）以及scene_id、openid，将回调数据包装为响应事件放入响应事件队列中。\n\n使用一个守护线程监听该队列，以阻塞的方式获取队列中的响应事件对象，并调用自定义线程池，根据scene_id从请求池中找到还未响应返回的asynccontext对象，并从中获得response对象，根据json对象中的openid查询到用户信息，然后返回给前端。\n\n如果30s超时后仍未接收到微信服务器的回调，则超时返回响应前端。\n\n相比普通定时轮询，由于采用响应式设计，可以大幅降低前端请求频率和服务器负载，并在事件发生后第一时间通知前端，没有轮询周期空挡导致的延迟，相比websocket则可以并避免浏览器版本过低、网关对长连接的兼容性等问题，实现上也更加简单。\n\n\n# no比比，show me the code\n\n\n# 方式一：使用map缓存asynccontext对象\n\n\n\n\n# 后端代码\n\npackage com.zs.longpolling.demo03;\n\nimport com.google.common.collect.hashmultimap;\nimport com.google.common.collect.multimap;\nimport com.google.common.collect.multimaps;\nimport com.google.common.util.concurrent.threadfactorybuilder;\nimport lombok.data;\nimport org.springframework.web.bind.annotation.requestmapping;\nimport org.springframework.web.bind.annotation.restcontroller;\n\nimport javax.servlet.asynccontext;\nimport javax.servlet.http.httpservletrequest;\nimport javax.servlet.http.httpservletresponse;\nimport java.io.ioexception;\nimport java.util.collection;\nimport java.util.concurrent.scheduledexecutorservice;\nimport java.util.concurrent.scheduledthreadpoolexecutor;\nimport java.util.concurrent.threadfactory;\nimport java.util.concurrent.timeunit;\n\n@restcontroller\npublic class configserver {\n    @data\n    private static class asynctask {\n        // 长轮询请求的上下文，包含请求和响应体\n        private asynccontext asynccontext;\n        // 超时标记\n        private boolean timeout;\n\n        public asynctask(asynccontext asynccontext, boolean timeout) {\n            this.asynccontext = asynccontext;\n            this.timeout = timeout;\n        }\n    }\n\n    // guava 提供的多值 map，一个 key 可以对应多个 value，这个就是我们上节说的全局集合，不会随着请求的结束而销毁\n    private volatile multimap<string, asynctask> dataidcontext = multimaps.synchronizedsetmultimap(hashmultimap\n            .create());\n\n    private threadfactory threadfactory = new threadfactorybuilder().setnameformat("longpolling-timeout-checker-%d")\n            .build();\n\n    // 创建一个延时任务，这个相当于单独的一个守护线程，所有长轮询的任务的超时检查都由这个线程处理\n    private scheduledexecutorservice timeoutchecker = new scheduledthreadpoolexecutor(1, threadfactory);\n\n\n    //  客户端通过请求这个接口用于感知到配置是否有变更\n    @requestmapping("/longpolling/demo03/listener")\n    public void addlistener(httpservletrequest request, httpservletresponse response) {\n        //获取请求参数，dataid是配置的id\n        string dataid = request.getparameter("dataid");\n\n        // 开启异步，这里是将客户端请求的request和response包装成asynccontext对象，asynccontext对象又被asynctask包装\n        asynccontext asynccontext = request.startasync(request, response);\n        asynctask asynctask = new asynctask(asynccontext, true);\n\n        // 把asynctask放入到dataidcontext中，这样即使走下面的异步任务，当前主线程的任务结束，当前请求也会被hold住\n        dataidcontext.put(dataid, asynctask);\n        // 启动定时器，30s 后写入 304 响应，\n        timeoutchecker.schedule(() -> {\n            if (asynctask.istimeout()) {\n                dataidcontext.remove(dataid, asynctask);\n                response.setstatus(httpservletresponse.sc_not_modified);\n                asynccontext.complete();\n            }\n        }, 30000, timeunit.milliseconds);\n    }\n\n    //  配置发布接入点，这里是修改配置的入口，\n    @requestmapping("/longpolling/demo03/publishconfig")\n    public string publishconfig(string dataid, string configinfo) throws ioexception {\n\n        // 对应的配置从dataidcontext中取出\n        collection<asynctask> asynctasks = dataidcontext.removeall(dataid);\n\n        for (asynctask asynctask : asynctasks) {\n            asynctask.settimeout(false);\n            // 设置response并返回客户端\n            httpservletresponse response = (httpservletresponse)asynctask.getasynccontext().getresponse();\n            response.setstatus(httpservletresponse.sc_ok);\n            response.getwriter().println(configinfo);\n            asynctask.getasynccontext().complete();\n        }\n        return "success";\n    }\n}\n\n\n\n\n# 方式二：使用map缓存，使用队列处理\n\n\n\n//发送长轮询请求示例\n@getmapping("/poll/{requestid}")\npublic void poll(httpservletrequest request, @pathvariable string requestid) {\n    //启动长轮询，设置\n    asynctaskutil.longpolling(request ,requestid, 30);\n}\n\n//触发长轮询立即回复事件\n@getmapping("/call/{requestid}/{content}")\npublic void call(@pathvariable string requestid,@pathvariable string content) {\n    asynctaskutil.addlongpollingrespevent(requestid, content,(t) -> {\n        return r.ok("处理后结果："+t);\n    });\n}\n\n\n//=============================队列处理====================================\n/**\n\t * 长轮询事件触发后的处理守护线程，监听长轮询立即回复事件队列\n\t */\nstatic {\n    thread thread = new thread(() -> {\n        while (true) {\n            try {\n                longpollingevent pollingevent = long_polling_event_queue.take();\n                runasync(() -> {\n                    try {\n                        r<?> resp = pollingevent.gettask().execute(pollingevent.getcontent());\n                        writepollingresponse(pollingevent.getrequestid(), resp);\n                    } catch (exception e) {\n                        log.error(e.getmessage(), e);\n                    }\n                });\n            } catch (interruptedexception e) {\n                log.error(e.getmessage(), e);\n            }\n        }\n    });\n    thread.setdaemon(true);\n    thread.start();\n}\n/**\n\t * @description 获得指定名字的线程池，不存在则创建，线程安全\n\t * @param requestid\n\t * @param resp\n\t * @return\n\t */\nprivate static void writepollingresponse(string requestid, r<?> resp) throws ioexception {\n    if (async_context_map.get(requestid) != null) {\n        synchronized (requestid.intern()){\n            asynccontext asynccontext = async_context_map.get(requestid);\n            if (asynccontext != null) {\n                log.info("事件触发长轮询回复----,requestid={},resp={}",requestid,resp);\n                servletresponse response = asynccontext.getresponse();\n                response.setcontenttype("application/json;charset=utf-8");\n                response.setcharacterencoding("utf-8");\n                response.getwriter().append(json.tojsonstring(resp));\n                asynccontext.complete();\n                async_context_map.remove(requestid);\n            }else {\n                log.info("长轮询已回复，超时回复终止----,requestid={},resp={}",requestid,resp);\n            }\n        }\n    }else {\n        log.info("长轮询已回复，超时回复终止----,requestid={},resp={}",requestid,resp);\n    }\n}\n\n\n\n/**\n\t * 长轮询触发响应事件类\n\t * @param <t>\n\t */\n@data\n@allargsconstructor\n@noargsconstructor\nstatic class longpollingevent<t> {\n    // asynccontext对象id\n    private string requestid;\n    // 待处理内容\n    private t content;\n    // 待处理内容的处理任务\n    private longpollingtask<t> task;\n}\n\n/**\n\t * 添加长轮询立即响应触发事件\n\t * @param <t>\n\t * @param requestid\n\t * @param content\n\t * @return\n\t */\npublic static <t> boolean addlongpollingrespevent(string requestid, t content, longpollingtask<t> task) {\n    return long_polling_event_queue.add(new longpollingevent<t>(requestid, content, task));\n}\n\n//==============================asynccontext对象存储===========================================\n\n/**\n\t * @description 长轮询\n\t * @param request\n\t * @param requestid\n\t * @param timeoutseconds\n\t */\npublic static void longpolling(httpservletrequest request, string requestid, long timeoutseconds) {\n    //请求异步域对象\n    asynccontext asynccontext = request.startasync();\n    //关闭长轮询自动超时处理\n    asynccontext.settimeout(0);\n    //消息等待map添加异步域对象\n    async_context_map.put(requestid, asynccontext);\n    //注册长轮询超时未响应兜底任务\n    time_out_checker.schedule(() -> {\n        try {\n            writepollingresponse(requestid, r.error(exceptionenum.polling_time_out));\n        } catch (ioexception e) {\n            log.error(e.getmessage(), e);\n        }\n    }, timeoutseconds,timeunit.seconds);\n}\n\n\n\nhttp://t.csdnimg.cn/vt1wk\n\nhttp://t.csdnimg.cn/wrai1\n\nhttp://t.csdnimg.cn/w1mu3\n\nhttp://www.mark-to-win.com/tutorial/226059.html',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706230569e3},{title:"python3安装",frontmatter:{},regularPath:"/zs-use/env/Linux--python3%E5%AE%89%E8%A3%85.html",relativePath:"zs-use/env/Linux--python3安装.md",key:"v-cb48c812",path:"/zs-use/env/Linux--python3%E5%AE%89%E8%A3%85.html",headers:[{level:2,title:"源码安装",slug:"源码安装",normalizedTitle:"源码安装",charIndex:284}],lastUpdated:"2023年12月27日星期三晚上11点30分",lastUpdatedTimestamp:170369105e4,headersStr:"源码安装",content:'# python3安装\n\n> 参考博客\n> \n> https://phoenixnap.com/kb/how-to-install-python-3-centos-7\n> \n> https://zomro.com/blog/faq/294-kak-ustanovit-python-310-na-centos-7\n> \n> https://www.cnblogs.com/blogabc/p/17188812.html\n> \n> https://blog.csdn.net/xiqng17111342931/article/details/131656962\n\n\n# 源码安装\n\n> 源码包下载\n\nhttps://www.python.org/ftp/python/3.11.7/\n\n\n\n> 安装依赖\n\nyum groupinstall "Development Tools" -y\n\nyum install gcc open-ssl-devel bzip2-devel libffi-devel -y\n\n\n> 解压安装\n\ntar xzf Python-3.9.6.tgz\ncd Python 3.9.6\n\n./configure --enable-optimizations\n\nmake && make altinstall\n\n\ncentos7安装python3.11完整教程(完整有效)\n\n1.安装python3:\n\ncd /root\n#只是将python3.11的安装包下载到 /root目录下\nwget https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz\n#下载最新的软件安装包\ntar -xzf Python-3.11.0.tgz\n#解压缩安装包\nyum -y install gcc zlib zlib-devel libffi libffi-devel\n#安装源码编译需要的编译环境\nyum install readline-devel\n#可以解决后期出现的方向键、删除键乱码问题, 这里提前避免.\nyum install openssl-devel openssl11 openssl11-devel\n#安装openssl11, 后期的pip3安装网络相关模块需要用到ssl模块.\nexport CFLAGS=$(pkg-config --cflags openssl11)\nexport LDFLAGS=$(pkg-config --libs openssl11)\n#设置编译FLAG, 以便使用最新的openssl库\ncd /root/Python-3.11.0\n#进入刚解压缩的目录\n./configure --prefix=/usr/python --with-ssl\n#指定python3的安装目录为 /usr/python 并使用ssl模块, 指定目录好处是\n#后期删除此文件夹就可以完全删除软件了.\nmake\nmake install\n#就是源码编译并安装了, 时间会持续几分钟.\nln -s /usr/python/bin/python3 /usr/bin/python3\nln -s /usr/python/bin/pip3 /usr/bin/pip3\n#指定链接, 此后我们系统的任何地方输入python3就是我们安装的\n#这个最新版python3了\n\n\n\n安装到这里我们就可以正确使用python3了, 实例如下:\n\n2.安装常用到的网工配置模块paramiko、netmiko\n\npip3 install netmiko -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn\npip3 install paramiko -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn\n#使用的清华大学的安装源, 个别其他的安装源会没有相应的安装包\n怎么证明安装好了呢, 我们在python3中引入相应模块没有没问就好了.\n\n\n\n\n这里我们import paramiko引入模块没有报错就可以了.\n\n截止到这里我们就安装完成了一个适合网工使用的python3环境了, 下面就可以发挥你的能量通宵工作了~\n\n可能安装过程中遇到的问题\n\n1.报错出现‘No package openssl11 available’: 解决方法:\n\n多数是你没有安装EPEL (即企业版linux扩展包) , 使用以下方法即可:\n\nyum install epel-release\n\n\n2.make编译的时候出现报错, 此报错在make执行完的最后面会提示: ‘Could not build the ssl module!\n\nPython requires a Openssl 1.1.1 or newer’\'\n\nyum install openssl-devel openssl11 openssl11-devel\nexport CFLAGS=$(pkg-config --cflags openssl11)\nexport LDFLAGS=$(pkg-config --libs openssl11)\ncd /root/Python-3.11.0\n./configure --prefix=/usr/python --with-ssl\n\n\n主要上面这几个过程不要出现错误, 就不会报错.是因为较新版本的python3开始使用openssl11进行支持了.\n\n3.想删除python3这个软件, 从新安装怎么办？\n\nrm -rf /usr/python\n#删除刚刚的文件夹就可以了.后面从新安装, 在按照上面的步骤从新编译就可以了.\n',normalizedContent:'# python3安装\n\n> 参考博客\n> \n> https://phoenixnap.com/kb/how-to-install-python-3-centos-7\n> \n> https://zomro.com/blog/faq/294-kak-ustanovit-python-310-na-centos-7\n> \n> https://www.cnblogs.com/blogabc/p/17188812.html\n> \n> https://blog.csdn.net/xiqng17111342931/article/details/131656962\n\n\n# 源码安装\n\n> 源码包下载\n\nhttps://www.python.org/ftp/python/3.11.7/\n\n\n\n> 安装依赖\n\nyum groupinstall "development tools" -y\n\nyum install gcc open-ssl-devel bzip2-devel libffi-devel -y\n\n\n> 解压安装\n\ntar xzf python-3.9.6.tgz\ncd python 3.9.6\n\n./configure --enable-optimizations\n\nmake && make altinstall\n\n\ncentos7安装python3.11完整教程(完整有效)\n\n1.安装python3:\n\ncd /root\n#只是将python3.11的安装包下载到 /root目录下\nwget https://www.python.org/ftp/python/3.11.0/python-3.11.0.tgz\n#下载最新的软件安装包\ntar -xzf python-3.11.0.tgz\n#解压缩安装包\nyum -y install gcc zlib zlib-devel libffi libffi-devel\n#安装源码编译需要的编译环境\nyum install readline-devel\n#可以解决后期出现的方向键、删除键乱码问题, 这里提前避免.\nyum install openssl-devel openssl11 openssl11-devel\n#安装openssl11, 后期的pip3安装网络相关模块需要用到ssl模块.\nexport cflags=$(pkg-config --cflags openssl11)\nexport ldflags=$(pkg-config --libs openssl11)\n#设置编译flag, 以便使用最新的openssl库\ncd /root/python-3.11.0\n#进入刚解压缩的目录\n./configure --prefix=/usr/python --with-ssl\n#指定python3的安装目录为 /usr/python 并使用ssl模块, 指定目录好处是\n#后期删除此文件夹就可以完全删除软件了.\nmake\nmake install\n#就是源码编译并安装了, 时间会持续几分钟.\nln -s /usr/python/bin/python3 /usr/bin/python3\nln -s /usr/python/bin/pip3 /usr/bin/pip3\n#指定链接, 此后我们系统的任何地方输入python3就是我们安装的\n#这个最新版python3了\n\n\n\n安装到这里我们就可以正确使用python3了, 实例如下:\n\n2.安装常用到的网工配置模块paramiko、netmiko\n\npip3 install netmiko -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn\npip3 install paramiko -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn\n#使用的清华大学的安装源, 个别其他的安装源会没有相应的安装包\n怎么证明安装好了呢, 我们在python3中引入相应模块没有没问就好了.\n\n\n\n\n这里我们import paramiko引入模块没有报错就可以了.\n\n截止到这里我们就安装完成了一个适合网工使用的python3环境了, 下面就可以发挥你的能量通宵工作了~\n\n可能安装过程中遇到的问题\n\n1.报错出现‘no package openssl11 available’: 解决方法:\n\n多数是你没有安装epel (即企业版linux扩展包) , 使用以下方法即可:\n\nyum install epel-release\n\n\n2.make编译的时候出现报错, 此报错在make执行完的最后面会提示: ‘could not build the ssl module!\n\npython requires a openssl 1.1.1 or newer’\'\n\nyum install openssl-devel openssl11 openssl11-devel\nexport cflags=$(pkg-config --cflags openssl11)\nexport ldflags=$(pkg-config --libs openssl11)\ncd /root/python-3.11.0\n./configure --prefix=/usr/python --with-ssl\n\n\n主要上面这几个过程不要出现错误, 就不会报错.是因为较新版本的python3开始使用openssl11进行支持了.\n\n3.想删除python3这个软件, 从新安装怎么办？\n\nrm -rf /usr/python\n#删除刚刚的文件夹就可以了.后面从新安装, 在按照上面的步骤从新编译就可以了.\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170369105e4},{title:"postgresql安装",frontmatter:{},regularPath:"/zs-use/env/Linux--postgresql.html",relativePath:"zs-use/env/Linux--postgresql.md",key:"v-1237f2f8",path:"/zs-use/env/Linux--postgresql.html",headers:[{level:2,title:"源码安装",slug:"源码安装",normalizedTitle:"源码安装",charIndex:291}],lastUpdated:"2023年12月27日星期三晚上11点30分",lastUpdatedTimestamp:170369105e4,headersStr:"源码安装",content:'# postgresql安装\n\n> 参考：\n> \n> https://www.postgresql.org/download/\n> \n> https://www.postgresql.org/download/linux/redhat/\n> \n> https://blog.csdn.net/wang_xiangjun/article/details/133122868\n> \n> https://www.modb.pro/db/636662\n> \n> https://blog.csdn.net/qq_45673244/article/details/133848969\n\n\n# 源码安装\n\n> 源码包下载地址\n\nhttps://www.postgresql.org/ftp/source/v16.0/\n\n\n\n> 安装依赖包 执行以下命令安装所需依赖包：\n\nyum install -y perl-ExtUtils-Embed readline-devel zlib-devel pam-devel libxml2-devel libxslt-devel openldap-devel python-devel gcc-c++ openssl-devel cmake\n\n\n> 安装postgreSQL\n\n1)、在根目录下新建pgsql文件夹，并将pgsql的压缩包放入里边。\n# 笔者在这里把文件夹创建到root下了，建议创建到根目录\nmkdir /pgsql\n[root@bogon pgsql]# ls\npostgresql-16.0  postgresql-16.0.tar.gz\n[root@bogon pgsql]# pwd\n/root/pgsql\n\n2）、解压压缩包\ntar -zxvf postgresql-16.0.tar.gz\n\n3）、进入加压后的文件夹\n[root@bogon ~]# cd pgsql/postgresql-16.0\n[root@bogon postgresql-16.0]# ls\naclocal.m4  config.log     configure     contrib    doc          GNUmakefile.in  INSTALL   meson.build        README\nconfig      config.status  configure.ac  COPYRIGHT  GNUmakefile  HISTORY         Makefile  meson_options.txt  src\n\n4、编译postgresql源码\n./configure --prefix=/pgsql/postgresql --without-icu\n\n\n5、编译安装\nroot@bogon postgresql-16.0]# make && make install\n编译安装结束没有报错证明安装成功；至此已完成postgresql的安装。进入/pgsql/postgresql目录可以看到安装后的postgresql文件。\n[root@bogon postgresql-16.0]# cd /pgsql/postgresql/\n[root@bogon postgresql]# ls\nbin  include  lib  share\n\n\n\n注意：笔者在这里碰到编译报错，由于版本比较新也没有查到相关处理方法，索性就按照提示操作，禁用icu模块支持。–without-icu\n\n\n\n选项                  描述\n–prefix=prefix      安装到prefix指定目录；默认为/usr/local/pgsql\n–bindir=dir         安装应用程序到dir;默认为prefix/bin\n–with-docdir=dir    安装文档到dir;默认为prefix/doc\n–with-pgport=port   设置默认服务端网络连接服务TCP端口号\n–with-tcl           服务端提供Tcl存储过程支持\n–with-perl          服务端提供perl存储过程支持\n–with-python        服务端提供Python存储过程支持\n\n五、创建用户组postgre并创建用户postgre\n\n[root@bogon postgresql]# groupadd postgres\n[root@bogon postgresql]# useradd -g postgres postgres\n[root@bogon postgresql]# id postgres\nuid=1001(postgres) gid=1001(postgres) groups=1001(postgres)\n\n\n六、创建postgresql数据库的数据主目录并修改文件所有者\n\n数据库主目录可根据实际情况而创建，这里我们把主目录放在\n\n/pgsql/postgresql/data/目录下：\n[root@bogon postgresql]# mkdir data\n[root@bogon postgresql]# chown postgres:postgres data\n[root@bogon postgresql]# ls -al\ntotal 16\ndrwxr-xr-x 7 root     root       68 Sep 19 16:23 .\ndrwxr-xr-x 3 root     root       24 Sep 19 16:20 ..\ndrwxr-xr-x 2 root     root     4096 Sep 19 16:20 bin\ndrwxr-xr-x 2 postgres postgres    6 Sep 19 16:23 data\ndrwxr-xr-x 6 root     root     4096 Sep 19 16:20 include\ndrwxr-xr-x 4 root     root     4096 Sep 19 16:20 lib\ndrwxr-xr-x 6 root     root     4096 Sep 19 16:20 share\n\n\n七、配置环境变量\n\n进入home/postgre目录可以看到.bash_profile文件。\n编辑修改.bash_profile文件。\n[root@bogon postgres]# vi .bash_profile \n\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\n\nexport PGHOME=/pgsql/postgresql\nexport PGDATA=/pgsql/postgresql/data\nPATH=$PATH:$HOME/bin:$PGHOME/bin\nexport PATH\n~        \n\n\n在.bash_profile文件中新增加内容如下：\nexport PGHOME=/pgsql/postgresql\nexport PGDATA=/pgsql/postgresql/data\nPATH=$PATH:$HOME/bin:$PGHOME/bin\n\n\n编辑修改.bash_profile文件然后保存。执行以下命令，使环境变量生效 [root@bogon postgres]# source .bash_profile\n\n八、切换到postgre用户，并使用initdb初始化数据库\n\n[root@bogon postgres]# su - postgres\n[postgres@bogon ~]$ initdb\nThe files belonging to this database system will be owned by user "postgres".\nThis user must also own the server process.\nThe database cluster will be initialized with locale "en_US.UTF-8".\nThe default database encoding has accordingly been set to "UTF8".\nThe default text search configuration will be set to "english".\nData page checksums are disabled.\nfixing permissions on existing directory /pgsql/postgresql/data ... ok\ncreating subdirectories ... ok\nselecting dynamic shared memory implementation ... posix\nselecting default max_connections ... 100\nselecting default shared_buffers ... 128MB\nselecting default time zone ... Asia/Shanghai\ncreating configuration files ... ok\nrunning bootstrap script ... ok\nperforming post-bootstrap initialization ... ok\ninitdb: warning: enabling "trust" authentication for local connections\ninitdb: hint: You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb.\nSuccess. You can now start the database server using:\npg_ctl -D /pgsql/postgresql/data -l logfile start\n\n\n可以看到/pgsql/postgresql/data\n\n[root@bogon opt]# cd /pgsql/postgresql/\n[root@bogon postgresql]# ls\nbin  data  include  lib  share\n[root@bogon postgresql]# cd data/\n[root@bogon data]# ls\nbase    pg_commit_ts  pg_hba.conf    pg_logical    pg_notify    pg_serial     pg_stat      pg_subtrans  pg_twophase  pg_wal   postgresql.auto.conf\nglobal  pg_dynshmem   pg_ident.conf  pg_multixact  pg_replslot  pg_snapshots  pg_stat_tmp  pg_tblspc    PG_VERSION   pg_xact  postgresql.conf\n\n\n九、配置服务\n\n修改/pgsql/postgresql/data/目录下的两个问价\nPostgresql.conf 配置postgreSQL数据库服务的相应参数\npg_hba.conf  配置对数据库的访问权限\nlisten_addresses = \'*\'      # what IP address(es) to listen on;\n# comma-separated list of addresses;\n# defaults to \'localhost\'; use \'*\' for all\n# (change requires restart)\n#port = 5432               # (change requires restart)\nmax_connections = 100                   # (change requires resta\n\n\n> 其中，参数“listen_addresses”表示监听的IP地址，默认是在localhost处监听，也就是127.0.0.1的IP地址上监听，只接受来自本机的localhost的连接请求，这会让远程的主机无法登陆这台数据库，如果想从其他的机器上登陆这台数据库，需要把监听地址改为实际网络的地址，一种简单的方法是，将行开头的#号去掉，把这个地址改为*，表示在本地的所有地址上监听。\n\n[root@bogon data]# vim pg_hba.conf\n找到最下面这一行，这样局域网的人才能访问，红色为新添加内容。\n# IPv4 local connections:\nhost    all      all             0.0.0.0/0               trust\nhost    all     all             127.0.0.1/32            trust\n``\npg_hba.conf文件新增内容如下：\nhost    all      all             0.0.0.0/0               trust\n\n\n\n\n十、设置postgresql开机自启动\n\nPostgreSQL的开机自启动脚本位于postgreSQL源码目录的contrib/start-scripts路径下。\nLinux文件即为Linux系统上的启动脚本\n\n[root@bogon start-scripts]# pwd\n/root/pgsql/postgresql-16.0/contrib/start-scripts\n[root@bogon start-scripts]# ls\nfreebsd  linux  macos\n1）\t切换为root用户，修改Linux文件属性，添加X属性\n[root@bogon start-scripts]# chmod a+x linux\n2）\t复制Linux文件到/etc/init.d目录下，更名为postgresql\n[root@bogon start-scripts]# cp linux /etc/init.d/postgresql\n3）\t修改/etc/init.d/postgresql文件的两个变量\nPrefix设置为postgresql的安装路径：/pgsql/postgresql\nPGDATA设置为postgresql的数据目录路径："/pgsql/postgresql/data"\n4）\t设置postgresql服务开启自启动\n[root@bogon start-scripts]# chkconfig --add postgresql\n查看开机自启服务设置成功\n[root@bogon start-scripts]# chkconfig \npostgresql     \t0:off\t1:off\t2:on\t3:on\t4:on\t5:on\t6:off\n5)执行service postgresql start，启动postgreSQL服务\n[root@bogon start-scripts]# service postgresql start\nStarting PostgreSQL: ok\n查看postgresql服务监听\n[root@bogon start-scripts]# ps -elf |grep postgres\n4 S root      17527   7286  0  80   0 - 47969 do_wai 16:26 pts/0    00:00:00 su - postgres\n4 S postgres  17528  17527  0  80   0 - 28886 n_tty_ 16:26 pts/0    00:00:00 -bash\n0 S postgres  17653      1  0  80   0 - 68572 ep_pol 16:35 ?        00:00:00 /pgsql/postgresql/bin/postgres -D /pgsql/postgresql/data\n1 S postgres  17654  17653  0  80   0 - 68607 ep_pol 16:35 ?        00:00:00 postgres: checkpointer \n1 S postgres  17655  17653  0  80   0 - 68605 ep_pol 16:35 ?        00:00:00 postgres: background writer \n1 S postgres  17657  17653  0  80   0 - 68605 ep_pol 16:35 ?        00:00:00 postgres: walwriter \n1 S postgres  17658  17653  0  80   0 - 68974 ep_pol 16:35 ?        00:00:00 postgres: autovacuum launcher \n1 S postgres  17659  17653  0  80   0 - 68969 ep_pol 16:35 ?        00:00:00 postgres: logical replication launcher \n0 S root      17663  17574  0  80   0 - 28202 pipe_w 16:36 pts/1    00:00:00 grep --color=auto postgres\n\n\n\n十一、开始测试\n\n[root@bogon postgres]# su – postgres\n[postgres@bogon ~]$ psql\n\n\n\n1． 创建数据库用户\n2． 赋予账号权限\n3． 新建数据库\n4． 退出\n\npostgres=# create user pg password \'pg\';\nCREATE ROLE\npostgres=# ALTER ROLE pg SUPERUSER;\nALTER ROLE\npostgres=# create database pg;\nCREATE DATABASE\npostgres=# \\q\n\n\n\n 1. 重新登陆数据库\n 2. 输入密码\n 3. 显示数据库\n\n[postgres@bogon ~]$ psql -U pg -d pg -h 192.168.0.244\npg=# \\l\n                         List of databases\n Name    |  Owner   | Encoding | Locale Provider |   Collate   |    Ctype    | ICU Locale | ICU Rules |   Access privileges   \n-----------+----------+----------+-----------------+----- \n\n',normalizedContent:'# postgresql安装\n\n> 参考：\n> \n> https://www.postgresql.org/download/\n> \n> https://www.postgresql.org/download/linux/redhat/\n> \n> https://blog.csdn.net/wang_xiangjun/article/details/133122868\n> \n> https://www.modb.pro/db/636662\n> \n> https://blog.csdn.net/qq_45673244/article/details/133848969\n\n\n# 源码安装\n\n> 源码包下载地址\n\nhttps://www.postgresql.org/ftp/source/v16.0/\n\n\n\n> 安装依赖包 执行以下命令安装所需依赖包：\n\nyum install -y perl-extutils-embed readline-devel zlib-devel pam-devel libxml2-devel libxslt-devel openldap-devel python-devel gcc-c++ openssl-devel cmake\n\n\n> 安装postgresql\n\n1)、在根目录下新建pgsql文件夹，并将pgsql的压缩包放入里边。\n# 笔者在这里把文件夹创建到root下了，建议创建到根目录\nmkdir /pgsql\n[root@bogon pgsql]# ls\npostgresql-16.0  postgresql-16.0.tar.gz\n[root@bogon pgsql]# pwd\n/root/pgsql\n\n2）、解压压缩包\ntar -zxvf postgresql-16.0.tar.gz\n\n3）、进入加压后的文件夹\n[root@bogon ~]# cd pgsql/postgresql-16.0\n[root@bogon postgresql-16.0]# ls\naclocal.m4  config.log     configure     contrib    doc          gnumakefile.in  install   meson.build        readme\nconfig      config.status  configure.ac  copyright  gnumakefile  history         makefile  meson_options.txt  src\n\n4、编译postgresql源码\n./configure --prefix=/pgsql/postgresql --without-icu\n\n\n5、编译安装\nroot@bogon postgresql-16.0]# make && make install\n编译安装结束没有报错证明安装成功；至此已完成postgresql的安装。进入/pgsql/postgresql目录可以看到安装后的postgresql文件。\n[root@bogon postgresql-16.0]# cd /pgsql/postgresql/\n[root@bogon postgresql]# ls\nbin  include  lib  share\n\n\n\n注意：笔者在这里碰到编译报错，由于版本比较新也没有查到相关处理方法，索性就按照提示操作，禁用icu模块支持。–without-icu\n\n\n\n选项                  描述\n–prefix=prefix      安装到prefix指定目录；默认为/usr/local/pgsql\n–bindir=dir         安装应用程序到dir;默认为prefix/bin\n–with-docdir=dir    安装文档到dir;默认为prefix/doc\n–with-pgport=port   设置默认服务端网络连接服务tcp端口号\n–with-tcl           服务端提供tcl存储过程支持\n–with-perl          服务端提供perl存储过程支持\n–with-python        服务端提供python存储过程支持\n\n五、创建用户组postgre并创建用户postgre\n\n[root@bogon postgresql]# groupadd postgres\n[root@bogon postgresql]# useradd -g postgres postgres\n[root@bogon postgresql]# id postgres\nuid=1001(postgres) gid=1001(postgres) groups=1001(postgres)\n\n\n六、创建postgresql数据库的数据主目录并修改文件所有者\n\n数据库主目录可根据实际情况而创建，这里我们把主目录放在\n\n/pgsql/postgresql/data/目录下：\n[root@bogon postgresql]# mkdir data\n[root@bogon postgresql]# chown postgres:postgres data\n[root@bogon postgresql]# ls -al\ntotal 16\ndrwxr-xr-x 7 root     root       68 sep 19 16:23 .\ndrwxr-xr-x 3 root     root       24 sep 19 16:20 ..\ndrwxr-xr-x 2 root     root     4096 sep 19 16:20 bin\ndrwxr-xr-x 2 postgres postgres    6 sep 19 16:23 data\ndrwxr-xr-x 6 root     root     4096 sep 19 16:20 include\ndrwxr-xr-x 4 root     root     4096 sep 19 16:20 lib\ndrwxr-xr-x 6 root     root     4096 sep 19 16:20 share\n\n\n七、配置环境变量\n\n进入home/postgre目录可以看到.bash_profile文件。\n编辑修改.bash_profile文件。\n[root@bogon postgres]# vi .bash_profile \n\n# .bash_profile\n\n# get the aliases and functions\nif [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n\n# user specific environment and startup programs\n\npath=$path:$home/.local/bin:$home/bin\n\nexport pghome=/pgsql/postgresql\nexport pgdata=/pgsql/postgresql/data\npath=$path:$home/bin:$pghome/bin\nexport path\n~        \n\n\n在.bash_profile文件中新增加内容如下：\nexport pghome=/pgsql/postgresql\nexport pgdata=/pgsql/postgresql/data\npath=$path:$home/bin:$pghome/bin\n\n\n编辑修改.bash_profile文件然后保存。执行以下命令，使环境变量生效 [root@bogon postgres]# source .bash_profile\n\n八、切换到postgre用户，并使用initdb初始化数据库\n\n[root@bogon postgres]# su - postgres\n[postgres@bogon ~]$ initdb\nthe files belonging to this database system will be owned by user "postgres".\nthis user must also own the server process.\nthe database cluster will be initialized with locale "en_us.utf-8".\nthe default database encoding has accordingly been set to "utf8".\nthe default text search configuration will be set to "english".\ndata page checksums are disabled.\nfixing permissions on existing directory /pgsql/postgresql/data ... ok\ncreating subdirectories ... ok\nselecting dynamic shared memory implementation ... posix\nselecting default max_connections ... 100\nselecting default shared_buffers ... 128mb\nselecting default time zone ... asia/shanghai\ncreating configuration files ... ok\nrunning bootstrap script ... ok\nperforming post-bootstrap initialization ... ok\ninitdb: warning: enabling "trust" authentication for local connections\ninitdb: hint: you can change this by editing pg_hba.conf or using the option -a, or --auth-local and --auth-host, the next time you run initdb.\nsuccess. you can now start the database server using:\npg_ctl -d /pgsql/postgresql/data -l logfile start\n\n\n可以看到/pgsql/postgresql/data\n\n[root@bogon opt]# cd /pgsql/postgresql/\n[root@bogon postgresql]# ls\nbin  data  include  lib  share\n[root@bogon postgresql]# cd data/\n[root@bogon data]# ls\nbase    pg_commit_ts  pg_hba.conf    pg_logical    pg_notify    pg_serial     pg_stat      pg_subtrans  pg_twophase  pg_wal   postgresql.auto.conf\nglobal  pg_dynshmem   pg_ident.conf  pg_multixact  pg_replslot  pg_snapshots  pg_stat_tmp  pg_tblspc    pg_version   pg_xact  postgresql.conf\n\n\n九、配置服务\n\n修改/pgsql/postgresql/data/目录下的两个问价\npostgresql.conf 配置postgresql数据库服务的相应参数\npg_hba.conf  配置对数据库的访问权限\nlisten_addresses = \'*\'      # what ip address(es) to listen on;\n# comma-separated list of addresses;\n# defaults to \'localhost\'; use \'*\' for all\n# (change requires restart)\n#port = 5432               # (change requires restart)\nmax_connections = 100                   # (change requires resta\n\n\n> 其中，参数“listen_addresses”表示监听的ip地址，默认是在localhost处监听，也就是127.0.0.1的ip地址上监听，只接受来自本机的localhost的连接请求，这会让远程的主机无法登陆这台数据库，如果想从其他的机器上登陆这台数据库，需要把监听地址改为实际网络的地址，一种简单的方法是，将行开头的#号去掉，把这个地址改为*，表示在本地的所有地址上监听。\n\n[root@bogon data]# vim pg_hba.conf\n找到最下面这一行，这样局域网的人才能访问，红色为新添加内容。\n# ipv4 local connections:\nhost    all      all             0.0.0.0/0               trust\nhost    all     all             127.0.0.1/32            trust\n``\npg_hba.conf文件新增内容如下：\nhost    all      all             0.0.0.0/0               trust\n\n\n\n\n十、设置postgresql开机自启动\n\npostgresql的开机自启动脚本位于postgresql源码目录的contrib/start-scripts路径下。\nlinux文件即为linux系统上的启动脚本\n\n[root@bogon start-scripts]# pwd\n/root/pgsql/postgresql-16.0/contrib/start-scripts\n[root@bogon start-scripts]# ls\nfreebsd  linux  macos\n1）\t切换为root用户，修改linux文件属性，添加x属性\n[root@bogon start-scripts]# chmod a+x linux\n2）\t复制linux文件到/etc/init.d目录下，更名为postgresql\n[root@bogon start-scripts]# cp linux /etc/init.d/postgresql\n3）\t修改/etc/init.d/postgresql文件的两个变量\nprefix设置为postgresql的安装路径：/pgsql/postgresql\npgdata设置为postgresql的数据目录路径："/pgsql/postgresql/data"\n4）\t设置postgresql服务开启自启动\n[root@bogon start-scripts]# chkconfig --add postgresql\n查看开机自启服务设置成功\n[root@bogon start-scripts]# chkconfig \npostgresql     \t0:off\t1:off\t2:on\t3:on\t4:on\t5:on\t6:off\n5)执行service postgresql start，启动postgresql服务\n[root@bogon start-scripts]# service postgresql start\nstarting postgresql: ok\n查看postgresql服务监听\n[root@bogon start-scripts]# ps -elf |grep postgres\n4 s root      17527   7286  0  80   0 - 47969 do_wai 16:26 pts/0    00:00:00 su - postgres\n4 s postgres  17528  17527  0  80   0 - 28886 n_tty_ 16:26 pts/0    00:00:00 -bash\n0 s postgres  17653      1  0  80   0 - 68572 ep_pol 16:35 ?        00:00:00 /pgsql/postgresql/bin/postgres -d /pgsql/postgresql/data\n1 s postgres  17654  17653  0  80   0 - 68607 ep_pol 16:35 ?        00:00:00 postgres: checkpointer \n1 s postgres  17655  17653  0  80   0 - 68605 ep_pol 16:35 ?        00:00:00 postgres: background writer \n1 s postgres  17657  17653  0  80   0 - 68605 ep_pol 16:35 ?        00:00:00 postgres: walwriter \n1 s postgres  17658  17653  0  80   0 - 68974 ep_pol 16:35 ?        00:00:00 postgres: autovacuum launcher \n1 s postgres  17659  17653  0  80   0 - 68969 ep_pol 16:35 ?        00:00:00 postgres: logical replication launcher \n0 s root      17663  17574  0  80   0 - 28202 pipe_w 16:36 pts/1    00:00:00 grep --color=auto postgres\n\n\n\n十一、开始测试\n\n[root@bogon postgres]# su – postgres\n[postgres@bogon ~]$ psql\n\n\n\n1． 创建数据库用户\n2． 赋予账号权限\n3． 新建数据库\n4． 退出\n\npostgres=# create user pg password \'pg\';\ncreate role\npostgres=# alter role pg superuser;\nalter role\npostgres=# create database pg;\ncreate database\npostgres=# \\q\n\n\n\n 1. 重新登陆数据库\n 2. 输入密码\n 3. 显示数据库\n\n[postgres@bogon ~]$ psql -u pg -d pg -h 192.168.0.244\npg=# \\l\n                         list of databases\n name    |  owner   | encoding | locale provider |   collate   |    ctype    | icu locale | icu rules |   access privileges   \n-----------+----------+----------+-----------------+----- \n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170369105e4},{title:"说明",frontmatter:{},regularPath:"/zs-use/env/",relativePath:"zs-use/env/README.md",key:"v-41f90cdf",path:"/zs-use/env/",lastUpdated:"2023年12月27日星期三晚上11点30分",lastUpdatedTimestamp:170369105e4,headersStr:null,content:"# 说明\n\n> 环境安装，软件安装",normalizedContent:"# 说明\n\n> 环境安装，软件安装",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170369105e4},{title:"Git使用",frontmatter:{},regularPath:"/zs-use/git/",relativePath:"zs-use/git/README.md",key:"v-6c210082",path:"/zs-use/git/",lastUpdated:"2023年11月30日星期四上午9点45分",lastUpdatedTimestamp:1701308717e3,headersStr:null,content:"# Git使用",normalizedContent:"# git使用",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701308717e3},{title:"SSH",frontmatter:{},regularPath:"/zs-use/git/FAQ.html",relativePath:"zs-use/git/FAQ.md",key:"v-f50e4944",path:"/zs-use/git/FAQ.html",headers:[{level:2,title:"SSH",slug:"ssh",normalizedTitle:"ssh",charIndex:2},{level:3,title:"配置SSH",slug:"配置ssh",normalizedTitle:"配置ssh",charIndex:88},{level:3,title:"验证原理",slug:"验证原理",normalizedTitle:"验证原理",charIndex:706},{level:3,title:"通俗解释！！",slug:"通俗解释",normalizedTitle:"通俗解释！！",charIndex:976},{level:2,title:"FAQ",slug:"faq",normalizedTitle:"faq",charIndex:1491},{level:3,title:"GitHub 更新了 RSA SSH host key",slug:"github-更新了-rsa-ssh-host-key",normalizedTitle:"github 更新了 rsa ssh host key",charIndex:1499},{level:3,title:"GitLab 更新了 RSA SSH host key",slug:"gitlab-更新了-rsa-ssh-host-key",normalizedTitle:"gitlab 更新了 rsa ssh host key",charIndex:3524}],lastUpdated:"2023年11月30日星期四上午9点45分",lastUpdatedTimestamp:1701308717e3,headersStr:"SSH 配置SSH 验证原理 通俗解释！！ FAQ GitHub 更新了 RSA SSH host key GitLab 更新了 RSA SSH host key",content:"# SSH\n\n官方文档：https://docs.github.com/zh/authentication/connecting-to-github-with-ssh\n\n\n# 配置SSH\n\ngit使用SSH配置， 初始需要以下三个步骤\n\n 1. 使用秘钥生成工具生成rsa秘钥和公钥\n 2. 将rsa公钥添加到代码托管平台\n 3. 将rsa秘钥添加到ssh-agent中，为ssh client指定使用的秘钥文件\n\n具体操作如下：\n\n# 第一步：检查本地主机是否已经存在ssh key\n\ncd ~/.ssh\nls\n//看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key\n\n\n如下图所示，则表明已经存在 如果存在，直接跳到第三步\n\n# 第二步：生成ssh key\n\n如果不存在ssh key，使用如下命令生成\n\nssh-keygen -t rsa -C \"xxx@xxx.com\"\n//执行后一直回车即可\n\n\n生成完以后再用第二步命令，查看ssh key\n\n# 第三步：获取ssh key公钥内容（id_rsa.pub）\n\ncd ~/.ssh\ncat id_rsa.pub\n\n\n如下图所示，复制该内容\n\n# 第四步：Github账号上添加公钥\n\n进入Settings设置\n\n添加ssh key，把刚才复制的内容粘贴上去保存即可\n\n# 第五步：验证是否设置成功\n\nssh -T git@github.com\n\n\n显示如下信息表明设置成功 设置成功后，即可不需要账号密码clone和push代码\n\n注意之后在clone仓库的时候要使用ssh的url，而不是https！\n\n\n# 验证原理\n\nSSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub, id_rsa。\n\n那么如何使用生成的一个私钥一个公钥进行验证呢？\n\n * 本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地\n * 当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。\n\n\n# 通俗解释！！\n\n重点来了：一定要知道ssh key的配置是针对每台主机的！，比如我在某台主机上操作git和我的远程仓库，想要push时不输入账号密码，走ssh协议，就需要配置ssh key，放上去的key是当前主机的ssh公钥。那么如果我换了一台其他主机，想要实现无密登录，也就需要重新配置。\n\n下面解释开头提出的问题： （1）为什么要配？ 配了才能实现push代码的时候不需要反复输入自己的github账号密码，更方便 （2）每使用一台主机都要配？ 是的，每使用一台新主机进行git远程操作，想要实现无密，都需要配置。并不是说每个账号配一次就够了，而是每一台主机都需要配。 （3）配了为啥就不用密码了？ 因为配置的时候是把当前主机的公钥放到了你的github账号下，相当于当前主机和你的账号做了一个关联，你在这台主机上已经登录了你的账号，此时此刻github认为是该账号主人在操作这台主机，在配置ssh后就信任该主机了。所以下次在使用git的时候即使没有登录github，也能直接从本地push代码到远程了。当然这里不要混淆了，你不能随意push你的代码到任何仓库，你只能push到你自己的仓库或者其他你有权限的仓库！\n\n\n# FAQ\n\n\n# GitHub 更新了 RSA SSH host key\n\n今天在 push 自己 GitHub 仓库代码的时候遇到了报错，后来发现是 GitHub 已经将 RSA SSH host key 进行了更新。依据官方博客，GitHub 于 3月24日 05:00 UTC 时间 由于安全原因将 RSA SSH host key 进行了更新。主要是为了避免 GitHub 用户的 git 操作被任何不法分子监听。这个变更仅影响基于 RSA 的 SSH 协议使用 GitHub 进行 git 操作的用户。变更也只影响 RSA 算法，不影响 ECDSA 或者 Ed25519 用户。\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\nSHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s.\nPlease contact your system administrator.\nAdd correct host key in ~/.ssh/known_hosts to get rid of this message.\nHost key for github.com has changed and you have requested strict checking.\nHost key verification failed.\n\n\n可以通过下述命令移除老的 key，也可以在 ~/.ssh/known_hosts 文件里面手动删除去更新。\n\nssh-keygen -R github.com\n\n\n你也可在 ~/.ssh/known_hosts 文件中手动添加新的 RSA SSH 公钥。\n\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n\n\n或者通过命令进行自动更新。\n\nssh-keygen -R github.com\n$ curl -L https://api.github.com/meta | jq -r '.ssh_keys | .[]' | sed -e 's/^/github.com /' >> ~/.ssh/known_hosts\n\n\nGithub Action 用户如果使用带有 ssh-key 选项的 actions/checkout 用户也可能会看到工作流的失败日志。目前 GitHub 已经对对应的 actions/checkout 进行了更新。\n\nReference\n\n * https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/\n\n\n# GitLab 更新了 RSA SSH host key\n\nroot@ubuntusrv6:/data2/home/XXX/apps/Debug# git pull\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ECDSA key sent by the remote host is\n85:82:b1:XXXX:d2.\nPlease contact your system administrator.\nAdd correct host key in /root/.ssh/known_hosts to get rid of this message.\nOffending ECDSA key in /root/.ssh/known_hosts:2\n  remove with: ssh-keygen -f \"/root/.ssh/known_hosts\" -R xxx.xxx.xxx.xxx (服务器ip地址)\nECDSA host key for xxx.xxx.xxx.xxx (服务器ip地址) has changed and you have requested strict checking.\nHost key verification failed.\nfatal: The remote end hung up unexpectedly\n\n\n\n# 问题原因\n\n用OpenSSH的人都知ssh会把你每个你访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告。\n\n原因是我的GitLab服务器重装了系统（清除了与我本地SSH连接协议相关信息），本地的SSH协议信息便失效了。SSH连接相同的ip地址时因有连接记录直接使用失效的协议信息去验证该ip服务器，所以会报错，使用上述命令便可以清除known_hosts里旧缓存文件。\n\n# 解决方法\n\n删除xxx.xxx.xxx.xxx (服务器ip地址)的相关rsa的信息即可\n\n在本地机输入一下命令行：\n\nssh-keygen -R xxx.xxx.xxx.xxx (服务器ip地址)\n\n\n> 目的是清除你当前机器里关于你的远程服务器的缓存和公钥信息，注意是大写的字母“R”。\n\n操作截图\n\n\n\nroot@ubuntusrv6:/data2/home/XXX/apps/Debug# ssh-keygen -R xxx.xxx.xxx.xxx (服务器ip地址)\n\n/root/.ssh/known_hosts updated.\nOriginal contents retained as /root/.ssh/known_hosts.old\n\n\nroot@ubuntusrv6:/data2/home/XXX/apps/Debug# ssh-keygen -R xxx.xxx.xxx.xxx\n/root/.ssh/known_hosts updated.\nOriginal contents retained as /root/.ssh/known_hosts.old\nroot@ubuntusrv6:/data2/home/XXX/apps/Debug# git pull\nThe authenticity of host 'xxx.xxx.xxx.xxx (xxx.xxx.xxx.xxx)' can't be established.\nECDSA key fingerprint is 85:82:b1:XXXX:d2.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'xxx.xxx.xxx.xxx' (ECDSA) to the list of known hosts.\nremote: Counting objects: 213, done.\nremote: Compressing objects: 100% (126/126), done.\nremote: Total 213 (delta 118), reused 156 (delta 62)\nReceiving objects: 100% (213/213), 4.51 MiB | 9 KiB/s, done.\nResolving deltas: 100% (118/118), completed with 60 local objects.\n",normalizedContent:"# ssh\n\n官方文档：https://docs.github.com/zh/authentication/connecting-to-github-with-ssh\n\n\n# 配置ssh\n\ngit使用ssh配置， 初始需要以下三个步骤\n\n 1. 使用秘钥生成工具生成rsa秘钥和公钥\n 2. 将rsa公钥添加到代码托管平台\n 3. 将rsa秘钥添加到ssh-agent中，为ssh client指定使用的秘钥文件\n\n具体操作如下：\n\n# 第一步：检查本地主机是否已经存在ssh key\n\ncd ~/.ssh\nls\n//看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有ssh key\n\n\n如下图所示，则表明已经存在 如果存在，直接跳到第三步\n\n# 第二步：生成ssh key\n\n如果不存在ssh key，使用如下命令生成\n\nssh-keygen -t rsa -c \"xxx@xxx.com\"\n//执行后一直回车即可\n\n\n生成完以后再用第二步命令，查看ssh key\n\n# 第三步：获取ssh key公钥内容（id_rsa.pub）\n\ncd ~/.ssh\ncat id_rsa.pub\n\n\n如下图所示，复制该内容\n\n# 第四步：github账号上添加公钥\n\n进入settings设置\n\n添加ssh key，把刚才复制的内容粘贴上去保存即可\n\n# 第五步：验证是否设置成功\n\nssh -t git@github.com\n\n\n显示如下信息表明设置成功 设置成功后，即可不需要账号密码clone和push代码\n\n注意之后在clone仓库的时候要使用ssh的url，而不是https！\n\n\n# 验证原理\n\nssh登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub, id_rsa。\n\n那么如何使用生成的一个私钥一个公钥进行验证呢？\n\n * 本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地\n * 当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。\n\n\n# 通俗解释！！\n\n重点来了：一定要知道ssh key的配置是针对每台主机的！，比如我在某台主机上操作git和我的远程仓库，想要push时不输入账号密码，走ssh协议，就需要配置ssh key，放上去的key是当前主机的ssh公钥。那么如果我换了一台其他主机，想要实现无密登录，也就需要重新配置。\n\n下面解释开头提出的问题： （1）为什么要配？ 配了才能实现push代码的时候不需要反复输入自己的github账号密码，更方便 （2）每使用一台主机都要配？ 是的，每使用一台新主机进行git远程操作，想要实现无密，都需要配置。并不是说每个账号配一次就够了，而是每一台主机都需要配。 （3）配了为啥就不用密码了？ 因为配置的时候是把当前主机的公钥放到了你的github账号下，相当于当前主机和你的账号做了一个关联，你在这台主机上已经登录了你的账号，此时此刻github认为是该账号主人在操作这台主机，在配置ssh后就信任该主机了。所以下次在使用git的时候即使没有登录github，也能直接从本地push代码到远程了。当然这里不要混淆了，你不能随意push你的代码到任何仓库，你只能push到你自己的仓库或者其他你有权限的仓库！\n\n\n# faq\n\n\n# github 更新了 rsa ssh host key\n\n今天在 push 自己 github 仓库代码的时候遇到了报错，后来发现是 github 已经将 rsa ssh host key 进行了更新。依据官方博客，github 于 3月24日 05:00 utc 时间 由于安全原因将 rsa ssh host key 进行了更新。主要是为了避免 github 用户的 git 操作被任何不法分子监听。这个变更仅影响基于 rsa 的 ssh 协议使用 github 进行 git 操作的用户。变更也只影响 rsa 算法，不影响 ecdsa 或者 ed25519 用户。\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@ warning: remote host identification has changed! @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nit is possible that someone is doing something nasty!\nsomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nit is also possible that a host key has just been changed.\nthe fingerprint for the rsa key sent by the remote host is\nsha256:univztkscsdhcc0u9e8bujqxvupkzidtmczcvj3td2s.\nplease contact your system administrator.\nadd correct host key in ~/.ssh/known_hosts to get rid of this message.\nhost key for github.com has changed and you have requested strict checking.\nhost key verification failed.\n\n\n可以通过下述命令移除老的 key，也可以在 ~/.ssh/known_hosts 文件里面手动删除去更新。\n\nssh-keygen -r github.com\n\n\n你也可在 ~/.ssh/known_hosts 文件中手动添加新的 rsa ssh 公钥。\n\ngithub.com ssh-rsa aaaab3nzac1yc2eaaaadaqabaaabgqcj7ndnxqowgcqnjshclrqpeiiphnt+vttvdp6mhbl9j1anuky4ue1gvwnglvlohgeyrnzamgrk6+pkcuxadbc7qtbw8gikhl7agcsor/c56sjmy/bczfxd1nwzaoxsdpgvsmerobyfnqltv9/hwcqbywinir+5dig6jtj72pcepejcygxke2yefxv1jhnskgblwnlhscqb2umyrkqyytrltl+38tgxkxcflmo+5z8cssny7gidjmiz7q4zmja2n1ngrltdkzwdcsw+wqfpgqa179cnfgwowrvruj16z6xyvxvjjwbz0wqz75xk5tksb7fnyeies4tt4jk+s4dhpeauc5y+bdyirygm4gc7uenztnzyavwq7b381ak4qdrwt51zqexkbqptunn+ejqotwvqnj4kqx5quci0ths/ykoxjcxmpuwzbhjpcg56i+2ab6cmk2jghn57k5mj0mndbxa4/wnwh6xopwjzk5nyu2zb3nazp+s5hpqs+p1vn1/wsjk=\n\n\n或者通过命令进行自动更新。\n\nssh-keygen -r github.com\n$ curl -l https://api.github.com/meta | jq -r '.ssh_keys | .[]' | sed -e 's/^/github.com /' >> ~/.ssh/known_hosts\n\n\ngithub action 用户如果使用带有 ssh-key 选项的 actions/checkout 用户也可能会看到工作流的失败日志。目前 github 已经对对应的 actions/checkout 进行了更新。\n\nreference\n\n * https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/\n\n\n# gitlab 更新了 rsa ssh host key\n\nroot@ubuntusrv6:/data2/home/xxx/apps/debug# git pull\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    warning: remote host identification has changed!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nit is possible that someone is doing something nasty!\nsomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nit is also possible that a host key has just been changed.\nthe fingerprint for the ecdsa key sent by the remote host is\n85:82:b1:xxxx:d2.\nplease contact your system administrator.\nadd correct host key in /root/.ssh/known_hosts to get rid of this message.\noffending ecdsa key in /root/.ssh/known_hosts:2\n  remove with: ssh-keygen -f \"/root/.ssh/known_hosts\" -r xxx.xxx.xxx.xxx (服务器ip地址)\necdsa host key for xxx.xxx.xxx.xxx (服务器ip地址) has changed and you have requested strict checking.\nhost key verification failed.\nfatal: the remote end hung up unexpectedly\n\n\n\n# 问题原因\n\n用openssh的人都知ssh会把你每个你访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，openssh会核对公钥。如果公钥不同，openssh会发出警告。\n\n原因是我的gitlab服务器重装了系统（清除了与我本地ssh连接协议相关信息），本地的ssh协议信息便失效了。ssh连接相同的ip地址时因有连接记录直接使用失效的协议信息去验证该ip服务器，所以会报错，使用上述命令便可以清除known_hosts里旧缓存文件。\n\n# 解决方法\n\n删除xxx.xxx.xxx.xxx (服务器ip地址)的相关rsa的信息即可\n\n在本地机输入一下命令行：\n\nssh-keygen -r xxx.xxx.xxx.xxx (服务器ip地址)\n\n\n> 目的是清除你当前机器里关于你的远程服务器的缓存和公钥信息，注意是大写的字母“r”。\n\n操作截图\n\n\n\nroot@ubuntusrv6:/data2/home/xxx/apps/debug# ssh-keygen -r xxx.xxx.xxx.xxx (服务器ip地址)\n\n/root/.ssh/known_hosts updated.\noriginal contents retained as /root/.ssh/known_hosts.old\n\n\nroot@ubuntusrv6:/data2/home/xxx/apps/debug# ssh-keygen -r xxx.xxx.xxx.xxx\n/root/.ssh/known_hosts updated.\noriginal contents retained as /root/.ssh/known_hosts.old\nroot@ubuntusrv6:/data2/home/xxx/apps/debug# git pull\nthe authenticity of host 'xxx.xxx.xxx.xxx (xxx.xxx.xxx.xxx)' can't be established.\necdsa key fingerprint is 85:82:b1:xxxx:d2.\nare you sure you want to continue connecting (yes/no)? yes\nwarning: permanently added 'xxx.xxx.xxx.xxx' (ecdsa) to the list of known hosts.\nremote: counting objects: 213, done.\nremote: compressing objects: 100% (126/126), done.\nremote: total 213 (delta 118), reused 156 (delta 62)\nreceiving objects: 100% (213/213), 4.51 mib | 9 kib/s, done.\nresolving deltas: 100% (118/118), completed with 60 local objects.\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701308717e3},{title:"面试--0.开篇",frontmatter:{},regularPath:"/zs-tool-%E5%B0%8F%E7%BB%93/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C/%E9%9D%A2%E8%AF%95--0.%E5%BC%80%E7%AF%87.html",relativePath:"zs-tool-小结/面经手册/面试--0.开篇.md",key:"v-39c71530",path:"/zs-tool-%E5%B0%8F%E7%BB%93/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C/%E9%9D%A2%E8%AF%95--0.%E5%BC%80%E7%AF%87.html",headers:[{level:2,title:"一、前言",slug:"一、前言",normalizedTitle:"一、前言",charIndex:15},{level:2,title:"二、程序员的愿望",slug:"二、程序员的愿望",normalizedTitle:"二、程序员的愿望",charIndex:704},{level:2,title:"三、谢飞机简历",slug:"三、谢飞机简历",normalizedTitle:"三、谢飞机简历",charIndex:819},{level:2,title:"四、面试框架",slug:"四、面试框架",normalizedTitle:"四、面试框架",charIndex:1001},{level:3,title:"1. 自我介绍",slug:"_1-自我介绍",normalizedTitle:"1. 自我介绍",charIndex:1014},{level:3,title:"2. 面试类型",slug:"_2-面试类型",normalizedTitle:"2. 面试类型",charIndex:1399},{level:3,title:"3. 算法",slug:"_3-算法",normalizedTitle:"3. 算法",charIndex:2135},{level:3,title:"4. 技术栈",slug:"_4-技术栈",normalizedTitle:"4. 技术栈",charIndex:2309},{level:3,title:"5. 项目",slug:"_5-项目",normalizedTitle:"5. 项目",charIndex:6535},{level:3,title:"6. 个人&面试官",slug:"_6-个人-面试官",normalizedTitle:"6. 个人&amp;面试官",charIndex:null},{level:2,title:"五、总结",slug:"五、总结",normalizedTitle:"五、总结",charIndex:7244}],lastUpdated:"2024年1月18日星期四早上8点57分",lastUpdatedTimestamp:1705539455e3,headersStr:"一、前言 二、程序员的愿望 三、谢飞机简历 四、面试框架 1. 自我介绍 2. 面试类型 3. 算法 4. 技术栈 5. 项目 6. 个人&面试官 五、总结",content:"# 面试--0.开篇\n\n\n# 一、前言\n\n一直以来都有小伙伴问我什么时候出一些面试系列的文章，脑袋一热一口答应下来，《重学Java设计模式》写完就安排。但是怎么写，要写成什么样才对读者有帮助成了难点。\n\n再三思考，面试只是一时的，工作、学习，才是长久坚持的。很多人面试不理想多半也是来自于自我学习能力的不足和工作内容的单一以及业务体量小导致。所以我想从全局培养人才的角度出发，也算是技术成长的经历中提取学习框架，帮助小伙伴们提升技术能力的同时也可以应对面试。\n\n好像面试越来越难？\n\n\n招聘一个合格的研发有多难？近半年我差不多收了400份简历，筛选简历到初面通过的不足10%。这里面很多人连简历都写不好，面试时也经常回答不到点上，技术栈广度不够深度不足，项目经验缺乏，没有解决复杂场景的经验等等。但也同样有很多优秀的，手里有多个offer最后流失。对于企业是损失，但对于个人来说，我佩服这样的人，他们技术好有更多的选择。\n\n30岁要有30岁的能力，35岁要有35的经历\n\n\n有时候不是面试难，而是年龄与能力不匹配，对企业招聘来说，同样能力下你价格还高，为什么不招聘个年轻有活力的呢？(什么？找对象) 有时候你会说这是贩卖焦虑，这是洗脑，但这条路上终究有人前进，有人被动回退。\n\n学习是你这个职业一辈子的事\n\n\n手里有个 1 2 3，不要想着去怼别人的 4 5 6，因为还有你不知道的 7 8 9。保持空瓶心态从0开始才能学到10全\n\n这一篇我会从简历的视角出发，简要概况出研发人员应该具备的能力 有了这篇的基础上，后续再逐步扩展系列的面试场景，以及对应的面试题细节讲解和从哪学习这些知识的一个引导。\n\n\n# 二、程序员的愿望\n\n5年，时间不长不短，有人结婚生娃、有人回家开店、也有人继续在大城市打拼。\n\n留言心愿集中的点，在于；\n\n 1. 身体健康\n 2. 头发还在\n 3. 加薪升职\n\n努力！也照顾好自己。奋斗！也爱惜好身体。\n\n\n# 三、谢飞机简历\n\n这是一份工作4年的谢飞机简历，如下；\n\n * 先看看简历，与自己的对比下，有什么可取之处\n * 如果你是求职者，还希望在这份简历里补充什么\n * 如果你是面试官，你举得这份简历还差了什么\n\n\n\n * 这一份开篇的简历，可以阅读完下面的面试框架进行比对，看看你应该做些什么 。\n * 后续的系列面经文章，将围绕简历开始，提问和讲解面试题。\n\n\n# 四、面试框架\n\n\n\n\n# 1. 自我介绍\n\n 1. 1分钟左右的自我介绍，简要的描述出；姓名、毕业时间、工作年限、工作经历、技术影响力[博客、Github、开源贡献、专利]等。\n 2. 如果有较大型项目或者大家有一致性认知的项目和技术难点攻克，可以简单说出项目名称等。\n 3. 方法论沉淀相关；架构设计能力、带过小组或者团队、跨部门协调、流程规范制定和执行等。\n\n你要透露出的核心点就是个人的一个基本信息，以及项目和技术上的沉淀，给面试官留出和你聊下去的话题\n\n例如：\n\n面试官好，我叫谢飞机，16年毕业于天津工业大学，软件工程专业，目前已工作4年。我从毕业后就职于途乐数字科技，负责营销和订单系统开发。在系统搭建、代码优化、问题处理上有较丰富的经验和处理能力。同时也喜欢写一些技术博客和看一些技术书籍，另外在Spring、Dubbo等源码学习上有过一些研究以及复用到业务开发中。感谢！\n\n\n# 2. 面试类型\n\n依赖于面试官的不同，与你一起进入面试的方式也不同，比如；\n\n 1. 直接提问型；直接提问一些技术栈问题或者有些公司会考算法。\n 2. 场景引导型；通过让你介绍的一些项目经历，用过什么技术栈，在场景下提问。\n 3. 连环追问型；从一个点出发，你的每一个回答都在为下一个深入的问题做开始。\n 4. 压力逼问型；压力面一般不多，但抗的住并能抓住重点，offer基本稳了。\n\n直接提问型 需要你有一定的技术栈广度和深度，问题往往也比较有跳跃性。但大部分题目会是热点问题，但可能不是日常开发中频率最高的技术点。\n\n场景引导型 需要你有一定的开发架构经验和项目落地能力，这部分问题基本都会结合实际的业务场景进行提问，每一个场景就是一个复杂问题问题的解决能力。这里问到的场景会与你简历中的工作经历和项目相关，但复杂程度可能会超过你目前简历中的项目内容。比如；你写了一个订单类的，那么会问你秒杀的实际解决方案。这样的问题很难背题应付，需要真的经历过，研究过。\n\n连环追问型 从一个小的技术点开始，一层层往下剥，每一次的回答也几乎都是下一个问题的深入点的来源。这种问题不仅考察面试者，也是对面试官的考验。往往在招聘高级别开发时会进行定向深入挖掘提问，找到匹配的行业专家级技术人员。\n\n压力逼问型 这种面试方式一般不多，但可能有的高级面试官会让你感受到这种气场。一方面是确实人家有这样的技术气势，另外一个是来自自己的紧张。如果会不是问题，还会在面试官那留下很高的打分。如果不会，那么会感觉到你越不会什么，面试官越问你什么。\n\n以上就是基本这四类面试官的风格，求职除了技术能力外还有一部分是眼缘，不一定一个问题不会就是你不优秀，而是在寻找这个职位最适合匹配度的人员。\n\n\n# 3. 算法\n\n算法一整块内容来考的互联网公司目前有一些，比如；头条、谷歌、百度，但不一定所有职位都需要去考算法。热频考点大部分可以分如下几块：\n\n 1. 动态规划\n 2. 数据结构\n 3. 算法思维\n\n在题目上一般会有排序、二分查找、回文链表、反链链表，和数据结构设计方面。这些题目可以通过 leetcode-cn.com 刷题进行练习。\n\n\n# 4. 技术栈\n\n技术栈考查的是程序员在编程开发领域学习的广度和深度，日常的业务开发往往提升都是对API使用的熟练程度，如果再缺少一些系统设计和技术难点攻克，或者说没有大流量的冲击。那么确实很难回答一些技术深度问题。如下汇总了基本会再技术栈面试中涉及的考题，可以参考提升个人技术能力。\n\n# 4.1 技能\n\n# 4.1.1 Java\n\n# JDK源码\n\n 1. HashMap\n    1. HashMap的数据结构(1.7、1.8的区别)\n    2. HashMap的实现原理\n    3. HashMap扩容为什么是2^n-1\n    4. HashMap是线程安全的吗\n    5. HashMap、HashTable是什么关系？\n 2. ThreadLocal\n    1. 讲讲你对ThreadLocal的一些理解\n    2. ThreadLocal有哪些应用场景\n    3. 了解过FastThreadLocal吗\n 3. ArrayList、LinkList\n    1. 是否保证线程安全\n    2. 底层数据结构\n    3. 插入和删除是否受元素位置的影响\n    4. 是否支持快速随机访问\n    5. 内存空间占用\n    6. 如何进行扩容的，默认初始化空间是多少\n 4. String StringBuffer StringBuilder\n    1. 有什么区别\n    2. 是线程安全的吗\n 5. jdk1.8的新特性\n    1. lambda表达式\n    2. Functional Interfaces\n    3. Optionals\n    4. Stream 流\n    5. Parallel-Streams 并行流\n\n# 并发编程(j.u.c)\n\n 1. volatile\n    1. volatile 的作用和使用场景\n    2. volatile 如何保证指令重排\n    3. 什么情况下会发生指令重排\n 2. synchronized\n    1. 一般用在什么场景\n    2. 实现原理\n    3. 锁升级过程(偏向锁、轻量级锁、重量级锁)\n    4. 这是JVM层面锁，还是JDK层面锁｛JVM层面｝\n    5. 这是一种悲观锁还是乐观锁｛悲观锁是独占锁｝\n 3. lock\n    1. 这是JVM层面锁，还是JDK层面锁｛JDK层面｝\n    2. 这是一种悲观锁还是乐观锁\n    3. 是可重入锁吗\n 4. ReentrantLock\n    1. 与synchronized相比较有什么不同\n    2. ReentrantLock 与 Lock 的关系\n    3. 锁过程中是否可中断，与之对应的synchronized可中断吗\n 5. CAS\n    1. Unsafe 类的作用\n    2. CAS 的理解(compareAndSet)\n    3. 什么是ABA问题\n    4. CAS的实现有什么(AtomicInteger)\n 6. AQS\n    1. 实现类有哪些 ReentrantLock、Semaphore、CountDownLatch、CyclicBarrier\n    2. 实现了AQS的锁有哪些 自旋锁、互斥锁、读锁写锁、条件产量、信号量、栅栏都是AQS的衍生物 内存屏障，几乎所有的处理器至少支持一种粗粒度的屏障指令，通常被称为“栅栏（Fence）”\n\n# 多线程\n\n 1. 线程池的种类\n    1. newCachedThreadPool\n    2. newFixedThreadPool\n    3. newScheduledThreadPool\n    4. newSingleThreadExecutor\n 2. 线程的生命周期\n    1. 新建、就绪、运行、阻塞(等待阻塞、同步阻塞、其他阻塞)、死亡\n\n# JVM\n\n 1. GC 优化\n 2. JVM 逃逸分析\n 3. 类的对象头都包括什么\n 4. new Object() 初始化都做了什么\n 5. 运行时数据区\n 6. Java的内存模型以及GC算法\n\n# 设计模式\n\n 1. 设计模式6大原则 单一职责(一个类和方法只做一件事)、里氏替换(多态，子类可扩展父类)、依赖倒置(细节依赖抽象，下层依赖上层)、接口隔离(建立单一接口)、迪米特原则(最少知道，降低耦合)、开闭原则(抽象架构，扩展实现)\n 2. 创建型模式 这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复用性。\n 3. 结构型模式 这类模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。\n 4. 行为模式 这类模式负责对象间的高效沟通和职责委派。\n\n# 反射、代理\n\n 1. 怎么实现反射调用方法\n 2. 怎么代理一个类，有什么场景使用\n 3. 类代理的原理是什么\n 4. 有什么框架可以做类代理\n\n# 4.1.2 Redis\n\n# 命令\n\n 1. 计数命令\n 2. 排序命令\n 3. 加锁命令\n\n# 架构\n\n 1. 常用的数据类型\n 2. 数据淘汰策略\n 3. 单线程的为什么那么快\n 4. RDB和AOF的优缺点\n 5. 持久化策略选择\n\n# 应用\n\n 1. 缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级\n 2. Pipeline有什么好处，为什么要用pipeline\n 3. 是否使用过Redis集群，集群的原理是什么\n 4. Redis的同步机制了解么\n\n# 4.1.3 Mysql\n\n# 锁\n\n 1. 全局锁\n 2. 表锁\n 3. 行锁\n 4. 乐观锁、悲观锁\n 5. 排他锁\n 6. 锁优化\n\n# 事务\n\n 1. 事物特征\n 2. 脏读\n 3. 幻读\n 4. 不可重复读\n 5. 事物隔离\n 6. 并发事物\n 7. 事物实现原理\n\n# 日志\n\n 1. 慢查询日志\n 2. 错误日志\n 3. redo log(重做日志)\n 4. binlog(归档日志)\n 5. undo log(回滚日志)\n\n# 索引\n\n 1. 聚集索引 VS 非聚集索引\n 2. 最左匹配原则\n 3. 前缀索引\n\n# 引擎\n\n 1. InnoDB\n 2. MyISAM\n\n# 4.2 框架\n\n# 4.2.1 Spring\n\n * 手写Spring：渐进式源码实践(opens new window)\n\n 1. Bean的注册过程\n 2. Bean的定义都包括什么信息\n 3. Spring 事务中的隔离级别有哪几种\n 4. schedule 使用\n\n# 4.2.2 Mybatis\n\n * 手写Mybatis：渐进式源码实践(opens new window)\n\n 1. mybatis在spring的使用中，只需要定义接口，就可以和xml中的配置的sql语句，进行关联，执行数据库增删改查操作。怎么实现的\n 2. session是怎么管理的\n\n# 4.3.3 SpringBoot\n\n * [SpringBoot 中间件设计和开发(opens new window)](https://bugstack.cn/md/project/springboot-middleware/2021-03-31-《SpringBoot 中间件设计和开发》专栏小册上线啦！.html)\n\n 1. SpringBoot 怎么开发一个自己的Stater\n\n# 4.2.4 SpringCloud\n\n 1. spring cloud 断路器的作用是什么\n 2. spring cloud 的核心组件有哪些 Eureka：服务注册于发现。 Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。 Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。 Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。 Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。\n\n# 4.3 组件\n\n# 4.3.1 Dubbo\n\n 1. 通信模型是什么样的\n 2. Dubbo 和 Spring Cloud 有什么区别\n 3. dubbo都支持什么协议，推荐用哪种 dubbo://（推荐） rmi:// hessian:// http:// webservice:// thrift:// memcached:// redis:// rest://\n 4. Dubbo里面有哪几种节点角色\n 5. Dubbo中怎么处理的超时断开\n\n# 4.3.2 Mq\n\n 1. RabbitMq\n 2. Kafka\n\n# 4.3.3 elasticsearch\n\n 1. elasticsearch 了解多少，说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。\n 2. elasticsearch 的倒排索引是什么\n 3. elasticsearch 是如何实现 master 选举的\n 4. 详细描述一下 Elasticsearch 搜索的过程\n\n# 4.3.4 Hbase\n\n 1. 拓展类问题\n\n# 4.3.5 otter\n\n 1. 拓展类问题\n\n# 4.4 工具\n\n 1. Idea\n 2. Maven\n 3. Jenkins\n 4. JMeter\n\n# 4.5 架构\n\n# 4.5.1 系统搭建\n\n 1. MVC\n 2. DDD 领域驱动设计\n\n# 4.5.2 数据库设计\n\n 1. 分库分表(水平拆分、垂直拆分)\n 2. 业务场景\n 3. 基础配置优化相关\n\n# 4.5.3 服务治理\n\n 1. 负载均衡\n 2. 熔断\n 3. 降级\n 4. 限流\n 5. 黑白名单\n\n# 4.5.4 分布式任务\n\n 1. xxl-job\n\n# 4.5.5 监控\n\n 1. 系统非入侵全链路监控\n 2. TP99、TP999、QPS、TPS的熟悉程度\n\n# 4.5.6 压测\n\n 1. 是否压测过，有无经验\n 2. 对系统健壮性的把控\n 3. JVM参数\n 4. GC调优\n 5. 代码优化\n\n# 4.6 环境\n\n 1. Linux\n 2. Tomcat\n 3. docker\n 4. k8s\n\n\n# 5. 项目\n\n * Lottery 抽奖系统 - 基于领域驱动设计的四层架构实践(opens new window)\n * Netty+JavaFx实战：仿桌面版微信聊天(opens new window)\n * API网关：中间件设计和实践(opens new window)\n\n# 5.1 项目经验\n\n 1. 开发了哪些项目\n 2. 重点项目是什么\n 3. 你主要负责哪些\n 4. 有过什么优化\n\n# 5.2 工作业绩\n\n 1. 中大型项目架构能力\n 2. 复杂项目落地能力\n 3. 重点项目执行落地\n 4. 交付能力&质量\n\n# 5.3 技术沉淀\n\n 1. 方法论\n 2. 流程规范制定\n 3. 交付质量\n 4. 公用组件建设\n 5. 开源项目\n 6. 复杂架构设计经验\n 7. 团队技术分享\n\n# 5.4 工程师品质\n\n 1. 认知范围，技术、业务、运营\n 2. 学习能力，接受能力\n 3. 创新技术，迁移能力\n\n# 5.5 疑难问题处理\n\n 1. 复杂问题推进解决能力\n 2. 紧急事故解决能力\n\n# 5.6 项目推进\n\n 1. 中大型项目推进落地\n 2. 资源协调安排\n 3. 流程规范实施\n\n# 5.7 专业影响力\n\n 1. 项目推进过程中方案执行落地\n 2. 带动他人共同完成，并赋予能力提升\n 3. 技术价值创造\n 4. 开源项目和专利\n\n\n# 6. 个人&面试官\n\n# 6.1 个人\n\n 1. 可能会有一个人性的问题\n 2. 介绍自己部门是什么的\n 3. 其他你早点入职\n\n# 6.2 面试官\n\n 1. 部门主要做什么业务\n 2. 入职后承担哪块\n 3. 有什么技术挑战需要提前学习了解的\n\n\n# 五、总结\n\n * 结合以上框架内容看自己是否是一个能抗住打的求职者，综合素质是否全面，技术栈广度、深度是否在瓶颈里徘徊，思考下怎么突破。\n * 面试只是一份求职的开始，面试题也只是学习过程的知识点总结，只流于背题很容易被问倒。不同的面试官风格、水平、关注点也都不同，只有自己学扎实了才能随心所面。",normalizedContent:"# 面试--0.开篇\n\n\n# 一、前言\n\n一直以来都有小伙伴问我什么时候出一些面试系列的文章，脑袋一热一口答应下来，《重学java设计模式》写完就安排。但是怎么写，要写成什么样才对读者有帮助成了难点。\n\n再三思考，面试只是一时的，工作、学习，才是长久坚持的。很多人面试不理想多半也是来自于自我学习能力的不足和工作内容的单一以及业务体量小导致。所以我想从全局培养人才的角度出发，也算是技术成长的经历中提取学习框架，帮助小伙伴们提升技术能力的同时也可以应对面试。\n\n好像面试越来越难？\n\n\n招聘一个合格的研发有多难？近半年我差不多收了400份简历，筛选简历到初面通过的不足10%。这里面很多人连简历都写不好，面试时也经常回答不到点上，技术栈广度不够深度不足，项目经验缺乏，没有解决复杂场景的经验等等。但也同样有很多优秀的，手里有多个offer最后流失。对于企业是损失，但对于个人来说，我佩服这样的人，他们技术好有更多的选择。\n\n30岁要有30岁的能力，35岁要有35的经历\n\n\n有时候不是面试难，而是年龄与能力不匹配，对企业招聘来说，同样能力下你价格还高，为什么不招聘个年轻有活力的呢？(什么？找对象) 有时候你会说这是贩卖焦虑，这是洗脑，但这条路上终究有人前进，有人被动回退。\n\n学习是你这个职业一辈子的事\n\n\n手里有个 1 2 3，不要想着去怼别人的 4 5 6，因为还有你不知道的 7 8 9。保持空瓶心态从0开始才能学到10全\n\n这一篇我会从简历的视角出发，简要概况出研发人员应该具备的能力 有了这篇的基础上，后续再逐步扩展系列的面试场景，以及对应的面试题细节讲解和从哪学习这些知识的一个引导。\n\n\n# 二、程序员的愿望\n\n5年，时间不长不短，有人结婚生娃、有人回家开店、也有人继续在大城市打拼。\n\n留言心愿集中的点，在于；\n\n 1. 身体健康\n 2. 头发还在\n 3. 加薪升职\n\n努力！也照顾好自己。奋斗！也爱惜好身体。\n\n\n# 三、谢飞机简历\n\n这是一份工作4年的谢飞机简历，如下；\n\n * 先看看简历，与自己的对比下，有什么可取之处\n * 如果你是求职者，还希望在这份简历里补充什么\n * 如果你是面试官，你举得这份简历还差了什么\n\n\n\n * 这一份开篇的简历，可以阅读完下面的面试框架进行比对，看看你应该做些什么 。\n * 后续的系列面经文章，将围绕简历开始，提问和讲解面试题。\n\n\n# 四、面试框架\n\n\n\n\n# 1. 自我介绍\n\n 1. 1分钟左右的自我介绍，简要的描述出；姓名、毕业时间、工作年限、工作经历、技术影响力[博客、github、开源贡献、专利]等。\n 2. 如果有较大型项目或者大家有一致性认知的项目和技术难点攻克，可以简单说出项目名称等。\n 3. 方法论沉淀相关；架构设计能力、带过小组或者团队、跨部门协调、流程规范制定和执行等。\n\n你要透露出的核心点就是个人的一个基本信息，以及项目和技术上的沉淀，给面试官留出和你聊下去的话题\n\n例如：\n\n面试官好，我叫谢飞机，16年毕业于天津工业大学，软件工程专业，目前已工作4年。我从毕业后就职于途乐数字科技，负责营销和订单系统开发。在系统搭建、代码优化、问题处理上有较丰富的经验和处理能力。同时也喜欢写一些技术博客和看一些技术书籍，另外在spring、dubbo等源码学习上有过一些研究以及复用到业务开发中。感谢！\n\n\n# 2. 面试类型\n\n依赖于面试官的不同，与你一起进入面试的方式也不同，比如；\n\n 1. 直接提问型；直接提问一些技术栈问题或者有些公司会考算法。\n 2. 场景引导型；通过让你介绍的一些项目经历，用过什么技术栈，在场景下提问。\n 3. 连环追问型；从一个点出发，你的每一个回答都在为下一个深入的问题做开始。\n 4. 压力逼问型；压力面一般不多，但抗的住并能抓住重点，offer基本稳了。\n\n直接提问型 需要你有一定的技术栈广度和深度，问题往往也比较有跳跃性。但大部分题目会是热点问题，但可能不是日常开发中频率最高的技术点。\n\n场景引导型 需要你有一定的开发架构经验和项目落地能力，这部分问题基本都会结合实际的业务场景进行提问，每一个场景就是一个复杂问题问题的解决能力。这里问到的场景会与你简历中的工作经历和项目相关，但复杂程度可能会超过你目前简历中的项目内容。比如；你写了一个订单类的，那么会问你秒杀的实际解决方案。这样的问题很难背题应付，需要真的经历过，研究过。\n\n连环追问型 从一个小的技术点开始，一层层往下剥，每一次的回答也几乎都是下一个问题的深入点的来源。这种问题不仅考察面试者，也是对面试官的考验。往往在招聘高级别开发时会进行定向深入挖掘提问，找到匹配的行业专家级技术人员。\n\n压力逼问型 这种面试方式一般不多，但可能有的高级面试官会让你感受到这种气场。一方面是确实人家有这样的技术气势，另外一个是来自自己的紧张。如果会不是问题，还会在面试官那留下很高的打分。如果不会，那么会感觉到你越不会什么，面试官越问你什么。\n\n以上就是基本这四类面试官的风格，求职除了技术能力外还有一部分是眼缘，不一定一个问题不会就是你不优秀，而是在寻找这个职位最适合匹配度的人员。\n\n\n# 3. 算法\n\n算法一整块内容来考的互联网公司目前有一些，比如；头条、谷歌、百度，但不一定所有职位都需要去考算法。热频考点大部分可以分如下几块：\n\n 1. 动态规划\n 2. 数据结构\n 3. 算法思维\n\n在题目上一般会有排序、二分查找、回文链表、反链链表，和数据结构设计方面。这些题目可以通过 leetcode-cn.com 刷题进行练习。\n\n\n# 4. 技术栈\n\n技术栈考查的是程序员在编程开发领域学习的广度和深度，日常的业务开发往往提升都是对api使用的熟练程度，如果再缺少一些系统设计和技术难点攻克，或者说没有大流量的冲击。那么确实很难回答一些技术深度问题。如下汇总了基本会再技术栈面试中涉及的考题，可以参考提升个人技术能力。\n\n# 4.1 技能\n\n# 4.1.1 java\n\n# jdk源码\n\n 1. hashmap\n    1. hashmap的数据结构(1.7、1.8的区别)\n    2. hashmap的实现原理\n    3. hashmap扩容为什么是2^n-1\n    4. hashmap是线程安全的吗\n    5. hashmap、hashtable是什么关系？\n 2. threadlocal\n    1. 讲讲你对threadlocal的一些理解\n    2. threadlocal有哪些应用场景\n    3. 了解过fastthreadlocal吗\n 3. arraylist、linklist\n    1. 是否保证线程安全\n    2. 底层数据结构\n    3. 插入和删除是否受元素位置的影响\n    4. 是否支持快速随机访问\n    5. 内存空间占用\n    6. 如何进行扩容的，默认初始化空间是多少\n 4. string stringbuffer stringbuilder\n    1. 有什么区别\n    2. 是线程安全的吗\n 5. jdk1.8的新特性\n    1. lambda表达式\n    2. functional interfaces\n    3. optionals\n    4. stream 流\n    5. parallel-streams 并行流\n\n# 并发编程(j.u.c)\n\n 1. volatile\n    1. volatile 的作用和使用场景\n    2. volatile 如何保证指令重排\n    3. 什么情况下会发生指令重排\n 2. synchronized\n    1. 一般用在什么场景\n    2. 实现原理\n    3. 锁升级过程(偏向锁、轻量级锁、重量级锁)\n    4. 这是jvm层面锁，还是jdk层面锁｛jvm层面｝\n    5. 这是一种悲观锁还是乐观锁｛悲观锁是独占锁｝\n 3. lock\n    1. 这是jvm层面锁，还是jdk层面锁｛jdk层面｝\n    2. 这是一种悲观锁还是乐观锁\n    3. 是可重入锁吗\n 4. reentrantlock\n    1. 与synchronized相比较有什么不同\n    2. reentrantlock 与 lock 的关系\n    3. 锁过程中是否可中断，与之对应的synchronized可中断吗\n 5. cas\n    1. unsafe 类的作用\n    2. cas 的理解(compareandset)\n    3. 什么是aba问题\n    4. cas的实现有什么(atomicinteger)\n 6. aqs\n    1. 实现类有哪些 reentrantlock、semaphore、countdownlatch、cyclicbarrier\n    2. 实现了aqs的锁有哪些 自旋锁、互斥锁、读锁写锁、条件产量、信号量、栅栏都是aqs的衍生物 内存屏障，几乎所有的处理器至少支持一种粗粒度的屏障指令，通常被称为“栅栏（fence）”\n\n# 多线程\n\n 1. 线程池的种类\n    1. newcachedthreadpool\n    2. newfixedthreadpool\n    3. newscheduledthreadpool\n    4. newsinglethreadexecutor\n 2. 线程的生命周期\n    1. 新建、就绪、运行、阻塞(等待阻塞、同步阻塞、其他阻塞)、死亡\n\n# jvm\n\n 1. gc 优化\n 2. jvm 逃逸分析\n 3. 类的对象头都包括什么\n 4. new object() 初始化都做了什么\n 5. 运行时数据区\n 6. java的内存模型以及gc算法\n\n# 设计模式\n\n 1. 设计模式6大原则 单一职责(一个类和方法只做一件事)、里氏替换(多态，子类可扩展父类)、依赖倒置(细节依赖抽象，下层依赖上层)、接口隔离(建立单一接口)、迪米特原则(最少知道，降低耦合)、开闭原则(抽象架构，扩展实现)\n 2. 创建型模式 这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复用性。\n 3. 结构型模式 这类模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。\n 4. 行为模式 这类模式负责对象间的高效沟通和职责委派。\n\n# 反射、代理\n\n 1. 怎么实现反射调用方法\n 2. 怎么代理一个类，有什么场景使用\n 3. 类代理的原理是什么\n 4. 有什么框架可以做类代理\n\n# 4.1.2 redis\n\n# 命令\n\n 1. 计数命令\n 2. 排序命令\n 3. 加锁命令\n\n# 架构\n\n 1. 常用的数据类型\n 2. 数据淘汰策略\n 3. 单线程的为什么那么快\n 4. rdb和aof的优缺点\n 5. 持久化策略选择\n\n# 应用\n\n 1. 缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级\n 2. pipeline有什么好处，为什么要用pipeline\n 3. 是否使用过redis集群，集群的原理是什么\n 4. redis的同步机制了解么\n\n# 4.1.3 mysql\n\n# 锁\n\n 1. 全局锁\n 2. 表锁\n 3. 行锁\n 4. 乐观锁、悲观锁\n 5. 排他锁\n 6. 锁优化\n\n# 事务\n\n 1. 事物特征\n 2. 脏读\n 3. 幻读\n 4. 不可重复读\n 5. 事物隔离\n 6. 并发事物\n 7. 事物实现原理\n\n# 日志\n\n 1. 慢查询日志\n 2. 错误日志\n 3. redo log(重做日志)\n 4. binlog(归档日志)\n 5. undo log(回滚日志)\n\n# 索引\n\n 1. 聚集索引 vs 非聚集索引\n 2. 最左匹配原则\n 3. 前缀索引\n\n# 引擎\n\n 1. innodb\n 2. myisam\n\n# 4.2 框架\n\n# 4.2.1 spring\n\n * 手写spring：渐进式源码实践(opens new window)\n\n 1. bean的注册过程\n 2. bean的定义都包括什么信息\n 3. spring 事务中的隔离级别有哪几种\n 4. schedule 使用\n\n# 4.2.2 mybatis\n\n * 手写mybatis：渐进式源码实践(opens new window)\n\n 1. mybatis在spring的使用中，只需要定义接口，就可以和xml中的配置的sql语句，进行关联，执行数据库增删改查操作。怎么实现的\n 2. session是怎么管理的\n\n# 4.3.3 springboot\n\n * [springboot 中间件设计和开发(opens new window)](https://bugstack.cn/md/project/springboot-middleware/2021-03-31-《springboot 中间件设计和开发》专栏小册上线啦！.html)\n\n 1. springboot 怎么开发一个自己的stater\n\n# 4.2.4 springcloud\n\n 1. spring cloud 断路器的作用是什么\n 2. spring cloud 的核心组件有哪些 eureka：服务注册于发现。 feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。 ribbon：实现负载均衡，从一个服务的多台机器中选择一台。 hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。 zuul：网关管理，由 zuul 网关转发请求给对应的服务。\n\n# 4.3 组件\n\n# 4.3.1 dubbo\n\n 1. 通信模型是什么样的\n 2. dubbo 和 spring cloud 有什么区别\n 3. dubbo都支持什么协议，推荐用哪种 dubbo://（推荐） rmi:// hessian:// http:// webservice:// thrift:// memcached:// redis:// rest://\n 4. dubbo里面有哪几种节点角色\n 5. dubbo中怎么处理的超时断开\n\n# 4.3.2 mq\n\n 1. rabbitmq\n 2. kafka\n\n# 4.3.3 elasticsearch\n\n 1. elasticsearch 了解多少，说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。\n 2. elasticsearch 的倒排索引是什么\n 3. elasticsearch 是如何实现 master 选举的\n 4. 详细描述一下 elasticsearch 搜索的过程\n\n# 4.3.4 hbase\n\n 1. 拓展类问题\n\n# 4.3.5 otter\n\n 1. 拓展类问题\n\n# 4.4 工具\n\n 1. idea\n 2. maven\n 3. jenkins\n 4. jmeter\n\n# 4.5 架构\n\n# 4.5.1 系统搭建\n\n 1. mvc\n 2. ddd 领域驱动设计\n\n# 4.5.2 数据库设计\n\n 1. 分库分表(水平拆分、垂直拆分)\n 2. 业务场景\n 3. 基础配置优化相关\n\n# 4.5.3 服务治理\n\n 1. 负载均衡\n 2. 熔断\n 3. 降级\n 4. 限流\n 5. 黑白名单\n\n# 4.5.4 分布式任务\n\n 1. xxl-job\n\n# 4.5.5 监控\n\n 1. 系统非入侵全链路监控\n 2. tp99、tp999、qps、tps的熟悉程度\n\n# 4.5.6 压测\n\n 1. 是否压测过，有无经验\n 2. 对系统健壮性的把控\n 3. jvm参数\n 4. gc调优\n 5. 代码优化\n\n# 4.6 环境\n\n 1. linux\n 2. tomcat\n 3. docker\n 4. k8s\n\n\n# 5. 项目\n\n * lottery 抽奖系统 - 基于领域驱动设计的四层架构实践(opens new window)\n * netty+javafx实战：仿桌面版微信聊天(opens new window)\n * api网关：中间件设计和实践(opens new window)\n\n# 5.1 项目经验\n\n 1. 开发了哪些项目\n 2. 重点项目是什么\n 3. 你主要负责哪些\n 4. 有过什么优化\n\n# 5.2 工作业绩\n\n 1. 中大型项目架构能力\n 2. 复杂项目落地能力\n 3. 重点项目执行落地\n 4. 交付能力&质量\n\n# 5.3 技术沉淀\n\n 1. 方法论\n 2. 流程规范制定\n 3. 交付质量\n 4. 公用组件建设\n 5. 开源项目\n 6. 复杂架构设计经验\n 7. 团队技术分享\n\n# 5.4 工程师品质\n\n 1. 认知范围，技术、业务、运营\n 2. 学习能力，接受能力\n 3. 创新技术，迁移能力\n\n# 5.5 疑难问题处理\n\n 1. 复杂问题推进解决能力\n 2. 紧急事故解决能力\n\n# 5.6 项目推进\n\n 1. 中大型项目推进落地\n 2. 资源协调安排\n 3. 流程规范实施\n\n# 5.7 专业影响力\n\n 1. 项目推进过程中方案执行落地\n 2. 带动他人共同完成，并赋予能力提升\n 3. 技术价值创造\n 4. 开源项目和专利\n\n\n# 6. 个人&面试官\n\n# 6.1 个人\n\n 1. 可能会有一个人性的问题\n 2. 介绍自己部门是什么的\n 3. 其他你早点入职\n\n# 6.2 面试官\n\n 1. 部门主要做什么业务\n 2. 入职后承担哪块\n 3. 有什么技术挑战需要提前学习了解的\n\n\n# 五、总结\n\n * 结合以上框架内容看自己是否是一个能抗住打的求职者，综合素质是否全面，技术栈广度、深度是否在瓶颈里徘徊，思考下怎么突破。\n * 面试只是一份求职的开始，面试题也只是学习过程的知识点总结，只流于背题很容易被问倒。不同的面试官风格、水平、关注点也都不同，只有自己学扎实了才能随心所面。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705539455e3},{title:"短轮询--不推荐使用",frontmatter:{},regularPath:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E7%9F%AD%E8%BD%AE%E8%AF%A2--%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8.html",relativePath:"zs-tool-框架/消息推送/短轮询--不推荐使用.md",key:"v-7bc421bc",path:"/zs-tool-%E6%A1%86%E6%9E%B6/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E7%9F%AD%E8%BD%AE%E8%AF%A2--%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8.html",lastUpdated:"2024年1月30日星期二下午2点36分",lastUpdatedTimestamp:1706596574e3,headersStr:null,content:'# 短轮询--不推荐使用\n\n> 前端直接定时调用就完了\n\n<!DOCTYPE html>\n<html>\n\n<head>\n    <title>短轮询</title>\n    <meta charset="utf-8">\n    \x3c!--<link id="link1" rel="stylesheet" href="st.css" type="text/css" />--\x3e\n</head>\n\n<body>\n    <div class="chose" id="checkBoxList">\n        <table id="tb" border="1" cellspacing="0" cellpadding="1">\n            <thead id="hide_tbody">\n                <th>ID</th>\n                <th>权限模块</th>\n            </thead>\n            <tbody id="tbody">\n\n            </tbody>\n        </table>\n\n    </div>\n\n    <script src="../js/jquery-3.1.1.js"><\/script>\n    <script type="text/javascript">\n        function submit() {\n            var time = setInterval(function () {\n                $.ajax({\n                    url: "http://localhost:8080/rightmodule/",\n                    type: "GET",\n                    async: true,\n                    cache: false,\n                    success: function (data) {\n                        // console.log(data); //打印是否有数据\n                        var html = "";\n                        for (var i = 0; i < data.result.length; i++) {\n\n                            // console.log(persons.name.length);\n                            html +=\n                                `<tr>\n                         <td>${data.result[i].rightModuleId}</td>\n                         <td>${data.result[i].moduleName}</td>\n                         <td>\n                            <button class="add">新增</button>\n                            <button class="delete">删除</button>\n                         </td>\n                         <td>\n                            <input type="checkbox" name="check" >\n                         </td>\n                      </tr>`;\n                        }\n\n                        $(\'#tbody\').html(html);\n                    }\n                })\n            }, 1000);\n        }\n\n        window.onload = submit();\n    <\/script>\n</body>\n\n</html>\n',normalizedContent:'# 短轮询--不推荐使用\n\n> 前端直接定时调用就完了\n\n<!doctype html>\n<html>\n\n<head>\n    <title>短轮询</title>\n    <meta charset="utf-8">\n    \x3c!--<link id="link1" rel="stylesheet" href="st.css" type="text/css" />--\x3e\n</head>\n\n<body>\n    <div class="chose" id="checkboxlist">\n        <table id="tb" border="1" cellspacing="0" cellpadding="1">\n            <thead id="hide_tbody">\n                <th>id</th>\n                <th>权限模块</th>\n            </thead>\n            <tbody id="tbody">\n\n            </tbody>\n        </table>\n\n    </div>\n\n    <script src="../js/jquery-3.1.1.js"><\/script>\n    <script type="text/javascript">\n        function submit() {\n            var time = setinterval(function () {\n                $.ajax({\n                    url: "http://localhost:8080/rightmodule/",\n                    type: "get",\n                    async: true,\n                    cache: false,\n                    success: function (data) {\n                        // console.log(data); //打印是否有数据\n                        var html = "";\n                        for (var i = 0; i < data.result.length; i++) {\n\n                            // console.log(persons.name.length);\n                            html +=\n                                `<tr>\n                         <td>${data.result[i].rightmoduleid}</td>\n                         <td>${data.result[i].modulename}</td>\n                         <td>\n                            <button class="add">新增</button>\n                            <button class="delete">删除</button>\n                         </td>\n                         <td>\n                            <input type="checkbox" name="check" >\n                         </td>\n                      </tr>`;\n                        }\n\n                        $(\'#tbody\').html(html);\n                    }\n                })\n            }, 1000);\n        }\n\n        window.onload = submit();\n    <\/script>\n</body>\n\n</html>\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706596574e3},{title:"导航",frontmatter:{},regularPath:"/zs-use/idea/",relativePath:"zs-use/idea/README.md",key:"v-619c4001",path:"/zs-use/idea/",lastUpdated:"2024年1月20日星期六凌晨2点03分",lastUpdatedTimestamp:1705687429e3,headersStr:null,content:"# 导航\n\n插件",normalizedContent:"# 导航\n\n插件",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705687429e3},{title:"说明",frontmatter:{},regularPath:"/zs-use/idea/%E6%8F%92%E4%BB%B6/",relativePath:"zs-use/idea/插件/README.md",key:"v-5424c0a9",path:"/zs-use/idea/%E6%8F%92%E4%BB%B6/",lastUpdated:"2024年1月20日星期六凌晨2点03分",lastUpdatedTimestamp:1705687429e3,headersStr:null,content:"# 说明",normalizedContent:"# 说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705687429e3},{title:"说明",frontmatter:{},regularPath:"/zs-use/linux/",relativePath:"zs-use/linux/README.md",key:"v-0315a902",path:"/zs-use/linux/",lastUpdated:"2023年12月21日星期四上午10点52分",lastUpdatedTimestamp:1703127163e3,headersStr:null,content:"# 说明\n\n🍓次高级全烂开发工程师 小邵子 正在努力制作中 。。。。",normalizedContent:"# 说明\n\n🍓次高级全烂开发工程师 小邵子 正在努力制作中 。。。。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701244225e3},{title:"mac软件安装",frontmatter:{},regularPath:"/zs-use/env/mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html",relativePath:"zs-use/env/mac软件安装.md",key:"v-8bf509d6",path:"/zs-use/env/mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html",headers:[{level:2,title:"DaVinci Resolve Studio",slug:"davinci-resolve-studio",normalizedTitle:"davinci resolve studio",charIndex:14},{level:2,title:"Final Cut Pro",slug:"final-cut-pro",normalizedTitle:"final cut pro",charIndex:136}],lastUpdated:"2023年12月27日星期三晚上11点30分",lastUpdatedTimestamp:170369105e4,headersStr:"DaVinci Resolve Studio Final Cut Pro",content:"# mac软件安装\n\n\n# DaVinci Resolve Studio\n\nhttps://www.macyy.cn/archives/548#J_DLIPPCont\n\n\n\nhttps://www.123pan.com/s/w9CAjv-cEkNv.html\n\n\n\n\n# Final Cut Pro\n\nhttps://macoshome.com/app/video/42.html#Down\n\n",normalizedContent:"# mac软件安装\n\n\n# davinci resolve studio\n\nhttps://www.macyy.cn/archives/548#j_dlippcont\n\n\n\nhttps://www.123pan.com/s/w9cajv-ceknv.html\n\n\n\n\n# final cut pro\n\nhttps://macoshome.com/app/video/42.html#down\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170369105e4},{title:"源码阅读快捷键",frontmatter:{},regularPath:"/zs-use/idea/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%BF%AB%E6%8D%B7%E9%94%AE.html",relativePath:"zs-use/idea/源码阅读快捷键.md",key:"v-014769c7",path:"/zs-use/idea/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%BF%AB%E6%8D%B7%E9%94%AE.html",lastUpdated:"2024年1月20日星期六凌晨2点03分",lastUpdatedTimestamp:1705687429e3,headersStr:null,content:"# 源码阅读快捷键\n\ncommand + option + u 查看类继承结构图\n\ncommand + F12 查看类方法\n\ncontrol + h 查看类继承树",normalizedContent:"# 源码阅读快捷键\n\ncommand + option + u 查看类继承结构图\n\ncommand + f12 查看类方法\n\ncontrol + h 查看类继承树",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705687429e3},{title:"附录1、常见的实际问题",frontmatter:{title:"附录1、常见的实际问题"},regularPath:"/zs-use/git/%E9%99%84%E5%BD%951%E3%80%81Git%E6%9B%BF%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.html",relativePath:"zs-use/git/附录1、Git替换远程仓库地址.md",key:"v-8d9b27fe",path:"/zs-use/git/%E9%99%84%E5%BD%951%E3%80%81Git%E6%9B%BF%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.html",headers:[{level:2,title:"Git替换远程仓库地址",slug:"git替换远程仓库地址",normalizedTitle:"git替换远程仓库地址",charIndex:2}],lastUpdated:"2023年12月5日星期二中午11点51分",lastUpdatedTimestamp:1701748296e3,headersStr:"Git替换远程仓库地址",content:"# Git替换远程仓库地址\n\n# 查看当前的远程仓库\nzs@MacBook-Pro docs % git remote -v  \norigin  https://github.com/zs-mcu/docs.git (fetch)\norigin  https://github.com/zs-mcu/docs.git (push)\n# 删除当前端远程仓库\nzs@MacBook-Pro docs % git remote add origin git@github.com:zs-mcu/zs-empty.git\n# 设置分支\nzs@MacBook-Pro docs % git branch -M main\n# 提交指定分支到远程仓库\nzs@MacBook-Pro docs % git push -u origin main\n",normalizedContent:"# git替换远程仓库地址\n\n# 查看当前的远程仓库\nzs@macbook-pro docs % git remote -v  \norigin  https://github.com/zs-mcu/docs.git (fetch)\norigin  https://github.com/zs-mcu/docs.git (push)\n# 删除当前端远程仓库\nzs@macbook-pro docs % git remote add origin git@github.com:zs-mcu/zs-empty.git\n# 设置分支\nzs@macbook-pro docs % git branch -m main\n# 提交指定分支到远程仓库\nzs@macbook-pro docs % git push -u origin main\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701742047e3},{title:"1、hello world",frontmatter:{autoSort:1e4},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/1%E3%80%81hello%20world.html",relativePath:"zs-use/linux/shell编程/1、hello world.md",key:"v-15d56ef3",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/1%E3%80%81hello%20world.html",headers:[{level:2,title:"Shell概述",slug:"shell概述",normalizedTitle:"shell概述",charIndex:20},{level:2,title:"HelloWorld",slug:"helloworld",normalizedTitle:"helloworld",charIndex:319}],lastUpdated:"2024年2月22日星期四晚上10点21分",lastUpdatedTimestamp:1708611676e3,headersStr:"Shell概述 HelloWorld",content:'# 1、hello world\n\n\n# Shell概述\n\n1、什么是Shell\n\n\n\n2、shell的分类\n\n> linux的标志shell是bash\n\n\n\nShell的两种主要语法类型有Bourne和C，这两种语法彼此不兼容。Bourne家族主要包括sh、ksh、Bash、psh、zsh；C家族主要包括：csh、tcsh（Bash和zsh在不同程度上支持csh的语法）。\n\n我们可以通过/etc/shells文件来查询Linux支持的Shell。命令如下：\n\n[root@xiaoshaozi ~]#  cat /etc/shells\n/bin/sh\n/bin/bash\n/usr/bin/sh\n/usr/bin/bash\n\n\n\n# HelloWorld\n\n[root@xiaoshaozi ~]# vim hello.sh\n\n#!/bin/bash\necho -e "1111111111111111! "\n\n\n> 说明：\n> \n> #!/bin/bash不是注释，是bash bang，不能省略\n\n运行方式：\n\n * 赋予执行权限，直接运行\n   \n   赋予执行权限\n   [root@xiaoshaozi ~]# chmod 755 hello.sh\n   \n   因为我们已经在/root/sh目录当中，所以也可以使用相对路径运行\n   [root@xiaoshaozi ~]# ./hello.sh \n   1111111111111111! \n   \n   使用绝对路径运行\n   [root@xiaoshaozi ~]# /root/hello.sh \n   1111111111111111! \n   \n\n * 通过Bash调用执行脚本\n   \n   [root@xiaoshaozi ~]# bash hello.sh \n   1111111111111111! \n   ',normalizedContent:'# 1、hello world\n\n\n# shell概述\n\n1、什么是shell\n\n\n\n2、shell的分类\n\n> linux的标志shell是bash\n\n\n\nshell的两种主要语法类型有bourne和c，这两种语法彼此不兼容。bourne家族主要包括sh、ksh、bash、psh、zsh；c家族主要包括：csh、tcsh（bash和zsh在不同程度上支持csh的语法）。\n\n我们可以通过/etc/shells文件来查询linux支持的shell。命令如下：\n\n[root@xiaoshaozi ~]#  cat /etc/shells\n/bin/sh\n/bin/bash\n/usr/bin/sh\n/usr/bin/bash\n\n\n\n# helloworld\n\n[root@xiaoshaozi ~]# vim hello.sh\n\n#!/bin/bash\necho -e "1111111111111111! "\n\n\n> 说明：\n> \n> #!/bin/bash不是注释，是bash bang，不能省略\n\n运行方式：\n\n * 赋予执行权限，直接运行\n   \n   赋予执行权限\n   [root@xiaoshaozi ~]# chmod 755 hello.sh\n   \n   因为我们已经在/root/sh目录当中，所以也可以使用相对路径运行\n   [root@xiaoshaozi ~]# ./hello.sh \n   1111111111111111! \n   \n   使用绝对路径运行\n   [root@xiaoshaozi ~]# /root/hello.sh \n   1111111111111111! \n   \n\n * 通过bash调用执行脚本\n   \n   [root@xiaoshaozi ~]# bash hello.sh \n   1111111111111111! \n   ',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1703514705e3},{title:"3、变量和运算符",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/3%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6.html",relativePath:"zs-use/linux/shell编程/3、变量和运算符.md",key:"v-0c4470f3",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/3%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6.html",headers:[{level:2,title:"变量定义",slug:"变量定义",normalizedTitle:"变量定义",charIndex:15},{level:2,title:"变量的分类",slug:"变量的分类",normalizedTitle:"变量的分类",charIndex:820},{level:2,title:"1、用户自定义变量",slug:"_1、用户自定义变量",normalizedTitle:"1、用户自定义变量",charIndex:1222},{level:2,title:"2、环境变量",slug:"_2、环境变量",normalizedTitle:"2、环境变量",charIndex:1915},{level:3,title:"PATH变量：",slug:"path变量-系统查找命令的路径",normalizedTitle:"path变量：",charIndex:2353},{level:3,title:"PS1变量：",slug:"ps1变量-命令提示符设置",normalizedTitle:"ps1变量：",charIndex:2993},{level:3,title:"LANG语系变量",slug:"lang语系变量",normalizedTitle:"lang语系变量",charIndex:3611},{level:2,title:"3、位置参数变量",slug:"_3、位置参数变量",normalizedTitle:"3、位置参数变量",charIndex:3872},{level:2,title:"4、预定义变量",slug:"_4、预定义变量",normalizedTitle:"4、预定义变量",charIndex:5156},{level:2,title:"接收键盘输入",slug:"接收键盘输入",normalizedTitle:"接收键盘输入",charIndex:5979},{level:2,title:"Shell的运算符",slug:"shell的运算符",normalizedTitle:"shell的运算符",charIndex:6510},{level:3,title:"1）数值运算的方法",slug:"_1-数值运算的方法",normalizedTitle:"1）数值运算的方法",charIndex:6524},{level:3,title:"2）、Shell常用运算符",slug:"_2-、shell常用运算符",normalizedTitle:"2）、shell常用运算符",charIndex:9879},{level:3,title:"变量的测试与内容置换",slug:"变量的测试与内容置换",normalizedTitle:"变量的测试与内容置换",charIndex:10916},{level:2,title:"环境变量配置文件",slug:"环境变量配置文件",normalizedTitle:"环境变量配置文件",charIndex:1498},{level:3,title:"source命令",slug:"source命令",normalizedTitle:"source命令",charIndex:11823},{level:3,title:"环境变量配置文件",slug:"环境变量配置文件-2",normalizedTitle:"环境变量配置文件",charIndex:1498},{level:3,title:"Shell登录信息",slug:"shell登录信息",normalizedTitle:"shell登录信息",charIndex:13913},{level:3,title:"定义Bash快捷键",slug:"定义bash快捷键",normalizedTitle:"定义bash快捷键",charIndex:15003}],lastUpdated:"2024年2月22日星期四晚上10点21分",lastUpdatedTimestamp:1708611676e3,headersStr:"变量定义 变量的分类 1、用户自定义变量 2、环境变量 PATH变量： PS1变量： LANG语系变量 3、位置参数变量 4、预定义变量 接收键盘输入 Shell的运算符 1）数值运算的方法 2）、Shell常用运算符 变量的测试与内容置换 环境变量配置文件 source命令 环境变量配置文件 Shell登录信息 定义Bash快捷键",content:'# 3、变量和运算符\n\n\n# 变量定义\n\n在Bash中，在定义变量时，有一些规则需要遵守：\n\n * 变量名称可以由字母、数字、下划线组成，但是不能以数字开头。\n\n * 变量的默认类型都是字符串型，如果要进行数值运算，则必修指定变量类型为数值型。\n\n * 变量用等号连接值，等号左右两侧不能有空格。\n\n * 变量的值如果有空格，需要使用单引号或双引号包括。 如：test="hello world!" 其中双引号括起来的内容“$”、“\\”和反引号都拥有特殊含义，而单引号括起来的内容都是普通字符。\n\n * 在变量的值中，可以使用“\\”转义符。\n\n * 如果需要增加变量的值，那么可以进行变量值的叠加。不过变量需要用双引号包含"$变量名"或用${变量名}包含变量名。\n   \n   [root@xiaoshaozi ~]# test=123\n   [root@xiaoshaozi ~]# test="$test"456\n   [root@xiaoshaozi ~]# echo $test\n   123456\n   #叠加变量test，变量值变成了123456\n   [root@xiaoshaozi ~]# test=${test}789\n   [root@xiaoshaozi ~]# echo $test\n   123456789\n   #再叠加变量test，变量值编程了123456789\n   \n   \n   变量值的叠加可以使用两种格式：“$变量名”或${变量名}\n\n * 如果是把命令的结果作为变量值赋予变量，则需要使用反引号或$()包含命令。例如：\n   \n   [root@xiaoshaozi ~]# test=$(date)\n   [root@xiaoshaozi ~]# echo $test\n   2023年 12月 21日 星期四 15:43:49 CST\n   \n\n * 环境变量名建议大写，便于区分。\n\n\n# 变量的分类\n\n * 用户自定义变量：这种变量是最常见的变量，由用户自由定义变量名和变量的值。\n\n * 环境变量：这种变量中主要保存的是和系统操作环境相关的数据，比如当前登录用户，用户的家目录，命令的提示符等。 环境变量的变量名可以自由定义，但是一般对系统起作用的环境变量的变量名是系统预先设定好的。\n\n * 位置参数变量：这种变量主要是用来向脚本当中传递参数或数据的，变量名不能自定义，变量作用是固定的。\n\n * 预定义变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。\n\n\t\t\t\t名称\t\t\t作用\t\t\t内容\n用户自定义变量\t   自定义\t\t   自定义\t\t 自定义\t\n环境变量\n\t用户定义\t 自定义\t\t 自定义\t   自定义\n\t系统自带\t 确定\t\t \t 确定\t  \t \t自定义\n位置参数变量\t\t确定\t\t\t确定\t\t   自定义\n预定义变量\t\t确定\t\t\t 确定\t\t\t自定义\n\n\n\n# 1、用户自定义变量\n\n1）、变量定义\n\n#变量名不能用数字开头\n#等号左右两侧不能有空格\n#变量的值如果有空格，必须用引号包含\n[root@xiaoshaozi ~]# name=zs\n\n\n2）、变量调用\n\n[root@localhost ~]# echo $变量名\n\n\n3）、变量查看\n\n[root@xiaoshaozi ~]# set [选项]\n选项：\n\t-u:\t如果设定此选项，调用未声明变量时会报错（默认无任何提示）\n\t-x:\t如果设定此选项，在命令执行之前，会吧命令先输出一次\n\nset -u 更为常用\n\n临时设置，如果需要永久设置，需要修改环境变量配置文件\n\n[root@xiaoshaozi ~]# echo $age\n\n[root@xiaoshaozi ~]# age=""\n[root@xiaoshaozi ~]# echo $age\n\n[root@xiaoshaozi ~]# unset age\n[root@xiaoshaozi ~]# echo $age\n\n[root@xiaoshaozi ~]# set -u\n[root@xiaoshaozi ~]# echo $age\n-bash: age: 为绑定变量\n\n\n查询环境变量\n\n[root@xiaoshaozi ~]# set\n#直接使用set命令，会查询系统中所有的变量，包含用户自定义变量和环境变量\n\n[root@xiaoshaozi ~]# env\n# env看不到用户自定义变量，可以看到另一部分环境变量\n\n\n4）、变量删除\n\n[root@xiaoshaozi ~]# unset 变量名\n\n\n\n# 2、环境变量\n\n> 环境变量可以在子shell中使用\n\n1）、环境变量设置\n\n#使用export声明的变量即是环境变量\n方式一：\nexport 变量名=变量值\n[root@xiaoshaozi ~]# export ZS_AGE="18"\n方式二：\n[root@xiaoshaozi ~]# ZS_AGE="18"\n[root@xiaoshaozi ~]# export ZS_AGE\n\n\n2）、环境变量查询和删除\n\nenv命令和set命令的区别是，set命令可以查看所有变量，而env命令只能查看环境变量。\n\n[root@xiaoshaozi ~]# env | grep ZS_AGE\nZS_AGE=18\n\n\n3）、系统默认环境变量\n\n\n\nenv命令可以查询到所有的环境变量，可是还有一些变量虽然不是环境变量，却是和Bash操作接口相关的变量，这些变量也对我们的Bash操作终端起到了重要的作用。\n\n这些变量就只能用set命令来查看了，我只列出重要的内容吧：\n\n\n\n\n# PATH变量：系统查找命令的路径\n\n先查询下PATH环境变量的值：\n\n[root@xiaoshaozi ~]# echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n\n\nPATH变量的值是用“:”分割的路径，这些路径就是系统查找命令的路径。也就是说当我们输入了一个程序名，如果没有写入路径，系统就会到PATH变量定义的路径中去寻找，是否有可以执行的程序。如果找到则执行，否则会报“命令没有发现”的错误。\n\n那么是不是我们把自己的脚本拷贝到PATH变量定义的路径中，我们自己写的脚本也可以不输入路径而直接运行呢？\n\n[root@localhost ~]# cp /root/sh/hello.sh /bin/\n#拷贝hello.sh到/bin目录\n[root@localhost ~]# hello.sh\n#hello.sh可以直接执行了\n\n\n那么我们是不是可以修改PATH变量的值，而不是把程序脚本复制到/bin/目录中。当然是可以的，我们通过变量的叠加就可以实现了：\n\n[root@xiaoshaozi ~]# PATH="$PATH":/root/sh\n[root@xiaoshaozi ~]# echo $PATH\n\n\n当然我们这样定义的PATH变量只是临时生效，一旦重启或注销就会消失，如果想要永久生效，需要写入环境变量配置文件，我们在“环境变量配置文件”小节中再详细介绍。\n\n\n# PS1变量：命令提示符设置\n\nPS1是一个很有意思的变量（这可不是SONY的游戏机哦），是用来定义命令行的提示符的，可以按照我们自己的需求来定义自己喜欢的提示符。\n\nPS1可以支持以下这些选项：\n\n * \\d：显示日期，格式为星期 月 日\n * \\H：显示完整的主机名。如默认主机名localhost.localdomain\n * \\h：显示简写主机名。如默认主机名localhost\n * \\t：显示24小时制时间，格式为HH:MM:SS\n * \\T：显示12小时制时间，格式为HH:MM:SS\n * \\A：显示24小时制时间，格式为HH:MM\n * \\@：显示12小时制时间，格式为HH:MM am/pm\n * \\u：显示当前用户名\n * \\v：显示Bash的版本信息\n * \\w：显示当前所在目录的完整名称\n * \\W：显示当前所在目录的最后一个目录\n * \\#：执行的第几个命令\n * \\$：提示符。如果是root用户会显示提示符为#，如果是普通用户会显示提示符为$\n\n[root@xiaoshaozi /]# echo $PS1\n[\\u@\\h \\W]\\$\n[root@xiaoshaozi /]# PS1=\'[\\u@\\H:\\A \\W]\\$ \'\n[root@xiaoshaozi:17:09 /]# \n\n\n这里要小心，PS1变量的值要用单引号包含，否则设置不生效。\n\n对应永久环境变量配置文件: /etc/bashrc\n\n\n# LANG语系变量\n\nLANG变量定义了Linux系统的主语系环境，这个变量的默认值是：\n\n[root@xiaoshaozi ~]# echo $LANG\nzh_CN.UTF-8\n\n\n这是因为我们Linux安装时，选择的是中文安装，所以默认的主语系变量是“zh_CN.UTF-8”。\n\n那么Linux中到底支持多少语系呢？我们可以使用以下命令查询：\n\n[root@xiaoshaozi ~]# locale -a | wc -l\n791\n[root@xiaoshaozi ~]# locale -a | more\n\n\n\n# 3、位置参数变量\n\n位置参数变量   作用\n$n       n为数字，$0代表命令本身，$1-$9代表第一到第九个参数，十以上的参数需要用大括号包含，如${10}.\n$*       这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体\n$@       这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待\n$#       这个变量代表命令行中所有参数的个数\n\n#!/bin/bash\n\n# 给a变量赋值 第1个参数\na=$1\n# 给a变量赋值 第2个参数\nb=$2\n# sum=a+b\n# shell中的变量默认是字符串类型，再后续运算符中详细介绍\nsum=$(( $a + $b ))\n# 打印sum变量值\necho $sum\n# 打印脚本本身\necho $0\n\n\n那么还有几个位置参数变量是干嘛的呢？我们在写个脚本来说明下：\n\n[root@xiaoshaozi ~]# ./parameter.sh \n$*: \n$@:\n$#: 0\n[root@xiaoshaozi ~]# ./parameter.sh 11 22 33 44\n$*: 11 22 33 44\n$@: 11 22 33 44\n$#: 4\n[root@xiaoshaozi ~]# cat parameter.sh \n#!/bin/bash\n\necho \'$*\': "$*"\necho \'$@\': "$@"\necho \'$#\': "$#"\n\n\n那么“$*”和“$@”有区别吗？还是有区别的，$*会把接收的所有参数当成一个整体对待，而$@则会区分对待接收到的所有参数。\n\n[root@xiaoshaozi ~]# cat ./parameter2.sh \n#!/bin/bash\n\nfor i in 1 2 3\n        do\n                echo "$i"\n        done\n\n\necho \'===================\'\n\n#定义for循环，in后面有几个值，for会循环多少次，注意“$*”要用双引号括起来\n#每次循环会把in后面的值赋予变量j\n#Shell把$*中的所有参数看成是一个整体，所以这个for循环只会循环一次\nfor j in "$*"\n        do\n        \t\t#打印变量$i的值\n                echo "$j"\n        done\n\necho \'===================\'\n\nfor k in "$@"\n        do\n                echo "$k"\n        done\n\necho \'===================\'\n\n\n\n[root@xiaoshaozi ~]# ./parameter2.sh a b c 1 2 3\n1\n2\n3\n===================\na b c 1 2 3\n===================\na\nb\nc\n1\n2\n3\n===================\n\n\n\n# 4、预定义变量\n\n预定义变量   作用\n$?      最后一次执行的命令的返回状态。\n        如果这个变量的值为0，证明上一个命令正确执行；\n        如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。\n$$      当前进程的进程号（PID）\n$!      后台运行的最后一个进程的进程号（PID）\n\n我们先来看看“$?”这个变量，看起来不好理解，我们还是举个例子：\n\n[root@xiaoshaozi ~]# ls\ncount.sh  file1  file2  file3  parameter2.sh  parameter.sh  sh  zs.sh\n[root@xiaoshaozi ~]# echo $?\n0\n#预定义变量“$?”的值是0，证明上一个命令执行正确\n\n[root@xiaoshaozi ~]# ls aaa\nls: 无法访问aaa: 没有那个文件或目录\n[root@xiaoshaozi ~]# echo $?\n2\n#当前目录中没有aaa文件，所以ls命令报错了\n\n\n接下来我们来说明下“$$”和“$!”这两个预定义变量，我们写个脚本吧：\n\n[root@xiaoshaozi ~]# vim variable.sh\n#!/bin/bash\necho "The current process is $$"\n# 输出当前进程的PID\n# 这个PID就是variable.sh这个脚本执行时，生成的进程的PID\n\nfind /root -name hello.sh &\n# 使用find命令在root目录下查找hello.sh文件\n# 符号&的意思是吧命令放入后台执行，工作管理我们系统管理章节介绍\necho "The last one Daemon process is $!"\n# 输出这个后台执行命令的进程的PID，也就是输出find命令的PID号\n\n\n\n# 接收键盘输入\n\n[root@localhost ~]# read [选项] [变量名]\n选项：\n\t-p\t“提示信息”：\t  在等待read输入时，输出提示信息\n\t-t\t秒数：\t\t read命令会一直等待用户输入，使用此选项可以指定等待时间\n\t-n\t字符数：\tread命令只接受指定的字符数，就会执行\n\t-s：\t\t\t  隐藏输入的数据，适用于机密信息的输入\n\t\n变量名：\n\t- 变量名可以自定义，如果不指定变量名，会把输入保存入默认变量REPLY\n\t- 如果只提供了一个变量名，则整个输入行赋予该变量\n\t- 如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，\n\t  而命令行上如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，而命令行上\n\n\n还是写个例子来解释下read命令：\n\n[root@xiaoshaozi ~]# cat read.sh \n#!/bin/bash\nread -n 5 -s -t 5 -p "Please input your name: " name age\necho "$name ===== $age"\n\n[root@xiaoshaozi ~]# bash read.sh\n\n\n\n\n# Shell的运算符\n\n\n# 1）数值运算的方法\n\n那如果我需要进行数值运算，可以采用以下三种方法中的任意一种：\n\n * 使用declare声明变量类型\n   \n   既然所有变量的默认类型是字符串型，那么只要我们把变量声明为整数型不就可以运算了吗？使用declare命令就可以实现声明变量的类型。命令如下：\n   \n   [root@localhost ~]# declare [+/-][选项] 变量名\n   选项:\n       -：给变量设定类型属性\n       +：取消变量的类型属性\n       -a：将变量声明为数组型\n       -i：将变量声明为整数型（integer）\n       -r：讲变量声明为只读变量。\n       \t注意，一旦设置为只读变量，既不能修改变量的值，也不能删除变量，甚至不能通过+r取消只读属性\n       -x：将变量声明为环境变量\n       -p：显示指定变量的被声明的类型\n   \n   \n   例子1：数值运算\n   \n   那我们只要把变量声明为整数型不就可以运算了吗？试试吧：\n   \n   [root@xiaoshaozi ~]# a=1\n   [root@xiaoshaozi ~]# b=2\n   [root@xiaoshaozi ~]# c=$a+$b\n   [root@xiaoshaozi ~]# echo $c\n   1+2\n   [root@xiaoshaozi ~]# declare -i c=$a+$b\n   [root@xiaoshaozi ~]# echo $c\n   3\n   \n   \n   这样运算好麻烦啊，没有办法啊，Shell在数值运算这里确实是比较麻烦，习惯就好了-_-!。\n   \n   例子2：数组变量类型\n   \n   还是举个例子吧：\n   \n   [root@xiaoshaozi ~]# declare -a name[0]="shen chao"\n   \n   由于太特殊，可以省略 declare -a\n   [root@xiaoshaozi ~]# name[0]="shen chao"\n   [root@xiaoshaozi ~]# name[1]="li ming"\n   [root@xiaoshaozi ~]# name[2]="tong gang"\n   [root@xiaoshaozi ~]# echo ${name}\n   shen chao\n   [root@xiaoshaozi ~]# echo ${name[*]}\n   shen chao li ming tong gang\n   \n   \n   \n   例子3：环境变量\n   \n   我们其实也可以使用declare命令把变量声明为环境变量，和export命令的作用是一样的：\n   \n   [root@xiaoshaozi ~]# declare -x test=123\n   \n   \n   例子4：只读属性\n   \n   注意一旦给变量设定了只读属性，那么这个变量既不能修改变量的值，也不能删除变量，甚至不能使用“+r”选项取消只读属性。命令如下：\n   \n   [root@xiaoshaozi ~]# declare -r test\n   [root@localhost ~]# test=456\n   -bash: test: readonly variable\n   #test变量的值就不能修改了\n   [root@localhost ~]# declare +r test\n   -bash: declare: test: readonly variable\n   #也不能取消只读属性\n   [root@localhost ~]# unset test\n   -bash: unset: test: cannot unset: readonly variable\n   #也不能删除变量\n   \n   \n   不过还好这个变量只是命令行声明的，所以只要重新登录或重启，这个变量就会消失了。\n   \n   例子5：查询变量属性和取消变量属性\n   \n   变量属性的查询使用“-p”选项，变量属性的取消使用“+”选项。命令如下：\n   \n   [root@localhost ~]# declare -p cc\n   declare -i cc="33"\n   #cc变量是int型\n   [root@localhost ~]# declare -p name\n   declare -a name=\'([0]="shen chao" [1]="li ming" [2]="tong gang")\'\n   #name变量是数组型\n   [root@localhost ~]# declare -p test\n   declare -rx test="123"\n   #test变量是环境变量和只读变量\n   \n   [root@localhost ~]# declare +x test\n   #取消test变量的环境变量属性\n   [root@localhost ~]# declare -p test\n   declare -r test="123"\n   #注意，只读变量属性是不能取消的\n   \n\n * 使用expr或let数值运算工具\n   \n   要想进行数值运算的第二种方法是使用expr命令，这种命令就没有declare命令复杂了。命令如下：\n   \n   [root@localhost ~]# aa=11\n   [root@localhost ~]# bb=22\n   #给变量aa和变量bb赋值\n   [root@localhost ~]# dd=$(expr $aa + $bb)\n   #dd的值是aa和bb的和。注意“+”号左右两侧必须有空格\n   [root@localhost ~]# echo $dd\n   33\n   \n   \n   使用expr命令进行运算时，要注意“+”号左右两侧必须有空格，否则运算不执行。\n   \n   至于let命令和expr命令基本类似，都是Linux中的运算命令，命令格式如下：\n   \n   [root@localhost ~]# aa=11\n   [root@localhost ~]# bb=22\n   #给变量aa和变量bb赋值\n   [root@localhost ~]# let ee=$aa+$bb\n   [root@localhost ~]# echo $ee\n   33\n   #变量ee的值是aa和bb的和\n   \n   [root@localhost ~]# n=20\n   #定义变量n\n   [root@localhost ~]# let n+=1\n   #变量n的值等于变量本身再加1\n   [root@localhost ~]# echo $n\n   21\n   \n   \n   expr命令和let命令大家可以按照习惯使用，不过let命令对格式要求要比expr命令宽松，所以推荐使用let命令进行数值运算。\n\n * 使用“$((运算式))”或“$[运算式]”方式运算\n   \n   其实这是一种方式“$(())”和“$[]”这两种括号按照个人习惯使用即可。命令如下：\n   \n   [root@localhost ~]# aa=11\n   [root@localhost ~]# bb=22\n   [root@localhost ~]# ff=$(( $aa+$bb ))\n   [root@localhost ~]# echo $ff\n   33\n   #变量ff的值是aa和bb的和\n   \n   [root@localhost ~]# gg=$[ $aa+$bb ]\n   [root@localhost ~]# echo $gg\n   33\n   #变量gg的值是aa和bb的和\n   \n   \n   这三种数值运算方式，大家可以按照自己的习惯来进行使用。不过我们推荐使用“$((运算式))”的方式\n\n\n# 2）、Shell常用运算符\n\n优先级   运算符                                  说明\n13    -,+                                  单目负、单目正\n12    !,~                                  逻辑非、按位取反或补码\n11    * ,/ ,%                              乘、除、取模\n10    +,-                                  加、减\n9     << ,>>                               按位左移、按位右移\n8     < =,> =,< ,>                         小于或等于、大于或等于、小于、大于\n7     == ,!=                               等于、不等于\n6     &                                    按位与\n5     ^                                    按位异或\n4     |                                    按位或\n3     &&                                   逻辑与\n2     ||                                   逻辑或\n1     =,+=,-=,*=,/=,%=,&=,^=,|=,<<=, >>=   赋值、运算且赋值\n\n运算符优先级表明在每个表达式或子表达式中哪一个运算对象首先被求值，数值越大优先级越高，具有较高优先级级别的运算符先于较低级别的运算符进行求值运算。\n\n例子1：加减乘除\n\n[root@localhost ~]# aa=$(( (11+3)*3/2 ))\n[root@localhost ~]# echo $aa\n21\n\n\n例子2：取模运算\n\n[root@localhost ~]# bb=$(( 14%3 ))\n[root@localhost ~]# echo $bb\n2\n\n\n例子3：逻辑与\n\n[root@localhost ~]# cc=$(( 1 && 0 ))\n[root@localhost ~]# echo $cc\n0\n\n\n\n# 变量的测试与内容置换\n\n变量置换方式       变量Y没有设置        变量Y为空值   变量Y设置值\nx=${y-新值}    x=新值           x为空      x=$y\nx=${y:-新值}   x=新值           x=新值     x=$y\nx=${y+新值}    x为空            x=新值     x=新值\nx=${y:+新值}   x为空            x为空      x=新值\nx=${y=新值}    x=新值           x=为空     x=$y\n             y=新值           y=值不变    y值不变\nx=${y:=新值}   x=新值           x=新值     x=$y\n             y=新值           y=新值     y值不变\nx=${y?新值}    新值输出到          x为空      x=$y\n             标准错误输出（就是屏幕）\nx=${y:?新值}   新值输出到          新值输出到    x=$y\n             标准错误输出         标准错误输出\n\n通过set -u可以让未定义变量报错\n\n如果大括号内没有“：”，则变量y是为空，还是没有设置，处理方法是不同的；如果大括号内有“：”，则变量y不论是为空，还是没有没有设置，处理方法是一样的。\n\n如果大括号内是“-”或“+”，则在改变变量x值的时候，变量y是不改变的；如果大括号内是“=”，则在改变变量x值的同时，变量y的值也会改变。\n\n如果大括号内是“？”，则当变量y不存在或为空时，会把“新值”当成报错输出到屏幕上。\n\n看的头都晕了吧，举几个例子说明下吧：\n\n[root@localhost ~]# unset y\n[root@localhost ~]# x=${y-new}\n[root@localhost ~]# echo $x\nnew\n[root@localhost ~]# echo $y\n\n\n\n\n# 环境变量配置文件\n\n\n# source命令\n\n[root@localhost ~]# source 配置文件\n或 \n[root@localhost ~]# . 配置文件\n\n\n\n# 环境变量配置文件\n\n1）、登录时生效的环境变量配置文件\n\n在Linux系统登录时主要生效的环境变量配置文件有以下五个：\n\n * /etc/profile\n * /etc/profile.d/*.sh\n * ~/.bash_profile\n * ~/.bashrc\n * /etc/bashrc\n\n环境变量配置文件调用过程\n\n\n\n在用户登录过程先调用/etc/profile文件\n\n在这个环境变量配置文件中会定义这些默认环境变量：\n\n * USER变量：根据登录的用户，给这个变量赋值（就是让USER变量的值是当前用户）。\n\n * LOGNAME变量：根据USER变量的值，给这个变量赋值。\n\n * MAIL变量：根据登录的用户，定义用户的邮箱为/var/spool/mail/用户名。\n\n * PATH变量：根据登录用户的UID是否为0，判断PATH变量是否包含/sbin、/usr/sbin和/usr/local/sbin这三个系统命令目录。\n\n * HOSTNAME变量：更加主机名，给这个变量赋值。\n\n * HISTSIZE变量：定义历史命令的保存条数。\n\n * umask：定义umask默认权限。注意/etc/profile文件中的umask权限是在“有用户登录过程（也就是输入了用户名和密码）”时才会生效。\n\n * 调用/etc/profile.d/*.sh文件，也就是调用/etc/profile.d/目录下所有以.sh结尾的文件。\n\n * 由/etc/profile文件调用/etc/profile.d/*.sh文件\n\n这个目录中所有以.sh结尾的文件都会被/etc/profile文件调用，这里最常用的就是lang.sh文件，而这个文件又会调用/etc/sysconfig/i18n文件。/etc/sysconfig/i18n这个文件眼熟吗？就是我们前面讲过的默认语系配置文件啊。\n\n * 由/etc/profile文件调用~/.bash_profile文件 ~/.bash_profile文件就没有那么复杂了，这个文件主要实现了两个功能：\n   \n   * 调用了~/.bashrc文件。\n   \n   * 在PATH变量后面加入了“:$HOME/bin”这个目录。那也就是说，如果我们在自己的家目录中建立bin目录，然后把自己的脚本放入“~/bin”目录，就可以直接执行脚本，而不用通过目录执行了。\n\n * 由~/.bash_profile文件调用~/.bashrc文件 在~/.bashrc文件中主要实现了：\n   \n   * 定义默认别名，所以超哥把自己定义的别名也放入了这个文件。\n   * 调用/etc/bashrc\n\n * 由~/.bashrc调用了/etc/bashrc文件 在/etc/bashrc文件中主要定义了这些内容：\n   \n   * PS1变量：也就是用户的提示符，如果我们想要永久修改提示符，就要在这个文件中修改\n   * umask：定义umask默认权限。这个文件中定义的umask是针对“没有登录过程（也就是不需要输入用户名和密码时，比如从一个终端切换到另一个终端，或进入子Shell）”时生效的。如果是“有用户登录过程”，则是/etc/profile文件中的umask生效。\n   * PATH变量：会给PATH变量追加值，当然也是在“没有登录过程”时才生效。\n   * 调用/etc/profile.d/*.sh文件，这也是在“没有用户登录过程”是才调用。在“有用户登录过程”时，/etc/profile.d/*.sh文件已经被/etc/profile文件调用过了。\n\n这样这五个环境变量配置文件会被依次调用，那么如果是我们自己定义的环境变量应该放入哪个文件呢？如果你的修改是打算对所有用户生效的，那么可以放入/etc/profile环境变量配置文件；如果你的修改只是给自己使用的，那么可以放入~/.bash_profile或~/.bashrc这两个配置文件中的任一个。\n\n可是如果我们误删除了这些环境变量，比如删除了/etc/bashrc文件，或删除了~/.bashrc文件，那么这些文件中配置就会失效（~/.bashrc文件会调用/etc/bashrc文件）。那么我们的提示符就会变成：\n\n-bash-4.1#\n\n\n2）、注销时生效的环境变量配置文件\n\n在用户退出登录时，只会调用一个环境变量配置文件，就是~/.bash_logout。这个文件默认没有写入任何内容，可是如果我们希望再退出登录时执行一些操作，比如清除历史命令，备份某些数据，就可以把命令写入这个文件。\n\n3）、其他配置文件\n\n还有一些环节变量配置文件，最常见的就是~/bash_history文件，也就是历史命令保存文件。这个文件已经讲过了，这里我们只是把它归入环境变量配置文件小节而已。\n\n\n# Shell登录信息\n\n1)、/etc/issue\n\n我们在登录tty1-tty6这六个本地终端时，会有几行的欢迎界面。这些欢迎信息是保存在哪里的？可以修改吗？当然可以修改，这些欢迎信息是保存在/etc/issue文件中，我们查看下这个文件：\n\n[root@localhost ~]# cat /etc/issue\nCentOS release 6.8 (Final)\nKernel \\r on an \\m\n\n\n可以支持的转义符我们可以通过man agetty命令查询，在表中我们列出常见的转义符作用：\n\n转义符   作用\n\\d    显示当前系统日期\n\\s    显示操作系统名称\n\\l    显示登录的终端号，这个比较常用。\n\\m    显示硬件体系结构，如i386、i686等\n\\n    显示主机名\n\\o    显示域名\n\\r    显示内核版本\n\\t    显示当前系统时间\n\\u    显示当前登录用户的序列号\n\n2)、/etc/issue.net\n\n/etc/issue是在本地终端登录是显示欢迎信息的，如果是远程登录（如ssh远程登录，或telnet远程登录）需要显示欢迎信息，则需要配置/etc/issue.net这个文件了。使用这个文件时由两点需要注意：\n\n * 首先，在/etc/issue文件中支持的转义符，在/etc/issue.net文件中不能使用。\n * 其次，ssh远程登录是否显示/etc/issue.net件中的欢迎信息，是由ssh的配置文件决定的。\n\n如果我们需要ssh远程登录可以查看/etc/issue.net的欢迎信息，那么首先需要修改ssh的配置文件/etc/ssh/sshd_config，加入如下内容：\n\n[root@localhost ~]# cat /etc/ssh/sshd_config\n…省略部分输出…\n# no default banner path\n#Banner none\nBanner /etc/issue.net\n…省略部分输出…\n\n\n这样在ssh远程登录时，也可以显示欢迎信息，只是不再可以识别“\\d”和“\\l”等信息了\n\n3)、/etc/motd\n\n/etc/motd文件中也是显示欢迎信息的，这个文件和/etc/issue及/etc/issue.net文件的区别是：/etc/issue及/etc/issue.net是在用户登录之前显示欢迎信息，而/etc/motd是在用户输入用户名和密码，正确登录之后显示欢迎信息。在/etc/motd文件中的欢迎信息，不论是本地登录，还是远程登录都可以显示。\n\n\n# 定义Bash快捷键\n\n[root@localhost ~]# stty -a\n# 查询所有的快捷键\n\n\n那么这些快捷键可以更改吗？可以啊，只要执行：\n\n[root@localhost ~]# stty 关键字 快捷键\n\n例如：\n[root@localhost ~]# stty intr ^p\n# 定义ctrl+p快捷键为强制终止，“^”字符只要手工输入即可\n\n[root@localhost ~]# stty -a\nspeed 38400 baud; rows 21; columns 104; line = 0;\nintr = ^P; quit = ^\\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>; eol2 = <undef>; swtch = <undef>;\nstart = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; min =1;time = 0;\n\n# 强制终止变成了ctrl+p快捷键\n',normalizedContent:'# 3、变量和运算符\n\n\n# 变量定义\n\n在bash中，在定义变量时，有一些规则需要遵守：\n\n * 变量名称可以由字母、数字、下划线组成，但是不能以数字开头。\n\n * 变量的默认类型都是字符串型，如果要进行数值运算，则必修指定变量类型为数值型。\n\n * 变量用等号连接值，等号左右两侧不能有空格。\n\n * 变量的值如果有空格，需要使用单引号或双引号包括。 如：test="hello world!" 其中双引号括起来的内容“$”、“\\”和反引号都拥有特殊含义，而单引号括起来的内容都是普通字符。\n\n * 在变量的值中，可以使用“\\”转义符。\n\n * 如果需要增加变量的值，那么可以进行变量值的叠加。不过变量需要用双引号包含"$变量名"或用${变量名}包含变量名。\n   \n   [root@xiaoshaozi ~]# test=123\n   [root@xiaoshaozi ~]# test="$test"456\n   [root@xiaoshaozi ~]# echo $test\n   123456\n   #叠加变量test，变量值变成了123456\n   [root@xiaoshaozi ~]# test=${test}789\n   [root@xiaoshaozi ~]# echo $test\n   123456789\n   #再叠加变量test，变量值编程了123456789\n   \n   \n   变量值的叠加可以使用两种格式：“$变量名”或${变量名}\n\n * 如果是把命令的结果作为变量值赋予变量，则需要使用反引号或$()包含命令。例如：\n   \n   [root@xiaoshaozi ~]# test=$(date)\n   [root@xiaoshaozi ~]# echo $test\n   2023年 12月 21日 星期四 15:43:49 cst\n   \n\n * 环境变量名建议大写，便于区分。\n\n\n# 变量的分类\n\n * 用户自定义变量：这种变量是最常见的变量，由用户自由定义变量名和变量的值。\n\n * 环境变量：这种变量中主要保存的是和系统操作环境相关的数据，比如当前登录用户，用户的家目录，命令的提示符等。 环境变量的变量名可以自由定义，但是一般对系统起作用的环境变量的变量名是系统预先设定好的。\n\n * 位置参数变量：这种变量主要是用来向脚本当中传递参数或数据的，变量名不能自定义，变量作用是固定的。\n\n * 预定义变量：是bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。\n\n\t\t\t\t名称\t\t\t作用\t\t\t内容\n用户自定义变量\t   自定义\t\t   自定义\t\t 自定义\t\n环境变量\n\t用户定义\t 自定义\t\t 自定义\t   自定义\n\t系统自带\t 确定\t\t \t 确定\t  \t \t自定义\n位置参数变量\t\t确定\t\t\t确定\t\t   自定义\n预定义变量\t\t确定\t\t\t 确定\t\t\t自定义\n\n\n\n# 1、用户自定义变量\n\n1）、变量定义\n\n#变量名不能用数字开头\n#等号左右两侧不能有空格\n#变量的值如果有空格，必须用引号包含\n[root@xiaoshaozi ~]# name=zs\n\n\n2）、变量调用\n\n[root@localhost ~]# echo $变量名\n\n\n3）、变量查看\n\n[root@xiaoshaozi ~]# set [选项]\n选项：\n\t-u:\t如果设定此选项，调用未声明变量时会报错（默认无任何提示）\n\t-x:\t如果设定此选项，在命令执行之前，会吧命令先输出一次\n\nset -u 更为常用\n\n临时设置，如果需要永久设置，需要修改环境变量配置文件\n\n[root@xiaoshaozi ~]# echo $age\n\n[root@xiaoshaozi ~]# age=""\n[root@xiaoshaozi ~]# echo $age\n\n[root@xiaoshaozi ~]# unset age\n[root@xiaoshaozi ~]# echo $age\n\n[root@xiaoshaozi ~]# set -u\n[root@xiaoshaozi ~]# echo $age\n-bash: age: 为绑定变量\n\n\n查询环境变量\n\n[root@xiaoshaozi ~]# set\n#直接使用set命令，会查询系统中所有的变量，包含用户自定义变量和环境变量\n\n[root@xiaoshaozi ~]# env\n# env看不到用户自定义变量，可以看到另一部分环境变量\n\n\n4）、变量删除\n\n[root@xiaoshaozi ~]# unset 变量名\n\n\n\n# 2、环境变量\n\n> 环境变量可以在子shell中使用\n\n1）、环境变量设置\n\n#使用export声明的变量即是环境变量\n方式一：\nexport 变量名=变量值\n[root@xiaoshaozi ~]# export zs_age="18"\n方式二：\n[root@xiaoshaozi ~]# zs_age="18"\n[root@xiaoshaozi ~]# export zs_age\n\n\n2）、环境变量查询和删除\n\nenv命令和set命令的区别是，set命令可以查看所有变量，而env命令只能查看环境变量。\n\n[root@xiaoshaozi ~]# env | grep zs_age\nzs_age=18\n\n\n3）、系统默认环境变量\n\n\n\nenv命令可以查询到所有的环境变量，可是还有一些变量虽然不是环境变量，却是和bash操作接口相关的变量，这些变量也对我们的bash操作终端起到了重要的作用。\n\n这些变量就只能用set命令来查看了，我只列出重要的内容吧：\n\n\n\n\n# path变量：系统查找命令的路径\n\n先查询下path环境变量的值：\n\n[root@xiaoshaozi ~]# echo $path\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n\n\npath变量的值是用“:”分割的路径，这些路径就是系统查找命令的路径。也就是说当我们输入了一个程序名，如果没有写入路径，系统就会到path变量定义的路径中去寻找，是否有可以执行的程序。如果找到则执行，否则会报“命令没有发现”的错误。\n\n那么是不是我们把自己的脚本拷贝到path变量定义的路径中，我们自己写的脚本也可以不输入路径而直接运行呢？\n\n[root@localhost ~]# cp /root/sh/hello.sh /bin/\n#拷贝hello.sh到/bin目录\n[root@localhost ~]# hello.sh\n#hello.sh可以直接执行了\n\n\n那么我们是不是可以修改path变量的值，而不是把程序脚本复制到/bin/目录中。当然是可以的，我们通过变量的叠加就可以实现了：\n\n[root@xiaoshaozi ~]# path="$path":/root/sh\n[root@xiaoshaozi ~]# echo $path\n\n\n当然我们这样定义的path变量只是临时生效，一旦重启或注销就会消失，如果想要永久生效，需要写入环境变量配置文件，我们在“环境变量配置文件”小节中再详细介绍。\n\n\n# ps1变量：命令提示符设置\n\nps1是一个很有意思的变量（这可不是sony的游戏机哦），是用来定义命令行的提示符的，可以按照我们自己的需求来定义自己喜欢的提示符。\n\nps1可以支持以下这些选项：\n\n * \\d：显示日期，格式为星期 月 日\n * \\h：显示完整的主机名。如默认主机名localhost.localdomain\n * \\h：显示简写主机名。如默认主机名localhost\n * \\t：显示24小时制时间，格式为hh:mm:ss\n * \\t：显示12小时制时间，格式为hh:mm:ss\n * \\a：显示24小时制时间，格式为hh:mm\n * \\@：显示12小时制时间，格式为hh:mm am/pm\n * \\u：显示当前用户名\n * \\v：显示bash的版本信息\n * \\w：显示当前所在目录的完整名称\n * \\w：显示当前所在目录的最后一个目录\n * \\#：执行的第几个命令\n * \\$：提示符。如果是root用户会显示提示符为#，如果是普通用户会显示提示符为$\n\n[root@xiaoshaozi /]# echo $ps1\n[\\u@\\h \\w]\\$\n[root@xiaoshaozi /]# ps1=\'[\\u@\\h:\\a \\w]\\$ \'\n[root@xiaoshaozi:17:09 /]# \n\n\n这里要小心，ps1变量的值要用单引号包含，否则设置不生效。\n\n对应永久环境变量配置文件: /etc/bashrc\n\n\n# lang语系变量\n\nlang变量定义了linux系统的主语系环境，这个变量的默认值是：\n\n[root@xiaoshaozi ~]# echo $lang\nzh_cn.utf-8\n\n\n这是因为我们linux安装时，选择的是中文安装，所以默认的主语系变量是“zh_cn.utf-8”。\n\n那么linux中到底支持多少语系呢？我们可以使用以下命令查询：\n\n[root@xiaoshaozi ~]# locale -a | wc -l\n791\n[root@xiaoshaozi ~]# locale -a | more\n\n\n\n# 3、位置参数变量\n\n位置参数变量   作用\n$n       n为数字，$0代表命令本身，$1-$9代表第一到第九个参数，十以上的参数需要用大括号包含，如${10}.\n$*       这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体\n$@       这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待\n$#       这个变量代表命令行中所有参数的个数\n\n#!/bin/bash\n\n# 给a变量赋值 第1个参数\na=$1\n# 给a变量赋值 第2个参数\nb=$2\n# sum=a+b\n# shell中的变量默认是字符串类型，再后续运算符中详细介绍\nsum=$(( $a + $b ))\n# 打印sum变量值\necho $sum\n# 打印脚本本身\necho $0\n\n\n那么还有几个位置参数变量是干嘛的呢？我们在写个脚本来说明下：\n\n[root@xiaoshaozi ~]# ./parameter.sh \n$*: \n$@:\n$#: 0\n[root@xiaoshaozi ~]# ./parameter.sh 11 22 33 44\n$*: 11 22 33 44\n$@: 11 22 33 44\n$#: 4\n[root@xiaoshaozi ~]# cat parameter.sh \n#!/bin/bash\n\necho \'$*\': "$*"\necho \'$@\': "$@"\necho \'$#\': "$#"\n\n\n那么“$*”和“$@”有区别吗？还是有区别的，$*会把接收的所有参数当成一个整体对待，而$@则会区分对待接收到的所有参数。\n\n[root@xiaoshaozi ~]# cat ./parameter2.sh \n#!/bin/bash\n\nfor i in 1 2 3\n        do\n                echo "$i"\n        done\n\n\necho \'===================\'\n\n#定义for循环，in后面有几个值，for会循环多少次，注意“$*”要用双引号括起来\n#每次循环会把in后面的值赋予变量j\n#shell把$*中的所有参数看成是一个整体，所以这个for循环只会循环一次\nfor j in "$*"\n        do\n        \t\t#打印变量$i的值\n                echo "$j"\n        done\n\necho \'===================\'\n\nfor k in "$@"\n        do\n                echo "$k"\n        done\n\necho \'===================\'\n\n\n\n[root@xiaoshaozi ~]# ./parameter2.sh a b c 1 2 3\n1\n2\n3\n===================\na b c 1 2 3\n===================\na\nb\nc\n1\n2\n3\n===================\n\n\n\n# 4、预定义变量\n\n预定义变量   作用\n$?      最后一次执行的命令的返回状态。\n        如果这个变量的值为0，证明上一个命令正确执行；\n        如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。\n$$      当前进程的进程号（pid）\n$!      后台运行的最后一个进程的进程号（pid）\n\n我们先来看看“$?”这个变量，看起来不好理解，我们还是举个例子：\n\n[root@xiaoshaozi ~]# ls\ncount.sh  file1  file2  file3  parameter2.sh  parameter.sh  sh  zs.sh\n[root@xiaoshaozi ~]# echo $?\n0\n#预定义变量“$?”的值是0，证明上一个命令执行正确\n\n[root@xiaoshaozi ~]# ls aaa\nls: 无法访问aaa: 没有那个文件或目录\n[root@xiaoshaozi ~]# echo $?\n2\n#当前目录中没有aaa文件，所以ls命令报错了\n\n\n接下来我们来说明下“$$”和“$!”这两个预定义变量，我们写个脚本吧：\n\n[root@xiaoshaozi ~]# vim variable.sh\n#!/bin/bash\necho "the current process is $$"\n# 输出当前进程的pid\n# 这个pid就是variable.sh这个脚本执行时，生成的进程的pid\n\nfind /root -name hello.sh &\n# 使用find命令在root目录下查找hello.sh文件\n# 符号&的意思是吧命令放入后台执行，工作管理我们系统管理章节介绍\necho "the last one daemon process is $!"\n# 输出这个后台执行命令的进程的pid，也就是输出find命令的pid号\n\n\n\n# 接收键盘输入\n\n[root@localhost ~]# read [选项] [变量名]\n选项：\n\t-p\t“提示信息”：\t  在等待read输入时，输出提示信息\n\t-t\t秒数：\t\t read命令会一直等待用户输入，使用此选项可以指定等待时间\n\t-n\t字符数：\tread命令只接受指定的字符数，就会执行\n\t-s：\t\t\t  隐藏输入的数据，适用于机密信息的输入\n\t\n变量名：\n\t- 变量名可以自定义，如果不指定变量名，会把输入保存入默认变量reply\n\t- 如果只提供了一个变量名，则整个输入行赋予该变量\n\t- 如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，\n\t  而命令行上如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，而命令行上\n\n\n还是写个例子来解释下read命令：\n\n[root@xiaoshaozi ~]# cat read.sh \n#!/bin/bash\nread -n 5 -s -t 5 -p "please input your name: " name age\necho "$name ===== $age"\n\n[root@xiaoshaozi ~]# bash read.sh\n\n\n\n\n# shell的运算符\n\n\n# 1）数值运算的方法\n\n那如果我需要进行数值运算，可以采用以下三种方法中的任意一种：\n\n * 使用declare声明变量类型\n   \n   既然所有变量的默认类型是字符串型，那么只要我们把变量声明为整数型不就可以运算了吗？使用declare命令就可以实现声明变量的类型。命令如下：\n   \n   [root@localhost ~]# declare [+/-][选项] 变量名\n   选项:\n       -：给变量设定类型属性\n       +：取消变量的类型属性\n       -a：将变量声明为数组型\n       -i：将变量声明为整数型（integer）\n       -r：讲变量声明为只读变量。\n       \t注意，一旦设置为只读变量，既不能修改变量的值，也不能删除变量，甚至不能通过+r取消只读属性\n       -x：将变量声明为环境变量\n       -p：显示指定变量的被声明的类型\n   \n   \n   例子1：数值运算\n   \n   那我们只要把变量声明为整数型不就可以运算了吗？试试吧：\n   \n   [root@xiaoshaozi ~]# a=1\n   [root@xiaoshaozi ~]# b=2\n   [root@xiaoshaozi ~]# c=$a+$b\n   [root@xiaoshaozi ~]# echo $c\n   1+2\n   [root@xiaoshaozi ~]# declare -i c=$a+$b\n   [root@xiaoshaozi ~]# echo $c\n   3\n   \n   \n   这样运算好麻烦啊，没有办法啊，shell在数值运算这里确实是比较麻烦，习惯就好了-_-!。\n   \n   例子2：数组变量类型\n   \n   还是举个例子吧：\n   \n   [root@xiaoshaozi ~]# declare -a name[0]="shen chao"\n   \n   由于太特殊，可以省略 declare -a\n   [root@xiaoshaozi ~]# name[0]="shen chao"\n   [root@xiaoshaozi ~]# name[1]="li ming"\n   [root@xiaoshaozi ~]# name[2]="tong gang"\n   [root@xiaoshaozi ~]# echo ${name}\n   shen chao\n   [root@xiaoshaozi ~]# echo ${name[*]}\n   shen chao li ming tong gang\n   \n   \n   \n   例子3：环境变量\n   \n   我们其实也可以使用declare命令把变量声明为环境变量，和export命令的作用是一样的：\n   \n   [root@xiaoshaozi ~]# declare -x test=123\n   \n   \n   例子4：只读属性\n   \n   注意一旦给变量设定了只读属性，那么这个变量既不能修改变量的值，也不能删除变量，甚至不能使用“+r”选项取消只读属性。命令如下：\n   \n   [root@xiaoshaozi ~]# declare -r test\n   [root@localhost ~]# test=456\n   -bash: test: readonly variable\n   #test变量的值就不能修改了\n   [root@localhost ~]# declare +r test\n   -bash: declare: test: readonly variable\n   #也不能取消只读属性\n   [root@localhost ~]# unset test\n   -bash: unset: test: cannot unset: readonly variable\n   #也不能删除变量\n   \n   \n   不过还好这个变量只是命令行声明的，所以只要重新登录或重启，这个变量就会消失了。\n   \n   例子5：查询变量属性和取消变量属性\n   \n   变量属性的查询使用“-p”选项，变量属性的取消使用“+”选项。命令如下：\n   \n   [root@localhost ~]# declare -p cc\n   declare -i cc="33"\n   #cc变量是int型\n   [root@localhost ~]# declare -p name\n   declare -a name=\'([0]="shen chao" [1]="li ming" [2]="tong gang")\'\n   #name变量是数组型\n   [root@localhost ~]# declare -p test\n   declare -rx test="123"\n   #test变量是环境变量和只读变量\n   \n   [root@localhost ~]# declare +x test\n   #取消test变量的环境变量属性\n   [root@localhost ~]# declare -p test\n   declare -r test="123"\n   #注意，只读变量属性是不能取消的\n   \n\n * 使用expr或let数值运算工具\n   \n   要想进行数值运算的第二种方法是使用expr命令，这种命令就没有declare命令复杂了。命令如下：\n   \n   [root@localhost ~]# aa=11\n   [root@localhost ~]# bb=22\n   #给变量aa和变量bb赋值\n   [root@localhost ~]# dd=$(expr $aa + $bb)\n   #dd的值是aa和bb的和。注意“+”号左右两侧必须有空格\n   [root@localhost ~]# echo $dd\n   33\n   \n   \n   使用expr命令进行运算时，要注意“+”号左右两侧必须有空格，否则运算不执行。\n   \n   至于let命令和expr命令基本类似，都是linux中的运算命令，命令格式如下：\n   \n   [root@localhost ~]# aa=11\n   [root@localhost ~]# bb=22\n   #给变量aa和变量bb赋值\n   [root@localhost ~]# let ee=$aa+$bb\n   [root@localhost ~]# echo $ee\n   33\n   #变量ee的值是aa和bb的和\n   \n   [root@localhost ~]# n=20\n   #定义变量n\n   [root@localhost ~]# let n+=1\n   #变量n的值等于变量本身再加1\n   [root@localhost ~]# echo $n\n   21\n   \n   \n   expr命令和let命令大家可以按照习惯使用，不过let命令对格式要求要比expr命令宽松，所以推荐使用let命令进行数值运算。\n\n * 使用“$((运算式))”或“$[运算式]”方式运算\n   \n   其实这是一种方式“$(())”和“$[]”这两种括号按照个人习惯使用即可。命令如下：\n   \n   [root@localhost ~]# aa=11\n   [root@localhost ~]# bb=22\n   [root@localhost ~]# ff=$(( $aa+$bb ))\n   [root@localhost ~]# echo $ff\n   33\n   #变量ff的值是aa和bb的和\n   \n   [root@localhost ~]# gg=$[ $aa+$bb ]\n   [root@localhost ~]# echo $gg\n   33\n   #变量gg的值是aa和bb的和\n   \n   \n   这三种数值运算方式，大家可以按照自己的习惯来进行使用。不过我们推荐使用“$((运算式))”的方式\n\n\n# 2）、shell常用运算符\n\n优先级   运算符                                  说明\n13    -,+                                  单目负、单目正\n12    !,~                                  逻辑非、按位取反或补码\n11    * ,/ ,%                              乘、除、取模\n10    +,-                                  加、减\n9     << ,>>                               按位左移、按位右移\n8     < =,> =,< ,>                         小于或等于、大于或等于、小于、大于\n7     == ,!=                               等于、不等于\n6     &                                    按位与\n5     ^                                    按位异或\n4     |                                    按位或\n3     &&                                   逻辑与\n2     ||                                   逻辑或\n1     =,+=,-=,*=,/=,%=,&=,^=,|=,<<=, >>=   赋值、运算且赋值\n\n运算符优先级表明在每个表达式或子表达式中哪一个运算对象首先被求值，数值越大优先级越高，具有较高优先级级别的运算符先于较低级别的运算符进行求值运算。\n\n例子1：加减乘除\n\n[root@localhost ~]# aa=$(( (11+3)*3/2 ))\n[root@localhost ~]# echo $aa\n21\n\n\n例子2：取模运算\n\n[root@localhost ~]# bb=$(( 14%3 ))\n[root@localhost ~]# echo $bb\n2\n\n\n例子3：逻辑与\n\n[root@localhost ~]# cc=$(( 1 && 0 ))\n[root@localhost ~]# echo $cc\n0\n\n\n\n# 变量的测试与内容置换\n\n变量置换方式       变量y没有设置        变量y为空值   变量y设置值\nx=${y-新值}    x=新值           x为空      x=$y\nx=${y:-新值}   x=新值           x=新值     x=$y\nx=${y+新值}    x为空            x=新值     x=新值\nx=${y:+新值}   x为空            x为空      x=新值\nx=${y=新值}    x=新值           x=为空     x=$y\n             y=新值           y=值不变    y值不变\nx=${y:=新值}   x=新值           x=新值     x=$y\n             y=新值           y=新值     y值不变\nx=${y?新值}    新值输出到          x为空      x=$y\n             标准错误输出（就是屏幕）\nx=${y:?新值}   新值输出到          新值输出到    x=$y\n             标准错误输出         标准错误输出\n\n通过set -u可以让未定义变量报错\n\n如果大括号内没有“：”，则变量y是为空，还是没有设置，处理方法是不同的；如果大括号内有“：”，则变量y不论是为空，还是没有没有设置，处理方法是一样的。\n\n如果大括号内是“-”或“+”，则在改变变量x值的时候，变量y是不改变的；如果大括号内是“=”，则在改变变量x值的同时，变量y的值也会改变。\n\n如果大括号内是“？”，则当变量y不存在或为空时，会把“新值”当成报错输出到屏幕上。\n\n看的头都晕了吧，举几个例子说明下吧：\n\n[root@localhost ~]# unset y\n[root@localhost ~]# x=${y-new}\n[root@localhost ~]# echo $x\nnew\n[root@localhost ~]# echo $y\n\n\n\n\n# 环境变量配置文件\n\n\n# source命令\n\n[root@localhost ~]# source 配置文件\n或 \n[root@localhost ~]# . 配置文件\n\n\n\n# 环境变量配置文件\n\n1）、登录时生效的环境变量配置文件\n\n在linux系统登录时主要生效的环境变量配置文件有以下五个：\n\n * /etc/profile\n * /etc/profile.d/*.sh\n * ~/.bash_profile\n * ~/.bashrc\n * /etc/bashrc\n\n环境变量配置文件调用过程\n\n\n\n在用户登录过程先调用/etc/profile文件\n\n在这个环境变量配置文件中会定义这些默认环境变量：\n\n * user变量：根据登录的用户，给这个变量赋值（就是让user变量的值是当前用户）。\n\n * logname变量：根据user变量的值，给这个变量赋值。\n\n * mail变量：根据登录的用户，定义用户的邮箱为/var/spool/mail/用户名。\n\n * path变量：根据登录用户的uid是否为0，判断path变量是否包含/sbin、/usr/sbin和/usr/local/sbin这三个系统命令目录。\n\n * hostname变量：更加主机名，给这个变量赋值。\n\n * histsize变量：定义历史命令的保存条数。\n\n * umask：定义umask默认权限。注意/etc/profile文件中的umask权限是在“有用户登录过程（也就是输入了用户名和密码）”时才会生效。\n\n * 调用/etc/profile.d/*.sh文件，也就是调用/etc/profile.d/目录下所有以.sh结尾的文件。\n\n * 由/etc/profile文件调用/etc/profile.d/*.sh文件\n\n这个目录中所有以.sh结尾的文件都会被/etc/profile文件调用，这里最常用的就是lang.sh文件，而这个文件又会调用/etc/sysconfig/i18n文件。/etc/sysconfig/i18n这个文件眼熟吗？就是我们前面讲过的默认语系配置文件啊。\n\n * 由/etc/profile文件调用~/.bash_profile文件 ~/.bash_profile文件就没有那么复杂了，这个文件主要实现了两个功能：\n   \n   * 调用了~/.bashrc文件。\n   \n   * 在path变量后面加入了“:$home/bin”这个目录。那也就是说，如果我们在自己的家目录中建立bin目录，然后把自己的脚本放入“~/bin”目录，就可以直接执行脚本，而不用通过目录执行了。\n\n * 由~/.bash_profile文件调用~/.bashrc文件 在~/.bashrc文件中主要实现了：\n   \n   * 定义默认别名，所以超哥把自己定义的别名也放入了这个文件。\n   * 调用/etc/bashrc\n\n * 由~/.bashrc调用了/etc/bashrc文件 在/etc/bashrc文件中主要定义了这些内容：\n   \n   * ps1变量：也就是用户的提示符，如果我们想要永久修改提示符，就要在这个文件中修改\n   * umask：定义umask默认权限。这个文件中定义的umask是针对“没有登录过程（也就是不需要输入用户名和密码时，比如从一个终端切换到另一个终端，或进入子shell）”时生效的。如果是“有用户登录过程”，则是/etc/profile文件中的umask生效。\n   * path变量：会给path变量追加值，当然也是在“没有登录过程”时才生效。\n   * 调用/etc/profile.d/*.sh文件，这也是在“没有用户登录过程”是才调用。在“有用户登录过程”时，/etc/profile.d/*.sh文件已经被/etc/profile文件调用过了。\n\n这样这五个环境变量配置文件会被依次调用，那么如果是我们自己定义的环境变量应该放入哪个文件呢？如果你的修改是打算对所有用户生效的，那么可以放入/etc/profile环境变量配置文件；如果你的修改只是给自己使用的，那么可以放入~/.bash_profile或~/.bashrc这两个配置文件中的任一个。\n\n可是如果我们误删除了这些环境变量，比如删除了/etc/bashrc文件，或删除了~/.bashrc文件，那么这些文件中配置就会失效（~/.bashrc文件会调用/etc/bashrc文件）。那么我们的提示符就会变成：\n\n-bash-4.1#\n\n\n2）、注销时生效的环境变量配置文件\n\n在用户退出登录时，只会调用一个环境变量配置文件，就是~/.bash_logout。这个文件默认没有写入任何内容，可是如果我们希望再退出登录时执行一些操作，比如清除历史命令，备份某些数据，就可以把命令写入这个文件。\n\n3）、其他配置文件\n\n还有一些环节变量配置文件，最常见的就是~/bash_history文件，也就是历史命令保存文件。这个文件已经讲过了，这里我们只是把它归入环境变量配置文件小节而已。\n\n\n# shell登录信息\n\n1)、/etc/issue\n\n我们在登录tty1-tty6这六个本地终端时，会有几行的欢迎界面。这些欢迎信息是保存在哪里的？可以修改吗？当然可以修改，这些欢迎信息是保存在/etc/issue文件中，我们查看下这个文件：\n\n[root@localhost ~]# cat /etc/issue\ncentos release 6.8 (final)\nkernel \\r on an \\m\n\n\n可以支持的转义符我们可以通过man agetty命令查询，在表中我们列出常见的转义符作用：\n\n转义符   作用\n\\d    显示当前系统日期\n\\s    显示操作系统名称\n\\l    显示登录的终端号，这个比较常用。\n\\m    显示硬件体系结构，如i386、i686等\n\\n    显示主机名\n\\o    显示域名\n\\r    显示内核版本\n\\t    显示当前系统时间\n\\u    显示当前登录用户的序列号\n\n2)、/etc/issue.net\n\n/etc/issue是在本地终端登录是显示欢迎信息的，如果是远程登录（如ssh远程登录，或telnet远程登录）需要显示欢迎信息，则需要配置/etc/issue.net这个文件了。使用这个文件时由两点需要注意：\n\n * 首先，在/etc/issue文件中支持的转义符，在/etc/issue.net文件中不能使用。\n * 其次，ssh远程登录是否显示/etc/issue.net件中的欢迎信息，是由ssh的配置文件决定的。\n\n如果我们需要ssh远程登录可以查看/etc/issue.net的欢迎信息，那么首先需要修改ssh的配置文件/etc/ssh/sshd_config，加入如下内容：\n\n[root@localhost ~]# cat /etc/ssh/sshd_config\n…省略部分输出…\n# no default banner path\n#banner none\nbanner /etc/issue.net\n…省略部分输出…\n\n\n这样在ssh远程登录时，也可以显示欢迎信息，只是不再可以识别“\\d”和“\\l”等信息了\n\n3)、/etc/motd\n\n/etc/motd文件中也是显示欢迎信息的，这个文件和/etc/issue及/etc/issue.net文件的区别是：/etc/issue及/etc/issue.net是在用户登录之前显示欢迎信息，而/etc/motd是在用户输入用户名和密码，正确登录之后显示欢迎信息。在/etc/motd文件中的欢迎信息，不论是本地登录，还是远程登录都可以显示。\n\n\n# 定义bash快捷键\n\n[root@localhost ~]# stty -a\n# 查询所有的快捷键\n\n\n那么这些快捷键可以更改吗？可以啊，只要执行：\n\n[root@localhost ~]# stty 关键字 快捷键\n\n例如：\n[root@localhost ~]# stty intr ^p\n# 定义ctrl+p快捷键为强制终止，“^”字符只要手工输入即可\n\n[root@localhost ~]# stty -a\nspeed 38400 baud; rows 21; columns 104; line = 0;\nintr = ^p; quit = ^\\; erase = ^?; kill = ^u; eof = ^d; eol = <undef>; eol2 = <undef>; swtch = <undef>;\nstart = ^q; stop = ^s; susp = ^z; rprnt = ^r; werase = ^w; lnext = ^v; flush = ^o; min =1;time = 0;\n\n# 强制终止变成了ctrl+p快捷键\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708608517e3},{title:"说明",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/",relativePath:"zs-use/linux/shell编程/README.md",key:"v-45319ca0",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/",lastUpdated:"2023年12月21日星期四上午10点52分",lastUpdatedTimestamp:1703127163e3,headersStr:null,content:"# 说明\n\n🍓次高级全烂开发工程师 小邵子 正在努力制作中 。。。。",normalizedContent:"# 说明\n\n🍓次高级全烂开发工程师 小邵子 正在努力制作中 。。。。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1703127163e3},{title:"4、条件判断",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/4%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.html",relativePath:"zs-use/linux/shell编程/4、条件判断.md",key:"v-52c6f5e5",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/4%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.html",headers:[{level:2,title:"按照文件类型进行判断",slug:"按照文件类型进行判断",normalizedTitle:"按照文件类型进行判断",charIndex:13},{level:2,title:"按照文件权限进行判断",slug:"按照文件权限进行判断",normalizedTitle:"按照文件权限进行判断",charIndex:1031},{level:2,title:"两个文件之间进行比较",slug:"两个文件之间进行比较",normalizedTitle:"两个文件之间进行比较",charIndex:1756},{level:2,title:"两个整数之间比较",slug:"两个整数之间比较",normalizedTitle:"两个整数之间比较",charIndex:2135},{level:2,title:"字符串的判断",slug:"字符串的判断",normalizedTitle:"字符串的判断",charIndex:2630},{level:2,title:"多重条件判断",slug:"多重条件判断",normalizedTitle:"多重条件判断",charIndex:3062}],lastUpdated:"2024年2月22日星期四晚上10点21分",lastUpdatedTimestamp:1708611676e3,headersStr:"按照文件类型进行判断 按照文件权限进行判断 两个文件之间进行比较 两个整数之间比较 字符串的判断 多重条件判断",content:'# 4、条件判断\n\n\n# 按照文件类型进行判断\n\n我们先来看看test可以进行哪些文件类型的判断：\n\n格式一：\n[root@xiaoshaozi ~]# test [选项] 文件\n\n格式二：最常用格式\n[root@xiaoshaozi ~]# [ 选项 文件 ]\n\n常用选项：\n\t-e\t判断文件在不在\n\t-f\t在且是普通文件\n\t-L\t在且是链接文件\n\t-d\t判断是否是目录\n\n\n测试选项   作用\n-b文件   判断该文件是否存在，并且是否为块设备文件（是块设备文件为真）\n-c文件   判断该文件是否存在，并且是否为字符设备文件（是字符设备文件为真）\n-d文件   判断该文件是否存在，并且是否为目录文件（是目录为真）\n-e文件   判断该文件是否存在（存在为真）\n-f文件   判断该文件是否存在，并且是否为普通文件（是普通文件为真）\n-L文件   判断该文件是否存在，并且是否为符号链接文件（是符号链接文件为真）\n-p文件   判断该文件是否存在，并且是否为管道文件（是管道文件为真）\n-s文件   判断该文件是否存在，并且是否为非空（非空为真）\n-S文件   判断该文件是否存在，并且是否为套接字文件（是套接字文件为真）\n\n[root@xiaoshaozi ~]# touch ip.txt\n[root@xiaoshaozi ~]# test -e ip.txt\n[root@xiaoshaozi ~]# echo $?\n0\n[root@xiaoshaozi ~]# [-e ip.txt]\n-bash: [-e: 未找到命令\n[root@xiaoshaozi ~]# [ -e ip.txt]\n-bash: [: 缺少 `]\'\n[root@xiaoshaozi ~]# [ -e ip.txt ]\n[root@xiaoshaozi ~]# echo $?\n0\n[root@xiaoshaozi ~]# [ -e ip2.txt ]\n[root@xiaoshaozi ~]# echo $?\n1\n\n\n还记得多命令顺序执行的“&&”和“||”吗？我们可以再判断一下/root/sh/是否是目录：\n\n[root@xiaoshaozi ~]# [ -e ip2.txt ] && echo yes || echo no\nno\n[root@xiaoshaozi ~]# [ -e ip.txt ] && echo yes || echo no\nyes\n\n\n\n# 按照文件权限进行判断\n\ntest是非常完善的判断命令，还可以判断文件的权限，我们通过表12-6来看看：\n\n测试选项   作用\n-r文件   判断该文件是否存在，并且是否该文件拥有读权限（有读权限为真）\n-w文件   判断该文件是否存在，并且是否该文件拥有写权限（有写权限为真）\n-x文件   判断该文件是否存在，并且是否该文件拥有执行权限（有执行权限为真）\n-u文件   判断该文件是否存在，并且是否该文件拥有SUID权限（有SUID权限为真）\n-g文件   判断该文件是否存在，并且是否该文件拥有SGID权限（有SGID权限为真）\n-k文件   判断该文件是否存在，并且是否该文件拥有SBit权限（有SBit权限为真）\n\n# 判断文件是否拥有写权限\n[root@xiaoshaozi ~]# ll ip.txt \n-rw-r--r-- 1 root root 0 12月 22 09:18 ip.txt\n\n\n# 判断文件是否存在冒险位\n[root@xiaoshaozi ~]# chmod u+s ip.txt \n[root@xiaoshaozi ~]# ll ip.txt \n-rwSr--r-- 1 root root 0 12月 22 09:18 ip.txt\n\n[root@xiaoshaozi ~]# [ -u ip.txt ] && echo yes || echo no\nyes\n[root@xiaoshaozi ~]# chmod u-s ip.txt \n[root@xiaoshaozi ~]# [ -u ip.txt ] && echo yes || echo no\nno\n[root@xiaoshaozi ~]# \n\n\n\n# 两个文件之间进行比较\n\n测试选项          作用\n文件1 -nt 文件2   判断文件1的修改时间是否比文件2的新（如果新则为真）\n文件1 -ot 文件2   判断文件1的修改时间是否比文件2的旧（如果旧则为真）\n文件1 -ef 文件2   判断文件1是否和文件2的Inode号一致，可以理解为两个文件是否为同一个文件。\n              这个判断用于判断硬链接是很好的方法\n\n我们一直很苦恼，到底该如何判断两个文件是否是硬链接呢？这时test就派上用场了：\n\n[root@xiaoshaozi ~]# ln /root/ip.txt /tmp/ip.txt\n[root@xiaoshaozi ~]# [ /root/ip.txt -ef /tmp/ip.txt ] && echo "yes" || echo "no"\nyes\n\n\n\n# 两个整数之间比较\n\n测试选项          作用\n整数1 -eq 整数2   判断整数1是否和整数2相等（相等为真）\n整数1 -ne 整数2   判断整数1是否和整数2不相等（不相等位置）\n整数1 -gt 整数2   判断整数1是否大于整数2（大于为真）\n整数1 -lt 整数2   判断整数1是否小于整数2（小于位置）\n整数1 -ge 整数2   判断整数1是否大于等于整数2（大于等于为真）\n整数1 -le 整数2   判断整数1是否小于等于整数2（小于等于为真）\n\n举个例子：\n\n23 >= 22 ==> yes\n[root@xiaoshaozi ~]# [ 23 -ge 22 ] && echo yes || echo no\nyes\n\n23 <= 22 ==> no\n[root@xiaoshaozi ~]# [ 23 -le 22 ] && echo yes || echo no\nno\n\n报错\n[root@xiaoshaozi ~]# [ aa -le 22 ] && echo yes || echo no\n-bash: [: aa: 期待整数表达式\nno\n\n\n\n\n# 字符串的判断\n\n测试选项         作用\n-z 字符串       判断字符串是否为空（为空返回真）\n-n 字符串       判断字符串是否为非空（非空返回真）\n字串1 == 字串2   判断字符串1是否和字符串2相等（相等返回真）\n字串1 != 字串2   判断字符串1是否和字符串2不相等（不相等返回真）\n\n举个例子：\n\n[root@xiaoshaozi ~]# name=sc\n[root@xiaoshaozi ~]# [ -z "$name" ] && echo yes || echo no\nno\n# 判断name变量是否为空\n\n\n再来看看如何判断两个字符串相等：\n\n[root@xiaoshaozi ~]# aa=11\n[root@xiaoshaozi ~]# bb=22\n[root@xiaoshaozi ~]# [ "$aa" == "$bb" ] && echo yes || echo no\nno\n# 判断两个变量值是否相等\n\n\n\n# 多重条件判断\n\n测试选项         作用\n判断1 -a 判断2   逻辑与，判断1和判断2都成立，最终的结果才为真\n判断1 -o 判断2   逻辑或，判断1和判断2有一个成立，最终的结果就为真\n!判断          逻辑非，使原始的判断式取反\n\n举个例子：\n\n# aa不为空 && aa > 23 ===> no\n[root@xiaoshaozi ~]# aa=11\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\nno\n\n\n要想让刚刚的判断式返回真，需要给变量aa重新赋个大于23的值：\n\n[root@xiaoshaozi ~]# aa=24\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\nyes\n\n\n再来看看逻辑非是什么样子的：\n\n[root@xiaoshaozi ~]# [ ! -n "$aa" ] && echo yes || echo no\nno\n\n\n注意：“!”和“-n”之间必须加入空格，否则会报错的。',normalizedContent:'# 4、条件判断\n\n\n# 按照文件类型进行判断\n\n我们先来看看test可以进行哪些文件类型的判断：\n\n格式一：\n[root@xiaoshaozi ~]# test [选项] 文件\n\n格式二：最常用格式\n[root@xiaoshaozi ~]# [ 选项 文件 ]\n\n常用选项：\n\t-e\t判断文件在不在\n\t-f\t在且是普通文件\n\t-l\t在且是链接文件\n\t-d\t判断是否是目录\n\n\n测试选项   作用\n-b文件   判断该文件是否存在，并且是否为块设备文件（是块设备文件为真）\n-c文件   判断该文件是否存在，并且是否为字符设备文件（是字符设备文件为真）\n-d文件   判断该文件是否存在，并且是否为目录文件（是目录为真）\n-e文件   判断该文件是否存在（存在为真）\n-f文件   判断该文件是否存在，并且是否为普通文件（是普通文件为真）\n-l文件   判断该文件是否存在，并且是否为符号链接文件（是符号链接文件为真）\n-p文件   判断该文件是否存在，并且是否为管道文件（是管道文件为真）\n-s文件   判断该文件是否存在，并且是否为非空（非空为真）\n-s文件   判断该文件是否存在，并且是否为套接字文件（是套接字文件为真）\n\n[root@xiaoshaozi ~]# touch ip.txt\n[root@xiaoshaozi ~]# test -e ip.txt\n[root@xiaoshaozi ~]# echo $?\n0\n[root@xiaoshaozi ~]# [-e ip.txt]\n-bash: [-e: 未找到命令\n[root@xiaoshaozi ~]# [ -e ip.txt]\n-bash: [: 缺少 `]\'\n[root@xiaoshaozi ~]# [ -e ip.txt ]\n[root@xiaoshaozi ~]# echo $?\n0\n[root@xiaoshaozi ~]# [ -e ip2.txt ]\n[root@xiaoshaozi ~]# echo $?\n1\n\n\n还记得多命令顺序执行的“&&”和“||”吗？我们可以再判断一下/root/sh/是否是目录：\n\n[root@xiaoshaozi ~]# [ -e ip2.txt ] && echo yes || echo no\nno\n[root@xiaoshaozi ~]# [ -e ip.txt ] && echo yes || echo no\nyes\n\n\n\n# 按照文件权限进行判断\n\ntest是非常完善的判断命令，还可以判断文件的权限，我们通过表12-6来看看：\n\n测试选项   作用\n-r文件   判断该文件是否存在，并且是否该文件拥有读权限（有读权限为真）\n-w文件   判断该文件是否存在，并且是否该文件拥有写权限（有写权限为真）\n-x文件   判断该文件是否存在，并且是否该文件拥有执行权限（有执行权限为真）\n-u文件   判断该文件是否存在，并且是否该文件拥有suid权限（有suid权限为真）\n-g文件   判断该文件是否存在，并且是否该文件拥有sgid权限（有sgid权限为真）\n-k文件   判断该文件是否存在，并且是否该文件拥有sbit权限（有sbit权限为真）\n\n# 判断文件是否拥有写权限\n[root@xiaoshaozi ~]# ll ip.txt \n-rw-r--r-- 1 root root 0 12月 22 09:18 ip.txt\n\n\n# 判断文件是否存在冒险位\n[root@xiaoshaozi ~]# chmod u+s ip.txt \n[root@xiaoshaozi ~]# ll ip.txt \n-rwsr--r-- 1 root root 0 12月 22 09:18 ip.txt\n\n[root@xiaoshaozi ~]# [ -u ip.txt ] && echo yes || echo no\nyes\n[root@xiaoshaozi ~]# chmod u-s ip.txt \n[root@xiaoshaozi ~]# [ -u ip.txt ] && echo yes || echo no\nno\n[root@xiaoshaozi ~]# \n\n\n\n# 两个文件之间进行比较\n\n测试选项          作用\n文件1 -nt 文件2   判断文件1的修改时间是否比文件2的新（如果新则为真）\n文件1 -ot 文件2   判断文件1的修改时间是否比文件2的旧（如果旧则为真）\n文件1 -ef 文件2   判断文件1是否和文件2的inode号一致，可以理解为两个文件是否为同一个文件。\n              这个判断用于判断硬链接是很好的方法\n\n我们一直很苦恼，到底该如何判断两个文件是否是硬链接呢？这时test就派上用场了：\n\n[root@xiaoshaozi ~]# ln /root/ip.txt /tmp/ip.txt\n[root@xiaoshaozi ~]# [ /root/ip.txt -ef /tmp/ip.txt ] && echo "yes" || echo "no"\nyes\n\n\n\n# 两个整数之间比较\n\n测试选项          作用\n整数1 -eq 整数2   判断整数1是否和整数2相等（相等为真）\n整数1 -ne 整数2   判断整数1是否和整数2不相等（不相等位置）\n整数1 -gt 整数2   判断整数1是否大于整数2（大于为真）\n整数1 -lt 整数2   判断整数1是否小于整数2（小于位置）\n整数1 -ge 整数2   判断整数1是否大于等于整数2（大于等于为真）\n整数1 -le 整数2   判断整数1是否小于等于整数2（小于等于为真）\n\n举个例子：\n\n23 >= 22 ==> yes\n[root@xiaoshaozi ~]# [ 23 -ge 22 ] && echo yes || echo no\nyes\n\n23 <= 22 ==> no\n[root@xiaoshaozi ~]# [ 23 -le 22 ] && echo yes || echo no\nno\n\n报错\n[root@xiaoshaozi ~]# [ aa -le 22 ] && echo yes || echo no\n-bash: [: aa: 期待整数表达式\nno\n\n\n\n\n# 字符串的判断\n\n测试选项         作用\n-z 字符串       判断字符串是否为空（为空返回真）\n-n 字符串       判断字符串是否为非空（非空返回真）\n字串1 == 字串2   判断字符串1是否和字符串2相等（相等返回真）\n字串1 != 字串2   判断字符串1是否和字符串2不相等（不相等返回真）\n\n举个例子：\n\n[root@xiaoshaozi ~]# name=sc\n[root@xiaoshaozi ~]# [ -z "$name" ] && echo yes || echo no\nno\n# 判断name变量是否为空\n\n\n再来看看如何判断两个字符串相等：\n\n[root@xiaoshaozi ~]# aa=11\n[root@xiaoshaozi ~]# bb=22\n[root@xiaoshaozi ~]# [ "$aa" == "$bb" ] && echo yes || echo no\nno\n# 判断两个变量值是否相等\n\n\n\n# 多重条件判断\n\n测试选项         作用\n判断1 -a 判断2   逻辑与，判断1和判断2都成立，最终的结果才为真\n判断1 -o 判断2   逻辑或，判断1和判断2有一个成立，最终的结果就为真\n!判断          逻辑非，使原始的判断式取反\n\n举个例子：\n\n# aa不为空 && aa > 23 ===> no\n[root@xiaoshaozi ~]# aa=11\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\nno\n\n\n要想让刚刚的判断式返回真，需要给变量aa重新赋个大于23的值：\n\n[root@xiaoshaozi ~]# aa=24\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\nyes\n\n\n再来看看逻辑非是什么样子的：\n\n[root@xiaoshaozi ~]# [ ! -n "$aa" ] && echo yes || echo no\nno\n\n\n注意：“!”和“-n”之间必须加入空格，否则会报错的。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708611676e3},{title:"5、流程控制",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/5%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html",relativePath:"zs-use/linux/shell编程/5、流程控制.md",key:"v-c18b606e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/5%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html",headers:[{level:2,title:"if条件判断",slug:"if条件判断",normalizedTitle:"if条件判断",charIndex:13},{level:3,title:"1)、单分支if条件语句",slug:"_1-、单分支if条件语句",normalizedTitle:"1)、单分支if条件语句",charIndex:24},{level:3,title:"2）、双分支if条件语句",slug:"_2-、双分支if条件语句",normalizedTitle:"2）、双分支if条件语句",charIndex:1096},{level:3,title:"3）、多分支if条件语句",slug:"_3-、多分支if条件语句",normalizedTitle:"3）、多分支if条件语句",charIndex:3428},{level:2,title:"多分支case条件语句",slug:"多分支case条件语句",normalizedTitle:"多分支case条件语句",charIndex:5248},{level:2,title:"for循环",slug:"for循环",normalizedTitle:"for循环",charIndex:5914},{level:2,title:"while循环",slug:"while循环",normalizedTitle:"while循环",charIndex:10146},{level:2,title:"until循环",slug:"until循环",normalizedTitle:"until循环",charIndex:10478},{level:2,title:"函数",slug:"函数",normalizedTitle:"函数",charIndex:10825},{level:2,title:"特殊流程控制语句",slug:"特殊流程控制语句",normalizedTitle:"特殊流程控制语句",charIndex:11506},{level:3,title:"1、exit语句",slug:"_1、exit语句",normalizedTitle:"1、exit语句",charIndex:11519},{level:3,title:"2、break语句",slug:"_2、break语句",normalizedTitle:"2、break语句",charIndex:12120},{level:3,title:"3、continue语句",slug:"_3、continue语句",normalizedTitle:"3、continue语句",charIndex:12436}],lastUpdated:"2024年2月22日星期四晚上10点21分",lastUpdatedTimestamp:1708611676e3,headersStr:"if条件判断 1)、单分支if条件语句 2）、双分支if条件语句 3）、多分支if条件语句 多分支case条件语句 for循环 while循环 until循环 函数 特殊流程控制语句 1、exit语句 2、break语句 3、continue语句",content:'# 5、流程控制\n\n\n# if条件判断\n\n\n# 1)、单分支if条件语句\n\n单分支条件语句最为简单，就是只有一个判断条件，如果符合条件则执行某个程序，否则什么事情都不做。\n\n语法如下：\n\nif [ 条件判断式 ];then\n\t程序\nfi\n\n\n单分支条件语句需要注意几个点：\n\n * if语句使用fi结尾，和一般语言使用大括号结尾不同\n\n * [ 条件判断式 ]就是使用test命令判断，所以中括号和条件判断式之间必须有空格\n\n * then后面跟符合条件之后执行的程序，可以放在[]之后，用“;”分割。 也可以换行写入，就不需要“;”了，比如单分支if语句还可以这样写：\n   \n   if [ 条件判断式 ]\n   \tthen\n   \t\t程序\n   fi\n   \n\n# 判断根分区使用率\n\n[root@xiaoshaozi ~]# df -h\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/vda1                 59G  4.2G   53G    8% /\ndevtmpfs                 858M     0  858M    0% /dev\ntmpfs                    868M     0  868M    0% /dev/shm\ntmpfs                    868M  572K  867M    1% /run\ntmpfs                    868M     0  868M    0% /sys/fs/cgroup\ntmpfs                    174M     0  174M    0% /run/user/1001\n106.14.41.60:/zsnfsdata   59G  4.2G   53G    8% /home/jysp/share\ntmpfs                    174M     0  174M    0% /run/user/0\n\n\n[root@xiaoshaozi ~]# vim if1.sh\n#!/bin/bash\n# 统计根分区使用率\n\nrate=$(df -h | grep /dev/vda1 | awk \'{print $5}\'| cut -d "%" -f 1)\n\nif [ $rate -ge 80 ]\n        then\n                echo "warning! /dev/vda1 is full!!"\nfi\n\n\n\n# 2）、双分支if条件语句\n\nif [ 条件判断式 ]\n\tthen\n\t\t条件成立时，执行的程序\n\telse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\n# 例子1：备份mysql\n\n我们写一个数据备份的例子，来看看双分支if条件语句。\n\n例子1：备份mysql数据库\n[root@xiaoshaozi sh]# vim bakmysql.sh \n\n# 吧当前系统时间安装"年月日"格式给date变量\ndate=$(date +%y%m%d)\n\n\n# 统计mysql数据库的大小，并把大小赋予size变量\nsize=$(du -sh /var/lib/mysql)\n\n# 判断备份目录是否存在，是否为目录\nif [ -d /tmp/dbbak ]\n  # 如果判断为真，执行以下脚本\n  then\n    # 把当前日期写入临时文件\n    echo "Date: $date!" > /tmp/dbbak/dbinfo.txt\n    # 吧数据库大小写入临时文件\n    echo "Data size: $size" >> /tmp/dbbak/dbinfo.txt\n    # 进入备份目录\n    cd /tmp/dbbak\n    # 打包压缩数据库与临时文件，把所有输出丢入垃圾桶\n    tar -zcvf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &>/dev/null\n    # 删除临时文件\n    rm -rf /tmp/dbbak/dbinfo.txt\n\n  else\n    mkdir /tmp/dbbak\n    echo "Date: $date!" > /tmp/dbbak/dbinfo.txt\n    echo "Data size: $size" >> /tmp/dbbak/dbinfo.txt\n    cd /tmp/dbbak\n    tar -zcvf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &>/dev/null\n    rm -rf /tmp/dbbak/dbinfo.txt\nfi\n\n\n\n# 例子2：判断apache是否启动\n\n再举个例子，在工作当中，服务器上的服务经常会宕机。\n\n如果我们对服务器监控不好，就会造成服务器中服务宕机了，而管理员却不知道的情况，这时我们可以写一个脚本来监听本机的服务，如果服务停止或宕机了，可以自动重启这些服务。\n\n我们拿apache服务来举例：\n\n例子2：判断apache是否启动，如果没有启动则自动启动\n\n[root@localhost ~]# vi sh/autostart.sh\n#!/bin/bash\n#判断apache是否启动，如果没有启动则自动启动\n\n\n#使用nmap命令扫描服务器，并截取apache服务的状态，赋予变量port\n# port=$(nmap -sT 192.168.1.101 | grep 80/tcp | grep http | awk \'{print $2}\')\n#如果变量port的值是“open”\nif [ "$port" == "open" ]\n\tthen\n\t\t#则证明apache正常启动，在正常日志中写入一句话即可\n\t\techo "$(date) httpd is ok!">> /tmp/autostart-acc.log\n\telse\n\t\t#否则证明apache没有启动，自动启动apache\n\t\t/etc/rc.d/init.d/httpd start &>/dev/null\n\t\t#并在错误日志中记录自动启动apche的时间\n\t\techo "$(date) restart httpd !!" >> /tmp/autostart-err.log\nfi\n\n\n\n# 使用netstat查找端口\nport_on=$( netstat -tuln | awk \'{print $4}\' | grep ":80$" )\nif [ "$port_on" == "" ] \n\tthen \n\t\techo "httpd"\nfi\n\n\n\n以我们使用nmap端口扫描命令，nmap命令格式如下：\n\n[root@localhost ~]#nmap -sT 域名或IP\n选项：\n    -s\t扫描\n    -T\t扫描所有开启的TCP端口\n\n\n这条命令的执行结果如下：\n\n[root@xiaoshaozi ~]# nmap -sT 106.14.41.60\n\nStarting Nmap 6.40 ( http://nmap.org ) at 2023-12-22 14:41 CST\nNmap scan report for 106.14.41.60\nHost is up (0.0033s latency).\nNot shown: 990 closed ports\nPORT      STATE    SERVICE\n22/tcp    open     ssh\n25/tcp    filtered smtp\n80/tcp    open     http\n111/tcp   open     rpcbind\n443/tcp   open     https\n2049/tcp  open     nfs\n3690/tcp  open     svn\n8086/tcp  open     d-s-n\n9898/tcp  open     monkeycom\n10012/tcp open     unknown\n\n\n\n\n# 3）、多分支if条件语句\n\nif [ 条件判断式1 ]\n\tthen\n\t\t条件成立时，执行的程序\nelif [ 条件判断式2 ]\t\n\tthen\n\t\t条件成立时，执行的程序\n\n...省略更多条件...\n\nelse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\n# 判断是否是目录\n\n那我们再写一个例子，用if多分支条件语句来判断一下用户输入的是一个文件，还是一个目录：\n\n例子：判断用户输入的是什么文件\n[root@localhost ~]# vim sh/if-elif.sh\n\n#!/bin/bash\n# 判断用户输入的是什么文件\n\n#接收键盘的输入，并赋予变量file\nread -p "Please input a filename: " file\n\n#判断file变量是否为空\nif [ -z "$file" ]\n\tthen\n\t\t#如果为空，执行程序1，也就是输出报错信息\n\t\techo "Error,please input a filename"\n\t\t#退出程序，并返回值为1（把返回值赋予变量$?）\n\t\texit 1\n\t\t\n#判断file的值是否存在\nelif [ ! -e "$file" ]\n\tthen\n\t\t#如果不存在，则执行程序2\n\t\techo "Your input is not a file!"\n\t\t#退出程序，把并定义返回值为2\n\t\texit 2\n\n#判断file的值是否为普通文件\nelif [ -f "$file" ]\n\tthen\n\t\t#如果是普通文件，则执行程序3\n\t\techo "$file is a regulare file!"\n\t\t\n#判断file的值是否为目录文件\nelif [ -d "$file" ]\n\tthen\n\t\t#如果是目录文件，则执行程序4\n\t\techo "$file is a directory!"\n\t\t\nelse\n\t#如果以上判断都不是，则执行程序5\n\techo "$file is an other file!"\nfi\n\n\n# 四则运算shell if-else版\n\n#!/bin/bash\n# 字符界面加减乘除计算器\n\nread -t 30 -p "请输入数字1" num1\nread -t 30 -p "请输入数字2" num2\n\nread -t 30 -p "请输入一个操作符" ope\n\n# -n 字符串是否为空（非空true）\nif [ -n "$num1" -a -n "$num2" -a -n "$ope" ]\n\tthen\n\t# 定义变量，将数字替换，替换后如果不为空，则证明不是纯数字\n\ttest1=$(echo $num1 | sed \'s/[0-9]//g\')\n\ttest2=$(echo $num2 | sed \'s/[0-9]//g\')\n\t\n\t# 判断 test1,test2为空这证明是数字\n\tif [ -z "$test1" -a -z "$test2" ]\n\t\tthen\n\t\t# 如果是数字\n\t\t\tif [ "$ope" == \'+\' ]\n\t\t\t\tthen\n\t\t\t\tvalue=$(( $num1 + $num2 ))\n\t\t\telif [ "$ope" == \'-\' ]\n            \tthen\n            \tvalue=$(( $num1 + $num2 ))\n            elif [ "$ope" == \'*\' ]\n            \tthen\n            \tvalue=$(( $num1 * $num2 ))\n            elif [ "$ope" == \'/\' ]\n            \tthen\n            \tvalue=$(( $num1 / $num2 ))\n            else\n            \techo "请输入有效运算符"\n\t\t\tfi\n\t\t# 如果test1和test2不为空，说明num1和num2不是数字\t\n\t\telse\n\t\t\t# 则提示输入有效的数值\n\t\t\techo "请输入有效数字"\n\t\t\t# 并退出程序，返回错误代码11\n\t\t\texit 11\n\tfi\nelse \n\techo "请输入正确内容"\t\n\texit 12\nfi\n\necho " $num1 $ope $num2 : $value "\n\n\n\n# 多分支case条件语句\n\ncase语句和if…elif…else语句一样都是多分支条件语句，不过和if多分支条件语句不同的是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系。\n\ncase语句语法如下：\n\ncase $变量名 in\n\t"值1")\n\t\t如果变量的值等于值1，则执行程序1\n\t\t;;\n\t"值1")\n\t\t如果变量的值等于值2，则执行程序2\n\t\t;;\n\n\t…省略其他分支…\n\n\t*)\n\t\t如果变量的值都不是以上的值，则执行此程序\n\t\t;;\nesac\n\n\n这个语句需要注意以下内容：\n\n * case语句，会取出变量中的值，然后与语句体中的值逐一比较。 如果数值符合，则执行对应的程序，如果数值不符，则依次比较下一个值。 如果所有的值都不符合，则执行“*）”（“*”代表所有其他值）中的程序。\n\n * case语句以“case”开头，以“esac”结尾。\n\n每一个分支程序之后要通过“;;”双分号结尾，代表该程序段结束（千万不要忘记）。\n\n我们写一个判断是“yes/no”的例子：\n\n[root@localhost ~]# vim sh/case.sh\n\n#!/bin/bash\n# 判断用户输入\n\nread -t 30 -p "请选择yes/no" cho\n\n# 判断变量cho的值\ncase $cho in\n\t"yes")\n\t\techo "你的选择是yes"\n\t\t;;\n\t"no")\n\t\techo "你的选择是no!"\n\t\t;;\n\t\t\n\t*)\n\t\techo "error!"\n\t\t;;\nesac\n\n\n\n# for循环\n\nfor循环是固定循环，也就是在循环时已经知道需要进行几次的循环，有时也把for循环称为计数循环。\n\nfor的语法有如下两种：\n\n语法一：\n\nfor 变量 in 值1 值2 值3 ...\n\tdo \n\t\t程序\n\tdone\n\n\n这种语法中for循环的次数，取决于in后面值的个数（空格分隔），有几个值就循环几次，并且每次循环都把值赋予变量。\n\n也就是说，假设in后面有三个值，for会循环三次，第一次循环会把值1赋予变量，第二次循环会把值2赋予变量，以此类推。\n\n语法二：\nfor (( 初始值;循环控制条件;变量变化 ))\n\tdo\n\t\t程序\n\tdone\n\n\n语法二中需要注意：\n\n * 初始值：在循环开始时，需要给某个变量赋予初始值，如i=1；\n\n * 循环控制条件：用于指定变量循环的次数，如i<=100，则只要i的值小于等于100，循环就会继续；\n\n * 变量变化：每次循环之后，变量该如何变化，如i=i+1。代表每次循环之后，变量i的值都加1。\n\n1)、语法一举例：\n\n我们先看看语法一是什么样子的：\n\n例子1：打印时间\n\n\n[root@localhost ~]# vim sh/for.sh\n\n#!/bin/bash\n# 打印时间\n\nfor time in morning noon afternoon evening\n\tdo\n\t\techo "This time is $time!"\n\tdone\n\n\n批量解压缩脚本就应该这样写：\n\n例子2：批量解压缩\n\n\n[root@localhost ~]# vim sh/auto-tar.sh\n\n#!/bin/bash\n# 批量解压缩脚本\n\n# 进入压缩目录\ncd /lamp\nls *.tar.gz > ls.log\n# 把所有.tar.gz结尾的文件的文件覆盖到ls.log临时文件中\nfor i in $(cat ls.log)\n\tdo\n\t\ttar -zxf $i &>/dev/null\n\tdone\nrm -rf /lamp/ls.log\n\n\n\n\n\n[root@localhost ~]# vim sh/auto-tar.sh\n\n#!/bin/bash\n# 批量解压缩脚本\n\n# 进入压缩目录\ncd /lamp\n# 利用文件作为数组\nls *.tar.gz > ls.log\n\n# 统计行数\ncount=$( cat ls.log|wc -l )\n\n# 循环行数\nfor(( i=1;i<="$count";i=i+1 ))\ndo\n\t# 使用awk的NR变量，取出文件名，类似获取数组指定index值\n\ttarname=$( cat ls.log|awk \'NR==\'$i\' {print $1}\' )\n\t# 指定解压路径解压\n\ttar -zxvf $tarname -C /lamp\ndone\n\n\nip校验\n\n\n#!/bin/bash\n\n# 先通过正则，把明显不符合规则的ip过滤，把结果保存在ip_test1.txt临时文件中\ngrep "^[0-9]\\{1,3\\}\\.[0-9]\\.\\{1,3\\}\\.[0-9]\\.\\{1,3\\}.[0-9]\\.\\{1,3\\}$" /root/sh/ip.txt > /root/sh/ip_test1.txt\n\n\n# cat ip.txt | wc -l\n# 统计test1中有几行IP\nline=$(wc -l /root/sh/ip_test1.txt | awk \'{print $1}\') \n\n# 清空最终数据文件\necho "" > /root/sh/ip_test.txt\n\nfor(( i=1;i<=$line;i=i+1 ))\ndo\n\t# 第几次循环，就把第几行读入 ip_test2.txt文件（此文件只有一行ip）\n\tcat /root/sh/ip_test1.txt|awk \'NR==\'$i\'{print}\' > /root/sh/ip_test2.txt\n\t# \n\ta=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 1)\n\tb=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 2)\n\tc=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 3)\n\td=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 4)\n\t\n\t# 如果 1<a 或 a>255 \n\tif[ "$a" -lt 1 -o "$a" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$b" -lt 0 -o "$b" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$c" -lt 0 -o "$c" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$d" -lt 0 -o "$d" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\t# 合法ip\n\tcat /root/sh/ip_test2.txt >> /root/sh/ip_test.txt\ndone\n\nrm -rf /root/sh/ip_test1.txt\nrm -rf /root/sh/ip_test2.txt\n\n\n\n#!/bin/bash\n\n# 先通过正则，把明显不符合规则的ip过滤，把结果保存在ip_test1.txt临时文件中\ngrep "^[0-9]\\{1,3\\}\\.[0-9]\\.\\{1,3\\}\\.[0-9]\\.\\{1,3\\}.[0-9]\\.\\{1,3\\}$" /root/sh/ip.txt > /root/sh/ip_test1.txt\n\n# 清空最终文件\necho "" > /root/sh/ip_valid.txt\n\nfor i in $(cat /root/sh/ip_test1.txt)\ndo \n\ta=$(echo "$i"|cut -d "." -f 1)\n\tb=$(echo "$i"|cut -d "." -f 2)\n\tc=$(echo "$i"|cut -d "." -f 3)\n\td=$(echo "$i"|cut -d "." -f 4)\n\t\n\t# 如果 1<a 或 a>255 \n\tif[ "$a" -lt 1 -o "$a" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$b" -lt 0 -o "$b" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$c" -lt 0 -o "$c" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$d" -lt 0 -o "$d" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\techo "$i" >> /root/sh/ip_valid.txt\ndone\nrm -rf /root/sh/ip_test1.txt\n\n\n2)、语法二举例\n\n那语法二就和其他语言中的for循环更加类似了，也就是事先决定循环次数的固定循环了。\n\n先举个简单的例子：\n\n例子1：从1加到100\n\n[root@localhost ~]# vim sh/auto-tar.sh\n\n#!/bin/bash\n#从1加到100\ns=0\nfor (( i=1;i<=100;i=i+1 ))\n\tdo\n\t\ts=$(( $s+$i ))\n\tdone\n\n#输出1加到100的和\t\necho "The sum of 1+2+...+100 is : $s"\n\n\n例子2：批量添加指定数量的用户\n\n[root@localhost ~]# vim sh/useradd.sh\n\n\n#!/bin/bash\n#批量添加指定数量的用户\n\nread -p "Please input user name:" -t 30 name\nread -p "Please input the number of users: " -t 30 num\nread -p "Please input the password of users: " -t 30 pass\n\n# 判断三个变量不为空\nif [ ! -z "$name" -a ! -z "$num" -a ! -z "$pass" ]\n\tthen\n\t\t#定义变量的值为后续命令的结果\n\t\t#后续命令作用是，把变量num的值替换为空。如果能替换为空，证明num的值为数字\n\t\t#如果不能替换为空，证明num的值为非数字。我们使用这种方法判断变量num的值为数字\n\t\ty=$(echo $num | sed \'s/[0-9]//g\')\n\t\t#如果变量y的值为空，证明num变量是数字\n\t\tif [ -z "$y" ]\n\t\t\tthen\n\t\t\t\t#循环num变量指定的次数\n\t\t\t\tfor(( i=1;i<=$num;i=i+1 ))\n\t\t\t\t\tdo\n\t\t\t\t\t\t#添加用户，用户名为变量name的值加变量i的数字\n\t\t\t\t\t\t/usr/sbin/useradd $name$i &>/dev/null\n\t\t\t\t\t\t#给用户设定初始密码为变量pass的值\n\t\t\t\t\t\techo $pass | /usr/bin/passwd --stdin $name$i &>/dev/null\n\t\t\t\t\t\t# 强制用户登录后修改密码\n\t\t\t\t\t\tchage -d 0 $name$i &>/dev/null\n\t\t\t\t\tdone\n\t\tfi\nfi\t\n\n\n例子3：批量删除用户\n\n[root@localhost ~]# vim sh/userdel.sh\n\n#!/bin/bash\n#批量删除用户\n\n#读取用户信息文件，提取可以登录用户，取消root用户，截取第一列用户名\nuser=$(cat /etc/passwd | grep "/bin/bash"|grep -v "root"|cut -d ":" -f 1)\n\n#循环，有多少个普通用户，循环多少次\nfor i in $user\n\tdo\n\t\t#每次循环，删除指定普通用户\n\t\tuserdel -r $i\n\tdone\n\n\n\n# while循环\n\nwhile [ 条件判断式 ]\n    do\n        程序\n    done\n\n\n对while循环来讲，只要条件判断式成立，循环就会一直继续，直到条件判断式不成立，循环才会停止。\n\n好吧，我们还是写个1加到100的例子吧，这种例子虽然对系统管理帮助不大，但是对理解循环非常有帮助：\n\n例子：1加到100\n\n#!/bin/bash\n#从1加到100\n#给变量i和变量s赋值\ni=1\ns=0\n#如果变量i的值小于等于100，则执行循环\nwhile [ $i -le 100 ]\n\tdo\n        s=$(( $s+$i ))\n        i=$(( $i+1 ))\n\tdone\necho "The sum is: $s"\n\n\n\n# until循环\n\n再来看看until循环，和while循环相反，until循环时只要条件判断式不成立则进行循环，并执行循环程序。\n\n一旦循环条件成立，则终止循环。\n\n语法如下：\n\nuntil [ 条件判断式 ]\n\tdo\n\t\t程序\n\tdone\n\n\n还是写从1加到100这个例子，注意和while循环的区别：\n\n[root@localhost ~]# vi sh/until.sh\n#!/bin/bash\n#从1加到100\n\n#给变量i和变量s赋值\ni=1\ns=0\n\n#循环直到变量i的值大于100，就停止循环\nuntil [ $i -gt 100 ]\n\t\n\tdo\n\t\ts=$(( $s+$i ))\n\t\ti=$(( $i+1 ))\n\tdone\necho "The sum is: $s"\n\n\n\n# 函数\n\nfunction 函数名 () {\n\t程序\n}\n\n\n那我们写一个函数吧，还记得从1加到100这个循环吗？这次我们用函数来实现它，不过不再是\n\n从1加到100了，我们让用户自己来决定加到多少吧：\n\n例子：\n[root@localhost ~]# vi sh/function.sh\n#!/bin/bash\n#接收用户输入的数字，然后从1加到这个数字\n\n#定义函数sum\nfunction sum () {\n\ts=0\n\t#循环直到i大于$1为止。$1是函数sum的第一个参数\n\t#在函数中也可以使用位置参数变量，不过这里的$1指的是函数的第一个参数\n\tfor (( i=0;i<=$1;i=i+1 ))\n\t\tdo\n\t\t\ts=$(( $i+$s ))\n\t\tdone\n\t#输出1加到$1的和\n\techo "The sum of 1+2+3...+$1 is :$s"\n}\n\n#接收用户输入的数字，并把值赋予变量num\nread -p "Please input a number: " -t 30 num\n#把变量num的值替换为空，并赋予变量y\ny=$(echo $num | sed \'s/[0-9]//g\')\n\n#判断变量y是否为空，以确定变量num中是否为数字\nif [ -z "$y" ]\n\tthen\n\t\t#调用sum函数，并把变量num的值作为第一个参数传递给sum函数\n\t\tsum $num\n\telse\n\t\t#如果变量num的值不是数字，则输出报错信息\n\t\techo "Error!!Please input a number!"\nfi\n\n\n\n# 特殊流程控制语句\n\n\n# 1、exit语句\n\n系统是有exit命令的，用于退出当前用户的登录状态。可是在Shell脚本中，exit语句是用来退出当前脚本的。也就是说，在Shell脚本中，只要碰到了exit语句，后续的程序就不再执行，而直接退出脚本。exit的语法如下：\n\nexit [返回值]\n\n\n如果exit命令之后定义了返回值，那么这个脚本执行之后的返回值就是我们自己定义的返回值。可以通过查询$?这个变量，来查看返回值。如果exit之后没有定义返回值，脚本执行之后的返回值是执行exit语句之前，最后执行的一条命令的返回值。写一个exit的例子：\n\n[root@localhost ~]# vi sh/exit.sh\n\n#!/bin/bash\n#演示exit的作用\nread -p "Please input a number: " -t 30 num\n\n#如果变量num的值是数字，则把num的值替换为空，否则不替换\n#把替换之后的值赋予变量y\ny=$(echo $num | sed \'s/[0-9]//g\')\n\n#判断变量y的值如果不为空，输出报错信息，退出脚本，退出返回值为18\n[ -n "$y" ] && echo "Error! Please input a number!" && exit 18\n\n#如果没有退出，则打印变量num中的数字\necho "The number is: $num"\n\n\n\n# 2、break语句\n\n再来看看特殊流程控制语句break的作用，当程序执行到break语句时，会结束整个当前循环。而continue语句也是结束循环的语句，不过continue语句单次当前循环，而下次循环会继续。\n\n有点晕菜吧，画个示意图解释下break语句，如图12-1所示：\n\n\n\n举个例子：\n\n[root@localhost ~]# vi sh/break.sh\n#!/bin/bash\n#演示break跳出循环\n\n#循环十次\nfor (( i=1;i<=10;i=i+1 ))\ndo \n\tif [ "$i" -eq 4 ]\n    \tthen\n    \tbreak\n    fi\n    echo $i\ndone\n\n\n\n# 3、continue语句\n\n再来看看continue语句，continue也是结束流程控制的语句。如果在循环中，continue语句只会结束单次当前循环，也画个示意图来说明下continue语句，如图\n\n\n\n还是用刚刚的脚本，不过退出语句换成continue语句，看看会发生什么情况：\n\n[root@localhost ~]# vi sh/continue.sh\n\n#!/bin/bash\n#接收用户输入的数字，然后从1加到这个数字\n\nfor (( i=1;i<=10;i=i+1 ))\n\tdo\n\t\tif [ "$i" -eq 4 ]\n\t\t\tthen\n\t\t\t# 退出语句换成continue\n\t\t\tcontinue\n\t\tfi\n        echo $i\n\tdone\n\n\n运行下这个脚本：\n\n[root@localhost ~]# chmod 755 sh/continue.sh\n[root@localhost ~]# sh/continue.sh\n1\n2\n3\n5      <-少了4这个输出\n6\n7\n8\n9\n10\n\n\ncontinue只会退出单次循环，所以并不影响后续的循环，所以只会少4的输出。这个例子和break的例子做个比较，应该可以更清楚的说明break和continue的区别。',normalizedContent:'# 5、流程控制\n\n\n# if条件判断\n\n\n# 1)、单分支if条件语句\n\n单分支条件语句最为简单，就是只有一个判断条件，如果符合条件则执行某个程序，否则什么事情都不做。\n\n语法如下：\n\nif [ 条件判断式 ];then\n\t程序\nfi\n\n\n单分支条件语句需要注意几个点：\n\n * if语句使用fi结尾，和一般语言使用大括号结尾不同\n\n * [ 条件判断式 ]就是使用test命令判断，所以中括号和条件判断式之间必须有空格\n\n * then后面跟符合条件之后执行的程序，可以放在[]之后，用“;”分割。 也可以换行写入，就不需要“;”了，比如单分支if语句还可以这样写：\n   \n   if [ 条件判断式 ]\n   \tthen\n   \t\t程序\n   fi\n   \n\n# 判断根分区使用率\n\n[root@xiaoshaozi ~]# df -h\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/vda1                 59g  4.2g   53g    8% /\ndevtmpfs                 858m     0  858m    0% /dev\ntmpfs                    868m     0  868m    0% /dev/shm\ntmpfs                    868m  572k  867m    1% /run\ntmpfs                    868m     0  868m    0% /sys/fs/cgroup\ntmpfs                    174m     0  174m    0% /run/user/1001\n106.14.41.60:/zsnfsdata   59g  4.2g   53g    8% /home/jysp/share\ntmpfs                    174m     0  174m    0% /run/user/0\n\n\n[root@xiaoshaozi ~]# vim if1.sh\n#!/bin/bash\n# 统计根分区使用率\n\nrate=$(df -h | grep /dev/vda1 | awk \'{print $5}\'| cut -d "%" -f 1)\n\nif [ $rate -ge 80 ]\n        then\n                echo "warning! /dev/vda1 is full!!"\nfi\n\n\n\n# 2）、双分支if条件语句\n\nif [ 条件判断式 ]\n\tthen\n\t\t条件成立时，执行的程序\n\telse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\n# 例子1：备份mysql\n\n我们写一个数据备份的例子，来看看双分支if条件语句。\n\n例子1：备份mysql数据库\n[root@xiaoshaozi sh]# vim bakmysql.sh \n\n# 吧当前系统时间安装"年月日"格式给date变量\ndate=$(date +%y%m%d)\n\n\n# 统计mysql数据库的大小，并把大小赋予size变量\nsize=$(du -sh /var/lib/mysql)\n\n# 判断备份目录是否存在，是否为目录\nif [ -d /tmp/dbbak ]\n  # 如果判断为真，执行以下脚本\n  then\n    # 把当前日期写入临时文件\n    echo "date: $date!" > /tmp/dbbak/dbinfo.txt\n    # 吧数据库大小写入临时文件\n    echo "data size: $size" >> /tmp/dbbak/dbinfo.txt\n    # 进入备份目录\n    cd /tmp/dbbak\n    # 打包压缩数据库与临时文件，把所有输出丢入垃圾桶\n    tar -zcvf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &>/dev/null\n    # 删除临时文件\n    rm -rf /tmp/dbbak/dbinfo.txt\n\n  else\n    mkdir /tmp/dbbak\n    echo "date: $date!" > /tmp/dbbak/dbinfo.txt\n    echo "data size: $size" >> /tmp/dbbak/dbinfo.txt\n    cd /tmp/dbbak\n    tar -zcvf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &>/dev/null\n    rm -rf /tmp/dbbak/dbinfo.txt\nfi\n\n\n\n# 例子2：判断apache是否启动\n\n再举个例子，在工作当中，服务器上的服务经常会宕机。\n\n如果我们对服务器监控不好，就会造成服务器中服务宕机了，而管理员却不知道的情况，这时我们可以写一个脚本来监听本机的服务，如果服务停止或宕机了，可以自动重启这些服务。\n\n我们拿apache服务来举例：\n\n例子2：判断apache是否启动，如果没有启动则自动启动\n\n[root@localhost ~]# vi sh/autostart.sh\n#!/bin/bash\n#判断apache是否启动，如果没有启动则自动启动\n\n\n#使用nmap命令扫描服务器，并截取apache服务的状态，赋予变量port\n# port=$(nmap -st 192.168.1.101 | grep 80/tcp | grep http | awk \'{print $2}\')\n#如果变量port的值是“open”\nif [ "$port" == "open" ]\n\tthen\n\t\t#则证明apache正常启动，在正常日志中写入一句话即可\n\t\techo "$(date) httpd is ok!">> /tmp/autostart-acc.log\n\telse\n\t\t#否则证明apache没有启动，自动启动apache\n\t\t/etc/rc.d/init.d/httpd start &>/dev/null\n\t\t#并在错误日志中记录自动启动apche的时间\n\t\techo "$(date) restart httpd !!" >> /tmp/autostart-err.log\nfi\n\n\n\n# 使用netstat查找端口\nport_on=$( netstat -tuln | awk \'{print $4}\' | grep ":80$" )\nif [ "$port_on" == "" ] \n\tthen \n\t\techo "httpd"\nfi\n\n\n\n以我们使用nmap端口扫描命令，nmap命令格式如下：\n\n[root@localhost ~]#nmap -st 域名或ip\n选项：\n    -s\t扫描\n    -t\t扫描所有开启的tcp端口\n\n\n这条命令的执行结果如下：\n\n[root@xiaoshaozi ~]# nmap -st 106.14.41.60\n\nstarting nmap 6.40 ( http://nmap.org ) at 2023-12-22 14:41 cst\nnmap scan report for 106.14.41.60\nhost is up (0.0033s latency).\nnot shown: 990 closed ports\nport      state    service\n22/tcp    open     ssh\n25/tcp    filtered smtp\n80/tcp    open     http\n111/tcp   open     rpcbind\n443/tcp   open     https\n2049/tcp  open     nfs\n3690/tcp  open     svn\n8086/tcp  open     d-s-n\n9898/tcp  open     monkeycom\n10012/tcp open     unknown\n\n\n\n\n# 3）、多分支if条件语句\n\nif [ 条件判断式1 ]\n\tthen\n\t\t条件成立时，执行的程序\nelif [ 条件判断式2 ]\t\n\tthen\n\t\t条件成立时，执行的程序\n\n...省略更多条件...\n\nelse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\n# 判断是否是目录\n\n那我们再写一个例子，用if多分支条件语句来判断一下用户输入的是一个文件，还是一个目录：\n\n例子：判断用户输入的是什么文件\n[root@localhost ~]# vim sh/if-elif.sh\n\n#!/bin/bash\n# 判断用户输入的是什么文件\n\n#接收键盘的输入，并赋予变量file\nread -p "please input a filename: " file\n\n#判断file变量是否为空\nif [ -z "$file" ]\n\tthen\n\t\t#如果为空，执行程序1，也就是输出报错信息\n\t\techo "error,please input a filename"\n\t\t#退出程序，并返回值为1（把返回值赋予变量$?）\n\t\texit 1\n\t\t\n#判断file的值是否存在\nelif [ ! -e "$file" ]\n\tthen\n\t\t#如果不存在，则执行程序2\n\t\techo "your input is not a file!"\n\t\t#退出程序，把并定义返回值为2\n\t\texit 2\n\n#判断file的值是否为普通文件\nelif [ -f "$file" ]\n\tthen\n\t\t#如果是普通文件，则执行程序3\n\t\techo "$file is a regulare file!"\n\t\t\n#判断file的值是否为目录文件\nelif [ -d "$file" ]\n\tthen\n\t\t#如果是目录文件，则执行程序4\n\t\techo "$file is a directory!"\n\t\t\nelse\n\t#如果以上判断都不是，则执行程序5\n\techo "$file is an other file!"\nfi\n\n\n# 四则运算shell if-else版\n\n#!/bin/bash\n# 字符界面加减乘除计算器\n\nread -t 30 -p "请输入数字1" num1\nread -t 30 -p "请输入数字2" num2\n\nread -t 30 -p "请输入一个操作符" ope\n\n# -n 字符串是否为空（非空true）\nif [ -n "$num1" -a -n "$num2" -a -n "$ope" ]\n\tthen\n\t# 定义变量，将数字替换，替换后如果不为空，则证明不是纯数字\n\ttest1=$(echo $num1 | sed \'s/[0-9]//g\')\n\ttest2=$(echo $num2 | sed \'s/[0-9]//g\')\n\t\n\t# 判断 test1,test2为空这证明是数字\n\tif [ -z "$test1" -a -z "$test2" ]\n\t\tthen\n\t\t# 如果是数字\n\t\t\tif [ "$ope" == \'+\' ]\n\t\t\t\tthen\n\t\t\t\tvalue=$(( $num1 + $num2 ))\n\t\t\telif [ "$ope" == \'-\' ]\n            \tthen\n            \tvalue=$(( $num1 + $num2 ))\n            elif [ "$ope" == \'*\' ]\n            \tthen\n            \tvalue=$(( $num1 * $num2 ))\n            elif [ "$ope" == \'/\' ]\n            \tthen\n            \tvalue=$(( $num1 / $num2 ))\n            else\n            \techo "请输入有效运算符"\n\t\t\tfi\n\t\t# 如果test1和test2不为空，说明num1和num2不是数字\t\n\t\telse\n\t\t\t# 则提示输入有效的数值\n\t\t\techo "请输入有效数字"\n\t\t\t# 并退出程序，返回错误代码11\n\t\t\texit 11\n\tfi\nelse \n\techo "请输入正确内容"\t\n\texit 12\nfi\n\necho " $num1 $ope $num2 : $value "\n\n\n\n# 多分支case条件语句\n\ncase语句和if…elif…else语句一样都是多分支条件语句，不过和if多分支条件语句不同的是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系。\n\ncase语句语法如下：\n\ncase $变量名 in\n\t"值1")\n\t\t如果变量的值等于值1，则执行程序1\n\t\t;;\n\t"值1")\n\t\t如果变量的值等于值2，则执行程序2\n\t\t;;\n\n\t…省略其他分支…\n\n\t*)\n\t\t如果变量的值都不是以上的值，则执行此程序\n\t\t;;\nesac\n\n\n这个语句需要注意以下内容：\n\n * case语句，会取出变量中的值，然后与语句体中的值逐一比较。 如果数值符合，则执行对应的程序，如果数值不符，则依次比较下一个值。 如果所有的值都不符合，则执行“*）”（“*”代表所有其他值）中的程序。\n\n * case语句以“case”开头，以“esac”结尾。\n\n每一个分支程序之后要通过“;;”双分号结尾，代表该程序段结束（千万不要忘记）。\n\n我们写一个判断是“yes/no”的例子：\n\n[root@localhost ~]# vim sh/case.sh\n\n#!/bin/bash\n# 判断用户输入\n\nread -t 30 -p "请选择yes/no" cho\n\n# 判断变量cho的值\ncase $cho in\n\t"yes")\n\t\techo "你的选择是yes"\n\t\t;;\n\t"no")\n\t\techo "你的选择是no!"\n\t\t;;\n\t\t\n\t*)\n\t\techo "error!"\n\t\t;;\nesac\n\n\n\n# for循环\n\nfor循环是固定循环，也就是在循环时已经知道需要进行几次的循环，有时也把for循环称为计数循环。\n\nfor的语法有如下两种：\n\n语法一：\n\nfor 变量 in 值1 值2 值3 ...\n\tdo \n\t\t程序\n\tdone\n\n\n这种语法中for循环的次数，取决于in后面值的个数（空格分隔），有几个值就循环几次，并且每次循环都把值赋予变量。\n\n也就是说，假设in后面有三个值，for会循环三次，第一次循环会把值1赋予变量，第二次循环会把值2赋予变量，以此类推。\n\n语法二：\nfor (( 初始值;循环控制条件;变量变化 ))\n\tdo\n\t\t程序\n\tdone\n\n\n语法二中需要注意：\n\n * 初始值：在循环开始时，需要给某个变量赋予初始值，如i=1；\n\n * 循环控制条件：用于指定变量循环的次数，如i<=100，则只要i的值小于等于100，循环就会继续；\n\n * 变量变化：每次循环之后，变量该如何变化，如i=i+1。代表每次循环之后，变量i的值都加1。\n\n1)、语法一举例：\n\n我们先看看语法一是什么样子的：\n\n例子1：打印时间\n\n\n[root@localhost ~]# vim sh/for.sh\n\n#!/bin/bash\n# 打印时间\n\nfor time in morning noon afternoon evening\n\tdo\n\t\techo "this time is $time!"\n\tdone\n\n\n批量解压缩脚本就应该这样写：\n\n例子2：批量解压缩\n\n\n[root@localhost ~]# vim sh/auto-tar.sh\n\n#!/bin/bash\n# 批量解压缩脚本\n\n# 进入压缩目录\ncd /lamp\nls *.tar.gz > ls.log\n# 把所有.tar.gz结尾的文件的文件覆盖到ls.log临时文件中\nfor i in $(cat ls.log)\n\tdo\n\t\ttar -zxf $i &>/dev/null\n\tdone\nrm -rf /lamp/ls.log\n\n\n\n\n\n[root@localhost ~]# vim sh/auto-tar.sh\n\n#!/bin/bash\n# 批量解压缩脚本\n\n# 进入压缩目录\ncd /lamp\n# 利用文件作为数组\nls *.tar.gz > ls.log\n\n# 统计行数\ncount=$( cat ls.log|wc -l )\n\n# 循环行数\nfor(( i=1;i<="$count";i=i+1 ))\ndo\n\t# 使用awk的nr变量，取出文件名，类似获取数组指定index值\n\ttarname=$( cat ls.log|awk \'nr==\'$i\' {print $1}\' )\n\t# 指定解压路径解压\n\ttar -zxvf $tarname -c /lamp\ndone\n\n\nip校验\n\n\n#!/bin/bash\n\n# 先通过正则，把明显不符合规则的ip过滤，把结果保存在ip_test1.txt临时文件中\ngrep "^[0-9]\\{1,3\\}\\.[0-9]\\.\\{1,3\\}\\.[0-9]\\.\\{1,3\\}.[0-9]\\.\\{1,3\\}$" /root/sh/ip.txt > /root/sh/ip_test1.txt\n\n\n# cat ip.txt | wc -l\n# 统计test1中有几行ip\nline=$(wc -l /root/sh/ip_test1.txt | awk \'{print $1}\') \n\n# 清空最终数据文件\necho "" > /root/sh/ip_test.txt\n\nfor(( i=1;i<=$line;i=i+1 ))\ndo\n\t# 第几次循环，就把第几行读入 ip_test2.txt文件（此文件只有一行ip）\n\tcat /root/sh/ip_test1.txt|awk \'nr==\'$i\'{print}\' > /root/sh/ip_test2.txt\n\t# \n\ta=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 1)\n\tb=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 2)\n\tc=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 3)\n\td=$(cat /root/sh/ip_test2.txt|cut -d\'.\' -f 4)\n\t\n\t# 如果 1<a 或 a>255 \n\tif[ "$a" -lt 1 -o "$a" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$b" -lt 0 -o "$b" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$c" -lt 0 -o "$c" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$d" -lt 0 -o "$d" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\t# 合法ip\n\tcat /root/sh/ip_test2.txt >> /root/sh/ip_test.txt\ndone\n\nrm -rf /root/sh/ip_test1.txt\nrm -rf /root/sh/ip_test2.txt\n\n\n\n#!/bin/bash\n\n# 先通过正则，把明显不符合规则的ip过滤，把结果保存在ip_test1.txt临时文件中\ngrep "^[0-9]\\{1,3\\}\\.[0-9]\\.\\{1,3\\}\\.[0-9]\\.\\{1,3\\}.[0-9]\\.\\{1,3\\}$" /root/sh/ip.txt > /root/sh/ip_test1.txt\n\n# 清空最终文件\necho "" > /root/sh/ip_valid.txt\n\nfor i in $(cat /root/sh/ip_test1.txt)\ndo \n\ta=$(echo "$i"|cut -d "." -f 1)\n\tb=$(echo "$i"|cut -d "." -f 2)\n\tc=$(echo "$i"|cut -d "." -f 3)\n\td=$(echo "$i"|cut -d "." -f 4)\n\t\n\t# 如果 1<a 或 a>255 \n\tif[ "$a" -lt 1 -o "$a" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$b" -lt 0 -o "$b" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$c" -lt 0 -o "$c" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\tif[ "$d" -lt 0 -o "$d" -gt 255]\n\t\tthen\n\t\t\tcontinue\t\n\tfi\n\techo "$i" >> /root/sh/ip_valid.txt\ndone\nrm -rf /root/sh/ip_test1.txt\n\n\n2)、语法二举例\n\n那语法二就和其他语言中的for循环更加类似了，也就是事先决定循环次数的固定循环了。\n\n先举个简单的例子：\n\n例子1：从1加到100\n\n[root@localhost ~]# vim sh/auto-tar.sh\n\n#!/bin/bash\n#从1加到100\ns=0\nfor (( i=1;i<=100;i=i+1 ))\n\tdo\n\t\ts=$(( $s+$i ))\n\tdone\n\n#输出1加到100的和\t\necho "the sum of 1+2+...+100 is : $s"\n\n\n例子2：批量添加指定数量的用户\n\n[root@localhost ~]# vim sh/useradd.sh\n\n\n#!/bin/bash\n#批量添加指定数量的用户\n\nread -p "please input user name:" -t 30 name\nread -p "please input the number of users: " -t 30 num\nread -p "please input the password of users: " -t 30 pass\n\n# 判断三个变量不为空\nif [ ! -z "$name" -a ! -z "$num" -a ! -z "$pass" ]\n\tthen\n\t\t#定义变量的值为后续命令的结果\n\t\t#后续命令作用是，把变量num的值替换为空。如果能替换为空，证明num的值为数字\n\t\t#如果不能替换为空，证明num的值为非数字。我们使用这种方法判断变量num的值为数字\n\t\ty=$(echo $num | sed \'s/[0-9]//g\')\n\t\t#如果变量y的值为空，证明num变量是数字\n\t\tif [ -z "$y" ]\n\t\t\tthen\n\t\t\t\t#循环num变量指定的次数\n\t\t\t\tfor(( i=1;i<=$num;i=i+1 ))\n\t\t\t\t\tdo\n\t\t\t\t\t\t#添加用户，用户名为变量name的值加变量i的数字\n\t\t\t\t\t\t/usr/sbin/useradd $name$i &>/dev/null\n\t\t\t\t\t\t#给用户设定初始密码为变量pass的值\n\t\t\t\t\t\techo $pass | /usr/bin/passwd --stdin $name$i &>/dev/null\n\t\t\t\t\t\t# 强制用户登录后修改密码\n\t\t\t\t\t\tchage -d 0 $name$i &>/dev/null\n\t\t\t\t\tdone\n\t\tfi\nfi\t\n\n\n例子3：批量删除用户\n\n[root@localhost ~]# vim sh/userdel.sh\n\n#!/bin/bash\n#批量删除用户\n\n#读取用户信息文件，提取可以登录用户，取消root用户，截取第一列用户名\nuser=$(cat /etc/passwd | grep "/bin/bash"|grep -v "root"|cut -d ":" -f 1)\n\n#循环，有多少个普通用户，循环多少次\nfor i in $user\n\tdo\n\t\t#每次循环，删除指定普通用户\n\t\tuserdel -r $i\n\tdone\n\n\n\n# while循环\n\nwhile [ 条件判断式 ]\n    do\n        程序\n    done\n\n\n对while循环来讲，只要条件判断式成立，循环就会一直继续，直到条件判断式不成立，循环才会停止。\n\n好吧，我们还是写个1加到100的例子吧，这种例子虽然对系统管理帮助不大，但是对理解循环非常有帮助：\n\n例子：1加到100\n\n#!/bin/bash\n#从1加到100\n#给变量i和变量s赋值\ni=1\ns=0\n#如果变量i的值小于等于100，则执行循环\nwhile [ $i -le 100 ]\n\tdo\n        s=$(( $s+$i ))\n        i=$(( $i+1 ))\n\tdone\necho "the sum is: $s"\n\n\n\n# until循环\n\n再来看看until循环，和while循环相反，until循环时只要条件判断式不成立则进行循环，并执行循环程序。\n\n一旦循环条件成立，则终止循环。\n\n语法如下：\n\nuntil [ 条件判断式 ]\n\tdo\n\t\t程序\n\tdone\n\n\n还是写从1加到100这个例子，注意和while循环的区别：\n\n[root@localhost ~]# vi sh/until.sh\n#!/bin/bash\n#从1加到100\n\n#给变量i和变量s赋值\ni=1\ns=0\n\n#循环直到变量i的值大于100，就停止循环\nuntil [ $i -gt 100 ]\n\t\n\tdo\n\t\ts=$(( $s+$i ))\n\t\ti=$(( $i+1 ))\n\tdone\necho "the sum is: $s"\n\n\n\n# 函数\n\nfunction 函数名 () {\n\t程序\n}\n\n\n那我们写一个函数吧，还记得从1加到100这个循环吗？这次我们用函数来实现它，不过不再是\n\n从1加到100了，我们让用户自己来决定加到多少吧：\n\n例子：\n[root@localhost ~]# vi sh/function.sh\n#!/bin/bash\n#接收用户输入的数字，然后从1加到这个数字\n\n#定义函数sum\nfunction sum () {\n\ts=0\n\t#循环直到i大于$1为止。$1是函数sum的第一个参数\n\t#在函数中也可以使用位置参数变量，不过这里的$1指的是函数的第一个参数\n\tfor (( i=0;i<=$1;i=i+1 ))\n\t\tdo\n\t\t\ts=$(( $i+$s ))\n\t\tdone\n\t#输出1加到$1的和\n\techo "the sum of 1+2+3...+$1 is :$s"\n}\n\n#接收用户输入的数字，并把值赋予变量num\nread -p "please input a number: " -t 30 num\n#把变量num的值替换为空，并赋予变量y\ny=$(echo $num | sed \'s/[0-9]//g\')\n\n#判断变量y是否为空，以确定变量num中是否为数字\nif [ -z "$y" ]\n\tthen\n\t\t#调用sum函数，并把变量num的值作为第一个参数传递给sum函数\n\t\tsum $num\n\telse\n\t\t#如果变量num的值不是数字，则输出报错信息\n\t\techo "error!!please input a number!"\nfi\n\n\n\n# 特殊流程控制语句\n\n\n# 1、exit语句\n\n系统是有exit命令的，用于退出当前用户的登录状态。可是在shell脚本中，exit语句是用来退出当前脚本的。也就是说，在shell脚本中，只要碰到了exit语句，后续的程序就不再执行，而直接退出脚本。exit的语法如下：\n\nexit [返回值]\n\n\n如果exit命令之后定义了返回值，那么这个脚本执行之后的返回值就是我们自己定义的返回值。可以通过查询$?这个变量，来查看返回值。如果exit之后没有定义返回值，脚本执行之后的返回值是执行exit语句之前，最后执行的一条命令的返回值。写一个exit的例子：\n\n[root@localhost ~]# vi sh/exit.sh\n\n#!/bin/bash\n#演示exit的作用\nread -p "please input a number: " -t 30 num\n\n#如果变量num的值是数字，则把num的值替换为空，否则不替换\n#把替换之后的值赋予变量y\ny=$(echo $num | sed \'s/[0-9]//g\')\n\n#判断变量y的值如果不为空，输出报错信息，退出脚本，退出返回值为18\n[ -n "$y" ] && echo "error! please input a number!" && exit 18\n\n#如果没有退出，则打印变量num中的数字\necho "the number is: $num"\n\n\n\n# 2、break语句\n\n再来看看特殊流程控制语句break的作用，当程序执行到break语句时，会结束整个当前循环。而continue语句也是结束循环的语句，不过continue语句单次当前循环，而下次循环会继续。\n\n有点晕菜吧，画个示意图解释下break语句，如图12-1所示：\n\n\n\n举个例子：\n\n[root@localhost ~]# vi sh/break.sh\n#!/bin/bash\n#演示break跳出循环\n\n#循环十次\nfor (( i=1;i<=10;i=i+1 ))\ndo \n\tif [ "$i" -eq 4 ]\n    \tthen\n    \tbreak\n    fi\n    echo $i\ndone\n\n\n\n# 3、continue语句\n\n再来看看continue语句，continue也是结束流程控制的语句。如果在循环中，continue语句只会结束单次当前循环，也画个示意图来说明下continue语句，如图\n\n\n\n还是用刚刚的脚本，不过退出语句换成continue语句，看看会发生什么情况：\n\n[root@localhost ~]# vi sh/continue.sh\n\n#!/bin/bash\n#接收用户输入的数字，然后从1加到这个数字\n\nfor (( i=1;i<=10;i=i+1 ))\n\tdo\n\t\tif [ "$i" -eq 4 ]\n\t\t\tthen\n\t\t\t# 退出语句换成continue\n\t\t\tcontinue\n\t\tfi\n        echo $i\n\tdone\n\n\n运行下这个脚本：\n\n[root@localhost ~]# chmod 755 sh/continue.sh\n[root@localhost ~]# sh/continue.sh\n1\n2\n3\n5      <-少了4这个输出\n6\n7\n8\n9\n10\n\n\ncontinue只会退出单次循环，所以并不影响后续的循环，所以只会少4的输出。这个例子和break的例子做个比较，应该可以更清楚的说明break和continue的区别。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708611676e3},{title:"6、数组",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/6%E3%80%81%E6%95%B0%E7%BB%84.html",relativePath:"zs-use/linux/shell编程/6、数组.md",key:"v-0a482f9e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/6%E3%80%81%E6%95%B0%E7%BB%84.html",headers:[{level:2,title:"定义数组、基本使用",slug:"定义数组、基本使用",normalizedTitle:"定义数组、基本使用",charIndex:11},{level:2,title:"数组遍历",slug:"数组遍历",normalizedTitle:"数组遍历",charIndex:503},{level:3,title:"方式一：遍历元素",slug:"方式一-遍历元素",normalizedTitle:"方式一：遍历元素",charIndex:512},{level:3,title:"方式二：索引遍历",slug:"方式二-索引遍历",normalizedTitle:"方式二：索引遍历",charIndex:625},{level:3,title:"方式三：遍历元素split效果",slug:"方式三-遍历元素split效果",normalizedTitle:"方式三：遍历元素split效果",charIndex:887},{level:2,title:"字符串分割成数组",slug:"字符串分割成数组",normalizedTitle:"字符串分割成数组",charIndex:1231},{level:2,title:"数组去重",slug:"数组去重",normalizedTitle:"数组去重",charIndex:1466},{level:3,title:"方式一：printf配合 sort和uniq",slug:"方式一-printf配合-sort和uniq",normalizedTitle:"方式一：printf配合 sort和uniq",charIndex:1475},{level:3,title:"方式二：数组属性赋值方式",slug:"方式二-数组属性赋值方式",normalizedTitle:"方式二：数组属性赋值方式",charIndex:1705},{level:2,title:"数组拷贝",slug:"数组拷贝",normalizedTitle:"数组拷贝",charIndex:2003},{level:2,title:"关联数组（属性赋值）",slug:"关联数组-属性赋值",normalizedTitle:"关联数组（属性赋值）",charIndex:2262},{level:2,title:"数组合并",slug:"数组合并",normalizedTitle:"数组合并",charIndex:2812}],lastUpdated:"2024年2月23日星期五凌晨12点17分",lastUpdatedTimestamp:1708618656e3,headersStr:"定义数组、基本使用 数组遍历 方式一：遍历元素 方式二：索引遍历 方式三：遍历元素split效果 字符串分割成数组 数组去重 方式一：printf配合 sort和uniq 方式二：数组属性赋值方式 数组拷贝 关联数组（属性赋值） 数组合并",content:'# 6、数组\n\n\n# 定义数组、基本使用\n\n在Linux中，可以使用以下方式定义和使用数组：\n\n# 定义数组\narray=("apple" "banana" "orange")\n\n# ========================================= #\n# 使用索引访问数组元素\necho ${array[0]} # 输出：apple\n\n# 使用`*`或`@`可以获取数组中的所有元素\necho ${array[*]} # 输出：apple banana orange\n\n# 使用`#`可以获取数组的长度\necho ${#array[@]}  # 输出：3\n\n# 使用`+=`可以向数组中添加元素\narray+=("grape")\necho ${array[*]} # 输出：apple banana orange grape\n\n# 使用`unset`可以删除数组中的元素\nunset array[1]\necho ${array[*]} # 输出：apple orange grape\n# ========================================= #\n\n\n\n# 数组遍历\n\n\n# 方式一：遍历元素\n\narray=("apple" "banana" "orange")\n\n# 使用循环遍历数组中的元素\nfor item in ${array[*]}; do\n    echo $item\ndone\n\n\n\n# 方式二：索引遍历\n\n#!/bin/bash\n\n# 定义一个数组\nmy_array=("value1" "value2" "value3")\n# 获取数组长度\nlength=${#my_array[@]}\n# 循环遍历数组\nfor ((i=0; i<$length; i++))\ndo\n    # 获取索引和值\n    index=$i\n    value=${my_array[$i]}\n    \n    # 输出索引和值\n    echo "Index: $index, Value: $value"\ndone\n\n\n\n# 方式三：遍历元素split效果\n\n特殊格式的数组元素循环，split效果\n\n#!/bin/bash\n\n# 定义一个数组\nmy_array=(\n    "key1=value1"\n    "key2=value2"\n    "key3=value3"\n)\n# 循环遍历数组\nfor item in "${my_array[@]}"\ndo\n    # 使用IFS（内部字段分隔符）将键和值分割开\n    IFS=\'=\' read -ra array <<< "$item"\n    key="${array[0]}"\n    value="${array[1]}"\n    \n    # 输出键和值\n    echo "Key: $key, Value: $value"\ndone\n\n\n\n# 字符串分割成数组\n\n使用read命令结合循环结构来遍历以英文逗号分割的字符串\n\n#!/bin/bash\n\n# 定义一个包含逗号分割值的字符串\nstr="apple,banana,orange,grape"\n\n# 使用IFS（内部字段分隔符）将字符串按逗号分割成数组\nIFS=\',\' read -ra arr <<< "$str"\n\n# 循环遍历数组中的每个值\nfor item in "${arr[@]}"; do\n    echo "$item"\ndone\n\n\n\n# 数组去重\n\n\n# 方式一：printf配合 sort和uniq\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 使用sort和uniq命令去除重复元素\nsorted_arr=($(printf "%s\\n" "${arr[@]}" | sort | uniq))\n\n# 打印去重后的数组\necho "${sorted_arr[@]}"\n\n\n\n# 方式二：数组属性赋值方式\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 声明关联数组\ndeclare -A unique_arr\n\n# 遍历原始数组，将每个元素作为关联数组的键，如果键不存在，则将其值设置为1，否则将其值递增1\nfor item in "${arr[@]}"; do\n    unique_arr["$item"]=1\ndone\n\n# 打印去重后的数组（关联数组的键即为去重后的元素）\necho "${!unique_arr[@]}"\n\n\n\n# 数组拷贝\n\n在操作数组前拷贝一份数组是一种常见的做法，可以避免直接修改原始数组，从而避免循环过程中出现异常。\n\n你可以使用以下代码来复制一个数组：\n\n# 原始数组\noriginal_array=("element1" "element2" "element3")\n\n# 复制数组\ncopied_array=("${original_array[@]}")\n\n# 在复制的数组上进行操作\nfor element in "${copied_array[@]}"; do\n  echo $element\ndone\n\n\n\n# 关联数组（属性赋值）\n\n关联数组允许你将键与值相关联，类似于Map数据结构。\n\n# 要在Shell中使用关联数组，首先需要声明一个关联数组变量。以下是一个示例：\ndeclare -A map_array\n\n# 接下来，你可以通过键来添加或修改关联数组中的值。以下是一个示例：\nmap_array["key1"]="value1"\nmap_array["key2"]="value2"\n\n# 要获取关联数组中的值，可以使用键来索引关联数组。以下是一个示例：\nvalue1="${map_array["key1"]}"\nvalue2="${map_array["key2"]}"\n\n# 要删除关联数组中的键值对，可以使用`unset`命令。以下是一个示例：\nbashunset "map_array["key1"]"\n\n# 要遍历关联数组中的所有键值对，可以使用循环结构。以下是一个示例：\nfor key in "${!map_array[@]}"; do\n\techo "Key: $key, Value: ${map_array[$key]}"\ndone\n\n\n以上就是在Shell中使用关联数组作为Map数据结构的基本用法。通过使用关联数组，你可以在Shell中实现类似Map数据结构的操作。\n\n\n# 数组合并\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组\narray3=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array3[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6\n\n\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组并修改原始数组\narray1=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array1[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6 \n\n\n#!/bin/bash\n\n# 定义两个数组\narray1=("element1" "element2" "element3" "element4")\narray2=("element3" "element4" "element5" "element6")\n\n# 将两个数组连接并转换为换行符分隔的形式\ncombined_array=$(echo "${array1[@]}" "${array2[@]}" | tr \' \' \'\\n\' | sort | uniq)\n',normalizedContent:'# 6、数组\n\n\n# 定义数组、基本使用\n\n在linux中，可以使用以下方式定义和使用数组：\n\n# 定义数组\narray=("apple" "banana" "orange")\n\n# ========================================= #\n# 使用索引访问数组元素\necho ${array[0]} # 输出：apple\n\n# 使用`*`或`@`可以获取数组中的所有元素\necho ${array[*]} # 输出：apple banana orange\n\n# 使用`#`可以获取数组的长度\necho ${#array[@]}  # 输出：3\n\n# 使用`+=`可以向数组中添加元素\narray+=("grape")\necho ${array[*]} # 输出：apple banana orange grape\n\n# 使用`unset`可以删除数组中的元素\nunset array[1]\necho ${array[*]} # 输出：apple orange grape\n# ========================================= #\n\n\n\n# 数组遍历\n\n\n# 方式一：遍历元素\n\narray=("apple" "banana" "orange")\n\n# 使用循环遍历数组中的元素\nfor item in ${array[*]}; do\n    echo $item\ndone\n\n\n\n# 方式二：索引遍历\n\n#!/bin/bash\n\n# 定义一个数组\nmy_array=("value1" "value2" "value3")\n# 获取数组长度\nlength=${#my_array[@]}\n# 循环遍历数组\nfor ((i=0; i<$length; i++))\ndo\n    # 获取索引和值\n    index=$i\n    value=${my_array[$i]}\n    \n    # 输出索引和值\n    echo "index: $index, value: $value"\ndone\n\n\n\n# 方式三：遍历元素split效果\n\n特殊格式的数组元素循环，split效果\n\n#!/bin/bash\n\n# 定义一个数组\nmy_array=(\n    "key1=value1"\n    "key2=value2"\n    "key3=value3"\n)\n# 循环遍历数组\nfor item in "${my_array[@]}"\ndo\n    # 使用ifs（内部字段分隔符）将键和值分割开\n    ifs=\'=\' read -ra array <<< "$item"\n    key="${array[0]}"\n    value="${array[1]}"\n    \n    # 输出键和值\n    echo "key: $key, value: $value"\ndone\n\n\n\n# 字符串分割成数组\n\n使用read命令结合循环结构来遍历以英文逗号分割的字符串\n\n#!/bin/bash\n\n# 定义一个包含逗号分割值的字符串\nstr="apple,banana,orange,grape"\n\n# 使用ifs（内部字段分隔符）将字符串按逗号分割成数组\nifs=\',\' read -ra arr <<< "$str"\n\n# 循环遍历数组中的每个值\nfor item in "${arr[@]}"; do\n    echo "$item"\ndone\n\n\n\n# 数组去重\n\n\n# 方式一：printf配合 sort和uniq\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 使用sort和uniq命令去除重复元素\nsorted_arr=($(printf "%s\\n" "${arr[@]}" | sort | uniq))\n\n# 打印去重后的数组\necho "${sorted_arr[@]}"\n\n\n\n# 方式二：数组属性赋值方式\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 声明关联数组\ndeclare -a unique_arr\n\n# 遍历原始数组，将每个元素作为关联数组的键，如果键不存在，则将其值设置为1，否则将其值递增1\nfor item in "${arr[@]}"; do\n    unique_arr["$item"]=1\ndone\n\n# 打印去重后的数组（关联数组的键即为去重后的元素）\necho "${!unique_arr[@]}"\n\n\n\n# 数组拷贝\n\n在操作数组前拷贝一份数组是一种常见的做法，可以避免直接修改原始数组，从而避免循环过程中出现异常。\n\n你可以使用以下代码来复制一个数组：\n\n# 原始数组\noriginal_array=("element1" "element2" "element3")\n\n# 复制数组\ncopied_array=("${original_array[@]}")\n\n# 在复制的数组上进行操作\nfor element in "${copied_array[@]}"; do\n  echo $element\ndone\n\n\n\n# 关联数组（属性赋值）\n\n关联数组允许你将键与值相关联，类似于map数据结构。\n\n# 要在shell中使用关联数组，首先需要声明一个关联数组变量。以下是一个示例：\ndeclare -a map_array\n\n# 接下来，你可以通过键来添加或修改关联数组中的值。以下是一个示例：\nmap_array["key1"]="value1"\nmap_array["key2"]="value2"\n\n# 要获取关联数组中的值，可以使用键来索引关联数组。以下是一个示例：\nvalue1="${map_array["key1"]}"\nvalue2="${map_array["key2"]}"\n\n# 要删除关联数组中的键值对，可以使用`unset`命令。以下是一个示例：\nbashunset "map_array["key1"]"\n\n# 要遍历关联数组中的所有键值对，可以使用循环结构。以下是一个示例：\nfor key in "${!map_array[@]}"; do\n\techo "key: $key, value: ${map_array[$key]}"\ndone\n\n\n以上就是在shell中使用关联数组作为map数据结构的基本用法。通过使用关联数组，你可以在shell中实现类似map数据结构的操作。\n\n\n# 数组合并\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组\narray3=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array3[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6\n\n\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组并修改原始数组\narray1=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array1[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6 \n\n\n#!/bin/bash\n\n# 定义两个数组\narray1=("element1" "element2" "element3" "element4")\narray2=("element3" "element4" "element5" "element6")\n\n# 将两个数组连接并转换为换行符分隔的形式\ncombined_array=$(echo "${array1[@]}" "${array2[@]}" | tr \' \' \'\\n\' | sort | uniq)\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708618656e3},{title:"实战脚本示例01",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B01.html",relativePath:"zs-use/linux/shell编程/实战脚本示例01.md",key:"v-10a3b384",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B01.html",lastUpdated:"2023年12月27日星期三晚上11点30分",lastUpdatedTimestamp:170369105e4,headersStr:null,content:'# 实战脚本示例01\n\n> CentOS7.9 软件安装脚本\n> \n> nginx\n> \n> redis\n> \n> rabbitmq\n> \n> 等等\n\n#!/bin/bash\n\n################################################\n# 执行用户判断：\n################################################\n# 只允许使用root用户执行\n# 判断当前用户是否为root\n#################################################\nuser=$(env | grep USER | cut -d "=" -f 2)\nif [ "$user" != "root" ]\nthen\n\techo "请使用root用户执行该脚本。切换root命令：su - root"\n\texit 0\nfi\nsleep 1\n\nhomepwd=/home/jysp\n\n\n\n################################################\n# 安装环境校验：\n################################################\n# 判断jysp用户是否存在\n# 判断jysp文件夹是否存在\n# 进入对应的安装文件夹内\n#################################################\nfunction filepwd-check(){\n  id \'jysp\' &>/dev/null\n  if [ ! $? -eq 0 ]\n    then\n      echo "用户\'jysp\'不存在。"\n       exit 1\n  fi\n  if [ ! -d "$homepwd" ]\n    then\n      echo "jysp文件夹不存在"\n      exit 1\n  fi\n\n  mariadbfile=(boost-program-options-1.53.0-28.el7.x86_64.rpm galera-25.3.37-1.el7.centos.x86_64.rpm MariaDB-client-10.3.36-1.el7.centos.x86_64.rpm MariaDB-common-10.3.36-1.el7.centos.x86_64.rpm MariaDB-compat-10.3.36-1.el7.centos.x86_64.rpm MariaDB-server-10.3.36-1.el7.centos.x86_64.rpm expect-5.45-14.el7_1.x86_64.rpm my.cnf tcl-8.5.13-8.el7.x86_64.rpm)\n  rabbitfile=(erlang-23.3.4.4-1.el7.x86_64.rpm rabbitmq-server-3.7.8-1.el7.noarch.rpm)\n  redisfile=(redis.tar.gz redis.conf redis-server.service)\n  influxfile=(influxdb-1.8.3.x86_64.rpm)\n  vsftpfile=(vsftpd-3.0.2-29.el7_9.x86_64.rpm vsftpd.tar.gz)\n  nginxfile=(ssl.tar.gz nginx.conf nginx-1.14.2-1.el7_4.ngx.x86_64.rpm)\n\n  # case in 校验\n  case $1 in\n    mariadb)\n     ds=("${mariadbfile[*]}")\n     cd $homepwd/rpm-install/MariaDB-10.3\n     echo -e "\\e[31m######==========MariaDB-10.3==========######\\e[0m"\n     ;;\n    rabbitmq)\n     ds=("${rabbitfile[*]}")\n     cd $homepwd/rpm-install/RabbitMQ\n     echo -e "\\e[31m######==========RabbitMQ==========######\\e[0m"\n     ;;\n    redis)\n      ds=("${redisfile[*]}")\n      cd $homepwd/rpm-install/Redis\n      echo -e "\\e[31m######==========Redis==========######\\e[0m"\n      ;;\n    influxdb)\n     ds=("${influxfile[*]}")\n     cd $homepwd/rpm-install/InfluxDB\n     echo -e "\\e[31m######==========InfluxDB==========######\\e[0m"\n     ;;\n    vsftpd)\n     ds=("${vsftpfile[*]}")\n     cd $homepwd/rpm-install/VSFTPD\n     echo -e "\\e[31m######==========VSFTPD==========######\\e[0m"\n         ;;\n    nginx)\n      ds=("${nginxfile[*]}")\n      cd $homepwd/rpm-install/Nginx\n      echo -e "\\e[31m######==========Nginx==========######\\e[0m"\n  esac\n\n  # 循环输出文件名称到屏幕\n  for value in ${ds[*]}\n    do\n      if [ -f "$value" ];then\n        echo -e "\\e[32m    $value ---OK\\e[0m"\n        sleep 1\n      else\n        echo -e "\\e[31m    $value ---NO\\e[0m"\n        exit 0\n      fi\n    done\n}\n\n################################################\n# 检测服务是否运行\n################################################\n#\n#################################################\nfunction check_server(){\n  echo ""\n  echo -e "\\e[31m######==========$1==========######\\e[0m"\n  echo -e "\\e[31m$1::\\e[0m `systemctl show $1 --property ActiveState | awk -F "=" \'{print $2}\'`"\n  if [ "$1" == "rabbitmq-server.service" ]\n    then\n      echo -e "\\e[31muser/role:\\e[0m `rabbitmqctl list_users | grep jysp`"\n      echo -e "\\e[31mvhosts:\\e[0m `rabbitmqctl list_vhosts | grep jysp`"\n  elif [ "$1" == "influxdb.service" ]\n    then\n      echo -e "\\e[31mdata:\\e[0m `influx -execute "show databases;" | grep ycxs`"\n      echo -e "\\e[31mstrategy:\\n\\e[0m `influx -execute "show retention policies on ycxs1000;"`"\n  elif [ "$1" == "mariadb.service" ]\n    then\n      echo -e "\\e[31mDatabase:\\n\\e[0m `mysql -uroot -pNari_jysp3.0 -e "show databases;" | grep -v mysql | grep -v information_schema | grep -v performance_schema | grep -v Database| grep -v test`"\n  fi\n  echo -e "\\e[31m######==========$1==========######\\e[0m"\n  echo ""\n}\n\n\n\n\n################################################\n# 2、MariaDB安装脚本\n################################################\n# cd /home/jysp/rpm-install/MariaDB-10.3\n# 安装rpm包依赖\n# 创建 /var/log/mariadb 目录\n# 拷贝 my.cnf 到 /etc/ 下\n# 执行交互命令\n#\n#################################################\nfunction mysql-install(){\n  cd $homepwd/rpm-install/MariaDB-10.3\n  sh -xc "yum localinstall -y --nogpgcheck boost-program-options-1.53.0-28.el7.x86_64.rpm galera-25.3.37-1.el7.centos.x86_64.rpm MariaDB-client-10.3.36-1.el7.centos.x86_64.rpm MariaDB-common-10.3.36-1.el7.centos.x86_64.rpm MariaDB-compat-10.3.36-1.el7.centos.x86_64.rpm MariaDB-server-10.3.36-1.el7.centos.x86_64.rpm expect-5.45-14.el7_1.x86_64.rpm tcl-8.5.13-8.el7.x86_64.rpm"\n  if [ "$?" != 0 ]\n    then\n      echo -e "\\e[31m MariaDB 安装失败，请检查！！！\\e[0m"\n      exit 0\n  fi\n  sh -xc "mkdir /var/log/mariadb"\n  sh -xc "chown mysql:mysql /var/log/mariadb"\n  sh -xc "systemctl enable mariadb.service"\n  cp -f my.cnf /etc/\n  sh -xc "systemctl start mariadb.service"\n  sleep 3\n  mysqpid=`cat /var/lib/mysql/mariadb.pid`\n  if [ X"$mysqpid" == "X" ]\n    then\n      echo -e "\\e[31m mariadb 未运行，请排查！！！\\e[0m"\n      exit 0\n  fi\n\n/usr/bin/expect <<-EOF\nspawn mysql\nexpect "MariaDB \\[(none)\\]>"\nsend "update mysql.user set password=password(\'Nari_jysp3.0\') where user=\'root\';\\r"\nsend "GRANT ALL PRIVILEGES ON *.* TO \'root\'@\'%\' IDENTIFIED BY \'Nari_jysp3.0\' WITH GRANT OPTION;\\r"\nsend "update mysql.user set plugin = \'mysql_native_password\' where User=\'root\';\\r"\nsend "FLUSH PRIVILEGES;\\r"\nsend "create database nacos DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\\r"\nsend "create database nari_jysp DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\\r"\nsend "create database ycxs1000 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\\r"\nsend "FLUSH PRIVILEGES;\\r"\nsend "quit;\\r"\nexpect eof\nEOF\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m MariaDB设置失败，请检查！！！ \\e[0m"\n    exit 0\n  fi\n}\n\n################################################\n# 3、RabbitMQ安装脚本\n################################################\n# cd /home/jysp/rpm-install/RabbitMQ\n# 启动\n# 配置rabbitmq:插件、虚拟机、用户\n# 配置用户权限\n#################################################\nfunction rabbitmq-install(){\n  cd $homepwd/rpm-install/RabbitMQ\n  sh -xc "yum localinstall -y --nogpgcheck erlang-23.3.4.4-1.el7.x86_64.rpm rabbitmq-server-3.7.8-1.el7.noarch.rpm socat-1.7.3.2-2.el7.x86_64.rpm"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m rabbitmq 安装失败，请检查！！！\\e[0m"\n  exit 0\n  fi\n  sh -xc "systemctl start rabbitmq-server.service"\n  rastatus=`systemctl status rabbitmq-server.service | grep "active (running) "`\n  if [ "X$rastatus" == "X" ]\n  then\n     echo -e "\\e[31m rabbitmq.servert 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable rabbitmq-server.service"\n  rabbitset=("rabbitmq-plugins enable rabbitmq_management" "rabbitmqctl add_vhost jysp_vhost" "rabbitmqctl add_user jysp Nari_jysp3.0" "rabbitmqctl set_user_tags jysp administrator")\n  for((i=0;i<4;i++))\n  do\n    ${rabbitset[i]}\n    if [ "$?" != 0 ];then\n      echo -e "\\e[31m ${rabbitset[i]} 设置失败，请检查！！！ \\e[0m"\n      exit 0\n    fi\n    sleep 2\n  done\n  rabbitmqctl set_permissions -p "jysp_vhost" jysp ".*" ".*" ".*"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n    exit 0\n  fi\n}\n\n################################################\n# 4、redis安装脚本\n################################################\n# cd /home/jysp/rpm-install/Redis\n# 添加redis用户组\n# 添加redis用户:\n#    redis 用户名\n#    -g redis 用户组\n#    -d /var/lib/redis 用户家目录\n#    -s nologin 不允许登录\n# /etc/redis\n# /var/log/redis\n#\n#################################################\nfunction redis-install(){\n  cd $homepwd/rpm-install/Redis\n  sh -xc "groupadd redis"\n  sh -xc "useradd -g redis -d /var/lib/redis -s /usr/sbin/nologin redis"\n  mkdir /etc/redis\n  mkdir /var/log/redis\n  chown redis:redis /var/log/redis\n  tar -zxvf redis.tar.gz\n  mv -f bin/* /usr/bin/\n  cp redis.conf /etc/redis/redis.conf\n  cp redis-server.service /lib/systemd/system/\n  sh -xc "systemctl daemon-reload"\n  sh -xc "systemctl start redis-server.service"\n  restatus=`systemctl status redis-server.service | grep "active (running) "`\n  if [ "X$restatus" == "X" ]\n  then\n     echo -e "\\e[31m redis.service 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable redis-server.service"\n}\n\n\n################################################\n# 5、influxdb安装脚本\n################################################\n#\n#################################################\nfunction influxdb-install(){\n  cd $homepwd/rpm-install/InfluxDB\n  sh -xc "yum localinstall -y --nogpgcheck influxdb-1.8.3.x86_64.rpm"\n  sh -xc "systemctl start influxdb"\n  instatus=`systemctl status influxdb.service | grep "active (running) "`\n  if [ "X$instatus" == "X" ]\n  then\n     echo -e "\\e[31m influxdb.service 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable influxdb.service"\n  sleep 5\n  influx -execute "create user "root" with password \'Nari_jysp3.0\' with all privileges;"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n  exit 0\n  fi\n  influx -execute "create database ycxs1000;"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n  exit 0\n  fi\n  influx -execute "CREATE RETENTION POLICY "rp_rt_his_real" ON "ycxs1000" DURATION 370d REPLICATION 1;"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n  exit 0\n  fi\n}\n\n\n################################################\n# 6、vsftpd安装脚本\n################################################\n# cd /home/jysp/rpm-install/VSFTPD\n# 安装 vsftpd-3.0.2-29.el7_9.x86_64.rpm\n# 解压 vsftpd.tar.gz\n# 删除 /etc/vsftpd 目录\n# 移动 vsftpd 目录到 /etc/\n# 创建 /home/jysp/ftps\n# 创建 /var/log/vsftpd\n#\n#################################################\nfunction vsftpd-install()\n{\n cd $homepwd/rpm-install/VSFTPD\n sh -xc "yum localinstall -y --nogpgcheck vsftpd-3.0.2-29.el7_9.x86_64.rpm"\n tar -zxvf vsftpd.tar.gz >> /dev/null\n sh -xc "rm -rf /etc/vsftpd"\n sh -xc "mv vsftpd /etc/"\n sh -xc "mkdir /home/jysp/ftps"\n sh -xc "chown jysp:jysp /home/jysp/ftps"\n sh -xc "chmod 777 /home/jysp/ftps"\n sh -xc "mkdir /var/log/vsftpd"\n ip=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|grep -v 192.168.122.1|awk \'{print $2}\'|tr -d "addr:")\n sed -i \'s/\\(pasv_address=\\).*/\\1\'"$ip"\'/g\' /etc/vsftpd/vsftpd.conf\n sh -xc "systemctl restart vsftpd.service"\n vsstatus=`systemctl status vsftpd.service | grep "active (running) "`\n if [ "X$vsstatus" == "X" ]\n then\n     echo -e "\\e[31m vsftpd.service 未运行，请排查！！！\\e[0m"\n\t exit 0\n fi\n sh -xc "systemctl enable vsftpd.service"\n}\n\n\n################################################\n# 7、nginx安装脚本\n################################################\n# cd /home/jysp/rpm-install/Nginx\n# 安装 nginx-1.14.2-1.el7_4.ngx.x86_64.rpm\n# 解压 ssl文件\n# 移动 ssl文件到 /etc/nginx 目录下\n# 拷贝 nginx.conf 文件到 /etc/nginx 目录下\n#\n#################################################\nfunction nginx-install(){\n  cd $homepwd/rpm-install/Nginx\n  sh -xc "yum localinstall -y --nogpgcheck nginx-1.14.2-1.el7_4.ngx.x86_64.rpm"\n  tar -zxvf ssl.tar.gz >> /dev/null\n  mv -f ssl /etc/nginx\n  cp -rf nginx.conf /etc/nginx\n  # sh -xc "groupadd www-data"\n  # sh -xc "useradd -d /var/www -s /usr/sbin/nologin -g www-data www-data"\n  sh -xc "systemctl restart nginx.service"\n  ngstatus=`systemctl status nginx.service | grep "active (running) "`\n  if [ "X$ngstatus" == "X" ]\n  then\n     echo -e "\\e[31m nginx.service 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable nginx.service"\n}\n\n\n\n################################################\n# setTable：\n################################################\n# \\e[:颜色开始\n# \\e[0m:颜色结束\n# 31m:红色\n#################################################\nfunction setTable(){\n  # 使用 column 按照“#”进行对齐 column -s "#" -t\n  # 利用awk命令替换掉以 +开头的行，并替换空格为 -\n  echo -e "\\e[31m"$1"\\e[0m"|column -s "#" -t|awk \'{if($0 ~ /^+/){gsub(" ","-",$0);print $0}else{print $0}}\'\n}\n\nfunction setTableRow(){\n  # 所有参数\n  local value=$*\n  # 获取参数个个数\n  local varCount=$#\n  # 计算表格边缘长度\n  local num=$(( $varCount * 2 + 1 ))\n\n  split=$(seq -s \'+#\' $num | sed \'s/[0-9]//g\')+\n  if [ -z $table ]\n    then\n      # 上边框\n      table="\\n${split}\\n"\n      # 内容框\n      local tableRow\n      for k in "$@"\n        do\n          tableRow=$tableRow"#$k#|"\n        done\n      table="${table}|$tableRow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n      # 上一个边框记录\n      lastTabCount=$varCount\n    else\n      #  判断是否需要增加边框\n      if [ $varCount -gt $lastTabCount ]\n        then\n          # 增加边框\n          local difCount=$(( $varCount - $lastTabCount ))\n          local difNum=$(( $difCount * 2 + 1 ))\n          difSplit=$(seq -s \'+#\' $difNum | sed \'s/[0-9]//g\')+\n          # 删除原有后缀，增加长度\n          table="${table%+\\\\n}"\n          table="${table}${difSplit}\\n"\n      fi\n      # 内容框\n      local tableRow\n      for k in "$@"\n        do\n          tableRow=$tableRow"#$k#|"\n        done\n      table="${table}|$tableRow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n  fi\n}\n\n\n\n\n\n################################################\n# 安装提示：\n################################################\n# \\e[:颜色开始\n# \\e[0m:颜色结束\n# 31m:红色\n#################################################\necho -e "\\e[31m#######################开始安装######################\\e[0m"\necho -e "\\e[31m######\\e[0m    该脚本程序只适用于规定的镜像，       \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m    如果用于其他，请自行修改适配，       \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m    且该脚本安装的软件已下载固定，       \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m    如需修改，请自行修改或手动安装，     \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m   ISO:CentOS-7-x86_64-DVD-2009.iso      \\e[31m######\\e[0m"\necho -e "\\e[31m#####################################################\\e[0m"\necho -e "\\n"\necho -e "\\e[31m#######################版本说明######################\\e[0m"\n\n################################################\n# 表格方法：生成原理解析\n################################################\n# 1、生成如下字符序列,作为表格边界\n# \\n+#+#+#+#+\\n 如果是两列就生成4个占位符\n#\n# 2、字段行，已 "|#内容#|" 的格式来预处理\n# \\n+#+#+#+#+\\n|#软件#|#版本#|\\n\n#\n# 3、使用 column 按照“#”进行对齐 column -s "#" -t\n# +  +     +  +     +\n# |  软件  |  版本  |\n#\n# 4、利用awk命令替换掉以 + 开头的行，并替换空格为 -\n# awk \'{if($0 ~ /^+/){gsub(" ","-",$0);print $0}else{print $0}}\'\n# +--+-----+--+-----+\n# |  软件  |  版本  |\n#################################################\n\ntable=""\nsetTableRow "软件" "版本"\nsetTableRow "MySQL版本" "MariaDB-10.3.36" "版本"\nsetTableRow "erlang版本" "erlang-23.3.4.4"\nsetTableRow "RabbitMQ版本" "RabbitMQ-3.7.8"\nsetTableRow "Redis版本" "Redis-5.0.3"\nsetTableRow "InfluxDB版本版本" "InfluxDB-1.8.3"\nsetTableRow "VSFTPD版本" "VSFTPD-3.0.2"\nsetTableRow "Nginx版本" "Nginx-1.14.2"\nsetTable ${table}\n\n#echo -e "1：安装全部组件\\n2：安装Mariadb\\n3: 安装Rabbitmq\\n4: 安装redis\\n5: 安装influxdb\\n6: 安装vsftpd"\necho -e "\\e[31m#########################安装选择####################\\e[0m"\ntable=""\nsetTableRow "序号" "说明"\nsetTableRow "1" "安装全部组件"\nsetTableRow "2" "安装MariaDB"\nsetTableRow "3" "安装RabbitMQ"\nsetTableRow "4" "安装Redis"\nsetTableRow "5" "安装InfluxDB"\nsetTableRow "6" "安装VSFTPD"\nsetTableRow "7" "安装Nginx"\nsetTable ${table}\n\n\n\n################################################\n# 安装菜单显示：\n################################################\n# while死循环，选择数字后跳出循环\n#################################################\nwhile true\ndo\n  read -p "请输入序号[1-7],选择需安装的组件序号:" serv\n  if [ "$serv" == "1" \\\n    -o "$serv" == "2" \\\n    -o "$serv" == "3" \\\n    -o "$serv" == "4" \\\n    -o "$serv" == "5" \\\n    -o "$serv" == "6" \\\n    -o "$serv" == "7" \\\n    -o "$serv" == "8" \\\n    -o "$serv" == "9" ]\n    then\n        break\n    fi\n  echo -e "\\e[31m请正确输入序号[1-7]！！！\\e[0m"\ndone\n\n################################################\n# 选项判断：\n################################################\n# 1、安装全部\n# 2、安装MariaDB\n# 3、安装Rabbitmq\n# 4、安装Redis\n# 5、安装influxdb\n# 6、安装vsftpd\n#################################################\ncase $serv in\n  1)\n    # 校验文件类型\n    dir=(mariadb rabbitmq redis influxdb vsftpd nginx)\n    for((num=0;num<${#dir[*]};num++))\n    do\n      filepwd-check ${dir[num]}\n    done\n    echo -e "\\e[31m######==========END==========######\\e[0m"\n\n    # 安装\n    mysql-install\n    rabbitmq-install\n    redis-install\n    influxdb-install\n    vsftpd-install\n    nginx-install\n\n    # 检验服务状态\n    ser=(mariadb.service rabbitmq-server.service redis-server.service influxdb.service vsftpd.service nginx.service)\n        for((i=0;i<${#ser[*]};i++))\n        do\n          check_server ${ser[i]}\n        done\n    ;;\n  2)\n    filepwd-check mariadb\n    echo -e "\\e[31m######==========END==========######\\e[0m"\n    mysql-install\n    check_server mariadb.service\n    ;;\n  3)\n    filepwd-check rabbitmq\n    echo -e "\\e[31m######==========END==========######\\e[0m"\n    rabbitmq-install\n    check_server rabbitmq-server.service\n    ;;\n  4)\n    #  安装前检查\n    filepwd-check redis\n    # 提示符\n    echo -e "\\e[31m######==========END==========######\\e[0m"\n    # 执行安装\n    redis-install\n    # 检测是否启动\n    check_server redis-server.service\n    ;;\n  5)\n    filepwd-check influxdb\n    echo -e "\\e[31m######==========END==========######\\e[0m"\n    influxdb-install\n    check_server influxdb.service\n    ;;\n  6)\n    filepwd-check vsftpd\n    echo -e "\\e[31m######==========END==========######\\e[0m"\n    vsftpd-install\n    check_server vsftpd.service\n    ;;\n  7)\n    filepwd-check nginx\n    echo -e "\\e[31m######==========END==========######\\e[0m"\n    nginx-install\n    check_server nginx.service\n    ;;\nesac\n',normalizedContent:'# 实战脚本示例01\n\n> centos7.9 软件安装脚本\n> \n> nginx\n> \n> redis\n> \n> rabbitmq\n> \n> 等等\n\n#!/bin/bash\n\n################################################\n# 执行用户判断：\n################################################\n# 只允许使用root用户执行\n# 判断当前用户是否为root\n#################################################\nuser=$(env | grep user | cut -d "=" -f 2)\nif [ "$user" != "root" ]\nthen\n\techo "请使用root用户执行该脚本。切换root命令：su - root"\n\texit 0\nfi\nsleep 1\n\nhomepwd=/home/jysp\n\n\n\n################################################\n# 安装环境校验：\n################################################\n# 判断jysp用户是否存在\n# 判断jysp文件夹是否存在\n# 进入对应的安装文件夹内\n#################################################\nfunction filepwd-check(){\n  id \'jysp\' &>/dev/null\n  if [ ! $? -eq 0 ]\n    then\n      echo "用户\'jysp\'不存在。"\n       exit 1\n  fi\n  if [ ! -d "$homepwd" ]\n    then\n      echo "jysp文件夹不存在"\n      exit 1\n  fi\n\n  mariadbfile=(boost-program-options-1.53.0-28.el7.x86_64.rpm galera-25.3.37-1.el7.centos.x86_64.rpm mariadb-client-10.3.36-1.el7.centos.x86_64.rpm mariadb-common-10.3.36-1.el7.centos.x86_64.rpm mariadb-compat-10.3.36-1.el7.centos.x86_64.rpm mariadb-server-10.3.36-1.el7.centos.x86_64.rpm expect-5.45-14.el7_1.x86_64.rpm my.cnf tcl-8.5.13-8.el7.x86_64.rpm)\n  rabbitfile=(erlang-23.3.4.4-1.el7.x86_64.rpm rabbitmq-server-3.7.8-1.el7.noarch.rpm)\n  redisfile=(redis.tar.gz redis.conf redis-server.service)\n  influxfile=(influxdb-1.8.3.x86_64.rpm)\n  vsftpfile=(vsftpd-3.0.2-29.el7_9.x86_64.rpm vsftpd.tar.gz)\n  nginxfile=(ssl.tar.gz nginx.conf nginx-1.14.2-1.el7_4.ngx.x86_64.rpm)\n\n  # case in 校验\n  case $1 in\n    mariadb)\n     ds=("${mariadbfile[*]}")\n     cd $homepwd/rpm-install/mariadb-10.3\n     echo -e "\\e[31m######==========mariadb-10.3==========######\\e[0m"\n     ;;\n    rabbitmq)\n     ds=("${rabbitfile[*]}")\n     cd $homepwd/rpm-install/rabbitmq\n     echo -e "\\e[31m######==========rabbitmq==========######\\e[0m"\n     ;;\n    redis)\n      ds=("${redisfile[*]}")\n      cd $homepwd/rpm-install/redis\n      echo -e "\\e[31m######==========redis==========######\\e[0m"\n      ;;\n    influxdb)\n     ds=("${influxfile[*]}")\n     cd $homepwd/rpm-install/influxdb\n     echo -e "\\e[31m######==========influxdb==========######\\e[0m"\n     ;;\n    vsftpd)\n     ds=("${vsftpfile[*]}")\n     cd $homepwd/rpm-install/vsftpd\n     echo -e "\\e[31m######==========vsftpd==========######\\e[0m"\n         ;;\n    nginx)\n      ds=("${nginxfile[*]}")\n      cd $homepwd/rpm-install/nginx\n      echo -e "\\e[31m######==========nginx==========######\\e[0m"\n  esac\n\n  # 循环输出文件名称到屏幕\n  for value in ${ds[*]}\n    do\n      if [ -f "$value" ];then\n        echo -e "\\e[32m    $value ---ok\\e[0m"\n        sleep 1\n      else\n        echo -e "\\e[31m    $value ---no\\e[0m"\n        exit 0\n      fi\n    done\n}\n\n################################################\n# 检测服务是否运行\n################################################\n#\n#################################################\nfunction check_server(){\n  echo ""\n  echo -e "\\e[31m######==========$1==========######\\e[0m"\n  echo -e "\\e[31m$1::\\e[0m `systemctl show $1 --property activestate | awk -f "=" \'{print $2}\'`"\n  if [ "$1" == "rabbitmq-server.service" ]\n    then\n      echo -e "\\e[31muser/role:\\e[0m `rabbitmqctl list_users | grep jysp`"\n      echo -e "\\e[31mvhosts:\\e[0m `rabbitmqctl list_vhosts | grep jysp`"\n  elif [ "$1" == "influxdb.service" ]\n    then\n      echo -e "\\e[31mdata:\\e[0m `influx -execute "show databases;" | grep ycxs`"\n      echo -e "\\e[31mstrategy:\\n\\e[0m `influx -execute "show retention policies on ycxs1000;"`"\n  elif [ "$1" == "mariadb.service" ]\n    then\n      echo -e "\\e[31mdatabase:\\n\\e[0m `mysql -uroot -pnari_jysp3.0 -e "show databases;" | grep -v mysql | grep -v information_schema | grep -v performance_schema | grep -v database| grep -v test`"\n  fi\n  echo -e "\\e[31m######==========$1==========######\\e[0m"\n  echo ""\n}\n\n\n\n\n################################################\n# 2、mariadb安装脚本\n################################################\n# cd /home/jysp/rpm-install/mariadb-10.3\n# 安装rpm包依赖\n# 创建 /var/log/mariadb 目录\n# 拷贝 my.cnf 到 /etc/ 下\n# 执行交互命令\n#\n#################################################\nfunction mysql-install(){\n  cd $homepwd/rpm-install/mariadb-10.3\n  sh -xc "yum localinstall -y --nogpgcheck boost-program-options-1.53.0-28.el7.x86_64.rpm galera-25.3.37-1.el7.centos.x86_64.rpm mariadb-client-10.3.36-1.el7.centos.x86_64.rpm mariadb-common-10.3.36-1.el7.centos.x86_64.rpm mariadb-compat-10.3.36-1.el7.centos.x86_64.rpm mariadb-server-10.3.36-1.el7.centos.x86_64.rpm expect-5.45-14.el7_1.x86_64.rpm tcl-8.5.13-8.el7.x86_64.rpm"\n  if [ "$?" != 0 ]\n    then\n      echo -e "\\e[31m mariadb 安装失败，请检查！！！\\e[0m"\n      exit 0\n  fi\n  sh -xc "mkdir /var/log/mariadb"\n  sh -xc "chown mysql:mysql /var/log/mariadb"\n  sh -xc "systemctl enable mariadb.service"\n  cp -f my.cnf /etc/\n  sh -xc "systemctl start mariadb.service"\n  sleep 3\n  mysqpid=`cat /var/lib/mysql/mariadb.pid`\n  if [ x"$mysqpid" == "x" ]\n    then\n      echo -e "\\e[31m mariadb 未运行，请排查！！！\\e[0m"\n      exit 0\n  fi\n\n/usr/bin/expect <<-eof\nspawn mysql\nexpect "mariadb \\[(none)\\]>"\nsend "update mysql.user set password=password(\'nari_jysp3.0\') where user=\'root\';\\r"\nsend "grant all privileges on *.* to \'root\'@\'%\' identified by \'nari_jysp3.0\' with grant option;\\r"\nsend "update mysql.user set plugin = \'mysql_native_password\' where user=\'root\';\\r"\nsend "flush privileges;\\r"\nsend "create database nacos default character set utf8 collate utf8_general_ci;\\r"\nsend "create database nari_jysp default character set utf8 collate utf8_general_ci;\\r"\nsend "create database ycxs1000 default character set utf8 collate utf8_general_ci;\\r"\nsend "flush privileges;\\r"\nsend "quit;\\r"\nexpect eof\neof\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m mariadb设置失败，请检查！！！ \\e[0m"\n    exit 0\n  fi\n}\n\n################################################\n# 3、rabbitmq安装脚本\n################################################\n# cd /home/jysp/rpm-install/rabbitmq\n# 启动\n# 配置rabbitmq:插件、虚拟机、用户\n# 配置用户权限\n#################################################\nfunction rabbitmq-install(){\n  cd $homepwd/rpm-install/rabbitmq\n  sh -xc "yum localinstall -y --nogpgcheck erlang-23.3.4.4-1.el7.x86_64.rpm rabbitmq-server-3.7.8-1.el7.noarch.rpm socat-1.7.3.2-2.el7.x86_64.rpm"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m rabbitmq 安装失败，请检查！！！\\e[0m"\n  exit 0\n  fi\n  sh -xc "systemctl start rabbitmq-server.service"\n  rastatus=`systemctl status rabbitmq-server.service | grep "active (running) "`\n  if [ "x$rastatus" == "x" ]\n  then\n     echo -e "\\e[31m rabbitmq.servert 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable rabbitmq-server.service"\n  rabbitset=("rabbitmq-plugins enable rabbitmq_management" "rabbitmqctl add_vhost jysp_vhost" "rabbitmqctl add_user jysp nari_jysp3.0" "rabbitmqctl set_user_tags jysp administrator")\n  for((i=0;i<4;i++))\n  do\n    ${rabbitset[i]}\n    if [ "$?" != 0 ];then\n      echo -e "\\e[31m ${rabbitset[i]} 设置失败，请检查！！！ \\e[0m"\n      exit 0\n    fi\n    sleep 2\n  done\n  rabbitmqctl set_permissions -p "jysp_vhost" jysp ".*" ".*" ".*"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n    exit 0\n  fi\n}\n\n################################################\n# 4、redis安装脚本\n################################################\n# cd /home/jysp/rpm-install/redis\n# 添加redis用户组\n# 添加redis用户:\n#    redis 用户名\n#    -g redis 用户组\n#    -d /var/lib/redis 用户家目录\n#    -s nologin 不允许登录\n# /etc/redis\n# /var/log/redis\n#\n#################################################\nfunction redis-install(){\n  cd $homepwd/rpm-install/redis\n  sh -xc "groupadd redis"\n  sh -xc "useradd -g redis -d /var/lib/redis -s /usr/sbin/nologin redis"\n  mkdir /etc/redis\n  mkdir /var/log/redis\n  chown redis:redis /var/log/redis\n  tar -zxvf redis.tar.gz\n  mv -f bin/* /usr/bin/\n  cp redis.conf /etc/redis/redis.conf\n  cp redis-server.service /lib/systemd/system/\n  sh -xc "systemctl daemon-reload"\n  sh -xc "systemctl start redis-server.service"\n  restatus=`systemctl status redis-server.service | grep "active (running) "`\n  if [ "x$restatus" == "x" ]\n  then\n     echo -e "\\e[31m redis.service 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable redis-server.service"\n}\n\n\n################################################\n# 5、influxdb安装脚本\n################################################\n#\n#################################################\nfunction influxdb-install(){\n  cd $homepwd/rpm-install/influxdb\n  sh -xc "yum localinstall -y --nogpgcheck influxdb-1.8.3.x86_64.rpm"\n  sh -xc "systemctl start influxdb"\n  instatus=`systemctl status influxdb.service | grep "active (running) "`\n  if [ "x$instatus" == "x" ]\n  then\n     echo -e "\\e[31m influxdb.service 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable influxdb.service"\n  sleep 5\n  influx -execute "create user "root" with password \'nari_jysp3.0\' with all privileges;"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n  exit 0\n  fi\n  influx -execute "create database ycxs1000;"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n  exit 0\n  fi\n  influx -execute "create retention policy "rp_rt_his_real" on "ycxs1000" duration 370d replication 1;"\n  if [ "$?" != 0 ];then\n    echo -e "\\e[31m ${influxset[i]} 设置失败，请检查！！！ \\e[0m"\n  exit 0\n  fi\n}\n\n\n################################################\n# 6、vsftpd安装脚本\n################################################\n# cd /home/jysp/rpm-install/vsftpd\n# 安装 vsftpd-3.0.2-29.el7_9.x86_64.rpm\n# 解压 vsftpd.tar.gz\n# 删除 /etc/vsftpd 目录\n# 移动 vsftpd 目录到 /etc/\n# 创建 /home/jysp/ftps\n# 创建 /var/log/vsftpd\n#\n#################################################\nfunction vsftpd-install()\n{\n cd $homepwd/rpm-install/vsftpd\n sh -xc "yum localinstall -y --nogpgcheck vsftpd-3.0.2-29.el7_9.x86_64.rpm"\n tar -zxvf vsftpd.tar.gz >> /dev/null\n sh -xc "rm -rf /etc/vsftpd"\n sh -xc "mv vsftpd /etc/"\n sh -xc "mkdir /home/jysp/ftps"\n sh -xc "chown jysp:jysp /home/jysp/ftps"\n sh -xc "chmod 777 /home/jysp/ftps"\n sh -xc "mkdir /var/log/vsftpd"\n ip=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|grep -v 192.168.122.1|awk \'{print $2}\'|tr -d "addr:")\n sed -i \'s/\\(pasv_address=\\).*/\\1\'"$ip"\'/g\' /etc/vsftpd/vsftpd.conf\n sh -xc "systemctl restart vsftpd.service"\n vsstatus=`systemctl status vsftpd.service | grep "active (running) "`\n if [ "x$vsstatus" == "x" ]\n then\n     echo -e "\\e[31m vsftpd.service 未运行，请排查！！！\\e[0m"\n\t exit 0\n fi\n sh -xc "systemctl enable vsftpd.service"\n}\n\n\n################################################\n# 7、nginx安装脚本\n################################################\n# cd /home/jysp/rpm-install/nginx\n# 安装 nginx-1.14.2-1.el7_4.ngx.x86_64.rpm\n# 解压 ssl文件\n# 移动 ssl文件到 /etc/nginx 目录下\n# 拷贝 nginx.conf 文件到 /etc/nginx 目录下\n#\n#################################################\nfunction nginx-install(){\n  cd $homepwd/rpm-install/nginx\n  sh -xc "yum localinstall -y --nogpgcheck nginx-1.14.2-1.el7_4.ngx.x86_64.rpm"\n  tar -zxvf ssl.tar.gz >> /dev/null\n  mv -f ssl /etc/nginx\n  cp -rf nginx.conf /etc/nginx\n  # sh -xc "groupadd www-data"\n  # sh -xc "useradd -d /var/www -s /usr/sbin/nologin -g www-data www-data"\n  sh -xc "systemctl restart nginx.service"\n  ngstatus=`systemctl status nginx.service | grep "active (running) "`\n  if [ "x$ngstatus" == "x" ]\n  then\n     echo -e "\\e[31m nginx.service 未运行，请排查！！！\\e[0m"\n   exit 0\n  fi\n  sh -xc "systemctl enable nginx.service"\n}\n\n\n\n################################################\n# settable：\n################################################\n# \\e[:颜色开始\n# \\e[0m:颜色结束\n# 31m:红色\n#################################################\nfunction settable(){\n  # 使用 column 按照“#”进行对齐 column -s "#" -t\n  # 利用awk命令替换掉以 +开头的行，并替换空格为 -\n  echo -e "\\e[31m"$1"\\e[0m"|column -s "#" -t|awk \'{if($0 ~ /^+/){gsub(" ","-",$0);print $0}else{print $0}}\'\n}\n\nfunction settablerow(){\n  # 所有参数\n  local value=$*\n  # 获取参数个个数\n  local varcount=$#\n  # 计算表格边缘长度\n  local num=$(( $varcount * 2 + 1 ))\n\n  split=$(seq -s \'+#\' $num | sed \'s/[0-9]//g\')+\n  if [ -z $table ]\n    then\n      # 上边框\n      table="\\n${split}\\n"\n      # 内容框\n      local tablerow\n      for k in "$@"\n        do\n          tablerow=$tablerow"#$k#|"\n        done\n      table="${table}|$tablerow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n      # 上一个边框记录\n      lasttabcount=$varcount\n    else\n      #  判断是否需要增加边框\n      if [ $varcount -gt $lasttabcount ]\n        then\n          # 增加边框\n          local difcount=$(( $varcount - $lasttabcount ))\n          local difnum=$(( $difcount * 2 + 1 ))\n          difsplit=$(seq -s \'+#\' $difnum | sed \'s/[0-9]//g\')+\n          # 删除原有后缀，增加长度\n          table="${table%+\\\\n}"\n          table="${table}${difsplit}\\n"\n      fi\n      # 内容框\n      local tablerow\n      for k in "$@"\n        do\n          tablerow=$tablerow"#$k#|"\n        done\n      table="${table}|$tablerow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n  fi\n}\n\n\n\n\n\n################################################\n# 安装提示：\n################################################\n# \\e[:颜色开始\n# \\e[0m:颜色结束\n# 31m:红色\n#################################################\necho -e "\\e[31m#######################开始安装######################\\e[0m"\necho -e "\\e[31m######\\e[0m    该脚本程序只适用于规定的镜像，       \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m    如果用于其他，请自行修改适配，       \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m    且该脚本安装的软件已下载固定，       \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m    如需修改，请自行修改或手动安装，     \\e[31m######\\e[0m"\necho -e "\\e[31m######\\e[0m   iso:centos-7-x86_64-dvd-2009.iso      \\e[31m######\\e[0m"\necho -e "\\e[31m#####################################################\\e[0m"\necho -e "\\n"\necho -e "\\e[31m#######################版本说明######################\\e[0m"\n\n################################################\n# 表格方法：生成原理解析\n################################################\n# 1、生成如下字符序列,作为表格边界\n# \\n+#+#+#+#+\\n 如果是两列就生成4个占位符\n#\n# 2、字段行，已 "|#内容#|" 的格式来预处理\n# \\n+#+#+#+#+\\n|#软件#|#版本#|\\n\n#\n# 3、使用 column 按照“#”进行对齐 column -s "#" -t\n# +  +     +  +     +\n# |  软件  |  版本  |\n#\n# 4、利用awk命令替换掉以 + 开头的行，并替换空格为 -\n# awk \'{if($0 ~ /^+/){gsub(" ","-",$0);print $0}else{print $0}}\'\n# +--+-----+--+-----+\n# |  软件  |  版本  |\n#################################################\n\ntable=""\nsettablerow "软件" "版本"\nsettablerow "mysql版本" "mariadb-10.3.36" "版本"\nsettablerow "erlang版本" "erlang-23.3.4.4"\nsettablerow "rabbitmq版本" "rabbitmq-3.7.8"\nsettablerow "redis版本" "redis-5.0.3"\nsettablerow "influxdb版本版本" "influxdb-1.8.3"\nsettablerow "vsftpd版本" "vsftpd-3.0.2"\nsettablerow "nginx版本" "nginx-1.14.2"\nsettable ${table}\n\n#echo -e "1：安装全部组件\\n2：安装mariadb\\n3: 安装rabbitmq\\n4: 安装redis\\n5: 安装influxdb\\n6: 安装vsftpd"\necho -e "\\e[31m#########################安装选择####################\\e[0m"\ntable=""\nsettablerow "序号" "说明"\nsettablerow "1" "安装全部组件"\nsettablerow "2" "安装mariadb"\nsettablerow "3" "安装rabbitmq"\nsettablerow "4" "安装redis"\nsettablerow "5" "安装influxdb"\nsettablerow "6" "安装vsftpd"\nsettablerow "7" "安装nginx"\nsettable ${table}\n\n\n\n################################################\n# 安装菜单显示：\n################################################\n# while死循环，选择数字后跳出循环\n#################################################\nwhile true\ndo\n  read -p "请输入序号[1-7],选择需安装的组件序号:" serv\n  if [ "$serv" == "1" \\\n    -o "$serv" == "2" \\\n    -o "$serv" == "3" \\\n    -o "$serv" == "4" \\\n    -o "$serv" == "5" \\\n    -o "$serv" == "6" \\\n    -o "$serv" == "7" \\\n    -o "$serv" == "8" \\\n    -o "$serv" == "9" ]\n    then\n        break\n    fi\n  echo -e "\\e[31m请正确输入序号[1-7]！！！\\e[0m"\ndone\n\n################################################\n# 选项判断：\n################################################\n# 1、安装全部\n# 2、安装mariadb\n# 3、安装rabbitmq\n# 4、安装redis\n# 5、安装influxdb\n# 6、安装vsftpd\n#################################################\ncase $serv in\n  1)\n    # 校验文件类型\n    dir=(mariadb rabbitmq redis influxdb vsftpd nginx)\n    for((num=0;num<${#dir[*]};num++))\n    do\n      filepwd-check ${dir[num]}\n    done\n    echo -e "\\e[31m######==========end==========######\\e[0m"\n\n    # 安装\n    mysql-install\n    rabbitmq-install\n    redis-install\n    influxdb-install\n    vsftpd-install\n    nginx-install\n\n    # 检验服务状态\n    ser=(mariadb.service rabbitmq-server.service redis-server.service influxdb.service vsftpd.service nginx.service)\n        for((i=0;i<${#ser[*]};i++))\n        do\n          check_server ${ser[i]}\n        done\n    ;;\n  2)\n    filepwd-check mariadb\n    echo -e "\\e[31m######==========end==========######\\e[0m"\n    mysql-install\n    check_server mariadb.service\n    ;;\n  3)\n    filepwd-check rabbitmq\n    echo -e "\\e[31m######==========end==========######\\e[0m"\n    rabbitmq-install\n    check_server rabbitmq-server.service\n    ;;\n  4)\n    #  安装前检查\n    filepwd-check redis\n    # 提示符\n    echo -e "\\e[31m######==========end==========######\\e[0m"\n    # 执行安装\n    redis-install\n    # 检测是否启动\n    check_server redis-server.service\n    ;;\n  5)\n    filepwd-check influxdb\n    echo -e "\\e[31m######==========end==========######\\e[0m"\n    influxdb-install\n    check_server influxdb.service\n    ;;\n  6)\n    filepwd-check vsftpd\n    echo -e "\\e[31m######==========end==========######\\e[0m"\n    vsftpd-install\n    check_server vsftpd.service\n    ;;\n  7)\n    filepwd-check nginx\n    echo -e "\\e[31m######==========end==========######\\e[0m"\n    nginx-install\n    check_server nginx.service\n    ;;\nesac\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170369105e4},{title:"实战脚本示例02",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B02.html",relativePath:"zs-use/linux/shell编程/实战脚本示例02.md",key:"v-3cc96e1e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B02.html",lastUpdated:"2024年2月23日星期五凌晨12点17分",lastUpdatedTimestamp:1708618656e3,headersStr:null,content:'# 实战脚本示例02\n\n> 环境变量配置\n\n#!/bin/bash\n\n# workspace\n# 环境变量配置文件\n\n\nuser=$(env | grep USER | cut -d "=" -f 2)\nif [ "$user" != "root" ]\nthen\n\techo "请使用root用户执行该脚本。切换root命令：su - root"\n\texit 0\nfi\n\n\n\n################################################\n# nacos环境变量配置\n################################################\n# 修改 nacos 启动脚本ip\n# -i 修改文件\n# \'s/\\(Dnacos.server.ip=\\).*/\\1\'"$ip"\\"\'/g\'\n# \\(\\)/\\1 引用第一个括弧中的内容\n#################################################\nfunction nacosset(){\n  cd /home/xiaoshaozi/workspace/nacos/bin\n  # ifconfig,过滤出ip\n  ip=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|grep -v 192.168.122.1|awk \'{print $2}\'|tr -d "addr:" |grep "192.168.1.")\n  # 替换nacos启动脚本 ip配置\n  sed -i \'s/\\(Dnacos.server.ip=\\).*/\\1\'"$ip"\\"\'/g\' startup.sh\n}\n\n################################################\n# 开机自启服务\n################################################\n#\n#################################################\nfunction autoset(){\n  cp /home/xiaoshaozi/workspace/xiaoshaozi3_0_daemon.service /etc/systemd/system/\n  sh -xc "systemctl enable xiaoshaozi3_0_daemon.service"\n}\n\n################################################\n# 配置文件ip修改\n################################################\n# /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml\n# /home/xiaoshaozi/workspace/etc/MG_config.ini\n#################################################\nfunction xiaoshaoziip(){\n  ip=`ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk \'{print $2}\'|tr -d "addr:" | grep "192.168.1\\."`\n  sed -i \'s/192.168.1.101/\'"$ip"\'/g\' /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml\n  sed -i \'s/192.168.1.101/\'"$ip"\'/g\' /home/xiaoshaozi/workspace/etc/MG_config.ini\n}\n\n\n\n\n\n\n\n\n################################################\n# x86 workspace jdk 环境变量配置\n################################################\n# 配置\n# JAVA_HOME、JRE_HOME、CLASSPATH、PATH\n# export JAVA_HOME=/home/xiaoshaozi/workspace/jdk_x86\n# export JRE_HOME=/home/xiaoshaozi/workspace/jdk_x86/jre\n# export CLASSPATH=$JAVA_HOME/lib:$CLASSPATH\n# export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n#################################################\nfunction jdk_x86(){\n  echo -e "export JAVA_HOME=/home/xiaoshaozi/workspace/jdk_x86\\nexport \\\nJRE_HOME=/home/xiaoshaozi/workspace/jdk_x86/jre\\nexport \\\nCLASSPATH=\\$JAVA_HOME/lib:\\$CLASSPATH\\nexport \\\nPATH=\\$JAVA_HOME/bin:\\$JRE_HOME/bin:\\$PATH\\n" \\\n  >> /etc/profile\n  source /etc/profile\n}\n\n\n################################################\n# x86 ld动态库配置文件\n################################################\n# 新增配置文件 /etc/ld.so.conf.d/xiaoshaozi.conf\n# /home/xiaoshaozi/workspace/lib64\n# /home/xiaoshaozi/workspace/lib64/AlgoLib\n# /home/xiaoshaozi/workspace/lib64/boost\n# /home/xiaoshaozi/workspace/lib64/cuda\n# /home/xiaoshaozi/workspace/lib64/HCAapSDKCom\n# /home/xiaoshaozi/workspace/lib64/HCNetSDKCom\n# /home/xiaoshaozi/workspace/lib64/lib\n# /home/xiaoshaozi/workspace/lib64/librabbitmq\n# /home/xiaoshaozi/workspace/lib64/opencv\n# /home/xiaoshaozi/workspace/lib64/pkgconfig\n# /home/xiaoshaozi/workspace/lib64/playlib\n#################################################\nfunction ld_x86(){\n  sh -xc "touch /etc/ld.so.conf.d/xiaoshaozi.conf"\n  echo -e "/home/xiaoshaozi/workspace/lib64\\n/home/xiaoshaozi/workspace/lib64/AlgoLib\\n/home/xiaoshaozi/workspace/lib64/boost\\n/home/xiaoshaozi/workspace/lib64/cuda\\n/home/xiaoshaozi/workspace/lib64/HCAapSDKCom\\n/home/xiaoshaozi/workspace/lib64/HCNetSDKCom\\n/home/xiaoshaozi/workspace/lib64/lib\\n/home/xiaoshaozi/workspace/lib64/librabbitmq\\n/home/xiaoshaozi/workspace/lib64/opencv\\n/home/xiaoshaozi/workspace/lib64/pkgconfig\\n/home/xiaoshaozi/workspace/lib64/playlib" >> /etc/ld.so.conf.d/xiaoshaozi.conf\n  sh -xc "ldconfig";\n}\n\n################################################\n# x86 打印配置成果\n################################################\n#\n#################################################\nfunction show_x86(){\n  echo -e "\\e[31m######==========JDK==========######\\n\\e[0m"\n  java -version\n\n  echo -e "\\e[31m\\n######==========Nacos==========######\\n\\e[0m"\n  cat /home/xiaoshaozi/workspace/nacos/bin/startup.sh |  grep "Dnacos.server.ip"\n  echo -e "\\e[31m\\n######==========END==========######\\e[0m"\n\n  echo -e "\\e[31m\\n######==========xiaoshaozi3_0_daemon==========######\\n\\e[0m"\n  sh -xc "systemctl status xiaoshaozi3_0_daemon.service"\n  echo -e "\\e[31m\\n######==========END==========######\\e[0m"\n\n  echo -e "\\e[31m\\n######==========xiaoshaoziip==========######\\n\\e[0m"\n  cat /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml | grep "[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}"\n\n\n  echo -e "\\e[31m\\n######==========LD==========######\\n\\e[0m"\n  echo "xiaoshaozi.conf::::"\n  cat /etc/ld.so.conf.d/xiaoshaozi.conf\n}\n\n\n\n################################################\n# aarch64 ld动态库配置文件\n################################################\n# 新增配置文件 /etc/ld.so.conf.d/xiaoshaozi.conf\n# /home/xiaoshaozi/workspace/lib64\n# /home/xiaoshaozi/workspace/lib64/AlgoLib\n# /home/xiaoshaozi/workspace/lib64/boost\n# /home/xiaoshaozi/workspace/lib64/cuda\n# /home/xiaoshaozi/workspace/lib64/HCAapSDKCom\n# /home/xiaoshaozi/workspace/lib64/HCNetSDKCom\n# /home/xiaoshaozi/workspace/lib64/lib\n# /home/xiaoshaozi/workspace/lib64/librabbitmq\n# /home/xiaoshaozi/workspace/lib64/opencv\n# /home/xiaoshaozi/workspace/lib64/pkgconfig\n# /home/xiaoshaozi/workspace/lib64/playlib\n#################################################\nfunction ld_aarch64(){\n sh -xc "exagear" <<EOF\n sh -xc "touch /etc/ld.so.conf.d/xiaoshaozi.conf";\n echo -e "/home/xiaoshaozi/workspace/lib64\\n/home/xiaoshaozi/workspace/lib64/AlgoLib\\n/home/xiaoshaozi/workspace/lib64/boost\\n/home/xiaoshaozi/workspace/lib64/cuda\\n/home/xiaoshaozi/workspace/lib64/HCAapSDKCom\\n/home/xiaoshaozi/workspace/lib64/HCNetSDKCom\\n/home/xiaoshaozi/workspace/lib64/lib\\n/home/xiaoshaozi/workspace/lib64/librabbitmq\\n/home/xiaoshaozi/workspace/lib64/opencv\\n/home/xiaoshaozi/workspace/lib64/pkgconfig\\n/home/xiaoshaozi/workspace/lib64/playlib" >> /etc/ld.so.conf.d/xiaoshaozi.conf;\n sh -xc "ldconfig";\n exit 0;\nEOF\n}\n\n################################################\n# aarch64 打印配置成果\n################################################\n#\n#################################################\nfunction show_aarch64(){\n echo -e "\\e[31m\\n######==========LD==========######\\n\\e[0m"\n echo "xiaoshaozi.conf::::"\n sh -xc "exagear" <<EOF\n cat /etc/ld.so.conf.d/xiaoshaozi.conf;\nEOF\n\n echo -e "\\e[31m\\n######==========xiaoshaozi3_0_daemon==========######\\n\\e[0m"\n sh -xc "systemctl status xiaoshaozi3_0_daemon.service"\n\n echo -e "\\e[31m\\n######==========Nacos==========######\\n\\e[0m"\n cat /home/xiaoshaozi/workspace/nacos/bin/startup.sh | grep "Dnacos.server.ip"\n\n  echo -e "\\e[31m\\n######==========xiaoshaoziip==========######\\n\\e[0m"\n  cat /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml | grep "[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}"\n\n}\n\n\niso=`arch`\ncase $iso in\n  "aarch64")\n    nacosset\n    autoset\n    xiaoshaoziip\n    ld_aarch64\n    show_aarch64\n    ;;\n  "x86_64")\n    jdk_x86\n    nacosset\n    autoset\n    xiaoshaoziip\n    ld_x86\n    show_x86\n    ;;\nesac\n',normalizedContent:'# 实战脚本示例02\n\n> 环境变量配置\n\n#!/bin/bash\n\n# workspace\n# 环境变量配置文件\n\n\nuser=$(env | grep user | cut -d "=" -f 2)\nif [ "$user" != "root" ]\nthen\n\techo "请使用root用户执行该脚本。切换root命令：su - root"\n\texit 0\nfi\n\n\n\n################################################\n# nacos环境变量配置\n################################################\n# 修改 nacos 启动脚本ip\n# -i 修改文件\n# \'s/\\(dnacos.server.ip=\\).*/\\1\'"$ip"\\"\'/g\'\n# \\(\\)/\\1 引用第一个括弧中的内容\n#################################################\nfunction nacosset(){\n  cd /home/xiaoshaozi/workspace/nacos/bin\n  # ifconfig,过滤出ip\n  ip=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|grep -v 192.168.122.1|awk \'{print $2}\'|tr -d "addr:" |grep "192.168.1.")\n  # 替换nacos启动脚本 ip配置\n  sed -i \'s/\\(dnacos.server.ip=\\).*/\\1\'"$ip"\\"\'/g\' startup.sh\n}\n\n################################################\n# 开机自启服务\n################################################\n#\n#################################################\nfunction autoset(){\n  cp /home/xiaoshaozi/workspace/xiaoshaozi3_0_daemon.service /etc/systemd/system/\n  sh -xc "systemctl enable xiaoshaozi3_0_daemon.service"\n}\n\n################################################\n# 配置文件ip修改\n################################################\n# /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml\n# /home/xiaoshaozi/workspace/etc/mg_config.ini\n#################################################\nfunction xiaoshaoziip(){\n  ip=`ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk \'{print $2}\'|tr -d "addr:" | grep "192.168.1\\."`\n  sed -i \'s/192.168.1.101/\'"$ip"\'/g\' /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml\n  sed -i \'s/192.168.1.101/\'"$ip"\'/g\' /home/xiaoshaozi/workspace/etc/mg_config.ini\n}\n\n\n\n\n\n\n\n\n################################################\n# x86 workspace jdk 环境变量配置\n################################################\n# 配置\n# java_home、jre_home、classpath、path\n# export java_home=/home/xiaoshaozi/workspace/jdk_x86\n# export jre_home=/home/xiaoshaozi/workspace/jdk_x86/jre\n# export classpath=$java_home/lib:$classpath\n# export path=$java_home/bin:$jre_home/bin:$path\n#################################################\nfunction jdk_x86(){\n  echo -e "export java_home=/home/xiaoshaozi/workspace/jdk_x86\\nexport \\\njre_home=/home/xiaoshaozi/workspace/jdk_x86/jre\\nexport \\\nclasspath=\\$java_home/lib:\\$classpath\\nexport \\\npath=\\$java_home/bin:\\$jre_home/bin:\\$path\\n" \\\n  >> /etc/profile\n  source /etc/profile\n}\n\n\n################################################\n# x86 ld动态库配置文件\n################################################\n# 新增配置文件 /etc/ld.so.conf.d/xiaoshaozi.conf\n# /home/xiaoshaozi/workspace/lib64\n# /home/xiaoshaozi/workspace/lib64/algolib\n# /home/xiaoshaozi/workspace/lib64/boost\n# /home/xiaoshaozi/workspace/lib64/cuda\n# /home/xiaoshaozi/workspace/lib64/hcaapsdkcom\n# /home/xiaoshaozi/workspace/lib64/hcnetsdkcom\n# /home/xiaoshaozi/workspace/lib64/lib\n# /home/xiaoshaozi/workspace/lib64/librabbitmq\n# /home/xiaoshaozi/workspace/lib64/opencv\n# /home/xiaoshaozi/workspace/lib64/pkgconfig\n# /home/xiaoshaozi/workspace/lib64/playlib\n#################################################\nfunction ld_x86(){\n  sh -xc "touch /etc/ld.so.conf.d/xiaoshaozi.conf"\n  echo -e "/home/xiaoshaozi/workspace/lib64\\n/home/xiaoshaozi/workspace/lib64/algolib\\n/home/xiaoshaozi/workspace/lib64/boost\\n/home/xiaoshaozi/workspace/lib64/cuda\\n/home/xiaoshaozi/workspace/lib64/hcaapsdkcom\\n/home/xiaoshaozi/workspace/lib64/hcnetsdkcom\\n/home/xiaoshaozi/workspace/lib64/lib\\n/home/xiaoshaozi/workspace/lib64/librabbitmq\\n/home/xiaoshaozi/workspace/lib64/opencv\\n/home/xiaoshaozi/workspace/lib64/pkgconfig\\n/home/xiaoshaozi/workspace/lib64/playlib" >> /etc/ld.so.conf.d/xiaoshaozi.conf\n  sh -xc "ldconfig";\n}\n\n################################################\n# x86 打印配置成果\n################################################\n#\n#################################################\nfunction show_x86(){\n  echo -e "\\e[31m######==========jdk==========######\\n\\e[0m"\n  java -version\n\n  echo -e "\\e[31m\\n######==========nacos==========######\\n\\e[0m"\n  cat /home/xiaoshaozi/workspace/nacos/bin/startup.sh |  grep "dnacos.server.ip"\n  echo -e "\\e[31m\\n######==========end==========######\\e[0m"\n\n  echo -e "\\e[31m\\n######==========xiaoshaozi3_0_daemon==========######\\n\\e[0m"\n  sh -xc "systemctl status xiaoshaozi3_0_daemon.service"\n  echo -e "\\e[31m\\n######==========end==========######\\e[0m"\n\n  echo -e "\\e[31m\\n######==========xiaoshaoziip==========######\\n\\e[0m"\n  cat /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml | grep "[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}"\n\n\n  echo -e "\\e[31m\\n######==========ld==========######\\n\\e[0m"\n  echo "xiaoshaozi.conf::::"\n  cat /etc/ld.so.conf.d/xiaoshaozi.conf\n}\n\n\n\n################################################\n# aarch64 ld动态库配置文件\n################################################\n# 新增配置文件 /etc/ld.so.conf.d/xiaoshaozi.conf\n# /home/xiaoshaozi/workspace/lib64\n# /home/xiaoshaozi/workspace/lib64/algolib\n# /home/xiaoshaozi/workspace/lib64/boost\n# /home/xiaoshaozi/workspace/lib64/cuda\n# /home/xiaoshaozi/workspace/lib64/hcaapsdkcom\n# /home/xiaoshaozi/workspace/lib64/hcnetsdkcom\n# /home/xiaoshaozi/workspace/lib64/lib\n# /home/xiaoshaozi/workspace/lib64/librabbitmq\n# /home/xiaoshaozi/workspace/lib64/opencv\n# /home/xiaoshaozi/workspace/lib64/pkgconfig\n# /home/xiaoshaozi/workspace/lib64/playlib\n#################################################\nfunction ld_aarch64(){\n sh -xc "exagear" <<eof\n sh -xc "touch /etc/ld.so.conf.d/xiaoshaozi.conf";\n echo -e "/home/xiaoshaozi/workspace/lib64\\n/home/xiaoshaozi/workspace/lib64/algolib\\n/home/xiaoshaozi/workspace/lib64/boost\\n/home/xiaoshaozi/workspace/lib64/cuda\\n/home/xiaoshaozi/workspace/lib64/hcaapsdkcom\\n/home/xiaoshaozi/workspace/lib64/hcnetsdkcom\\n/home/xiaoshaozi/workspace/lib64/lib\\n/home/xiaoshaozi/workspace/lib64/librabbitmq\\n/home/xiaoshaozi/workspace/lib64/opencv\\n/home/xiaoshaozi/workspace/lib64/pkgconfig\\n/home/xiaoshaozi/workspace/lib64/playlib" >> /etc/ld.so.conf.d/xiaoshaozi.conf;\n sh -xc "ldconfig";\n exit 0;\neof\n}\n\n################################################\n# aarch64 打印配置成果\n################################################\n#\n#################################################\nfunction show_aarch64(){\n echo -e "\\e[31m\\n######==========ld==========######\\n\\e[0m"\n echo "xiaoshaozi.conf::::"\n sh -xc "exagear" <<eof\n cat /etc/ld.so.conf.d/xiaoshaozi.conf;\neof\n\n echo -e "\\e[31m\\n######==========xiaoshaozi3_0_daemon==========######\\n\\e[0m"\n sh -xc "systemctl status xiaoshaozi3_0_daemon.service"\n\n echo -e "\\e[31m\\n######==========nacos==========######\\n\\e[0m"\n cat /home/xiaoshaozi/workspace/nacos/bin/startup.sh | grep "dnacos.server.ip"\n\n  echo -e "\\e[31m\\n######==========xiaoshaoziip==========######\\n\\e[0m"\n  cat /home/xiaoshaozi/workspace/etc/xiaoshaozi.xml | grep "[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}"\n\n}\n\n\niso=`arch`\ncase $iso in\n  "aarch64")\n    nacosset\n    autoset\n    xiaoshaoziip\n    ld_aarch64\n    show_aarch64\n    ;;\n  "x86_64")\n    jdk_x86\n    nacosset\n    autoset\n    xiaoshaoziip\n    ld_x86\n    show_x86\n    ;;\nesac\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708618656e3},{frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B03.html",relativePath:"zs-use/linux/shell编程/实战脚本示例03.md",key:"v-fc369404",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B03.html",lastUpdated:"2024年2月23日星期五凌晨12点17分",lastUpdatedTimestamp:1708618656e3,headersStr:null,content:"> jysp3_0_daemon.service\n\n[Unit]\nDescription=jysp3.0 daemon\n[Service]\nExecStart=/usr/bin/python /home/jysp/workspace/bin/jysp3.0_daemon.py\nExecStop=/bin/kill -TERM $MAINPID\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\n[Install]\nWantedBy=multi-user.target\n\n",normalizedContent:"> jysp3_0_daemon.service\n\n[unit]\ndescription=jysp3.0 daemon\n[service]\nexecstart=/usr/bin/python /home/jysp/workspace/bin/jysp3.0_daemon.py\nexecstop=/bin/kill -term $mainpid\nexecreload=/bin/kill -hup $mainpid\nkillmode=process\n[install]\nwantedby=multi-user.target\n\n",charsets:{},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708618656e3},{title:"实战脚本示例",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B05.html",relativePath:"zs-use/linux/shell编程/实战脚本示例05.md",key:"v-0c1b45be",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B05.html",lastUpdated:"2024年2月23日星期五凌晨12点17分",lastUpdatedTimestamp:1708618656e3,headersStr:null,content:'# 实战脚本示例\n\n> jar包运维脚本\n\n#!/bin/bash\n# jar包服务运维脚本\n\n################################################\n# jar包服务运维脚本\n################################################\n# 使用方式：\n# 需要使用jysp用户\n# 服务运维：./xxx.sh 根据菜单操作\n# 查看进程ID：./xxx.sh pid\n#################################################\n\n# 不允许使用root用户执行\nuser=$(env | grep USER | cut -d "=" -f 2)\nif [ "$user" == "root" ]\nthen\n\techo "user is root"\n\texit\nfi\nsleep 1\n\n# cpu架构\niso=$(arch)\nif [ "$iso" == "aarch64" ];then\n    javarun="java_runsv_arm"\nelif [ "$iso" == "x86_64" ];then\n    javarun="java_runsv_x86"\nfi\n\n#脚本所在目录\ncurrent_path=$(cd $(dirname $0);pwd)\n\n\n################################################\n# 维护jar包数据源\n################################################\n# jar包服务\n# javasv_attr字段说明：\n# 参数一：1,2 一级目录\n# 参数二：jar包存放目录\n# 参数三：最小内存\n# 参数四：最大内存\n# 参数五：读取yml路径\n#################################################\njavasv=(\n jysp-da-business-authority-server-0.0.1-SNAPSHOT.jar\n jysp-da-plugin-fileserver-server-0.0.1-SNAPSHOT.jar\n jysp-da-plugin-gateway-0.0.1-SNAPSHOT.jar\n jysp-da-dataflow-patrol-robot-master-0.0.1-SNAPSHOT.jar\n jysp-da-business-system-server-0.0.1-SNAPSHOT.jar\n jysp_cruise-0.0.1-SNAPSHOT.jar\n jysp_cruise_algorithm-0.0.1-SNAPSHOT.jar\n jysp_device-0.0.1-SNAPSHOT.jar\n jysp_home_page-0.0.1-SNAPSHOT.jar\n jysp_ir_xj-0.0.1-SNAPSHOT.jar\n jysp_robot-0.0.1-SNAPSHOT.jar\n jysp_sequential_control-0.0.1-SNAPSHOT.jar\n jysp_system-0.0.1-SNAPSHOT.jar\n jysp_video-0.0.1-SNAPSHOT.jar\n jysp_voice_new-0.0.1-SNAPSHOT.jar\n jysp_warn-0.0.1-SNAPSHOT.jar\n jysp_web_new-0.0.1-SNAPSHOT.jar\n jysp_exchange-0.0.1-SNAPSHOT.jar\n jysp_hik_ir-0.0.1-SNAPSHOT.jar\n)\n\ndeclare -A javasv_attr\njavasv_attr["${javasv[ 0]}"]="1,authority,256m,256m"\njavasv_attr["${javasv[ 1]}"]="1,fileSever,2048m,2048m"\njavasv_attr["${javasv[ 2]}"]="1,gateway,1024m,1024m"\njavasv_attr["${javasv[ 3]}"]="1,robot,1024m,1024m"\njavasv_attr["${javasv[ 4]}"]="1,system,1024m,1024m"\njavasv_attr["${javasv[ 5]}"]="2,cruise,2048m,2048m"\njavasv_attr["${javasv[ 6]}"]="2,cruise_algorithm,2048m,2048m"\njavasv_attr["${javasv[ 7]}"]="2,device,4096m,4096m"\njavasv_attr["${javasv[ 8]}"]="2,home,512m,512m"\njavasv_attr["${javasv[ 9]}"]="2,ir,1024m,1024m"\njavasv_attr["${javasv[10]}"]="2,robot,1024m,1024m"\njavasv_attr["${javasv[11]}"]="2,sequential,1024m,1024m"\njavasv_attr["${javasv[12]}"]="2,system,512m,512m"\njavasv_attr["${javasv[13]}"]="2,video,1024m,1024m"\njavasv_attr["${javasv[14]}"]="2,voice,1024m,1024m"\njavasv_attr["${javasv[15]}"]="2,warn,1024m,1024m"\njavasv_attr["${javasv[16]}"]="2,web,1024m,1024m"\njavasv_attr["${javasv[17]}"]="2,exchange,1024m,1024m,1"\njavasv_attr["${javasv[18]}"]="2,hik,1024m,1024m"\n\nservices_arr=(\n  avscms\n  avsdms\n  protocoltrans\n  MG-storage\n  avsirsvr\n)\n\n\n\n\n################################################\n# 检查进程PID\n################################################\n# ./xxx.sh pid\n#################################################\nfunction service_pid(){\n  # 合并两个数组到一起\n  service_pid_arr=("${services_arr[@]}" "${javasv[@]}")\n  # 数组去重\n#  service_pid_arr=($(printf "%s\\n" "${service_pid_arr[@]}" | sort | uniq))\n  # 循环获取ID\n  for((i=0;i<${#service_pid_arr[*]};i++))\n  do\n    ser_pid=$(ps -ef | grep "${service_pid_arr[i]}" | grep -v grep | grep -v runsv | awk \'{print $3,$2}\')\n    echo "runsv 和 ${service_pid_arr[i]}的PID分别是：$ser_pid"\n  done\n\n   # nacos_pid=`ps -ef | grep nacos | grep -v grep  | awk \'{print$2}\'`\n   # tomcat_pid=`ps -ef | grep tomcat | grep -v grep | grep -v nacos | awk \'{print$2}\'`\n   # emqxl_pid=`ps -ef | grep emqx | grep daemon | awk \'{print $2}\'`\n}\n################################################\n# setTable：\n################################################\n# \\e[:颜色开始\n# \\e[0m:颜色结束\n# 31m:红色\n#################################################\nfunction setTable(){\n  # 使用 column 按照“#”进行对齐 column -s "#" -t\n  # 利用awk命令替换掉以 +开头的行，并替换空格为 -\n  echo -e "\\e[31m"$1"\\e[0m"|column -s "#" -t|awk \'{if($0 ~ /^+/){gsub(" ","-",$0);print $0}else{print $0}}\'\n}\n\nfunction setTableRow(){\n  # 所有参数\n  local value=$*\n  # 获取参数个个数\n  local varCount=$#\n  # 计算表格边缘长度\n  local num=$(( $varCount * 2 + 1 ))\n\n  split=$(seq -s \'+#\' $num | sed \'s/[0-9]//g\')+\n  if [ -z $table ]\n    then\n      # 上边框\n      table="\\n${split}\\n"\n      # 内容框\n      local tableRow\n      for k in "$@"\n        do\n          tableRow=$tableRow"#$k#|"\n        done\n      table="${table}|$tableRow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n      # 上一个边框记录\n      lastTabCount=$varCount\n    else\n      #  判断是否需要增加边框\n      if [ $varCount -gt $lastTabCount ]\n        then\n          # 增加边框\n          local difCount=$(( $varCount - $lastTabCount ))\n          local difNum=$(( $difCount * 2 + 1 ))\n          difSplit=$(seq -s \'+#\' $difNum | sed \'s/[0-9]//g\')+\n          # 删除原有后缀，增加长度\n          table="${table%+\\\\n}"\n          table="${table}${difSplit}\\n"\n      fi\n      # 内容框\n      local tableRow\n      for k in "$@"\n        do\n          tableRow=$tableRow"#$k#|"\n        done\n      table="${table}|$tableRow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n  fi\n}\n\n\n\n\n################################################\n# 选择服务是动作\n################################################\n# 参数一：操作动作 1 启动，2 停止，3 重启\n# 参数二：服务ID\n#################################################\nfunction option_sure(){\n  case $1 in\n    1)\n      java_start $2\n      ;;\n    2)\n      java_stop $2\n      ;;\n    3)\n      java_stop $2\n      sleep 1\n      java_start $2\n  esac\n}\n\n################################################\n# 选择服务是动作：启动jar包\n################################################\n# 参数一：serv_id\n#################################################\n#$1:flag(1/2) $2:dirname $3:Xms $4:Xmx $5:jar_name\nfunction java_start(){\n  # 从服务列表中取出服务名\n  local start_jar_name=${javasv[$(($1-1))]}\n  local start_jar_attr=${javasv_attr[$start_jar_name]}\n  # 查看 狗和jar程序运行情况\n  pid_runsv=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep  "java_runsv_" | awk \'{print $2}\')\n  pid_java=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\')\n  # 检查服务\n  if [ "x$pid_runsv" != "x" ]\n    then\n      if [ "X$pid_java" != "X" ]\n        then\n          echo "$start_jar_name 正在运行"\n          return\n        else\n          echo "$start_jar_name 的java_runsv正在运行，$start_jar_name 未运行，请检查"\n          return\n      fi\n    else\n      if [ "X$pid_java" != "X" ]\n        then\n          echo "$start_jar_name 正在运行,java_runsv未运行，请检查"\n          return\n      fi\n  fi\n  # 检查服务配置\n  # 通过服务ID--\x3e找到服务名--\x3e找服务配置--\x3e解析\n  if [ -z "$start_jar_attr" ]; then\n    echo -e "\\e[31m"$start_jar_name\'未配置【启动参数】\'"\\e[0m"\n    return\n  fi\n  # 解析配置参数\n  IFS=\',\' read -ra jar_attr_arr <<< "$start_jar_attr"\n  if [ ${#jar_attr_arr[@]} != 4 -a ${#jar_attr_arr[@]} != 5 ]; then\n      echo -e "\\e[31m"$start_jar_name\'配置参数个数有误\'"\\e[0m"\n      return\n  fi\n  # echo ${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]}\n  #  根据配置参数启动\n  case ${jar_attr_arr[0]} in\n    1)\n      cd $current_path/jar/jysp-da/${jar_attr_arr[1]}\n      nohup $current_path/jar/$javarun --L java -Xms${jar_attr_arr[2]} -Xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n      ;;\n    2)\n      cd $current_path/jar/jysp_cruise/${jar_attr_arr[1]}\n      case ${jar_attr_arr[4]} in\n        1)\n          nohup $current_path/jar/$javarun --L java -Xms${jar_attr_arr[2]} -Xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n          ;;\n        *)\n          # 指定配置文件位置\n          BOOTSTRAP_HOME=/home/jysp/workspace/bin/jar/jysp_cruise\n          nohup $current_path/jar/$javarun --L java -Xms${jar_attr_arr[2]} -Xmx${jar_attr_arr[3]} -jar $start_jar_name --spring.config.location=classpath:/,${BOOTSTRAP_HOME}/bootstrap.yml >/dev/null 2>&1 &\n      esac\n  esac\n  sleep 5\n  pid_java=`ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\'`\n  if [ "X$pid_java" == "X" ]\n  then\n     echo "\'$start_jar_name\'未运行"\n  else\n     echo "\'$start_jar_name\'启动成功，PID：$pid_java"\n  fi\n}\n\n\n################################################\n# 选择服务是动作：停止jar包\n################################################\n# 参数一：serv_id\n################################################\nfunction java_stop(){\n  local stop_jar_name=${javasv[$(($1-1))]}\n\n  pid_runsv=`ps -ef | grep "$stop_jar_name" | grep -v grep | grep  "java_runsv_" | awk \'{print $2}\'`\n  if [ "X$pid_runsv" == "X" ]\n    then\n      echo "$stop_jar_name 的java_runsv未运行"\n    else\n      kill -9 $pid_runsv\n      if [ "$?" == "0" ]\n        then\n          echo "$stop_jar_name 的java_runsv停止成功"\n      fi\n  fi\n  sleep 2\n  pid_java=`ps -ef | grep "$stop_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\'`\n  if [ "X$pid_java" == "X" ]\n    then\n      echo "$stop_jar_name 未运行"\n    else\n      kill -9 $pid_java\n      if [ "$?" == "0" ]\n        then\n          echo "$stop_jar_name 停止成功"\n      fi\n  fi\n}\n\n\n\n################################################\n# 服务菜单\n################################################\n# 选择服务\n#################################################\nfunction servi(){\n  # 表格显示jar包列表菜单\n  local length=${#javasv[@]}\n  table=""\n  setTableRow "序号" "软件"\n  for ((i=0; i<$length; i++))\n  do\n    setTableRow "$(($i+1))" "${javasv[$i]}"\n  done\n  setTable ${table}\n  read -p "请输入序号[1-$length],多个时以逗号(英文逗号)间隔:" serv\n\n  # 获取用户输入的序号，按照","号分割存入到数组choose_serv_arr中\n  IFS=\',\' read -ra choose_serv_arr <<< "$serv"\n  # 数组去重\n  sorted_serv_arr=($(printf "%s\\n" "${choose_serv_arr[@]}" | sort | uniq))\n  # 复制数组：菜单显示\n  serv_arr_copy_show=("${sorted_serv_arr[@]}")\n  serv_arr_copy_sure=("${sorted_serv_arr[@]}")\n  serv_arr_copy_option=("${sorted_serv_arr[@]}")\n\n  # 显示操作菜单\n  option_arr=("启动" "停止" "重启")\n  while true\n  do\n    local option_length=${#option_arr[@]}\n    table=""\n    for serv_id in "${serv_arr_copy_show[@]}"; do\n        serv_name=${javasv[$(($serv_id-1))]}\n        setTableRow "$serv_id" "$serv_name"\n    done\n    setTableRow "序号" "动作"\n    for ((i=0; i<$option_length; i++))\n    do\n      setTableRow "$(($i+1))" "${option_arr[$i]}"\n    done\n    setTable ${table}\n    #echo -e "\\n请为$5选择：\\n1：启动    2：停止    3：重启"\n    read -p "请输入序号[1-$option_length]:" sure\n    if [ "$sure" == "1" -o "$sure" == "2" -o "$sure" == "3" ]\n      then\n        option_id=$sure\n        option_name=${option_arr[$(($sure-1))]}\n        break\n    fi\n  done\n\n  table=""\n  for serv_id in "${serv_arr_copy_sure[@]}"; do\n      serv_name=${javasv[$(($serv_id-1))]}\n      setTableRow "$serv_id" "$serv_name"\n  done\n  setTableRow "动作" "$option_name"\n  setTable ${table}\n\n  # 根据输入启动操作jar包\n  for serv_id in "${serv_arr_copy_option[@]}"; do\n    serv_name=${javasv[$(($serv_id-1))]}\n    # 调用操作方法\n    option_sure $option_id $serv_id\n  done\n}\n\n\ncase $1 in\n\t"pid")\n\t\tservice_pid\n\t\t;;\n\t*)\n\t\tservi\n\t\t;;\nesac\nexit 0\n',normalizedContent:'# 实战脚本示例\n\n> jar包运维脚本\n\n#!/bin/bash\n# jar包服务运维脚本\n\n################################################\n# jar包服务运维脚本\n################################################\n# 使用方式：\n# 需要使用jysp用户\n# 服务运维：./xxx.sh 根据菜单操作\n# 查看进程id：./xxx.sh pid\n#################################################\n\n# 不允许使用root用户执行\nuser=$(env | grep user | cut -d "=" -f 2)\nif [ "$user" == "root" ]\nthen\n\techo "user is root"\n\texit\nfi\nsleep 1\n\n# cpu架构\niso=$(arch)\nif [ "$iso" == "aarch64" ];then\n    javarun="java_runsv_arm"\nelif [ "$iso" == "x86_64" ];then\n    javarun="java_runsv_x86"\nfi\n\n#脚本所在目录\ncurrent_path=$(cd $(dirname $0);pwd)\n\n\n################################################\n# 维护jar包数据源\n################################################\n# jar包服务\n# javasv_attr字段说明：\n# 参数一：1,2 一级目录\n# 参数二：jar包存放目录\n# 参数三：最小内存\n# 参数四：最大内存\n# 参数五：读取yml路径\n#################################################\njavasv=(\n jysp-da-business-authority-server-0.0.1-snapshot.jar\n jysp-da-plugin-fileserver-server-0.0.1-snapshot.jar\n jysp-da-plugin-gateway-0.0.1-snapshot.jar\n jysp-da-dataflow-patrol-robot-master-0.0.1-snapshot.jar\n jysp-da-business-system-server-0.0.1-snapshot.jar\n jysp_cruise-0.0.1-snapshot.jar\n jysp_cruise_algorithm-0.0.1-snapshot.jar\n jysp_device-0.0.1-snapshot.jar\n jysp_home_page-0.0.1-snapshot.jar\n jysp_ir_xj-0.0.1-snapshot.jar\n jysp_robot-0.0.1-snapshot.jar\n jysp_sequential_control-0.0.1-snapshot.jar\n jysp_system-0.0.1-snapshot.jar\n jysp_video-0.0.1-snapshot.jar\n jysp_voice_new-0.0.1-snapshot.jar\n jysp_warn-0.0.1-snapshot.jar\n jysp_web_new-0.0.1-snapshot.jar\n jysp_exchange-0.0.1-snapshot.jar\n jysp_hik_ir-0.0.1-snapshot.jar\n)\n\ndeclare -a javasv_attr\njavasv_attr["${javasv[ 0]}"]="1,authority,256m,256m"\njavasv_attr["${javasv[ 1]}"]="1,filesever,2048m,2048m"\njavasv_attr["${javasv[ 2]}"]="1,gateway,1024m,1024m"\njavasv_attr["${javasv[ 3]}"]="1,robot,1024m,1024m"\njavasv_attr["${javasv[ 4]}"]="1,system,1024m,1024m"\njavasv_attr["${javasv[ 5]}"]="2,cruise,2048m,2048m"\njavasv_attr["${javasv[ 6]}"]="2,cruise_algorithm,2048m,2048m"\njavasv_attr["${javasv[ 7]}"]="2,device,4096m,4096m"\njavasv_attr["${javasv[ 8]}"]="2,home,512m,512m"\njavasv_attr["${javasv[ 9]}"]="2,ir,1024m,1024m"\njavasv_attr["${javasv[10]}"]="2,robot,1024m,1024m"\njavasv_attr["${javasv[11]}"]="2,sequential,1024m,1024m"\njavasv_attr["${javasv[12]}"]="2,system,512m,512m"\njavasv_attr["${javasv[13]}"]="2,video,1024m,1024m"\njavasv_attr["${javasv[14]}"]="2,voice,1024m,1024m"\njavasv_attr["${javasv[15]}"]="2,warn,1024m,1024m"\njavasv_attr["${javasv[16]}"]="2,web,1024m,1024m"\njavasv_attr["${javasv[17]}"]="2,exchange,1024m,1024m,1"\njavasv_attr["${javasv[18]}"]="2,hik,1024m,1024m"\n\nservices_arr=(\n  avscms\n  avsdms\n  protocoltrans\n  mg-storage\n  avsirsvr\n)\n\n\n\n\n################################################\n# 检查进程pid\n################################################\n# ./xxx.sh pid\n#################################################\nfunction service_pid(){\n  # 合并两个数组到一起\n  service_pid_arr=("${services_arr[@]}" "${javasv[@]}")\n  # 数组去重\n#  service_pid_arr=($(printf "%s\\n" "${service_pid_arr[@]}" | sort | uniq))\n  # 循环获取id\n  for((i=0;i<${#service_pid_arr[*]};i++))\n  do\n    ser_pid=$(ps -ef | grep "${service_pid_arr[i]}" | grep -v grep | grep -v runsv | awk \'{print $3,$2}\')\n    echo "runsv 和 ${service_pid_arr[i]}的pid分别是：$ser_pid"\n  done\n\n   # nacos_pid=`ps -ef | grep nacos | grep -v grep  | awk \'{print$2}\'`\n   # tomcat_pid=`ps -ef | grep tomcat | grep -v grep | grep -v nacos | awk \'{print$2}\'`\n   # emqxl_pid=`ps -ef | grep emqx | grep daemon | awk \'{print $2}\'`\n}\n################################################\n# settable：\n################################################\n# \\e[:颜色开始\n# \\e[0m:颜色结束\n# 31m:红色\n#################################################\nfunction settable(){\n  # 使用 column 按照“#”进行对齐 column -s "#" -t\n  # 利用awk命令替换掉以 +开头的行，并替换空格为 -\n  echo -e "\\e[31m"$1"\\e[0m"|column -s "#" -t|awk \'{if($0 ~ /^+/){gsub(" ","-",$0);print $0}else{print $0}}\'\n}\n\nfunction settablerow(){\n  # 所有参数\n  local value=$*\n  # 获取参数个个数\n  local varcount=$#\n  # 计算表格边缘长度\n  local num=$(( $varcount * 2 + 1 ))\n\n  split=$(seq -s \'+#\' $num | sed \'s/[0-9]//g\')+\n  if [ -z $table ]\n    then\n      # 上边框\n      table="\\n${split}\\n"\n      # 内容框\n      local tablerow\n      for k in "$@"\n        do\n          tablerow=$tablerow"#$k#|"\n        done\n      table="${table}|$tablerow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n      # 上一个边框记录\n      lasttabcount=$varcount\n    else\n      #  判断是否需要增加边框\n      if [ $varcount -gt $lasttabcount ]\n        then\n          # 增加边框\n          local difcount=$(( $varcount - $lasttabcount ))\n          local difnum=$(( $difcount * 2 + 1 ))\n          difsplit=$(seq -s \'+#\' $difnum | sed \'s/[0-9]//g\')+\n          # 删除原有后缀，增加长度\n          table="${table%+\\\\n}"\n          table="${table}${difsplit}\\n"\n      fi\n      # 内容框\n      local tablerow\n      for k in "$@"\n        do\n          tablerow=$tablerow"#$k#|"\n        done\n      table="${table}|$tablerow\\n"\n      # 下边框\n      table="${table}${split}\\n"\n  fi\n}\n\n\n\n\n################################################\n# 选择服务是动作\n################################################\n# 参数一：操作动作 1 启动，2 停止，3 重启\n# 参数二：服务id\n#################################################\nfunction option_sure(){\n  case $1 in\n    1)\n      java_start $2\n      ;;\n    2)\n      java_stop $2\n      ;;\n    3)\n      java_stop $2\n      sleep 1\n      java_start $2\n  esac\n}\n\n################################################\n# 选择服务是动作：启动jar包\n################################################\n# 参数一：serv_id\n#################################################\n#$1:flag(1/2) $2:dirname $3:xms $4:xmx $5:jar_name\nfunction java_start(){\n  # 从服务列表中取出服务名\n  local start_jar_name=${javasv[$(($1-1))]}\n  local start_jar_attr=${javasv_attr[$start_jar_name]}\n  # 查看 狗和jar程序运行情况\n  pid_runsv=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep  "java_runsv_" | awk \'{print $2}\')\n  pid_java=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\')\n  # 检查服务\n  if [ "x$pid_runsv" != "x" ]\n    then\n      if [ "x$pid_java" != "x" ]\n        then\n          echo "$start_jar_name 正在运行"\n          return\n        else\n          echo "$start_jar_name 的java_runsv正在运行，$start_jar_name 未运行，请检查"\n          return\n      fi\n    else\n      if [ "x$pid_java" != "x" ]\n        then\n          echo "$start_jar_name 正在运行,java_runsv未运行，请检查"\n          return\n      fi\n  fi\n  # 检查服务配置\n  # 通过服务id--\x3e找到服务名--\x3e找服务配置--\x3e解析\n  if [ -z "$start_jar_attr" ]; then\n    echo -e "\\e[31m"$start_jar_name\'未配置【启动参数】\'"\\e[0m"\n    return\n  fi\n  # 解析配置参数\n  ifs=\',\' read -ra jar_attr_arr <<< "$start_jar_attr"\n  if [ ${#jar_attr_arr[@]} != 4 -a ${#jar_attr_arr[@]} != 5 ]; then\n      echo -e "\\e[31m"$start_jar_name\'配置参数个数有误\'"\\e[0m"\n      return\n  fi\n  # echo ${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]}\n  #  根据配置参数启动\n  case ${jar_attr_arr[0]} in\n    1)\n      cd $current_path/jar/jysp-da/${jar_attr_arr[1]}\n      nohup $current_path/jar/$javarun --l java -xms${jar_attr_arr[2]} -xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n      ;;\n    2)\n      cd $current_path/jar/jysp_cruise/${jar_attr_arr[1]}\n      case ${jar_attr_arr[4]} in\n        1)\n          nohup $current_path/jar/$javarun --l java -xms${jar_attr_arr[2]} -xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n          ;;\n        *)\n          # 指定配置文件位置\n          bootstrap_home=/home/jysp/workspace/bin/jar/jysp_cruise\n          nohup $current_path/jar/$javarun --l java -xms${jar_attr_arr[2]} -xmx${jar_attr_arr[3]} -jar $start_jar_name --spring.config.location=classpath:/,${bootstrap_home}/bootstrap.yml >/dev/null 2>&1 &\n      esac\n  esac\n  sleep 5\n  pid_java=`ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\'`\n  if [ "x$pid_java" == "x" ]\n  then\n     echo "\'$start_jar_name\'未运行"\n  else\n     echo "\'$start_jar_name\'启动成功，pid：$pid_java"\n  fi\n}\n\n\n################################################\n# 选择服务是动作：停止jar包\n################################################\n# 参数一：serv_id\n################################################\nfunction java_stop(){\n  local stop_jar_name=${javasv[$(($1-1))]}\n\n  pid_runsv=`ps -ef | grep "$stop_jar_name" | grep -v grep | grep  "java_runsv_" | awk \'{print $2}\'`\n  if [ "x$pid_runsv" == "x" ]\n    then\n      echo "$stop_jar_name 的java_runsv未运行"\n    else\n      kill -9 $pid_runsv\n      if [ "$?" == "0" ]\n        then\n          echo "$stop_jar_name 的java_runsv停止成功"\n      fi\n  fi\n  sleep 2\n  pid_java=`ps -ef | grep "$stop_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\'`\n  if [ "x$pid_java" == "x" ]\n    then\n      echo "$stop_jar_name 未运行"\n    else\n      kill -9 $pid_java\n      if [ "$?" == "0" ]\n        then\n          echo "$stop_jar_name 停止成功"\n      fi\n  fi\n}\n\n\n\n################################################\n# 服务菜单\n################################################\n# 选择服务\n#################################################\nfunction servi(){\n  # 表格显示jar包列表菜单\n  local length=${#javasv[@]}\n  table=""\n  settablerow "序号" "软件"\n  for ((i=0; i<$length; i++))\n  do\n    settablerow "$(($i+1))" "${javasv[$i]}"\n  done\n  settable ${table}\n  read -p "请输入序号[1-$length],多个时以逗号(英文逗号)间隔:" serv\n\n  # 获取用户输入的序号，按照","号分割存入到数组choose_serv_arr中\n  ifs=\',\' read -ra choose_serv_arr <<< "$serv"\n  # 数组去重\n  sorted_serv_arr=($(printf "%s\\n" "${choose_serv_arr[@]}" | sort | uniq))\n  # 复制数组：菜单显示\n  serv_arr_copy_show=("${sorted_serv_arr[@]}")\n  serv_arr_copy_sure=("${sorted_serv_arr[@]}")\n  serv_arr_copy_option=("${sorted_serv_arr[@]}")\n\n  # 显示操作菜单\n  option_arr=("启动" "停止" "重启")\n  while true\n  do\n    local option_length=${#option_arr[@]}\n    table=""\n    for serv_id in "${serv_arr_copy_show[@]}"; do\n        serv_name=${javasv[$(($serv_id-1))]}\n        settablerow "$serv_id" "$serv_name"\n    done\n    settablerow "序号" "动作"\n    for ((i=0; i<$option_length; i++))\n    do\n      settablerow "$(($i+1))" "${option_arr[$i]}"\n    done\n    settable ${table}\n    #echo -e "\\n请为$5选择：\\n1：启动    2：停止    3：重启"\n    read -p "请输入序号[1-$option_length]:" sure\n    if [ "$sure" == "1" -o "$sure" == "2" -o "$sure" == "3" ]\n      then\n        option_id=$sure\n        option_name=${option_arr[$(($sure-1))]}\n        break\n    fi\n  done\n\n  table=""\n  for serv_id in "${serv_arr_copy_sure[@]}"; do\n      serv_name=${javasv[$(($serv_id-1))]}\n      settablerow "$serv_id" "$serv_name"\n  done\n  settablerow "动作" "$option_name"\n  settable ${table}\n\n  # 根据输入启动操作jar包\n  for serv_id in "${serv_arr_copy_option[@]}"; do\n    serv_name=${javasv[$(($serv_id-1))]}\n    # 调用操作方法\n    option_sure $option_id $serv_id\n  done\n}\n\n\ncase $1 in\n\t"pid")\n\t\tservice_pid\n\t\t;;\n\t*)\n\t\tservi\n\t\t;;\nesac\nexit 0\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708618656e3},{title:"实战脚本示例04",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B04.html",relativePath:"zs-use/linux/shell编程/实战脚本示例04.md",key:"v-72000444",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B04.html",lastUpdated:"2024年2月23日星期五凌晨12点17分",lastUpdatedTimestamp:1708618656e3,headersStr:null,content:'# 实战脚本示例04\n\n> deploy_jar.sh\n\n#!/usr/bin/env sh\n# 确保脚本抛出遇到的错误\nset -e\n\nserverPort="10022"\nserverIp="192.168.1.101"\nserverUser="xiaoshaozi"\n\n# 进入生成的文件夹\nssh -p $serverPort $serverUser@$serverIp \'sh -xc "rm -rf /home/xiaoshaozi/workspace/bin/jar/3500/bak_jar/jar"\'\n\nscp -P ${serverPort} -r "./jar" ${serverUser}@${serverIp}:/home/xiaoshaozi/workspace/bin/jar/3500/bak_jar/jar\n# 连接服务器，执行脚本文件\nssh -p ${serverPort} ${serverUser}@${serverIp} <<EOF\n#!/bin/bash\nsh -x /home/xiaoshaozi/workspace/bin/jar/3500/change_jar_3500.sh\nsh -x /home/xiaoshaozi/workspace/bin/jar/stop_java_3500_jar.sh\nsh -x /home/xiaoshaozi/workspace/bin/jar/start_java_3500.sh\nEOF\n\n',normalizedContent:'# 实战脚本示例04\n\n> deploy_jar.sh\n\n#!/usr/bin/env sh\n# 确保脚本抛出遇到的错误\nset -e\n\nserverport="10022"\nserverip="192.168.1.101"\nserveruser="xiaoshaozi"\n\n# 进入生成的文件夹\nssh -p $serverport $serveruser@$serverip \'sh -xc "rm -rf /home/xiaoshaozi/workspace/bin/jar/3500/bak_jar/jar"\'\n\nscp -p ${serverport} -r "./jar" ${serveruser}@${serverip}:/home/xiaoshaozi/workspace/bin/jar/3500/bak_jar/jar\n# 连接服务器，执行脚本文件\nssh -p ${serverport} ${serveruser}@${serverip} <<eof\n#!/bin/bash\nsh -x /home/xiaoshaozi/workspace/bin/jar/3500/change_jar_3500.sh\nsh -x /home/xiaoshaozi/workspace/bin/jar/stop_java_3500_jar.sh\nsh -x /home/xiaoshaozi/workspace/bin/jar/start_java_3500.sh\neof\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708618656e3},{title:"实战脚本示例06",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B06.html",relativePath:"zs-use/linux/shell编程/实战脚本示例06.md",key:"v-51368d9e",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B06.html",lastUpdated:"2024年2月23日星期五凌晨12点17分",lastUpdatedTimestamp:1708618656e3,headersStr:null,content:'# 实战脚本示例06\n\n> jar包启动脚本\n\n#!/bin/bash\n#判断当前用户是否为root\nuidr=`id | awk \'{print $1}\' | grep root`\nuidj=`id | awk \'{print $1}\' | grep \'(jysp)\'`\nif [ "X$uidr" != "X" -o "X$uidj" == "X" ];then\n     echo "请使用jysp用户运行该脚本，切换jysp用户命令：su - jysp"\n\t exit 0\nfi\n\n./stop_java_jar.sh >/dev/null 2>&1\n\n\niso=`arch`\nif [ "$iso" == "aarch64" ];then\n    javarun="java_runsv_arm"\nelif [ "$iso" == "x86_64" ];then\n    javarun="java_runsv_x86"\nfi\n\n\ncurrent_path=$(cd $(dirname $0);pwd)\nexport PATH=$PATH:$current_path\nsource /etc/profile\ncd /home/jysp/workspace/nacos/bin\n./startup.sh\n#sleep 60\n\n################################################\n# 维护jar包数据源\n################################################\n# jar包服务\n# javasv_attr字段说明：\n# 参数一：1,2 一级目录\n# 参数二：jar包存放目录\n# 参数三：最小内存\n# 参数四：最大内存\n# 参数五：读取yml路径\n#     空:使用统一指定的加载文件\n#     1:默认加载文件顺序\n#################################################\njavasv=(\n jysp-da-business-authority-server-0.0.1-SNAPSHOT.jar\n jysp-da-plugin-fileserver-server-0.0.1-SNAPSHOT.jar\n jysp-da-plugin-gateway-0.0.1-SNAPSHOT.jar\n jysp-da-dataflow-patrol-robot-master-0.0.1-SNAPSHOT.jar\n jysp-da-business-system-server-0.0.1-SNAPSHOT.jar\n jysp_cruise-0.0.1-SNAPSHOT.jar\n jysp_cruise_algorithm-0.0.1-SNAPSHOT.jar\n jysp_device-0.0.1-SNAPSHOT.jar\n jysp_home_page-0.0.1-SNAPSHOT.jar\n jysp_ir_xj-0.0.1-SNAPSHOT.jar\n jysp_robot-0.0.1-SNAPSHOT.jar\n jysp_sequential_control-0.0.1-SNAPSHOT.jar\n jysp_system-0.0.1-SNAPSHOT.jar\n jysp_video-0.0.1-SNAPSHOT.jar\n jysp_voice_new-0.0.1-SNAPSHOT.jar\n jysp_warn-0.0.1-SNAPSHOT.jar\n jysp_web_new-0.0.1-SNAPSHOT.jar\n jysp_exchange-0.0.1-SNAPSHOT.jar\n jysp_hik_ir-0.0.1-SNAPSHOT.jar\n)\n\n\ndeclare -A javasv_attr\njavasv_attr["${javasv[ 0]}"]="1,authority,256m,256m"\njavasv_attr["${javasv[ 1]}"]="1,fileSever,2048m,2048m"\njavasv_attr["${javasv[ 2]}"]="1,gateway,1024m,1024m"\njavasv_attr["${javasv[ 3]}"]="1,robot,1024m,1024m"\njavasv_attr["${javasv[ 4]}"]="1,system,1024m,1024m"\njavasv_attr["${javasv[ 5]}"]="2,jysp_cruise,2048m,2048m"\njavasv_attr["${javasv[ 6]}"]="2,jysp_cruise_algorithm,2048m,2048m"\njavasv_attr["${javasv[ 7]}"]="2,jysp_device,4096m,4096m"\njavasv_attr["${javasv[ 8]}"]="2,jysp_home_page,512m,512m"\njavasv_attr["${javasv[ 9]}"]="2,jysp_ir_xj,1024m,1024m"\njavasv_attr["${javasv[10]}"]="2,jysp_robot,1024m,1024m"\njavasv_attr["${javasv[11]}"]="2,jysp_sequential_control,1024m,1024m"\njavasv_attr["${javasv[12]}"]="2,jysp_system,512m,512m"\njavasv_attr["${javasv[13]}"]="2,jysp_video,1024m,1024m"\njavasv_attr["${javasv[14]}"]="2,jysp_voice_new,1024m,1024m"\njavasv_attr["${javasv[15]}"]="2,jysp_warn,1024m,1024m"\njavasv_attr["${javasv[16]}"]="2,jysp_web_new,1024m,1024m"\njavasv_attr["${javasv[17]}"]="2,jysp_exchange,1024m,1024m,1"\njavasv_attr["${javasv[18]}"]="2,jysp_hik_ir,1024m,1024m"\n\n\n################################################\n# 选择服务是动作：启动jar包\n################################################\n# 参数一：serv_id\n#################################################\nfunction java_start(){\n  # 从服务列表中取出服务名\n  local start_jar_name=$1\n  local start_jar_attr=${javasv_attr[$start_jar_name]}\n  # 查看 狗和jar程序运行情况\n  pid_runsv=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep  "java_runsv_" | awk \'{print $2}\')\n  pid_java=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\')\n  # 检查服务\n  if [ "x$pid_runsv" != "x" ]\n    then\n      if [ "X$pid_java" != "X" ]\n        then\n          echo "$start_jar_name 正在运行"\n          return\n        else\n          echo "$start_jar_name 的java_runsv正在运行，$start_jar_name 未运行，请检查"\n          return\n      fi\n    else\n      if [ "X$pid_java" != "X" ]\n        then\n          echo "$start_jar_name 正在运行,java_runsv未运行，请检查"\n          return\n      fi\n  fi\n  # 检查服务配置\n  # 通过服务ID--\x3e找到服务名--\x3e找服务配置--\x3e解析\n  if [ -z "$start_jar_attr" ]; then\n    echo -e "\\e[31m"$start_jar_name\'未配置【启动参数】\'"\\e[0m"\n    return\n  fi\n  # 解析配置参数\n  IFS=\',\' read -ra jar_attr_arr <<< "$start_jar_attr"\n  if [ ${#jar_attr_arr[@]} != 4 -a ${#jar_attr_arr[@]} != 5 ]; then\n      echo -e "\\e[31m"$start_jar_name\'配置参数个数有误\'"\\e[0m"\n      return\n  fi\n  # echo ${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]}\n  #  根据配置参数启动\n  case ${jar_attr_arr[0]} in\n    1)\n      cd $current_path/jysp-da/${jar_attr_arr[1]}\n      nohup $current_path/$javarun --L java -Xms${jar_attr_arr[2]} -Xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n      ;;\n    2)\n      cd $current_path/jysp_cruise/${jar_attr_arr[1]}\n      case ${jar_attr_arr[4]} in\n        1)\n          nohup $current_path/$javarun --L java -Xms${jar_attr_arr[2]} -Xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n          ;;\n        *)\n          # 指定配置文件位置\n          BOOTSTRAP_HOME=/home/jysp/workspace/bin/jar/jysp_cruise\n          nohup $current_path/$javarun --L java -Xms${jar_attr_arr[2]} -Xmx${jar_attr_arr[3]} -jar $start_jar_name --spring.config.location=classpath:/,${BOOTSTRAP_HOME}/bootstrap.yml >/dev/null 2>&1 &\n      esac\n  esac\n  sleep 5\n  pid_java=`ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\'`\n  if [ "X$pid_java" == "X" ]\n  then\n     echo "\'$start_jar_name\'未运行"\n  else\n     echo "\'$start_jar_name\'启动成功，PID：$pid_java"\n  fi\n}\n\n\nfor serv_name in "${javasv[@]}"; do\n  # 调用启动方法\n  java_start $serv_name\ndone\nexit 0\n\n\n',normalizedContent:'# 实战脚本示例06\n\n> jar包启动脚本\n\n#!/bin/bash\n#判断当前用户是否为root\nuidr=`id | awk \'{print $1}\' | grep root`\nuidj=`id | awk \'{print $1}\' | grep \'(jysp)\'`\nif [ "x$uidr" != "x" -o "x$uidj" == "x" ];then\n     echo "请使用jysp用户运行该脚本，切换jysp用户命令：su - jysp"\n\t exit 0\nfi\n\n./stop_java_jar.sh >/dev/null 2>&1\n\n\niso=`arch`\nif [ "$iso" == "aarch64" ];then\n    javarun="java_runsv_arm"\nelif [ "$iso" == "x86_64" ];then\n    javarun="java_runsv_x86"\nfi\n\n\ncurrent_path=$(cd $(dirname $0);pwd)\nexport path=$path:$current_path\nsource /etc/profile\ncd /home/jysp/workspace/nacos/bin\n./startup.sh\n#sleep 60\n\n################################################\n# 维护jar包数据源\n################################################\n# jar包服务\n# javasv_attr字段说明：\n# 参数一：1,2 一级目录\n# 参数二：jar包存放目录\n# 参数三：最小内存\n# 参数四：最大内存\n# 参数五：读取yml路径\n#     空:使用统一指定的加载文件\n#     1:默认加载文件顺序\n#################################################\njavasv=(\n jysp-da-business-authority-server-0.0.1-snapshot.jar\n jysp-da-plugin-fileserver-server-0.0.1-snapshot.jar\n jysp-da-plugin-gateway-0.0.1-snapshot.jar\n jysp-da-dataflow-patrol-robot-master-0.0.1-snapshot.jar\n jysp-da-business-system-server-0.0.1-snapshot.jar\n jysp_cruise-0.0.1-snapshot.jar\n jysp_cruise_algorithm-0.0.1-snapshot.jar\n jysp_device-0.0.1-snapshot.jar\n jysp_home_page-0.0.1-snapshot.jar\n jysp_ir_xj-0.0.1-snapshot.jar\n jysp_robot-0.0.1-snapshot.jar\n jysp_sequential_control-0.0.1-snapshot.jar\n jysp_system-0.0.1-snapshot.jar\n jysp_video-0.0.1-snapshot.jar\n jysp_voice_new-0.0.1-snapshot.jar\n jysp_warn-0.0.1-snapshot.jar\n jysp_web_new-0.0.1-snapshot.jar\n jysp_exchange-0.0.1-snapshot.jar\n jysp_hik_ir-0.0.1-snapshot.jar\n)\n\n\ndeclare -a javasv_attr\njavasv_attr["${javasv[ 0]}"]="1,authority,256m,256m"\njavasv_attr["${javasv[ 1]}"]="1,filesever,2048m,2048m"\njavasv_attr["${javasv[ 2]}"]="1,gateway,1024m,1024m"\njavasv_attr["${javasv[ 3]}"]="1,robot,1024m,1024m"\njavasv_attr["${javasv[ 4]}"]="1,system,1024m,1024m"\njavasv_attr["${javasv[ 5]}"]="2,jysp_cruise,2048m,2048m"\njavasv_attr["${javasv[ 6]}"]="2,jysp_cruise_algorithm,2048m,2048m"\njavasv_attr["${javasv[ 7]}"]="2,jysp_device,4096m,4096m"\njavasv_attr["${javasv[ 8]}"]="2,jysp_home_page,512m,512m"\njavasv_attr["${javasv[ 9]}"]="2,jysp_ir_xj,1024m,1024m"\njavasv_attr["${javasv[10]}"]="2,jysp_robot,1024m,1024m"\njavasv_attr["${javasv[11]}"]="2,jysp_sequential_control,1024m,1024m"\njavasv_attr["${javasv[12]}"]="2,jysp_system,512m,512m"\njavasv_attr["${javasv[13]}"]="2,jysp_video,1024m,1024m"\njavasv_attr["${javasv[14]}"]="2,jysp_voice_new,1024m,1024m"\njavasv_attr["${javasv[15]}"]="2,jysp_warn,1024m,1024m"\njavasv_attr["${javasv[16]}"]="2,jysp_web_new,1024m,1024m"\njavasv_attr["${javasv[17]}"]="2,jysp_exchange,1024m,1024m,1"\njavasv_attr["${javasv[18]}"]="2,jysp_hik_ir,1024m,1024m"\n\n\n################################################\n# 选择服务是动作：启动jar包\n################################################\n# 参数一：serv_id\n#################################################\nfunction java_start(){\n  # 从服务列表中取出服务名\n  local start_jar_name=$1\n  local start_jar_attr=${javasv_attr[$start_jar_name]}\n  # 查看 狗和jar程序运行情况\n  pid_runsv=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep  "java_runsv_" | awk \'{print $2}\')\n  pid_java=$(ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\')\n  # 检查服务\n  if [ "x$pid_runsv" != "x" ]\n    then\n      if [ "x$pid_java" != "x" ]\n        then\n          echo "$start_jar_name 正在运行"\n          return\n        else\n          echo "$start_jar_name 的java_runsv正在运行，$start_jar_name 未运行，请检查"\n          return\n      fi\n    else\n      if [ "x$pid_java" != "x" ]\n        then\n          echo "$start_jar_name 正在运行,java_runsv未运行，请检查"\n          return\n      fi\n  fi\n  # 检查服务配置\n  # 通过服务id--\x3e找到服务名--\x3e找服务配置--\x3e解析\n  if [ -z "$start_jar_attr" ]; then\n    echo -e "\\e[31m"$start_jar_name\'未配置【启动参数】\'"\\e[0m"\n    return\n  fi\n  # 解析配置参数\n  ifs=\',\' read -ra jar_attr_arr <<< "$start_jar_attr"\n  if [ ${#jar_attr_arr[@]} != 4 -a ${#jar_attr_arr[@]} != 5 ]; then\n      echo -e "\\e[31m"$start_jar_name\'配置参数个数有误\'"\\e[0m"\n      return\n  fi\n  # echo ${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]},${jar_attr_arr[0]}\n  #  根据配置参数启动\n  case ${jar_attr_arr[0]} in\n    1)\n      cd $current_path/jysp-da/${jar_attr_arr[1]}\n      nohup $current_path/$javarun --l java -xms${jar_attr_arr[2]} -xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n      ;;\n    2)\n      cd $current_path/jysp_cruise/${jar_attr_arr[1]}\n      case ${jar_attr_arr[4]} in\n        1)\n          nohup $current_path/$javarun --l java -xms${jar_attr_arr[2]} -xmx${jar_attr_arr[3]} -jar $start_jar_name >/dev/null 2>&1 &\n          ;;\n        *)\n          # 指定配置文件位置\n          bootstrap_home=/home/jysp/workspace/bin/jar/jysp_cruise\n          nohup $current_path/$javarun --l java -xms${jar_attr_arr[2]} -xmx${jar_attr_arr[3]} -jar $start_jar_name --spring.config.location=classpath:/,${bootstrap_home}/bootstrap.yml >/dev/null 2>&1 &\n      esac\n  esac\n  sleep 5\n  pid_java=`ps -ef | grep "$start_jar_name" | grep -v grep | grep -v "java_runsv_" | awk \'{print $2}\'`\n  if [ "x$pid_java" == "x" ]\n  then\n     echo "\'$start_jar_name\'未运行"\n  else\n     echo "\'$start_jar_name\'启动成功，pid：$pid_java"\n  fi\n}\n\n\nfor serv_name in "${javasv[@]}"; do\n  # 调用启动方法\n  java_start $serv_name\ndone\nexit 0\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708618656e3},{title:"工具--cut",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7--cut.html",relativePath:"zs-use/linux/shell编程/工具--cut.md",key:"v-f561d168",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7--cut.html",headers:[{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"",content:'# 工具--cut\n\n> cut是**列**截取工具，用于列的截取\n\n语法和选项\n\n# cut [选项]  文件名\n常见选项：\n    -c:\t以字符为单位进行分割,截取\n    \t不依赖分隔符来区分列，而是通过字符范围（行首为0）来进行字段提取。“n-”表示从第n个字符到行尾；\n    \t“n-m”从第n个字符到第m个字符；“-m”表示从第1个字符到第m个字符。\n    -d:\t自定义分隔符，默认为制表符\\t\n    -f:\t与-d一起使用，提取第几列\n\n\n举例说明:\n\n[root@xiaoshaozi ~]#  cut -d : -f1 1.txt \t\t\t以:冒号分割，截取第1列内容\n[root@xiaoshaozi ~]#  cut -d ":"" -f1,6,7 1.txt \t以:冒号分割，截取第1,6,7列内容\n[root@xiaoshaozi ~]#  cut -c 4 1.txt \t\t\t\t截取文件中每行第4个字符\n[root@xiaoshaozi ~]#  cut -c 1-4 1.txt \t\t\t截取文件中每行的1-4个字符\n[root@xiaoshaozi ~]#  cut -c 4-10 1.txt \t\t\t截取文件中每行的4-10个字符\n[root@xiaoshaozi ~]#  cut -c 5- 1.txt \t\t\t\t从第5个字符开始截取后面所有字符\n\n\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 2\n123\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 1,2\nzs=123\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 1,2,4\nzs=123=789\n\n\n课堂练习： 用小工具列出你当系统的运行级别。5/3\n\n 1. 如何查看系统运行级别\n    * 命令runlevel\n    * 文件/etc/inittab\n 2. 如何过滤运行级别\n\nrunlevel |cut -c3\nrunlevel | cut -d \' \' -f2\ngrep -v \'^#\' /etc/inittab | cut -d: -f2\ngrep \'^id\' /etc/inittab |cut -d: -f2\ngrep "initdefault:$" /etc/inittab | cut -c4\ngrep -v ^# /etc/inittab |cut -c4\ngrep \'id:\' /etc/inittab |cut -d: -f2\ncut -d\':\' -f2 /etc/inittab |grep -v ^#\ncut -c4 /etc/inittab |tail -1\ncut -d: -f2 /etc/inittab |tail -1\n\n\n\n#',normalizedContent:'# 工具--cut\n\n> cut是**列**截取工具，用于列的截取\n\n语法和选项\n\n# cut [选项]  文件名\n常见选项：\n    -c:\t以字符为单位进行分割,截取\n    \t不依赖分隔符来区分列，而是通过字符范围（行首为0）来进行字段提取。“n-”表示从第n个字符到行尾；\n    \t“n-m”从第n个字符到第m个字符；“-m”表示从第1个字符到第m个字符。\n    -d:\t自定义分隔符，默认为制表符\\t\n    -f:\t与-d一起使用，提取第几列\n\n\n举例说明:\n\n[root@xiaoshaozi ~]#  cut -d : -f1 1.txt \t\t\t以:冒号分割，截取第1列内容\n[root@xiaoshaozi ~]#  cut -d ":"" -f1,6,7 1.txt \t以:冒号分割，截取第1,6,7列内容\n[root@xiaoshaozi ~]#  cut -c 4 1.txt \t\t\t\t截取文件中每行第4个字符\n[root@xiaoshaozi ~]#  cut -c 1-4 1.txt \t\t\t截取文件中每行的1-4个字符\n[root@xiaoshaozi ~]#  cut -c 4-10 1.txt \t\t\t截取文件中每行的4-10个字符\n[root@xiaoshaozi ~]#  cut -c 5- 1.txt \t\t\t\t从第5个字符开始截取后面所有字符\n\n\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 2\n123\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 1,2\nzs=123\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 1,2,4\nzs=123=789\n\n\n课堂练习： 用小工具列出你当系统的运行级别。5/3\n\n 1. 如何查看系统运行级别\n    * 命令runlevel\n    * 文件/etc/inittab\n 2. 如何过滤运行级别\n\nrunlevel |cut -c3\nrunlevel | cut -d \' \' -f2\ngrep -v \'^#\' /etc/inittab | cut -d: -f2\ngrep \'^id\' /etc/inittab |cut -d: -f2\ngrep "initdefault:$" /etc/inittab | cut -c4\ngrep -v ^# /etc/inittab |cut -c4\ngrep \'id:\' /etc/inittab |cut -d: -f2\ncut -d\':\' -f2 /etc/inittab |grep -v ^#\ncut -c4 /etc/inittab |tail -1\ncut -d: -f2 /etc/inittab |tail -1\n\n\n\n#',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"plantUML--问题",frontmatter:{},regularPath:"/zs-use/idea/%E6%8F%92%E4%BB%B6/plantUML--%E9%97%AE%E9%A2%98.html",relativePath:"zs-use/idea/插件/plantUML--问题.md",key:"v-8dc82c38",path:"/zs-use/idea/%E6%8F%92%E4%BB%B6/plantUML--%E9%97%AE%E9%A2%98.html",headers:[{level:2,title:"使用远程服务",slug:"使用远程服务",normalizedTitle:"使用远程服务",charIndex:23},{level:3,title:"vscode",slug:"vscode",normalizedTitle:"vscode",charIndex:34},{level:3,title:"Idea",slug:"idea",normalizedTitle:"idea",charIndex:50},{level:2,title:"使用本地服务",slug:"使用本地服务",normalizedTitle:"使用本地服务",charIndex:61},{level:3,title:"windows(未亲测)",slug:"windows-未亲测",normalizedTitle:"windows(未亲测)",charIndex:92},{level:3,title:"mac（使用本地服务）",slug:"mac-使用本地服务",normalizedTitle:"mac（使用本地服务）",charIndex:1063},{level:3,title:"动手安装失败过程记录",slug:"动手安装失败过程记录",normalizedTitle:"动手安装失败过程记录",charIndex:1995}],lastUpdated:"2024年1月20日星期六凌晨2点03分",lastUpdatedTimestamp:1705687429e3,headersStr:"使用远程服务 vscode Idea 使用本地服务 windows(未亲测) mac（使用本地服务） 动手安装失败过程记录",content:'# plantUML--问题\n\n\n\n\n\n\n# 使用远程服务\n\n\n# vscode\n\n修改为\n\n\n# Idea\n\n\n\n\n# 使用本地服务\n\n> 安装Graphviz（下载地址）\n\n\n# windows(未亲测)\n\n安装Graphviz（下载地址）\n\n本文使用的是windows 64位的版本，下载完成之后双击安装（记住安装目录哈，后面需要）；\n\n本文安装到D盘下（D:\\Program Files\\Graphviz）\n\n\n\n实战画C4架构图\n\n下载C4-Model的lib库到本地，后续画图使用(*下载地址*)\n\n本文下载的是目前最新的版本v2.5.0\n\n\n\n下载后解压，本文解压到D:\\work\\C4\\ 目录下，实际上我们只需要根目录中的C4_开头的文件；\n\n\n\n开始画C4架构图\n\n@startuml\n!RELATIVE_INCLUDE="D:\\work\\C4\\C4-PlantUML-2.5.0\\"\n!include D:\\work\\C4\\C4-PlantUML-2.5.0\\C4_Container.puml\n\nPerson(admin, "Administrator")\nSystem_Boundary(c1, "Sample System") {\n    Container(web_app, "Web Application", "C#, ASP.NET Core 2.1 MVC", "Allows users to compare multiple Twitter timelines")\n}\nSystem(twitter, "Twitter")\n\nRel(admin, web_app, "Uses", "HTTPS")\nRel(web_app, twitter, "Gets tweets from", "HTTPS")\n@enduml\n\n\n> !RELATIVE_INCLUDE="D:\\work\\C4\\C4-PlantUML-2.5.0" 这段代码如果不设置，则默认会去https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/ 访问对应版本的puml文件，如果网速不好会报错，所以还是建议设置成本地的资源； !include D:\\work\\C4\\C4-PlantUML-2.5.0\\C4_Container.puml 指定容器的资源文件路径\n\n\n\n至于其他的语法说明，可以去C4-PlantUML 的Github地址查询；\n\n\n# mac（使用本地服务）\n\n未安装 graphviz\n\n# macos\n# 先下载 Graphviz，然后查看 dot 是否安装成功\nbrew install Graphviz\ndot -version\n\n\nsudo mkdir -p /opt/local/bin\nsudo cp /opt/homebrew/Cellar/graphviz/2.49.3/bin/dot /opt/local/bin\n\n\n重启 idea\n\ngraphviz 官网地址： http://www.graphviz.org/download/\n\n# Mac m1 brew install graphviz报错 (网络收集)\n\ndoubleq@doubleq ~ % brew install graphviz\n\nRunning `brew update --auto-update`...\nError: Cannot install in Homebrew on ARM processor in Intel default prefix (/usr/local)!\nPlease create a new installation in /opt/homebrew using one of the\n"Alternative Installs" from:\n  https://docs.brew.sh/Installation\nYou can migrate your previously installed formula list with:\n  brew bundle dump\n\n\n\n根据报错提示，需要将命令行从arm指令集切换到x86指令集，因此在命令前加一个arch -x86_64即可正常安装\n\narch -x86_64 brew install graphviz\n\n\n如果要在Python中运行utils.plot_model(model)，可能还需要一次重启。\n\n参考：https://medium.com/swlh/run-x86-terminal-apps-like-homebrew-on-your-new-m1-mac-73bdc9b0f343\n\n\n# 动手安装失败过程记录\n\n> 系统信息\n\n\n\n> 官网安装方式\n\n/bin/bash -c "$(curl -fsSL https://raw.GitHubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n\n# 进入Brew本地仓库，找到.git文件夹，然后打开config文件：\ncd "$(brew --repo)"\n\n# 在config文件中找到[remote "origin"]模块，将url修改为：url = Https://mirrors.aliyun.com/homebrew/brew.git\nvim .git/config\n\n修改后，文件格式如下：\n[core]  repositoryfORMatversion = 0  filemode = true  bare = false  logallrefupdates = true  symlinks = false  ignorecase = true  autocrlf = input[remote "origin"]  url = https://mirrors.aliyun.com/homebrew/brew.git  fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]  remote = origin  merge = refs/heads/master\n\n\n测试Brew是否工作正常\n\nbrew update\n如果能看到以下输出，则说明Brew已经成功安装并且配置了国内镜像：\nUpdated 1 tap (homebrew/core).==> Updated Formulae...\n\n\n> 国内脚本安装方式\n\nhttps://blog.csdn.net/W_Fe5/article/details/134428377?spm=1001.2014.3001.5501\n\n/bin/zsh -c "$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"\n\n\n该地址提供多个国内源地址\n\n\n\n> Warning: formula.json: update failed, falling back to cached version.\n> Error: Cannot download non-corrupt https://formulae.brew.sh/api/formula.json!\n> Error: Kernel.exit\n\n> brew install nginx报错Operation too slow. Less than 100 bytes/sec transferred the last 5 seconds\n\nexport HOMEBREW_NO_INSTALL_FROM_API=1\n\n\n> curl: (35) LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to raw.githubusercontent.com:443 Error: graphviz: Failed to download resource "libx11.rb"\n\n\n\n上科技\n\n\n\n> Error: A newer Command Line Tools release is available.\n> \n> Update them from Software Update in System Preferences.\n\n\n\nmiyufeng@MacBook-Pro ~ % llvm-gcc --version\nApple clang version 12.0.5 (clang-1205.0.22.11)\nTarget: x86_64-apple-darwin20.3.0\nThread model: posix\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\nmiyufeng@MacBook-Pro ~ % \n\n\nhttps://developer.apple.com/download/all/\n\n\n\n\n\n访问 : https://developer.apple.com/download/more/\n\n去下载最新的Command Line Tools for Xcode 12.5 beta入下图\n\n> 完成报文\n\nmiyufeng@MacBook-Pro ~ % brew install graphviz\nWarning: You are using macOS 11.\nWe (and Apple) do not provide support for this old version.\nIt is expected behaviour that some formulae will fail to build in this old version.\nIt is expected behaviour that Homebrew will be buggy and slow.\nDo not create any issues about this on Homebrew\'s GitHub repositories.\nDo not create any issues even if you think this message is unrelated.\nAny opened issues will be immediately closed without response.\nDo not ask for help from Homebrew or its maintainers on social media.\nYou may ask for help in Homebrew\'s discussions but are unlikely to receive a response.\nTry to figure out the problem yourself and submit a fix as a pull request.\nWe will review it but may or may not accept it.\n\n==> Fetching dependencies for graphviz: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, ninja, meson, libsodium, lua, ncurses, berkeley-db@5, gdbm, perl, autoconf, libssh2, libgit2, z3, llvm, rust, ruby, vim, libvmaf, yasm, aom, libavif, gd, glib, jasper, netpbm, gts, xorgproto, libxau, libxdmcp, xcb-proto, libxcb, util-macros, xtrans, libx11, libxext, libxrender, lzo, pixman, cairo, gdk-pixbuf, fribidi, graphite2, gobject-introspection, harfbuzz, pango and librsvg\n==> Fetching doxygen\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/24a15b0996cf9739b75d02b460418caeffff0781bed5863865de9aefb11fb77d--doxygen.rb\n==> Downloading https://doxygen.nl/files/doxygen-1.10.0.src.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/57ac36faf2c88ea162775e6223fd62edc274d310dbbbf486fb730b16b3d0ea1a--doxygen-1.10.0.src.tar.gz\n==> Fetching python@3.11\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/749bbc537869aeb8582a7d6433d6f40e85b411f62593aaf7e0ae1032ae16b648--python@3.11.rb\n==> Downloading https://raw.githubusercontent.com/Homebrew/formula-patches/6d2fb\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/2322057182c6bb73dfe09e098010168a5a9d0712a89cee86d2c5ddb11052137e--3.11-sysconfig.diff\n==> Downloading https://raw.githubusercontent.com/Homebrew/formula-patches/a1618\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/5fea40db1cb33001d6ab42c76fc28693ce292532c6ed6f89dd3154dac29167bb--3.10-distutils-scheme.diff\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/c4/e6/c1ac50fe3eebb38\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/839df6b8e58f6ef46c0ebc33871e2b489d13182f2bf3bc2b56d90105181d04b9--flit_core-3.9.0.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/1f/7f/4da15e07ccd11c8\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/a1ddf9e52c9a8fe75212d70a357f96cf367e70e22377cc9dfcaa20a96cc9c0e0--pip-23.3.1.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/4b/d9/d0cf66484b7e28a\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/7a906866f4634a5422362200ce21b315c747b23f769ab867eee3560f0fb5b29b--setuptools-69.0.2.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/b0/b4/bc2baae3970c282\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/dc136e605b75d715777b384e9d3de56ba92e05f28a38d3781ca332969e5e72b8--wheel-0.42.0.tar.gz\n==> Downloading https://www.python.org/ftp/python/3.11.7/Python-3.11.7.tgz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/5ba08911f318adee9027b1d563857d05ec6f1a19fcf960884db72e42e52cd1a8--Python-3.11.7.tgz\n==> Fetching dependencies for docutils: python@3.11\n==> Fetching docutils\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/5838df242d76d886fab71bc8592b2e7d36ee75cc4a8476e53bc575f402d5748b--docutils.rb\n==> Downloading https://downloads.sourceforge.net/project/docutils/docutils/0.20\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/843f96fc0be572750995ce1ef90118c1956086c462a39e2f211f124301e3a3a1--docutils-0.20.1.tar.gz\n==> Fetching dependencies for python-flit-core: python@3.11\n==> Fetching python-flit-core\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/515babbda4501c91d7799a7c76cd7f1b3e83125d75f9cbe21c48814bc4524bf9--python-flit-core.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/c4/e6/c1ac50fe3eebb38\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/839df6b8e58f6ef46c0ebc33871e2b489d13182f2bf3bc2b56d90105181d04b9--flit_core-3.9.0.tar.gz\n==> Fetching dependencies for python-packaging: python@3.11 and python-flit-core\n==> Fetching python-packaging\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/e3ec422cabfe647405377c98c49c6afa430d7de271342ab55e289f2c27634f50--python-packaging.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/fb/2b/9b9c33ffed44ee9\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/9d7d2aa4ba81f8928729aade5f00d3f4b0f28b47e86172b82572f01e0f3d6f34--packaging-23.2.tar.gz\n==> Fetching dependencies for python-pathspec: python@3.11 and python-flit-core\n==> Fetching python-pathspec\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/e54b9ac26066f8ad3b7b285bab114d5470e7a927fe4615cc8a4c88cc24b26de4--python-pathspec.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/ca/bc/f35b8446f4531a7\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/ccfc7d92462262825087899a1226cad29ba695c7c57210887120ee59b7a349b3--pathspec-0.12.1.tar.gz\n==> Fetching dependencies for python-typing-extensions: python@3.11 and python-flit-core\n==> Fetching python-typing-extensions\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/04297613aec4b54edc16b6dd52eb738c6d33b69c646d3be552503793cabe9979--python-typing-extensions.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/0c/1d/eb26f5e75100d53\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/246e971161d08a556e1042cb36552401fb368ee0ccd4464487eb21cdb2d16d31--typing_extensions-4.9.0.tar.gz\n==> Fetching dependencies for python-setuptools-scm: python@3.11, python-flit-core, python-packaging and python-typing-extensions\n==> Fetching python-setuptools-scm\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/f4607b85a0ee0ad65ff81f60889c7e6ef23a8a7e492bfefa43994a3be063a9d7--python-setuptools-scm.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/eb/b1/0248705f10f6de5\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/cdca6eaa7fdada79a66e000c3dc1adebddd96b6b16d55b16b97792de26a778c3--setuptools-scm-8.0.4.tar.gz\n==> Fetching dependencies for python-pluggy: python@3.11, python-flit-core, python-packaging, python-typing-extensions and python-setuptools-scm\n==> Fetching python-pluggy\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/e96e1f546a229c311d24d27c037b8848dc6bc953eecb3fdfa3c959139459d14b--python-pluggy.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/36/51/04defc761583568\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/26d2ffe2e1bb5f900de09aea227b29cbc7025b768c829f6bde8b2236cba00491--pluggy-1.3.0.tar.gz\n==> Fetching dependencies for python-trove-classifiers: python@3.11\n==> Fetching python-trove-classifiers\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/e69d19f498e42c3c5df4c792ea23f78ac4fd4fd1e22c51d44aaf5881e1b8e7d5--python-trove-classifiers.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/44/e4/9de7cda4a03a996\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/6d252c9a90b8d6a905a14ef0006fa13d62fb564ca4f9f470d83c578b9d0a6cd4--trove-classifiers-2024.1.8.tar.gz\n==> Fetching dependencies for python-hatchling: python@3.11, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy and python-trove-classifiers\n==> Fetching python-hatchling\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/a5fa394260767700ab5ba62a4148eb2f140bf91bded5ecfa3d397c7c9512c4b4--python-hatchling.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/37/4a/986d35164e2033d\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/f95a1ff11b6fa51db04a297e5c4c16a78dc595b0f52557ef277ffbddcab949a1--editables-0.5.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/fb/2b/9b9c33ffed44ee9\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/9d7d2aa4ba81f8928729aade5f00d3f4b0f28b47e86172b82572f01e0f3d6f34--packaging-23.2.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/ca/bc/f35b8446f4531a7\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/ccfc7d92462262825087899a1226cad29ba695c7c57210887120ee59b7a349b3--pathspec-0.12.1.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/36/51/04defc761583568\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/26d2ffe2e1bb5f900de09aea227b29cbc7025b768c829f6bde8b2236cba00491--pluggy-1.3.0.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/3d/14/fe9a127564317f1\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/09f380e4051b1fd55b49af38d8a8bc2374fe2377baae26be79f9e1c6a84bca8c--trove-classifiers-2023.11.29.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/fd/4a/8196e79c0d6e5eb\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/063e900f664aa897b2ab83437d720f6eb849f37bff3e9411cdddcedf21cad896--hatchling-1.21.0.tar.gz\n==> Fetching dependencies for pygments: python@3.11, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers and python-hatchling\n==> Fetching pygments\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/c1ac9fec393b1be558b4217a5a685c6df25842d4df736a27ffc497a0afe079d0--pygments.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/55/59/8bccf4157baf25e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/c2dfc0b992035dbafaa9c5c52670f31475c2835f3958dfa05ac840d3d89e5a23--pygments-2.17.2.tar.gz\n==> Fetching dependencies for python-markupsafe: python@3.11\n==> Fetching python-markupsafe\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/da5afe994016b2151b5d87c5d7d67f10345ec2d52f4e44fe5f054591ff8c8bf8--python-markupsafe.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/6d/7c/59a3248f411813f\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/63977516113ec5e29e0456a66712484bf0279ff145f659359014f40dc4a65ba6--MarkupSafe-2.1.3.tar.gz\n==> Fetching dependencies for python-jinja: python@3.11 and python-markupsafe\n==> Fetching python-jinja\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/d5cc9863d7ec96f40896f0a5d064b26015eacfa0144e494eab4ed7c220bbaaf4--python-jinja.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/b2/5e/3a21abf3cd467d7\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/f6928bc6de9db31bbd7e7476c28575b6f9310eb39697143a66f1cf55f73a0bb1--Jinja2-3.1.3.tar.gz\n==> Fetching dependencies for python-certifi: python@3.11\n==> Fetching python-certifi\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/62b7db7e610706b3e170e04dcfd2f1b107c8e4b39b0becfbbfbaa0ff63f32df2--python-certifi.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/d4/91/c89518dd4fe1f3a\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/0686d4b1fa39220facdc3da0febf2189f1337d61214f50327804889d640ac6ff--certifi-2023.11.17.tar.gz\n==> Fetching dependencies for python-charset-normalizer: python@3.11\n==> Fetching python-charset-normalizer\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/25a53b160de51d08ae0674a33ff5940e81e7bea29a773052689a02aedbc70628--python-charset-normalizer.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/63/09/c1bc53dab74b181\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/bde996f836d603fb77954c69ab6e0b3d39183de35b2c9491a337baf635c5f1db--charset-normalizer-3.3.2.tar.gz\n==> Fetching dependencies for python-idna: python@3.11 and python-flit-core\n==> Fetching python-idna\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/8a016830e41c5fcb637b3d5c45c7f6e199077de748a581c3a06d6c27b3204afb--python-idna.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/bf/3f/ea4b9117521a1e9\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/112295d7309613d28fc84aa0ca9373703c370af24af05a97d415563adf995217--idna-3.6.tar.gz\n==> Fetching dependencies for python-urllib3: python@3.11, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers and python-hatchling\n==> Fetching python-urllib3\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/b71114540814b2c5b44bbd67f372af0f5b4ec4622284fd73eaa47b78c5deac3c--python-urllib3.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/36/dd/a6b232f449e1bc7\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/67e6683a2dd2c824fe30a37cb5ced783a39febfb6e6d2785abfb319e4ce1b046--urllib3-2.1.0.tar.gz\n==> Fetching dependencies for python-requests: python@3.11, python-certifi, python-charset-normalizer, python-flit-core, python-idna, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling and python-urllib3\n==> Fetching python-requests\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/e773d6cb65116e4c6c0885bee4d1ba133ac259e097799d275eea98a690f80eca--python-requests.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/9d/be/10918a2eac4ae9f\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/91b12b2653c78816995714b52781ee70e3584d7a04a3f7c5ea1b86b74b6f9e9c--requests-2.31.0.tar.gz\n==> Fetching dependencies for python-tabulate: python@3.11\n==> Fetching python-tabulate\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/283ced8f23d55bf5470082b0fd7a13a10e78bbf913352aec49025d7878a907ee--python-tabulate.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/ec/fe/802052aecb21e37\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/b1ab9113dce9c40ea02b9ff339fd8f2f67e32df66b14cfdfa3b2b1eaf6147cac--tabulate-0.9.0.tar.gz\n==> Fetching dependencies for sphinx-doc: python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests and python-tabulate\n==> Fetching sphinx-doc\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/248270088b2cbbdddf287aa5b63258374fc8ac792f6e6aec0eaec1e3314d10e2--sphinx-doc.rb\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/94/71/a8ee96d1fd95ca0\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/d5174e56260d7dce513f00e8bd508574e4bbab6ad0adf2744ff4791c8187fe6a--alabaster-0.7.13.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/e2/80/cfbe44a9085d112\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/0a39f3e36f63aa2b4d8fa7590fbe0840e2322db0166dd4a0998c42741a7a7cbe--Babel-2.14.0.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/a7/84/62473fb57d61e31\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/45ad40518ccfc5536d2d0c62642fc6984f2d6d914ea1f04cf38b2846d55d3e2b--imagesize-1.4.1.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/5f/ed/5ca4b2e90f4b078\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/170e957314451a4f92611e46f2129e96b70a421cad687ded4b7b9192b9619fb2--numpydoc-1.6.0.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/44/7b/af302bebf22c749\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/8dfcc491cbe0fbd3ef52a9645b55c6522e2e89c22d997618ab51f80cabf55b5a--snowballstemmer-2.2.0.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/1c/5a/fce19be5d4db26e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/a17bd81c7823c88504857d5a5980dbef198687e19250fa93dda6c3ce667305ee--sphinxcontrib_applehelp-1.0.7.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/2e/f2/6425b6db37e7c22\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/d4a03591ff6e36aedeb6e5f1766c44201494b68ea31da45a2afc2fc212d8b186--sphinxcontrib_devhelp-1.0.5.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/fd/2d/abf5cd4cc1d5cd9\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/0bbb928358abb44a2b5ed9af507989ee7a107f558cf1d6eff4640659c7923e42--sphinxcontrib_htmlhelp-2.0.4.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/b2/e8/9ed3830aeed71f1\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/72efa0fd978bb73454f7f93e31cf3d32cc3e3d3908f006a026f0391681f5d71a--sphinxcontrib-jsmath-1.0.1.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/4f/a2/53129fc967ac840\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/bfebd3f69ef7c02da216101563c0373c099aabde971a1c574b6988d5eb5ef3b4--sphinxcontrib_qthelp-1.0.6.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/5c/41/df4cd017e8234de\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/bd039cb8418d8f1052e9b4fb6366a8b058ea9fdfc0079ed44c07ef3b926fc431--sphinxcontrib_serializinghtml-1.1.9.tar.gz\n==> Downloading https://pypi.tuna.tsinghua.edu.cn/packages/73/8e/6e51da4b26665b4\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/78e7ddaaa58862f6ce89aaf1bf7747746084a4710de4285572f7ae27f1960a01--sphinx-7.2.6.tar.gz\n==> Fetching dependencies for jpeg-xl: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate and sphinx-doc\n==> Fetching jpeg-xl\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/5b8fc61b227640c39af64aa1bbc14f79bd82db70797040eab5b4f85c40b5e3e3--jpeg-xl.rb\n==> Cloning https://github.com/webmproject/sjpeg.git\nUpdating /Users/miyufeng/Library/Caches/Homebrew/jpeg-xl--sjpeg--git\norigin/HEAD set to master\nrefs/remotes/origin/master\n==> Checking out revision e5ab13008bb214deb66d5f3e17ca2f8dbff150bf\nHEAD is now at e5ab130 Merge pull request #119 from szabadka/master\nHEAD is now at e5ab130 Merge pull request #119 from szabadka/master\n==> Downloading https://github.com/libjxl/libjxl/archive/refs/tags/v0.9.1.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/10dae9c34f85af44df3590bbf57cc7304cafc4472671544a7710391811c70b47--libjxl-0.9.1.tar.gz\n==> Fetching ninja\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/ninja-1.11.1.big_su\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/bf460e1a8a94ae5f6272a53203db06ccc1d95654530def5e175b6c8135481f5b--ninja-1.11.1.big_sur.bottle.1.tar.gz\n==> Fetching meson\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/meson-1.3.1.all.bot\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/28d09db99626491092dc294a01938da34c1322e2805772486c7ed1f69b60314d--meson-1.3.1.all.bottle.tar.gz\n==> Fetching libsodium\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/ce7541331d0147933cbc2bf95be1b418d5863ac06207a50ca757ecca2a4f99ca--libsodium.rb\n==> Downloading https://download.libsodium.org/libsodium/releases/libsodium-1.0.\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/33d4c319ba604c918c50d1455bbfe3b80c34ad88a20101bc535a10174afa1335--libsodium-1.0.19.tar.gz\n==> Fetching lua\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/lua-5.4.6.big_sur.b\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/565145b52b3fc9e9044ed376b3581d3fd6557a419b46eeb9f5f153a9307a1555--lua-5.4.6.big_sur.bottle.tar.gz\n==> Fetching ncurses\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/ncurses-6.4.big_sur\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/80cee1de08b663d52e8d7135461a7fe876ccae02d49bd5cd6463423b96d365f0--ncurses-6.4.big_sur.bottle.1.tar.gz\n==> Fetching berkeley-db@5\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/berkeley-db%405-5.3\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/a6410d31395d6eb0ec66fc677b250bc7e836b409d4b52dcda8474048b8679b48--berkeley-db@5-5.3.28_1.big_sur.bottle.tar.gz\n==> Fetching gdbm\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gdbm-1.23.big_sur.b\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/92e90fcf0e255b2d100adc9d4e1fd6bf93f149f28612fa8740b1dc1adfe1348b--gdbm-1.23.big_sur.bottle.tar.gz\n==> Fetching perl\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/297b052a35daae8389abe6d963e59f184352d5be18730ffbe9e611f749979216--perl.rb\n==> Downloading https://www.cpan.org/src/5.0/perl-5.38.2.tar.xz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/59059b1694745f54d6176394f8b422739d4e28ab01f02ad4a13ffa341ddd1561--perl-5.38.2.tar.xz\n==> Fetching autoconf\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/c15c478b38a8272a0c56de168dc726be498dca4aadb986a2222420f3122668f9--autoconf.rb\n==> Downloading https://ftp.gnu.org/gnu/autoconf/autoconf-2.72.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/9a3697ed87a3692851abdc3ff90de3998d70e7ffafb4781984a7f200a19e1c43--autoconf-2.72.tar.gz\n==> Fetching libssh2\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libssh2-1.11.0_1.bi\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/d47eb51f958b7eec1519aa45d30c3c435a8629eef14ed66ca775fa26aa039e13--libssh2-1.11.0_1.big_sur.bottle.tar.gz\n==> Fetching libgit2\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libgit2-1.7.1.big_s\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/866336d55c0344766260a0df7f95fb033862a34ba06acf7159cdd4330ad401fe--libgit2-1.7.1.big_sur.bottle.tar.gz\n==> Fetching z3\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/f90d084840cd09c221e7d7305b75de57639cecc54b23a10b1b2f5d1fb3684460--z3.rb\n==> Downloading https://github.com/Z3Prover/z3/archive/refs/tags/z3-4.12.4.tar.g\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/7f4986a6b7c027372ebdf1affa351d5c892a1269886b858b162355da41b895a7--z3-z3-4.12.4.tar.gz\n==> Fetching dependencies for llvm: z3\n==> Fetching llvm\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/63a1bf028c74445d0a6bb583bab11af9f0e34a0c9950eb60b6b2224f00e21edf--llvm.rb\n==> Downloading https://raw.githubusercontent.com/Homebrew/formula-patches/23704\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/0a6947e1d87105ba00f3500f3e8cc81f2085adb907cfce8feac4478022cb266e--17.x-arm64-opt.patch\n==> Downloading https://github.com/llvm/llvm-project/releases/download/llvmorg-1\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/0f45ee25df06c0fb1fa6d0d6df4677a9487c4b95f1020855dc61f95b532eb9c0--llvm-project-17.0.6.src.tar.xz\n==> Fetching dependencies for rust: z3 and llvm\n==> Fetching rust\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/dd9f877ce50ff6035b2c8b00e10d10ca97ef7951aed627cc2d9d8c6417af2d41--rust.rb\n==> Downloading https://github.com/rust-lang/cargo/archive/refs/tags/0.76.0.tar.\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/221fe93aa7e66ce065b653bc2868c69f06668026e8fad37f6150a9a9a62e814d--cargo-0.76.0.tar.gz\n==> Downloading https://static.rust-lang.org/dist/2023-11-16/cargo-1.74.0-x86_64\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/a7bee9fc293b287688b09749e67f22f06704b2a439b44cc21cb4cd21e01db4cf--cargo-1.74.0-x86_64-apple-darwin.tar.xz\n==> Downloading https://static.rust-lang.org/dist/rustc-1.75.0-src.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/7a2b7d1cd22034c707fba211e1a52300b51442e89be4e03d89e304fe2a8d913b--rustc-1.75.0-src.tar.gz\n==> Fetching dependencies for ruby: autoconf, z3, llvm and rust\n==> Fetching ruby\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/47a540118df1beef83165a3c03a85ed9a997521e26a65dad9a19653888c81e39--ruby.rb\n==> Downloading https://rubygems.org/rubygems/rubygems-3.5.4.tgz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/d32bb5b9ca64539e005ebc2f78ac9a5f1231fa063f2625c15c99babeca1e6d81--rubygems-3.5.4.tgz\n==> Downloading https://cache.ruby-lang.org/pub/ruby/3.3/ruby-3.3.0.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/de83c59d4a835d69648b2cfd4a4db97bd16590236d6967dfd5beedc048ab1855--ruby-3.3.0.tar.gz\n==> Fetching dependencies for vim: libsodium, perl, autoconf, z3, llvm, rust and ruby\n==> Fetching vim\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/98a63f4f602ddac6b7fb4c483d601ed248dc05066231b9618474da182f44c226--vim.rb\n==> Downloading https://github.com/vim/vim/archive/refs/tags/v9.1.0.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/6a99a1c6e7e916e038eca15f8d78c7bc778c2a62651bbaa796052bbe296fb2ef--vim-9.1.0.tar.gz\n==> Fetching dependencies for libvmaf: libsodium, perl, autoconf, z3, llvm, rust, ruby and vim\n==> Fetching libvmaf\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/d552a14219d822aabae9022e6c0f81f0d98bf37ff970267246ee692660f62d5d--libvmaf.rb\n==> Downloading https://github.com/Netflix/vmaf/archive/refs/tags/v3.0.0.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/09a182a91f4cd9a0611fecb9449a5aea6875429b64bf39b3f327b24eb95dbc43--vmaf-3.0.0.tar.gz\n==> Fetching yasm\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/yasm-1.3.0_2.big_su\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/0b73f4a8a5e206f5e67986f07258c36574dfe41897e05cf302cfca787a89daea--yasm-1.3.0_2.big_sur.bottle.1.tar.gz\n==> Fetching dependencies for aom: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, libsodium, perl, autoconf, z3, llvm, rust, ruby, vim and libvmaf\n==> Fetching aom\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/03e2f19bc6749fd3a326ca3f610e4720ac462ebb49f70381d980290e8092e943--aom.rb\n==> Downloading https://media.xiph.org/video/derf/y4m/bus_qcif_15fps.y4m\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/ced756f9d1f53c598f4f2b5c3676f9a313d4102ac938a50a36d66ea7343e22bd--bus_qcif_15fps.y4m\n==> Cloning https://aomedia.googlesource.com/aom.git\nUpdating /Users/miyufeng/Library/Caches/Homebrew/aom--git\n==> Checking out tag v3.8.0\nHEAD is now at b681eac839 Update CHANGELOG for libaom 3.8.0\nHEAD is now at b681eac839 Update CHANGELOG for libaom 3.8.0\n==> Fetching dependencies for libavif: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, libsodium, perl, autoconf, z3, llvm, rust, ruby, vim, libvmaf and aom\n==> Fetching libavif\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/2b214b110649237cdb0d10e7419f9550a8a1161edf613af89ebbe4b6d7a153c6--libavif.rb\n==> Downloading https://github.com/AOMediaCodec/libavif/archive/refs/tags/v1.0.3\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/ee0da4e1ed76f4741f5708eb4ceaf1215ecbaad0c9f28d579214c12ad038f615--libavif-1.0.3.tar.gz\n==> Fetching dependencies for gd: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, libsodium, perl, autoconf, z3, llvm, rust, ruby, vim, libvmaf, aom and libavif\n==> Fetching gd\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gd-2.3.3_6.big_sur.\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/bbdbdc0e0048bdc4d62c2e4b27439bbdd1501df4155bef3f7b22e82fe53ca909--gd-2.3.3_6.big_sur.bottle.tar.gz\n==> Fetching glib\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/941a9853cf978779b9dae1fb57f82af7072a55e9bbd62754dea0799faa534795--glib.rb\n==> Downloading https://raw.githubusercontent.com/Homebrew/formula-patches/43467\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/3cff797fba2e962ee6871405f3f9c105575e25520c4eeadd25ebfe6c746d3f15--hardcoded-paths.diff\n==> Downloading https://download.gnome.org/sources/glib/2.78/glib-2.78.3.tar.xz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/ff9a80b70b4e57c34b202cb0be4137c02317d088159cc34ec191b896257fc0f9--glib-2.78.3.tar.xz\n==> Fetching jasper\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/05293ec2b26359b1fc78576a818b9ee3ce1dd8ecba48c427f58709d8130c8fb8--jasper.rb\n==> Downloading https://github.com/jasper-software/jasper/releases/download/vers\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/709737b58ef1701f953ecad64371e615ed00bb73140273e6f357bddf775b4da4--jasper-4.1.2.tar.gz\n==> Fetching dependencies for netpbm: jasper\n==> Fetching netpbm\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/87112ce208fafa992acd6d4b58588e6c2a9a9b1aafff30eaa3a672b8f20ec70c--netpbm.rb\n==> Cloning https://svn.code.sf.net/p/netpbm/code/stable\nUpdating /Users/miyufeng/Library/Caches/Homebrew/netpbm--svn\n==> Checking out 4822\n==> Fetching dependencies for gts: glib, jasper and netpbm\n==> Fetching gts\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gts-0.7.6_3.big_sur\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/069bc1a78e33d5a64ef8e69d65f10008691c220fb49462c971a92fff61429974--gts-0.7.6_3.big_sur.bottle.tar.gz\n==> Fetching xorgproto\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/xorgproto-2023.2.bi\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/8d231a0c17dcc9c3f1416bd3da23691eb7374eb7025716ab1045e5eeea002e21--xorgproto-2023.2.big_sur.bottle.tar.gz\n==> Fetching libxau\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxau-1.0.11.big_s\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/3603bb9d6f77bdf3db3c14775d1a819072853709fe8b7186ae1036cdb9d3d92f--libxau-1.0.11.big_sur.bottle.tar.gz\n==> Fetching libxdmcp\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxdmcp-1.1.4.big_\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/07c305a44c209d75535db78c5aca5ad89e02acda221d1712b156775868af8b30--libxdmcp-1.1.4.big_sur.bottle.tar.gz\n==> Fetching xcb-proto\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/xcb-proto-1.16.0.al\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/dd3af3c1189f5bfbcd69348b41572dc38459d3203980e2757765f83376643288--xcb-proto-1.16.0.all.bottle.1.tar.gz\n==> Fetching libxcb\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/c1cbe724372835fcf610344e945e4be02e192c7827925778e19821e263bae80f--libxcb.rb\n==> Downloading https://xorg.freedesktop.org/archive/individual/lib/libxcb-1.16.\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/727dddf4e04c0611cdfea968cc375691595942339e442e8716fa3bd9549049c1--libxcb-1.16.tar.xz\n==> Fetching util-macros\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/util-macros-1.20.0.\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/8bdf39b202c70f5bd4384b4a2857a073c8f85cbb534511ea8e34c8e5e88efc34--util-macros-1.20.0.big_sur.bottle.tar.gz\n==> Fetching xtrans\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/xtrans-1.5.0.all.bo\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/08847d758532c6a4f7989d3853ed1f8b160a67e9637c943219884202c159ff37--xtrans-1.5.0.all.bottle.2.tar.gz\n==> Fetching dependencies for libx11: libxcb\n==> Fetching libx11\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/be6bf6628bc9e880010c47822b2f9fa3c21dd65956c7c9d17dff4dfab5937f71--libx11.rb\n==> Downloading https://www.x.org/archive/individual/lib/libX11-1.8.7.tar.gz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/dfd7993a89ca0991b36ac91ae831015fd92550c0ca94053fa896cdaa49b23f7b--libX11-1.8.7.tar.gz\n==> Fetching dependencies for libxext: libxcb and libx11\n==> Fetching libxext\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxext-1.3.5.big_s\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/40d572fa5c3ece24aababef40bfd549a4c47f5f6eec3a1a110f140fbaae6170e--libxext-1.3.5.big_sur.bottle.tar.gz\n==> Fetching dependencies for libxrender: libxcb and libx11\n==> Fetching libxrender\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxrender-0.9.11.b\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/4288765f0e5fe6b5c86fda40a442487c96aa22048777a4e2088052ef20937d3a--libxrender-0.9.11.big_sur.bottle.tar.gz\n==> Fetching lzo\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/lzo-2.10.big_sur.bo\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/fc1c2830d8139db5277e1a943a416b0840eaa08937b7aaf2d473f1d0310baa08--lzo-2.10.big_sur.bottle.tar.gz\n==> Fetching pixman\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/pixman-0.42.2.big_s\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/d5f3921c230d120e9654f2c9ed7df4413e0697b7ae4162a7f0f0715e475f364e--pixman-0.42.2.big_sur.bottle.1.tar.gz\n==> Fetching dependencies for cairo: glib, libxcb and libx11\n==> Fetching cairo\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> Downloading https://cairographics.org/releases/cairo-1.18.0.tar.xz\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/64a9224202ec01f036561637599fe1749f87c4619b747d0143d97299cd458996--cairo-1.18.0.tar.xz\n==> Fetching dependencies for gdk-pixbuf: glib\n==> Fetching gdk-pixbuf\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gdk-pixbuf-2.42.10_\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/241eda424ca9a6f01faed99dba7018e33366eaa5feeba2cae4f199d8cf1b082f--gdk-pixbuf-2.42.10_1.big_sur.bottle.tar.gz\n==> Fetching fribidi\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/fribidi-1.0.13.big_\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/ac137160a3e76c1cc4f0f0bcb78d8794a02e83f59494c6696c4bda84e3299476--fribidi-1.0.13.big_sur.bottle.tar.gz\n==> Fetching graphite2\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/graphite2-1.3.14.bi\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/fb48f8f10501d642a8be70f6273fc86f268f77ca5d6153b6a0fb4f95b21d44f3--graphite2-1.3.14.big_sur.bottle.tar.gz\n==> Fetching dependencies for gobject-introspection: glib, libxcb, libx11 and cairo\n==> Fetching gobject-introspection\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> Downloading https://gitlab.gnome.org/tschoonj/gobject-introspection/-/commit\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/8b05b2a9de1da2191fe40b8fb80652d77efaa426382912d3d850e303bcf08d38--a7be304478b25271166cd92d110f251a8742d16b.diff\n==> Downloading https://download.gnome.org/sources/gobject-introspection/1.78/go\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/c9bae6da8be051e9f93b8287293bed755097d06184a1b68c8f0b74c8eebc3241--gobject-introspection-1.78.1.tar.xz\n==> Fetching dependencies for harfbuzz: glib, libxcb, libx11, cairo and gobject-introspection\n==> Fetching harfbuzz\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> Downloading https://github.com/harfbuzz/harfbuzz/raw/fc0daafab0336b847ac1468\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/b0f20064588dc70dd5c74e36b842326d9dbbeacab35c63c3d900a8b34aaba98f--270b89df543a7e48e206a2d830c0e10e5265c630.ttf\n==> Downloading https://github.com/harfbuzz/harfbuzz/archive/refs/tags/8.3.0.tar\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/1096cc02bd4f36f3a14498ff83285d3a72972d5239abc239bf5541f7dcc98aef--harfbuzz-8.3.0.tar.gz\n==> Fetching dependencies for pango: glib, libxcb, libx11, cairo, gobject-introspection and harfbuzz\n==> Fetching pango\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/pango-1.50.14.big_s\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/244f3ce4bb97e5a296f4029f14b7de16db19177ef681726bf4b44469538daa62--pango-1.50.14.big_sur.bottle.tar.gz\n==> Fetching dependencies for librsvg: glib, libxcb, libx11, cairo, gobject-introspection, harfbuzz, z3, llvm and rust\n==> Fetching librsvg\n==> Downloading https://raw.githubusercontent.com/Homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> Downloading https://download.gnome.org/sources/librsvg/2.57/librsvg-2.57.1.t\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/460d64882a6a360b24bb8bc1e7861490ab46be3f77bdf020555114c137d29dcb--librsvg-2.57.1.tar.xz\n==> Fetching graphviz\n==> Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/graphviz-9.0.0.big_\nAlready downloaded: /Users/miyufeng/Library/Caches/Homebrew/downloads/391f47e6ff149bb1c412a681479432da871247c342be1260f399bc47a574c2ef--graphviz-9.0.0.big_sur.bottle.tar.gz\n==> Installing dependencies for graphviz: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, ninja, meson, libsodium, lua, ncurses, berkeley-db@5, gdbm, perl, autoconf, libssh2, libgit2, z3, llvm, rust, ruby, vim, libvmaf, yasm, aom, libavif, gd, glib, jasper, netpbm, gts, xorgproto, libxau, libxdmcp, xcb-proto, libxcb, util-macros, xtrans, libx11, libxext, libxrender, lzo, pixman, cairo, gdk-pixbuf, fribidi, graphite2, gobject-introspection, harfbuzz, pango and librsvg\n==> Installing graphviz dependency: doxygen\nWarning: A newer Command Line Tools release is available.\nUpdate them from Software Update in System Preferences.\n\nIf that doesn\'t show you any updates, run:\n  sudo rm -rf /Library/Developer/CommandLineTools\n  sudo xcode-select --install\n\nAlternatively, manually download them from:\n  https://developer.apple.com/download/all/.\nYou should download the Command Line Tools for Xcode 13.2.1.\n\n==> Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api/formul\n-=O=-                                                                       ###\ncurl: (6) Could not resolve host: mirrors.tuna.tsinghua.edu.cn\n==> Downloading https://formulae.brew.sh/api/formula.jws.json\n######################################################################### 100.0%\n==> cmake -S . -B build -DPYTHON_EXECUTABLE=/usr/bin/python3\nLast 15 lines from /Users/miyufeng/Library/Logs/Homebrew/doxygen/01.cmake:\n-- Found Threads: TRUE  \n-- Looking for iconv_open\n-- Looking for iconv_open - not found\n-- Performing Test ICONV_COMPILES\n-- Performing Test ICONV_COMPILES - Success\n-- Found Iconv: /Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/lib/libiconv.tbd  \n-- One (and only one) of the ICONV_ACCEPTS_... tests must pass\n-- Performing Test ICONV_ACCEPTS_NONCONST_INPUT\n-- Performing Test ICONV_ACCEPTS_NONCONST_INPUT - Success\n-- Performing Test ICONV_ACCEPTS_CONST_INPUT\n-- Performing Test ICONV_ACCEPTS_CONST_INPUT - Failed\n-- Build spdlog: 1.11.0\n-- Build type: Release\n-- The javacc executable not found, using existing files\n-- Configuring incomplete, errors occurred!\n\nDo not report this issue to Homebrew/brew or Homebrew/homebrew-core!\n\n\nError: You are using macOS 11.\nWe (and Apple) do not provide support for this old version.\nIt is expected behaviour that some formulae will fail to build in this old version.\nIt is expected behaviour that Homebrew will be buggy and slow.\nDo not create any issues about this on Homebrew\'s GitHub repositories.\nDo not create any issues even if you think this message is unrelated.\nAny opened issues will be immediately closed without response.\nDo not ask for help from Homebrew or its maintainers on social media.\nYou may ask for help in Homebrew\'s discussions but are unlikely to receive a response.\nTry to figure out the problem yourself and submit a fix as a pull request.\nWe will review it but may or may not accept it.\n\n\nError: A newer Command Line Tools release is available.\nUpdate them from Software Update in System Preferences.\n\nIf that doesn\'t show you any updates, run:\n  sudo rm -rf /Library/Developer/CommandLineTools\n  sudo xcode-select --install\n\nAlternatively, manually download them from:\n  https://developer.apple.com/download/all/.\nYou should download the Command Line Tools for Xcode 13.2.1.\n',normalizedContent:'# plantuml--问题\n\n\n\n\n\n\n# 使用远程服务\n\n\n# vscode\n\n修改为\n\n\n# idea\n\n\n\n\n# 使用本地服务\n\n> 安装graphviz（下载地址）\n\n\n# windows(未亲测)\n\n安装graphviz（下载地址）\n\n本文使用的是windows 64位的版本，下载完成之后双击安装（记住安装目录哈，后面需要）；\n\n本文安装到d盘下（d:\\program files\\graphviz）\n\n\n\n实战画c4架构图\n\n下载c4-model的lib库到本地，后续画图使用(*下载地址*)\n\n本文下载的是目前最新的版本v2.5.0\n\n\n\n下载后解压，本文解压到d:\\work\\c4\\ 目录下，实际上我们只需要根目录中的c4_开头的文件；\n\n\n\n开始画c4架构图\n\n@startuml\n!relative_include="d:\\work\\c4\\c4-plantuml-2.5.0\\"\n!include d:\\work\\c4\\c4-plantuml-2.5.0\\c4_container.puml\n\nperson(admin, "administrator")\nsystem_boundary(c1, "sample system") {\n    container(web_app, "web application", "c#, asp.net core 2.1 mvc", "allows users to compare multiple twitter timelines")\n}\nsystem(twitter, "twitter")\n\nrel(admin, web_app, "uses", "https")\nrel(web_app, twitter, "gets tweets from", "https")\n@enduml\n\n\n> !relative_include="d:\\work\\c4\\c4-plantuml-2.5.0" 这段代码如果不设置，则默认会去https://raw.githubusercontent.com/plantuml-stdlib/c4-plantuml/ 访问对应版本的puml文件，如果网速不好会报错，所以还是建议设置成本地的资源； !include d:\\work\\c4\\c4-plantuml-2.5.0\\c4_container.puml 指定容器的资源文件路径\n\n\n\n至于其他的语法说明，可以去c4-plantuml 的github地址查询；\n\n\n# mac（使用本地服务）\n\n未安装 graphviz\n\n# macos\n# 先下载 graphviz，然后查看 dot 是否安装成功\nbrew install graphviz\ndot -version\n\n\nsudo mkdir -p /opt/local/bin\nsudo cp /opt/homebrew/cellar/graphviz/2.49.3/bin/dot /opt/local/bin\n\n\n重启 idea\n\ngraphviz 官网地址： http://www.graphviz.org/download/\n\n# mac m1 brew install graphviz报错 (网络收集)\n\ndoubleq@doubleq ~ % brew install graphviz\n\nrunning `brew update --auto-update`...\nerror: cannot install in homebrew on arm processor in intel default prefix (/usr/local)!\nplease create a new installation in /opt/homebrew using one of the\n"alternative installs" from:\n  https://docs.brew.sh/installation\nyou can migrate your previously installed formula list with:\n  brew bundle dump\n\n\n\n根据报错提示，需要将命令行从arm指令集切换到x86指令集，因此在命令前加一个arch -x86_64即可正常安装\n\narch -x86_64 brew install graphviz\n\n\n如果要在python中运行utils.plot_model(model)，可能还需要一次重启。\n\n参考：https://medium.com/swlh/run-x86-terminal-apps-like-homebrew-on-your-new-m1-mac-73bdc9b0f343\n\n\n# 动手安装失败过程记录\n\n> 系统信息\n\n\n\n> 官网安装方式\n\n/bin/bash -c "$(curl -fssl https://raw.githubusercontent.com/homebrew/install/head/install.sh)"\n\n\n# 进入brew本地仓库，找到.git文件夹，然后打开config文件：\ncd "$(brew --repo)"\n\n# 在config文件中找到[remote "origin"]模块，将url修改为：url = https://mirrors.aliyun.com/homebrew/brew.git\nvim .git/config\n\n修改后，文件格式如下：\n[core]  repositoryformatversion = 0  filemode = true  bare = false  logallrefupdates = true  symlinks = false  ignorecase = true  autocrlf = input[remote "origin"]  url = https://mirrors.aliyun.com/homebrew/brew.git  fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]  remote = origin  merge = refs/heads/master\n\n\n测试brew是否工作正常\n\nbrew update\n如果能看到以下输出，则说明brew已经成功安装并且配置了国内镜像：\nupdated 1 tap (homebrew/core).==> updated formulae...\n\n\n> 国内脚本安装方式\n\nhttps://blog.csdn.net/w_fe5/article/details/134428377?spm=1001.2014.3001.5501\n\n/bin/zsh -c "$(curl -fssl https://gitee.com/cunkai/homebrewcn/raw/master/homebrew.sh)"\n\n\n该地址提供多个国内源地址\n\n\n\n> warning: formula.json: update failed, falling back to cached version.\n> error: cannot download non-corrupt https://formulae.brew.sh/api/formula.json!\n> error: kernel.exit\n\n> brew install nginx报错operation too slow. less than 100 bytes/sec transferred the last 5 seconds\n\nexport homebrew_no_install_from_api=1\n\n\n> curl: (35) libressl ssl_connect: ssl_error_syscall in connection to raw.githubusercontent.com:443 error: graphviz: failed to download resource "libx11.rb"\n\n\n\n上科技\n\n\n\n> error: a newer command line tools release is available.\n> \n> update them from software update in system preferences.\n\n\n\nmiyufeng@macbook-pro ~ % llvm-gcc --version\napple clang version 12.0.5 (clang-1205.0.22.11)\ntarget: x86_64-apple-darwin20.3.0\nthread model: posix\ninstalleddir: /library/developer/commandlinetools/usr/bin\nmiyufeng@macbook-pro ~ % \n\n\nhttps://developer.apple.com/download/all/\n\n\n\n\n\n访问 : https://developer.apple.com/download/more/\n\n去下载最新的command line tools for xcode 12.5 beta入下图\n\n> 完成报文\n\nmiyufeng@macbook-pro ~ % brew install graphviz\nwarning: you are using macos 11.\nwe (and apple) do not provide support for this old version.\nit is expected behaviour that some formulae will fail to build in this old version.\nit is expected behaviour that homebrew will be buggy and slow.\ndo not create any issues about this on homebrew\'s github repositories.\ndo not create any issues even if you think this message is unrelated.\nany opened issues will be immediately closed without response.\ndo not ask for help from homebrew or its maintainers on social media.\nyou may ask for help in homebrew\'s discussions but are unlikely to receive a response.\ntry to figure out the problem yourself and submit a fix as a pull request.\nwe will review it but may or may not accept it.\n\n==> fetching dependencies for graphviz: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, ninja, meson, libsodium, lua, ncurses, berkeley-db@5, gdbm, perl, autoconf, libssh2, libgit2, z3, llvm, rust, ruby, vim, libvmaf, yasm, aom, libavif, gd, glib, jasper, netpbm, gts, xorgproto, libxau, libxdmcp, xcb-proto, libxcb, util-macros, xtrans, libx11, libxext, libxrender, lzo, pixman, cairo, gdk-pixbuf, fribidi, graphite2, gobject-introspection, harfbuzz, pango and librsvg\n==> fetching doxygen\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/24a15b0996cf9739b75d02b460418caeffff0781bed5863865de9aefb11fb77d--doxygen.rb\n==> downloading https://doxygen.nl/files/doxygen-1.10.0.src.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/57ac36faf2c88ea162775e6223fd62edc274d310dbbbf486fb730b16b3d0ea1a--doxygen-1.10.0.src.tar.gz\n==> fetching python@3.11\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/749bbc537869aeb8582a7d6433d6f40e85b411f62593aaf7e0ae1032ae16b648--python@3.11.rb\n==> downloading https://raw.githubusercontent.com/homebrew/formula-patches/6d2fb\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/2322057182c6bb73dfe09e098010168a5a9d0712a89cee86d2c5ddb11052137e--3.11-sysconfig.diff\n==> downloading https://raw.githubusercontent.com/homebrew/formula-patches/a1618\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/5fea40db1cb33001d6ab42c76fc28693ce292532c6ed6f89dd3154dac29167bb--3.10-distutils-scheme.diff\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/c4/e6/c1ac50fe3eebb38\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/839df6b8e58f6ef46c0ebc33871e2b489d13182f2bf3bc2b56d90105181d04b9--flit_core-3.9.0.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/1f/7f/4da15e07ccd11c8\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/a1ddf9e52c9a8fe75212d70a357f96cf367e70e22377cc9dfcaa20a96cc9c0e0--pip-23.3.1.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/4b/d9/d0cf66484b7e28a\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/7a906866f4634a5422362200ce21b315c747b23f769ab867eee3560f0fb5b29b--setuptools-69.0.2.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/b0/b4/bc2baae3970c282\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/dc136e605b75d715777b384e9d3de56ba92e05f28a38d3781ca332969e5e72b8--wheel-0.42.0.tar.gz\n==> downloading https://www.python.org/ftp/python/3.11.7/python-3.11.7.tgz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/5ba08911f318adee9027b1d563857d05ec6f1a19fcf960884db72e42e52cd1a8--python-3.11.7.tgz\n==> fetching dependencies for docutils: python@3.11\n==> fetching docutils\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/5838df242d76d886fab71bc8592b2e7d36ee75cc4a8476e53bc575f402d5748b--docutils.rb\n==> downloading https://downloads.sourceforge.net/project/docutils/docutils/0.20\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/843f96fc0be572750995ce1ef90118c1956086c462a39e2f211f124301e3a3a1--docutils-0.20.1.tar.gz\n==> fetching dependencies for python-flit-core: python@3.11\n==> fetching python-flit-core\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/515babbda4501c91d7799a7c76cd7f1b3e83125d75f9cbe21c48814bc4524bf9--python-flit-core.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/c4/e6/c1ac50fe3eebb38\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/839df6b8e58f6ef46c0ebc33871e2b489d13182f2bf3bc2b56d90105181d04b9--flit_core-3.9.0.tar.gz\n==> fetching dependencies for python-packaging: python@3.11 and python-flit-core\n==> fetching python-packaging\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/e3ec422cabfe647405377c98c49c6afa430d7de271342ab55e289f2c27634f50--python-packaging.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/fb/2b/9b9c33ffed44ee9\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/9d7d2aa4ba81f8928729aade5f00d3f4b0f28b47e86172b82572f01e0f3d6f34--packaging-23.2.tar.gz\n==> fetching dependencies for python-pathspec: python@3.11 and python-flit-core\n==> fetching python-pathspec\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/e54b9ac26066f8ad3b7b285bab114d5470e7a927fe4615cc8a4c88cc24b26de4--python-pathspec.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/ca/bc/f35b8446f4531a7\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/ccfc7d92462262825087899a1226cad29ba695c7c57210887120ee59b7a349b3--pathspec-0.12.1.tar.gz\n==> fetching dependencies for python-typing-extensions: python@3.11 and python-flit-core\n==> fetching python-typing-extensions\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/04297613aec4b54edc16b6dd52eb738c6d33b69c646d3be552503793cabe9979--python-typing-extensions.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/0c/1d/eb26f5e75100d53\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/246e971161d08a556e1042cb36552401fb368ee0ccd4464487eb21cdb2d16d31--typing_extensions-4.9.0.tar.gz\n==> fetching dependencies for python-setuptools-scm: python@3.11, python-flit-core, python-packaging and python-typing-extensions\n==> fetching python-setuptools-scm\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/f4607b85a0ee0ad65ff81f60889c7e6ef23a8a7e492bfefa43994a3be063a9d7--python-setuptools-scm.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/eb/b1/0248705f10f6de5\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/cdca6eaa7fdada79a66e000c3dc1adebddd96b6b16d55b16b97792de26a778c3--setuptools-scm-8.0.4.tar.gz\n==> fetching dependencies for python-pluggy: python@3.11, python-flit-core, python-packaging, python-typing-extensions and python-setuptools-scm\n==> fetching python-pluggy\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/e96e1f546a229c311d24d27c037b8848dc6bc953eecb3fdfa3c959139459d14b--python-pluggy.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/36/51/04defc761583568\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/26d2ffe2e1bb5f900de09aea227b29cbc7025b768c829f6bde8b2236cba00491--pluggy-1.3.0.tar.gz\n==> fetching dependencies for python-trove-classifiers: python@3.11\n==> fetching python-trove-classifiers\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/e69d19f498e42c3c5df4c792ea23f78ac4fd4fd1e22c51d44aaf5881e1b8e7d5--python-trove-classifiers.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/44/e4/9de7cda4a03a996\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/6d252c9a90b8d6a905a14ef0006fa13d62fb564ca4f9f470d83c578b9d0a6cd4--trove-classifiers-2024.1.8.tar.gz\n==> fetching dependencies for python-hatchling: python@3.11, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy and python-trove-classifiers\n==> fetching python-hatchling\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/a5fa394260767700ab5ba62a4148eb2f140bf91bded5ecfa3d397c7c9512c4b4--python-hatchling.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/37/4a/986d35164e2033d\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/f95a1ff11b6fa51db04a297e5c4c16a78dc595b0f52557ef277ffbddcab949a1--editables-0.5.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/fb/2b/9b9c33ffed44ee9\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/9d7d2aa4ba81f8928729aade5f00d3f4b0f28b47e86172b82572f01e0f3d6f34--packaging-23.2.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/ca/bc/f35b8446f4531a7\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/ccfc7d92462262825087899a1226cad29ba695c7c57210887120ee59b7a349b3--pathspec-0.12.1.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/36/51/04defc761583568\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/26d2ffe2e1bb5f900de09aea227b29cbc7025b768c829f6bde8b2236cba00491--pluggy-1.3.0.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/3d/14/fe9a127564317f1\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/09f380e4051b1fd55b49af38d8a8bc2374fe2377baae26be79f9e1c6a84bca8c--trove-classifiers-2023.11.29.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/fd/4a/8196e79c0d6e5eb\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/063e900f664aa897b2ab83437d720f6eb849f37bff3e9411cdddcedf21cad896--hatchling-1.21.0.tar.gz\n==> fetching dependencies for pygments: python@3.11, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers and python-hatchling\n==> fetching pygments\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/c1ac9fec393b1be558b4217a5a685c6df25842d4df736a27ffc497a0afe079d0--pygments.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/55/59/8bccf4157baf25e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/c2dfc0b992035dbafaa9c5c52670f31475c2835f3958dfa05ac840d3d89e5a23--pygments-2.17.2.tar.gz\n==> fetching dependencies for python-markupsafe: python@3.11\n==> fetching python-markupsafe\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/da5afe994016b2151b5d87c5d7d67f10345ec2d52f4e44fe5f054591ff8c8bf8--python-markupsafe.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/6d/7c/59a3248f411813f\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/63977516113ec5e29e0456a66712484bf0279ff145f659359014f40dc4a65ba6--markupsafe-2.1.3.tar.gz\n==> fetching dependencies for python-jinja: python@3.11 and python-markupsafe\n==> fetching python-jinja\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/d5cc9863d7ec96f40896f0a5d064b26015eacfa0144e494eab4ed7c220bbaaf4--python-jinja.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/b2/5e/3a21abf3cd467d7\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/f6928bc6de9db31bbd7e7476c28575b6f9310eb39697143a66f1cf55f73a0bb1--jinja2-3.1.3.tar.gz\n==> fetching dependencies for python-certifi: python@3.11\n==> fetching python-certifi\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/62b7db7e610706b3e170e04dcfd2f1b107c8e4b39b0becfbbfbaa0ff63f32df2--python-certifi.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/d4/91/c89518dd4fe1f3a\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/0686d4b1fa39220facdc3da0febf2189f1337d61214f50327804889d640ac6ff--certifi-2023.11.17.tar.gz\n==> fetching dependencies for python-charset-normalizer: python@3.11\n==> fetching python-charset-normalizer\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/25a53b160de51d08ae0674a33ff5940e81e7bea29a773052689a02aedbc70628--python-charset-normalizer.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/63/09/c1bc53dab74b181\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/bde996f836d603fb77954c69ab6e0b3d39183de35b2c9491a337baf635c5f1db--charset-normalizer-3.3.2.tar.gz\n==> fetching dependencies for python-idna: python@3.11 and python-flit-core\n==> fetching python-idna\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/8a016830e41c5fcb637b3d5c45c7f6e199077de748a581c3a06d6c27b3204afb--python-idna.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/bf/3f/ea4b9117521a1e9\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/112295d7309613d28fc84aa0ca9373703c370af24af05a97d415563adf995217--idna-3.6.tar.gz\n==> fetching dependencies for python-urllib3: python@3.11, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers and python-hatchling\n==> fetching python-urllib3\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/b71114540814b2c5b44bbd67f372af0f5b4ec4622284fd73eaa47b78c5deac3c--python-urllib3.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/36/dd/a6b232f449e1bc7\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/67e6683a2dd2c824fe30a37cb5ced783a39febfb6e6d2785abfb319e4ce1b046--urllib3-2.1.0.tar.gz\n==> fetching dependencies for python-requests: python@3.11, python-certifi, python-charset-normalizer, python-flit-core, python-idna, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling and python-urllib3\n==> fetching python-requests\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/e773d6cb65116e4c6c0885bee4d1ba133ac259e097799d275eea98a690f80eca--python-requests.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/9d/be/10918a2eac4ae9f\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/91b12b2653c78816995714b52781ee70e3584d7a04a3f7c5ea1b86b74b6f9e9c--requests-2.31.0.tar.gz\n==> fetching dependencies for python-tabulate: python@3.11\n==> fetching python-tabulate\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/283ced8f23d55bf5470082b0fd7a13a10e78bbf913352aec49025d7878a907ee--python-tabulate.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/ec/fe/802052aecb21e37\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/b1ab9113dce9c40ea02b9ff339fd8f2f67e32df66b14cfdfa3b2b1eaf6147cac--tabulate-0.9.0.tar.gz\n==> fetching dependencies for sphinx-doc: python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests and python-tabulate\n==> fetching sphinx-doc\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/248270088b2cbbdddf287aa5b63258374fc8ac792f6e6aec0eaec1e3314d10e2--sphinx-doc.rb\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/94/71/a8ee96d1fd95ca0\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/d5174e56260d7dce513f00e8bd508574e4bbab6ad0adf2744ff4791c8187fe6a--alabaster-0.7.13.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/e2/80/cfbe44a9085d112\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/0a39f3e36f63aa2b4d8fa7590fbe0840e2322db0166dd4a0998c42741a7a7cbe--babel-2.14.0.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/a7/84/62473fb57d61e31\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/45ad40518ccfc5536d2d0c62642fc6984f2d6d914ea1f04cf38b2846d55d3e2b--imagesize-1.4.1.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/5f/ed/5ca4b2e90f4b078\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/170e957314451a4f92611e46f2129e96b70a421cad687ded4b7b9192b9619fb2--numpydoc-1.6.0.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/44/7b/af302bebf22c749\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/8dfcc491cbe0fbd3ef52a9645b55c6522e2e89c22d997618ab51f80cabf55b5a--snowballstemmer-2.2.0.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/1c/5a/fce19be5d4db26e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/a17bd81c7823c88504857d5a5980dbef198687e19250fa93dda6c3ce667305ee--sphinxcontrib_applehelp-1.0.7.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/2e/f2/6425b6db37e7c22\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/d4a03591ff6e36aedeb6e5f1766c44201494b68ea31da45a2afc2fc212d8b186--sphinxcontrib_devhelp-1.0.5.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/fd/2d/abf5cd4cc1d5cd9\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/0bbb928358abb44a2b5ed9af507989ee7a107f558cf1d6eff4640659c7923e42--sphinxcontrib_htmlhelp-2.0.4.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/b2/e8/9ed3830aeed71f1\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/72efa0fd978bb73454f7f93e31cf3d32cc3e3d3908f006a026f0391681f5d71a--sphinxcontrib-jsmath-1.0.1.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/4f/a2/53129fc967ac840\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/bfebd3f69ef7c02da216101563c0373c099aabde971a1c574b6988d5eb5ef3b4--sphinxcontrib_qthelp-1.0.6.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/5c/41/df4cd017e8234de\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/bd039cb8418d8f1052e9b4fb6366a8b058ea9fdfc0079ed44c07ef3b926fc431--sphinxcontrib_serializinghtml-1.1.9.tar.gz\n==> downloading https://pypi.tuna.tsinghua.edu.cn/packages/73/8e/6e51da4b26665b4\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/78e7ddaaa58862f6ce89aaf1bf7747746084a4710de4285572f7ae27f1960a01--sphinx-7.2.6.tar.gz\n==> fetching dependencies for jpeg-xl: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate and sphinx-doc\n==> fetching jpeg-xl\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/5b8fc61b227640c39af64aa1bbc14f79bd82db70797040eab5b4f85c40b5e3e3--jpeg-xl.rb\n==> cloning https://github.com/webmproject/sjpeg.git\nupdating /users/miyufeng/library/caches/homebrew/jpeg-xl--sjpeg--git\norigin/head set to master\nrefs/remotes/origin/master\n==> checking out revision e5ab13008bb214deb66d5f3e17ca2f8dbff150bf\nhead is now at e5ab130 merge pull request #119 from szabadka/master\nhead is now at e5ab130 merge pull request #119 from szabadka/master\n==> downloading https://github.com/libjxl/libjxl/archive/refs/tags/v0.9.1.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/10dae9c34f85af44df3590bbf57cc7304cafc4472671544a7710391811c70b47--libjxl-0.9.1.tar.gz\n==> fetching ninja\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/ninja-1.11.1.big_su\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/bf460e1a8a94ae5f6272a53203db06ccc1d95654530def5e175b6c8135481f5b--ninja-1.11.1.big_sur.bottle.1.tar.gz\n==> fetching meson\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/meson-1.3.1.all.bot\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/28d09db99626491092dc294a01938da34c1322e2805772486c7ed1f69b60314d--meson-1.3.1.all.bottle.tar.gz\n==> fetching libsodium\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/ce7541331d0147933cbc2bf95be1b418d5863ac06207a50ca757ecca2a4f99ca--libsodium.rb\n==> downloading https://download.libsodium.org/libsodium/releases/libsodium-1.0.\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/33d4c319ba604c918c50d1455bbfe3b80c34ad88a20101bc535a10174afa1335--libsodium-1.0.19.tar.gz\n==> fetching lua\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/lua-5.4.6.big_sur.b\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/565145b52b3fc9e9044ed376b3581d3fd6557a419b46eeb9f5f153a9307a1555--lua-5.4.6.big_sur.bottle.tar.gz\n==> fetching ncurses\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/ncurses-6.4.big_sur\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/80cee1de08b663d52e8d7135461a7fe876ccae02d49bd5cd6463423b96d365f0--ncurses-6.4.big_sur.bottle.1.tar.gz\n==> fetching berkeley-db@5\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/berkeley-db%405-5.3\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/a6410d31395d6eb0ec66fc677b250bc7e836b409d4b52dcda8474048b8679b48--berkeley-db@5-5.3.28_1.big_sur.bottle.tar.gz\n==> fetching gdbm\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gdbm-1.23.big_sur.b\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/92e90fcf0e255b2d100adc9d4e1fd6bf93f149f28612fa8740b1dc1adfe1348b--gdbm-1.23.big_sur.bottle.tar.gz\n==> fetching perl\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/297b052a35daae8389abe6d963e59f184352d5be18730ffbe9e611f749979216--perl.rb\n==> downloading https://www.cpan.org/src/5.0/perl-5.38.2.tar.xz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/59059b1694745f54d6176394f8b422739d4e28ab01f02ad4a13ffa341ddd1561--perl-5.38.2.tar.xz\n==> fetching autoconf\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/c15c478b38a8272a0c56de168dc726be498dca4aadb986a2222420f3122668f9--autoconf.rb\n==> downloading https://ftp.gnu.org/gnu/autoconf/autoconf-2.72.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/9a3697ed87a3692851abdc3ff90de3998d70e7ffafb4781984a7f200a19e1c43--autoconf-2.72.tar.gz\n==> fetching libssh2\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libssh2-1.11.0_1.bi\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/d47eb51f958b7eec1519aa45d30c3c435a8629eef14ed66ca775fa26aa039e13--libssh2-1.11.0_1.big_sur.bottle.tar.gz\n==> fetching libgit2\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libgit2-1.7.1.big_s\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/866336d55c0344766260a0df7f95fb033862a34ba06acf7159cdd4330ad401fe--libgit2-1.7.1.big_sur.bottle.tar.gz\n==> fetching z3\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/f90d084840cd09c221e7d7305b75de57639cecc54b23a10b1b2f5d1fb3684460--z3.rb\n==> downloading https://github.com/z3prover/z3/archive/refs/tags/z3-4.12.4.tar.g\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/7f4986a6b7c027372ebdf1affa351d5c892a1269886b858b162355da41b895a7--z3-z3-4.12.4.tar.gz\n==> fetching dependencies for llvm: z3\n==> fetching llvm\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/63a1bf028c74445d0a6bb583bab11af9f0e34a0c9950eb60b6b2224f00e21edf--llvm.rb\n==> downloading https://raw.githubusercontent.com/homebrew/formula-patches/23704\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/0a6947e1d87105ba00f3500f3e8cc81f2085adb907cfce8feac4478022cb266e--17.x-arm64-opt.patch\n==> downloading https://github.com/llvm/llvm-project/releases/download/llvmorg-1\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/0f45ee25df06c0fb1fa6d0d6df4677a9487c4b95f1020855dc61f95b532eb9c0--llvm-project-17.0.6.src.tar.xz\n==> fetching dependencies for rust: z3 and llvm\n==> fetching rust\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/dd9f877ce50ff6035b2c8b00e10d10ca97ef7951aed627cc2d9d8c6417af2d41--rust.rb\n==> downloading https://github.com/rust-lang/cargo/archive/refs/tags/0.76.0.tar.\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/221fe93aa7e66ce065b653bc2868c69f06668026e8fad37f6150a9a9a62e814d--cargo-0.76.0.tar.gz\n==> downloading https://static.rust-lang.org/dist/2023-11-16/cargo-1.74.0-x86_64\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/a7bee9fc293b287688b09749e67f22f06704b2a439b44cc21cb4cd21e01db4cf--cargo-1.74.0-x86_64-apple-darwin.tar.xz\n==> downloading https://static.rust-lang.org/dist/rustc-1.75.0-src.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/7a2b7d1cd22034c707fba211e1a52300b51442e89be4e03d89e304fe2a8d913b--rustc-1.75.0-src.tar.gz\n==> fetching dependencies for ruby: autoconf, z3, llvm and rust\n==> fetching ruby\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/47a540118df1beef83165a3c03a85ed9a997521e26a65dad9a19653888c81e39--ruby.rb\n==> downloading https://rubygems.org/rubygems/rubygems-3.5.4.tgz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/d32bb5b9ca64539e005ebc2f78ac9a5f1231fa063f2625c15c99babeca1e6d81--rubygems-3.5.4.tgz\n==> downloading https://cache.ruby-lang.org/pub/ruby/3.3/ruby-3.3.0.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/de83c59d4a835d69648b2cfd4a4db97bd16590236d6967dfd5beedc048ab1855--ruby-3.3.0.tar.gz\n==> fetching dependencies for vim: libsodium, perl, autoconf, z3, llvm, rust and ruby\n==> fetching vim\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/98a63f4f602ddac6b7fb4c483d601ed248dc05066231b9618474da182f44c226--vim.rb\n==> downloading https://github.com/vim/vim/archive/refs/tags/v9.1.0.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/6a99a1c6e7e916e038eca15f8d78c7bc778c2a62651bbaa796052bbe296fb2ef--vim-9.1.0.tar.gz\n==> fetching dependencies for libvmaf: libsodium, perl, autoconf, z3, llvm, rust, ruby and vim\n==> fetching libvmaf\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/d552a14219d822aabae9022e6c0f81f0d98bf37ff970267246ee692660f62d5d--libvmaf.rb\n==> downloading https://github.com/netflix/vmaf/archive/refs/tags/v3.0.0.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/09a182a91f4cd9a0611fecb9449a5aea6875429b64bf39b3f327b24eb95dbc43--vmaf-3.0.0.tar.gz\n==> fetching yasm\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/yasm-1.3.0_2.big_su\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/0b73f4a8a5e206f5e67986f07258c36574dfe41897e05cf302cfca787a89daea--yasm-1.3.0_2.big_sur.bottle.1.tar.gz\n==> fetching dependencies for aom: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, libsodium, perl, autoconf, z3, llvm, rust, ruby, vim and libvmaf\n==> fetching aom\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/03e2f19bc6749fd3a326ca3f610e4720ac462ebb49f70381d980290e8092e943--aom.rb\n==> downloading https://media.xiph.org/video/derf/y4m/bus_qcif_15fps.y4m\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/ced756f9d1f53c598f4f2b5c3676f9a313d4102ac938a50a36d66ea7343e22bd--bus_qcif_15fps.y4m\n==> cloning https://aomedia.googlesource.com/aom.git\nupdating /users/miyufeng/library/caches/homebrew/aom--git\n==> checking out tag v3.8.0\nhead is now at b681eac839 update changelog for libaom 3.8.0\nhead is now at b681eac839 update changelog for libaom 3.8.0\n==> fetching dependencies for libavif: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, libsodium, perl, autoconf, z3, llvm, rust, ruby, vim, libvmaf and aom\n==> fetching libavif\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/2b214b110649237cdb0d10e7419f9550a8a1161edf613af89ebbe4b6d7a153c6--libavif.rb\n==> downloading https://github.com/aomediacodec/libavif/archive/refs/tags/v1.0.3\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/ee0da4e1ed76f4741f5708eb4ceaf1215ecbaad0c9f28d579214c12ad038f615--libavif-1.0.3.tar.gz\n==> fetching dependencies for gd: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, libsodium, perl, autoconf, z3, llvm, rust, ruby, vim, libvmaf, aom and libavif\n==> fetching gd\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gd-2.3.3_6.big_sur.\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/bbdbdc0e0048bdc4d62c2e4b27439bbdd1501df4155bef3f7b22e82fe53ca909--gd-2.3.3_6.big_sur.bottle.tar.gz\n==> fetching glib\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/941a9853cf978779b9dae1fb57f82af7072a55e9bbd62754dea0799faa534795--glib.rb\n==> downloading https://raw.githubusercontent.com/homebrew/formula-patches/43467\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/3cff797fba2e962ee6871405f3f9c105575e25520c4eeadd25ebfe6c746d3f15--hardcoded-paths.diff\n==> downloading https://download.gnome.org/sources/glib/2.78/glib-2.78.3.tar.xz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/ff9a80b70b4e57c34b202cb0be4137c02317d088159cc34ec191b896257fc0f9--glib-2.78.3.tar.xz\n==> fetching jasper\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/05293ec2b26359b1fc78576a818b9ee3ce1dd8ecba48c427f58709d8130c8fb8--jasper.rb\n==> downloading https://github.com/jasper-software/jasper/releases/download/vers\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/709737b58ef1701f953ecad64371e615ed00bb73140273e6f357bddf775b4da4--jasper-4.1.2.tar.gz\n==> fetching dependencies for netpbm: jasper\n==> fetching netpbm\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/87112ce208fafa992acd6d4b58588e6c2a9a9b1aafff30eaa3a672b8f20ec70c--netpbm.rb\n==> cloning https://svn.code.sf.net/p/netpbm/code/stable\nupdating /users/miyufeng/library/caches/homebrew/netpbm--svn\n==> checking out 4822\n==> fetching dependencies for gts: glib, jasper and netpbm\n==> fetching gts\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gts-0.7.6_3.big_sur\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/069bc1a78e33d5a64ef8e69d65f10008691c220fb49462c971a92fff61429974--gts-0.7.6_3.big_sur.bottle.tar.gz\n==> fetching xorgproto\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/xorgproto-2023.2.bi\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/8d231a0c17dcc9c3f1416bd3da23691eb7374eb7025716ab1045e5eeea002e21--xorgproto-2023.2.big_sur.bottle.tar.gz\n==> fetching libxau\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxau-1.0.11.big_s\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/3603bb9d6f77bdf3db3c14775d1a819072853709fe8b7186ae1036cdb9d3d92f--libxau-1.0.11.big_sur.bottle.tar.gz\n==> fetching libxdmcp\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxdmcp-1.1.4.big_\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/07c305a44c209d75535db78c5aca5ad89e02acda221d1712b156775868af8b30--libxdmcp-1.1.4.big_sur.bottle.tar.gz\n==> fetching xcb-proto\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/xcb-proto-1.16.0.al\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/dd3af3c1189f5bfbcd69348b41572dc38459d3203980e2757765f83376643288--xcb-proto-1.16.0.all.bottle.1.tar.gz\n==> fetching libxcb\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/c1cbe724372835fcf610344e945e4be02e192c7827925778e19821e263bae80f--libxcb.rb\n==> downloading https://xorg.freedesktop.org/archive/individual/lib/libxcb-1.16.\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/727dddf4e04c0611cdfea968cc375691595942339e442e8716fa3bd9549049c1--libxcb-1.16.tar.xz\n==> fetching util-macros\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/util-macros-1.20.0.\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/8bdf39b202c70f5bd4384b4a2857a073c8f85cbb534511ea8e34c8e5e88efc34--util-macros-1.20.0.big_sur.bottle.tar.gz\n==> fetching xtrans\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/xtrans-1.5.0.all.bo\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/08847d758532c6a4f7989d3853ed1f8b160a67e9637c943219884202c159ff37--xtrans-1.5.0.all.bottle.2.tar.gz\n==> fetching dependencies for libx11: libxcb\n==> fetching libx11\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/be6bf6628bc9e880010c47822b2f9fa3c21dd65956c7c9d17dff4dfab5937f71--libx11.rb\n==> downloading https://www.x.org/archive/individual/lib/libx11-1.8.7.tar.gz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/dfd7993a89ca0991b36ac91ae831015fd92550c0ca94053fa896cdaa49b23f7b--libx11-1.8.7.tar.gz\n==> fetching dependencies for libxext: libxcb and libx11\n==> fetching libxext\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxext-1.3.5.big_s\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/40d572fa5c3ece24aababef40bfd549a4c47f5f6eec3a1a110f140fbaae6170e--libxext-1.3.5.big_sur.bottle.tar.gz\n==> fetching dependencies for libxrender: libxcb and libx11\n==> fetching libxrender\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/libxrender-0.9.11.b\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/4288765f0e5fe6b5c86fda40a442487c96aa22048777a4e2088052ef20937d3a--libxrender-0.9.11.big_sur.bottle.tar.gz\n==> fetching lzo\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/lzo-2.10.big_sur.bo\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/fc1c2830d8139db5277e1a943a416b0840eaa08937b7aaf2d473f1d0310baa08--lzo-2.10.big_sur.bottle.tar.gz\n==> fetching pixman\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/pixman-0.42.2.big_s\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/d5f3921c230d120e9654f2c9ed7df4413e0697b7ae4162a7f0f0715e475f364e--pixman-0.42.2.big_sur.bottle.1.tar.gz\n==> fetching dependencies for cairo: glib, libxcb and libx11\n==> fetching cairo\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> downloading https://cairographics.org/releases/cairo-1.18.0.tar.xz\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/64a9224202ec01f036561637599fe1749f87c4619b747d0143d97299cd458996--cairo-1.18.0.tar.xz\n==> fetching dependencies for gdk-pixbuf: glib\n==> fetching gdk-pixbuf\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/gdk-pixbuf-2.42.10_\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/241eda424ca9a6f01faed99dba7018e33366eaa5feeba2cae4f199d8cf1b082f--gdk-pixbuf-2.42.10_1.big_sur.bottle.tar.gz\n==> fetching fribidi\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/fribidi-1.0.13.big_\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/ac137160a3e76c1cc4f0f0bcb78d8794a02e83f59494c6696c4bda84e3299476--fribidi-1.0.13.big_sur.bottle.tar.gz\n==> fetching graphite2\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/graphite2-1.3.14.bi\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/fb48f8f10501d642a8be70f6273fc86f268f77ca5d6153b6a0fb4f95b21d44f3--graphite2-1.3.14.big_sur.bottle.tar.gz\n==> fetching dependencies for gobject-introspection: glib, libxcb, libx11 and cairo\n==> fetching gobject-introspection\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> downloading https://gitlab.gnome.org/tschoonj/gobject-introspection/-/commit\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/8b05b2a9de1da2191fe40b8fb80652d77efaa426382912d3d850e303bcf08d38--a7be304478b25271166cd92d110f251a8742d16b.diff\n==> downloading https://download.gnome.org/sources/gobject-introspection/1.78/go\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/c9bae6da8be051e9f93b8287293bed755097d06184a1b68c8f0b74c8eebc3241--gobject-introspection-1.78.1.tar.xz\n==> fetching dependencies for harfbuzz: glib, libxcb, libx11, cairo and gobject-introspection\n==> fetching harfbuzz\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> downloading https://github.com/harfbuzz/harfbuzz/raw/fc0daafab0336b847ac1468\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/b0f20064588dc70dd5c74e36b842326d9dbbeacab35c63c3d900a8b34aaba98f--270b89df543a7e48e206a2d830c0e10e5265c630.ttf\n==> downloading https://github.com/harfbuzz/harfbuzz/archive/refs/tags/8.3.0.tar\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/1096cc02bd4f36f3a14498ff83285d3a72972d5239abc239bf5541f7dcc98aef--harfbuzz-8.3.0.tar.gz\n==> fetching dependencies for pango: glib, libxcb, libx11, cairo, gobject-introspection and harfbuzz\n==> fetching pango\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/pango-1.50.14.big_s\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/244f3ce4bb97e5a296f4029f14b7de16db19177ef681726bf4b44469538daa62--pango-1.50.14.big_sur.bottle.tar.gz\n==> fetching dependencies for librsvg: glib, libxcb, libx11, cairo, gobject-introspection, harfbuzz, z3, llvm and rust\n==> fetching librsvg\n==> downloading https://raw.githubusercontent.com/homebrew/homebrew-core/3f6970e\n######################################################################### 100.0%\n==> downloading https://download.gnome.org/sources/librsvg/2.57/librsvg-2.57.1.t\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/460d64882a6a360b24bb8bc1e7861490ab46be3f77bdf020555114c137d29dcb--librsvg-2.57.1.tar.xz\n==> fetching graphviz\n==> downloading https://mirrors.ustc.edu.cn/homebrew-bottles/graphviz-9.0.0.big_\nalready downloaded: /users/miyufeng/library/caches/homebrew/downloads/391f47e6ff149bb1c412a681479432da871247c342be1260f399bc47a574c2ef--graphviz-9.0.0.big_sur.bottle.tar.gz\n==> installing dependencies for graphviz: doxygen, python@3.11, docutils, python-flit-core, python-packaging, python-pathspec, python-typing-extensions, python-setuptools-scm, python-pluggy, python-trove-classifiers, python-hatchling, pygments, python-markupsafe, python-jinja, python-certifi, python-charset-normalizer, python-idna, python-urllib3, python-requests, python-tabulate, sphinx-doc, jpeg-xl, ninja, meson, libsodium, lua, ncurses, berkeley-db@5, gdbm, perl, autoconf, libssh2, libgit2, z3, llvm, rust, ruby, vim, libvmaf, yasm, aom, libavif, gd, glib, jasper, netpbm, gts, xorgproto, libxau, libxdmcp, xcb-proto, libxcb, util-macros, xtrans, libx11, libxext, libxrender, lzo, pixman, cairo, gdk-pixbuf, fribidi, graphite2, gobject-introspection, harfbuzz, pango and librsvg\n==> installing graphviz dependency: doxygen\nwarning: a newer command line tools release is available.\nupdate them from software update in system preferences.\n\nif that doesn\'t show you any updates, run:\n  sudo rm -rf /library/developer/commandlinetools\n  sudo xcode-select --install\n\nalternatively, manually download them from:\n  https://developer.apple.com/download/all/.\nyou should download the command line tools for xcode 13.2.1.\n\n==> downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api/formul\n-=o=-                                                                       ###\ncurl: (6) could not resolve host: mirrors.tuna.tsinghua.edu.cn\n==> downloading https://formulae.brew.sh/api/formula.jws.json\n######################################################################### 100.0%\n==> cmake -s . -b build -dpython_executable=/usr/bin/python3\nlast 15 lines from /users/miyufeng/library/logs/homebrew/doxygen/01.cmake:\n-- found threads: true  \n-- looking for iconv_open\n-- looking for iconv_open - not found\n-- performing test iconv_compiles\n-- performing test iconv_compiles - success\n-- found iconv: /library/developer/commandlinetools/sdks/macosx11.sdk/usr/lib/libiconv.tbd  \n-- one (and only one) of the iconv_accepts_... tests must pass\n-- performing test iconv_accepts_nonconst_input\n-- performing test iconv_accepts_nonconst_input - success\n-- performing test iconv_accepts_const_input\n-- performing test iconv_accepts_const_input - failed\n-- build spdlog: 1.11.0\n-- build type: release\n-- the javacc executable not found, using existing files\n-- configuring incomplete, errors occurred!\n\ndo not report this issue to homebrew/brew or homebrew/homebrew-core!\n\n\nerror: you are using macos 11.\nwe (and apple) do not provide support for this old version.\nit is expected behaviour that some formulae will fail to build in this old version.\nit is expected behaviour that homebrew will be buggy and slow.\ndo not create any issues about this on homebrew\'s github repositories.\ndo not create any issues even if you think this message is unrelated.\nany opened issues will be immediately closed without response.\ndo not ask for help from homebrew or its maintainers on social media.\nyou may ask for help in homebrew\'s discussions but are unlikely to receive a response.\ntry to figure out the problem yourself and submit a fix as a pull request.\nwe will review it but may or may not accept it.\n\n\nerror: a newer command line tools release is available.\nupdate them from software update in system preferences.\n\nif that doesn\'t show you any updates, run:\n  sudo rm -rf /library/developer/commandlinetools\n  sudo xcode-select --install\n\nalternatively, manually download them from:\n  https://developer.apple.com/download/all/.\nyou should download the command line tools for xcode 13.2.1.\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705687429e3},{title:"Linux概述--1.初识Linux",frontmatter:{"autoGroup+1":"Linux概述"},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--1.%E5%88%9D%E8%AF%86Linux.html",relativePath:"zs-use/linux/基本使用/Linux概述--1.初识Linux.md",key:"v-b1fee73a",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--1.%E5%88%9D%E8%AF%86Linux.html",headers:[{level:2,title:"一、计算机资源介绍",slug:"一、计算机资源介绍",normalizedTitle:"一、计算机资源介绍",charIndex:25},{level:2,title:"二、常见操作系统",slug:"二、常见操作系统",normalizedTitle:"二、常见操作系统",charIndex:189},{level:2,title:"三、Linux简单介绍",slug:"三、linux简单介绍",normalizedTitle:"三、linux简单介绍",charIndex:717},{level:3,title:"1、Linux特性",slug:"_1、linux特性",normalizedTitle:"1、linux特性",charIndex:733},{level:3,title:"2、Linux发行版本",slug:"_2、linux发行版本",normalizedTitle:"2、linux发行版本",charIndex:1163},{level:3,title:"3、开源文化",slug:"_3、开源文化",normalizedTitle:"3、开源文化",charIndex:2538},{level:3,title:"4、总结",slug:"_4、总结",normalizedTitle:"4、总结",charIndex:3241}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"一、计算机资源介绍 二、常见操作系统 三、Linux简单介绍 1、Linux特性 2、Linux发行版本 3、开源文化 4、总结",content:"# Linux概述--1.初识Linux\n\n\n# 一、计算机资源介绍\n\n计算机资源分为2 部分：硬件资源、软件资源\n\n硬件： 一般硬件是指计算机的物理组成，由真实（看得见，摸得着）的设备组成的\n\n软件： 软件一般是指应用程序，应用程序程序是由开发人员去按照编程语言的特定的规则去\n\n编写的程序。除了上述的应用程序之外，操作系统也属于软件资源的范畴，它属特殊的软件。\n\n\n\n\n# 二、常见操作系统\n\n常见操作系统有：Windows、MacOS、Linux。\n\n> Windows：其是微软公司研发的收费操作系统（闭源）\n> \n> Windows系统分为两类：用户（个人）操作系统、服务器（企业）操作系统\n> \n> 个人操作系统：win 95、win 98、win NT、win Me、win xp、vista、win7、win8、win10\n> \n> 服务器操作系统：windows server 2003/2008/2012/2016\n\n> MacOS：其是由苹果公司开发的一款收费（变相收费，买电脑送系统）操作系统。该系统从\n> \n> 终端角度来看分为：watch OS、IOS、MacOS\n> \n> 其表现突出的地方：底层优化实现的很好\n\n> Linux：Linux 是目前全球使用量最多的服务器操作系统（开源）\n> \n> 其体系很强大，其分支有很多（数不胜数），其目前主要的分支有：RedHat（红帽）、Debian、乌班图（ubuntu）、CentOS等等。其在世界范围最大的使用分支是安卓。\n> \n> 闭源：不开放源代码，用户是没有办法看到软件的底层实现（闭源≠收费）\n> \n> 开源：表示开放源代码（开源≠免费）\n\n\n# 三、Linux简单介绍\n\n\n# 1、Linux特性\n\n * 完全开源\n   \n   使用Linux，包括对它的拷贝，修改，再发布，在遵循GPL的协议下，你不会有任何版权问题的担心，对于企业部署可以极大的降低成本。而正因为Linux平台不会依赖于任何一家私有软件公司，所有各大软硬件厂商都支持并发展Linux，如REDHAT，IBM，DELL，ORACLE，VMWARE，GOOGLE，INTEL等。\n\n * 多用户多任务系统\n   \n   Linux继承了UNIX多用户多任务的设计理念，允许多人同时上线工作，并合理分配资源。\n\n * 安全高效稳定\n   \n   严格的用户权限管理使得不同的使用者之间保持高度的保密性和安全性。Linux得到来自各大软硬件厂商的支持，特别是企业级应用。\n\n * 支持多种硬件平台\n   \n   Linux是一种UNIX Like 操作系统，它遵循 1 标准,运行在UNIX下的软件很容易移植到Linux下，这使得Linux立刻拥有了大量优秀的软件。\n\n\n# 2、Linux发行版本\n\n用户——>计算机\n\n计算机资源——>硬件资源+软件资源\n\n软件资源——>操作系统——>内核（内核空间）+应用程序（用户空间）\n\nLinux发行版指的就是通常所说的“Linux操作系统”，它可能是由一个组织，公司或者个人发布的。\n\n通常来讲，一个Linux发行版包括Linux内核，各种GNU软件，及其他的一些自由软件。在一些特定的Linux发行版中也有一些专有软件。\n\n发行版为许多不同的目的而制作，包括对不同计算机硬件结构的支持，对一个具体区域或语言的本地化，实时应用，和嵌入式系统。目前，数百个Linux发行版被积极的开发，被广泛应用的发行版有：\n\n * Red Hat Enterprise Linux\n   \n   RHEL是Red Hat（红帽）公司的企业版Linux系统，因其稳定强大，各大厂商认证和良好的技术支持，在Linux服务器上市场占领超过50%份额。采用RPM的包管理方式，很多发行版都或多或少的受到它的影响。\n\n * CentOS\n   \n   由社区开发并维护，基于RHEL，并与RHEL版本号保持一致。致力于提供一个自由使用且稳定的RHEL。开发者直接修改RHEL的源代码，去除了红帽的商标和商业服务组件，修复了很多存在的Bug。其拥有自己的软件仓库，提供免费的在线更新程序。\n\n * Fedora\n   \n   主要由RedHat主持的社区Linux项目，采用同样的RPM包管理，致力于最新技术的开发和引入。经过测试稳定且有价值的技术将被RHEL吸纳。坚持每半年发布一个版本。\n\n * SUSE Linux\n   \n   在欧洲非常流行的Linux发行版，以界面华丽和简单易用著称。2004年被NOVELL收购。NOVELL提供企业级的SUSE Linux Enterprise Server｜Desktop软件和商业技术支持服务，企业市场占有率较高。OpenSUSE是基于企业版的社区提供的免费SUSE Linux。\n\n * Debian\n   \n   Debian是完全开放，一个强烈信奉自由软件的系统，由Debian计划组织维护，其背后没有任何营利组织的支持，开发人员完全来自于全世界各地的志愿者。Debian基于Deb的包管理方式，apt的在线软件安装更新非常方便且快速。提供超过18000个软件包的支持，受到研究机构开发人员的极大欢迎。\n\n * Ubuntu\n   \n   基于Debian开发，采用相同的deb和apt。通过精挑细选，保证软件质量，致力于开发一个简单易用的Linux系统。由Canonical支持，坚持每6个月发布一个版本，分别提供6个月和3年（LTS）的技术支持。由于其易用性和遍布世界各地的镜像源服务器，使得它近年来变得非常流行。\n\n * 其他Linux发行版\n   \n   Arch Linux，一个基于KISS（Keep It Simple and Stupid）的滚动更新的操作系统。\n   \n   Gentoo，一个面向高级用户的发行版，所有软件的源代码需要自行编译。\n   \n   Elementary OS：基于Ubuntu，界面酷似Mac OS X。\n   \n   Linux Mint，从Ubuntu派生并与Ubuntu兼容的系统。\n\n\n\n\n# 3、开源文化\n\n什么是GNU？什么是GPL协议？GNU和Linux是怎么结合在一起的？\n\nGNU是在1983年由理查德·马修·斯托曼提出的一个项目计划，目标是提供一个和Unix100%兼容的 2 的操作系统。这个系统的名字叫GNU，是GNU's Not Unix的首字母递归缩写——这是对Unix的技术思想致敬的一种方法，同时表达GNU有所不同。从技术上说，GNU很像Unix。但是它不同于Unix，GNU给予其用户自由。\n\nGPL（General Public License）协议是指GNU通用公共许可证。任何软件发布，都需要许可证，GNU 认为任何软件都应当以自由软件发布。要让一个软件成为自由软件，就需要把它以自由软件许可证发布。我们通常使用GNU通用公共许可证 GNU GPL发布软件。\n\n简单地说，GPL授权具有以下几个特点：\n\n 1. 任何软件挂上GPL授权之后，即为自由的软件，任何人均可获取，同时，亦可取得其源代码；\n\n 2. 取得GPL授权的软件后，任何人均可修改源代码，以使其符合自己的喜好；\n\n 3. 除此之外，经过修改的源代码应回报给网络社会，供大家参考！\n    \n    注意：并非挂上GPL之后的软件就不可贩卖，这是不同的两回事！\n\nGNU和Linux是怎么结合在一起的呢？\n\n1991年，林纳斯·托瓦兹编写出了与UNIX兼容的Linux操作系统内核并以GPL授权发布。Linux之后在网上广泛流传，许多程序员参与了开发与修改。\n\n1992年，Linux与其他GNU软件结合，完全自由的操作系统正式诞生。该操作系统往往被称为“GNU/Linux”或简称Linux。\n\n\n# 4、总结\n\n 1. Linux是什么？\n    \n    严格来说，Linux只是一个操作系统内核。大多数Linux发行版是由操作系统内核加上GNU的软件或工具形成完整的操作系统，也就是GNU/Linux。GNU/Linux是一种Unix Like操作系统。\n\n 2. 广泛使用的Linux发行版有哪些？\n    \n    常见的Linux发型版本：Red Hat Enterprise Linux、CentOS、Ubuntu、SUSE Linux等。\n\n 3. Linux有哪些特点？\n    \n    * 完全开源\n    * 支持多种硬件平台\n    * 多用户多任务\n    * 安全高效稳定\n\n 4. 扩展阅读\n    \n    GNU相关介绍：http://www.gnu.org/\n    \n    Centos官网：https://www.centos.org/\n    \n    Linux内核官网：https://www.kernel.org/\n    \n    主流Linux桌面版简介：https://www.jianshu.com/p/7b187c515d77",normalizedContent:"# linux概述--1.初识linux\n\n\n# 一、计算机资源介绍\n\n计算机资源分为2 部分：硬件资源、软件资源\n\n硬件： 一般硬件是指计算机的物理组成，由真实（看得见，摸得着）的设备组成的\n\n软件： 软件一般是指应用程序，应用程序程序是由开发人员去按照编程语言的特定的规则去\n\n编写的程序。除了上述的应用程序之外，操作系统也属于软件资源的范畴，它属特殊的软件。\n\n\n\n\n# 二、常见操作系统\n\n常见操作系统有：windows、macos、linux。\n\n> windows：其是微软公司研发的收费操作系统（闭源）\n> \n> windows系统分为两类：用户（个人）操作系统、服务器（企业）操作系统\n> \n> 个人操作系统：win 95、win 98、win nt、win me、win xp、vista、win7、win8、win10\n> \n> 服务器操作系统：windows server 2003/2008/2012/2016\n\n> macos：其是由苹果公司开发的一款收费（变相收费，买电脑送系统）操作系统。该系统从\n> \n> 终端角度来看分为：watch os、ios、macos\n> \n> 其表现突出的地方：底层优化实现的很好\n\n> linux：linux 是目前全球使用量最多的服务器操作系统（开源）\n> \n> 其体系很强大，其分支有很多（数不胜数），其目前主要的分支有：redhat（红帽）、debian、乌班图（ubuntu）、centos等等。其在世界范围最大的使用分支是安卓。\n> \n> 闭源：不开放源代码，用户是没有办法看到软件的底层实现（闭源=收费）\n> \n> 开源：表示开放源代码（开源=免费）\n\n\n# 三、linux简单介绍\n\n\n# 1、linux特性\n\n * 完全开源\n   \n   使用linux，包括对它的拷贝，修改，再发布，在遵循gpl的协议下，你不会有任何版权问题的担心，对于企业部署可以极大的降低成本。而正因为linux平台不会依赖于任何一家私有软件公司，所有各大软硬件厂商都支持并发展linux，如redhat，ibm，dell，oracle，vmware，google，intel等。\n\n * 多用户多任务系统\n   \n   linux继承了unix多用户多任务的设计理念，允许多人同时上线工作，并合理分配资源。\n\n * 安全高效稳定\n   \n   严格的用户权限管理使得不同的使用者之间保持高度的保密性和安全性。linux得到来自各大软硬件厂商的支持，特别是企业级应用。\n\n * 支持多种硬件平台\n   \n   linux是一种unix like 操作系统，它遵循 1 标准,运行在unix下的软件很容易移植到linux下，这使得linux立刻拥有了大量优秀的软件。\n\n\n# 2、linux发行版本\n\n用户——>计算机\n\n计算机资源——>硬件资源+软件资源\n\n软件资源——>操作系统——>内核（内核空间）+应用程序（用户空间）\n\nlinux发行版指的就是通常所说的“linux操作系统”，它可能是由一个组织，公司或者个人发布的。\n\n通常来讲，一个linux发行版包括linux内核，各种gnu软件，及其他的一些自由软件。在一些特定的linux发行版中也有一些专有软件。\n\n发行版为许多不同的目的而制作，包括对不同计算机硬件结构的支持，对一个具体区域或语言的本地化，实时应用，和嵌入式系统。目前，数百个linux发行版被积极的开发，被广泛应用的发行版有：\n\n * red hat enterprise linux\n   \n   rhel是red hat（红帽）公司的企业版linux系统，因其稳定强大，各大厂商认证和良好的技术支持，在linux服务器上市场占领超过50%份额。采用rpm的包管理方式，很多发行版都或多或少的受到它的影响。\n\n * centos\n   \n   由社区开发并维护，基于rhel，并与rhel版本号保持一致。致力于提供一个自由使用且稳定的rhel。开发者直接修改rhel的源代码，去除了红帽的商标和商业服务组件，修复了很多存在的bug。其拥有自己的软件仓库，提供免费的在线更新程序。\n\n * fedora\n   \n   主要由redhat主持的社区linux项目，采用同样的rpm包管理，致力于最新技术的开发和引入。经过测试稳定且有价值的技术将被rhel吸纳。坚持每半年发布一个版本。\n\n * suse linux\n   \n   在欧洲非常流行的linux发行版，以界面华丽和简单易用著称。2004年被novell收购。novell提供企业级的suse linux enterprise server｜desktop软件和商业技术支持服务，企业市场占有率较高。opensuse是基于企业版的社区提供的免费suse linux。\n\n * debian\n   \n   debian是完全开放，一个强烈信奉自由软件的系统，由debian计划组织维护，其背后没有任何营利组织的支持，开发人员完全来自于全世界各地的志愿者。debian基于deb的包管理方式，apt的在线软件安装更新非常方便且快速。提供超过18000个软件包的支持，受到研究机构开发人员的极大欢迎。\n\n * ubuntu\n   \n   基于debian开发，采用相同的deb和apt。通过精挑细选，保证软件质量，致力于开发一个简单易用的linux系统。由canonical支持，坚持每6个月发布一个版本，分别提供6个月和3年（lts）的技术支持。由于其易用性和遍布世界各地的镜像源服务器，使得它近年来变得非常流行。\n\n * 其他linux发行版\n   \n   arch linux，一个基于kiss（keep it simple and stupid）的滚动更新的操作系统。\n   \n   gentoo，一个面向高级用户的发行版，所有软件的源代码需要自行编译。\n   \n   elementary os：基于ubuntu，界面酷似mac os x。\n   \n   linux mint，从ubuntu派生并与ubuntu兼容的系统。\n\n\n\n\n# 3、开源文化\n\n什么是gnu？什么是gpl协议？gnu和linux是怎么结合在一起的？\n\ngnu是在1983年由理查德·马修·斯托曼提出的一个项目计划，目标是提供一个和unix100%兼容的 2 的操作系统。这个系统的名字叫gnu，是gnu's not unix的首字母递归缩写——这是对unix的技术思想致敬的一种方法，同时表达gnu有所不同。从技术上说，gnu很像unix。但是它不同于unix，gnu给予其用户自由。\n\ngpl（general public license）协议是指gnu通用公共许可证。任何软件发布，都需要许可证，gnu 认为任何软件都应当以自由软件发布。要让一个软件成为自由软件，就需要把它以自由软件许可证发布。我们通常使用gnu通用公共许可证 gnu gpl发布软件。\n\n简单地说，gpl授权具有以下几个特点：\n\n 1. 任何软件挂上gpl授权之后，即为自由的软件，任何人均可获取，同时，亦可取得其源代码；\n\n 2. 取得gpl授权的软件后，任何人均可修改源代码，以使其符合自己的喜好；\n\n 3. 除此之外，经过修改的源代码应回报给网络社会，供大家参考！\n    \n    注意：并非挂上gpl之后的软件就不可贩卖，这是不同的两回事！\n\ngnu和linux是怎么结合在一起的呢？\n\n1991年，林纳斯·托瓦兹编写出了与unix兼容的linux操作系统内核并以gpl授权发布。linux之后在网上广泛流传，许多程序员参与了开发与修改。\n\n1992年，linux与其他gnu软件结合，完全自由的操作系统正式诞生。该操作系统往往被称为“gnu/linux”或简称linux。\n\n\n# 4、总结\n\n 1. linux是什么？\n    \n    严格来说，linux只是一个操作系统内核。大多数linux发行版是由操作系统内核加上gnu的软件或工具形成完整的操作系统，也就是gnu/linux。gnu/linux是一种unix like操作系统。\n\n 2. 广泛使用的linux发行版有哪些？\n    \n    常见的linux发型版本：red hat enterprise linux、centos、ubuntu、suse linux等。\n\n 3. linux有哪些特点？\n    \n    * 完全开源\n    * 支持多种硬件平台\n    * 多用户多任务\n    * 安全高效稳定\n\n 4. 扩展阅读\n    \n    gnu相关介绍：http://www.gnu.org/\n    \n    centos官网：https://www.centos.org/\n    \n    linux内核官网：https://www.kernel.org/\n    \n    主流linux桌面版简介：https://www.jianshu.com/p/7b187c515d77",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"实战脚本简述",frontmatter:{},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%AE%80%E8%BF%B001.html",relativePath:"zs-use/linux/shell编程/实战脚本简述01.md",key:"v-07c14a84",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E7%AE%80%E8%BF%B001.html",headers:[{level:2,title:"流程控制",slug:"流程控制",normalizedTitle:"流程控制",charIndex:13},{level:3,title:"if",slug:"if",normalizedTitle:"if",charIndex:22},{level:3,title:"case",slug:"case",normalizedTitle:"case",charIndex:261},{level:3,title:"for",slug:"for",normalizedTitle:"for",charIndex:398},{level:3,title:"while",slug:"while",normalizedTitle:"while",charIndex:490},{level:3,title:"until",slug:"until",normalizedTitle:"until",charIndex:545},{level:3,title:"特殊控制语句",slug:"特殊控制语句",normalizedTitle:"特殊控制语句",charIndex:588},{level:2,title:"函数",slug:"函数",normalizedTitle:"函数",charIndex:629},{level:2,title:"工具命令",slug:"工具命令",normalizedTitle:"工具命令",charIndex:662},{level:3,title:"cut",slug:"cut",normalizedTitle:"cut",charIndex:671},{level:3,title:"wc",slug:"wc",normalizedTitle:"wc",charIndex:848},{level:3,title:"seq",slug:"seq",normalizedTitle:"seq",charIndex:934},{level:3,title:"awk",slug:"awk",normalizedTitle:"awk",charIndex:1592},{level:3,title:"sed",slug:"sed",normalizedTitle:"sed",charIndex:1600},{level:3,title:"column",slug:"column",normalizedTitle:"column",charIndex:1608},{level:3,title:"expr",slug:"expr",normalizedTitle:"expr",charIndex:2480},{level:3,title:"grep",slug:"grep",normalizedTitle:"grep",charIndex:4227},{level:3,title:"sort",slug:"sort",normalizedTitle:"sort",charIndex:2016},{level:2,title:"符号",slug:"符号",normalizedTitle:"符号",charIndex:3348},{level:3,title:"输出重定向",slug:"输出重定向",normalizedTitle:"输出重定向",charIndex:5411},{level:3,title:"多命令",slug:"多命令",normalizedTitle:"多命令",charIndex:5457},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:349},{level:3,title:"变量",slug:"变量",normalizedTitle:"变量",charIndex:273},{level:3,title:"环境变量",slug:"环境变量",normalizedTitle:"环境变量",charIndex:6285},{level:3,title:"位置参数变量",slug:"位置参数变量",normalizedTitle:"位置参数变量",charIndex:6832},{level:3,title:"预定义变量",slug:"预定义变量",normalizedTitle:"预定义变量",charIndex:6924},{level:3,title:"接收键盘",slug:"接收键盘",normalizedTitle:"接收键盘",charIndex:7006},{level:3,title:"条件判断",slug:"条件判断",normalizedTitle:"条件判断",charIndex:31},{level:3,title:"$[ ] 、${ }、$( )、[ ]、[[ ]]、(())区别",slug:"、-、-、-、-、-区别",normalizedTitle:"$[ ] 、${ }、$( )、[ ]、[[ ]]、(())区别",charIndex:7983},{level:2,title:"其他",slug:"其他-2",normalizedTitle:"其他",charIndex:349},{level:3,title:"sh",slug:"sh",normalizedTitle:"sh",charIndex:777},{level:2,title:"变量",slug:"变量-2",normalizedTitle:"变量",charIndex:273},{level:3,title:"数组",slug:"数组",normalizedTitle:"数组",charIndex:9318},{level:2,title:"常用代码段",slug:"常用代码段",normalizedTitle:"常用代码段",charIndex:13214},{level:3,title:"当前脚本文件目录",slug:"当前脚本文件目录",normalizedTitle:"当前脚本文件目录",charIndex:13224},{level:3,title:"shell调用另一个脚本中的方法",slug:"shell调用另一个脚本中的方法",normalizedTitle:"shell调用另一个脚本中的方法",charIndex:13378}],lastUpdated:"2024年2月23日星期五凌晨12点17分",lastUpdatedTimestamp:1708618656e3,headersStr:"流程控制 if case for while until 特殊控制语句 函数 工具命令 cut wc seq awk sed column expr grep sort 符号 输出重定向 多命令 其他 变量 环境变量 位置参数变量 预定义变量 接收键盘 条件判断 $[ ] 、${ }、$( )、[ ]、[[ ]]、(())区别 其他 sh 变量 数组 常用代码段 当前脚本文件目录 shell调用另一个脚本中的方法",content:'# 实战脚本简述\n\n\n# 流程控制\n\n\n# if\n\nif [ 条件判断式 ];then\n\t程序\nfi\n\n\nif [ 条件判断式 ]\n\tthen\n\t\t程序\nfi\n\n\nif [ 条件判断式 ]\n\tthen\n\t\t条件成立时，执行的程序\n\telse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\nif [ 条件判断式1 ]\n\tthen\n\t\t条件成立时，执行的程序\nelif [ 条件判断式2 ]\t\n\tthen\n\t\t条件成立时，执行的程序\n\n...省略更多条件...\n\nelse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\n\n# case\n\ncase $变量名 in\n\t"值1")\n\t\t如果变量的值等于值1，则执行程序1\n\t\t;;\n\t"值1")\n\t\t如果变量的值等于值2，则执行程序2\n\t\t;;\n\n\t…省略其他分支…\n\n\t*)\n\t\t如果变量的值都不是以上的值，则执行此程序\n\t\t;;\nesac\n\n\n\n# for\n\nfor 变量 in 值1 值2 值3 ...\n\tdo \n\t\t程序\n\tdone\n\n\nfor (( 初始值;循环控制条件;变量变化 ))\n\tdo\n\t\t程序\n\tdone\n\n\n\n# while\n\nwhile [ 条件判断式 ]\n    do\n        程序\n    done\n\n\n\n# until\n\nuntil [ 条件判断式 ]\n\tdo\n\t\t程序\n\tdone\n\n\n\n# 特殊控制语句\n\nexit [返回值]\n\nbreak\n\ncontinue\n\n\n\n# 函数\n\nfunction 函数名 () {\n\t程序\n}\n\n\n\n# 工具命令\n\n\n# cut\n\n# cut [选项]  文件名\n常见选项：\n    -c:\t以字符为单位进行分割,截取\n    -d:\t自定义分隔符，默认为制表符\\t\n    -f:\t与-d一起使用，提取第几列\n\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 1,2,4\nzs=123=789\n\n\n\n# wc\n\n[root@localhost ~]# wc [选项] 文件名\n选项：\n    -l：只统计行数\n    -w：只统计单词数\n    -m：只统计字符数\n\n\n\n# seq\n\nseq: 是一个序列（squeue ）的缩写，主要用来输出序列化的东西\n\nseq [选项] 尾数\t\t\t\t\t\t#从到尾数\nseq [选项] 首数 尾数\t\t\t\t#从首数到尾数\nseq [选项] 首数 增量 尾数\t\t\t#从首数以增量到尾数\n\n以指定增量从首数开始打印数字到尾数。\n\n常用选项：\n    -f\t使用printf 样式的浮点格式\n    -s\t使用指定字符串分隔数字(默认使用：\\n)\n    -w\t在列前添加0 使得宽度相同【自动补位】\n\n\n指定分割符\n\n[root@server1 mnt]# seq -s \'#\' 5\n1#2#3#4#5\n\n[root@server1 mnt]# seq -s \' \' 10\n1 2 3 4 5 6 7 8 9 10\n\n[root@server1 mnt]# seq -w 10\n01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n\n\n\n产生范围数字\n\n产生-2~10内的整数，增量为2：\n\n[root@server1 mnt]# seq -2 2 10\n-2\n0\n2\n4\n6\n8\n10\n\n\n产生98~101之间的整数，并且要求输出数字宽度相同，不足的用0或空格补足：\n\n[root@server1 mnt]# seq -f "%03g" 98 101\n098\n099\n100\n101\n[root@server1 mnt]# seq -f "%3g" 98 101   \n 98\n 99\n100\n101\n\n注意：通过%后添加0替代空格补足空位\n\n\n\n# awk\n\n\n# sed\n\n\n# column\n\ncolumn对齐字段\n\n常用选项：\n    -t ：表格，默认以空格间隔\n    -s：需要配合-t使用，指定分隔符\n\n\n获取的文档版式比较乱\n\ncat tee.txt \n10.10.10.161 | SUCCESS | rc=0 | (stdout) 21\n10.10.10.33 | SUCCESS | rc=0 | (stdout) 22\n10.10.10.1 | SUCCESS | rc=0 | (stdout) 62\n\n\n排版\n\ncat tee.txt |column -t \n10.10.10.161  |  SUCCESS  |  rc=0  |  (stdout)  21\n10.10.10.33   |  SUCCESS  |  rc=0  |  (stdout)  22\n10.10.10.1    |  SUCCESS  |  rc=0  |  (stdout)  62\n\n\nsort 多重排序整理\n\n$ cat tee.txt |column -t |sort  -k5r -k1\n10.10.10.97   |  SUCCESS  |  rc=0  |  (stdout)  7\n10.10.10.98   |  SUCCESS  |  rc=0  |  (stdout)  7\n10.10.10.99   |  SUCCESS  |  rc=0  |  (stdout)  7\n10.10.10.129  |  SUCCESS  |  rc=0  |  (stdout)  65\n10.10.10.130  |  SUCCESS  |  rc=0  |  (stdout)  65\n10.10.10.131  |  SUCCESS  |  rc=0  |  (stdout)  65\n10.10.10.1    |  SUCCESS  |  rc=0  |  (stdout)  62\n10.10.10.2    |  SUCCESS  |  rc=0  |  (stdout)  62\n\n\n\n# expr\n\n正确： 所有操作符的两边，都需要有空格。\n[root@localhost scripts]# expr 1 + 1\n2\n\n\n"index string chars"用法示例。\n\n[root@localhost ~]# expr index abcde dec   # 在 abcde 中搜索 d 在第几个位置\n3\n\n[root@localhost ~]# expr index abcde xdc   # 在 abcde 中搜索x没有，在搜索d\n3\n\n[root@localhost ~]# expr index abcde 1\n0\n\n\n\n"substr string pos len"用法示例。\n\n该表达式是从string中取出从pos位置开始长度为len的子字符串。如果pos或len为非正整数时，将返回空字符串。\n\n[root@localhost ~]# expr substr abcde 2 3\nbcd\n \n[root@localhost ~]#  expr substr abcde 2 4\nbcde\n \n[root@localhost ~]#  expr substr abcde 2 5\nbcde\n \n[root@localhost ~]#  expr substr abcde 2 0\n \n[root@localhost ~]# expr substr abcde 2 -1\n\n\n"length string"用法示例。该表达式是返回string的长度，其中string不允许为空，否则将报错，所以可以用来判断变量是否为空。\n\n[root@xuexi ~]# expr length abcde\n5\n \n[root@xuexi ~]# expr length 111\n3\n \n[root@localhost scripts]# echo $xxx\n \n[root@xuexi ~]# expr length $xxx\nexpr: syntax error\n\n\n"+ token"用法示例。\n\nexpr中有些符号和关键字有特殊意义，如"match"、"index"、"length"，如果要让其成为字符，使用该表达式将任意token强制解析为普通字符串。格式：expr index 特殊关键字\n\n[root@localhost scripts]# expr index index d\nexpr: 语法错误\n[root@localhost scripts]# expr index length g\nexpr: 语法错误\n[root@localhost scripts]# expr index + length g\n4\n\n\n对值为关键字的变量来说，则无所谓。\n\n[root@localhost scripts]# len=lenght\n[root@localhost scripts]# expr index $len g\n4\n\n\n"string : REGEX"字符串匹配示例。要输出匹配到的字符串结果，需要使用"，否则返回的将是匹配到的字符串数量。\n\n[root@localhost ~]#expr abcde : \'ab\\(.*\\)\'   # \'ab\\(.*\\)\'  ab代表不匹配 .代表匹配一个  .*匹配所有  \\是为了转移字符，转移(  和)\ncde\n \n[root@localhost ~]# expr abcde : \'ab\\(.\\)\'\nc\n \n[root@localhost ~]# expr abcde : \'ab\\(..\\)\'\ncd\n \n[root@localhost ~]# expr abcde : \'ab.*\'    #  不写() 代表反馈匹配上的数字各个数\n5\n \n[root@localhost ~]# expr abcde : \'ab.\'   \n3\n \n[root@localhost ~]# expr abcde : \'.*cd*\'\n4\n \n[root@localhost ~]# cat abc\nabcdwe\n[root@localhost ~]# expr `cat abc` : \'ab\\(..\\)\'\ncd\n\n\n\n# grep\n\n[root@localhost ~]# grep [选项] \'关键字\' 文件名\n选项：\n    -i：\t\t\t\t忽略大小写\n    -n：\t\t\t\t输出行号\n    -v：\t\t\t\t反向查找 \n    ^,$,?,*,[a-z],[x]正则符号\n    ^$\t\t\t\t匹配空行\n\t^[[:space:]]*#\t匹配空行，匹配零个或多个空白字符，这包括空格、制表符和其他类型的空白字符\n[root@localhost ~]# grep -n \'root\' passwd\n[root@localhost ~]# grep -ni \'root\' passwd\n[root@localhost ~]# grep \'^root\' passwd\n[root@localhost ~]# grep \'root$\' passwd\n\n\n# grep -i root passwd\t\t\t\t\t\t忽略大小写匹配包含root的行\n# grep -w ftp passwd \t\t\t\t\t\t精确匹配ftp单词\n# grep -w hello passwd \t\t\t\t\t\t精确匹配hello单词;自己添加包含hello的行到文件\n# grep -wo ftp passwd \t\t\t\t\t\t打印匹配到的关键字ftp\n# grep -n root passwd \t\t\t\t\t\t打印匹配到root关键字的行好\n# grep -ni root passwd \t\t\t\t\t\t忽略大小写匹配统计包含关键字root的行\n# grep -nic root passwd\t\t\t\t\t\t忽略大小写匹配统计包含关键字root的行数\n# grep -i ^root passwd \t\t\t\t\t\t忽略大小写匹配以root开头的行\n# grep bash$ passwd \t\t\t\t\t\t\t匹配以bash结尾的行\n# grep -n ^$ passwd \t\t\t\t\t\t\t匹配空行并打印行号\n# grep ^# /etc/vsftpd/vsftpd.conf\t\t匹配以#号开头的行\n# grep -v ^# /etc/vsftpd/vsftpd.conf\t匹配不以#号开头的行\n# grep -A 5 mail passwd \t\t\t\t \t匹配包含mail关键字及其后5行\n# grep -B 5 mail passwd \t\t\t\t \t匹配包含mail关键字及其前5行\n# grep -C 5 mail passwd \t\t\t\t\t匹配包含mail关键字及其前后5行\n\n\n\n# sort\n\n[root@localhost ~]# sort [选项] 文件名\n常用选项：\n    -u ：去除重复行\n    -r ：降序排列，默认是升序\n    -n ：以数字排序，默认是按字符排序\n    -t ：分隔符\n    -k ：第N列\n\n\n\n# 符号\n\n\n# 输出重定向\n\n命令 &>/dev/null\n命令 >/dev/null 2>&1\n\n\n\n# 多命令\n\n;\t同时执行\n\n\n&& \t$?=0，则命令2执行\n\t$?≠0，命令2不执行\n\n\n||\t$?≠0，则命令2执行\n\t$?=0，命令2不执行\n\n\n[root@xiaoshaozi ~]# ls && echo yes || echo no\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\n\n\n\n# 其他\n\n\'\'\t单引号\n单引号中的特殊符号没有特殊意义：如 $、`\n\n""\t双引号\n特殊符号没有含义，$、`、\\ 例外\n\n``\t反引号\n``==>推荐使用==>$() bash中会先执行其中的命令\n\n$()\t引用系统命令\n\n${}\t变量引用\n变量引用更加强大，可对变量进行字符串截取\n\n$变量名 ==> ${变量名}\n\n[]\t条件判断\n\n\\$\t转移符：输出 $\n\n\n(命令;命令)\t\t在子shell中执行\n{ 命令;命令; }\t在当前shell中执行\n\n\n\n# 变量\n\n定义、引用\n$变量名 或 ${变量名}\n[root@xiaoshaozi ~]# test=123\n[root@xiaoshaozi ~]# test="$test"456\n[root@xiaoshaozi ~]# test=${test}789\n\n`` == $(命令)\n[root@xiaoshaozi ~]# test=`date`\n[root@xiaoshaozi ~]# test=$(date)\n\n\nunset 变量名\t变量删除\n\n\n[root@xiaoshaozi ~]# set [选项]\n选项：\n\t-u:\t如果设定此选项，调用未声明变量时会报错（默认无任何提示）\n\t-x:\t如果设定此选项，在命令执行之前，会吧命令先输出一次\n\nset -u 更为常用\n\n[root@xiaoshaozi ~]# set\n#直接使用set命令，会查询系统中所有的变量，包含用户自定义变量和环境变量\n\n[root@xiaoshaozi ~]# env\n# env看不到用户自定义变量，可以看到另一部分环境变量\n\n\nlocal 定义局部变量\n\nfunction Hello(){\n        local text="Hello World!!!" #局部变量\n        echo $text\n}\n\nshell脚本中定义的变量是global的,其作用域从被定义的地方开始，到shell结束或被显示删除的地方为止。\n如果同名，Shell函数定义的local变量会屏蔽脚本定义的global变量。\n\n\n\n# 环境变量\n\n#使用export声明的变量即是环境变量\n方式一：\nexport 变量名=变量值\n[root@xiaoshaozi ~]# export ZS_AGE="18"\n\n方式二：\n[root@xiaoshaozi ~]# ZS_AGE="18"\n[root@xiaoshaozi ~]# export ZS_AGE\n\n\n\n[root@xiaoshaozi ~]# set\n#直接使用set命令，会查询系统中所有的变量，包含用户自定义变量和环境变量\n\n[root@xiaoshaozi ~]# env\n# env看不到用户自定义变量，可以看到另一部分环境变量\n\n\n\n# 位置参数变量\n\n$n\t第n位参数，0-9以内用 $n，10以上的用 ${10}\n\n$*\t把所有参数看成一个整体\n\n$@\t代办所有参数，每个参数区分对待\n\n$#\t所有参数个数\n\n\n\n# 预定义变量\n\n$?\t最后一次执行命令的返回状态\n\n$$\t当前进程的进程号（PID）\n\n$!\t后台运行的最后一个进程的进程号（PID）\n\n其中$?最为常用\n\n\n\n# 接收键盘\n\n[root@localhost ~]# read [选项] [变量名]\n选项：\n\t-p\t“提示信息”：\t  在等待read输入时，输出提示信息\n\t-t\t秒数：\t\t read命令会一直等待用户输入，使用此选项可以指定等待时间\n\t-n\t字符数：\tread命令只接受指定的字符数，就会执行\n\t-s：\t\t\t  隐藏输入的数据，适用于机密信息的输入\n\t\n变量名：\n\t- 变量名可以自定义，如果不指定变量名，会把输入保存入默认变量REPLY\n\t- 如果只提供了一个变量名，则整个输入行赋予该变量\n\t- 如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，\n\t  而命令行上如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，而命令行上\n\n\n\n# 条件判断\n\n文件类型\n\n格式一：\n[root@xiaoshaozi ~]# test [选项] 文件\n\n格式二：最常用格式\n[root@xiaoshaozi ~]# [ 选项 文件 ]\n\n常用选项：\n\t-e\t判断文件在不在\n\t-f\t在且是普通文件\n\t-L\t在且是链接文件\n\t-d\t判断是否是目录\n\t-s  文件是否存在，或文件是否非空\n\n\n文件权限\n\n常用选项：\n\t-r\t读\n\t-w\t写\n\t-x\t执行\n\n\n两个整数比较\n\n常用选项：\n    num1 -eq num2\t\tnum1 == num2\n    num1 -ne num2\t\tnum1 != num2\n    num1 -gt num2\t\tnum1 >  num2\n    num1 -lt num2\t\tnum1 <  num2\n    num1 -ge num2\t\tnum1 >= num2\n    num1 -le num2\t\tnum1 <= num2\n\n\n字符串比较\n\n常用选项：\n    -z str\t\tisBlank?\n    -n str\t\tisNotBlank?\n    str1 == str2\tstr1==str2\t\n    str1 !=\tstr2\tstr1!=str2\n\n\n多重条件\n\n-a \t与\n-o\t或\n!\t非\n\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\nyes\n\n\n\n# $[ ] 、${ }、$( )、[ ]、[[ ]]、(())区别\n\n$()命令替换，等价于````` ```出现嵌套时只能使用$()\n\n$( ) \nfinish_time=$(date)\n\n\n$[ ]运算操作符，等价于$(( ))\n\nxjh@ubuntu:~/iot/tmp$ echo $[3*5]\n15\nxjh@ubuntu:~/iot/tmp$ echo $[(3+4)*5]\n35\nxjh@ubuntu:~/iot/tmp$\n\n\n${ } 变量使用操作符，有很多丰富的功能，简单引用$变量名\n\n[ ] test测试简写形式\n\n[[ ]] test升级版\n\n(())\n\n())是一个数学计算命令，用于对整数进行数学运算，比如((a=10+66)）。\n\n具体见博客数学计算命令（expr、(())、bc、declare等）中关于(())的介绍。\n\n\n# 其他\n\n\n# sh\n\nsh\nshell命令解释器\nbash [options] [file]\n\n选项:\n    -c string：命令从-c后的字符串读取。\n    -i：实现脚本交互。\n    -n：进行shell脚本的语法检查。\n    -x：实现shell脚本逐条语句的跟踪。\n\n常用形式：sh -xc "ls"\n\n\n[root@AY1307311912260196fcZ satools]# sh -x check_ssh_login.sh\n+ DEFINE=30\n+ cat /var/log/secure\n+ awk \'/Failed/ {++ip[$(NF-3)]} END {for (i in ip) print i"="ip[i]}\'\n++ cat /root/satools/black.txt\n+ for i in \'`cat /root/satools/black.txt`\'\n++ echo 121.42.0.16=1427\n++ awk -F= \'{print $1}\'\n+ IP=121.42.0.16\n++ echo 121.42.0.16=1427\n++ awk -F= \'{print $2}\'\n+ NUM=1427\n+ \'[\' 1427 -gt 30 \']\'\n+ grep 121.42.0.16 /etc/hosts.deny\n+ \'[\' 1 -gt 0 \']\'\n+ echo sshd:121.42.0.16\n+ echo vsftpd:121.42.0.16\n+ for i in \'`cat /root/satools/black.txt`\'\n++ echo 121.42.0.72=276\n++ awk -F= \'{print $1}\'\n+ IP=121.42.0.72\n++ awk -F= \'{print $2}\'\n++ echo 121.42.0.72=276\n+ NUM=276\n+ \'[\' 276 -gt 30 \']\'\n+ grep 121.42.0.72 /etc/hosts.deny\n+ \'[\' 1 -gt 0 \']\'\n+ echo sshd:121.42.0.72\n+ echo vsftpd:121.42.0.72\n\n\n\n# 变量\n\n\n# 数组\n\n在Linux中，可以使用以下方式定义和使用数组：\n\n 1. 使用括号和空格将数组元素括起来，每个元素之间用空格分隔。例如：\n    \n    array=("apple" "banana" "orange")\n    \n\n 2. 使用索引访问数组元素，索引从0开始。例如：\n    \n    echo ${array[0]} # 输出：apple\n    \n\n 3. 使用*或@可以获取数组中的所有元素。例如：\n    \n    echo ${array[*]} # 输出：apple banana orange\n    \n\n 4. 使用#可以获取数组的长度。例如：\n    \n    echo ${#array[@]} # 输出：3\n    \n\n 5. 使用+=可以向数组中添加元素。例如：\n    \n    array+=("grape")\n    echo ${array[*]} # 输出：apple banana orange grape\n    \n\n 6. 使用unset可以删除数组中的元素。例如：\n    \n    unset array[1]\n    echo ${array[*]} # 输出：apple orange grape\n    \n\n 7. 使用循环遍历数组中的元素。例如：\n    \n    for item in ${array[*]}; do\n        echo $item\n    done\n    \n    \n    循环来遍历数组，并获取每个元素的键和值\n    \n    #!/bin/bash\n    \n    # 定义一个数组\n    my_array=(\n        "key1=value1"\n        "key2=value2"\n        "key3=value3"\n    )\n    \n    # 循环遍历数组\n    for item in "${my_array[@]}"\n    do\n        # 使用IFS（内部字段分隔符）将键和值分割开\n        IFS=\'=\' read -ra array <<< "$item"\n        key="${array[0]}"\n        value="${array[1]}"\n        \n        # 输出键和值\n        echo "Key: $key, Value: $value"\n    done\n    \n    \n    循环来遍历数组，并获取每个元素的索引和值。\n    \n    #!/bin/bash\n    \n    # 定义一个数组\n    my_array=("value1" "value2" "value3")\n    \n    # 获取数组长度\n    length=${#my_array[@]}\n    \n    # 循环遍历数组\n    for ((i=0; i<$length; i++))\n    do\n        # 获取索引和值\n        index=$i\n        value=${my_array[$i]}\n        \n        # 输出索引和值\n        echo "Index: $index, Value: $value"\n    done\n    \n    在上述示例中，我们首先定义了一个数组my_array。然后，使用length变量获取数组的长度。接下来，使用for循环遍历数组，并在循环体中获取每个元素的索引和值。最后，我们输出索引和值。\n    \n    请注意，上述示例中的数组索引从0开始计数。如果你希望从1开始计数，可以在输出索引时将$i替换为$((i+1))。\n    \n\n使用read命令结合循环结构来遍历以英文逗号分割的字符串\n\n#!/bin/bash\n\n# 定义一个包含逗号分割值的字符串\nstr="apple,banana,orange,grape"\n\n# 使用IFS（内部字段分隔符）将字符串按逗号分割成数组\nIFS=\',\' read -ra arr <<< "$str"\n\n# 循环遍历数组中的每个值\nfor item in "${arr[@]}"; do\n    echo "$item"\ndone\n\n\n去除数组中的重复元素\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 使用sort和uniq命令去除重复元素\nsorted_arr=($(printf "%s\\n" "${arr[@]}" | sort | uniq))\n\n# 打印去重后的数组\necho "${sorted_arr[@]}"\n\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 声明关联数组\ndeclare -A unique_arr\n\n# 遍历原始数组，将每个元素作为关联数组的键，如果键不存在，则将其值设置为1，否则将其值递增1\nfor item in "${arr[@]}"; do\n    unique_arr["$item"]=1\ndone\n\n# 打印去重后的数组（关联数组的键即为去重后的元素）\necho "${!unique_arr[@]}"\n\n\n数组拷贝\n\n> 在操作数组前拷贝一份数组是一种常见的做法，可以避免直接修改原始数组，从而避免循环过程中出现异常。你可以使用以下代码来复制一个数组：\n\n# 原始数组\noriginal_array=("element1" "element2" "element3")\n\n# 复制数组\ncopied_array=("${original_array[@]}")\n\n# 在复制的数组上进行操作\nfor element in "${copied_array[@]}"; do\n  echo $element\ndone\n\n\n关联数组允许你将键与值相关联，类似于Map数据结构。\n\n> 要在Shell中使用关联数组，首先需要声明一个关联数组变量。以下是一个示例：\n> \n> declare -A map_array\n> \n> \n> 接下来，你可以通过键来添加或修改关联数组中的值。以下是一个示例：\n> \n> map_array["key1"]="value1"\n> map_array["key2"]="value2"\n> \n> \n> 要获取关联数组中的值，可以使用键来索引关联数组。以下是一个示例：\n> \n> value1="${map_array["key1"]}"\n> value2="${map_array["key2"]}"\n> \n> \n> 要删除关联数组中的键值对，可以使用unset命令。以下是一个示例：\n> \n> bashunset "map_array["key1"]"\n> \n> \n> 要遍历关联数组中的所有键值对，可以使用循环结构。以下是一个示例：\n> \n> for key in "${!map_array[@]}"; do\n>   echo "Key: $key, Value: ${map_array[$key]}"\n> done\n> \n> \n> 以上就是在Shell中使用关联数组作为Map数据结构的基本用法。通过使用关联数组，你可以在Shell中实现类似Map数据结构的操作。\n\nshell判断变量未赋值和变量为空字符\n\n>  1. 判断变量是否未赋值：\n> \n> if [ -z "${variable+x}" ]; then\n>     echo "变量未赋值"\n> else\n>     echo "变量已赋值"\n> fi\n> \n> \n> 上述代码中，${variable+x}表示如果变量variable被赋值，则返回x，否则返回空字符串。通过使用-z选项，我们可以判断空字符串是否为真，从而判断变量是否未赋值。\n> \n>  2. 判断变量是否为空字符串：\n> \n> if [ -z "$variable" ]; then\n>     echo "变量为空字符串"\n> else\n>     echo "变量不为空字符串"\n> fi\n> \n> \n> 上述代码中，-z选项用于判断变量是否为空字符串。如果变量为空字符串，则返回真，否则返回假。\n\n# 数组合并\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组\narray3=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array3[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6\n\n\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组并修改原始数组\narray1=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array1[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6 \n\n\n\n# 常用代码段\n\n\n# 当前脚本文件目录\n\n$(cd $(dirname $0);pwd)\n\n\n#!/bin/bash\n\n# 获取脚本所在路径\nscript_path=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )\necho "脚本所在路径：$script_path"\n\n\n\n# shell调用另一个脚本中的方法\n\n 1. 直接调用:\n\n如果你知道另一个脚本中的函数名称，你可以直接在当前的脚本中调用它。\n\n例如，假设你有两个脚本：script1.sh 和 script2.sh。在 script2.sh 中，有一个名为 myFunction 的函数。\n\n# script2.sh\nmyFunction() {\n    echo "Hello from myFunction in script2.sh"\n}\n\n\n你可以在 script1.sh 中直接调用这个函数：\n\n# script1.sh\nsource script2.sh  # 导入script2.sh中的函数和变量等\n\nmyFunction  # 调用script2.sh中的函数\n\n\n 1. 使用源命令 (source):\n\nsource 命令用于读取并执行指定脚本中的命令。这允许你在当前的shell环境中执行脚本，这意味着脚本中定义的任何函数或变量都将在当前环境中可用。\n\n例如：\n\nsource /path/to/script2.sh  # 使用source命令导入script2.sh中的函数和变量等\n\n\n 1. 使用点号 (.):\n\n点号也可以用来执行脚本，与 source 命令类似，但它不会创建新的子shell。这意味着脚本中定义的任何函数或变量都将在当前环境中可用。\n\n例如：\n\n. /path/to/script2.sh  # 使用点号执行script2.sh中的函数和变量等\n\n\n 1. 使用bash的 -c 选项:\n\n如果你只想执行脚本中的一行命令，可以使用 -c 选项：\n\nbash -c "source /path/to/script2.sh"  # 导入script2.sh中的函数和变量等，但不会在当前环境中使用它们，因为它们是在新的子shell中定义的。\n\n\n 1. 注意点:\n\n * 当使用 source 或点号时，脚本中的任何变量或函数都将在当前shell环境中定义。如果你不想改变当前的环境，使用子shell可能是更好的选择。你可以使用 bash -c "command" 的形式来在子shell中执行命令。',normalizedContent:'# 实战脚本简述\n\n\n# 流程控制\n\n\n# if\n\nif [ 条件判断式 ];then\n\t程序\nfi\n\n\nif [ 条件判断式 ]\n\tthen\n\t\t程序\nfi\n\n\nif [ 条件判断式 ]\n\tthen\n\t\t条件成立时，执行的程序\n\telse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\nif [ 条件判断式1 ]\n\tthen\n\t\t条件成立时，执行的程序\nelif [ 条件判断式2 ]\t\n\tthen\n\t\t条件成立时，执行的程序\n\n...省略更多条件...\n\nelse\n\t\t条件不成立时，执行的另一个程序\nfi\n\n\n\n# case\n\ncase $变量名 in\n\t"值1")\n\t\t如果变量的值等于值1，则执行程序1\n\t\t;;\n\t"值1")\n\t\t如果变量的值等于值2，则执行程序2\n\t\t;;\n\n\t…省略其他分支…\n\n\t*)\n\t\t如果变量的值都不是以上的值，则执行此程序\n\t\t;;\nesac\n\n\n\n# for\n\nfor 变量 in 值1 值2 值3 ...\n\tdo \n\t\t程序\n\tdone\n\n\nfor (( 初始值;循环控制条件;变量变化 ))\n\tdo\n\t\t程序\n\tdone\n\n\n\n# while\n\nwhile [ 条件判断式 ]\n    do\n        程序\n    done\n\n\n\n# until\n\nuntil [ 条件判断式 ]\n\tdo\n\t\t程序\n\tdone\n\n\n\n# 特殊控制语句\n\nexit [返回值]\n\nbreak\n\ncontinue\n\n\n\n# 函数\n\nfunction 函数名 () {\n\t程序\n}\n\n\n\n# 工具命令\n\n\n# cut\n\n# cut [选项]  文件名\n常见选项：\n    -c:\t以字符为单位进行分割,截取\n    -d:\t自定义分隔符，默认为制表符\\t\n    -f:\t与-d一起使用，提取第几列\n\n[root@xiaoshaozi ~]# echo "zs=123=456=789" | cut -d "=" -f 1,2,4\nzs=123=789\n\n\n\n# wc\n\n[root@localhost ~]# wc [选项] 文件名\n选项：\n    -l：只统计行数\n    -w：只统计单词数\n    -m：只统计字符数\n\n\n\n# seq\n\nseq: 是一个序列（squeue ）的缩写，主要用来输出序列化的东西\n\nseq [选项] 尾数\t\t\t\t\t\t#从到尾数\nseq [选项] 首数 尾数\t\t\t\t#从首数到尾数\nseq [选项] 首数 增量 尾数\t\t\t#从首数以增量到尾数\n\n以指定增量从首数开始打印数字到尾数。\n\n常用选项：\n    -f\t使用printf 样式的浮点格式\n    -s\t使用指定字符串分隔数字(默认使用：\\n)\n    -w\t在列前添加0 使得宽度相同【自动补位】\n\n\n指定分割符\n\n[root@server1 mnt]# seq -s \'#\' 5\n1#2#3#4#5\n\n[root@server1 mnt]# seq -s \' \' 10\n1 2 3 4 5 6 7 8 9 10\n\n[root@server1 mnt]# seq -w 10\n01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n\n\n\n产生范围数字\n\n产生-2~10内的整数，增量为2：\n\n[root@server1 mnt]# seq -2 2 10\n-2\n0\n2\n4\n6\n8\n10\n\n\n产生98~101之间的整数，并且要求输出数字宽度相同，不足的用0或空格补足：\n\n[root@server1 mnt]# seq -f "%03g" 98 101\n098\n099\n100\n101\n[root@server1 mnt]# seq -f "%3g" 98 101   \n 98\n 99\n100\n101\n\n注意：通过%后添加0替代空格补足空位\n\n\n\n# awk\n\n\n# sed\n\n\n# column\n\ncolumn对齐字段\n\n常用选项：\n    -t ：表格，默认以空格间隔\n    -s：需要配合-t使用，指定分隔符\n\n\n获取的文档版式比较乱\n\ncat tee.txt \n10.10.10.161 | success | rc=0 | (stdout) 21\n10.10.10.33 | success | rc=0 | (stdout) 22\n10.10.10.1 | success | rc=0 | (stdout) 62\n\n\n排版\n\ncat tee.txt |column -t \n10.10.10.161  |  success  |  rc=0  |  (stdout)  21\n10.10.10.33   |  success  |  rc=0  |  (stdout)  22\n10.10.10.1    |  success  |  rc=0  |  (stdout)  62\n\n\nsort 多重排序整理\n\n$ cat tee.txt |column -t |sort  -k5r -k1\n10.10.10.97   |  success  |  rc=0  |  (stdout)  7\n10.10.10.98   |  success  |  rc=0  |  (stdout)  7\n10.10.10.99   |  success  |  rc=0  |  (stdout)  7\n10.10.10.129  |  success  |  rc=0  |  (stdout)  65\n10.10.10.130  |  success  |  rc=0  |  (stdout)  65\n10.10.10.131  |  success  |  rc=0  |  (stdout)  65\n10.10.10.1    |  success  |  rc=0  |  (stdout)  62\n10.10.10.2    |  success  |  rc=0  |  (stdout)  62\n\n\n\n# expr\n\n正确： 所有操作符的两边，都需要有空格。\n[root@localhost scripts]# expr 1 + 1\n2\n\n\n"index string chars"用法示例。\n\n[root@localhost ~]# expr index abcde dec   # 在 abcde 中搜索 d 在第几个位置\n3\n\n[root@localhost ~]# expr index abcde xdc   # 在 abcde 中搜索x没有，在搜索d\n3\n\n[root@localhost ~]# expr index abcde 1\n0\n\n\n\n"substr string pos len"用法示例。\n\n该表达式是从string中取出从pos位置开始长度为len的子字符串。如果pos或len为非正整数时，将返回空字符串。\n\n[root@localhost ~]# expr substr abcde 2 3\nbcd\n \n[root@localhost ~]#  expr substr abcde 2 4\nbcde\n \n[root@localhost ~]#  expr substr abcde 2 5\nbcde\n \n[root@localhost ~]#  expr substr abcde 2 0\n \n[root@localhost ~]# expr substr abcde 2 -1\n\n\n"length string"用法示例。该表达式是返回string的长度，其中string不允许为空，否则将报错，所以可以用来判断变量是否为空。\n\n[root@xuexi ~]# expr length abcde\n5\n \n[root@xuexi ~]# expr length 111\n3\n \n[root@localhost scripts]# echo $xxx\n \n[root@xuexi ~]# expr length $xxx\nexpr: syntax error\n\n\n"+ token"用法示例。\n\nexpr中有些符号和关键字有特殊意义，如"match"、"index"、"length"，如果要让其成为字符，使用该表达式将任意token强制解析为普通字符串。格式：expr index 特殊关键字\n\n[root@localhost scripts]# expr index index d\nexpr: 语法错误\n[root@localhost scripts]# expr index length g\nexpr: 语法错误\n[root@localhost scripts]# expr index + length g\n4\n\n\n对值为关键字的变量来说，则无所谓。\n\n[root@localhost scripts]# len=lenght\n[root@localhost scripts]# expr index $len g\n4\n\n\n"string : regex"字符串匹配示例。要输出匹配到的字符串结果，需要使用"，否则返回的将是匹配到的字符串数量。\n\n[root@localhost ~]#expr abcde : \'ab\\(.*\\)\'   # \'ab\\(.*\\)\'  ab代表不匹配 .代表匹配一个  .*匹配所有  \\是为了转移字符，转移(  和)\ncde\n \n[root@localhost ~]# expr abcde : \'ab\\(.\\)\'\nc\n \n[root@localhost ~]# expr abcde : \'ab\\(..\\)\'\ncd\n \n[root@localhost ~]# expr abcde : \'ab.*\'    #  不写() 代表反馈匹配上的数字各个数\n5\n \n[root@localhost ~]# expr abcde : \'ab.\'   \n3\n \n[root@localhost ~]# expr abcde : \'.*cd*\'\n4\n \n[root@localhost ~]# cat abc\nabcdwe\n[root@localhost ~]# expr `cat abc` : \'ab\\(..\\)\'\ncd\n\n\n\n# grep\n\n[root@localhost ~]# grep [选项] \'关键字\' 文件名\n选项：\n    -i：\t\t\t\t忽略大小写\n    -n：\t\t\t\t输出行号\n    -v：\t\t\t\t反向查找 \n    ^,$,?,*,[a-z],[x]正则符号\n    ^$\t\t\t\t匹配空行\n\t^[[:space:]]*#\t匹配空行，匹配零个或多个空白字符，这包括空格、制表符和其他类型的空白字符\n[root@localhost ~]# grep -n \'root\' passwd\n[root@localhost ~]# grep -ni \'root\' passwd\n[root@localhost ~]# grep \'^root\' passwd\n[root@localhost ~]# grep \'root$\' passwd\n\n\n# grep -i root passwd\t\t\t\t\t\t忽略大小写匹配包含root的行\n# grep -w ftp passwd \t\t\t\t\t\t精确匹配ftp单词\n# grep -w hello passwd \t\t\t\t\t\t精确匹配hello单词;自己添加包含hello的行到文件\n# grep -wo ftp passwd \t\t\t\t\t\t打印匹配到的关键字ftp\n# grep -n root passwd \t\t\t\t\t\t打印匹配到root关键字的行好\n# grep -ni root passwd \t\t\t\t\t\t忽略大小写匹配统计包含关键字root的行\n# grep -nic root passwd\t\t\t\t\t\t忽略大小写匹配统计包含关键字root的行数\n# grep -i ^root passwd \t\t\t\t\t\t忽略大小写匹配以root开头的行\n# grep bash$ passwd \t\t\t\t\t\t\t匹配以bash结尾的行\n# grep -n ^$ passwd \t\t\t\t\t\t\t匹配空行并打印行号\n# grep ^# /etc/vsftpd/vsftpd.conf\t\t匹配以#号开头的行\n# grep -v ^# /etc/vsftpd/vsftpd.conf\t匹配不以#号开头的行\n# grep -a 5 mail passwd \t\t\t\t \t匹配包含mail关键字及其后5行\n# grep -b 5 mail passwd \t\t\t\t \t匹配包含mail关键字及其前5行\n# grep -c 5 mail passwd \t\t\t\t\t匹配包含mail关键字及其前后5行\n\n\n\n# sort\n\n[root@localhost ~]# sort [选项] 文件名\n常用选项：\n    -u ：去除重复行\n    -r ：降序排列，默认是升序\n    -n ：以数字排序，默认是按字符排序\n    -t ：分隔符\n    -k ：第n列\n\n\n\n# 符号\n\n\n# 输出重定向\n\n命令 &>/dev/null\n命令 >/dev/null 2>&1\n\n\n\n# 多命令\n\n;\t同时执行\n\n\n&& \t$?=0，则命令2执行\n\t$?=0，命令2不执行\n\n\n||\t$?=0，则命令2执行\n\t$?=0，命令2不执行\n\n\n[root@xiaoshaozi ~]# ls && echo yes || echo no\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\n\n\n\n# 其他\n\n\'\'\t单引号\n单引号中的特殊符号没有特殊意义：如 $、`\n\n""\t双引号\n特殊符号没有含义，$、`、\\ 例外\n\n``\t反引号\n``==>推荐使用==>$() bash中会先执行其中的命令\n\n$()\t引用系统命令\n\n${}\t变量引用\n变量引用更加强大，可对变量进行字符串截取\n\n$变量名 ==> ${变量名}\n\n[]\t条件判断\n\n\\$\t转移符：输出 $\n\n\n(命令;命令)\t\t在子shell中执行\n{ 命令;命令; }\t在当前shell中执行\n\n\n\n# 变量\n\n定义、引用\n$变量名 或 ${变量名}\n[root@xiaoshaozi ~]# test=123\n[root@xiaoshaozi ~]# test="$test"456\n[root@xiaoshaozi ~]# test=${test}789\n\n`` == $(命令)\n[root@xiaoshaozi ~]# test=`date`\n[root@xiaoshaozi ~]# test=$(date)\n\n\nunset 变量名\t变量删除\n\n\n[root@xiaoshaozi ~]# set [选项]\n选项：\n\t-u:\t如果设定此选项，调用未声明变量时会报错（默认无任何提示）\n\t-x:\t如果设定此选项，在命令执行之前，会吧命令先输出一次\n\nset -u 更为常用\n\n[root@xiaoshaozi ~]# set\n#直接使用set命令，会查询系统中所有的变量，包含用户自定义变量和环境变量\n\n[root@xiaoshaozi ~]# env\n# env看不到用户自定义变量，可以看到另一部分环境变量\n\n\nlocal 定义局部变量\n\nfunction hello(){\n        local text="hello world!!!" #局部变量\n        echo $text\n}\n\nshell脚本中定义的变量是global的,其作用域从被定义的地方开始，到shell结束或被显示删除的地方为止。\n如果同名，shell函数定义的local变量会屏蔽脚本定义的global变量。\n\n\n\n# 环境变量\n\n#使用export声明的变量即是环境变量\n方式一：\nexport 变量名=变量值\n[root@xiaoshaozi ~]# export zs_age="18"\n\n方式二：\n[root@xiaoshaozi ~]# zs_age="18"\n[root@xiaoshaozi ~]# export zs_age\n\n\n\n[root@xiaoshaozi ~]# set\n#直接使用set命令，会查询系统中所有的变量，包含用户自定义变量和环境变量\n\n[root@xiaoshaozi ~]# env\n# env看不到用户自定义变量，可以看到另一部分环境变量\n\n\n\n# 位置参数变量\n\n$n\t第n位参数，0-9以内用 $n，10以上的用 ${10}\n\n$*\t把所有参数看成一个整体\n\n$@\t代办所有参数，每个参数区分对待\n\n$#\t所有参数个数\n\n\n\n# 预定义变量\n\n$?\t最后一次执行命令的返回状态\n\n$$\t当前进程的进程号（pid）\n\n$!\t后台运行的最后一个进程的进程号（pid）\n\n其中$?最为常用\n\n\n\n# 接收键盘\n\n[root@localhost ~]# read [选项] [变量名]\n选项：\n\t-p\t“提示信息”：\t  在等待read输入时，输出提示信息\n\t-t\t秒数：\t\t read命令会一直等待用户输入，使用此选项可以指定等待时间\n\t-n\t字符数：\tread命令只接受指定的字符数，就会执行\n\t-s：\t\t\t  隐藏输入的数据，适用于机密信息的输入\n\t\n变量名：\n\t- 变量名可以自定义，如果不指定变量名，会把输入保存入默认变量reply\n\t- 如果只提供了一个变量名，则整个输入行赋予该变量\n\t- 如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，\n\t  而命令行上如果提供了一个以上的变量名，则输入行分为若干字，一个接一个地赋予各个变量，而命令行上\n\n\n\n# 条件判断\n\n文件类型\n\n格式一：\n[root@xiaoshaozi ~]# test [选项] 文件\n\n格式二：最常用格式\n[root@xiaoshaozi ~]# [ 选项 文件 ]\n\n常用选项：\n\t-e\t判断文件在不在\n\t-f\t在且是普通文件\n\t-l\t在且是链接文件\n\t-d\t判断是否是目录\n\t-s  文件是否存在，或文件是否非空\n\n\n文件权限\n\n常用选项：\n\t-r\t读\n\t-w\t写\n\t-x\t执行\n\n\n两个整数比较\n\n常用选项：\n    num1 -eq num2\t\tnum1 == num2\n    num1 -ne num2\t\tnum1 != num2\n    num1 -gt num2\t\tnum1 >  num2\n    num1 -lt num2\t\tnum1 <  num2\n    num1 -ge num2\t\tnum1 >= num2\n    num1 -le num2\t\tnum1 <= num2\n\n\n字符串比较\n\n常用选项：\n    -z str\t\tisblank?\n    -n str\t\tisnotblank?\n    str1 == str2\tstr1==str2\t\n    str1 !=\tstr2\tstr1!=str2\n\n\n多重条件\n\n-a \t与\n-o\t或\n!\t非\n\n[root@xiaoshaozi ~]# [ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no\nyes\n\n\n\n# $[ ] 、${ }、$( )、[ ]、[[ ]]、(())区别\n\n$()命令替换，等价于````` ```出现嵌套时只能使用$()\n\n$( ) \nfinish_time=$(date)\n\n\n$[ ]运算操作符，等价于$(( ))\n\nxjh@ubuntu:~/iot/tmp$ echo $[3*5]\n15\nxjh@ubuntu:~/iot/tmp$ echo $[(3+4)*5]\n35\nxjh@ubuntu:~/iot/tmp$\n\n\n${ } 变量使用操作符，有很多丰富的功能，简单引用$变量名\n\n[ ] test测试简写形式\n\n[[ ]] test升级版\n\n(())\n\n())是一个数学计算命令，用于对整数进行数学运算，比如((a=10+66)）。\n\n具体见博客数学计算命令（expr、(())、bc、declare等）中关于(())的介绍。\n\n\n# 其他\n\n\n# sh\n\nsh\nshell命令解释器\nbash [options] [file]\n\n选项:\n    -c string：命令从-c后的字符串读取。\n    -i：实现脚本交互。\n    -n：进行shell脚本的语法检查。\n    -x：实现shell脚本逐条语句的跟踪。\n\n常用形式：sh -xc "ls"\n\n\n[root@ay1307311912260196fcz satools]# sh -x check_ssh_login.sh\n+ define=30\n+ cat /var/log/secure\n+ awk \'/failed/ {++ip[$(nf-3)]} end {for (i in ip) print i"="ip[i]}\'\n++ cat /root/satools/black.txt\n+ for i in \'`cat /root/satools/black.txt`\'\n++ echo 121.42.0.16=1427\n++ awk -f= \'{print $1}\'\n+ ip=121.42.0.16\n++ echo 121.42.0.16=1427\n++ awk -f= \'{print $2}\'\n+ num=1427\n+ \'[\' 1427 -gt 30 \']\'\n+ grep 121.42.0.16 /etc/hosts.deny\n+ \'[\' 1 -gt 0 \']\'\n+ echo sshd:121.42.0.16\n+ echo vsftpd:121.42.0.16\n+ for i in \'`cat /root/satools/black.txt`\'\n++ echo 121.42.0.72=276\n++ awk -f= \'{print $1}\'\n+ ip=121.42.0.72\n++ awk -f= \'{print $2}\'\n++ echo 121.42.0.72=276\n+ num=276\n+ \'[\' 276 -gt 30 \']\'\n+ grep 121.42.0.72 /etc/hosts.deny\n+ \'[\' 1 -gt 0 \']\'\n+ echo sshd:121.42.0.72\n+ echo vsftpd:121.42.0.72\n\n\n\n# 变量\n\n\n# 数组\n\n在linux中，可以使用以下方式定义和使用数组：\n\n 1. 使用括号和空格将数组元素括起来，每个元素之间用空格分隔。例如：\n    \n    array=("apple" "banana" "orange")\n    \n\n 2. 使用索引访问数组元素，索引从0开始。例如：\n    \n    echo ${array[0]} # 输出：apple\n    \n\n 3. 使用*或@可以获取数组中的所有元素。例如：\n    \n    echo ${array[*]} # 输出：apple banana orange\n    \n\n 4. 使用#可以获取数组的长度。例如：\n    \n    echo ${#array[@]} # 输出：3\n    \n\n 5. 使用+=可以向数组中添加元素。例如：\n    \n    array+=("grape")\n    echo ${array[*]} # 输出：apple banana orange grape\n    \n\n 6. 使用unset可以删除数组中的元素。例如：\n    \n    unset array[1]\n    echo ${array[*]} # 输出：apple orange grape\n    \n\n 7. 使用循环遍历数组中的元素。例如：\n    \n    for item in ${array[*]}; do\n        echo $item\n    done\n    \n    \n    循环来遍历数组，并获取每个元素的键和值\n    \n    #!/bin/bash\n    \n    # 定义一个数组\n    my_array=(\n        "key1=value1"\n        "key2=value2"\n        "key3=value3"\n    )\n    \n    # 循环遍历数组\n    for item in "${my_array[@]}"\n    do\n        # 使用ifs（内部字段分隔符）将键和值分割开\n        ifs=\'=\' read -ra array <<< "$item"\n        key="${array[0]}"\n        value="${array[1]}"\n        \n        # 输出键和值\n        echo "key: $key, value: $value"\n    done\n    \n    \n    循环来遍历数组，并获取每个元素的索引和值。\n    \n    #!/bin/bash\n    \n    # 定义一个数组\n    my_array=("value1" "value2" "value3")\n    \n    # 获取数组长度\n    length=${#my_array[@]}\n    \n    # 循环遍历数组\n    for ((i=0; i<$length; i++))\n    do\n        # 获取索引和值\n        index=$i\n        value=${my_array[$i]}\n        \n        # 输出索引和值\n        echo "index: $index, value: $value"\n    done\n    \n    在上述示例中，我们首先定义了一个数组my_array。然后，使用length变量获取数组的长度。接下来，使用for循环遍历数组，并在循环体中获取每个元素的索引和值。最后，我们输出索引和值。\n    \n    请注意，上述示例中的数组索引从0开始计数。如果你希望从1开始计数，可以在输出索引时将$i替换为$((i+1))。\n    \n\n使用read命令结合循环结构来遍历以英文逗号分割的字符串\n\n#!/bin/bash\n\n# 定义一个包含逗号分割值的字符串\nstr="apple,banana,orange,grape"\n\n# 使用ifs（内部字段分隔符）将字符串按逗号分割成数组\nifs=\',\' read -ra arr <<< "$str"\n\n# 循环遍历数组中的每个值\nfor item in "${arr[@]}"; do\n    echo "$item"\ndone\n\n\n去除数组中的重复元素\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 使用sort和uniq命令去除重复元素\nsorted_arr=($(printf "%s\\n" "${arr[@]}" | sort | uniq))\n\n# 打印去重后的数组\necho "${sorted_arr[@]}"\n\n\n#!/bin/bash\n\n# 定义一个包含重复元素的数组\narr=("apple" "banana" "orange" "apple" "grape" "banana")\n\n# 声明关联数组\ndeclare -a unique_arr\n\n# 遍历原始数组，将每个元素作为关联数组的键，如果键不存在，则将其值设置为1，否则将其值递增1\nfor item in "${arr[@]}"; do\n    unique_arr["$item"]=1\ndone\n\n# 打印去重后的数组（关联数组的键即为去重后的元素）\necho "${!unique_arr[@]}"\n\n\n数组拷贝\n\n> 在操作数组前拷贝一份数组是一种常见的做法，可以避免直接修改原始数组，从而避免循环过程中出现异常。你可以使用以下代码来复制一个数组：\n\n# 原始数组\noriginal_array=("element1" "element2" "element3")\n\n# 复制数组\ncopied_array=("${original_array[@]}")\n\n# 在复制的数组上进行操作\nfor element in "${copied_array[@]}"; do\n  echo $element\ndone\n\n\n关联数组允许你将键与值相关联，类似于map数据结构。\n\n> 要在shell中使用关联数组，首先需要声明一个关联数组变量。以下是一个示例：\n> \n> declare -a map_array\n> \n> \n> 接下来，你可以通过键来添加或修改关联数组中的值。以下是一个示例：\n> \n> map_array["key1"]="value1"\n> map_array["key2"]="value2"\n> \n> \n> 要获取关联数组中的值，可以使用键来索引关联数组。以下是一个示例：\n> \n> value1="${map_array["key1"]}"\n> value2="${map_array["key2"]}"\n> \n> \n> 要删除关联数组中的键值对，可以使用unset命令。以下是一个示例：\n> \n> bashunset "map_array["key1"]"\n> \n> \n> 要遍历关联数组中的所有键值对，可以使用循环结构。以下是一个示例：\n> \n> for key in "${!map_array[@]}"; do\n>   echo "key: $key, value: ${map_array[$key]}"\n> done\n> \n> \n> 以上就是在shell中使用关联数组作为map数据结构的基本用法。通过使用关联数组，你可以在shell中实现类似map数据结构的操作。\n\nshell判断变量未赋值和变量为空字符\n\n>  1. 判断变量是否未赋值：\n> \n> if [ -z "${variable+x}" ]; then\n>     echo "变量未赋值"\n> else\n>     echo "变量已赋值"\n> fi\n> \n> \n> 上述代码中，${variable+x}表示如果变量variable被赋值，则返回x，否则返回空字符串。通过使用-z选项，我们可以判断空字符串是否为真，从而判断变量是否未赋值。\n> \n>  2. 判断变量是否为空字符串：\n> \n> if [ -z "$variable" ]; then\n>     echo "变量为空字符串"\n> else\n>     echo "变量不为空字符串"\n> fi\n> \n> \n> 上述代码中，-z选项用于判断变量是否为空字符串。如果变量为空字符串，则返回真，否则返回假。\n\n# 数组合并\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组\narray3=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array3[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6\n\n\n\n# 定义两个数组\narray1=("元素1" "元素2" "元素3")\narray2=("元素4" "元素5" "元素6")\n\n# 合并数组并修改原始数组\narray1=("${array1[@]}" "${array2[@]}")\n\n# 打印合并后的数组\necho "${array1[@]}"\n\n//元素1 元素2 元素3 元素4 元素5 元素6 \n\n\n\n# 常用代码段\n\n\n# 当前脚本文件目录\n\n$(cd $(dirname $0);pwd)\n\n\n#!/bin/bash\n\n# 获取脚本所在路径\nscript_path=$( cd "$( dirname "${bash_source[0]}" )" && pwd )\necho "脚本所在路径：$script_path"\n\n\n\n# shell调用另一个脚本中的方法\n\n 1. 直接调用:\n\n如果你知道另一个脚本中的函数名称，你可以直接在当前的脚本中调用它。\n\n例如，假设你有两个脚本：script1.sh 和 script2.sh。在 script2.sh 中，有一个名为 myfunction 的函数。\n\n# script2.sh\nmyfunction() {\n    echo "hello from myfunction in script2.sh"\n}\n\n\n你可以在 script1.sh 中直接调用这个函数：\n\n# script1.sh\nsource script2.sh  # 导入script2.sh中的函数和变量等\n\nmyfunction  # 调用script2.sh中的函数\n\n\n 1. 使用源命令 (source):\n\nsource 命令用于读取并执行指定脚本中的命令。这允许你在当前的shell环境中执行脚本，这意味着脚本中定义的任何函数或变量都将在当前环境中可用。\n\n例如：\n\nsource /path/to/script2.sh  # 使用source命令导入script2.sh中的函数和变量等\n\n\n 1. 使用点号 (.):\n\n点号也可以用来执行脚本，与 source 命令类似，但它不会创建新的子shell。这意味着脚本中定义的任何函数或变量都将在当前环境中可用。\n\n例如：\n\n. /path/to/script2.sh  # 使用点号执行script2.sh中的函数和变量等\n\n\n 1. 使用bash的 -c 选项:\n\n如果你只想执行脚本中的一行命令，可以使用 -c 选项：\n\nbash -c "source /path/to/script2.sh"  # 导入script2.sh中的函数和变量等，但不会在当前环境中使用它们，因为它们是在新的子shell中定义的。\n\n\n 1. 注意点:\n\n * 当使用 source 或点号时，脚本中的任何变量或函数都将在当前shell环境中定义。如果你不想改变当前的环境，使用子shell可能是更好的选择。你可以使用 bash -c "command" 的形式来在子shell中执行命令。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1708618656e3},{title:"Linux概述--2.虚拟机安装Linux",frontmatter:{"autoGroup+1":"Linux概述"},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--2.%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html",relativePath:"zs-use/linux/基本使用/Linux概述--2.虚拟机安装Linux.md",key:"v-2e5fd3cf",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--2.%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html",headers:[{level:2,title:"一、学习环境介绍",slug:"一、学习环境介绍",normalizedTitle:"一、学习环境介绍",charIndex:28},{level:3,title:"1、虚拟机概述",slug:"_1、虚拟机概述",normalizedTitle:"1、虚拟机概述",charIndex:41},{level:3,title:"2、软件说明",slug:"_2、软件说明",normalizedTitle:"2、软件说明",charIndex:240},{level:3,title:"3、系统部署需求",slug:"_3、系统部署需求",normalizedTitle:"3、系统部署需求",charIndex:452},{level:2,title:"二、虚拟机中安装RHEL8操作系统",slug:"二、虚拟机中安装rhel8操作系统",normalizedTitle:"二、虚拟机中安装rhel8操作系统",charIndex:541},{level:3,title:"1、创建虚拟机",slug:"_1、创建虚拟机",normalizedTitle:"1、创建虚拟机",charIndex:721},{level:3,title:"4、登录系统",slug:"_4、登录系统",normalizedTitle:"4、登录系统",charIndex:799},{level:2,title:"三、虚拟机快照和克隆",slug:"三、虚拟机快照和克隆",normalizedTitle:"三、虚拟机快照和克隆",charIndex:816},{level:3,title:"1、为什么需要快照和克隆？",slug:"_1、为什么需要快照和克隆",normalizedTitle:"1、为什么需要快照和克隆？",charIndex:831},{level:3,title:"2、如何拍摄快照？",slug:"_2、如何拍摄快照",normalizedTitle:"2、如何拍摄快照？",charIndex:1172},{level:3,title:"3、如何管理快照？",slug:"_3、如何管理快照",normalizedTitle:"3、如何管理快照？",charIndex:1190},{level:3,title:"4、如何克隆虚拟机？",slug:"_4、如何克隆虚拟机",normalizedTitle:"4、如何克隆虚拟机？",charIndex:1208},{level:2,title:"网络连接",slug:"网络连接",normalizedTitle:"网络连接",charIndex:1231},{level:2,title:"磁盘分区",slug:"磁盘分区",normalizedTitle:"磁盘分区",charIndex:1286},{level:3,title:"两种分区表形式",slug:"两种分区表形式",normalizedTitle:"两种分区表形式",charIndex:1384},{level:3,title:"分区类型",slug:"分区类型",normalizedTitle:"分区类型",charIndex:1528},{level:3,title:"格式化",slug:"格式化",normalizedTitle:"格式化",charIndex:1620},{level:3,title:"硬件设备文件名",slug:"硬件设备文件名",normalizedTitle:"硬件设备文件名",charIndex:1750},{level:3,title:"挂载",slug:"挂载",normalizedTitle:"挂载",charIndex:1766}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"一、学习环境介绍 1、虚拟机概述 2、软件说明 3、系统部署需求 二、虚拟机中安装RHEL8操作系统 1、创建虚拟机 4、登录系统 三、虚拟机快照和克隆 1、为什么需要快照和克隆？ 2、如何拍摄快照？ 3、如何管理快照？ 4、如何克隆虚拟机？ 网络连接 磁盘分区 两种分区表形式 分区类型 格式化 硬件设备文件名 挂载",content:"# Linux概述--2.虚拟机安装Linux\n\n\n# 一、学习环境介绍\n\n\n# 1、虚拟机概述\n\n1、什么是虚拟机软件？\n\n虚拟机软件，有些时候想模拟出一个真实的电脑环境，碍于使用真机安装代价太大，因此而诞生的一款可以模拟操作系统运行的软件。\n\n虚拟机软件目前有2个比较有名的产品：vmware 出品的vmware workstation、oracle 出品的virtual Box。\n\n2、虚拟机和虚拟机软件什么关系？\n\n虚拟机是在虚拟机软件下面模拟出来的一个计算机\n\n\n# 2、软件说明\n\n虚拟机软件\n\n版本                                            版本       大小\nVMware-workstation-full-15.1.0-13591040.exe   15.1.0   513M\n\n操作系统镜像文件                  版本    大小\nrhel-8.0-x86_64-dvd.iso   8.0   6.61GB\n\n\n# 3、系统部署需求\n\n 1. 由于是测试环境，为了方便学习，安装图形化界面\n\n 2. 语言环境配置中英文都可以\n\n 3. 安装基本的开发工具包\n\n 4. 磁盘自动分区即可\n\n\n# 二、虚拟机中安装RHEL8操作系统\n\n目标和思路：\n\n 1. 安装Vmware workstation 15.1版本虚拟机软件（模拟虚拟计算机）\n\n 2. 打开VMware workstation软件创建虚拟机（虚拟机计算机）\n\n 3. 将rhel8.0镜像文件放到虚拟光驱\n\n 4. 开机启动虚拟机安装rhel8.0操作系统\n\n 5. 登录操作系统\n\n\n# 1、创建虚拟机\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 4、登录系统\n\n\n\n\n\n\n\n\n# 三、虚拟机快照和克隆\n\n\n# 1、为什么需要快照和克隆？\n\n * 我们在学习实验环境下，可能会由于误操作导致系统不可用，但是又不想再重新安装系统，怎么办呢？\n\n * 我们在学习实验环境下，经常需要搭建各种复杂的环境，可能由于新的环境需求需要重新搭建一个新环境，但是又不想删除老的环境，怎么办呢？\n\n以上两种情况都可以使用快照实现。\n\n**快照：**又称还原点，就是保存在拍快照时候的系统的状态（包含了所有的内容），在后期的时候随时可以恢复还原到拍摄快照那个状态。\n\n * 我们在学习实验环境下，经常需要好几台虚拟机来完成实验的模拟，如果每次都安装新系统，安装好后，还需要配置，非常麻烦，有没有很好的办法呢？有\n\n克隆：可以根据一台配置好的虚拟机复制出一模一样的虚拟机出来，但是克隆需要虚拟机处在关闭状态\n\n\n# 2、如何拍摄快照？\n\n\n\n\n\n\n# 3、如何管理快照？\n\n\n\n\n\n\n# 4、如何克隆虚拟机？\n\n\n\n\n\n\n\n\n\n\n# 网络连接\n\n\n\n * 桥接：使用本地网卡\n * net：使用虚拟网卡\n * 仅主机：使用虚拟网卡\n\n\n\n\n# 磁盘分区\n\n磁盘分区 是使用分区编辑器（partition editor）在磁盘上划分几个逻辑部分。碟片一旦划分成数个分区（Partition），不同类的目录与文件可以存储进不同的分区。\n\n\n# 两种分区表形式\n\n * MBR分区表：最大支持2.1TB硬盘，最多支持4个分区\n * GPT分区表（全局唯一标示分区表）：GPT支持9.4ZB硬盘（1ZB=1024PB，1PB=1024EB，1EB=1024TB）。理论上支持的分区数没有限制，但windows限制128个主分区\n\n\n# 分区类型\n\n * 主分区：最多只能有4个。\n\n * 扩展分区：\n   \n   最多只能有1个。 主分区加扩展分区最多有4个。 不能写入数据，只能包含逻辑分区\n\n * 逻辑分区\n\n\n# 格式化\n\n * 格式化（高级格式化）又称逻辑格式化，它是指根据用户选定的文件系统（如FAT16、FAT32、NTFS、EXT2、EXT3、EXT4等），在磁盘的特定区域写入特定数据，在分区中划出一片用于存放文件分配表、目录表等用于文件管理的磁盘空间。\n\n\n# 硬件设备文件名\n\n\n\n\n\n\n# 挂载\n\n * 必须分区\n   \n   /（根分区）\n   \n   swap分区（交换分区）\n   \n   * 如果真实内存小于4GB，swap位内存的两倍\n   * 如果真实内存大于4GB，swap和内存一致\n   * 实验环境，不大于2GB\n\n * 推荐分区\n   \n   /boot（启动分区，1GB）\n\n * 常用分区\n   \n   /home（用于文件服务器）\n   \n   /www（用于Web服务器）\n\n",normalizedContent:"# linux概述--2.虚拟机安装linux\n\n\n# 一、学习环境介绍\n\n\n# 1、虚拟机概述\n\n1、什么是虚拟机软件？\n\n虚拟机软件，有些时候想模拟出一个真实的电脑环境，碍于使用真机安装代价太大，因此而诞生的一款可以模拟操作系统运行的软件。\n\n虚拟机软件目前有2个比较有名的产品：vmware 出品的vmware workstation、oracle 出品的virtual box。\n\n2、虚拟机和虚拟机软件什么关系？\n\n虚拟机是在虚拟机软件下面模拟出来的一个计算机\n\n\n# 2、软件说明\n\n虚拟机软件\n\n版本                                            版本       大小\nvmware-workstation-full-15.1.0-13591040.exe   15.1.0   513m\n\n操作系统镜像文件                  版本    大小\nrhel-8.0-x86_64-dvd.iso   8.0   6.61gb\n\n\n# 3、系统部署需求\n\n 1. 由于是测试环境，为了方便学习，安装图形化界面\n\n 2. 语言环境配置中英文都可以\n\n 3. 安装基本的开发工具包\n\n 4. 磁盘自动分区即可\n\n\n# 二、虚拟机中安装rhel8操作系统\n\n目标和思路：\n\n 1. 安装vmware workstation 15.1版本虚拟机软件（模拟虚拟计算机）\n\n 2. 打开vmware workstation软件创建虚拟机（虚拟机计算机）\n\n 3. 将rhel8.0镜像文件放到虚拟光驱\n\n 4. 开机启动虚拟机安装rhel8.0操作系统\n\n 5. 登录操作系统\n\n\n# 1、创建虚拟机\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 4、登录系统\n\n\n\n\n\n\n\n\n# 三、虚拟机快照和克隆\n\n\n# 1、为什么需要快照和克隆？\n\n * 我们在学习实验环境下，可能会由于误操作导致系统不可用，但是又不想再重新安装系统，怎么办呢？\n\n * 我们在学习实验环境下，经常需要搭建各种复杂的环境，可能由于新的环境需求需要重新搭建一个新环境，但是又不想删除老的环境，怎么办呢？\n\n以上两种情况都可以使用快照实现。\n\n**快照：**又称还原点，就是保存在拍快照时候的系统的状态（包含了所有的内容），在后期的时候随时可以恢复还原到拍摄快照那个状态。\n\n * 我们在学习实验环境下，经常需要好几台虚拟机来完成实验的模拟，如果每次都安装新系统，安装好后，还需要配置，非常麻烦，有没有很好的办法呢？有\n\n克隆：可以根据一台配置好的虚拟机复制出一模一样的虚拟机出来，但是克隆需要虚拟机处在关闭状态\n\n\n# 2、如何拍摄快照？\n\n\n\n\n\n\n# 3、如何管理快照？\n\n\n\n\n\n\n# 4、如何克隆虚拟机？\n\n\n\n\n\n\n\n\n\n\n# 网络连接\n\n\n\n * 桥接：使用本地网卡\n * net：使用虚拟网卡\n * 仅主机：使用虚拟网卡\n\n\n\n\n# 磁盘分区\n\n磁盘分区 是使用分区编辑器（partition editor）在磁盘上划分几个逻辑部分。碟片一旦划分成数个分区（partition），不同类的目录与文件可以存储进不同的分区。\n\n\n# 两种分区表形式\n\n * mbr分区表：最大支持2.1tb硬盘，最多支持4个分区\n * gpt分区表（全局唯一标示分区表）：gpt支持9.4zb硬盘（1zb=1024pb，1pb=1024eb，1eb=1024tb）。理论上支持的分区数没有限制，但windows限制128个主分区\n\n\n# 分区类型\n\n * 主分区：最多只能有4个。\n\n * 扩展分区：\n   \n   最多只能有1个。 主分区加扩展分区最多有4个。 不能写入数据，只能包含逻辑分区\n\n * 逻辑分区\n\n\n# 格式化\n\n * 格式化（高级格式化）又称逻辑格式化，它是指根据用户选定的文件系统（如fat16、fat32、ntfs、ext2、ext3、ext4等），在磁盘的特定区域写入特定数据，在分区中划出一片用于存放文件分配表、目录表等用于文件管理的磁盘空间。\n\n\n# 硬件设备文件名\n\n\n\n\n\n\n# 挂载\n\n * 必须分区\n   \n   /（根分区）\n   \n   swap分区（交换分区）\n   \n   * 如果真实内存小于4gb，swap位内存的两倍\n   * 如果真实内存大于4gb，swap和内存一致\n   * 实验环境，不大于2gb\n\n * 推荐分区\n   \n   /boot（启动分区，1gb）\n\n * 常用分区\n   \n   /home（用于文件服务器）\n   \n   /www（用于web服务器）\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"Linux概述--3.物理机安装Linux",frontmatter:{"autoGroup+1":"Linux概述"},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--3.%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html",relativePath:"zs-use/linux/基本使用/Linux概述--3.物理机安装Linux.md",key:"v-926841e0",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--3.%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85Linux.html",headers:[{level:2,title:"系统镜像获取",slug:"系统镜像获取",normalizedTitle:"系统镜像获取",charIndex:28},{level:2,title:"华为Atlas 500pro",slug:"华为atlas-500pro",normalizedTitle:"华为atlas 500pro",charIndex:154},{level:3,title:"RAID 1的配置",slug:"raid-1的配置",normalizedTitle:"raid 1的配置",charIndex:625},{level:3,title:"挂载虚拟光驱",slug:"挂载虚拟光驱",normalizedTitle:"挂载虚拟光驱",charIndex:1130},{level:3,title:"安装操作系统",slug:"安装操作系统",normalizedTitle:"安装操作系统",charIndex:1273},{level:3,title:"选择安装时使用的语言",slug:"选择安装时使用的语言",normalizedTitle:"选择安装时使用的语言",charIndex:1350},{level:3,title:"选择软件安装",slug:"选择软件安装",normalizedTitle:"选择软件安装",charIndex:1422},{level:3,title:"进行手动磁盘分区",slug:"进行手动磁盘分区",normalizedTitle:"进行手动磁盘分区",charIndex:1455},{level:3,title:"网络配置",slug:"网络配置",normalizedTitle:"网络配置",charIndex:1904},{level:3,title:"设置root密码和新建普通用户",slug:"设置root密码和新建普通用户",normalizedTitle:"设置root密码和新建普通用户",charIndex:2198},{level:3,title:"关闭防火墙和selinux",slug:"关闭防火墙和selinux",normalizedTitle:"关闭防火墙和selinux",charIndex:2396},{level:3,title:"修改网络配置网络并启动网络（补充说明）",slug:"修改网络配置网络并启动网络-补充说明",normalizedTitle:"修改网络配置网络并启动网络（补充说明）",charIndex:2741},{level:3,title:"基础组件安装",slug:"基础组件安装",normalizedTitle:"基础组件安装",charIndex:3278},{level:2,title:"U盘物理机安装",slug:"u盘物理机安装",normalizedTitle:"u盘物理机安装",charIndex:4630},{level:3,title:"制作启动盘",slug:"制作启动盘",normalizedTitle:"制作启动盘",charIndex:4642}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"系统镜像获取 华为Atlas 500pro RAID 1的配置 挂载虚拟光驱 安装操作系统 选择安装时使用的语言 选择软件安装 进行手动磁盘分区 网络配置 设置root密码和新建普通用户 关闭防火墙和selinux 修改网络配置网络并启动网络（补充说明） 基础组件安装 U盘物理机安装 制作启动盘",content:"# Linux概述--3.物理机安装Linux\n\n\n# 系统镜像获取\n\n\n\nhttp://isoredirect.centos.org/centos/7/isos/\n\n> 例如：\n> \n> CentOS7.9.2009 arch\n> \n> 阿里云镜像\n> \n> CentOS7.9.2009 x86\n\n\n# 华为Atlas 500pro\n\n表 2-1 系统版本及适配信息\n\n名称        内容\n操作系统型号    CentOS-7-aarch64-Everything-2009.iso\n操作系统版本    CentOS Linux release 7.9.2009 (AltArch)\n服务器硬件配置   内存:128GiB 磁盘: 5.2TiB（RAID1） CPU: Kunpeng 920 24 Core@2.6GHz\n服务器型号     华为主机 ATlas500 Pro\n\n将个人电脑用网线直连华为Atlas 500pro服务器的Mgmt网口，并且新增个人电脑的IP，新增IP地址端是192.168.2.xxx（除192.168.2.100之外）。打开谷歌浏览器，输入网址：https://192.168.2.100/\n\n\n\n点击“高级”，选择“继续前往192.168.2.100（不安全）”，就进入Mgmt的登入界面\n\n\n\n输入用户名：Administator 密码：Admin@9000\n\n登入完成之后，启动控制台\n\n\n\n\n# RAID 1的配置\n\n为了进行冗余，因此将服务器上四块磁盘进行两两的Raid 1的配置。\n\n等待机器重启当中，等机器进入如图1-4所示界面之后，按下键盘”F4”按键，进入BIOS设置界面，此时会提示输入密码。如图1-5所示，该密码是：Admin@9000，按下回车键之后，有可能会出现提示您，建议修改密码如图1-6，不用理会，直接按回车键，稍等之后，进入如图1-7界面，选择“中文”直接按下回车键，之后，再按照图1-8所示的步骤进行操作。\n\n\n\n\n\n\n\n\n\n\n\n之后进入raid的配置界面。选择界面中“阵列配置”→“创建阵列”，进入如图1-9的界面（界面中磁盘大小等以实际为主），选择其中两块大小一致的磁盘（按空格键选中）。按照图1-9图1-10图1-11图1-12所示的步骤进行操作。\n\n\n\n\n\n\n\n\n\n# centos7操作系统安装\n\nØ 系统版本号：CentOS Linux release 7.9.2009 (AltArch)\n\nØ 系统内核版本：4.18.0-193.28.1.el7.aarch64\n\nØ 安装软件(自带)：GUI和FTP\n\nØ 磁盘分区方案：硬件RAID1和软件的LVM\n\n\n# 挂载虚拟光驱\n\n进入控制之后进入控制台，在按照图1-13所示的步骤进行操作，添加操作系统镜像，之后点击“连接”\n\n\n\n连接成功之后，如图1-14所示：\n\n\n\n图 1-14\n\n之后在按照图1-15所示进行操作，操作完成之后在按照图1-16进程操作：\n\n\n\n\n\n等待机器进行重启。\n\n\n# 安装操作系统\n\n等待重启中，直到出现如图1-17所示为止，中间都不需要进行操作。\n\n然后按照图1-17上所示进行选择，并按下回车键进行确认。\n\n\n\n\n# 选择安装时使用的语言\n\n选择确认之后，等到图1-18所示的界面，并安装上面的步骤进行选择。\n\n\n\n点击继续之后，进行安装信息摘要部分，\n\n\n# 选择软件安装\n\n软件选择，安装如图1-19所示选择：\n\n\n\n\n# 进行手动磁盘分区\n\n安装目标位置(磁盘分区)，如图1-20所示\n\n\n\n点击完成之后，进入手动分配各个分区的界面，如图1-21所示，并按照图1-21所示的步骤进行操作。\n\n\n\n图 1-21\n\n之后，删除所有的系统分区，删除步骤如图1-22(不要一次性删除完，保留一个，添加新的分区之后再删除这个)。\n\n\n\n之后添加系统的各个分区，安装如下的顺序进行分区和分配大小。\n\nØ /boot/efi 4GB\n\nØ /boot 10GB\n\nØ Swap 128GB\n\nØ / 剩余所有容量\n\n并且所有的系统分区都在同一磁盘组下。具体的操作步骤，如图1-25、图1-26、图1-27、图1-28所示。\n\n\n\n图 1-23\n\n\n\n图 1-24\n\n重复图1-23、图1-24所示的步骤，将其他系统分区建立，建立“/”分区的时候，可以不填写期望容量。建立完成之后，如图1-25所示。\n\n\n\n图 1-25\n\n所有分区建立完成之后，点击上方的完成按键。弹出如图1-26所示，选择“接受更改”。\n\n\n\n图 1-26\n\n\n# 网络配置\n\n可以在安装的时候，就配置网络的IP地址和子网掩码。如果不在该处配置，也可参考第1.3.9章节的配置，进行网络地址的配置。IP地址等信息根据实际情况配置。\n\n在安装界面上选择“网络与主机名(N)”，如图1-27所示。\n\n\n\n图 1-27\n\n点击之后，选择第一个电口作为后面连接交换机的网口，即选择”enp125s0f4”进行配置，具体配置步骤，参数图1-28、图1-29、图1-30、图1-31和图1-32所示：\n\n\n\n图 1-28\n\n\n\n图 1-29\n\n\n\n图 1-30\n\n\n\n图 1-31\n\n\n\n图 1-32\n\n自动回到安装信息摘要的界面，点击右下角的“开始安装”\n\n\n# 设置root密码和新建普通用户\n\n设置root密码为：jysp，由于密码过于简单，需点击两次完成按键才能设置成功，具体步骤如图1-33和图1-34所示。\n\n\n\n图 1-33\n\n\n\n新建普通用户如图1-35所示.同样，如果设置的密码过于简单，也是要点击两次完成按键才可设置成功，新建的普通用户：jysp，jysp密码：jydw\n\n\n\n图 1-35\n\n等待操作系统安装完成之后点击“重启”。\n\n\n# 关闭防火墙和selinux\n\n直接在Mgmt的控制台上用root用户登入服务器。\n\n按照图1-36所示，先停掉防火墙，并检查是否已停止，然后重开机自启中删除掉防火墙。\n\nØ 暂停防火墙：systemctl stop firewalld.service\n\nØ 查看防火墙当前状态：systemctl status firewalld.service\n\nØ 删除防火墙开机自启：systemctl disable firewalld.service\n\n\n\n图 1-36\n\n临时关闭selinux命令：\n\nsetenforce 0\n\n永久关闭selinux，修改/etc/selinux/config文件，将\n\nSELINUX=enforcing 修改为 SELINUX=disable\n\n\n# 修改网络配置网络并启动网络（补充说明）\n\n(1) 修改网卡配置文件修改IP地址\n\n华为服务器正常是四个光口，两电口，现启用其第一个电口网口\n\n修改配置文件/etc/sysconfig/network-scripts/ifcfg-enp125s0f4，将\n\nBOOTPROTO=dhcp 修改为 BOOTPROTO=static\n\nONBOOT=on 修改为 ONBOOT=yes\n\n并新增：\n\nIPADDR=192.168.1.66 #根据实际IP修改\n\nNETMASK=255.255.255.0 #根据实际的子网掩码进行修改\n\n修改之后如图1-37所示\n\n\n\n(2) 图形化界面修改网络\n\n如通过显示屏直连服务器，可在图形化界面上对服务器的IP地址进行配置。如图1-38、图1-39、图1-40和图1-41所示的操作步骤，当网线未插到第一个电口时，该电口配置显示“线缆已拔出”，具体的IP地址和子网掩码需根据实际情况填写(图中为示例)。\n\n\n\n图 1-38\n\n\n\n图 1-39\n\n\n\n图 1-40\n\n\n\n图 1-41\n\n修改完成之后，重启一下网络：\n\nsystemctl restart network\n\n之后用网线连接服务器的第一个电口，并测试网络是否正常。\n\n\n# 基础组件安装\n\n如表2-1所示，汇总了安装的基础组件的相关信息，\n\n表2-1\n\n基础组件名称               版本                         操作和CPU架构\nMySQL                8.0.29-1.el7.aarch64       Centos7（ARM）\nRabbitmq             3.8.34-1.el8.noarch        Centos7（ARM）\nRedis                5.0.9                      Centos7（ARM）\nNginx                1.12.2-3.el7.aarch64       Centos7（ARM）\nMqtt（emqx）           5.0.2-el7-arm64            Centos7（ARM）\nInfluxdb             1.7.9_linux_arm64          Centos7（ARM）\nVsftp                3.0.2-28.el7.aarch64       Centos7（ARM）\nDocker               18.06.3.ce-3.el7.aarch64   Centos7（ARM）\nDocker-compose       1.26.0-arm64               Centos7（ARM）\nExagear              1169-1                     Centos7（ARM）\nExagear for docker   1169-1                     Centos7（ARM）\n\n# 配置yum源\n\nØ 系统版本：CentOS Linux release 7.9.2009 (AltArch)\n\nØ 配置方式：配置本地源\n\n(1) 上传镜像并挂载\n\n配置yum源，主要是解决某些软件安装时需要解决的依赖软件，或者解决某些Centos镜像中自带的软件库中已有的软件(如ftp,内核源码等)。\n\n将CentOS-7-aarch64-Everything-2009.iso镜像文件上传到服务器上(可放在jysp用户的家目录下)，并在该上传的目录下执行挂载镜像的命令（当服务器重启，该挂载失效，需重新挂载。）：\n\nmount -s CentOS-7-aarch64-Everything-2009.iso /media/\n\n\n执行结果如图2-1所示\n\n\n\n(2) 修改配置文件\n\n在/etc/yum.repos.d/目录下新建目录bak，然后将yum.repo.d目录下的所有文件都移动到bak目录下。之后/etc/yum.repos.d/目录下新建文件CentOS-iso.repo，并写入：\n\n[base]\nname=CentOS-7 - iso\nbaseurl=file:///media\ngpgcheck=0\nenabled=1\n\n\n\n\n保存退出之后，执行yum 软件包缓存更新命令(如图2-3所示)：\n\nyum makecache\n\n\n\n\n# U盘物理机安装\n\n\n# 制作启动盘\n\nrufus工具制作\n\n官网下载https://rufus.ie/zh/\n\n\n\n\n\n\n\n\n\n",normalizedContent:"# linux概述--3.物理机安装linux\n\n\n# 系统镜像获取\n\n\n\nhttp://isoredirect.centos.org/centos/7/isos/\n\n> 例如：\n> \n> centos7.9.2009 arch\n> \n> 阿里云镜像\n> \n> centos7.9.2009 x86\n\n\n# 华为atlas 500pro\n\n表 2-1 系统版本及适配信息\n\n名称        内容\n操作系统型号    centos-7-aarch64-everything-2009.iso\n操作系统版本    centos linux release 7.9.2009 (altarch)\n服务器硬件配置   内存:128gib 磁盘: 5.2tib（raid1） cpu: kunpeng 920 24 core@2.6ghz\n服务器型号     华为主机 atlas500 pro\n\n将个人电脑用网线直连华为atlas 500pro服务器的mgmt网口，并且新增个人电脑的ip，新增ip地址端是192.168.2.xxx（除192.168.2.100之外）。打开谷歌浏览器，输入网址：https://192.168.2.100/\n\n\n\n点击“高级”，选择“继续前往192.168.2.100（不安全）”，就进入mgmt的登入界面\n\n\n\n输入用户名：administator 密码：admin@9000\n\n登入完成之后，启动控制台\n\n\n\n\n# raid 1的配置\n\n为了进行冗余，因此将服务器上四块磁盘进行两两的raid 1的配置。\n\n等待机器重启当中，等机器进入如图1-4所示界面之后，按下键盘”f4”按键，进入bios设置界面，此时会提示输入密码。如图1-5所示，该密码是：admin@9000，按下回车键之后，有可能会出现提示您，建议修改密码如图1-6，不用理会，直接按回车键，稍等之后，进入如图1-7界面，选择“中文”直接按下回车键，之后，再按照图1-8所示的步骤进行操作。\n\n\n\n\n\n\n\n\n\n\n\n之后进入raid的配置界面。选择界面中“阵列配置”→“创建阵列”，进入如图1-9的界面（界面中磁盘大小等以实际为主），选择其中两块大小一致的磁盘（按空格键选中）。按照图1-9图1-10图1-11图1-12所示的步骤进行操作。\n\n\n\n\n\n\n\n\n\n# centos7操作系统安装\n\nø 系统版本号：centos linux release 7.9.2009 (altarch)\n\nø 系统内核版本：4.18.0-193.28.1.el7.aarch64\n\nø 安装软件(自带)：gui和ftp\n\nø 磁盘分区方案：硬件raid1和软件的lvm\n\n\n# 挂载虚拟光驱\n\n进入控制之后进入控制台，在按照图1-13所示的步骤进行操作，添加操作系统镜像，之后点击“连接”\n\n\n\n连接成功之后，如图1-14所示：\n\n\n\n图 1-14\n\n之后在按照图1-15所示进行操作，操作完成之后在按照图1-16进程操作：\n\n\n\n\n\n等待机器进行重启。\n\n\n# 安装操作系统\n\n等待重启中，直到出现如图1-17所示为止，中间都不需要进行操作。\n\n然后按照图1-17上所示进行选择，并按下回车键进行确认。\n\n\n\n\n# 选择安装时使用的语言\n\n选择确认之后，等到图1-18所示的界面，并安装上面的步骤进行选择。\n\n\n\n点击继续之后，进行安装信息摘要部分，\n\n\n# 选择软件安装\n\n软件选择，安装如图1-19所示选择：\n\n\n\n\n# 进行手动磁盘分区\n\n安装目标位置(磁盘分区)，如图1-20所示\n\n\n\n点击完成之后，进入手动分配各个分区的界面，如图1-21所示，并按照图1-21所示的步骤进行操作。\n\n\n\n图 1-21\n\n之后，删除所有的系统分区，删除步骤如图1-22(不要一次性删除完，保留一个，添加新的分区之后再删除这个)。\n\n\n\n之后添加系统的各个分区，安装如下的顺序进行分区和分配大小。\n\nø /boot/efi 4gb\n\nø /boot 10gb\n\nø swap 128gb\n\nø / 剩余所有容量\n\n并且所有的系统分区都在同一磁盘组下。具体的操作步骤，如图1-25、图1-26、图1-27、图1-28所示。\n\n\n\n图 1-23\n\n\n\n图 1-24\n\n重复图1-23、图1-24所示的步骤，将其他系统分区建立，建立“/”分区的时候，可以不填写期望容量。建立完成之后，如图1-25所示。\n\n\n\n图 1-25\n\n所有分区建立完成之后，点击上方的完成按键。弹出如图1-26所示，选择“接受更改”。\n\n\n\n图 1-26\n\n\n# 网络配置\n\n可以在安装的时候，就配置网络的ip地址和子网掩码。如果不在该处配置，也可参考第1.3.9章节的配置，进行网络地址的配置。ip地址等信息根据实际情况配置。\n\n在安装界面上选择“网络与主机名(n)”，如图1-27所示。\n\n\n\n图 1-27\n\n点击之后，选择第一个电口作为后面连接交换机的网口，即选择”enp125s0f4”进行配置，具体配置步骤，参数图1-28、图1-29、图1-30、图1-31和图1-32所示：\n\n\n\n图 1-28\n\n\n\n图 1-29\n\n\n\n图 1-30\n\n\n\n图 1-31\n\n\n\n图 1-32\n\n自动回到安装信息摘要的界面，点击右下角的“开始安装”\n\n\n# 设置root密码和新建普通用户\n\n设置root密码为：jysp，由于密码过于简单，需点击两次完成按键才能设置成功，具体步骤如图1-33和图1-34所示。\n\n\n\n图 1-33\n\n\n\n新建普通用户如图1-35所示.同样，如果设置的密码过于简单，也是要点击两次完成按键才可设置成功，新建的普通用户：jysp，jysp密码：jydw\n\n\n\n图 1-35\n\n等待操作系统安装完成之后点击“重启”。\n\n\n# 关闭防火墙和selinux\n\n直接在mgmt的控制台上用root用户登入服务器。\n\n按照图1-36所示，先停掉防火墙，并检查是否已停止，然后重开机自启中删除掉防火墙。\n\nø 暂停防火墙：systemctl stop firewalld.service\n\nø 查看防火墙当前状态：systemctl status firewalld.service\n\nø 删除防火墙开机自启：systemctl disable firewalld.service\n\n\n\n图 1-36\n\n临时关闭selinux命令：\n\nsetenforce 0\n\n永久关闭selinux，修改/etc/selinux/config文件，将\n\nselinux=enforcing 修改为 selinux=disable\n\n\n# 修改网络配置网络并启动网络（补充说明）\n\n(1) 修改网卡配置文件修改ip地址\n\n华为服务器正常是四个光口，两电口，现启用其第一个电口网口\n\n修改配置文件/etc/sysconfig/network-scripts/ifcfg-enp125s0f4，将\n\nbootproto=dhcp 修改为 bootproto=static\n\nonboot=on 修改为 onboot=yes\n\n并新增：\n\nipaddr=192.168.1.66 #根据实际ip修改\n\nnetmask=255.255.255.0 #根据实际的子网掩码进行修改\n\n修改之后如图1-37所示\n\n\n\n(2) 图形化界面修改网络\n\n如通过显示屏直连服务器，可在图形化界面上对服务器的ip地址进行配置。如图1-38、图1-39、图1-40和图1-41所示的操作步骤，当网线未插到第一个电口时，该电口配置显示“线缆已拔出”，具体的ip地址和子网掩码需根据实际情况填写(图中为示例)。\n\n\n\n图 1-38\n\n\n\n图 1-39\n\n\n\n图 1-40\n\n\n\n图 1-41\n\n修改完成之后，重启一下网络：\n\nsystemctl restart network\n\n之后用网线连接服务器的第一个电口，并测试网络是否正常。\n\n\n# 基础组件安装\n\n如表2-1所示，汇总了安装的基础组件的相关信息，\n\n表2-1\n\n基础组件名称               版本                         操作和cpu架构\nmysql                8.0.29-1.el7.aarch64       centos7（arm）\nrabbitmq             3.8.34-1.el8.noarch        centos7（arm）\nredis                5.0.9                      centos7（arm）\nnginx                1.12.2-3.el7.aarch64       centos7（arm）\nmqtt（emqx）           5.0.2-el7-arm64            centos7（arm）\ninfluxdb             1.7.9_linux_arm64          centos7（arm）\nvsftp                3.0.2-28.el7.aarch64       centos7（arm）\ndocker               18.06.3.ce-3.el7.aarch64   centos7（arm）\ndocker-compose       1.26.0-arm64               centos7（arm）\nexagear              1169-1                     centos7（arm）\nexagear for docker   1169-1                     centos7（arm）\n\n# 配置yum源\n\nø 系统版本：centos linux release 7.9.2009 (altarch)\n\nø 配置方式：配置本地源\n\n(1) 上传镜像并挂载\n\n配置yum源，主要是解决某些软件安装时需要解决的依赖软件，或者解决某些centos镜像中自带的软件库中已有的软件(如ftp,内核源码等)。\n\n将centos-7-aarch64-everything-2009.iso镜像文件上传到服务器上(可放在jysp用户的家目录下)，并在该上传的目录下执行挂载镜像的命令（当服务器重启，该挂载失效，需重新挂载。）：\n\nmount -s centos-7-aarch64-everything-2009.iso /media/\n\n\n执行结果如图2-1所示\n\n\n\n(2) 修改配置文件\n\n在/etc/yum.repos.d/目录下新建目录bak，然后将yum.repo.d目录下的所有文件都移动到bak目录下。之后/etc/yum.repos.d/目录下新建文件centos-iso.repo，并写入：\n\n[base]\nname=centos-7 - iso\nbaseurl=file:///media\ngpgcheck=0\nenabled=1\n\n\n\n\n保存退出之后，执行yum 软件包缓存更新命令(如图2-3所示)：\n\nyum makecache\n\n\n\n\n# u盘物理机安装\n\n\n# 制作启动盘\n\nrufus工具制作\n\n官网下载https://rufus.ie/zh/\n\n\n\n\n\n\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"shell--alias",frontmatter:{autoSort:799},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--alias.html",relativePath:"zs-use/linux/基本使用/shell--alias.md",key:"v-362d4c9a",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--alias.html",lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:null,content:"# shell--alias\n\n命令格式：\n#查询命令别名\n[root@localhost ~]#alias\n\n#设定命令别名\n[root@localhost ~]#alias 别名='原命令'\n\n例如\n[root@xiaoshaozi ~]# alias\nalias cp='cp -i'\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\nalias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'\n\n\n\n既然我们说别名的优先级比命令高，那么命令执行时具体的顺序是什么呢？\n\n命令执行时的顺序是这样的：\n\n1、第一顺位执行用绝对路径或相对路径执行的命令。\n2、第二顺位执行别名。\n3、第三顺位执行Bash的内部命令。\n4、第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令。\n\n\n为了让这个别名永久生效，可以把别名写入环境变量配置文件“~/.bashrc”。\n\n对所有用户生效/etc/bashrc\n\n命令如下：\n\n[root@localhost ~]# vim /root/.bashrc\n[root@localhost ~]# vim /etc/bashrc\n\n\n对所有用户生效\n[root@centos ~]# echo \"alias catfs='cat /etc/fstab'\" >> /etc/bashrc\n[root@centos ~]# source /etc/bashrc\n\n\n只对root用户生效\n[root@xiaoshaozi ~]# catfs\n#\n# /etc/fstab\n# Created by anaconda on Thu Jul 11 02:52:01 2019\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\nUUID=1114fe9e-2309-4580-b183-d778e6d97397 /                       ext4    defaults        1 1\n[root@xiaoshaozi ~]# \n[root@xiaoshaozi ~]# \n[root@xiaoshaozi ~]# su jysp\n[jysp@xiaoshaozi root]$ catfs\nbash: catfs: 未找到命令\n",normalizedContent:"# shell--alias\n\n命令格式：\n#查询命令别名\n[root@localhost ~]#alias\n\n#设定命令别名\n[root@localhost ~]#alias 别名='原命令'\n\n例如\n[root@xiaoshaozi ~]# alias\nalias cp='cp -i'\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\nalias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'\n\n\n\n既然我们说别名的优先级比命令高，那么命令执行时具体的顺序是什么呢？\n\n命令执行时的顺序是这样的：\n\n1、第一顺位执行用绝对路径或相对路径执行的命令。\n2、第二顺位执行别名。\n3、第三顺位执行bash的内部命令。\n4、第四顺位执行按照$path环境变量定义的目录查找顺序找到的第一个命令。\n\n\n为了让这个别名永久生效，可以把别名写入环境变量配置文件“~/.bashrc”。\n\n对所有用户生效/etc/bashrc\n\n命令如下：\n\n[root@localhost ~]# vim /root/.bashrc\n[root@localhost ~]# vim /etc/bashrc\n\n\n对所有用户生效\n[root@centos ~]# echo \"alias catfs='cat /etc/fstab'\" >> /etc/bashrc\n[root@centos ~]# source /etc/bashrc\n\n\n只对root用户生效\n[root@xiaoshaozi ~]# catfs\n#\n# /etc/fstab\n# created by anaconda on thu jul 11 02:52:01 2019\n#\n# accessible filesystems, by reference, are maintained under '/dev/disk'\n# see man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\nuuid=1114fe9e-2309-4580-b183-d778e6d97397 /                       ext4    defaults        1 1\n[root@xiaoshaozi ~]# \n[root@xiaoshaozi ~]# \n[root@xiaoshaozi ~]# su jysp\n[jysp@xiaoshaozi root]$ catfs\nbash: catfs: 未找到命令\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"shell--grep和管道符",frontmatter:{autoSort:798},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--grep%E5%92%8C%E7%AE%A1%E9%81%93%E7%AC%A6.html",relativePath:"zs-use/linux/基本使用/shell--grep和管道符.md",key:"v-58bed81c",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--grep%E5%92%8C%E7%AE%A1%E9%81%93%E7%AC%A6.html",headers:[{level:2,title:"grep命令",slug:"grep命令",normalizedTitle:"grep命令",charIndex:22},{level:2,title:"管道符",slug:"管道符",normalizedTitle:"管道符",charIndex:14}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"grep命令 管道符",content:'# shell--grep和管道符\n\n\n# grep命令\n\ngrep的作用是在文件中提取和匹配符合条件的字符串行。命令格式如下：\n\n[root@localhost ~]# grep [选项] "搜索内容" 文件名\n选项：\n    -i：\t\t\t\t忽略大小写\n    -n：\t\t\t\t输出行号\n    -v：\t\t\t\t反向查找\n    --color=auto:\t搜索出的关键字用颜色显示\n\n\nfind也是搜索命令，那么find命令和grep命令有什么区别呢？\n\n1）find命令\n\nfind命令用于在系统中搜索符合条件的文件名， 如果需要模糊查询，则使用通配符进行匹配，通配符是完全匹配 （find命令可以通过-regex选项，把匹配规则转为正则表达式规则，但是不建议如此）。\n\n2）grep命令\n\ngrep命令用于在文件中搜索符合条件的字符串，如果需要模糊查询，则使用正则表达式进行匹配，正则表达式是包含匹配。\n\n3）通配符与正则表达式的区别\n\n通配符：用于匹配文件名，完全匹配\n\n通配符   作用\n?     匹配一个任意字符\n*     匹配0个或任意多个任意字符，\n      也就是可以匹配任何内容\n[]    匹配中括号中任意一个字符。\n      例如：[abc]代表一定匹配一个字符，或者是a，或者是b，或者是c。\n[-]   匹配中括号中任意一个字符，代表一个范围。\n      例如：[a-z]代表匹配一个小写字母。\n[^]   逻辑非，表示匹配不是中括号内的一个字符。\n      例如：[^0-9]代表匹配一个不是数字的字符。\n      \n\n正则表达式：用于匹配字符串，包含匹配\n\n正则符   作用\n?     匹配前一个字符重复0次，或1次（?是扩展正则，需要使用egrep命令）\n*     匹配前一个字符重复0次，或任意多次\n[]    匹配中括号中任意一个字符。例如，[abc]代表一定匹配一个字符，或者是a，或者是b，或者是c\n[-]   匹配中括号中任意一个字符，-代表一个范围。例如，[a-z]代表匹配一个小写字母\n[^]   逻辑非，表示匹配不是中括号内的一个字符。例如，[^0-9]代表匹配一个不是数字的字符\n^     匹配行首\n$     匹配行尾\n\n\n# 管道符\n\n命令1的正确输出作为命令2的操作对象\n\n1）例子1：\n\n举个例子，我们经常需要使用“ll”命令查看文件的长格式，不过在有些目录中文件众多，\n\n比如/etc/目录，使用“ll”命令显示的内容就会非常多，只能看到最后的内容，而不能看到前面输出的内容。\n\n这时就可以利用管道符了。命令如下：\n\n[root@localhost ~]# ll -a /etc/ > /root/testfile\n[root@localhost ~]#  more /root/testfile\n\n使用管道：可以理解为在读取临时文件\n[root@localhost ~]# ll -a /etc/|more\n\n\n2）例子2：\n\n我想在命令ll/etc/的结果中搜索yum的文件名，应该使用find命令？还是grep命令？\n\nfind命令不支持管道操作\n[root@localhost ~]# ll -a /etc/|grep yum\n\n\n3）例子3：\n\nnetstat命令（CentOS 7中，需要安装net-snmp.x86_64，net-tools.x86_64两个包才有此命令。7.5系统中已经自动安装）格式如下：\n\n[root@localhost ~]# netstat [选项]\n选项：\n    -a：\t列出所有网络状态，包括Socket程序\n    -c：\t秒数：指定每隔几秒刷新一次网络状态\n    -n：\t使用IP地址和端口号显示，不使用域名与服务名\n    -p：\t显示PID和程序名\n    -t：\t显示使用TCP协议端口的连接状况\n    -u：\t显示使用UDP协议端口的连接状况\n    -l：\t仅显示监听状态的连接\n    -r：\t显示路由表\n\n\n# 查询系统中所有开启的端口\nnetstat -tuln\n',normalizedContent:'# shell--grep和管道符\n\n\n# grep命令\n\ngrep的作用是在文件中提取和匹配符合条件的字符串行。命令格式如下：\n\n[root@localhost ~]# grep [选项] "搜索内容" 文件名\n选项：\n    -i：\t\t\t\t忽略大小写\n    -n：\t\t\t\t输出行号\n    -v：\t\t\t\t反向查找\n    --color=auto:\t搜索出的关键字用颜色显示\n\n\nfind也是搜索命令，那么find命令和grep命令有什么区别呢？\n\n1）find命令\n\nfind命令用于在系统中搜索符合条件的文件名， 如果需要模糊查询，则使用通配符进行匹配，通配符是完全匹配 （find命令可以通过-regex选项，把匹配规则转为正则表达式规则，但是不建议如此）。\n\n2）grep命令\n\ngrep命令用于在文件中搜索符合条件的字符串，如果需要模糊查询，则使用正则表达式进行匹配，正则表达式是包含匹配。\n\n3）通配符与正则表达式的区别\n\n通配符：用于匹配文件名，完全匹配\n\n通配符   作用\n?     匹配一个任意字符\n*     匹配0个或任意多个任意字符，\n      也就是可以匹配任何内容\n[]    匹配中括号中任意一个字符。\n      例如：[abc]代表一定匹配一个字符，或者是a，或者是b，或者是c。\n[-]   匹配中括号中任意一个字符，代表一个范围。\n      例如：[a-z]代表匹配一个小写字母。\n[^]   逻辑非，表示匹配不是中括号内的一个字符。\n      例如：[^0-9]代表匹配一个不是数字的字符。\n      \n\n正则表达式：用于匹配字符串，包含匹配\n\n正则符   作用\n?     匹配前一个字符重复0次，或1次（?是扩展正则，需要使用egrep命令）\n*     匹配前一个字符重复0次，或任意多次\n[]    匹配中括号中任意一个字符。例如，[abc]代表一定匹配一个字符，或者是a，或者是b，或者是c\n[-]   匹配中括号中任意一个字符，-代表一个范围。例如，[a-z]代表匹配一个小写字母\n[^]   逻辑非，表示匹配不是中括号内的一个字符。例如，[^0-9]代表匹配一个不是数字的字符\n^     匹配行首\n$     匹配行尾\n\n\n# 管道符\n\n命令1的正确输出作为命令2的操作对象\n\n1）例子1：\n\n举个例子，我们经常需要使用“ll”命令查看文件的长格式，不过在有些目录中文件众多，\n\n比如/etc/目录，使用“ll”命令显示的内容就会非常多，只能看到最后的内容，而不能看到前面输出的内容。\n\n这时就可以利用管道符了。命令如下：\n\n[root@localhost ~]# ll -a /etc/ > /root/testfile\n[root@localhost ~]#  more /root/testfile\n\n使用管道：可以理解为在读取临时文件\n[root@localhost ~]# ll -a /etc/|more\n\n\n2）例子2：\n\n我想在命令ll/etc/的结果中搜索yum的文件名，应该使用find命令？还是grep命令？\n\nfind命令不支持管道操作\n[root@localhost ~]# ll -a /etc/|grep yum\n\n\n3）例子3：\n\nnetstat命令（centos 7中，需要安装net-snmp.x86_64，net-tools.x86_64两个包才有此命令。7.5系统中已经自动安装）格式如下：\n\n[root@localhost ~]# netstat [选项]\n选项：\n    -a：\t列出所有网络状态，包括socket程序\n    -c：\t秒数：指定每隔几秒刷新一次网络状态\n    -n：\t使用ip地址和端口号显示，不使用域名与服务名\n    -p：\t显示pid和程序名\n    -t：\t显示使用tcp协议端口的连接状况\n    -u：\t显示使用udp协议端口的连接状况\n    -l：\t仅显示监听状态的连接\n    -r：\t显示路由表\n\n\n# 查询系统中所有开启的端口\nnetstat -tuln\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"Linux概述--4.文件系统",frontmatter:{"autoGroup+1":"Linux概述"},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--4.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html",relativePath:"zs-use/linux/基本使用/Linux概述--4.文件系统.md",key:"v-07de2942",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Linux%E6%A6%82%E8%BF%B0--4.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html",headers:[{level:3,title:"终端的基本操作",slug:"终端的基本操作",normalizedTitle:"终端的基本操作",charIndex:22},{level:2,title:"Linux的目录树结构",slug:"linux的目录树结构",normalizedTitle:"linux的目录树结构",charIndex:172},{level:3,title:"1、了解目录树结构",slug:"_1、了解目录树结构",normalizedTitle:"1、了解目录树结构",charIndex:188},{level:3,title:"2、理解文件路径表示方法",slug:"_2、理解文件路径表示方法",normalizedTitle:"2、理解文件路径表示方法",charIndex:1003}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"终端的基本操作 Linux的目录树结构 1、了解目录树结构 2、理解文件路径表示方法",content:'# Linux概述--4.文件系统\n\n\n# 终端的基本操作\n\n㈠ 打开多个终端\n\n㈡ 快速清屏\n\n新建标签：command + T\n\n新建窗口：command + N\n\n关闭标签：command + Q\n\n关闭窗口：command + W\n\n放大：command + +\n\n缩小：command + -\n\n清屏：command + l\n\n\n# Linux的目录树结构\n\n\n# 1、了解目录树结构\n\n\n\n目录                   说明              备注\n/root                管理员root的家目录     \n/home                普通用户的默认家目录      /home/bozai /home/heima\n/bin—>/usr/bin       普通用户的命令         /usr/bin/date /usr/bin/ls\n/sbin—>/usr/sbin     管理员使用的命令        /usr/sbin/shutdown\n/usr/local           第三方源码包默认安装目录    类似windows下 C:\\Program Files\n/etc                 系统和服务相关配置文件     /etc/passwd\n/var                 动态，可以变化的数据文件    日志文件（/var/log/xxx）\n/tmp                 临时文件存放目录        全局可写（系统或程序产生临时文件）\n/dev                 设备文件            /dev/sda /dev/nvme0n1\n/lib—>/usr/lib       库文件             软连接文件\n/lib64—>/usr/lib64   库文件             软连接文件\n/proc                虚拟的文件系统         反映出来的是内核，进程信息或实时状态\n/boot                系统内核，引导程序相关文件   \n/media               移动设备默认的挂载点      \n/mnt                 手工挂载设备的挂载点      \n\n\n# 2、理解文件路径表示方法\n\nWho？——>当前登录的用户\n\nWhere?——>==路径==\n\n> 我要在==哪儿==创建文件？\n> \n> 我要删除==什么地方==的什么文件？\n> \n> 我所要查看的==文件在哪里==？\n\nWhat?——>操作命令\n\nHow？——>理清思路，找到方法，做就对了\n\n * 绝对路径\n   \n   1. 一定是以"/"(根)开头，它是唯一一个绝对能够描述文件所在路径的方式。\n   2. "/" 根目录是linux操作系统最顶级的目录，没有任何路径比它还要靠前。\n\n * 相对路径\n   \n   1. 路径是相对的，文件所在的路径是相对于当前所在路径而言的。\n   2. 当前路径使用 .或./ 表示；当前目录的上一级目录使用 ..或../ 表示\n   3. 当前用户家目录使用 ~ 表示；上次工作路径使用 - 表示\n\n * 路径切换和查看的相关命令\n\n命令    含义                          使用方法\npwd   查看当前工作路径                    pwd\ncd    更改工作路径，切换路径(默认切换到当前用户家目录)   cd 新路径\n\n * 举例说明\n\n[root@heima ~]# pwd 打印当前工作路径\n/root\n\n[root@heima ~]# cd /home 切换到/home目录下\n[root@heima home]# cd ../ 切换到当前路径的上一级目录\n[root@heima /]# pwd\n/\n\n[root@heima /]# cd ~ 切换到当前用户家目录\n[root@heima ~]# cd - 切换到上一次工作路径\n/\n\n[root@heima /]# cd 切换到当前用户家目录\n[root@heima ~]# pwd\n/root\n',normalizedContent:'# linux概述--4.文件系统\n\n\n# 终端的基本操作\n\n㈠ 打开多个终端\n\n㈡ 快速清屏\n\n新建标签：command + t\n\n新建窗口：command + n\n\n关闭标签：command + q\n\n关闭窗口：command + w\n\n放大：command + +\n\n缩小：command + -\n\n清屏：command + l\n\n\n# linux的目录树结构\n\n\n# 1、了解目录树结构\n\n\n\n目录                   说明              备注\n/root                管理员root的家目录     \n/home                普通用户的默认家目录      /home/bozai /home/heima\n/bin—>/usr/bin       普通用户的命令         /usr/bin/date /usr/bin/ls\n/sbin—>/usr/sbin     管理员使用的命令        /usr/sbin/shutdown\n/usr/local           第三方源码包默认安装目录    类似windows下 c:\\program files\n/etc                 系统和服务相关配置文件     /etc/passwd\n/var                 动态，可以变化的数据文件    日志文件（/var/log/xxx）\n/tmp                 临时文件存放目录        全局可写（系统或程序产生临时文件）\n/dev                 设备文件            /dev/sda /dev/nvme0n1\n/lib—>/usr/lib       库文件             软连接文件\n/lib64—>/usr/lib64   库文件             软连接文件\n/proc                虚拟的文件系统         反映出来的是内核，进程信息或实时状态\n/boot                系统内核，引导程序相关文件   \n/media               移动设备默认的挂载点      \n/mnt                 手工挂载设备的挂载点      \n\n\n# 2、理解文件路径表示方法\n\nwho？——>当前登录的用户\n\nwhere?——>==路径==\n\n> 我要在==哪儿==创建文件？\n> \n> 我要删除==什么地方==的什么文件？\n> \n> 我所要查看的==文件在哪里==？\n\nwhat?——>操作命令\n\nhow？——>理清思路，找到方法，做就对了\n\n * 绝对路径\n   \n   1. 一定是以"/"(根)开头，它是唯一一个绝对能够描述文件所在路径的方式。\n   2. "/" 根目录是linux操作系统最顶级的目录，没有任何路径比它还要靠前。\n\n * 相对路径\n   \n   1. 路径是相对的，文件所在的路径是相对于当前所在路径而言的。\n   2. 当前路径使用 .或./ 表示；当前目录的上一级目录使用 ..或../ 表示\n   3. 当前用户家目录使用 ~ 表示；上次工作路径使用 - 表示\n\n * 路径切换和查看的相关命令\n\n命令    含义                          使用方法\npwd   查看当前工作路径                    pwd\ncd    更改工作路径，切换路径(默认切换到当前用户家目录)   cd 新路径\n\n * 举例说明\n\n[root@heima ~]# pwd 打印当前工作路径\n/root\n\n[root@heima ~]# cd /home 切换到/home目录下\n[root@heima home]# cd ../ 切换到当前路径的上一级目录\n[root@heima /]# pwd\n/\n\n[root@heima /]# cd ~ 切换到当前用户家目录\n[root@heima ~]# cd - 切换到上一次工作路径\n/\n\n[root@heima /]# cd 切换到当前用户家目录\n[root@heima ~]# pwd\n/root\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"shell--history命令",frontmatter:{autoSort:800},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--history.html",relativePath:"zs-use/linux/基本使用/shell--history.md",key:"v-2a96af12",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--history.html",lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:null,content:"# shell--history命令\n\n1）历史命令的查看\n\n[root@xiaoshaozi ~]# history [选项] [历史命令保存文件]\n选项：\n\t-c：\t\t清空历史命令\n\t-w：\t\t把缓存中的历史命令写入历史命令保存文件。\n\t\t\t 如果不手工指定历史命令保存文件，\n\t\t\t 则放入默认历史命令保存文件~/.bash_history中\n\n\n> 修改profile文件参数\n\n[root@xiaoshaozi ~]# vim /etc/profile\n…省略部分输出…\nHISTSIZE=1000\n…省略部分输出…\n\n[root@xiaoshaozi ~]# . /etc/profile\n[root@xiaoshaozi ~]# source /etc/profile\n. \t有三中含义\n. \t代表source\n./ \t代表当前目录\n..\t代表上级目录\n.xx\t代表隐藏文件\n\n\n我们使用history命令查看的历史命令和~/.bash_history文件中保存的历史命令是不同的。 那是因为当前登录操作的命令并没有直接写入~/.bash_history文件，而是保存在缓存当中的。 需要等当前用户注销之后，缓存中的命令才会写入~/.bash_history文件。 如果我们需要把内存中的命令直接写入~/.bash_history文件，而不等用户注销时再写入，就需要使用“-w”选项了。\n\n2）、历史命令的调用\n\n如果想要使用原先的历史命令有这样几种方法：\n\n * 使用上、下箭头调用以前的历史命令\n * 使用“!n”重复执行第n条历史命令\n * 使用“!!”重复执行上一条命令\n * 使用“!字串”重复执行最后一条以该字串开头的命令\n * 使用“!$”重复上一条命令的最后一个参数",normalizedContent:"# shell--history命令\n\n1）历史命令的查看\n\n[root@xiaoshaozi ~]# history [选项] [历史命令保存文件]\n选项：\n\t-c：\t\t清空历史命令\n\t-w：\t\t把缓存中的历史命令写入历史命令保存文件。\n\t\t\t 如果不手工指定历史命令保存文件，\n\t\t\t 则放入默认历史命令保存文件~/.bash_history中\n\n\n> 修改profile文件参数\n\n[root@xiaoshaozi ~]# vim /etc/profile\n…省略部分输出…\nhistsize=1000\n…省略部分输出…\n\n[root@xiaoshaozi ~]# . /etc/profile\n[root@xiaoshaozi ~]# source /etc/profile\n. \t有三中含义\n. \t代表source\n./ \t代表当前目录\n..\t代表上级目录\n.xx\t代表隐藏文件\n\n\n我们使用history命令查看的历史命令和~/.bash_history文件中保存的历史命令是不同的。 那是因为当前登录操作的命令并没有直接写入~/.bash_history文件，而是保存在缓存当中的。 需要等当前用户注销之后，缓存中的命令才会写入~/.bash_history文件。 如果我们需要把内存中的命令直接写入~/.bash_history文件，而不等用户注销时再写入，就需要使用“-w”选项了。\n\n2）、历史命令的调用\n\n如果想要使用原先的历史命令有这样几种方法：\n\n * 使用上、下箭头调用以前的历史命令\n * 使用“!n”重复执行第n条历史命令\n * 使用“!!”重复执行上一条命令\n * 使用“!字串”重复执行最后一条以该字串开头的命令\n * 使用“!$”重复上一条命令的最后一个参数",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"shell--相关符号",frontmatter:{autoSort:797},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--%E7%9B%B8%E5%85%B3%E7%AC%A6%E5%8F%B7.html",relativePath:"zs-use/linux/基本使用/shell--相关符号.md",key:"v-6b3123eb",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/shell--%E7%9B%B8%E5%85%B3%E7%AC%A6%E5%8F%B7.html",headers:[{level:3,title:"1、名词解释",slug:"_1、名词解释",normalizedTitle:"1、名词解释",charIndex:18},{level:3,title:"2、相关符号",slug:"_2、相关符号",normalizedTitle:"2、相关符号",charIndex:135},{level:3,title:"3、举例说明",slug:"_3、举例说明",normalizedTitle:"3、举例说明",charIndex:245}],lastUpdated:"2024年1月8日星期一下午4点59分",lastUpdatedTimestamp:1704704371e3,headersStr:"1、名词解释 2、相关符号 3、举例说明",content:"# shell--相关符号\n\n\n# 1、名词解释\n\n * 标准输入（stdin）：键盘上的输入 文件描述符—>0\n\n * 标准输出（stdout）：屏幕上 正确 的输出 文件描述符—>1\n\n * 标准错误（stderr）：屏幕上 错误 的输出 文件描述符—>2\n\n\n# 2、相关符号\n\n> ：标准输出重定向,覆盖重定向, 1>或>标准输出重定向，2>标准错误重定向\n\n>> ：重定向追加, 1>> 标准输出追加，2>>标准错误追加\n\n< ：标准输入\n\n&>：标准输出标准错误重定向\n\n\n# 3、举例说明\n\n① 环境准备\n\n编写简单脚本（先直接复制用，后面说）：\n[root@localhost ~]# echo -e 'date\\nuuu' > 1.sh 创建1.sh脚本文件\n[root@localhost ~]# cat 1.sh\ndate\nuuu\n\n执行1.sh脚本，屏幕上有输出结果，如下：\n[root@localhost ~]# bash 1.sh\nThu Feb 28 21:22:27 CST 2019 正确的结果叫标准输出\n1.sh: line 2: uuu: command not found 错误的结果叫标准错误\n\n\n\n\n② 需求1：\n\n将标准输出（屏幕上的正确结果）重定向到/tmp/1.log文件中\n\n[root@localhost ~]# bash 1.sh 2> /tmp/2.log\nThu Feb 28 21:26:15 CST 2019 标准输出依然在屏幕，标准错误重定向到了文件中\n[root@localhost ~]# cat /tmp/2.log\n1.sh: line 2: uuu: command not found 文件里是标准错误的结果\n\n注意：>或者2>都表示覆盖重定向\n查看/etc/hosts文件内容，并将标准输出重定向到/tmp/1.log\n[root@localhost ~]# cat /etc/hosts > /tmp/1.log\n[root@localhost ~]# cat /tmp/1.log 查看该文件，发现原来内容被覆盖\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1 localhost localhost.localdomain localhost6 localhost6.localdomain6\n\n总结：>或者1>表示标准输出重定向；2>表示标准错误重定向\n\n\n③ 需求2：\n\n将标准错误（屏幕上的错误结果）重定向到/tmp/2.log文件中\n\n[root@localhost ~]# bash 1.sh 2> /tmp/2.log\nThu Feb 28 21:26:15 CST 2019 标准输出依然在屏幕，标准错误重定向到了文件中\n[root@localhost ~]# cat /tmp/2.log\n1.sh: line 2: uuu: command not found 文件里是标准错误的结果\n\n\n注意：>或者2>都表示覆盖重定向\n查看/etc/hosts文件内容，并将标准输出重定向到/tmp/1.log\n[root@localhost ~]# cat /etc/hosts > /tmp/1.log\n[root@localhost ~]# cat /tmp/1.log 查看该文件，发现原来内容被覆盖\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1 localhost localhost.localdomain localhost6 localhost6.localdomain6\n\n\n总结：>或者1>表示标准输出重定向；2>表示标准错误重定向\n\n\n④ 需求3：\n\n将标准输出和标准错误一起重定向到/tmp/3.log里\n\n[root@localhost ~]# bash 1.sh &>/tmp/3.log\n[root@localhost ~]# cat /tmp/3.log\nThu Feb 28 21:33:36 CST 2019\n1.sh: line 2: uuu: command not found\n说明：\n&>表示标准输出和标准错误一起重定向\n\n\n⑤需求4：\n\n不输出日志\n\n./1.sh >/dev/null 2>&1\t将标准输出和标准错误扔掉（放到空设备）\n等于\n./1.sh &>/dev/null\n\n说明\n1）/dev/null\t\tLinux系统下特殊的设备文件，空设备，类似黑洞\n",normalizedContent:"# shell--相关符号\n\n\n# 1、名词解释\n\n * 标准输入（stdin）：键盘上的输入 文件描述符—>0\n\n * 标准输出（stdout）：屏幕上 正确 的输出 文件描述符—>1\n\n * 标准错误（stderr）：屏幕上 错误 的输出 文件描述符—>2\n\n\n# 2、相关符号\n\n> ：标准输出重定向,覆盖重定向, 1>或>标准输出重定向，2>标准错误重定向\n\n>> ：重定向追加, 1>> 标准输出追加，2>>标准错误追加\n\n< ：标准输入\n\n&>：标准输出标准错误重定向\n\n\n# 3、举例说明\n\n① 环境准备\n\n编写简单脚本（先直接复制用，后面说）：\n[root@localhost ~]# echo -e 'date\\nuuu' > 1.sh 创建1.sh脚本文件\n[root@localhost ~]# cat 1.sh\ndate\nuuu\n\n执行1.sh脚本，屏幕上有输出结果，如下：\n[root@localhost ~]# bash 1.sh\nthu feb 28 21:22:27 cst 2019 正确的结果叫标准输出\n1.sh: line 2: uuu: command not found 错误的结果叫标准错误\n\n\n\n\n② 需求1：\n\n将标准输出（屏幕上的正确结果）重定向到/tmp/1.log文件中\n\n[root@localhost ~]# bash 1.sh 2> /tmp/2.log\nthu feb 28 21:26:15 cst 2019 标准输出依然在屏幕，标准错误重定向到了文件中\n[root@localhost ~]# cat /tmp/2.log\n1.sh: line 2: uuu: command not found 文件里是标准错误的结果\n\n注意：>或者2>都表示覆盖重定向\n查看/etc/hosts文件内容，并将标准输出重定向到/tmp/1.log\n[root@localhost ~]# cat /etc/hosts > /tmp/1.log\n[root@localhost ~]# cat /tmp/1.log 查看该文件，发现原来内容被覆盖\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1 localhost localhost.localdomain localhost6 localhost6.localdomain6\n\n总结：>或者1>表示标准输出重定向；2>表示标准错误重定向\n\n\n③ 需求2：\n\n将标准错误（屏幕上的错误结果）重定向到/tmp/2.log文件中\n\n[root@localhost ~]# bash 1.sh 2> /tmp/2.log\nthu feb 28 21:26:15 cst 2019 标准输出依然在屏幕，标准错误重定向到了文件中\n[root@localhost ~]# cat /tmp/2.log\n1.sh: line 2: uuu: command not found 文件里是标准错误的结果\n\n\n注意：>或者2>都表示覆盖重定向\n查看/etc/hosts文件内容，并将标准输出重定向到/tmp/1.log\n[root@localhost ~]# cat /etc/hosts > /tmp/1.log\n[root@localhost ~]# cat /tmp/1.log 查看该文件，发现原来内容被覆盖\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1 localhost localhost.localdomain localhost6 localhost6.localdomain6\n\n\n总结：>或者1>表示标准输出重定向；2>表示标准错误重定向\n\n\n④ 需求3：\n\n将标准输出和标准错误一起重定向到/tmp/3.log里\n\n[root@localhost ~]# bash 1.sh &>/tmp/3.log\n[root@localhost ~]# cat /tmp/3.log\nthu feb 28 21:33:36 cst 2019\n1.sh: line 2: uuu: command not found\n说明：\n&>表示标准输出和标准错误一起重定向\n\n\n⑤需求4：\n\n不输出日志\n\n./1.sh >/dev/null 2>&1\t将标准输出和标准错误扔掉（放到空设备）\n等于\n./1.sh &>/dev/null\n\n说明\n1）/dev/null\t\tlinux系统下特殊的设备文件，空设备，类似黑洞\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"命令--1.基本格式",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--1.%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F.html",relativePath:"zs-use/linux/基本使用/命令--1.基本格式.md",key:"v-097816ab",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--1.%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F.html",headers:[{level:2,title:"1.命令的提示符",slug:"_1-命令的提示符",normalizedTitle:"1.命令的提示符",charIndex:17},{level:2,title:"2.命令的基本格式",slug:"_2-命令的基本格式",normalizedTitle:"2.命令的基本格式",charIndex:230}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"1.命令的提示符 2.命令的基本格式",content:"# 命令--1.基本格式\n\n\n# 1.命令的提示符\n\n[root@localhost ~]#\n\n[]：这是提示符的分隔符号，没有特殊含义。\nroot：显示的是当前的登录用户，超哥现在使用的是root用户登录。\n@：分隔符号，没有特殊含义。\nlocalhost：当前系统的简写主机名（完整主机名是localhost.localdomain）。\n~：代表用户当前所在的目录，此例中用户当前所在的目录是家目录。\n#：命令提示符。超级用户是#，普通用户是$\n\n\n\n# 2.命令的基本格式\n\n[root@localhost ~]#命令 [选项] [参数]\n\n\nls是最常见的目录操作命令，主要作用是显示目录下的内容。\n\n * 命令名称：ls。\n\n * 英文原意：list。\n\n * 所在路径：/bin/ls。\n\n * 执行权限：所有用户。\n\n * 功能描述：显示目录下的内容。\n\n[root@localhost ~]#ls [选项][文件名或目录名]\n选项：\n\t-a:\t\t显示所有文件\n\t--color=when:支持颜色输出，when的值默认是always（总显示颜色），也可以是never（从不显示颜色）和auto（自动）\n\t-d：\t\t显示目录信息，而不是目录下的文件\n\t-h：\t\t人性化显示，按照我们习惯的单位显示文件大小\n\t-i：\t\t显示文件的i节点号\n\t-l：\t\t长格式显示\n\n\n举几个例子：\n\n[root@jysp ~]# ls -l\n总用量 8\n-rw-------. 1 root root 1833 12月 13 22:29 anaconda-ks.cfg\n-rw-r--r--. 1 root root 1881 12月 13 22:36 initial-setup-ks.cfg\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 公共\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 模板\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 视频\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 图片\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 文档\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 下载\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 音乐\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 桌面\n\n\n我们已经知道“-l”选项用于显示文件的详细信息，那么“-l”选项显示的这7列分别是什么含义？\n\n * 第一列：权限。具体权限的含义将在4.5节中讲解。\n * 第二列：引用计数。文件的引用计数代表该文件的硬链接个数，而目录的引用计数代表该目录有多少个一级子目录。\n * 第三列：所有者，也就是这个文件属于哪个用户。默认所有者是文件的建立用户\n * 第四列：所属组。默认所属组是文件建立用户的有效组，一般情况下就是建立用户的所在组。\n * 第五列：大小。默认单位是字节。\n * 第六列：文件修改时间。文件状态修改时间或文件数据修改时间都会更改这个时间，注意这个时间不是文件的创建时间。\n * 第七列：文件名。\n\n选项：是用于调整命令的功能的。\n\n参数：是命令的操作对象，如果省略参数，是因为有默认参数",normalizedContent:"# 命令--1.基本格式\n\n\n# 1.命令的提示符\n\n[root@localhost ~]#\n\n[]：这是提示符的分隔符号，没有特殊含义。\nroot：显示的是当前的登录用户，超哥现在使用的是root用户登录。\n@：分隔符号，没有特殊含义。\nlocalhost：当前系统的简写主机名（完整主机名是localhost.localdomain）。\n~：代表用户当前所在的目录，此例中用户当前所在的目录是家目录。\n#：命令提示符。超级用户是#，普通用户是$\n\n\n\n# 2.命令的基本格式\n\n[root@localhost ~]#命令 [选项] [参数]\n\n\nls是最常见的目录操作命令，主要作用是显示目录下的内容。\n\n * 命令名称：ls。\n\n * 英文原意：list。\n\n * 所在路径：/bin/ls。\n\n * 执行权限：所有用户。\n\n * 功能描述：显示目录下的内容。\n\n[root@localhost ~]#ls [选项][文件名或目录名]\n选项：\n\t-a:\t\t显示所有文件\n\t--color=when:支持颜色输出，when的值默认是always（总显示颜色），也可以是never（从不显示颜色）和auto（自动）\n\t-d：\t\t显示目录信息，而不是目录下的文件\n\t-h：\t\t人性化显示，按照我们习惯的单位显示文件大小\n\t-i：\t\t显示文件的i节点号\n\t-l：\t\t长格式显示\n\n\n举几个例子：\n\n[root@jysp ~]# ls -l\n总用量 8\n-rw-------. 1 root root 1833 12月 13 22:29 anaconda-ks.cfg\n-rw-r--r--. 1 root root 1881 12月 13 22:36 initial-setup-ks.cfg\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 公共\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 模板\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 视频\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 图片\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 文档\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 下载\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 音乐\ndrwxr-xr-x. 2 root root   10 12月 13 22:36 桌面\n\n\n我们已经知道“-l”选项用于显示文件的详细信息，那么“-l”选项显示的这7列分别是什么含义？\n\n * 第一列：权限。具体权限的含义将在4.5节中讲解。\n * 第二列：引用计数。文件的引用计数代表该文件的硬链接个数，而目录的引用计数代表该目录有多少个一级子目录。\n * 第三列：所有者，也就是这个文件属于哪个用户。默认所有者是文件的建立用户\n * 第四列：所属组。默认所属组是文件建立用户的有效组，一般情况下就是建立用户的所在组。\n * 第五列：大小。默认单位是字节。\n * 第六列：文件修改时间。文件状态修改时间或文件数据修改时间都会更改这个时间，注意这个时间不是文件的创建时间。\n * 第七列：文件名。\n\n选项：是用于调整命令的功能的。\n\n参数：是命令的操作对象，如果省略参数，是因为有默认参数",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"说明",frontmatter:{"autoGroup+1":"Linux概述"},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",relativePath:"zs-use/linux/基本使用/README.md",key:"v-a3565de6",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",lastUpdated:"2024年8月12日星期一早上8点55分",lastUpdatedTimestamp:1723424126e3,headersStr:null,content:"# 说明\n\n> 参考教程：黑马2019Linux系统教程189讲\n> \n> https://linux265.com/course/linux-command-ldconfig.html\n\n命令速查：https://man.niaoge.com/\n\n\n\n\n\n了解\n\nLinux系统安装、help、man手册\n\n必会\n\n语法：\n\n$()：括号里面的命令优先执行\n`` ：引号里面的命令优先执行，不允许嵌套\n相关符号\n\n\n命令：\n\n开关机、echo、find\ncp、mv、ls、mkdir、touch、tar、rm\ncat、less、tail\n\n\n必会的命令简介\n\n\n#=====开关机=====#\nreboot            #重启系统\nshutdown -r now   #立刻马上重启\nshutdown -r 30 30 #分钟后重启系统\n\n#=====echo=====#\necho\n  -n 不输出最后的换行符“\\n”\n  -e 解释转义字符\n#=====ls=====#\nls\n  最常用选项\n  -a all,查看目录下的所有文件，包括隐藏文件\n  -l 长列表显示\n  -S 按文件的大小排序\n  -R 递归列出目录中的内容\n\n#=====mkdir=====#\nmkdir\n  -p 级联创建\n\n#=====touch=====#\ntouch \n\n#=====命令查找=====#\nwhich\n  which mkdir\n\nwhereis\n  whereis mkdir\n\n#=====find=====#\nfind\n  -name\n  -iname\n  -size\n  -exec\n\n#=====tar=====#\ntar\n  -c  创建tar包（打包）\n  -z  调用gzip工具压缩\n  -v  显示详细信息\n  -f  指定包名\n  -x  解压\n\n#=====cat=====#\ncat\n  常见选项：\n  -n：显示行号\n#=====less=====#\nless 文件\n\tenter键：一行一行查看\n\t空格键：一页一页查看\n\t退出：Q键\n\t/:搜索\n\tn:查找下一个\n\tgg:回到开头\n\n#=====tail=====#\ntail \n  默认查看文件后10行\n  -n 15或tail -15 表示查看后15行； \n  -f 表示动态查看\n\n#=====cp=====#\ncp\n  最常用选项：\n  -a 递归拷贝文件，包括目录及文件属性信息\n  -r 拷贝目录\n  -v 显示拷贝过程信息\n\n\n#=====rm=====#\nrm\n  常用选项\n  -r 递归删除，一般用于删除目录\n  -f 直接删除，不提示\n\n#=====date=====#\ndate\n  查表\n",normalizedContent:"# 说明\n\n> 参考教程：黑马2019linux系统教程189讲\n> \n> https://linux265.com/course/linux-command-ldconfig.html\n\n命令速查：https://man.niaoge.com/\n\n\n\n\n\n了解\n\nlinux系统安装、help、man手册\n\n必会\n\n语法：\n\n$()：括号里面的命令优先执行\n`` ：引号里面的命令优先执行，不允许嵌套\n相关符号\n\n\n命令：\n\n开关机、echo、find\ncp、mv、ls、mkdir、touch、tar、rm\ncat、less、tail\n\n\n必会的命令简介\n\n\n#=====开关机=====#\nreboot            #重启系统\nshutdown -r now   #立刻马上重启\nshutdown -r 30 30 #分钟后重启系统\n\n#=====echo=====#\necho\n  -n 不输出最后的换行符“\\n”\n  -e 解释转义字符\n#=====ls=====#\nls\n  最常用选项\n  -a all,查看目录下的所有文件，包括隐藏文件\n  -l 长列表显示\n  -s 按文件的大小排序\n  -r 递归列出目录中的内容\n\n#=====mkdir=====#\nmkdir\n  -p 级联创建\n\n#=====touch=====#\ntouch \n\n#=====命令查找=====#\nwhich\n  which mkdir\n\nwhereis\n  whereis mkdir\n\n#=====find=====#\nfind\n  -name\n  -iname\n  -size\n  -exec\n\n#=====tar=====#\ntar\n  -c  创建tar包（打包）\n  -z  调用gzip工具压缩\n  -v  显示详细信息\n  -f  指定包名\n  -x  解压\n\n#=====cat=====#\ncat\n  常见选项：\n  -n：显示行号\n#=====less=====#\nless 文件\n\tenter键：一行一行查看\n\t空格键：一页一页查看\n\t退出：q键\n\t/:搜索\n\tn:查找下一个\n\tgg:回到开头\n\n#=====tail=====#\ntail \n  默认查看文件后10行\n  -n 15或tail -15 表示查看后15行； \n  -f 表示动态查看\n\n#=====cp=====#\ncp\n  最常用选项：\n  -a 递归拷贝文件，包括目录及文件属性信息\n  -r 拷贝目录\n  -v 显示拷贝过程信息\n\n\n#=====rm=====#\nrm\n  常用选项\n  -r 递归删除，一般用于删除目录\n  -f 直接删除，不提示\n\n#=====date=====#\ndate\n  查表\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701748296e3},{title:"命令--0.简易版",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--0.%E7%AE%80%E6%98%93%E7%89%88.html",relativePath:"zs-use/linux/基本使用/命令--0.简易版.md",key:"v-908a0e08",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--0.%E7%AE%80%E6%98%93%E7%89%88.html",headers:[{level:2,title:"开关机",slug:"开关机",normalizedTitle:"开关机",charIndex:16},{level:2,title:"帮助",slug:"帮助",normalizedTitle:"帮助",charIndex:86},{level:2,title:"文件操作",slug:"文件操作",normalizedTitle:"文件操作",charIndex:119},{level:2,title:"查找",slug:"查找",normalizedTitle:"查找",charIndex:350},{level:2,title:"用户|组",slug:"用户-组",normalizedTitle:"用户|组",charIndex:604},{level:3,title:"用户",slug:"用户",normalizedTitle:"用户",charIndex:604},{level:3,title:"组",slug:"组",normalizedTitle:"组",charIndex:607},{level:2,title:"文件权限",slug:"文件权限",normalizedTitle:"文件权限",charIndex:2030},{level:3,title:"普通",slug:"普通",normalizedTitle:"普通",charIndex:2039},{level:3,title:"高级",slug:"高级",normalizedTitle:"高级",charIndex:2760},{level:3,title:"默认权限",slug:"默认权限",normalizedTitle:"默认权限",charIndex:3251},{level:3,title:"ACL",slug:"acl",normalizedTitle:"acl",charIndex:3515},{level:3,title:"chattr",slug:"chattr",normalizedTitle:"chattr",charIndex:3872},{level:2,title:"网络配置",slug:"网络配置",normalizedTitle:"网络配置",charIndex:3967},{level:3,title:"主机名",slug:"主机名",normalizedTitle:"主机名",charIndex:3976},{level:3,title:"静态IP配置",slug:"静态ip配置",normalizedTitle:"静态ip配置",charIndex:4047},{level:3,title:"ifconfig",slug:"ifconfig",normalizedTitle:"ifconfig",charIndex:4554},{level:3,title:"ping",slug:"ping",normalizedTitle:"ping",charIndex:5116},{level:3,title:"netstat",slug:"netstat",normalizedTitle:"netstat",charIndex:5216},{level:3,title:"lsof",slug:"lsof",normalizedTitle:"lsof",charIndex:5658},{level:2,title:"文件系统",slug:"文件系统",normalizedTitle:"文件系统",charIndex:5733},{level:2,title:"挂载",slug:"挂载",normalizedTitle:"挂载",charIndex:5742},{level:3,title:"mount",slug:"mount",normalizedTitle:"mount",charIndex:5749},{level:3,title:"umount",slug:"umount",normalizedTitle:"umount",charIndex:5941},{level:3,title:"/etc/fstab文件",slug:"etc-fstab文件",normalizedTitle:"/etc/fstab文件",charIndex:6044},{level:2,title:"包管理工具",slug:"包管理工具",normalizedTitle:"包管理工具",charIndex:6662},{level:3,title:"rpm",slug:"rpm",normalizedTitle:"rpm",charIndex:6672},{level:3,title:"yum/dnf",slug:"yum-dnf",normalizedTitle:"yum/dnf",charIndex:7642},{level:3,title:"源码包安装",slug:"源码包安装",normalizedTitle:"源码包安装",charIndex:8230},{level:2,title:"打包压缩",slug:"打包压缩",normalizedTitle:"打包压缩",charIndex:8318},{level:2,title:"时间日期",slug:"时间日期",normalizedTitle:"时间日期",charIndex:8418},{level:2,title:"痕迹",slug:"痕迹",normalizedTitle:"痕迹",charIndex:9166},{level:3,title:"w",slug:"w",normalizedTitle:"w",charIndex:48},{level:3,title:"who",slug:"who",normalizedTitle:"who",charIndex:9539},{level:3,title:"last",slug:"last",normalizedTitle:"last",charIndex:9723},{level:3,title:"lastlog",slug:"lastlog",normalizedTitle:"lastlog",charIndex:10506},{level:3,title:"lastb",slug:"lastb",normalizedTitle:"lastb",charIndex:11677},{level:2,title:"echo",slug:"echo",normalizedTitle:"echo",charIndex:732},{level:2,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:108}],lastUpdated:"2024年1月8日星期一下午4点59分",lastUpdatedTimestamp:1704704371e3,headersStr:"开关机 帮助 文件操作 查找 用户|组 用户 组 文件权限 普通 高级 默认权限 ACL chattr 网络配置 主机名 静态IP配置 ifconfig ping netstat lsof 文件系统 挂载 mount umount /etc/fstab文件 包管理工具 rpm yum/dnf 源码包安装 打包压缩 时间日期 痕迹 w who last lastlog lastb echo 配置文件",content:"# 命令--0.简易版\n\n\n# 开关机\n\n关机\n\nsync\t#同步内存数据到硬盘\n\nshutdown -r now \t# 立刻马上重启\n\n\n重启\n\nreboot\n\n\n\n# 帮助\n\nman\n\nman 命令\nman 5 配置文件名\n\n\n\n# 文件操作\n\nls\n\nls -al\n\n\nmkdir\n\nmkdir -p 文件夹\n\n\ntouch\n\ntouch 文件\ntouch 文件{1..n}\n\n其他功能，修改文件时间\n\n\ncat\n\ncat [xx] 文件名\n-n 显示行号\n-A 显示控制符\n\n\nless/more\n\nless 文件\n\n\ntail\n\ntail -20f xxx.log\n\n\nmv\n\n重命名\nmv name1 name2\n\n移动\nmv 路径1 路径2\n\n\nrm\n\nrm -rf xxx\n\n\n\n# 查找\n\nwhich、whereis\n\nlocat\n\nupdatedb\t# 更新索引\n\nlocat 文件名 # 查找文件\n\n配置文件：/etc/updatedb.conf\n\n\nfind\n\n# 文件名搜\nfind /tmp -name \"*.conf\"\n\n# 文件大小 b|c|w|k|M|G\nfind /tmp -size +1M\nfind /tmp -size -M\t# 没有小于1M的文件时，会变成查找 -1K\n\n# 按照修改时间搜索\nfind /tmp mtime -5 # 5天内的时间搜索\n\n\n\n# 用户|组\n\n\n# 用户\n\n创建\n\n# 创建用户，指定用户组，指定家目录，不允许登录\nuseradd -g test -d /home/xxx -s /sbin/nologin test\n\n\n设置密码\n\n# 交互式\npasswd user01\n\n# 非交互\necho 我是密码 | passwd --stdin user01\n\n\n更改用户的账号信息\n\nchage [选项]\n    -l 列出账户的信息\n    -E 修改账户过期时间\n    -d 修改用户最后一次更改密码的时间\n\n# 修改用户登录后需要修改密码\nchage -d 0 用户名\n\n# 修改用户账号的过期时间为10天以后：\nchage -E $(date +%F -d '+10days') 用户名\n\n# 修改用户账号的过期时间：2019-03-10过期\nchage -E '2019-03-10' stu1\n\n\n修改用户信息\n\nusermod [选项] 用户名\n\t-s 指定用户默认shell\n\t-d 指定用户家目录(每个用户都有一个自己的家，并且默认在/home/xxx)\n    -m 移动用户家目录，和-d一起使用\n    -g 指定用户的默认组(主组)\n    -G 指定用户附加组(一个用户可以加入多个组，但是默认组只有一个)\n\n    \n# 修改stu4用户的默认shell为可登录系统 \nusermod -s /bin/sh stu4\n# 修改stu5用户的家目录\nuseradd -d /rhome/stu5 stu5\nusermod -md /home/stu5 stu5\n\n\n删除用户\n\nuserdel [选项] 用户名\n    -r 删除用户并且移除其家目录和邮箱\n    -f 强制删除正在登录的用户\n\n# 只删除用户user02，不删除其家目录\nuserdel stu1\n\n# 删除stu4用户以及家目录\nuserdel -r stu4\n\n# 强制删除一个正在登录的用户\nuserdel -r stu5\nuserdel -rf stu5\n\n\n用户信息文件\n\n# 密码文件\n/etc/passwd\n# 用户密码信息保存文件\n/etc/shadow\n\n\n\n# 组\n\n创建组\n\ngroupadd [选项] 组名\n\t-g 指定组的GID(编号)，默认唯一\n\t\n# 创建一个组admin\ngroupadd admin\n\n# 查看组信息\ntail -1 /etc/group\n\n\n删除组\n\ngroupdel 组名\n\n\n组成员管理\n\ngpasswd [选项] 组名\n    -a 添加用户到组\n    -d 从组中删除成员\n    -A 指定管理员\n    -M 指定组成员（会覆盖），可以批量添加用户到组中\n    -r 删除密码\n    \n# 指定user01用户的附加组为sysadmin（站在用户角度）\nusermod -G sysadmin user01\n\n# 使用gpasswd命令添加用户到组里\ngpasswd -a user01 sysadmin\n\n# -M选项：表示覆盖设置组成员（会覆盖原来的成员列表）\ngpasswd -M user02,user03 sysadmin\n\n# 指定admin\ngpasswd -A stu2 admin\n\n# 将user03用户从组sysadmin里移除\ngpasswd -d user03 sysadmin\n\n\n\n# 文件权限\n\n\n# 普通\n\n修改文件权限\n\nchmod [选项] 模式 文件名\n\t-R 递归更改目录和目录里文件的权限\n\n    u:表示文件拥有者\n    g:表示文件属组里的用户\n    o:表示其他人，即不是文件的创建者，也不在文件属组里\n    a:表示所有人\n    \n    字母和数字对应关系：\n    r——4\n    w——2\n    x——1\n    -——0\n\n# 使用字母形式修改文件权限\nchmod u+x test1\nchmod g+w test1\nchmod o-r test1\nchmod a+x test2\nchmod u+x,g+w,o-r test3\nchmod u=rw,g=rx,o+r test3\n\n# 修改目录的权限：\n# 只修改目录本身的权限\nchmod g+w dir1/\n# 修改目录以及目录里所有文件的权限（递归修改），使用-R参数\nchmod -R o+w dir1/\n\n# 通过数字形式更改文件权限\nchmod 644 file1 \t# rw-r--r--\nchmod 700 file2\t\t# rwx------\nchmod -R 755 dir1\t# rwxr-xr-x\n\n\n文件属主、组\n\n# 只修改文件的属主\nchown 用户名 文件名\n\n# 修改文件的属主和属组\nchown 用户名.组名 文件名\nchown 用户名:组名 文件名\nchown 用户名. 文件名  \t# 没有指定组名，默认是用户的主组\n\n# 只修改文件的属组\nchown .组名 文件名\nchown :组名 文件名\n\n# 可以加-R选项，表示递归修改\n\n\n# chgrp只能修改文件的属组。\nchgrp 组名 文件名\n\n\n\n# 高级\n\n#=====冒险位=====\n# 给一个vim命令设置冒险位，目的是任何人拿vim去修改文件可以临时获得文件拥有者的权限\nchmod u+s /usr/bin/vim\nchmod 4755 /usr/bin/vim\n# 恢复\nchmod u-s /usr/bin/vim\nchmod 0755 /usr/bin/vim\n\n#=====强制位=====\n# 给目录dir2设置一个强制位，测试是否任何人在该目录里创建的文件属组都是该目录的属组\nchmod g+s dir2\nchmod 2xxx dir2\n# 恢复\nchmod g-s dir2\nchmod 0xxx dir2\n\n\n#=====粘滞位=====\n# 在创建一个公共目录/tmp/dir3,要求所有人都可以在该公共目录里创建、删除文件；\n# 但是只能自己管理自己，不能删除别人的文件\nchmod 777 /tmp/dir3\nchmod o+t /tmp/dir3\n或\nchmod 1777 /tmp/dir3\n# 恢复\nchmod o-t /tmp/dir3\nchmod 0777 /tmp/dir3\n\n\n\n# 默认权限\n\n====》权限计算规则《====\n目录：\n目录的默认权限=0777-umask=0777-0007=0770 rwxrwx---\n普通文件：\n文件的默认权限=0666-umask=0666-0007=0660 rw-rw----\n\n====》默认umask《====\n普通用户默认：umask 0002\nroot用户默认：umask 0022\n\n普通用户：  目录（775）,文件（664）\n管理员：    目录（755）,文件（644）\n\n# 全局配置\n/etc/profile\n/etc/bashrc\n\n\n\n# ACL\n\nsetfacl\n    -m 修改或者设置ACL策略\n    -R 递归授权，对目录下已存在的目录或文件有acl策略，但新建的文件没有\n    -x 去掉某个用户或者某个组的ACL策略\n    -b 删除所有的acl策略\n\nsetfacl -m u:用户:rwx /home/redhat/file1 给单个用户单独加权限\nsetfacl -m g:组名:rwx /home/redhat/file1 给单个组单独加权限\nsetfacl -x u:用户 /home/redhat/file1 去掉某个用户的权限\nsetfacl -x g:组名 /home/redhat/file1 去掉某个组的acl策略\nsetfacl -b /home/redhat/file1 删除文件上所有的acl策略\n\n\n\n# chattr\n\n[root@localhost ~]# lsattr 选项 文件名\n选项：\n\t-a\t显示所有文件和目录\n\t-d\t若目标是目录，仅列出目录本身的属性，而不是子文件的\n\n\n\n# 网络配置\n\n\n# 主机名\n\nhostnamectl set-hostname RedHat8.itcast.cn\n\n/etc/hostname 文件\n\n\n\n# 静态IP配置\n\n[root@heima ~]# cd /etc/sysconfig/network-scripts/\n[root@heima network-scripts]# ls\nifcfg-ens160\n[root@heima network-scripts]# cat ifcfg-ens160\nTYPE=Ethernet \t\t\t以太网\nBOOTPROTO=none \t\t\tIP获取方式，none和static表示静态，dhcp动态\nNAME=ens160 \t\t\t网卡名称\nUUID=63b0b6ee-fbee-4b17-80be-e3b36ff27493 网卡UUID，唯一标识\nDEVICE=ens160 \t\t\t网卡设备名\nONBOOT=yes \t\t\t\t激活网卡\nIPADDR=192.168.159.100 \tIP地址\nPREFIX=24 \t\t\t\t子网掩码 或者 NETMASK=255.255.255.0\nGATEWAY=192.168.159.2 \t网关\nDNS1=8.8.8.8 \t\t\tdns服务器\n\n# 重启网卡\nsystemctl restart network.service\n\n\n\n# ifconfig\n\n[jysp@jysp ~]$ ifconfig\n...省略...\nenp125s0f5: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.1.101  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 fe80::77b1:8f7c:2a45:346  prefixlen 64  scopeid 0x20<link>\n        ether cc:20:8c:73:9d:d8  txqueuelen 1000  (Ethernet)\n        RX packets 5764048  bytes 710412064 (677.5 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 10539417  bytes 4741264284 (4.4 GiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n...省略...\n\n\n\n# ping\n\nping [选项] IP\n选项：\n\t-b:\t\t\t后面加入广播地址，用于对整个网段进行探测\t\n\t-c 次数:\t   用于指定ping的次数\n\t-s 字节:\t   指定探测包的大小\n\n\n\n# netstat\n\n[root@localhost ~]# netstat [选项]\n选项：\n\t-a：\t\t列出所有网络状态，包括Socket程序\n\t-c 秒数： 指定每隔几秒刷新一次网络状态\n    -n：\t\t使用IP地址和端口号显示，不使用域名与服务名\n    -p：\t\t显示PID和程序名\n    -t：\t\t显示使用TCP协议端口的连接状况\n    -u：\t\t显示使用UDP协议端口的连接状况\n    -l：\t\t仅显示监听状态的连接\n    -r：\t\t显示路由表\n\n\n[root@jysp ~]# netstat -tuln\n[root@jysp ~]# netstat -tulnp\n[root@jysp ~]# netstat -an\n[root@jysp ~]# netstat -anp\n[root@jysp ~]# netstat -rn\n\nnetstat -tulnp | grep [端口号|程序]\nnetstat -anp | grep [端口号|程序]\n\n\n\n# lsof\n\nlsof -i <条件>:[端口号]\n\n# 列出系统上被进程打开的文件的相关信息\nlsof -i -P | grep [程序]\n\n\n\n# 文件系统\n\n\n# 挂载\n\n\n# mount\n\nmount -o  loop /home/CentOS-7-x86_64-DVD-1708.iso   /media/centos7_iso\n\nmount -t iso9660 /dev/cdrom /mnt/cdrom\n\nmount -t vfat /dev/sdb4 /mnt/usb/\n# 挂载U盘。因为是Windows分区，所以是vfat文件系统格式\n\n\n\n# umount\n\n# umount /dev/hda5\n# umount /mnt/hda5\n# umount /dev/hda5 /mnt/hda5\n\n# umount -l /mnt/hda5\n\n\n\n# /etc/fstab文件\n\n[root@localhost ~]# cat /etc/fstab\n\n#\n# /etc/fstab\n# Created by anaconda on Wed Dec 13 22:10:25 2023\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\n/dev/mapper/centos-root /                       xfs     defaults        0 0\nUUID=1b7d1f9f-b2af-4efb-af81-7d7bc7ef1864 /boot                   xfs     defaults        0 0\n/dev/mapper/centos-swap swap                    swap    defaults        0 0\n\n\n/home/jysp/CentOS-7-x86_64-Everything-2009.iso /media/centos7_iso/ iso9660 defaults,ro,loop 0 0 \n\n\n\n# 包管理工具\n\n\n# rpm\n\n# 查看已经安装的所有rpm包\nrpm -qa 软件包名\nrpm -aq|grep 软件包名字\n# 查看已经安装软件的配置文件\nrpm -qc 软件包名\n# 查看已经安装的软件的文件列表\nrpm -ql 软件包名\n# 查看指定文件来自哪个rpm包\nrpm -qf 文件名\n选项：\n\t-q\t查询（query）\n\t-a\t所有（all）\n\t-i\t查询软件信息(information)\n\t-p\t查询没有安装的软件包（package）\n\t-l\t列出软件包中所有文件列表，以及安装目录\n\t-d\t查看文档\n\t-c\t查看配置文件目录\n\t-f\t系统文件属于哪个软件包（file）\n\t-R\t查询软件包的依赖性（requires）\n\n\n# rpm -ivh 包全名\n选项：\n\t-i\tinstall安装（install）\n\t-v\t显示更详细的信息（verbose）\n\t-h\t打印#显示安装进度（hash）\n\t\n# rpm -e 包名\n选项：\n\t--nodeps\t不检查依赖性\n\t-e\t\t\t卸载\n\t\n# rpm -Uvh 包全名\n或者\n# rpm -Fvh 包全名\n选项：\n\t-v:输出详细信息\n\t-h:打印散列标记，一般和-v一起使用\n\t-U:升级软件包，如果该软件包没安装，会自动帮你安装\n\t-F:升级软件包，如果该软件包没安装，不会自动帮你安装\n\t\n\n\n--force\n表示强制\nrpm -ivh 软件包 --force \n强制安装软件包\nrpm -e 软件包名 --force \n强制卸载软件包\n\n\n--nodeps \n忽略依赖关系\nrpm -ivh 软件包 --nodeps\n忽略依赖关系安装\nrpm -e 软件包 --nodeps \n忽略依赖关系卸载\n\n\n数字证书导入\n[root@localhost ~]# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n[root@localhost ~]# rpm -qa | grep gpg-pubkey\ngpg-pubkey-621e9f35-58adea78\ngpg-pubkey-f4a80eb5-53a7ff4b\n[root@localhost ~]# rpm -e gpg-pubkey-621e9f35-58adea78\n\n\n\n# yum/dnf\n\n清空yum缓存\n[root@RedHat8 yum.repos.d]# yum clean all\n创建yum缓存\n[root@RedHat8 yum.repos.d]# yum makecache\n查看仓库\n[root@RedHat8 yum.repos.d]# yum repolist\n仓库标识 仓库名称 状态\nAppStream \t\tAppStream \t\t\t4,672\nBaseOS\t\t\t BaseOS \t\t\t1,658\n\n\n查看仓库软件\n# yum list | grep samba\n\n\n查看已安装的软件\n# yum list installed | samba\n# rpm -q vsftpd\n# dnf list installed| grep vsftpd\n\nsearch查找\n# yum search httpd\n\n查询指定软件包的信息。\n# yum info samba\n\n\n# yum -y install 软件包1 软件包2\n# yum -y groupinstall \"包组名\"\n注意：\n1.其中，-y选项表示取消交互\n2.包组里面包含很多的软件包。\n\n\n# yum update 软件包名\n# yum update \n\n# yum -y remove 软件包名\n# yum -y groupremove \"包组名\"\n\n\n\n# 源码包安装\n\n./configure\t\t编译前准备\n\t./configure --prefix=安装路径\nmake \nmake install\nmake clean\n\n\n\n# 打包压缩\n\ntar 选项 打包后的文件 需要打包的文件\n-z\n-c\t创建tar包（打包）\n-x\n-v\n-f\n\n\ntar -zxvf xxx\ntar -zcvf xxx.tar.gz xxx\n\n\n\n# 时间日期\n\n# 查看当前系统时间\ndate\n\n# 查看当前硬件时间\nhwclock或clock\nhwclock -l\n\n#查看当前系统时区\ndate -R\ntimedatectl list-timezones\n\n# 设置时区\ntzselect\necho “export TZ='Asia/Shanghai'”  >>/etc/profile\ntimedatectl set-timezone Asia/Shanghai\n\n\n# 设置系统日期或时间\n选项：-s 设置当前系统时间，只有root权限才能设置，其他只能查看。\ndate -s 20200523 设置成20100523，这样会把具体时间设置成空00:00:00\n# 设置系统时间：从硬件时间同步到系统时间\nhwclock -s\n# 设置硬件时间：从系统时间同步到硬件时间\nhwclock -w\n\n\n\n# date 常用格式：\n    获取系统当前时间\n    yyyy-mm-dd\n\t    date +%F\n    \tdate +%Y-%m-%d\n\n    yyyy-mm-dd HH:mm:ss\n\t    date +'%F %T'\n    \tdate +'%Y-%m-%d %H:%M:%S'\n\n\t获取非当前时间 days,months,years\n\tyyyy-mm-dd\n\t\tdate -d '+3days' +'%F %T'\n\t\tdate --date='3days' +'%F %T'\n\t\t\n\t\tdate -d '-3days' +'%F %T'\n\t\tdate -d '3days ago' +'%F %T'\n\t\tdate --date='-3days' +'%F %T'\n\t\t\n# 时间同步\nntpdate IP\n\n\n\n# 痕迹\n\n\n# w\n\n> 显示登录用户，和他正在做什么。\n\n[root@xiaoshaozi ~]# w\n 10:46:00 up 37 days,  1:24,  2 users,  load average: 0.00, 0.01, 0.05\n#系统时间  持续开机时间\t\t\t登陆用户\t系统在1分钟，5分钟，15分钟前的平均负载\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    220.180.63.118   10:45    0.00s  0.00s  0.00s w\nroot     pts/1    220.180.63.118   10:45    0.00s  0.00s  0.00s top\n\n\n\n# who\n\n> 用于查看正在登陆的用户\n\n[root@xiaoshaozi ~]# who\nroot     pts/0        2023-12-20 10:45 (220.180.63.118)\nroot     pts/1        2023-12-20 10:45 (220.180.63.118)\n#用户名\t登陆终端\t\t登陆时间（来源IP）\n\n\n\n# last\n\n> 系统重启信息记录\n\n[root@xiaoshaozi ~]# last\nroot     pts/1        220.180.63.118   Wed Dec 20 10:45   still logged in   \nroot     pts/0        220.180.63.118   Wed Dec 20 10:45   still logged in   \nroot     pts/1        220.180.63.118   Tue Dec 19 17:39 - 19:40  (02:01)    \nroot     pts/0        220.180.63.118   Tue Dec 19 17:39 - 19:40  (02:01)    \nroot     pts/1        220.180.63.118   Tue Dec 19 17:38 - 17:39  (00:01)    \nroot     pts/0        220.180.63.118   Tue Dec 19 17:38 - 17:39  (00:01)    \nroot     pts/1        220.180.63.118   Tue Dec 19 17:18 - 17:38  (00:19)    \nroot     pts/0        220.180.63.118   Tue Dec 19 17:18 - 17:38  (00:19) \n#用户名   终端号\t\t  来源IP地址\t\t登陆时间\t-\t退出时间\nreboot   system boot  3.10.0-957.21.3. Wed Oct 21 21:19 - 09:19 (1117+12:00)\n#系统重启信息记录\n\n\n\n# lastlog\n\n> 查看系统中所有用户最后一次的登陆时间的命令\n\n[root@xiaoshaozi ~]# lastlog\n用户名           端口     来自             最后登陆时间\nroot             pts/1    220.180.63.118   三 12月 20 10:45:58 +0800 2023\nbin                                        **从未登录过**\ndaemon                                     **从未登录过**\nadm                                        **从未登录过**\nlp                                         **从未登录过**\nsync                                       **从未登录过**\nshutdown                                   **从未登录过**\nzs             pts/3    36.5.59.80       日 12月 17 22:19:52 +0800 2023\nmysql                                      **从未登录过**\nnginx                                      **从未登录过**\nrabbitmq                                   **从未登录过**\nredis                                      **从未登录过**\ninfluxdb                                   **从未登录过**\ntss                                        **从未登录过**\napache                                     **从未登录过**\nxiaoshaozi           pts/0               四 11月 30 08:51:50 +0800 2023\nrpc                                        **从未登录过**\nrpcuser                                    **从未登录过**\nnfsnobody                                  **从未登录过**\n\n\n\n# lastb\n\n> 查看错误登陆的信息\n\n[root@xiaoshaozi ~]# lastb\nroot     ssh:notty    192.168.1.102    Wed Dec 20 11:17 - 11:17  (00:00)    \nroot     ssh:notty    192.168.1.102    Wed Dec 20 11:17 - 11:17  (00:00)    \nroot     pts/0                         Wed Dec 20 11:13 - 11:13  (00:00)  \n\nbtmp begins Mon Dec  4 19:27:12 2023\n#错误登陆用户\t\t终端\t登录ip\t\t\t尝试登陆的时间\n\n\n\n# echo\n\n[root@localhost ~]# echo [选项] [输出内容]\n\n常见选项：\n    -n ：不输出最后的换行符“\\n”（就是内容输出后不换行）\n    -e：解释转义字符（字符串中出现\\n、\\t等特殊字符，则特别加以处理，而不会将它当成一般文字输出）\n\n\n[root@jysp ~]# echo -e \"\\e[33m你好世界\\e[0m\"\n[root@jysp ~]# echo -e \"\\e[1;31m你好世界\\e[0m\"\n这条命令会把abcd按照红色输出。\n解释下这个命令\n\\e[1 \t是标准格式，代表颜色输出开始，\n\\e[0m\t代表颜色输出结束，\n31m\t\t定义字体颜色是红色\n\n\n\n\n\n# 配置文件\n\n# locat命令配置文件\n/etc/updatedb.conf\t# 配置搜索范围等\n\n# 用户密码文件\n/etc/passwd\n\n# 用户密码信息保存文件，账号过期时间等信息\n/etc/shadow\n\n# 组信息\n/etc/group\n\n# sellinux\n/etc/selinux/config\n\n# 用户进程数配置\n/etc/security/limits.conf\n/etc/security/limits.d/20-nproc.conf\n\n# ssh配置文件\n/etc/ssh/sshd_config\n\n# 主机名配置\n/etc/hostname \n\n# hosts配置文件\n/etc/hosts \n\n# rpm证书\n/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n# yum源配置地址\n/etc/yum.repos.d/\n\n# 全局配置文件（针对所有用户所有进程）\n# 系统和用户的环境变量信息，当用户第一次登录时,该文件被读取\n/etc/profile\n# 每个运行的bash信息（系统别名、函数及默认权限的定义），当bash被打开时,该文件被读取\n/etc/bashrc\n\n# 局部配置文件（针对某个特定用户以及用户的所有进程）\n# 当前用户的bash信息，当用户登录和每次打开新的shell时该文件被读取\n~/.bashrc\n# 当前用户的环境变量，当用户登录时，该文件被读取\n~/.bash_profile\n# 保存当前用户历史命令的文件\n~/.bash_history\n# 当用户退出bash或者终端时，会首先执行该文件里的代码，然后再退出\n~/.bash_logout\n\n# 自动挂载文件\n/etc/fstab\n\n# 邮件存放位置\n/var/spool/mail/\n",normalizedContent:"# 命令--0.简易版\n\n\n# 开关机\n\n关机\n\nsync\t#同步内存数据到硬盘\n\nshutdown -r now \t# 立刻马上重启\n\n\n重启\n\nreboot\n\n\n\n# 帮助\n\nman\n\nman 命令\nman 5 配置文件名\n\n\n\n# 文件操作\n\nls\n\nls -al\n\n\nmkdir\n\nmkdir -p 文件夹\n\n\ntouch\n\ntouch 文件\ntouch 文件{1..n}\n\n其他功能，修改文件时间\n\n\ncat\n\ncat [xx] 文件名\n-n 显示行号\n-a 显示控制符\n\n\nless/more\n\nless 文件\n\n\ntail\n\ntail -20f xxx.log\n\n\nmv\n\n重命名\nmv name1 name2\n\n移动\nmv 路径1 路径2\n\n\nrm\n\nrm -rf xxx\n\n\n\n# 查找\n\nwhich、whereis\n\nlocat\n\nupdatedb\t# 更新索引\n\nlocat 文件名 # 查找文件\n\n配置文件：/etc/updatedb.conf\n\n\nfind\n\n# 文件名搜\nfind /tmp -name \"*.conf\"\n\n# 文件大小 b|c|w|k|m|g\nfind /tmp -size +1m\nfind /tmp -size -m\t# 没有小于1m的文件时，会变成查找 -1k\n\n# 按照修改时间搜索\nfind /tmp mtime -5 # 5天内的时间搜索\n\n\n\n# 用户|组\n\n\n# 用户\n\n创建\n\n# 创建用户，指定用户组，指定家目录，不允许登录\nuseradd -g test -d /home/xxx -s /sbin/nologin test\n\n\n设置密码\n\n# 交互式\npasswd user01\n\n# 非交互\necho 我是密码 | passwd --stdin user01\n\n\n更改用户的账号信息\n\nchage [选项]\n    -l 列出账户的信息\n    -e 修改账户过期时间\n    -d 修改用户最后一次更改密码的时间\n\n# 修改用户登录后需要修改密码\nchage -d 0 用户名\n\n# 修改用户账号的过期时间为10天以后：\nchage -e $(date +%f -d '+10days') 用户名\n\n# 修改用户账号的过期时间：2019-03-10过期\nchage -e '2019-03-10' stu1\n\n\n修改用户信息\n\nusermod [选项] 用户名\n\t-s 指定用户默认shell\n\t-d 指定用户家目录(每个用户都有一个自己的家，并且默认在/home/xxx)\n    -m 移动用户家目录，和-d一起使用\n    -g 指定用户的默认组(主组)\n    -g 指定用户附加组(一个用户可以加入多个组，但是默认组只有一个)\n\n    \n# 修改stu4用户的默认shell为可登录系统 \nusermod -s /bin/sh stu4\n# 修改stu5用户的家目录\nuseradd -d /rhome/stu5 stu5\nusermod -md /home/stu5 stu5\n\n\n删除用户\n\nuserdel [选项] 用户名\n    -r 删除用户并且移除其家目录和邮箱\n    -f 强制删除正在登录的用户\n\n# 只删除用户user02，不删除其家目录\nuserdel stu1\n\n# 删除stu4用户以及家目录\nuserdel -r stu4\n\n# 强制删除一个正在登录的用户\nuserdel -r stu5\nuserdel -rf stu5\n\n\n用户信息文件\n\n# 密码文件\n/etc/passwd\n# 用户密码信息保存文件\n/etc/shadow\n\n\n\n# 组\n\n创建组\n\ngroupadd [选项] 组名\n\t-g 指定组的gid(编号)，默认唯一\n\t\n# 创建一个组admin\ngroupadd admin\n\n# 查看组信息\ntail -1 /etc/group\n\n\n删除组\n\ngroupdel 组名\n\n\n组成员管理\n\ngpasswd [选项] 组名\n    -a 添加用户到组\n    -d 从组中删除成员\n    -a 指定管理员\n    -m 指定组成员（会覆盖），可以批量添加用户到组中\n    -r 删除密码\n    \n# 指定user01用户的附加组为sysadmin（站在用户角度）\nusermod -g sysadmin user01\n\n# 使用gpasswd命令添加用户到组里\ngpasswd -a user01 sysadmin\n\n# -m选项：表示覆盖设置组成员（会覆盖原来的成员列表）\ngpasswd -m user02,user03 sysadmin\n\n# 指定admin\ngpasswd -a stu2 admin\n\n# 将user03用户从组sysadmin里移除\ngpasswd -d user03 sysadmin\n\n\n\n# 文件权限\n\n\n# 普通\n\n修改文件权限\n\nchmod [选项] 模式 文件名\n\t-r 递归更改目录和目录里文件的权限\n\n    u:表示文件拥有者\n    g:表示文件属组里的用户\n    o:表示其他人，即不是文件的创建者，也不在文件属组里\n    a:表示所有人\n    \n    字母和数字对应关系：\n    r——4\n    w——2\n    x——1\n    -——0\n\n# 使用字母形式修改文件权限\nchmod u+x test1\nchmod g+w test1\nchmod o-r test1\nchmod a+x test2\nchmod u+x,g+w,o-r test3\nchmod u=rw,g=rx,o+r test3\n\n# 修改目录的权限：\n# 只修改目录本身的权限\nchmod g+w dir1/\n# 修改目录以及目录里所有文件的权限（递归修改），使用-r参数\nchmod -r o+w dir1/\n\n# 通过数字形式更改文件权限\nchmod 644 file1 \t# rw-r--r--\nchmod 700 file2\t\t# rwx------\nchmod -r 755 dir1\t# rwxr-xr-x\n\n\n文件属主、组\n\n# 只修改文件的属主\nchown 用户名 文件名\n\n# 修改文件的属主和属组\nchown 用户名.组名 文件名\nchown 用户名:组名 文件名\nchown 用户名. 文件名  \t# 没有指定组名，默认是用户的主组\n\n# 只修改文件的属组\nchown .组名 文件名\nchown :组名 文件名\n\n# 可以加-r选项，表示递归修改\n\n\n# chgrp只能修改文件的属组。\nchgrp 组名 文件名\n\n\n\n# 高级\n\n#=====冒险位=====\n# 给一个vim命令设置冒险位，目的是任何人拿vim去修改文件可以临时获得文件拥有者的权限\nchmod u+s /usr/bin/vim\nchmod 4755 /usr/bin/vim\n# 恢复\nchmod u-s /usr/bin/vim\nchmod 0755 /usr/bin/vim\n\n#=====强制位=====\n# 给目录dir2设置一个强制位，测试是否任何人在该目录里创建的文件属组都是该目录的属组\nchmod g+s dir2\nchmod 2xxx dir2\n# 恢复\nchmod g-s dir2\nchmod 0xxx dir2\n\n\n#=====粘滞位=====\n# 在创建一个公共目录/tmp/dir3,要求所有人都可以在该公共目录里创建、删除文件；\n# 但是只能自己管理自己，不能删除别人的文件\nchmod 777 /tmp/dir3\nchmod o+t /tmp/dir3\n或\nchmod 1777 /tmp/dir3\n# 恢复\nchmod o-t /tmp/dir3\nchmod 0777 /tmp/dir3\n\n\n\n# 默认权限\n\n====》权限计算规则《====\n目录：\n目录的默认权限=0777-umask=0777-0007=0770 rwxrwx---\n普通文件：\n文件的默认权限=0666-umask=0666-0007=0660 rw-rw----\n\n====》默认umask《====\n普通用户默认：umask 0002\nroot用户默认：umask 0022\n\n普通用户：  目录（775）,文件（664）\n管理员：    目录（755）,文件（644）\n\n# 全局配置\n/etc/profile\n/etc/bashrc\n\n\n\n# acl\n\nsetfacl\n    -m 修改或者设置acl策略\n    -r 递归授权，对目录下已存在的目录或文件有acl策略，但新建的文件没有\n    -x 去掉某个用户或者某个组的acl策略\n    -b 删除所有的acl策略\n\nsetfacl -m u:用户:rwx /home/redhat/file1 给单个用户单独加权限\nsetfacl -m g:组名:rwx /home/redhat/file1 给单个组单独加权限\nsetfacl -x u:用户 /home/redhat/file1 去掉某个用户的权限\nsetfacl -x g:组名 /home/redhat/file1 去掉某个组的acl策略\nsetfacl -b /home/redhat/file1 删除文件上所有的acl策略\n\n\n\n# chattr\n\n[root@localhost ~]# lsattr 选项 文件名\n选项：\n\t-a\t显示所有文件和目录\n\t-d\t若目标是目录，仅列出目录本身的属性，而不是子文件的\n\n\n\n# 网络配置\n\n\n# 主机名\n\nhostnamectl set-hostname redhat8.itcast.cn\n\n/etc/hostname 文件\n\n\n\n# 静态ip配置\n\n[root@heima ~]# cd /etc/sysconfig/network-scripts/\n[root@heima network-scripts]# ls\nifcfg-ens160\n[root@heima network-scripts]# cat ifcfg-ens160\ntype=ethernet \t\t\t以太网\nbootproto=none \t\t\tip获取方式，none和static表示静态，dhcp动态\nname=ens160 \t\t\t网卡名称\nuuid=63b0b6ee-fbee-4b17-80be-e3b36ff27493 网卡uuid，唯一标识\ndevice=ens160 \t\t\t网卡设备名\nonboot=yes \t\t\t\t激活网卡\nipaddr=192.168.159.100 \tip地址\nprefix=24 \t\t\t\t子网掩码 或者 netmask=255.255.255.0\ngateway=192.168.159.2 \t网关\ndns1=8.8.8.8 \t\t\tdns服务器\n\n# 重启网卡\nsystemctl restart network.service\n\n\n\n# ifconfig\n\n[jysp@jysp ~]$ ifconfig\n...省略...\nenp125s0f5: flags=4163<up,broadcast,running,multicast>  mtu 1500\n        inet 192.168.1.101  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 fe80::77b1:8f7c:2a45:346  prefixlen 64  scopeid 0x20<link>\n        ether cc:20:8c:73:9d:d8  txqueuelen 1000  (ethernet)\n        rx packets 5764048  bytes 710412064 (677.5 mib)\n        rx errors 0  dropped 0  overruns 0  frame 0\n        tx packets 10539417  bytes 4741264284 (4.4 gib)\n        tx errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n...省略...\n\n\n\n# ping\n\nping [选项] ip\n选项：\n\t-b:\t\t\t后面加入广播地址，用于对整个网段进行探测\t\n\t-c 次数:\t   用于指定ping的次数\n\t-s 字节:\t   指定探测包的大小\n\n\n\n# netstat\n\n[root@localhost ~]# netstat [选项]\n选项：\n\t-a：\t\t列出所有网络状态，包括socket程序\n\t-c 秒数： 指定每隔几秒刷新一次网络状态\n    -n：\t\t使用ip地址和端口号显示，不使用域名与服务名\n    -p：\t\t显示pid和程序名\n    -t：\t\t显示使用tcp协议端口的连接状况\n    -u：\t\t显示使用udp协议端口的连接状况\n    -l：\t\t仅显示监听状态的连接\n    -r：\t\t显示路由表\n\n\n[root@jysp ~]# netstat -tuln\n[root@jysp ~]# netstat -tulnp\n[root@jysp ~]# netstat -an\n[root@jysp ~]# netstat -anp\n[root@jysp ~]# netstat -rn\n\nnetstat -tulnp | grep [端口号|程序]\nnetstat -anp | grep [端口号|程序]\n\n\n\n# lsof\n\nlsof -i <条件>:[端口号]\n\n# 列出系统上被进程打开的文件的相关信息\nlsof -i -p | grep [程序]\n\n\n\n# 文件系统\n\n\n# 挂载\n\n\n# mount\n\nmount -o  loop /home/centos-7-x86_64-dvd-1708.iso   /media/centos7_iso\n\nmount -t iso9660 /dev/cdrom /mnt/cdrom\n\nmount -t vfat /dev/sdb4 /mnt/usb/\n# 挂载u盘。因为是windows分区，所以是vfat文件系统格式\n\n\n\n# umount\n\n# umount /dev/hda5\n# umount /mnt/hda5\n# umount /dev/hda5 /mnt/hda5\n\n# umount -l /mnt/hda5\n\n\n\n# /etc/fstab文件\n\n[root@localhost ~]# cat /etc/fstab\n\n#\n# /etc/fstab\n# created by anaconda on wed dec 13 22:10:25 2023\n#\n# accessible filesystems, by reference, are maintained under '/dev/disk'\n# see man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\n/dev/mapper/centos-root /                       xfs     defaults        0 0\nuuid=1b7d1f9f-b2af-4efb-af81-7d7bc7ef1864 /boot                   xfs     defaults        0 0\n/dev/mapper/centos-swap swap                    swap    defaults        0 0\n\n\n/home/jysp/centos-7-x86_64-everything-2009.iso /media/centos7_iso/ iso9660 defaults,ro,loop 0 0 \n\n\n\n# 包管理工具\n\n\n# rpm\n\n# 查看已经安装的所有rpm包\nrpm -qa 软件包名\nrpm -aq|grep 软件包名字\n# 查看已经安装软件的配置文件\nrpm -qc 软件包名\n# 查看已经安装的软件的文件列表\nrpm -ql 软件包名\n# 查看指定文件来自哪个rpm包\nrpm -qf 文件名\n选项：\n\t-q\t查询（query）\n\t-a\t所有（all）\n\t-i\t查询软件信息(information)\n\t-p\t查询没有安装的软件包（package）\n\t-l\t列出软件包中所有文件列表，以及安装目录\n\t-d\t查看文档\n\t-c\t查看配置文件目录\n\t-f\t系统文件属于哪个软件包（file）\n\t-r\t查询软件包的依赖性（requires）\n\n\n# rpm -ivh 包全名\n选项：\n\t-i\tinstall安装（install）\n\t-v\t显示更详细的信息（verbose）\n\t-h\t打印#显示安装进度（hash）\n\t\n# rpm -e 包名\n选项：\n\t--nodeps\t不检查依赖性\n\t-e\t\t\t卸载\n\t\n# rpm -uvh 包全名\n或者\n# rpm -fvh 包全名\n选项：\n\t-v:输出详细信息\n\t-h:打印散列标记，一般和-v一起使用\n\t-u:升级软件包，如果该软件包没安装，会自动帮你安装\n\t-f:升级软件包，如果该软件包没安装，不会自动帮你安装\n\t\n\n\n--force\n表示强制\nrpm -ivh 软件包 --force \n强制安装软件包\nrpm -e 软件包名 --force \n强制卸载软件包\n\n\n--nodeps \n忽略依赖关系\nrpm -ivh 软件包 --nodeps\n忽略依赖关系安装\nrpm -e 软件包 --nodeps \n忽略依赖关系卸载\n\n\n数字证书导入\n[root@localhost ~]# rpm --import /etc/pki/rpm-gpg/rpm-gpg-key-centos-7\n[root@localhost ~]# rpm -qa | grep gpg-pubkey\ngpg-pubkey-621e9f35-58adea78\ngpg-pubkey-f4a80eb5-53a7ff4b\n[root@localhost ~]# rpm -e gpg-pubkey-621e9f35-58adea78\n\n\n\n# yum/dnf\n\n清空yum缓存\n[root@redhat8 yum.repos.d]# yum clean all\n创建yum缓存\n[root@redhat8 yum.repos.d]# yum makecache\n查看仓库\n[root@redhat8 yum.repos.d]# yum repolist\n仓库标识 仓库名称 状态\nappstream \t\tappstream \t\t\t4,672\nbaseos\t\t\t baseos \t\t\t1,658\n\n\n查看仓库软件\n# yum list | grep samba\n\n\n查看已安装的软件\n# yum list installed | samba\n# rpm -q vsftpd\n# dnf list installed| grep vsftpd\n\nsearch查找\n# yum search httpd\n\n查询指定软件包的信息。\n# yum info samba\n\n\n# yum -y install 软件包1 软件包2\n# yum -y groupinstall \"包组名\"\n注意：\n1.其中，-y选项表示取消交互\n2.包组里面包含很多的软件包。\n\n\n# yum update 软件包名\n# yum update \n\n# yum -y remove 软件包名\n# yum -y groupremove \"包组名\"\n\n\n\n# 源码包安装\n\n./configure\t\t编译前准备\n\t./configure --prefix=安装路径\nmake \nmake install\nmake clean\n\n\n\n# 打包压缩\n\ntar 选项 打包后的文件 需要打包的文件\n-z\n-c\t创建tar包（打包）\n-x\n-v\n-f\n\n\ntar -zxvf xxx\ntar -zcvf xxx.tar.gz xxx\n\n\n\n# 时间日期\n\n# 查看当前系统时间\ndate\n\n# 查看当前硬件时间\nhwclock或clock\nhwclock -l\n\n#查看当前系统时区\ndate -r\ntimedatectl list-timezones\n\n# 设置时区\ntzselect\necho “export tz='asia/shanghai'”  >>/etc/profile\ntimedatectl set-timezone asia/shanghai\n\n\n# 设置系统日期或时间\n选项：-s 设置当前系统时间，只有root权限才能设置，其他只能查看。\ndate -s 20200523 设置成20100523，这样会把具体时间设置成空00:00:00\n# 设置系统时间：从硬件时间同步到系统时间\nhwclock -s\n# 设置硬件时间：从系统时间同步到硬件时间\nhwclock -w\n\n\n\n# date 常用格式：\n    获取系统当前时间\n    yyyy-mm-dd\n\t    date +%f\n    \tdate +%y-%m-%d\n\n    yyyy-mm-dd hh:mm:ss\n\t    date +'%f %t'\n    \tdate +'%y-%m-%d %h:%m:%s'\n\n\t获取非当前时间 days,months,years\n\tyyyy-mm-dd\n\t\tdate -d '+3days' +'%f %t'\n\t\tdate --date='3days' +'%f %t'\n\t\t\n\t\tdate -d '-3days' +'%f %t'\n\t\tdate -d '3days ago' +'%f %t'\n\t\tdate --date='-3days' +'%f %t'\n\t\t\n# 时间同步\nntpdate ip\n\n\n\n# 痕迹\n\n\n# w\n\n> 显示登录用户，和他正在做什么。\n\n[root@xiaoshaozi ~]# w\n 10:46:00 up 37 days,  1:24,  2 users,  load average: 0.00, 0.01, 0.05\n#系统时间  持续开机时间\t\t\t登陆用户\t系统在1分钟，5分钟，15分钟前的平均负载\nuser     tty      from             login@   idle   jcpu   pcpu what\nroot     pts/0    220.180.63.118   10:45    0.00s  0.00s  0.00s w\nroot     pts/1    220.180.63.118   10:45    0.00s  0.00s  0.00s top\n\n\n\n# who\n\n> 用于查看正在登陆的用户\n\n[root@xiaoshaozi ~]# who\nroot     pts/0        2023-12-20 10:45 (220.180.63.118)\nroot     pts/1        2023-12-20 10:45 (220.180.63.118)\n#用户名\t登陆终端\t\t登陆时间（来源ip）\n\n\n\n# last\n\n> 系统重启信息记录\n\n[root@xiaoshaozi ~]# last\nroot     pts/1        220.180.63.118   wed dec 20 10:45   still logged in   \nroot     pts/0        220.180.63.118   wed dec 20 10:45   still logged in   \nroot     pts/1        220.180.63.118   tue dec 19 17:39 - 19:40  (02:01)    \nroot     pts/0        220.180.63.118   tue dec 19 17:39 - 19:40  (02:01)    \nroot     pts/1        220.180.63.118   tue dec 19 17:38 - 17:39  (00:01)    \nroot     pts/0        220.180.63.118   tue dec 19 17:38 - 17:39  (00:01)    \nroot     pts/1        220.180.63.118   tue dec 19 17:18 - 17:38  (00:19)    \nroot     pts/0        220.180.63.118   tue dec 19 17:18 - 17:38  (00:19) \n#用户名   终端号\t\t  来源ip地址\t\t登陆时间\t-\t退出时间\nreboot   system boot  3.10.0-957.21.3. wed oct 21 21:19 - 09:19 (1117+12:00)\n#系统重启信息记录\n\n\n\n# lastlog\n\n> 查看系统中所有用户最后一次的登陆时间的命令\n\n[root@xiaoshaozi ~]# lastlog\n用户名           端口     来自             最后登陆时间\nroot             pts/1    220.180.63.118   三 12月 20 10:45:58 +0800 2023\nbin                                        **从未登录过**\ndaemon                                     **从未登录过**\nadm                                        **从未登录过**\nlp                                         **从未登录过**\nsync                                       **从未登录过**\nshutdown                                   **从未登录过**\nzs             pts/3    36.5.59.80       日 12月 17 22:19:52 +0800 2023\nmysql                                      **从未登录过**\nnginx                                      **从未登录过**\nrabbitmq                                   **从未登录过**\nredis                                      **从未登录过**\ninfluxdb                                   **从未登录过**\ntss                                        **从未登录过**\napache                                     **从未登录过**\nxiaoshaozi           pts/0               四 11月 30 08:51:50 +0800 2023\nrpc                                        **从未登录过**\nrpcuser                                    **从未登录过**\nnfsnobody                                  **从未登录过**\n\n\n\n# lastb\n\n> 查看错误登陆的信息\n\n[root@xiaoshaozi ~]# lastb\nroot     ssh:notty    192.168.1.102    wed dec 20 11:17 - 11:17  (00:00)    \nroot     ssh:notty    192.168.1.102    wed dec 20 11:17 - 11:17  (00:00)    \nroot     pts/0                         wed dec 20 11:13 - 11:13  (00:00)  \n\nbtmp begins mon dec  4 19:27:12 2023\n#错误登陆用户\t\t终端\t登录ip\t\t\t尝试登陆的时间\n\n\n\n# echo\n\n[root@localhost ~]# echo [选项] [输出内容]\n\n常见选项：\n    -n ：不输出最后的换行符“\\n”（就是内容输出后不换行）\n    -e：解释转义字符（字符串中出现\\n、\\t等特殊字符，则特别加以处理，而不会将它当成一般文字输出）\n\n\n[root@jysp ~]# echo -e \"\\e[33m你好世界\\e[0m\"\n[root@jysp ~]# echo -e \"\\e[1;31m你好世界\\e[0m\"\n这条命令会把abcd按照红色输出。\n解释下这个命令\n\\e[1 \t是标准格式，代表颜色输出开始，\n\\e[0m\t代表颜色输出结束，\n31m\t\t定义字体颜色是红色\n\n\n\n\n\n# 配置文件\n\n# locat命令配置文件\n/etc/updatedb.conf\t# 配置搜索范围等\n\n# 用户密码文件\n/etc/passwd\n\n# 用户密码信息保存文件，账号过期时间等信息\n/etc/shadow\n\n# 组信息\n/etc/group\n\n# sellinux\n/etc/selinux/config\n\n# 用户进程数配置\n/etc/security/limits.conf\n/etc/security/limits.d/20-nproc.conf\n\n# ssh配置文件\n/etc/ssh/sshd_config\n\n# 主机名配置\n/etc/hostname \n\n# hosts配置文件\n/etc/hosts \n\n# rpm证书\n/etc/pki/rpm-gpg/rpm-gpg-key-centos-7\n\n# yum源配置地址\n/etc/yum.repos.d/\n\n# 全局配置文件（针对所有用户所有进程）\n# 系统和用户的环境变量信息，当用户第一次登录时,该文件被读取\n/etc/profile\n# 每个运行的bash信息（系统别名、函数及默认权限的定义），当bash被打开时,该文件被读取\n/etc/bashrc\n\n# 局部配置文件（针对某个特定用户以及用户的所有进程）\n# 当前用户的bash信息，当用户登录和每次打开新的shell时该文件被读取\n~/.bashrc\n# 当前用户的环境变量，当用户登录时，该文件被读取\n~/.bash_profile\n# 保存当前用户历史命令的文件\n~/.bash_history\n# 当用户退出bash或者终端时，会首先执行该文件里的代码，然后再退出\n~/.bash_logout\n\n# 自动挂载文件\n/etc/fstab\n\n# 邮件存放位置\n/var/spool/mail/\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704696387e3},{title:"命令--12.打包压缩",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--12.%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9.html",relativePath:"zs-use/linux/基本使用/命令--12.打包压缩.md",key:"v-6b6c3293",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--12.%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9.html",headers:[{level:2,title:"一、压缩工具",slug:"一、压缩工具",normalizedTitle:"一、压缩工具",charIndex:18},{level:3,title:"1、常见的压缩与解压缩工具",slug:"_1、常见的压缩与解压缩工具",normalizedTitle:"1、常见的压缩与解压缩工具",charIndex:29},{level:3,title:"2、工具的用法",slug:"_2、工具的用法",normalizedTitle:"2、工具的用法",charIndex:339},{level:2,title:"三、打包工具",slug:"三、打包工具",normalizedTitle:"三、打包工具",charIndex:1049}],lastUpdated:"2024年1月5日星期五下午2点08分",lastUpdatedTimestamp:1704434924e3,headersStr:"一、压缩工具 1、常见的压缩与解压缩工具 2、工具的用法 三、打包工具",content:'# 命令--12.打包压缩\n\n\n# 一、压缩工具\n\n\n# 1、常见的压缩与解压缩工具\n\n压缩工具    说明                                 解压缩工具\nzip     兼容类unix与windows，可以压缩多个文件或目录        unzip\ngzip    压缩单个文件，压缩率相对低，cpu开销相对低             gunzip\nbzip2   压缩单个文件，压缩率相对高，cpu开销相对高             bunzip2\nxz      压缩单个文件，压缩率高，压缩时间相对长，解压速度快，cpu开销高   unxz\n                                           \n\n\n# 2、工具的用法\n\n# ① zip工具\n\n压缩：\nzip 压缩后的文件 需要压缩的文件\n\n选项：\n-r 递归压缩,压缩目录\n\n注意：zip压缩默认压缩后的格式就是.zip；当然也可以加后缀.zip,一般都加上\n\n解压缩：\n-d 指定解压缩路径\n\n\n示例：\n# 压缩多个目录下的文件，和文件夹\nzip -r /tmp/test_passwd.zip /test/ /etc/passwd\n# 压缩目录需要 添加递归压缩指令 -r 递归压缩\nzip -r /tmp/test.zip /test/\n\n# 解压到当前目录\nunzip test.zip\n# 解压到指定目录\nunzip -d test_passwd.zip\n\n\n# ② gzip工具\n\n压缩：\ngzip 需要压缩的单个文件\n\n选项：\n-d 解压缩\n-r 递归压缩（目录）\n\n解压缩：\ngunzip 需要解压的文件\n或者\ngzip -d 需要解压的文件\n\ngunzip file* 一次解压多个文件，*代表通配符；file*表示以file开头所有文件\n\n\n示例：\n# 只支持单个文件 默认会添加 .gz后缀\ngzip file1\n# 压缩多个单文件 file1.gz file2.gz file 3.gz \ngzip file1 file2 file3\n# 递归压缩单个文件\ngzip -r test\n\n\n# ③ bzip2工具\n\n压缩：\nbzip2 需要压缩的文件\n\n选项：\n-d 解压缩\n\n\n# ④ xz 工具\n\n选项：\n-z 压缩,默认\n-d 解压缩 或者 unxz\n\n\n压缩： \nxz 文件名\n解压缩：\nunxz 文件名\n或者\nxz -d 文件名\n\n\n\n# 三、打包工具\n\ntar命令：可以将多个文件打包成一个并且压缩，不会改变文件的属性，很常用。\n\n用法：\n\ntar 选项 打包后的文件 需要打包的文件\n\n常用选项   说明\n-c     创建tar包（打包）\n-z     调用gzip工具压缩\n-j     调用bzip2工具压缩\n-J     调用xz工具压缩\n-v     显示详细信息\n-f     指定包名\n-x     解压\n-C     指定解压路径\n-t     列出或查看tar包内容\n-r     往tar包里追加文件\n       \n\n注意说明：\n\n1. 以上选项前面的横杠"-"可以省略\n2. 如果已经将文件压缩打包，那么就不能追加；如果只是打包就可以追加。\n3. 参数顺序需要注意，最好把-f参数放到所有参数后面。\n4. 当出现以下提示时，加一个大P参数解决。\ntar: Removing leading `/\' from member names\n\n\n示例：打包、解压\n# 使用gz工具、打包、显示过程、指定文件名称，压缩当前目录下所有文件\ntar -zcvf /tmp/test.tar.gz *\n\n# 解压时可以省略 打包工具\ntar -xf /tmp/test.tar.gz -C /dir1/\n\ntar -cvJf /tmp/boot_test.tar.xz /test/ /boot/\ntar -PcvJf /tmp/boot_test.tar.xz /test/ /boot/\n\n\n\n\n示例:tar包预览、追加\ntar cvf /tmp/test.tar ./*\n\n# 列表查看tar包中的文件, -t \ntar -tf /tmp/test.tar\n\n# 追加文件, -r\ntar -Pf /tmp/test.tar -r /etc/hosts\ntar -tf /tmp/test.tar\n',normalizedContent:'# 命令--12.打包压缩\n\n\n# 一、压缩工具\n\n\n# 1、常见的压缩与解压缩工具\n\n压缩工具    说明                                 解压缩工具\nzip     兼容类unix与windows，可以压缩多个文件或目录        unzip\ngzip    压缩单个文件，压缩率相对低，cpu开销相对低             gunzip\nbzip2   压缩单个文件，压缩率相对高，cpu开销相对高             bunzip2\nxz      压缩单个文件，压缩率高，压缩时间相对长，解压速度快，cpu开销高   unxz\n                                           \n\n\n# 2、工具的用法\n\n# ① zip工具\n\n压缩：\nzip 压缩后的文件 需要压缩的文件\n\n选项：\n-r 递归压缩,压缩目录\n\n注意：zip压缩默认压缩后的格式就是.zip；当然也可以加后缀.zip,一般都加上\n\n解压缩：\n-d 指定解压缩路径\n\n\n示例：\n# 压缩多个目录下的文件，和文件夹\nzip -r /tmp/test_passwd.zip /test/ /etc/passwd\n# 压缩目录需要 添加递归压缩指令 -r 递归压缩\nzip -r /tmp/test.zip /test/\n\n# 解压到当前目录\nunzip test.zip\n# 解压到指定目录\nunzip -d test_passwd.zip\n\n\n# ② gzip工具\n\n压缩：\ngzip 需要压缩的单个文件\n\n选项：\n-d 解压缩\n-r 递归压缩（目录）\n\n解压缩：\ngunzip 需要解压的文件\n或者\ngzip -d 需要解压的文件\n\ngunzip file* 一次解压多个文件，*代表通配符；file*表示以file开头所有文件\n\n\n示例：\n# 只支持单个文件 默认会添加 .gz后缀\ngzip file1\n# 压缩多个单文件 file1.gz file2.gz file 3.gz \ngzip file1 file2 file3\n# 递归压缩单个文件\ngzip -r test\n\n\n# ③ bzip2工具\n\n压缩：\nbzip2 需要压缩的文件\n\n选项：\n-d 解压缩\n\n\n# ④ xz 工具\n\n选项：\n-z 压缩,默认\n-d 解压缩 或者 unxz\n\n\n压缩： \nxz 文件名\n解压缩：\nunxz 文件名\n或者\nxz -d 文件名\n\n\n\n# 三、打包工具\n\ntar命令：可以将多个文件打包成一个并且压缩，不会改变文件的属性，很常用。\n\n用法：\n\ntar 选项 打包后的文件 需要打包的文件\n\n常用选项   说明\n-c     创建tar包（打包）\n-z     调用gzip工具压缩\n-j     调用bzip2工具压缩\n-j     调用xz工具压缩\n-v     显示详细信息\n-f     指定包名\n-x     解压\n-c     指定解压路径\n-t     列出或查看tar包内容\n-r     往tar包里追加文件\n       \n\n注意说明：\n\n1. 以上选项前面的横杠"-"可以省略\n2. 如果已经将文件压缩打包，那么就不能追加；如果只是打包就可以追加。\n3. 参数顺序需要注意，最好把-f参数放到所有参数后面。\n4. 当出现以下提示时，加一个大p参数解决。\ntar: removing leading `/\' from member names\n\n\n示例：打包、解压\n# 使用gz工具、打包、显示过程、指定文件名称，压缩当前目录下所有文件\ntar -zcvf /tmp/test.tar.gz *\n\n# 解压时可以省略 打包工具\ntar -xf /tmp/test.tar.gz -c /dir1/\n\ntar -cvjf /tmp/boot_test.tar.xz /test/ /boot/\ntar -pcvjf /tmp/boot_test.tar.xz /test/ /boot/\n\n\n\n\n示例:tar包预览、追加\ntar cvf /tmp/test.tar ./*\n\n# 列表查看tar包中的文件, -t \ntar -tf /tmp/test.tar\n\n# 追加文件, -r\ntar -pf /tmp/test.tar -r /etc/hosts\ntar -tf /tmp/test.tar\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704434924e3},{title:"命令--14.痕迹",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--14.%E7%97%95%E8%BF%B9.html",relativePath:"zs-use/linux/基本使用/命令--14.痕迹.md",key:"v-b900f076",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--14.%E7%97%95%E8%BF%B9.html",headers:[{level:2,title:"1．w命令",slug:"_1-w命令",normalizedTitle:"1．w命令",charIndex:245},{level:2,title:"who命令",slug:"who命令",normalizedTitle:"who命令",charIndex:1491},{level:2,title:"last命令",slug:"last命令",normalizedTitle:"last命令",charIndex:1720},{level:2,title:"lastlog命令",slug:"lastlog命令",normalizedTitle:"lastlog命令",charIndex:2564},{level:2,title:"lastb命令",slug:"lastb命令",normalizedTitle:"lastb命令",charIndex:3772}],lastUpdated:"2024年1月5日星期五下午2点08分",lastUpdatedTimestamp:1704434924e3,headersStr:"1．w命令 who命令 last命令 lastlog命令 lastb命令",content:"# 命令--14.痕迹\n\n系统中有一些重要的痕迹日志文件，如/var/log/wtmp、/var/run/utmp、/var/log/btmp、/var/log/lastlog等日志文件，如果你用vim打开这些文件，你会发现这些文件是二进制乱码。这是由于这些日志中保存的是系统的重要登录痕迹，包括某个用户何时登录了系统，何时退出了系统，错误登录等重要的系统信息。这些信息要是可以通过vim打开，就能编辑，这样痕迹信息就不准确，所以这些重要的痕迹日志，只能通过对应的命令来进行查看。\n\n\n# 1．w命令\n\nw命令是显示系统中正在登陆的用户信息的命令，这个命令查看的痕迹日志是/var/run/utmp。\n\n这个命令的基本信息如下：\n\n * 命令名称：w\n * 英文原意：Show who is logged on and what they are doing.\n * 所在路径：/usr/bin/w\n * 执行权限：所有用户。\n * 功能描述：显示登录用户，和他正在做什么。\n\n[root@xiaoshaozi ~]# w\n 10:46:00 up 37 days,  1:24,  2 users,  load average: 0.00, 0.01, 0.05\n#系统时间  持续开机时间\t\t\t登陆用户\t系统在1分钟，5分钟，15分钟前的平均负载\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    220.180.63.118   10:45    0.00s  0.00s  0.00s w\nroot     pts/1    220.180.63.118   10:45    0.00s  0.00s  0.00s top\n\n\n\n第一行信息，内容如下：\n\n内容                               说明\n10:46:00                         系统时间\nup 37 days, 1:24                 持续开机时间\n2 users                          当前登录了两个用户\nload average: 0.00, 0.01, 0.05   系统在之前1分钟、5分钟、15分钟的平均负载。\n                                 如果CPU是单核的，则这个数值超过1就是高负载；\n                                 如果CPU是四核的，则这个数值超过4就是高负载\n                                 （这个平均负载完全是依据个人经验来进行判断的，一般认为不应该超过服务器CPU的核数）\n\n第二行信息，内容如下：\n\n内容       说明\nUSER     当前登陆的用户\nTTY      登陆的终端：\n         tty1-6：本地字符终端（alt+F1-6切换）\n         tty7：本地图形终端（ctrl+alt+F7切换，必须安装启动图形界面）\n         pts/0-255:远程终端\nFROM     登陆的IP地址，如果是本地终端，则是空\nLOGIN@   登陆时间\nIDLE     用户闲置时间\nJCPU     所有的进程占用的CPU时间\nPCPU     当前进程占用的CPU时间\nWHAT     用户正在进行的操作\n\n\n# who命令\n\nwho命令和w命令类似，用于查看正在登陆的用户，但是显示的内容更加简单，也是查看/var/run/utmp日志。\n\n[root@xiaoshaozi ~]# who\nroot     pts/0        2023-12-20 10:45 (220.180.63.118)\nroot     pts/1        2023-12-20 10:45 (220.180.63.118)\n#用户名\t登陆终端\t\t登陆时间（来源IP）\n\n\n\n# last命令\n\nlast命令是查看系统所有登陆过的用户信息的，包括正在登陆的用户和之前登陆的用户。这个命令查看的是/var/log/wtmp痕迹日志文件。\n\n[root@xiaoshaozi ~]# last\nroot     pts/1        220.180.63.118   Wed Dec 20 10:45   still logged in   \nroot     pts/0        220.180.63.118   Wed Dec 20 10:45   still logged in   \nroot     pts/1        220.180.63.118   Tue Dec 19 17:39 - 19:40  (02:01)    \nroot     pts/0        220.180.63.118   Tue Dec 19 17:39 - 19:40  (02:01)    \nroot     pts/1        220.180.63.118   Tue Dec 19 17:38 - 17:39  (00:01)    \nroot     pts/0        220.180.63.118   Tue Dec 19 17:38 - 17:39  (00:01)    \nroot     pts/1        220.180.63.118   Tue Dec 19 17:18 - 17:38  (00:19)    \nroot     pts/0        220.180.63.118   Tue Dec 19 17:18 - 17:38  (00:19) \n#用户名   终端号\t\t  来源IP地址\t\t登陆时间\t-\t退出时间\nreboot   system boot  3.10.0-957.21.3. Wed Oct 21 21:19 - 09:19 (1117+12:00)\n#系统重启信息记录\n\n\n\n# lastlog命令\n\nlastlog命令是查看系统中所有用户最后一次的登陆时间的命令，他查看的日志是/var/log/lastlog文件。\n\n[root@xiaoshaozi ~]# lastlog\n用户名           端口     来自             最后登陆时间\nroot             pts/1    220.180.63.118   三 12月 20 10:45:58 +0800 2023\nbin                                        **从未登录过**\ndaemon                                     **从未登录过**\nadm                                        **从未登录过**\nlp                                         **从未登录过**\nsync                                       **从未登录过**\nshutdown                                   **从未登录过**\nzs             pts/3    36.5.59.80       日 12月 17 22:19:52 +0800 2023\nmysql                                      **从未登录过**\nnginx                                      **从未登录过**\nrabbitmq                                   **从未登录过**\nredis                                      **从未登录过**\ninfluxdb                                   **从未登录过**\ntss                                        **从未登录过**\napache                                     **从未登录过**\nxiaoshaozi           pts/0               四 11月 30 08:51:50 +0800 2023\nrpc                                        **从未登录过**\nrpcuser                                    **从未登录过**\nnfsnobody                                  **从未登录过**\n\n\n\n# lastb命令\n\nlastb命令是查看错误登陆的信息的，查看的是/var/log/btmp痕迹日志：\n\n[root@xiaoshaozi ~]# lastb\nroot     ssh:notty    192.168.1.102    Wed Dec 20 11:17 - 11:17  (00:00)    \nroot     ssh:notty    192.168.1.102    Wed Dec 20 11:17 - 11:17  (00:00)    \nroot     pts/0                         Wed Dec 20 11:13 - 11:13  (00:00)  \n\nbtmp begins Mon Dec  4 19:27:12 2023\n#错误登陆用户\t\t终端\t登录ip\t\t\t尝试登陆的时间\n",normalizedContent:"# 命令--14.痕迹\n\n系统中有一些重要的痕迹日志文件，如/var/log/wtmp、/var/run/utmp、/var/log/btmp、/var/log/lastlog等日志文件，如果你用vim打开这些文件，你会发现这些文件是二进制乱码。这是由于这些日志中保存的是系统的重要登录痕迹，包括某个用户何时登录了系统，何时退出了系统，错误登录等重要的系统信息。这些信息要是可以通过vim打开，就能编辑，这样痕迹信息就不准确，所以这些重要的痕迹日志，只能通过对应的命令来进行查看。\n\n\n# 1．w命令\n\nw命令是显示系统中正在登陆的用户信息的命令，这个命令查看的痕迹日志是/var/run/utmp。\n\n这个命令的基本信息如下：\n\n * 命令名称：w\n * 英文原意：show who is logged on and what they are doing.\n * 所在路径：/usr/bin/w\n * 执行权限：所有用户。\n * 功能描述：显示登录用户，和他正在做什么。\n\n[root@xiaoshaozi ~]# w\n 10:46:00 up 37 days,  1:24,  2 users,  load average: 0.00, 0.01, 0.05\n#系统时间  持续开机时间\t\t\t登陆用户\t系统在1分钟，5分钟，15分钟前的平均负载\nuser     tty      from             login@   idle   jcpu   pcpu what\nroot     pts/0    220.180.63.118   10:45    0.00s  0.00s  0.00s w\nroot     pts/1    220.180.63.118   10:45    0.00s  0.00s  0.00s top\n\n\n\n第一行信息，内容如下：\n\n内容                               说明\n10:46:00                         系统时间\nup 37 days, 1:24                 持续开机时间\n2 users                          当前登录了两个用户\nload average: 0.00, 0.01, 0.05   系统在之前1分钟、5分钟、15分钟的平均负载。\n                                 如果cpu是单核的，则这个数值超过1就是高负载；\n                                 如果cpu是四核的，则这个数值超过4就是高负载\n                                 （这个平均负载完全是依据个人经验来进行判断的，一般认为不应该超过服务器cpu的核数）\n\n第二行信息，内容如下：\n\n内容       说明\nuser     当前登陆的用户\ntty      登陆的终端：\n         tty1-6：本地字符终端（alt+f1-6切换）\n         tty7：本地图形终端（ctrl+alt+f7切换，必须安装启动图形界面）\n         pts/0-255:远程终端\nfrom     登陆的ip地址，如果是本地终端，则是空\nlogin@   登陆时间\nidle     用户闲置时间\njcpu     所有的进程占用的cpu时间\npcpu     当前进程占用的cpu时间\nwhat     用户正在进行的操作\n\n\n# who命令\n\nwho命令和w命令类似，用于查看正在登陆的用户，但是显示的内容更加简单，也是查看/var/run/utmp日志。\n\n[root@xiaoshaozi ~]# who\nroot     pts/0        2023-12-20 10:45 (220.180.63.118)\nroot     pts/1        2023-12-20 10:45 (220.180.63.118)\n#用户名\t登陆终端\t\t登陆时间（来源ip）\n\n\n\n# last命令\n\nlast命令是查看系统所有登陆过的用户信息的，包括正在登陆的用户和之前登陆的用户。这个命令查看的是/var/log/wtmp痕迹日志文件。\n\n[root@xiaoshaozi ~]# last\nroot     pts/1        220.180.63.118   wed dec 20 10:45   still logged in   \nroot     pts/0        220.180.63.118   wed dec 20 10:45   still logged in   \nroot     pts/1        220.180.63.118   tue dec 19 17:39 - 19:40  (02:01)    \nroot     pts/0        220.180.63.118   tue dec 19 17:39 - 19:40  (02:01)    \nroot     pts/1        220.180.63.118   tue dec 19 17:38 - 17:39  (00:01)    \nroot     pts/0        220.180.63.118   tue dec 19 17:38 - 17:39  (00:01)    \nroot     pts/1        220.180.63.118   tue dec 19 17:18 - 17:38  (00:19)    \nroot     pts/0        220.180.63.118   tue dec 19 17:18 - 17:38  (00:19) \n#用户名   终端号\t\t  来源ip地址\t\t登陆时间\t-\t退出时间\nreboot   system boot  3.10.0-957.21.3. wed oct 21 21:19 - 09:19 (1117+12:00)\n#系统重启信息记录\n\n\n\n# lastlog命令\n\nlastlog命令是查看系统中所有用户最后一次的登陆时间的命令，他查看的日志是/var/log/lastlog文件。\n\n[root@xiaoshaozi ~]# lastlog\n用户名           端口     来自             最后登陆时间\nroot             pts/1    220.180.63.118   三 12月 20 10:45:58 +0800 2023\nbin                                        **从未登录过**\ndaemon                                     **从未登录过**\nadm                                        **从未登录过**\nlp                                         **从未登录过**\nsync                                       **从未登录过**\nshutdown                                   **从未登录过**\nzs             pts/3    36.5.59.80       日 12月 17 22:19:52 +0800 2023\nmysql                                      **从未登录过**\nnginx                                      **从未登录过**\nrabbitmq                                   **从未登录过**\nredis                                      **从未登录过**\ninfluxdb                                   **从未登录过**\ntss                                        **从未登录过**\napache                                     **从未登录过**\nxiaoshaozi           pts/0               四 11月 30 08:51:50 +0800 2023\nrpc                                        **从未登录过**\nrpcuser                                    **从未登录过**\nnfsnobody                                  **从未登录过**\n\n\n\n# lastb命令\n\nlastb命令是查看错误登陆的信息的，查看的是/var/log/btmp痕迹日志：\n\n[root@xiaoshaozi ~]# lastb\nroot     ssh:notty    192.168.1.102    wed dec 20 11:17 - 11:17  (00:00)    \nroot     ssh:notty    192.168.1.102    wed dec 20 11:17 - 11:17  (00:00)    \nroot     pts/0                         wed dec 20 11:13 - 11:13  (00:00)  \n\nbtmp begins mon dec  4 19:27:12 2023\n#错误登陆用户\t\t终端\t登录ip\t\t\t尝试登陆的时间\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704434924e3},{title:"命令--10.挂载",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--10.%E6%8C%82%E8%BD%BD.html",relativePath:"zs-use/linux/基本使用/命令--10.挂载.md",key:"v-5f28171f",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--10.%E6%8C%82%E8%BD%BD.html",headers:[{level:2,title:"mount",slug:"mount",normalizedTitle:"mount",charIndex:49},{level:2,title:"umount",slug:"umount",normalizedTitle:"umount",charIndex:1676},{level:2,title:"/etc/fstab文件",slug:"etc-fstab文件",normalizedTitle:"/etc/fstab文件",charIndex:579},{level:2,title:"本地iso挂载",slug:"本地iso挂载",normalizedTitle:"本地iso挂载",charIndex:2355},{level:2,title:"光盘挂载",slug:"光盘挂载",normalizedTitle:"光盘挂载",charIndex:4133},{level:2,title:"挂载U盘",slug:"挂载u盘",normalizedTitle:"挂载u盘",charIndex:4707},{level:2,title:"挂载NTFS分区",slug:"挂载ntfs分区",normalizedTitle:"挂载ntfs分区",charIndex:5079},{level:3,title:"Linux的驱动加载顺序",slug:"linux的驱动加载顺序",normalizedTitle:"linux的驱动加载顺序",charIndex:5092},{level:3,title:"使用 NTFS-3G 安装 NTFS 文件系统模块",slug:"使用-ntfs-3g-安装-ntfs-文件系统模块",normalizedTitle:"使用 ntfs-3g 安装 ntfs 文件系统模块",charIndex:5373},{level:2,title:"nfs挂载",slug:"nfs挂载",normalizedTitle:"nfs挂载",charIndex:6062}],lastUpdated:"2024年1月5日星期五下午2点08分",lastUpdatedTimestamp:1704434924e3,headersStr:"mount umount /etc/fstab文件 本地iso挂载 光盘挂载 挂载U盘 挂载NTFS分区 Linux的驱动加载顺序 使用 NTFS-3G 安装 NTFS 文件系统模块 nfs挂载",content:"# 命令--10.挂载\n\n> 将硬件资源，或文件资源💿，和📂空目录🔗连接起来的过程\n\n\n# mount\n\nlinux 所有存储设备都必须挂载使用，包括硬盘\n\n命令名称：mount\n\n命令所在路径：/bin/mount\n\n执行权限：所有用户\n\n#查询系统中已经挂载的设备，-l 会显不卷标名称\nmount [-l]\ndf -h\ndf -HT\n\n# 依据配置文件/etc/fstab的内容，自动挂载\nmount -a\n\n# 只需了解-o\n# \\代办这一行没有写完，换行\nmount [-t 文件系统] [-L 卷标名] [-o 特殊选项] \\\n设备文件名 挂载点\n\n选项：\n\t-t 文件系统：\t加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统。具体可以参考下表\n\t-L 卷标名：\t\t挂载指定卷标的分区，而不是安装设备文件名挂载\n\t-o 特殊选项：\t可以指定挂载的额外选项，比如读写权限、同步异步等，如果不指定则默认值生效。\n\n\n参数              说明\natime/noatime   更新访问时间/不更新访问时间。访问分区文件时，是否更新文件的访问时间，默认为更新\nasync/sync      异步/同步，默认为异步\nauto/noauto     自动/手动，mount -a命令执行时，是否会自动安装/etc/fstab文件内容挂载，默认为自动\ndefaults        定义默认值，相当于rw,suid,dev,exec,auto,nouser,async这七个选项\nexec/noexec     执行/不执行，设定是否允许在文件系统中执行可执行文件，默认是exec允许\nremount         重新挂载已经挂载的文件系统，一般用于指定修改特殊权限\nrw/ro           读写/只读，文件系统挂载时，是否具有读写权限，默认是rw\nsuid/nosuid     具有/不具有SUID权限，设定文件系统是否具有SUID和SGID的权限，默认是具有\nuser/nosuer     允许/不允许普通用户挂载，设定文件系统是否允许普通用户挂载，默认是不允许，只有root可以挂载分区\nuserquota       写入代表文件系统支持用户磁盘配额，默认不支持\ngrpquota        写入代表文件系统支持组磁盘配额，默认不支持\n\n举例\n\n例1：\n[root@localhost ~]# mount\n#查看系统中已经挂载的文件系统，注意有虚拟文件系统\n/dev/sda3 on / type ext4 (rw)\nproc on /proc type proc (rw)\nsysfs on /sys type sysfs (rw)\ndevpts on /dev/pts type devpts (rw,gid-5,mode-620)\ntmpfs on /dev/shm type tmpfs (rw)\n/dev/sdal on /boot type ext4 (rw)\nnone on /proc/sys/fs/binfmt misc type binfmt misc (rw)\nsunrpc on /var/lib/nfs/rpc pipefs type rpc pipefs (rw)\n#命令结果是代表: /dev/sda3 分区挂载到/目录，文件系统是 ext4，权限是读写\n\n例 2: 修改特殊权限\nroot@localhost # mount\n#我们查看到/boot 分区已经被挂载，而且采用的 defaults 选项，那么我们重新载分区，并采用noexec\n#权限禁止执行文件执行，看看会出现什么情况(注意不要用/分区做试验，\n#不然系统命令也不能执行了)\n..·省略部分输出·..\nroot@localhost 7# mount -o remount,noexec /boot\n#重新挂载/boot 分区，并使用 noexec 权限\n\n\n\n\n\n\n\n# umount\n\n譬如 /dev/hda5 已经挂载在/mnt/hda5上,用一下三条命令均可卸载挂载的文件系统\n\n# umount /dev/hda5\n# umount /mnt/hda5\n# umount /dev/hda5 /mnt/hda5\n\n\n为什么umount的时候老显示 device busy？\n\n这是因为有程序正在访问这个设备，最简单的办法就是让访问该设备的程序退出以后再umount。可能有时候用户搞不清除究竟是什么程序在访问设备，如果用户不急着umount，则可以用:\n\n# umount -l /mnt/hda5\n\n\n来卸载设备。选项 –l 并不是马上umount，而是在该目录空闲后再umount。还可以先用命令ps aux 来查看占用设备的程序PID，然后用命令kill来杀死占用设备的进程，这样就umount的非常放心了。\n\n\n# /etc/fstab文件\n\n> man 5 fstab\n\n1.被挂载的设备：\n\t\t设备文件，LABEL，UUID，伪文件系统等\n\t\t\n2.挂载点：\n\t\tswap为特殊挂载，挂载点为swap\n              \n3.文件系统类型\n\n4.挂载选项：\n\t\tdefaults为默认挂载选项(rw，suid，dev，exec，auto，nouser，and async)，可以有多个挂载选项，以逗号为分隔符\n\n5.转储频率：\n\t\t0表示从不备份，1表示每天备份，2表示每隔一天备份\n\t\t\n6.自检次序：\n\t\t0表示不自检，1,表示首先自检，一般是根文件系统为1，2,表示次级自检....\n\n\n\n# 本地iso挂载\n\n准备工作：上传镜像，创建挂载目录\n\n上传镜像文件到/home/jysp/CentOS-7-x86_64-Everything-2009.iso\n\n[root@Server ~]# mkdir /media/centos7_iso                     #创建挂载点的目录\n[root@Server ~]#  mount -o  loop /home/CentOS-7-x86_64-DVD-1708.iso   /media/centos7_iso\n[root@Server ~]# df -HT            #查看镜像是否挂载成功\n备注： -o是参数，loop是把一个文件当成硬盘分区mount挂着到目录\n\n\n[root@localhost ~]# df -HT\n文件系统                类型      容量  已用  可用 已用% 挂载点\ndevtmpfs                devtmpfs   68G     0   68G    0% /dev\ntmpfs                   tmpfs      68G     0   68G    0% /dev/shm\ntmpfs                   tmpfs      68G   12M   68G    1% /run\ntmpfs                   tmpfs      68G     0   68G    0% /sys/fs/cgroup\n/dev/mapper/centos-root xfs       7.9T   15G  7.9T    1% /\n/dev/loop0              iso9660    11G   11G     0  100% /media/centos7_iso\n/dev/sda2               xfs        11G  194M   11G    2% /boot\ntmpfs                   tmpfs      14G   25k   14G    1% /run/user/42\ntmpfs                   tmpfs      14G     0   14G    0% /run/user/0\n\n\n\n开机自动挂载：修改配置文件\n\n修改开机自动挂载配置：/etc/fstab\nvim /etc/fstab\n内容追加如下：\n/home/jysp/CentOS-7-x86_64-Everything-2009.iso /media/centos7_iso/ iso9660 defaults,ro,loop 0 0 \n保存退出。\n\n\n例\n\n[root@localhost ~]# cat /etc/fstab\n\n#\n# /etc/fstab\n# Created by anaconda on Wed Dec 13 22:10:25 2023\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\n/dev/mapper/centos-root /                       xfs     defaults        0 0\nUUID=1b7d1f9f-b2af-4efb-af81-7d7bc7ef1864 /boot                   xfs     defaults        0 0\n/dev/mapper/centos-swap swap                    swap    defaults        0 0\n\n\n/home/jysp/CentOS-7-x86_64-Everything-2009.iso /media/centos7_iso/ iso9660 defaults,ro,loop 0 0 \n\n\n\n\n# 光盘挂载\n\n光盘挂载的前提是指定光盘的设备文件名，不同版本的Linux，设备文件名并不相同：\n\n * CentOS 5.x以前的系统，光盘设备文件名是/dev/hdc\n * CentOS 6.x以后的系统，光盘设备文件名是/dev/sr0\n\n不论哪个系统都有软连接/dev/cdrom，与可以作为光盘的设备文件名\n\n（1）挂载\n\n[root@localhost /]# ls\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n\n一般都习惯挂载到mnt目录下 /cdrom下挂载光盘\n# mnt:挂载u盘\n# media:挂载光盘\n# misc:挂载网络存储盘\n\nmount -t iso9660 /dev/cdrom /mnt/cdrom\n# Linux中的光盘格式为iso9660，默认的可以识别\nmount /dev/cdrom /mnt/cdrom\n\n\n\n\n\n\n（2）卸载\n\n用完之后记得卸载：\n\numount /dev/sr0\numount /mnt/cdrom\n# 因为设备文件名和挂载点已经连接到一起，卸载哪一个都可以\n\n\n注意：卸载的时候需要退出光盘目录，才能正常卸载\n\n\n# 挂载U盘\n\n(1)查看U盘\n\nU盘会和硬盘公用设备文件名，所以U盘的设备文件名不是固定的，需要手工查询，查询命令：\n\nfdisk -l\n#查询硬盘\n\n\n\n\n（2）挂载U盘\n\nmount -t vfat /dev/sdb4 /mnt/usb/\n# 挂载U盘。因为是Windows分区，所以是vfat文件系统格式\n\n\n\n\n如果U盘中有中文，会发现中文是乱码。Linux要想正常显示中文，需要两个条件：\n\n * 安装了中文编码和中文字体\n * 操作终端需要支持中文显示（纯字符终端，是不支持中文编码的）\n\n手工指定中文编码：\n\nmount -t vfat -o iocharset=utf8 /dev/sdb1 /mnt/usb/\n# 挂载U盘，指定中文编码格式为UTF-8\n\n\n如果需要卸载，可以执行\n\numount /mnt/usb/\n\n\n\n# 挂载NTFS分区\n\n\n# Linux的驱动加载顺序\n\n * 驱动直接放入系统内核之中。这种驱动主要是系统启动加载必须的驱动，数量较少。\n * 驱动以模块的形式放入硬盘。大多数驱动都已这种方式保存，保存位置在/lib/modules/3.10.0-862.el.x86_64/kernel/中。\n * 驱动可以被Linux识别，但是系统认为这种驱动异步不常用，默认不加载。如果需要加载这种驱动，需要重新编译内核，而NTFS文件系统的驱动就属于这种情况。\n * 硬件不能被Linux内核识别，需要手工安装驱动。当然前提是厂商提供了改硬件针对Linux的驱动，否则就需要自己开发驱动了\n\n\n# 使用 NTFS-3G 安装 NTFS 文件系统模块\n\n下载 NTFS-3G 插件\n\n我们从网站 http://www.tuxera.com/community/ntfs-3g-download/下载 NTFS-3G 插件到 Linux服务器上。\n\n安装 NTFS-3G 插件\n\n在编译安装 NTFS-3G 插件之前，要保证 gcc 编译器已经安装。具体安装命令如下:\n\ntar -zxvf ntfs-3g ntfsprogs-2013.1.13.tgz\n# 解压\n[root@localhost ~]# cd ntfs-3g ntfsprogs-2013.1.13\n#进入解压目录\nroot@localhost ntfs-3g ntfsprogs-2013.1.13]# ./configure\n#编译器准备。没有指定安装目录，安装到默认位置中\nroot@localhost ntfs-3g ntfsprogs-2013.1.137# make\n#编译\nroot@localhost ntfs-3g ntfsprogs-2013.1.13]# make install\n#编译安装\n\n\n安装就完成了，已经可以挂载和使用 Windows 的 NTFS 分区了。不过需要注意挂载分区时的文件\n\n系统不是 ntfs，而是 ntfs-3g。挂载命令如下:\n\n[root@localhost~]# mount -t ntfs-3g 分区设备文件名 挂载点\n例如:\n[root@localhost ~]# mount - t ntfs-3g /dev/sdbl /mnt/win\n\n\n\n# nfs挂载\n\n参考后续文章（服务管理--NFS）\n\n[jysp@jysp ~]$ df -HT\n文件系统                类型      容量  已用  可用 已用% 挂载点\ndevtmpfs                devtmpfs   69G     0   69G    0% /dev\ntmpfs                   tmpfs      69G     0   69G    0% /dev/shm\ntmpfs                   tmpfs      69G  131M   69G    1% /run\ntmpfs                   tmpfs      69G     0   69G    0% /sys/fs/cgroup\n/dev/mapper/centos-root xfs       5.1T   84G  5.0T    2% /\n/dev/sda2               xfs        11G  171M   11G    2% /boot\n/dev/sda1               vfat      4.3G  9.5M  4.3G    1% /boot/efi\n10.139.102.114:/data1   nfs4      128T  272G  128T    1% /home/jysp/workspace/platform_file_storage\n10.139.102.114:/data    nfs4      128T  272G  128T    1% /home/jysp/ftps\ntmpfs                   tmpfs      14G  197k   14G    1% /run/user/42\ntmpfs                   tmpfs      14G     0   14G    0% /run/user/1000\n",normalizedContent:"# 命令--10.挂载\n\n> 将硬件资源，或文件资源💿，和📂空目录🔗连接起来的过程\n\n\n# mount\n\nlinux 所有存储设备都必须挂载使用，包括硬盘\n\n命令名称：mount\n\n命令所在路径：/bin/mount\n\n执行权限：所有用户\n\n#查询系统中已经挂载的设备，-l 会显不卷标名称\nmount [-l]\ndf -h\ndf -ht\n\n# 依据配置文件/etc/fstab的内容，自动挂载\nmount -a\n\n# 只需了解-o\n# \\代办这一行没有写完，换行\nmount [-t 文件系统] [-l 卷标名] [-o 特殊选项] \\\n设备文件名 挂载点\n\n选项：\n\t-t 文件系统：\t加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统。具体可以参考下表\n\t-l 卷标名：\t\t挂载指定卷标的分区，而不是安装设备文件名挂载\n\t-o 特殊选项：\t可以指定挂载的额外选项，比如读写权限、同步异步等，如果不指定则默认值生效。\n\n\n参数              说明\natime/noatime   更新访问时间/不更新访问时间。访问分区文件时，是否更新文件的访问时间，默认为更新\nasync/sync      异步/同步，默认为异步\nauto/noauto     自动/手动，mount -a命令执行时，是否会自动安装/etc/fstab文件内容挂载，默认为自动\ndefaults        定义默认值，相当于rw,suid,dev,exec,auto,nouser,async这七个选项\nexec/noexec     执行/不执行，设定是否允许在文件系统中执行可执行文件，默认是exec允许\nremount         重新挂载已经挂载的文件系统，一般用于指定修改特殊权限\nrw/ro           读写/只读，文件系统挂载时，是否具有读写权限，默认是rw\nsuid/nosuid     具有/不具有suid权限，设定文件系统是否具有suid和sgid的权限，默认是具有\nuser/nosuer     允许/不允许普通用户挂载，设定文件系统是否允许普通用户挂载，默认是不允许，只有root可以挂载分区\nuserquota       写入代表文件系统支持用户磁盘配额，默认不支持\ngrpquota        写入代表文件系统支持组磁盘配额，默认不支持\n\n举例\n\n例1：\n[root@localhost ~]# mount\n#查看系统中已经挂载的文件系统，注意有虚拟文件系统\n/dev/sda3 on / type ext4 (rw)\nproc on /proc type proc (rw)\nsysfs on /sys type sysfs (rw)\ndevpts on /dev/pts type devpts (rw,gid-5,mode-620)\ntmpfs on /dev/shm type tmpfs (rw)\n/dev/sdal on /boot type ext4 (rw)\nnone on /proc/sys/fs/binfmt misc type binfmt misc (rw)\nsunrpc on /var/lib/nfs/rpc pipefs type rpc pipefs (rw)\n#命令结果是代表: /dev/sda3 分区挂载到/目录，文件系统是 ext4，权限是读写\n\n例 2: 修改特殊权限\nroot@localhost # mount\n#我们查看到/boot 分区已经被挂载，而且采用的 defaults 选项，那么我们重新载分区，并采用noexec\n#权限禁止执行文件执行，看看会出现什么情况(注意不要用/分区做试验，\n#不然系统命令也不能执行了)\n..·省略部分输出·..\nroot@localhost 7# mount -o remount,noexec /boot\n#重新挂载/boot 分区，并使用 noexec 权限\n\n\n\n\n\n\n\n# umount\n\n譬如 /dev/hda5 已经挂载在/mnt/hda5上,用一下三条命令均可卸载挂载的文件系统\n\n# umount /dev/hda5\n# umount /mnt/hda5\n# umount /dev/hda5 /mnt/hda5\n\n\n为什么umount的时候老显示 device busy？\n\n这是因为有程序正在访问这个设备，最简单的办法就是让访问该设备的程序退出以后再umount。可能有时候用户搞不清除究竟是什么程序在访问设备，如果用户不急着umount，则可以用:\n\n# umount -l /mnt/hda5\n\n\n来卸载设备。选项 –l 并不是马上umount，而是在该目录空闲后再umount。还可以先用命令ps aux 来查看占用设备的程序pid，然后用命令kill来杀死占用设备的进程，这样就umount的非常放心了。\n\n\n# /etc/fstab文件\n\n> man 5 fstab\n\n1.被挂载的设备：\n\t\t设备文件，label，uuid，伪文件系统等\n\t\t\n2.挂载点：\n\t\tswap为特殊挂载，挂载点为swap\n              \n3.文件系统类型\n\n4.挂载选项：\n\t\tdefaults为默认挂载选项(rw，suid，dev，exec，auto，nouser，and async)，可以有多个挂载选项，以逗号为分隔符\n\n5.转储频率：\n\t\t0表示从不备份，1表示每天备份，2表示每隔一天备份\n\t\t\n6.自检次序：\n\t\t0表示不自检，1,表示首先自检，一般是根文件系统为1，2,表示次级自检....\n\n\n\n# 本地iso挂载\n\n准备工作：上传镜像，创建挂载目录\n\n上传镜像文件到/home/jysp/centos-7-x86_64-everything-2009.iso\n\n[root@server ~]# mkdir /media/centos7_iso                     #创建挂载点的目录\n[root@server ~]#  mount -o  loop /home/centos-7-x86_64-dvd-1708.iso   /media/centos7_iso\n[root@server ~]# df -ht            #查看镜像是否挂载成功\n备注： -o是参数，loop是把一个文件当成硬盘分区mount挂着到目录\n\n\n[root@localhost ~]# df -ht\n文件系统                类型      容量  已用  可用 已用% 挂载点\ndevtmpfs                devtmpfs   68g     0   68g    0% /dev\ntmpfs                   tmpfs      68g     0   68g    0% /dev/shm\ntmpfs                   tmpfs      68g   12m   68g    1% /run\ntmpfs                   tmpfs      68g     0   68g    0% /sys/fs/cgroup\n/dev/mapper/centos-root xfs       7.9t   15g  7.9t    1% /\n/dev/loop0              iso9660    11g   11g     0  100% /media/centos7_iso\n/dev/sda2               xfs        11g  194m   11g    2% /boot\ntmpfs                   tmpfs      14g   25k   14g    1% /run/user/42\ntmpfs                   tmpfs      14g     0   14g    0% /run/user/0\n\n\n\n开机自动挂载：修改配置文件\n\n修改开机自动挂载配置：/etc/fstab\nvim /etc/fstab\n内容追加如下：\n/home/jysp/centos-7-x86_64-everything-2009.iso /media/centos7_iso/ iso9660 defaults,ro,loop 0 0 \n保存退出。\n\n\n例\n\n[root@localhost ~]# cat /etc/fstab\n\n#\n# /etc/fstab\n# created by anaconda on wed dec 13 22:10:25 2023\n#\n# accessible filesystems, by reference, are maintained under '/dev/disk'\n# see man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\n/dev/mapper/centos-root /                       xfs     defaults        0 0\nuuid=1b7d1f9f-b2af-4efb-af81-7d7bc7ef1864 /boot                   xfs     defaults        0 0\n/dev/mapper/centos-swap swap                    swap    defaults        0 0\n\n\n/home/jysp/centos-7-x86_64-everything-2009.iso /media/centos7_iso/ iso9660 defaults,ro,loop 0 0 \n\n\n\n\n# 光盘挂载\n\n光盘挂载的前提是指定光盘的设备文件名，不同版本的linux，设备文件名并不相同：\n\n * centos 5.x以前的系统，光盘设备文件名是/dev/hdc\n * centos 6.x以后的系统，光盘设备文件名是/dev/sr0\n\n不论哪个系统都有软连接/dev/cdrom，与可以作为光盘的设备文件名\n\n（1）挂载\n\n[root@localhost /]# ls\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n\n一般都习惯挂载到mnt目录下 /cdrom下挂载光盘\n# mnt:挂载u盘\n# media:挂载光盘\n# misc:挂载网络存储盘\n\nmount -t iso9660 /dev/cdrom /mnt/cdrom\n# linux中的光盘格式为iso9660，默认的可以识别\nmount /dev/cdrom /mnt/cdrom\n\n\n\n\n\n\n（2）卸载\n\n用完之后记得卸载：\n\numount /dev/sr0\numount /mnt/cdrom\n# 因为设备文件名和挂载点已经连接到一起，卸载哪一个都可以\n\n\n注意：卸载的时候需要退出光盘目录，才能正常卸载\n\n\n# 挂载u盘\n\n(1)查看u盘\n\nu盘会和硬盘公用设备文件名，所以u盘的设备文件名不是固定的，需要手工查询，查询命令：\n\nfdisk -l\n#查询硬盘\n\n\n\n\n（2）挂载u盘\n\nmount -t vfat /dev/sdb4 /mnt/usb/\n# 挂载u盘。因为是windows分区，所以是vfat文件系统格式\n\n\n\n\n如果u盘中有中文，会发现中文是乱码。linux要想正常显示中文，需要两个条件：\n\n * 安装了中文编码和中文字体\n * 操作终端需要支持中文显示（纯字符终端，是不支持中文编码的）\n\n手工指定中文编码：\n\nmount -t vfat -o iocharset=utf8 /dev/sdb1 /mnt/usb/\n# 挂载u盘，指定中文编码格式为utf-8\n\n\n如果需要卸载，可以执行\n\numount /mnt/usb/\n\n\n\n# 挂载ntfs分区\n\n\n# linux的驱动加载顺序\n\n * 驱动直接放入系统内核之中。这种驱动主要是系统启动加载必须的驱动，数量较少。\n * 驱动以模块的形式放入硬盘。大多数驱动都已这种方式保存，保存位置在/lib/modules/3.10.0-862.el.x86_64/kernel/中。\n * 驱动可以被linux识别，但是系统认为这种驱动异步不常用，默认不加载。如果需要加载这种驱动，需要重新编译内核，而ntfs文件系统的驱动就属于这种情况。\n * 硬件不能被linux内核识别，需要手工安装驱动。当然前提是厂商提供了改硬件针对linux的驱动，否则就需要自己开发驱动了\n\n\n# 使用 ntfs-3g 安装 ntfs 文件系统模块\n\n下载 ntfs-3g 插件\n\n我们从网站 http://www.tuxera.com/community/ntfs-3g-download/下载 ntfs-3g 插件到 linux服务器上。\n\n安装 ntfs-3g 插件\n\n在编译安装 ntfs-3g 插件之前，要保证 gcc 编译器已经安装。具体安装命令如下:\n\ntar -zxvf ntfs-3g ntfsprogs-2013.1.13.tgz\n# 解压\n[root@localhost ~]# cd ntfs-3g ntfsprogs-2013.1.13\n#进入解压目录\nroot@localhost ntfs-3g ntfsprogs-2013.1.13]# ./configure\n#编译器准备。没有指定安装目录，安装到默认位置中\nroot@localhost ntfs-3g ntfsprogs-2013.1.137# make\n#编译\nroot@localhost ntfs-3g ntfsprogs-2013.1.13]# make install\n#编译安装\n\n\n安装就完成了，已经可以挂载和使用 windows 的 ntfs 分区了。不过需要注意挂载分区时的文件\n\n系统不是 ntfs，而是 ntfs-3g。挂载命令如下:\n\n[root@localhost~]# mount -t ntfs-3g 分区设备文件名 挂载点\n例如:\n[root@localhost ~]# mount - t ntfs-3g /dev/sdbl /mnt/win\n\n\n\n# nfs挂载\n\n参考后续文章（服务管理--nfs）\n\n[jysp@jysp ~]$ df -ht\n文件系统                类型      容量  已用  可用 已用% 挂载点\ndevtmpfs                devtmpfs   69g     0   69g    0% /dev\ntmpfs                   tmpfs      69g     0   69g    0% /dev/shm\ntmpfs                   tmpfs      69g  131m   69g    1% /run\ntmpfs                   tmpfs      69g     0   69g    0% /sys/fs/cgroup\n/dev/mapper/centos-root xfs       5.1t   84g  5.0t    2% /\n/dev/sda2               xfs        11g  171m   11g    2% /boot\n/dev/sda1               vfat      4.3g  9.5m  4.3g    1% /boot/efi\n10.139.102.114:/data1   nfs4      128t  272g  128t    1% /home/jysp/workspace/platform_file_storage\n10.139.102.114:/data    nfs4      128t  272g  128t    1% /home/jysp/ftps\ntmpfs                   tmpfs      14g  197k   14g    1% /run/user/42\ntmpfs                   tmpfs      14g     0   14g    0% /run/user/1000\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704434924e3},{title:"命令--15.echo",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--15.echo.html",relativePath:"zs-use/linux/基本使用/命令--15.echo.md",key:"v-108860d2",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--15.echo.html",headers:[{level:2,title:"前景色和背景色对应的数字",slug:"前景色和背景色对应的数字",normalizedTitle:"前景色和背景色对应的数字",charIndex:2448},{level:2,title:"使用echo命令进行测试",slug:"使用echo命令进行测试",normalizedTitle:"使用echo命令进行测试",charIndex:2721}],lastUpdated:"2024年1月8日星期一下午2点56分",lastUpdatedTimestamp:1704696967e3,headersStr:"前景色和背景色对应的数字 使用echo命令进行测试",content:'# 命令--15.echo\n\necho会将输入的字符串送往标准输出，并在最后加上换行符。 可以理解为打印字符串。\n\n[root@localhost ~]# echo [选项] [输出内容]\n\n常见选项：\n    -n ：不输出最后的换行符“\\n”（就是内容输出后不换行）\n    -e：解释转义字符（字符串中出现\\n、\\t等特殊字符，则特别加以处理，而不会将它当成一般文字输出）\n\n\n举例说明：\n\n[root@localhost ~]# echo hello world 打印hello world\nhello world\n[root@localhost ~]# echo aaaa 打印aaaa\naaaa\n[root@localhost ~]# echo hello > file1 将hello重定向到file1文件中\n[root@localhost ~]# cat file1\nhello\n\n\n总结：\n1. echo表示打印字符串，默认将字符串送往标准输出；默认会打印一个换行符\n2. echo可以结合>或者>>符号来使用，进行文件的创建或内容追加。\n\n\n常见控制字符：\n\\t 表示制表符\n\\n 表示换行符\n\\r 表示回车\n\n\n[root@localhost ~]# echo -e \'date\\nuuu\' > 1.sh //-e表示将\\n解释为换行符\n[root@localhost ~]# cat 1.sh\ndate\nuuu\n\n\nhelp echo\n\n\n> -e 参数说明\n\n控制字符    作用\n\\\\      输出\\本身\n\\a      输出警告音\n\\b      退格键，也就是向左删除\n\\c      取消输出行末的换行符。和“-n”选项一致\n\\e      ESCAPE键\n\\f      换页符\n\\n      换行符\n\\r      回车键\n\\t      制表符，也就是Tab键\n\\v      垂直制表符\n\\0nnn   按照八进制ASCII码表输出字符。其中0为数字零，nnn是三位八进制数\n\\xhh    按照十六进制ASCII码表输出字符。其中hh是两位十六进制数\n\n> 更多示例\n> \n> 这个输出会输出\\，同时会在系统音响中输出一声提示音\n> [root@xiaoshaozi ~]# echo -e "\\\\ \\a"\n> \n> "\\b"删除，所以输出时只有ac\n> [root@xiaoshaozi ~]# echo -e "ab\\bc"\n> ac\n> \n> 我们加入了制表符“\\t”和换行符“\\n”,所以会按照格式输出\n> [root@xiaoshaozi ~]# echo -e "a\\tb\\tc\\nd\\te\\tf"\n> a       b       c\n> d       e       f\n> \n> 还是会输出上面的内容，不过是按照八进制ASCII码输出的。\n> 也就是说141这个八进制，在ASCII码中代表小写的“a”，其他的以此类推\n> [root@xiaoshaozi ~]# echo -e "\\0141\\t\\0142\\t\\0143\\n\\0144\\t\\0145\\t\\0146"\n> a       b       c\n> d       e       f\n> \n> 如果按照十六进制ASCII码也同样可以输出\n> [root@xiaoshaozi ~]# echo -e "\\x61\\t\\x62\\t\\x63\\n\\x64\\t\\x65\\t\\x66"\n> a       b       c\n> d       e       f\n> \n> \n> \n> echo命令还可以进行一些比较有意思的东西，比如：\n> \n> \n> \n> 这条命令会把abcd按照红色输出。\n> 解释下这个命令\n> \\e[1 \t是标准格式，代表颜色输出开始，\n> \\e[0m\t代表颜色输出结束，\n> 31m\t\t定义字体颜色是红色\n> \n> echo\n> 能够识别的颜色如下：\n> 30m=黑色，\n> 31m=红色，\n> 32m=绿色，\n> 33m=黄色，\n> 34m=蓝色，\n> 35m=洋红，\n> 36m=青色，\n> 37m=白色。\n> echo\n> 可以使用的背景颜色如下：\n> 40m=黑色，\n> 41m=红色，\n> 42m=绿色，\n> 43m=黄色，\n> 44m=蓝色，\n> 45m=洋红，\n> 46m=青色，\n> 47m=白色。\n\n\n# ASCII 控制字符 - "\\033"\n\nASCII控制字符的编号范围是0-31和127（0x00-0x1F和0x7F），共33个字符。\n\n输出到控制台时，可以利用控制字符来控制输出文本的显示效果。\n\n控制字符可以用8进制或16进制表示，比如："\\033", "\\0x1b", "\\x1b"均表示同一个控制字符，含义是ESC\n\nESC后面跟一个格式字符串，用来设置颜色或控制光标\n\n格式             含义\n\\033[0m        关闭所有属性\n\\033[1m        设置高亮度\n\\033[4m        下划线\n\\033[5m        闪烁\n\\033[7m        反显\n\\033[8m        消隐\n\\033[30~37m    设置前景色\n\\033[40~47;m   设置背景色\n\\033[nA        光标上移n行\n\\033[nB        光标下移n行\n\\033[nC        光标右移n行\n\\033[nD        光标左移n行\n\\033[y;xH      设置光标位置\n\\033[2J        清屏\n\\033[K         清除从光标到行尾的内容\n\\033[s         保存光标位置\n\\033[u         恢复光标位置\n\\033[?25l      隐藏光标\n\\033[?25h      显示光标\n\n\n# 前景色和背景色对应的数字\n\n颜色   背景色   背景色加亮   前景色   前景色加亮\n黑    40    100     30    90\n红    41    101     31    91\n绿    42    102     32    92\n黄    43    103     33    93\n蓝    44    104     34    94\n紫    45    105     35    95\n靛蓝   46    106     36    96\n白    47    107     37    97\n\n\n# 使用echo命令进行测试\n\n可以使用echo命令对格式字符串进行测试\n\n例如:\n\necho -e "\\033[41;36m 一段文字 \\033[0m"\n\n这里先把控制台的背景色设置为红色（41），文字的颜色设置为靛蓝色（36），打印一段文字后，关闭了所有设置（还原到默认状态下）\n\n\n\n----------------------------------------\n\n测试不同的前景色\n\n',normalizedContent:'# 命令--15.echo\n\necho会将输入的字符串送往标准输出，并在最后加上换行符。 可以理解为打印字符串。\n\n[root@localhost ~]# echo [选项] [输出内容]\n\n常见选项：\n    -n ：不输出最后的换行符“\\n”（就是内容输出后不换行）\n    -e：解释转义字符（字符串中出现\\n、\\t等特殊字符，则特别加以处理，而不会将它当成一般文字输出）\n\n\n举例说明：\n\n[root@localhost ~]# echo hello world 打印hello world\nhello world\n[root@localhost ~]# echo aaaa 打印aaaa\naaaa\n[root@localhost ~]# echo hello > file1 将hello重定向到file1文件中\n[root@localhost ~]# cat file1\nhello\n\n\n总结：\n1. echo表示打印字符串，默认将字符串送往标准输出；默认会打印一个换行符\n2. echo可以结合>或者>>符号来使用，进行文件的创建或内容追加。\n\n\n常见控制字符：\n\\t 表示制表符\n\\n 表示换行符\n\\r 表示回车\n\n\n[root@localhost ~]# echo -e \'date\\nuuu\' > 1.sh //-e表示将\\n解释为换行符\n[root@localhost ~]# cat 1.sh\ndate\nuuu\n\n\nhelp echo\n\n\n> -e 参数说明\n\n控制字符    作用\n\\\\      输出\\本身\n\\a      输出警告音\n\\b      退格键，也就是向左删除\n\\c      取消输出行末的换行符。和“-n”选项一致\n\\e      escape键\n\\f      换页符\n\\n      换行符\n\\r      回车键\n\\t      制表符，也就是tab键\n\\v      垂直制表符\n\\0nnn   按照八进制ascii码表输出字符。其中0为数字零，nnn是三位八进制数\n\\xhh    按照十六进制ascii码表输出字符。其中hh是两位十六进制数\n\n> 更多示例\n> \n> 这个输出会输出\\，同时会在系统音响中输出一声提示音\n> [root@xiaoshaozi ~]# echo -e "\\\\ \\a"\n> \n> "\\b"删除，所以输出时只有ac\n> [root@xiaoshaozi ~]# echo -e "ab\\bc"\n> ac\n> \n> 我们加入了制表符“\\t”和换行符“\\n”,所以会按照格式输出\n> [root@xiaoshaozi ~]# echo -e "a\\tb\\tc\\nd\\te\\tf"\n> a       b       c\n> d       e       f\n> \n> 还是会输出上面的内容，不过是按照八进制ascii码输出的。\n> 也就是说141这个八进制，在ascii码中代表小写的“a”，其他的以此类推\n> [root@xiaoshaozi ~]# echo -e "\\0141\\t\\0142\\t\\0143\\n\\0144\\t\\0145\\t\\0146"\n> a       b       c\n> d       e       f\n> \n> 如果按照十六进制ascii码也同样可以输出\n> [root@xiaoshaozi ~]# echo -e "\\x61\\t\\x62\\t\\x63\\n\\x64\\t\\x65\\t\\x66"\n> a       b       c\n> d       e       f\n> \n> \n> \n> echo命令还可以进行一些比较有意思的东西，比如：\n> \n> \n> \n> 这条命令会把abcd按照红色输出。\n> 解释下这个命令\n> \\e[1 \t是标准格式，代表颜色输出开始，\n> \\e[0m\t代表颜色输出结束，\n> 31m\t\t定义字体颜色是红色\n> \n> echo\n> 能够识别的颜色如下：\n> 30m=黑色，\n> 31m=红色，\n> 32m=绿色，\n> 33m=黄色，\n> 34m=蓝色，\n> 35m=洋红，\n> 36m=青色，\n> 37m=白色。\n> echo\n> 可以使用的背景颜色如下：\n> 40m=黑色，\n> 41m=红色，\n> 42m=绿色，\n> 43m=黄色，\n> 44m=蓝色，\n> 45m=洋红，\n> 46m=青色，\n> 47m=白色。\n\n\n# ascii 控制字符 - "\\033"\n\nascii控制字符的编号范围是0-31和127（0x00-0x1f和0x7f），共33个字符。\n\n输出到控制台时，可以利用控制字符来控制输出文本的显示效果。\n\n控制字符可以用8进制或16进制表示，比如："\\033", "\\0x1b", "\\x1b"均表示同一个控制字符，含义是esc\n\nesc后面跟一个格式字符串，用来设置颜色或控制光标\n\n格式             含义\n\\033[0m        关闭所有属性\n\\033[1m        设置高亮度\n\\033[4m        下划线\n\\033[5m        闪烁\n\\033[7m        反显\n\\033[8m        消隐\n\\033[30~37m    设置前景色\n\\033[40~47;m   设置背景色\n\\033[na        光标上移n行\n\\033[nb        光标下移n行\n\\033[nc        光标右移n行\n\\033[nd        光标左移n行\n\\033[y;xh      设置光标位置\n\\033[2j        清屏\n\\033[k         清除从光标到行尾的内容\n\\033[s         保存光标位置\n\\033[u         恢复光标位置\n\\033[?25l      隐藏光标\n\\033[?25h      显示光标\n\n\n# 前景色和背景色对应的数字\n\n颜色   背景色   背景色加亮   前景色   前景色加亮\n黑    40    100     30    90\n红    41    101     31    91\n绿    42    102     32    92\n黄    43    103     33    93\n蓝    44    104     34    94\n紫    45    105     35    95\n靛蓝   46    106     36    96\n白    47    107     37    97\n\n\n# 使用echo命令进行测试\n\n可以使用echo命令对格式字符串进行测试\n\n例如:\n\necho -e "\\033[41;36m 一段文字 \\033[0m"\n\n这里先把控制台的背景色设置为红色（41），文字的颜色设置为靛蓝色（36），打印一段文字后，关闭了所有设置（还原到默认状态下）\n\n\n\n----------------------------------------\n\n测试不同的前景色\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704696967e3},{title:"命令--2.关机、重启",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--2.%E5%85%B3%E6%9C%BA%E3%80%81%E9%87%8D%E5%90%AF.html",relativePath:"zs-use/linux/基本使用/命令--2.关机、重启.md",key:"v-cfef4fb8",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--2.%E5%85%B3%E6%9C%BA%E3%80%81%E9%87%8D%E5%90%AF.html",headers:[{level:3,title:"sync数据同步",slug:"sync数据同步",normalizedTitle:"sync数据同步",charIndex:18},{level:3,title:"shutdown命令",slug:"shutdown命令",normalizedTitle:"shutdown命令",charIndex:64},{level:3,title:"reboot命令",slug:"reboot命令",normalizedTitle:"reboot命令",charIndex:352},{level:3,title:"halt和poweroff命令",slug:"halt和poweroff命令",normalizedTitle:"halt和poweroff命令",charIndex:435},{level:3,title:"init命令",slug:"init命令",normalizedTitle:"init命令",charIndex:564},{level:3,title:"注意：",slug:"注意",normalizedTitle:"注意：",charIndex:712},{level:3,title:"远程防火墙配置",slug:"远程防火墙配置",normalizedTitle:"远程防火墙配置",charIndex:879}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"sync数据同步 shutdown命令 reboot命令 halt和poweroff命令 init命令 注意： 远程防火墙配置",content:"# 命令--2.关机、重启\n\n\n# sync数据同步\n\nsync命令的基本信息如下。\n\n功能描述：刷新文件系统缓冲区。\n\n\n# shutdown命令\n\n关机和重启操作只有管理员可以执行！\n\n[root@localhost ~]# shutdown [选项] 时间 [警告信息]\n选项：\n    -c：取消已经执行的shutdown命令\n    -h：关机\n    -r：重启\n\nshutdown -h now # 立刻马上关机\nshutdown -h 60  # 60分钟（1个小时）后关闭\n\n说明：如果取消在另一终端使用shutdown -c 或者直接ctrl+c\n\n\nreboot 重启系统\n\nshutdown -r now 立刻马上重启\n\nshutdown -r 30 30分钟后重启系统\n\n\n# reboot命令\n\n在现在的系统中，reboot命令也是安全的，而且不需要加入过多的选项。\n\n[root@localhost ~]# reboot\n#重启\n\n\n\n# halt和poweroff命令\n\n这两个都是关机命令，直接执行即可。这两个命令不会完整关闭和保存系统的服务，不建议使用。\n\n[root@localhost ~]# halt\n#关机\n[root@localhost ~]# poweroff\n#关机\n\n\n\n# init命令\n\ninit是修改Linux运行级别的命令，也可以用于关机和重启。这个命令并不安全，不建议使用。\n\n[root@localhost ~]# init 0\n#关机，也就是调用系统的0级别\n\n[root@localhost ~]# init 6\n#重启，也就是调用系统的6级别\n\n\n\n# 注意：\n\n * 远程主机不建议关机\n * 在重启前，关闭正在执行的服务，当心损坏硬盘\n * 建议使用shutdown -r now命令重启。这条命令在重启时会正常保存和中止服务器中正在运行的程序，是安全重启命令。\n * 而且最好在重启前执行几次sync命令，这条命令是数据同步命令，可以让暂时保存在内存中的数据同步到硬盘上。\n\n\n# 远程防火墙配置\n\n如果需要远程配置防火墙，那么先写一个系统定时任务，让它每5分钟清空一下防火墙规则，就算写错了也还有反悔的机会，等测试没有问题了再删除这个系统定时任务",normalizedContent:"# 命令--2.关机、重启\n\n\n# sync数据同步\n\nsync命令的基本信息如下。\n\n功能描述：刷新文件系统缓冲区。\n\n\n# shutdown命令\n\n关机和重启操作只有管理员可以执行！\n\n[root@localhost ~]# shutdown [选项] 时间 [警告信息]\n选项：\n    -c：取消已经执行的shutdown命令\n    -h：关机\n    -r：重启\n\nshutdown -h now # 立刻马上关机\nshutdown -h 60  # 60分钟（1个小时）后关闭\n\n说明：如果取消在另一终端使用shutdown -c 或者直接ctrl+c\n\n\nreboot 重启系统\n\nshutdown -r now 立刻马上重启\n\nshutdown -r 30 30分钟后重启系统\n\n\n# reboot命令\n\n在现在的系统中，reboot命令也是安全的，而且不需要加入过多的选项。\n\n[root@localhost ~]# reboot\n#重启\n\n\n\n# halt和poweroff命令\n\n这两个都是关机命令，直接执行即可。这两个命令不会完整关闭和保存系统的服务，不建议使用。\n\n[root@localhost ~]# halt\n#关机\n[root@localhost ~]# poweroff\n#关机\n\n\n\n# init命令\n\ninit是修改linux运行级别的命令，也可以用于关机和重启。这个命令并不安全，不建议使用。\n\n[root@localhost ~]# init 0\n#关机，也就是调用系统的0级别\n\n[root@localhost ~]# init 6\n#重启，也就是调用系统的6级别\n\n\n\n# 注意：\n\n * 远程主机不建议关机\n * 在重启前，关闭正在执行的服务，当心损坏硬盘\n * 建议使用shutdown -r now命令重启。这条命令在重启时会正常保存和中止服务器中正在运行的程序，是安全重启命令。\n * 而且最好在重启前执行几次sync命令，这条命令是数据同步命令，可以让暂时保存在内存中的数据同步到硬盘上。\n\n\n# 远程防火墙配置\n\n如果需要远程配置防火墙，那么先写一个系统定时任务，让它每5分钟清空一下防火墙规则，就算写错了也还有反悔的机会，等测试没有问题了再删除这个系统定时任务",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"命令--4.文件操作管理",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--4.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AE%A1%E7%90%86.html",relativePath:"zs-use/linux/基本使用/命令--4.文件操作管理.md",key:"v-2c0ab6d6",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--4.%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AE%A1%E7%90%86.html",headers:[{level:2,title:"1、file",slug:"_1、file",normalizedTitle:"1、file",charIndex:324},{level:2,title:"2、ls",slug:"_2、ls",normalizedTitle:"2、ls",charIndex:1163},{level:2,title:"3、mkdir",slug:"_3、mkdir",normalizedTitle:"3、mkdir",charIndex:1604},{level:2,title:"4、touch",slug:"_4、touch",normalizedTitle:"4、touch",charIndex:1873},{level:2,title:"5、cat|more|less|head|tail",slug:"_5、cat-more-less-head-tail",normalizedTitle:"5、cat|more|less|head|tail",charIndex:3657},{level:2,title:"6、cp",slug:"_6、cp",normalizedTitle:"6、cp",charIndex:4568},{level:2,title:"7、mv",slug:"_7、mv",normalizedTitle:"7、mv",charIndex:5021},{level:2,title:"8、rm",slug:"_8、rm",normalizedTitle:"8、rm",charIndex:5244}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"1、file 2、ls 3、mkdir 4、touch 5、cat|more|less|head|tail 6、cp 7、mv 8、rm",content:"# 命令--4.文件操作管理\n\n重要：Linux下，一切皆文件！！！\n\n说在前面：\n\n 1. 接下来所有的命令需要在一个载体上执行，这个载体就叫做终端。\n\n 2. 终端上所有命令都需要一个东西翻译解析一下，计算机才能理解并执行。\n\n 3. 这个翻译解析的东西叫SHELL解释器**，RedHat和Centos默认shell解释器叫**bash。\n\n 4. 既然需要bash帮忙翻译解释相关命令，那么你所敲的命令必须符合它的语法，否则报错给你看。\n\n命令 [可选项] 参数\n[root@localhost ~]# ls -l /root\n命令：整条shell命令的主体\n选项：会影响或微调命令的行为，通常以-, --\n参数：命令作用的对象\n\n\n\n# 1、file\n\n> 判断文件类型\n\n常见文件类型\n\n文件类型                描述\n字符设备（c）             所有==输入输出的设备==，如：键盘、鼠标、显示器、打印机等\n块设备（==b==）          所有==存储设备==称之为块设备文件，如：软盘、磁盘、光盘、U盘、磁带、光驱等\n软连接文件（==l==）        类似于Windows下的快捷方式\n目录文件（==d==）         相当于Windows下的文件夹\n普通文件(==f==或==-==)   类似Windows下记事本、word等，可以使用==相关命令==进行编辑、==查看文件内容==\n管道文件(p)             简单理解为==程序或进程之间通讯==的一种方式\n套接字文件(s)            简单理解为==程序或进程之间通讯==的一种方式\n                    \n\n * 用 file 命令来判断文件类型\n   \n   [root@localhost ~]# file /root\n   /root: directory 目录\n   [root@localhost ~]# file /root/install.log\n   /root/install.log: ASCII text 普通的文本文件\n   [root@localhost ~]# file /dev/sda\n   /dev/sda: block special 块设备文件，存放数据\n   [root@localhost ~]# file /dev/tty1\n   /dev/tty1: character special 字符设备\n   [root@localhost ~]# file /bin/sh\n   /bin/sh: symbolic link to bash 软连接文件\n   \n\n\n\n字符设备\n\n\n\n块设备\n\n\n\n软链接文件\n\n\n\n\n# 2、ls\n\n> 列出目录内容\n\n常见选项\n-a all,查看目录下的所有文件，包括隐藏文件\n-l 长列表显示\n-h human，以人性化方式显示出来\n-d 只列出目录名，不列出其他内容\n-t 按修改时间排序\n-r 逆序排列\n-S 按文件的大小排序\n-i 显示文件的inode号（索引号）\n-R 递归列出目录中的内容\n-m 用逗号分隔显示内容\n示例：以不同的选项列出/root目录里的内容\n\n[root@localhost ~]# ls -a /root\n[root@localhost ~]# ls -l /root\n[root@localhost ~]# ls -lh /root\n[root@localhost ~]# ls -lt /root\n[root@localhost ~]# ls -S /root\n[root@localhost ~]# ls -R /root\n[root@localhost ~]# ls -d /root 查看/root目录本身的信息\n\n\n\n# 3、mkdir\n\n> 创建目录\n\n常见选项\n-p 级联创建\n[root@localhost ~]# mkdir /test/ 在根下创建test目录\n[root@localhost ~]# mkdir ./test/ 在当前目录下创建test目录\n[root@localhost ~]# mkdir ./test /test 创建多个目录\n[root@localhost ~]# mkdir -p /test/yunwei/redhat\n\n说明：\n1.如果创建的目录的上一级目录不存在，就需要加-p参数；-p在前面和后面都可以\n\n\n\n# 4、touch\n\n> 创建文件\n\n注意：Linux下文件的命名规则\n\n 1. 文件名严格区分大小写 file FILE\n\n 2. 文件名不能包含特殊符号，如(/或*等)\n\n 3. 文件名最多可达255个字符\n\n * 创建一个新的空文件（目标文件不存在）\n   \n   [root@localhost ~]# touch /tmp/file1 在/tmp目录下创建file1文件\n   [root@localhost ~]# touch file1 在当前目录下创建file1文件\n   思考：这2个file1文件是同一个文件吗？\n   答：不是同一个文件，因为路径不一样。\n   \n\n * 修改文件的时间（目标文件存在）\n   \n   * 查看文件的相关时间\n     \n     [root@localhost tmp]# stat file1 查看文件的状态信息\n     File: `file1'\n     Size: 0 Blocks: 0 IO Block: 4096 regular empty file\n     Device: fd00h/64768d Inode: 915714 Links: 1\n     Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n     Access: 2019-04-01 17:36:00.353096343 +0800\n     Modify: 2019-04-01 17:36:00.353096343 +0800\n     Change: 2019-04-01 17:36:00.353096343 +0800\n     Access:文件的查看访问时间\n     Modify:文件的修改时间\n     Change:文件的属性时间,文件的大小、权限等信息发生改变时，该时间会变化\n     \n   \n   * 修改文件的时间\n     \n     [root@localhost tmp]# touch file1\n     [root@localhost tmp]# stat file1 查看文件的状态信息\n     File: `file1'\n     Size: 0 Blocks: 0 IO Block: 4096 regular empty file\n     Device: fd00h/64768d Inode: 915714 Links: 1\n     Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n     Access: 2019-04-01 17:41:00.353096343 +0800\n     Modify: 2019-04-01 17:41:00.353096343 +0800\n     Change: 2019-04-01 17:41:00.353096343 +0800\n     \n     其他修改：\n     [root@localhost tmp]# touch -a file1 -t 201506161320 修改文件点访问时间\n     [root@localhost tmp]# touch -m file1 -t 201612121330 修改文件修改时间\n     -a：访问时间\n     -m：修改时间\n     -t：时间类型格式\n     \n     [root@localhost tmp]# touch -d 20110808 file1 修改文件日期\n     [root@localhost tmp]# touch -d 1215 file1 修改文件时间\n     [root@localhost tmp]# touch -d \"20101012 11:11:11\" file1 修改文件的日期和时间\n     \n     说明：大家只需要掌握touch -d的用法即可。\n     \n     注：RHEL6开始relatime，atime延迟修改，必须满足其中一个条件：\n     1. 自上次atime修改后，已达到86400秒；\n     2. 发生写操作时；\n     \n\n\n# 5、cat|more|less|head|tail\n\n * cat 命令：一般查看小文件，从第一行到最后一行列出来\n   \n   常见选项：\n   \n   -n：显示行号\n   \n   -A：显示控制字符，如换行符,制表符等（ linux $ 和 Windows ^M$ ）\n\n * tac 命令：一般查看小文件，从最后一行到第一行列出来\n\n * more和less 命令：一般查看大文件，q退出查看，可以搜索，建议less命令\n   \n   less 文件\n   \tenter键：一行一行查看\n   \t空格键：一页一页查看\n   \t退出：Q键\n   \t/:搜索\n   \tn:查找下一个\n   \tgg:回到开头\n   \n\n * head 命令：默认查看文件前10行， head -n 15或head -15 表示查看前15行\n\n * tail 命令：默认查看文件后10行， tail -n 15或tail -15 表示查看后15行； -f 表示动态查看\n\n * ldd 命令：一般用来查看二进制的命令文件\n\n[root@localhost tmp]# cat /etc/passwd 查看/etc/passwd文件内容\n[root@localhost tmp]# cat -n /etc/passwd 查看/etc/passwd文件内容，并打印行号\n[root@localhost tmp]# tac /etc/passwd 查看/etc/passwd文件内容\n[root@localhost tmp]# head -5 /etc/passwd 查看/etc/passwd文件的前5行内容\n[root@localhost tmp]# tail -5 /etc/passwd 查看/etc/passwd文件的后5行内容\n[root@localhost tmp]# more /var/log/messages\n[root@localhost tmp]# less /var/log/messages\n[root@localhost tmp]# ldd /bin/mkdir 查看mkdir命令文件（二进制）的内容\n\n\n\n# 6、cp\n\n> 拷贝文件\n\n注意：本地文件拷贝\n\n常用选项：\n-a 递归拷贝文件，包括目录及文件属性信息\n-r 拷贝目录\n-p 拷贝文件包含文件的属性信息\n-v 显示拷贝过程信息\n用法：\ncp 选项 需要拷贝的文件 拷贝到哪里去\n# cp /root/file1 /home 拷贝/root/下的file1文件到/home目录下\n# cp -r /home/itcast /root 拷贝/home/itcast目录到/root目录下\n# su - user01 切换到user01用户下\n$ touch file1\n# cp -p /home/user01/file1 /tmp/ 拷贝home/user01/file1文件（包含属性信息）到/tmp下\n# cp /root/file1 /tmp/test1 拷贝文件并且重命名\n\n\n问：-a和-p有什么区别？\n答：相同点都是需要拷贝文件的属性信息，比如拥有者（谁创建的等）；不同点在于，-p只能拷贝文件，-a既可以拷贝文件\n也可以拷贝目录。\n\n\n\n# 7、mv\n\n> 移动或重命名文件\n\n移动文件用法（不同路径下）：\n# mv 需要移动的文件 移动到新的路径下\n\n注意：文件的路径不一样\n重命名用法（相同路径下）：\n# mv 原来文件的名字 新文件的名字\n\n注意：老文件和新文件的路径一样\n# mv /root/file1 /tmp 移动/root/file1文件到/tmp目录下\n# mv /tmp/file1 /tmp/test1 将/tmp目录下的file1文件重命名成test1\n\n\n\n# 8、rm\n\n> 删除文件\n\n常用选项\n-r 递归删除，一般用于删除目录\n-f 直接删除，不提示\n[root@localhost tmp]# rm file1 删除当前目录下的file1文件，有提示\n[root@localhost tmp]# rm -r dir1 删除当前目录下的dir1目录，有提示\n[root@localhost tmp]# rm -f /root/file1 强制删除/root/file1文件，不提示，直接删\n",normalizedContent:"# 命令--4.文件操作管理\n\n重要：linux下，一切皆文件！！！\n\n说在前面：\n\n 1. 接下来所有的命令需要在一个载体上执行，这个载体就叫做终端。\n\n 2. 终端上所有命令都需要一个东西翻译解析一下，计算机才能理解并执行。\n\n 3. 这个翻译解析的东西叫shell解释器**，redhat和centos默认shell解释器叫**bash。\n\n 4. 既然需要bash帮忙翻译解释相关命令，那么你所敲的命令必须符合它的语法，否则报错给你看。\n\n命令 [可选项] 参数\n[root@localhost ~]# ls -l /root\n命令：整条shell命令的主体\n选项：会影响或微调命令的行为，通常以-, --\n参数：命令作用的对象\n\n\n\n# 1、file\n\n> 判断文件类型\n\n常见文件类型\n\n文件类型                描述\n字符设备（c）             所有==输入输出的设备==，如：键盘、鼠标、显示器、打印机等\n块设备（==b==）          所有==存储设备==称之为块设备文件，如：软盘、磁盘、光盘、u盘、磁带、光驱等\n软连接文件（==l==）        类似于windows下的快捷方式\n目录文件（==d==）         相当于windows下的文件夹\n普通文件(==f==或==-==)   类似windows下记事本、word等，可以使用==相关命令==进行编辑、==查看文件内容==\n管道文件(p)             简单理解为==程序或进程之间通讯==的一种方式\n套接字文件(s)            简单理解为==程序或进程之间通讯==的一种方式\n                    \n\n * 用 file 命令来判断文件类型\n   \n   [root@localhost ~]# file /root\n   /root: directory 目录\n   [root@localhost ~]# file /root/install.log\n   /root/install.log: ascii text 普通的文本文件\n   [root@localhost ~]# file /dev/sda\n   /dev/sda: block special 块设备文件，存放数据\n   [root@localhost ~]# file /dev/tty1\n   /dev/tty1: character special 字符设备\n   [root@localhost ~]# file /bin/sh\n   /bin/sh: symbolic link to bash 软连接文件\n   \n\n\n\n字符设备\n\n\n\n块设备\n\n\n\n软链接文件\n\n\n\n\n# 2、ls\n\n> 列出目录内容\n\n常见选项\n-a all,查看目录下的所有文件，包括隐藏文件\n-l 长列表显示\n-h human，以人性化方式显示出来\n-d 只列出目录名，不列出其他内容\n-t 按修改时间排序\n-r 逆序排列\n-s 按文件的大小排序\n-i 显示文件的inode号（索引号）\n-r 递归列出目录中的内容\n-m 用逗号分隔显示内容\n示例：以不同的选项列出/root目录里的内容\n\n[root@localhost ~]# ls -a /root\n[root@localhost ~]# ls -l /root\n[root@localhost ~]# ls -lh /root\n[root@localhost ~]# ls -lt /root\n[root@localhost ~]# ls -s /root\n[root@localhost ~]# ls -r /root\n[root@localhost ~]# ls -d /root 查看/root目录本身的信息\n\n\n\n# 3、mkdir\n\n> 创建目录\n\n常见选项\n-p 级联创建\n[root@localhost ~]# mkdir /test/ 在根下创建test目录\n[root@localhost ~]# mkdir ./test/ 在当前目录下创建test目录\n[root@localhost ~]# mkdir ./test /test 创建多个目录\n[root@localhost ~]# mkdir -p /test/yunwei/redhat\n\n说明：\n1.如果创建的目录的上一级目录不存在，就需要加-p参数；-p在前面和后面都可以\n\n\n\n# 4、touch\n\n> 创建文件\n\n注意：linux下文件的命名规则\n\n 1. 文件名严格区分大小写 file file\n\n 2. 文件名不能包含特殊符号，如(/或*等)\n\n 3. 文件名最多可达255个字符\n\n * 创建一个新的空文件（目标文件不存在）\n   \n   [root@localhost ~]# touch /tmp/file1 在/tmp目录下创建file1文件\n   [root@localhost ~]# touch file1 在当前目录下创建file1文件\n   思考：这2个file1文件是同一个文件吗？\n   答：不是同一个文件，因为路径不一样。\n   \n\n * 修改文件的时间（目标文件存在）\n   \n   * 查看文件的相关时间\n     \n     [root@localhost tmp]# stat file1 查看文件的状态信息\n     file: `file1'\n     size: 0 blocks: 0 io block: 4096 regular empty file\n     device: fd00h/64768d inode: 915714 links: 1\n     access: (0644/-rw-r--r--) uid: ( 0/ root) gid: ( 0/ root)\n     access: 2019-04-01 17:36:00.353096343 +0800\n     modify: 2019-04-01 17:36:00.353096343 +0800\n     change: 2019-04-01 17:36:00.353096343 +0800\n     access:文件的查看访问时间\n     modify:文件的修改时间\n     change:文件的属性时间,文件的大小、权限等信息发生改变时，该时间会变化\n     \n   \n   * 修改文件的时间\n     \n     [root@localhost tmp]# touch file1\n     [root@localhost tmp]# stat file1 查看文件的状态信息\n     file: `file1'\n     size: 0 blocks: 0 io block: 4096 regular empty file\n     device: fd00h/64768d inode: 915714 links: 1\n     access: (0644/-rw-r--r--) uid: ( 0/ root) gid: ( 0/ root)\n     access: 2019-04-01 17:41:00.353096343 +0800\n     modify: 2019-04-01 17:41:00.353096343 +0800\n     change: 2019-04-01 17:41:00.353096343 +0800\n     \n     其他修改：\n     [root@localhost tmp]# touch -a file1 -t 201506161320 修改文件点访问时间\n     [root@localhost tmp]# touch -m file1 -t 201612121330 修改文件修改时间\n     -a：访问时间\n     -m：修改时间\n     -t：时间类型格式\n     \n     [root@localhost tmp]# touch -d 20110808 file1 修改文件日期\n     [root@localhost tmp]# touch -d 1215 file1 修改文件时间\n     [root@localhost tmp]# touch -d \"20101012 11:11:11\" file1 修改文件的日期和时间\n     \n     说明：大家只需要掌握touch -d的用法即可。\n     \n     注：rhel6开始relatime，atime延迟修改，必须满足其中一个条件：\n     1. 自上次atime修改后，已达到86400秒；\n     2. 发生写操作时；\n     \n\n\n# 5、cat|more|less|head|tail\n\n * cat 命令：一般查看小文件，从第一行到最后一行列出来\n   \n   常见选项：\n   \n   -n：显示行号\n   \n   -a：显示控制字符，如换行符,制表符等（ linux $ 和 windows ^m$ ）\n\n * tac 命令：一般查看小文件，从最后一行到第一行列出来\n\n * more和less 命令：一般查看大文件，q退出查看，可以搜索，建议less命令\n   \n   less 文件\n   \tenter键：一行一行查看\n   \t空格键：一页一页查看\n   \t退出：q键\n   \t/:搜索\n   \tn:查找下一个\n   \tgg:回到开头\n   \n\n * head 命令：默认查看文件前10行， head -n 15或head -15 表示查看前15行\n\n * tail 命令：默认查看文件后10行， tail -n 15或tail -15 表示查看后15行； -f 表示动态查看\n\n * ldd 命令：一般用来查看二进制的命令文件\n\n[root@localhost tmp]# cat /etc/passwd 查看/etc/passwd文件内容\n[root@localhost tmp]# cat -n /etc/passwd 查看/etc/passwd文件内容，并打印行号\n[root@localhost tmp]# tac /etc/passwd 查看/etc/passwd文件内容\n[root@localhost tmp]# head -5 /etc/passwd 查看/etc/passwd文件的前5行内容\n[root@localhost tmp]# tail -5 /etc/passwd 查看/etc/passwd文件的后5行内容\n[root@localhost tmp]# more /var/log/messages\n[root@localhost tmp]# less /var/log/messages\n[root@localhost tmp]# ldd /bin/mkdir 查看mkdir命令文件（二进制）的内容\n\n\n\n# 6、cp\n\n> 拷贝文件\n\n注意：本地文件拷贝\n\n常用选项：\n-a 递归拷贝文件，包括目录及文件属性信息\n-r 拷贝目录\n-p 拷贝文件包含文件的属性信息\n-v 显示拷贝过程信息\n用法：\ncp 选项 需要拷贝的文件 拷贝到哪里去\n# cp /root/file1 /home 拷贝/root/下的file1文件到/home目录下\n# cp -r /home/itcast /root 拷贝/home/itcast目录到/root目录下\n# su - user01 切换到user01用户下\n$ touch file1\n# cp -p /home/user01/file1 /tmp/ 拷贝home/user01/file1文件（包含属性信息）到/tmp下\n# cp /root/file1 /tmp/test1 拷贝文件并且重命名\n\n\n问：-a和-p有什么区别？\n答：相同点都是需要拷贝文件的属性信息，比如拥有者（谁创建的等）；不同点在于，-p只能拷贝文件，-a既可以拷贝文件\n也可以拷贝目录。\n\n\n\n# 7、mv\n\n> 移动或重命名文件\n\n移动文件用法（不同路径下）：\n# mv 需要移动的文件 移动到新的路径下\n\n注意：文件的路径不一样\n重命名用法（相同路径下）：\n# mv 原来文件的名字 新文件的名字\n\n注意：老文件和新文件的路径一样\n# mv /root/file1 /tmp 移动/root/file1文件到/tmp目录下\n# mv /tmp/file1 /tmp/test1 将/tmp目录下的file1文件重命名成test1\n\n\n\n# 8、rm\n\n> 删除文件\n\n常用选项\n-r 递归删除，一般用于删除目录\n-f 直接删除，不提示\n[root@localhost tmp]# rm file1 删除当前目录下的file1文件，有提示\n[root@localhost tmp]# rm -r dir1 删除当前目录下的dir1目录，有提示\n[root@localhost tmp]# rm -f /root/file1 强制删除/root/file1文件，不提示，直接删\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"命令--16.vim编辑器",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--16.vim%E7%BC%96%E8%BE%91%E5%99%A8.html",relativePath:"zs-use/linux/基本使用/命令--16.vim编辑器.md",key:"v-078e449c",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--16.vim%E7%BC%96%E8%BE%91%E5%99%A8.html",headers:[{level:2,title:"vim工作模式",slug:"vim工作模式",normalizedTitle:"vim工作模式",charIndex:348},{level:2,title:"基本使用",slug:"基本使用",normalizedTitle:"基本使用",charIndex:672},{level:3,title:"移动光标",slug:"移动光标",normalizedTitle:"移动光标",charIndex:1470},{level:3,title:"删除或剪切",slug:"删除或剪切",normalizedTitle:"删除或剪切",charIndex:1583},{level:3,title:"复制",slug:"复制",normalizedTitle:"复制",charIndex:702},{level:3,title:"撤销",slug:"撤销",normalizedTitle:"撤销",charIndex:711},{level:3,title:"替换",slug:"替换",normalizedTitle:"替换",charIndex:2083},{level:3,title:"vim配置文件",slug:"vim配置文件",normalizedTitle:"vim配置文件",charIndex:2173},{level:3,title:"查找",slug:"查找",normalizedTitle:"查找",charIndex:2484},{level:3,title:"替换",slug:"替换-2",normalizedTitle:"替换",charIndex:2083},{level:2,title:"vim其他功能",slug:"vim其他功能",normalizedTitle:"vim其他功能",charIndex:3692},{level:3,title:"在vim中导入其他文件内容或命令结果",slug:"在vim中导入其他文件内容或命令结果",normalizedTitle:"在vim中导入其他文件内容或命令结果",charIndex:3704},{level:3,title:"导入命令结果",slug:"导入命令结果",normalizedTitle:"导入命令结果",charIndex:4075},{level:3,title:"设定快捷键",slug:"设定快捷键",normalizedTitle:"设定快捷键",charIndex:4150},{level:3,title:"字符替换",slug:"字符替换",normalizedTitle:"字符替换",charIndex:4350},{level:3,title:"多文件打开",slug:"多文件打开",normalizedTitle:"多文件打开",charIndex:4513},{level:3,title:"vim打开文件",slug:"vim打开文件",normalizedTitle:"vim打开文件",charIndex:4731},{level:3,title:"取消高亮",slug:"取消高亮",normalizedTitle:"取消高亮",charIndex:5004},{level:3,title:"多窗口编辑问题",slug:"多窗口编辑问题",normalizedTitle:"多窗口编辑问题",charIndex:5040},{level:2,title:"可视化模式",slug:"可视化模式",normalizedTitle:"可视化模式",charIndex:5465},{level:2,title:"高频命令",slug:"高频命令",normalizedTitle:"高频命令",charIndex:5626}],lastUpdated:"2024年1月8日星期一下午2点56分",lastUpdatedTimestamp:1704696967e3,headersStr:"vim工作模式 基本使用 移动光标 删除或剪切 复制 撤销 替换 vim配置文件 查找 替换 vim其他功能 在vim中导入其他文件内容或命令结果 导入命令结果 设定快捷键 字符替换 多文件打开 vim打开文件 取消高亮 多窗口编辑问题 可视化模式 高频命令",content:'# 命令--16.vim编辑器\n\n * Linux平台下的文本编辑器： emacs、nano、gedit、vi、vim\n\nvi（visual editor）编辑器通常被简称为vi，它是Linux和Unix系统上最基本的文本编辑器，类似于Windows 系统下的记事本。学会它后，我们将在Linux 的世界里游刃有余。\n\n * 为什么要学习vim？\n   \n   1. 所有的Unix like系统都会内置vi文本编辑器，其他的文本编辑器则不一定会存在\n   \n   2. 很多软件的编辑接口都会主动调用vi\n   \n   3. vim具有程序编辑的能力，可以主动以字体颜色辨别语法的正确性，方便程序设计\n   \n   4. 程序简单，编辑速度快\n   \n   5. vim是vi的升级版\n\n\n# vim工作模式\n\nvim工作在三种模式之下：\n\n\n\n命令模式：是主要使用快捷键的模式，是我们后面学习的重点。命令模式想要进入输入模式，可以使用以下的方式：\n\n\n\n输入模式：主要用于文本编辑，和记事本类似，输入数据就好。\n\n末行模式（编辑模式）：\n\n:w\t\t\t\t保存不退出\n\t:w 新文件名\t 文件另存为\n:q\t\t\t\t不保存退出\n:wq\t\t\t\t保存退出\n:!\t\t\t\t强制\n\t:q!\t\t\t强制不保存退出，用于修改文件之后，不保存数据退出。\n\t:wq!\t\t强制保存退出，当文件的所有者或者root用户，对文件没有写权限的时候，强制写入数据使用\n:x\t\t\t\t在文件没有修改的情况下，表示直接退出（等价于:q），在文件修改的情况下等价于（:wq）\n\n\n\n# 基本使用\n\n问：命令行可以干什么？\n\n答：可以进行一些基本的复制、删除、跳转、撤销、移动等操作\n\n命令       含义                        备注\nyy       复制光标所在行                   3yy表示复制3行\np(小写p)   光标所在行后面粘贴                 \nP(大写P)   光标所在行前面粘贴                 \ngg       光标快速跳到文件首行，并且定位到首字符       3gg表示快速跳到文件第3行行首字符\nG        光标快速跳到文件尾行，并且定位到首字符       \nhome     跳转到行首                     Shift+6 即 ^ 符号表示行首\nend      跳转到行尾                     Shitf+4 即 $ 符号表示行尾\ndd       删除光标所在行                   3dd表示删除3行（包括光标所在行\nd^       从光标位置删至行首，不包括光标位          \nd$       从光标位置删至行尾，包括光标位，与D作用相同    \ndG       删除光标所在行以及下面所有行            \ndgg      删除光标所在行以及上面所有行            \nx(小写)    删除光标所在字符后面一个字符，3x删除3个字符   类似于windows下的delete键\nX(大写)    删除光标所在字符前面一个字符，3X删除3个字符   类似windows下的backspace键\nu        撤销操作                      ctrl+r 取消撤销\n                                   \n\n\n# 移动光标\n\n1）上下左右移动光标\n\nh\tj\tk\tl\n←\t↓\t↑\t→\n\n\n2）把光标移动到文件头或尾\n\ngg\t文件头\nG\t文件尾\n\n\n3）移动到行首或行尾\n\n^\t行首\n$\t行尾\n\n\n4）移动到指定行\n\n:n\t到第n行\n\n\n\n# 删除或剪切\n\n1）删除字母\n\nx\t删除单个字母\nnx\t删除n个字母\n\n\nn是数字，如果打算从光标位置删除连续的10个字母，可以使用“10x”即可。\n删除字母并不符合使用习惯，我们更习惯在编辑模式中，用“Backspace”键删除字母。\n\n\n2）删除整行或剪切\n\ndd\t\t删除单行\nndd\t\t删除多行\n:n1,n2d\t删除指定范围的行\n\n删除整行或多行，这是比较常用的删除方法。\n这里的dd快捷键既是删除，也是剪切。\n删除内容放入了剪切板，如果不粘贴就是删除，如果粘贴就是剪切。粘贴方法如下：\n\np\t\t 粘贴到光标后\nP(大)\t粘贴到光标前\n\n\n\n:1,8d \t删掉文本的1到8行\n\n\n3）从光标所在行删除到文件尾\n\ndG\t从光标所在行删除到文件尾\n\n\n\n# 复制\n\nyy\t复制单行\nnyy\t复制多行\n\n复制之后的粘贴，依然可以使用p键或P（大）键\n\n\n\n# 撤销\n\nu\t\t\t撤销\nctrl + r\t反撤销\n\n“u”键能一直撤销到文件打开时的状态，类似Windows下“ctrl+z”键的作用。\n“ctrl+r”能一直反撤销到最后一次操作状态，类似Windows下“ctrl+y”键的作用。\n\n\n\n# 替换\n\nr\t替换光标所在处的字符\nR\t从光标所在处开始替换字符，按ESC结束\n\n“r”键替换单一字符，不用进入输入模式，实际使用时，比进入输入模式删除后再修改，要方便。\n\n\n\n# vim配置文件\n\n这次末行模式参数设置，多数需要在vim中才能生效。\n\n设置参数              含义\n:set nu           显示与取消行号。\n:set number\n:set nonu\n:syntax on        是否依据语法显示相关的颜色帮助。\nsyntax off        在Vim中修改相关的配置文件或Shell脚本文件时（如前面示例的脚本/etc/init.d/sshd），\n                  默认会显示相应的颜色，用来帮助排错。\n                  如果觉得颜色产生了干扰，则可以取消此设置\n:set hlsearch     设置是否将查找的字符串高亮显示。默认是set hlsearch高亮显示\n:set nohlsearch\n:set ruler        设置是否显示右下角的状态栏。默认是set ruler显示\n:set noruler\n:set showmode     设置是否在左下角显示如”--INSERT--“之类的状态栏。默认是set showmode显示\n:set noshowmode\n:set list         设置是否显示隐藏字符（Tab键用”^I“表示，回车键用”$“表示）。\n:set nolist       默认是nolist显示。如果使用set list显示隐藏字符，类似”cat -A 文件名“。\n\nvim支持更多的设置参数，可以通过“:set all”进行查看。\n\n大家会发现，这些设置参数都只是临时生效，一旦关闭文件再打开，又需要重新输入。如果想要永久生效，需要手工建立vim的配置文件“~/.vimrc”,把你需要的参数写入配置文件就永久生效了。\n\n补充：Windows下回车符在Linux中是用“^M$”符。这样会导致Windows下编辑的程序脚本，无法在Linux中执行。这时可以通过命令“dos2unix”，把Windows格式转为Linux格式，当然反过来“unix2dos”命令就是把Linux格式转为Windows格式。这两个命令默认没有安装，需要手工安装才能使用。\n\n全局配置 /etc/vimrc\n单用户配置 ~/.vimrc\n[root@xiaoshaozi ~]# vim ~/.vimrc\n set nu\n \n\n永久设置行号\necho "set number" >> /etc/vimrc\n\n\n\n# 查找\n\n/查找内容\t从光标行向上查找\n?查找内容\t从光标行向下搜索\nn\t\t\t上一个\nN\t\t\t下一个\n\n搜索摸索\n:/root n往下匹配;N往上匹配\n\n\n\n# 替换\n\n:1,10s/old/new/g\t替换1到10行的所有old为new\n:%s/old/new/g\t\t替换整个文件的old为new\n\n\n替换模式\n:%s/root/ROOT/ 全文搜索,替换每一行匹配到的第一个关键字\n:%s/root/ROOT/g 全文搜索,替换每一行所有匹配的关键字\n:%s/root/ROOT/gc 交互式替换\n:%s/\\/sbin\\/nologin/\\/bin\\/bash/ \\转义符\n:%s#/sbin/nologin#/bin/bash#g 更换分隔符\n:7s/shutdown/SHUTDOWN/g 只替换第7行的内容\n\n\n替换字符串，(注释#)前十行\n\n:1,10s/^/#/g\t注释1到10行\n:1,10s/^#//g\t取消注释\n\n\n替换字符串，（注释//）前十行\n\n:1,10s/^/\\/\\//g\t\t注释1到10行\n:1,10s/^\\/\\///g\t\t取消注释\n\n\n\n# vim其他功能\n\n\n# 在vim中导入其他文件内容或命令结果\n\n# 导入其他文件内容\n\n:r 文件名\t\t把文件内容导入光标位置\n\n:r /tmp/5.txt \t在光标所在行下面读取/tmp/5.txt文件内容\n:3r /tmp/5.txt \t在当前文本的第3行后读取/tmp/5.txt文件\n\n\n可以把其他文件的内容导入到光标所在位置\n\n# 保存内容到文件内\n\n地址定位\n:1,5 w /tmp/5.txt \t#保存前5行内容到/tmp/5.txt\n\n\n# 在vim中执行系统命令\n\n:!命令\t\t在vim中执行系统命令\n\n\n这里只是在vim中执行系统命令，但并不把系统命令的结果写入到文件中。主要用于在文件编辑中，查看系统信息，如时间。\n\n:n! command 用命令的执行结果替换第n行内容\n:nr !command 在第n行下面读取命令所执行的结果\n\n\n\n# 导入命令结果\n\n:r !命令\t\t在vim中执行系统命令，并吧命令结果导入光标所在行\n\n\n在vim中执行系统命令，并吧命令结果导入光标所在行。\n\n\n# 设定快捷键\n\n:map 快捷键 快捷键执行的命令\t\t自定义快捷键\n\n\nvim允许自定义快捷键，常用的自定义快捷键如下：\n\n:map ^P I#<ESC>\t\t按”ctrl+p“时，在行首加入注释\n:map ^B ^x\t\t\t按”ctrl+b“时，删除行首第一个字母（删除注释）\n\n\n注意：^P快捷键不能手工输入，需要执行ctrl+V+P来定义，或ctrl+V,然后ctrl+P。^B快捷键也一样\n\n\n# 字符替换\n\n:ab 源字符 替换为字符\t\t字符替换\n\n\n在vim编辑中，有时候需要频繁输入某一个长字符串（比如邮箱），这时使用字符串替换，能增加输入效率，例如：\n\n:ab mymail shenchao@163.com \t当碰到“mymail”时，转变为邮箱\n\n\n注意：“源字符”不应设置的太短，否则有可能影响输入。\n\n\n# 多文件打开\n\n在vim中可以同时打开两个文件，只要执行如下命令：\n\n[root@xiaoshaozi ~]# vim -o abc bcd\n[root@xiaoshaozi ~]# vim -O abc bcd\n\n#-o\t\t小写o会上下分屏打开两个文件\n#-O\t\t大写O会左右分屏打开两个文件\n\n切换窗口\n\t-o(小)\tctrl+w  上下键\n\t-O(大)\tctrl+w  左右键\n\n\n这样可以同时打开两个文件，方便操作。\n\n\n\n\n# vim打开文件\n\nvim 文件名\t\t\t \t# 默认会进入命令行模式\nvim +n 文件名\t\t\t# 打开指定的文件，并且将光标移动到指定行\nvim +/关键字 文件名\t  # 打开指定的文件，并且高亮显示关键词\n\n\n# rm -rf /tmp/*\n# cp /etc/passwd /tmp/\n[root@localhost ~]# vim /tmp/passwd\n[root@localhost ~]# vim +5 /tmp/passwd\n[root@localhost ~]# vim +/shutdown /tmp/passwd\n\n\n\n# 取消高亮\n\n取消高亮\n:noh （no highlight）\n\n\n\n# 多窗口编辑问题\n\n当两个终端同时打开或者意外结束文件时，会产生一个.swap文件 （交换文件）\n\n# 举例说明：\n\n你在两个终端同时打开/tmp/passwd文件，会产生/tmp/.passwd.swp。这时，有六个按钮可以使用：\n\nO(pen for Read-Only):\t打开成只读文件。\nE(dit):\t\t 用正常方式打开要编辑的文件，并不会载入暂存文件的内容。这很容易出现两个用户相互改变对方的文件的问题。\nR(ecover)：\t加载暂存文件的内容。\nD(elete)：\t如果你确定这个暂存文件是没有用的，则可以删除。\nQ(uit)：\t\t不进行任何操作，回到命令行。\nA(bort)：\t忽略这个编辑行为，和Q类似。\n\n需要注意的是：\n这个暂存文件不会因为你结束vim后自动删除，必须要手动删除。否则每次打开对应的文件时都会出现这样的提示。\n\n\n使用ctrl + z接收当前终端vim编辑产生零时文件\n\n使用fg命令重新进入继续编辑\n\n\n# 可视化模式\n\n按键：ctrl + v（可视块）或V（可视行），然后按下↑ ↓ ← →方向键来选中需要\n\n复制的区块，按下y 键进行复制（不要按下yy），最后按下p 键粘贴\n\n退出可视模式按下Esc\n\n# 快速注释\nctrl + v\n选中区块\nI\n输入文字\nesc\n\n# 快速删除\nctrl + v\n选中区块\nd\n\n\n\n# 高频命令\n\n命令行模式：\n# 复制一行\nyyp\n# 删除行\ndd\n# 撤回\nu\n# 取消撤回\nctrl + r\n# 文件末尾\nG\n# 文件首位\ngg\n# 行首\n^\n# 行末\n$\n\n\n\n\n# 挂起shell\nCtrl + z  \nfg重新进入vim\n\n\n# 快速注释\nctrl + v\n选中区块\nI\n输入文字\nesc\n\n# 快速删除\nctrl + v\n选中区块\nd\n\n\n# 选择复制\nv\n选中区\ny\np\n\n\n底行模式：\n临时设置行号\n:set number 或 :set nu\n\n\n搜索摸索\n:/root n往下匹配;N往上匹配\n:%s/root/ROOT/gc 交互式替换\n取消高亮\n:noh （no highlight）\n\n\n',normalizedContent:'# 命令--16.vim编辑器\n\n * linux平台下的文本编辑器： emacs、nano、gedit、vi、vim\n\nvi（visual editor）编辑器通常被简称为vi，它是linux和unix系统上最基本的文本编辑器，类似于windows 系统下的记事本。学会它后，我们将在linux 的世界里游刃有余。\n\n * 为什么要学习vim？\n   \n   1. 所有的unix like系统都会内置vi文本编辑器，其他的文本编辑器则不一定会存在\n   \n   2. 很多软件的编辑接口都会主动调用vi\n   \n   3. vim具有程序编辑的能力，可以主动以字体颜色辨别语法的正确性，方便程序设计\n   \n   4. 程序简单，编辑速度快\n   \n   5. vim是vi的升级版\n\n\n# vim工作模式\n\nvim工作在三种模式之下：\n\n\n\n命令模式：是主要使用快捷键的模式，是我们后面学习的重点。命令模式想要进入输入模式，可以使用以下的方式：\n\n\n\n输入模式：主要用于文本编辑，和记事本类似，输入数据就好。\n\n末行模式（编辑模式）：\n\n:w\t\t\t\t保存不退出\n\t:w 新文件名\t 文件另存为\n:q\t\t\t\t不保存退出\n:wq\t\t\t\t保存退出\n:!\t\t\t\t强制\n\t:q!\t\t\t强制不保存退出，用于修改文件之后，不保存数据退出。\n\t:wq!\t\t强制保存退出，当文件的所有者或者root用户，对文件没有写权限的时候，强制写入数据使用\n:x\t\t\t\t在文件没有修改的情况下，表示直接退出（等价于:q），在文件修改的情况下等价于（:wq）\n\n\n\n# 基本使用\n\n问：命令行可以干什么？\n\n答：可以进行一些基本的复制、删除、跳转、撤销、移动等操作\n\n命令       含义                        备注\nyy       复制光标所在行                   3yy表示复制3行\np(小写p)   光标所在行后面粘贴                 \np(大写p)   光标所在行前面粘贴                 \ngg       光标快速跳到文件首行，并且定位到首字符       3gg表示快速跳到文件第3行行首字符\ng        光标快速跳到文件尾行，并且定位到首字符       \nhome     跳转到行首                     shift+6 即 ^ 符号表示行首\nend      跳转到行尾                     shitf+4 即 $ 符号表示行尾\ndd       删除光标所在行                   3dd表示删除3行（包括光标所在行\nd^       从光标位置删至行首，不包括光标位          \nd$       从光标位置删至行尾，包括光标位，与d作用相同    \ndg       删除光标所在行以及下面所有行            \ndgg      删除光标所在行以及上面所有行            \nx(小写)    删除光标所在字符后面一个字符，3x删除3个字符   类似于windows下的delete键\nx(大写)    删除光标所在字符前面一个字符，3x删除3个字符   类似windows下的backspace键\nu        撤销操作                      ctrl+r 取消撤销\n                                   \n\n\n# 移动光标\n\n1）上下左右移动光标\n\nh\tj\tk\tl\n←\t↓\t↑\t→\n\n\n2）把光标移动到文件头或尾\n\ngg\t文件头\ng\t文件尾\n\n\n3）移动到行首或行尾\n\n^\t行首\n$\t行尾\n\n\n4）移动到指定行\n\n:n\t到第n行\n\n\n\n# 删除或剪切\n\n1）删除字母\n\nx\t删除单个字母\nnx\t删除n个字母\n\n\nn是数字，如果打算从光标位置删除连续的10个字母，可以使用“10x”即可。\n删除字母并不符合使用习惯，我们更习惯在编辑模式中，用“backspace”键删除字母。\n\n\n2）删除整行或剪切\n\ndd\t\t删除单行\nndd\t\t删除多行\n:n1,n2d\t删除指定范围的行\n\n删除整行或多行，这是比较常用的删除方法。\n这里的dd快捷键既是删除，也是剪切。\n删除内容放入了剪切板，如果不粘贴就是删除，如果粘贴就是剪切。粘贴方法如下：\n\np\t\t 粘贴到光标后\np(大)\t粘贴到光标前\n\n\n\n:1,8d \t删掉文本的1到8行\n\n\n3）从光标所在行删除到文件尾\n\ndg\t从光标所在行删除到文件尾\n\n\n\n# 复制\n\nyy\t复制单行\nnyy\t复制多行\n\n复制之后的粘贴，依然可以使用p键或p（大）键\n\n\n\n# 撤销\n\nu\t\t\t撤销\nctrl + r\t反撤销\n\n“u”键能一直撤销到文件打开时的状态，类似windows下“ctrl+z”键的作用。\n“ctrl+r”能一直反撤销到最后一次操作状态，类似windows下“ctrl+y”键的作用。\n\n\n\n# 替换\n\nr\t替换光标所在处的字符\nr\t从光标所在处开始替换字符，按esc结束\n\n“r”键替换单一字符，不用进入输入模式，实际使用时，比进入输入模式删除后再修改，要方便。\n\n\n\n# vim配置文件\n\n这次末行模式参数设置，多数需要在vim中才能生效。\n\n设置参数              含义\n:set nu           显示与取消行号。\n:set number\n:set nonu\n:syntax on        是否依据语法显示相关的颜色帮助。\nsyntax off        在vim中修改相关的配置文件或shell脚本文件时（如前面示例的脚本/etc/init.d/sshd），\n                  默认会显示相应的颜色，用来帮助排错。\n                  如果觉得颜色产生了干扰，则可以取消此设置\n:set hlsearch     设置是否将查找的字符串高亮显示。默认是set hlsearch高亮显示\n:set nohlsearch\n:set ruler        设置是否显示右下角的状态栏。默认是set ruler显示\n:set noruler\n:set showmode     设置是否在左下角显示如”--insert--“之类的状态栏。默认是set showmode显示\n:set noshowmode\n:set list         设置是否显示隐藏字符（tab键用”^i“表示，回车键用”$“表示）。\n:set nolist       默认是nolist显示。如果使用set list显示隐藏字符，类似”cat -a 文件名“。\n\nvim支持更多的设置参数，可以通过“:set all”进行查看。\n\n大家会发现，这些设置参数都只是临时生效，一旦关闭文件再打开，又需要重新输入。如果想要永久生效，需要手工建立vim的配置文件“~/.vimrc”,把你需要的参数写入配置文件就永久生效了。\n\n补充：windows下回车符在linux中是用“^m$”符。这样会导致windows下编辑的程序脚本，无法在linux中执行。这时可以通过命令“dos2unix”，把windows格式转为linux格式，当然反过来“unix2dos”命令就是把linux格式转为windows格式。这两个命令默认没有安装，需要手工安装才能使用。\n\n全局配置 /etc/vimrc\n单用户配置 ~/.vimrc\n[root@xiaoshaozi ~]# vim ~/.vimrc\n set nu\n \n\n永久设置行号\necho "set number" >> /etc/vimrc\n\n\n\n# 查找\n\n/查找内容\t从光标行向上查找\n?查找内容\t从光标行向下搜索\nn\t\t\t上一个\nn\t\t\t下一个\n\n搜索摸索\n:/root n往下匹配;n往上匹配\n\n\n\n# 替换\n\n:1,10s/old/new/g\t替换1到10行的所有old为new\n:%s/old/new/g\t\t替换整个文件的old为new\n\n\n替换模式\n:%s/root/root/ 全文搜索,替换每一行匹配到的第一个关键字\n:%s/root/root/g 全文搜索,替换每一行所有匹配的关键字\n:%s/root/root/gc 交互式替换\n:%s/\\/sbin\\/nologin/\\/bin\\/bash/ \\转义符\n:%s#/sbin/nologin#/bin/bash#g 更换分隔符\n:7s/shutdown/shutdown/g 只替换第7行的内容\n\n\n替换字符串，(注释#)前十行\n\n:1,10s/^/#/g\t注释1到10行\n:1,10s/^#//g\t取消注释\n\n\n替换字符串，（注释//）前十行\n\n:1,10s/^/\\/\\//g\t\t注释1到10行\n:1,10s/^\\/\\///g\t\t取消注释\n\n\n\n# vim其他功能\n\n\n# 在vim中导入其他文件内容或命令结果\n\n# 导入其他文件内容\n\n:r 文件名\t\t把文件内容导入光标位置\n\n:r /tmp/5.txt \t在光标所在行下面读取/tmp/5.txt文件内容\n:3r /tmp/5.txt \t在当前文本的第3行后读取/tmp/5.txt文件\n\n\n可以把其他文件的内容导入到光标所在位置\n\n# 保存内容到文件内\n\n地址定位\n:1,5 w /tmp/5.txt \t#保存前5行内容到/tmp/5.txt\n\n\n# 在vim中执行系统命令\n\n:!命令\t\t在vim中执行系统命令\n\n\n这里只是在vim中执行系统命令，但并不把系统命令的结果写入到文件中。主要用于在文件编辑中，查看系统信息，如时间。\n\n:n! command 用命令的执行结果替换第n行内容\n:nr !command 在第n行下面读取命令所执行的结果\n\n\n\n# 导入命令结果\n\n:r !命令\t\t在vim中执行系统命令，并吧命令结果导入光标所在行\n\n\n在vim中执行系统命令，并吧命令结果导入光标所在行。\n\n\n# 设定快捷键\n\n:map 快捷键 快捷键执行的命令\t\t自定义快捷键\n\n\nvim允许自定义快捷键，常用的自定义快捷键如下：\n\n:map ^p i#<esc>\t\t按”ctrl+p“时，在行首加入注释\n:map ^b ^x\t\t\t按”ctrl+b“时，删除行首第一个字母（删除注释）\n\n\n注意：^p快捷键不能手工输入，需要执行ctrl+v+p来定义，或ctrl+v,然后ctrl+p。^b快捷键也一样\n\n\n# 字符替换\n\n:ab 源字符 替换为字符\t\t字符替换\n\n\n在vim编辑中，有时候需要频繁输入某一个长字符串（比如邮箱），这时使用字符串替换，能增加输入效率，例如：\n\n:ab mymail shenchao@163.com \t当碰到“mymail”时，转变为邮箱\n\n\n注意：“源字符”不应设置的太短，否则有可能影响输入。\n\n\n# 多文件打开\n\n在vim中可以同时打开两个文件，只要执行如下命令：\n\n[root@xiaoshaozi ~]# vim -o abc bcd\n[root@xiaoshaozi ~]# vim -o abc bcd\n\n#-o\t\t小写o会上下分屏打开两个文件\n#-o\t\t大写o会左右分屏打开两个文件\n\n切换窗口\n\t-o(小)\tctrl+w  上下键\n\t-o(大)\tctrl+w  左右键\n\n\n这样可以同时打开两个文件，方便操作。\n\n\n\n\n# vim打开文件\n\nvim 文件名\t\t\t \t# 默认会进入命令行模式\nvim +n 文件名\t\t\t# 打开指定的文件，并且将光标移动到指定行\nvim +/关键字 文件名\t  # 打开指定的文件，并且高亮显示关键词\n\n\n# rm -rf /tmp/*\n# cp /etc/passwd /tmp/\n[root@localhost ~]# vim /tmp/passwd\n[root@localhost ~]# vim +5 /tmp/passwd\n[root@localhost ~]# vim +/shutdown /tmp/passwd\n\n\n\n# 取消高亮\n\n取消高亮\n:noh （no highlight）\n\n\n\n# 多窗口编辑问题\n\n当两个终端同时打开或者意外结束文件时，会产生一个.swap文件 （交换文件）\n\n# 举例说明：\n\n你在两个终端同时打开/tmp/passwd文件，会产生/tmp/.passwd.swp。这时，有六个按钮可以使用：\n\no(pen for read-only):\t打开成只读文件。\ne(dit):\t\t 用正常方式打开要编辑的文件，并不会载入暂存文件的内容。这很容易出现两个用户相互改变对方的文件的问题。\nr(ecover)：\t加载暂存文件的内容。\nd(elete)：\t如果你确定这个暂存文件是没有用的，则可以删除。\nq(uit)：\t\t不进行任何操作，回到命令行。\na(bort)：\t忽略这个编辑行为，和q类似。\n\n需要注意的是：\n这个暂存文件不会因为你结束vim后自动删除，必须要手动删除。否则每次打开对应的文件时都会出现这样的提示。\n\n\n使用ctrl + z接收当前终端vim编辑产生零时文件\n\n使用fg命令重新进入继续编辑\n\n\n# 可视化模式\n\n按键：ctrl + v（可视块）或v（可视行），然后按下↑ ↓ ← →方向键来选中需要\n\n复制的区块，按下y 键进行复制（不要按下yy），最后按下p 键粘贴\n\n退出可视模式按下esc\n\n# 快速注释\nctrl + v\n选中区块\ni\n输入文字\nesc\n\n# 快速删除\nctrl + v\n选中区块\nd\n\n\n\n# 高频命令\n\n命令行模式：\n# 复制一行\nyyp\n# 删除行\ndd\n# 撤回\nu\n# 取消撤回\nctrl + r\n# 文件末尾\ng\n# 文件首位\ngg\n# 行首\n^\n# 行末\n$\n\n\n\n\n# 挂起shell\nctrl + z  \nfg重新进入vim\n\n\n# 快速注释\nctrl + v\n选中区块\ni\n输入文字\nesc\n\n# 快速删除\nctrl + v\n选中区块\nd\n\n\n# 选择复制\nv\n选中区\ny\np\n\n\n底行模式：\n临时设置行号\n:set number 或 :set nu\n\n\n搜索摸索\n:/root n往下匹配;n往上匹配\n:%s/root/root/gc 交互式替换\n取消高亮\n:noh （no highlight）\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704696967e3},{title:"命令--5.查找命令",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--5.%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4.html",relativePath:"zs-use/linux/基本使用/命令--5.查找命令.md",key:"v-0d896b54",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--5.%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4.html",headers:[{level:2,title:"whereis命令",slug:"whereis命令",normalizedTitle:"whereis命令",charIndex:17},{level:2,title:"which命令",slug:"which命令",normalizedTitle:"which命令",charIndex:388},{level:2,title:"locate命令",slug:"locate命令",normalizedTitle:"locate命令",charIndex:653},{level:3,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:666},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:1102},{level:2,title:"find命令",slug:"find命令",normalizedTitle:"find命令",charIndex:1840},{level:3,title:"按照文件名搜索",slug:"按照文件名搜索",normalizedTitle:"按照文件名搜索",charIndex:684},{level:3,title:"按照文件大小搜索",slug:"按照文件大小搜索",normalizedTitle:"按照文件大小搜索",charIndex:2484},{level:3,title:"按照修改时间搜索",slug:"按照修改时间搜索",normalizedTitle:"按照修改时间搜索",charIndex:3861},{level:3,title:"按照权限搜索",slug:"按照权限搜索",normalizedTitle:"按照权限搜索",charIndex:4407},{level:3,title:"按照所有者和所属组搜索",slug:"按照所有者和所属组搜索",normalizedTitle:"按照所有者和所属组搜索",charIndex:4584},{level:3,title:"按照文件类型搜索",slug:"按照文件类型搜索",normalizedTitle:"按照文件类型搜索",charIndex:5087},{level:3,title:"逻辑运算符",slug:"逻辑运算符",normalizedTitle:"逻辑运算符",charIndex:5399},{level:3,title:"其他选项",slug:"其他选项",normalizedTitle:"其他选项",charIndex:6085}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"whereis命令 which命令 locate命令 基本用法 配置文件 find命令 按照文件名搜索 按照文件大小搜索 按照修改时间搜索 按照权限搜索 按照所有者和所属组搜索 按照文件类型搜索 逻辑运算符 其他选项",content:'# 命令--5.查找命令\n\n\n# whereis命令\n\nwhich 命令 ：找出命令的绝对路径\n\nwhereis 命令 ：找出命令的路径以及文档手册信息\n\nwhereis是搜索系统命令的命令（像绕口令一样），也就是说，whereis命令不能搜索普通文件，而只能搜索系统命令。whereis命令的基本信息如下。\n\n * 命令名称：whereis。\n * 功能描述：查找二进制命令、源文件和帮助文档的命令。\n\n[root@heima ~]# whereis mkdir\nmkdir: /usr/bin/mkdir /usr/share/man/man1/mkdir.1.gz /usr/share/man/man1p/mkdir.1p.gz\n/usr/share/man/man2/mkdir.2.gz /usr/share/man/man3p/mkdir.3p.gz\n\n\n\n# which命令\n\nwhich 命令 ：找出命令的绝对路径\n\nwhereis 命令 ：找出命令的路径以及文档手册信息\n\nwhich也是搜索系统命令的命令。\n\n * 命令名称：which。\n * 功能描述：列出命令的所在路径。\n\n和whereis命令的区别在于：\n\n * whereis命令可以在查找到二进制命令的同时，查找到帮助文档的位置；\n * 而which命令在查找到二进制命令的同时，如果这个命令有别名，则还可以找到别名命令。\n\n[root@heima ~]# which mkdir\n/usr/bin/mkdir\n\n\n\n# locate命令\n\n\n# 基本用法\n\nlocate命令才是可以按照文件名搜索普通文件的命令。\n\n * 优点：按照数据库搜索，搜索速度快，消耗资源小。数据库位置/var/lib/mlocate/mlocate.db， 可以使用updatedb命令强制更新数据库。\n * 缺点：只能按照文件名来搜索文件，而不能执行更复杂的搜索，比如按照权限、大小、修改时间等搜索文件。\n\nlocate命令的基本信息如下。\n\n * 所在路径：/usr/bin/locate。\n * 执行权限：所有用户。\n * 功能描述：按照文件名搜索文件。\n\n[root@xiaoshaozi ~]# locate hello.sh \nlocate: 无法执行 stat () `/var/lib/mlocate/mlocate.db\': 没有那个文件或目录\n\n[root@xiaoshaozi ~]# updatedb\n[root@xiaoshaozi ~]# locate hello.sh\n/root/hello.sh\n\n\n\n# 配置文件\n\n> /etc/updatedb.conf\n\n[jysp@jysp media]$ vim /etc/updatedb.conf\n# 开启搜索限制，也就是让这个配置文件生效\nPRUNE_BIND_MOUNTS = "yes"\n# 在locate执行搜索时，禁止搜索这些文件系统类型\nPRUNEFS = "9p afs anon_inodefs auto autofs bdev binfmt_misc cgroup cifs coda configfs cpuset debugfs devpts ecryptfs exofs fuse fuse.sshfs fusectl gfs gfs2 gpfs hugetlbfs inotifyfs iso9660 jffs2 lustre mqueue ncpfs nfs nfs4 nfsd pipefs proc ramfs rootfs rpc_pipefs securityfs selinuxfs sfs sockfs sysfs tmpfs ubifs udf usbfs fuse.glusterfs ceph fuse.ceph"\n# 在locate执行搜索时，禁止搜索带有这些扩展名的文件\nPRUNENAMES = ".git .hg .svn"\n# 在locate执行搜索时，禁止搜索这些系统目录\nPRUNEPATHS = "/afs /media /mnt /net /sfs /tmp /udev /var/cache/ccache /var/lib/yum/yumdb /var/spool/cups /var/spool/squid /var/tmp /var/lib/ceph"\n\n\n\n# find命令\n\n> 在目录中搜索文件。\n> \n> find 命令：精确查找，磁盘搜索，IO读写，cpu开销大\n\n根据需求查找出来直接输出到屏幕\n\nfind 查找路径 选项 关键字\n\n常见选项     含义             备注\n-name    按照文件名查找文件      \n-iname   按照文件名忽略大小写查找   \n-size    按照文件大小来查找      +1M 大于1M -1M 小于1M 1M 等于1M\n-type    按照文件类型来查找      \n-mtime   按文件修改时间来查找文件   -n指n天以内，+n指n天以前\n-atime   按文件访问时间来查      \n-ctime   按文件创建时间来查找文件   \n-perm    按照文件权限来查找文件    \n                        \n\n\n# 按照文件名搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n\t-name：\t按照文件名搜索\n\t-iname：\t按照文件名搜索，不区分文件名大小写\n\t-inum：\t按照inode号搜索\n\n\n> 文件名搜索示例\n\n[root@heima ~]# find /test -name "file1"\n[root@heima ~]# find /test -iname "file1"\n[root@heima ~]# find /etc -name "*.conf"\n\n\n\n# 按照文件大小搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n\n选项：\n\t-size [+|-]大小：按照指定大小搜索文件\n\n注意：-size -1M 当文件中没有小于1M的文件的时候，会变成查找-size -1k\n\n\n这里的“+”的意思是搜索比指定大小还要大的文件，“-”的意思是搜索比指定大小还要小的文件。\n\nfind命令的单位：\n\n[root@localhost ~]# man find\n\n-size n[cwbkMG]\n              File uses n units of space.  The following suffixes can be used:\n\t\t\t  #这是默认单位，如果单位为b或不写单位，则按照512Byte搜索\n              `b\'    for 512-byte blocks (this is the default if no suffix is used)\n\t\t\t  #搜索单位是c，按照字节搜索\n              `c\'    for bytes\n\t\t\t  #搜索单位是w，按照双字节（中文）搜索\n              `w\'    for two-byte words\n\t\t\t  #按照KB单位搜索，必须是小写的k\n              `k\'    for Kilobytes (units of 1024 bytes)\n\t\t\t  #按照MB单位搜索，必须是大写的M\n              `M\'    for Megabytes (units of 1048576 bytes)\n\t\t\t  #按照GB单位搜索，必须是大写的G\n              `G\'    for Gigabytes (units of 1073741824 bytes)\n\n              The  size  does  not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k\' and\n              `%b\' format specifiers of -printf handle sparse files differently.  The `b\' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks,  which\n              is different to the behaviour of -ls.\n\n\n\n> 文件大小示例\n\n[root@heima test]# find . -type f -size +1M\n[root@heima test]# find . -type f -size -1M\n[root@heima test]# find . -type f -size -1024k\n[root@heima test]# find . -type f -size 9M\n\n\n\n# 按照修改时间搜索\n\nLinux中的文件有访问时间（atime）、数据修改时间（mtime）、状态修改时间（ctime）这三个时间，我们也可以按照时间来搜索文件。\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n-atime [+|-]时间：按照文件访问时间搜索\n-mtime [+|-]时间：按照文件数据修改时间搜索\n-ctime [+|-]时间：按照文件状态修改时间搜索\n\n\n这三个时间的区别我们在stat命令中已经解释过了，这里用mtime数据修改时间来举例，重点说说“[+-]”时间的含义。\n\n * -5：代表5天内修改的文件。\n * 5：代表前5～6天那一天修改的文件。\n * +5：代表6天前修改的文件。\n\n我们画一个时间轴，来解释一下，如图\n\n\n\n[root@heima test]# find ./ -type f -mtime +2\n[root@heima test]# find ./ -type f -mtime -2\n[root@heima test]# find ./ -type f -mtime 2\n注意：这里的天数需要满24小时为一天的\nfind ./ -type f -daystart -mtime +2\n\n\n\n# 按照权限搜索\n\n命令格式。\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n    -perm  权限模式：查找文件权限刚好等于“权限模式”的文件\n    -perm -权限模式：查找文件权限全部包含“权限模式”的文件\n    -perm +权限模式：查找文件权限包含“权限模式”的任意一个权限的文件\n\n\n\n# 按照所有者和所属组搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n-uid 用户ID：\t按照用户ID查找所有者是指定ID的文件\n-gid 组ID：\t 按照用户组ID查找所属组是指定ID的文件\n-user 用户名：\t按照用户名查找所有者是指定用户的文件\n-group 组名：\t按照组名查找所属组是指定用户组的文件\n-nouser：\t 查找没有所有者的文件\n\n\n按照所有者和所属组搜索时，“-nouser”选项比较常用，主要用于查找垃圾文件。\n\n只有一种情况例外，那就是外来文件。比如光盘和U盘中的文件如果是由Windows复制的，在Linux中查看就是没有所有者的文件；再比如手工源码包安装的文件，也有可能没有所有者\n\n[root@heima test]# find . -user heima -group heima -type f\n一般省略 -a: find . -user heima -a -group heima -a -type f 代表同时满足\n[root@heima test]# find . -type f -perm 644\n\n\n\n# 按照文件类型搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n\t-type d：查找目录\n\t-type f：查找普通文件\n\t-type l：查找软链接文件\n\n\n> 文件类型示例\n\n[root@heima ~]# find /usr/bin/ -type l\t\t查找连接\n[root@heima ~]# find /dev -type b\t\t\t查找块设备\n[root@heima ~]# cd /test\n[root@heima test]# find . -type d\t\t\t查找目录\n[root@heima test]# find . -type f\t\t\t查找文件\n\n\n\n# 逻辑运算符\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n\t-a：\t\tand逻辑与\n\t-o：\t\tor逻辑或\n\t-not：\tnot逻辑非\n\n\n1）-a：and逻辑与\n\nfind命令也支持逻辑运算符选项，其中-a代表逻辑与运算，也就是-a的两个条件都成立，find搜索的结果才成立。举个例子：\n\n#在当前目录下搜索大于2KB，并且文件类型是普通文件的文件\n[root@xiaoshaozi ~]# find . -size +2k -a -type f\n\n[root@heima test]# find . -user heima -group heima -type f\n一般省略 -a: find . -user heima -a -group heima -a -type f 代表同时满足\n[root@heima test]# find . -type f -perm 644\n\n\n2）-o：or逻辑或\n\n-o选项代表逻辑或运算，也就是-o的两个条件只要其中一个成立，find命令就可以找到结果。例如：\n\n#在当前目录下搜索文件名要么是cangls的文件，要么是bols的文件\n[root@xiaoshaozi ~]# find . -name cangels -o -name bols\n\n\n3）-not：not逻辑非\n\n-not是逻辑非，也就是取反的意思。举个例子：\n\n#在当前目录下搜索文件名不是cangls的文件\n[root@xiaoshaozi ~]# find . -not -name cangls\n\n\n\n# 其他选项\n\n根据需求查找出来后执行某个动作(命令)\n\nfind 路径 选项 关键字 动作\n\n常见动作      说明\n-exec     对查找到的文件直接执行该参数后的shell命令\n-ok       对查找到的文件询问式执行该参数后的shell命令\n-delete   删除查找到的文件\n-ls       列出查找到的文件,详细信息\n-print    打印出查找到的文件（默认选项）\n          \n\n1）-exec选项\n\n这里我们主要讲解两个选项“-exec”和“-ok”，这两个选项的基本作用非常相似。我们先来看看“-exec”选项的格式。\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容 -exec 命令2 {} \\;\n\n\n其次，这个选项的作用其实是把find命令的结果交给由“-exec”调用的命令2来处理。“{}”就代表find命令的查找结果。\n\n2）-ok选项\n\n“-ok”选项和“-exec”选项的作用基本一致，区别在于：“-exec”的命令2会直接处理，而不询问；“-ok”的命令2在处理前会先询问用户是否这样处理，在得到确认命令后，才会执行。\n\n举例说明：\n\n-delete\n\n\n\n-exec | -ok\n\n语法结构：\n注意：\n1. -exec或者-ok后面写完命令必须以空格反斜杠\\;结尾（ \\;）\n2. {}表示find命令所找出来的内容\n\nfind /test/ -type f -ok cp {} /tmp \\;\n\n\n',normalizedContent:'# 命令--5.查找命令\n\n\n# whereis命令\n\nwhich 命令 ：找出命令的绝对路径\n\nwhereis 命令 ：找出命令的路径以及文档手册信息\n\nwhereis是搜索系统命令的命令（像绕口令一样），也就是说，whereis命令不能搜索普通文件，而只能搜索系统命令。whereis命令的基本信息如下。\n\n * 命令名称：whereis。\n * 功能描述：查找二进制命令、源文件和帮助文档的命令。\n\n[root@heima ~]# whereis mkdir\nmkdir: /usr/bin/mkdir /usr/share/man/man1/mkdir.1.gz /usr/share/man/man1p/mkdir.1p.gz\n/usr/share/man/man2/mkdir.2.gz /usr/share/man/man3p/mkdir.3p.gz\n\n\n\n# which命令\n\nwhich 命令 ：找出命令的绝对路径\n\nwhereis 命令 ：找出命令的路径以及文档手册信息\n\nwhich也是搜索系统命令的命令。\n\n * 命令名称：which。\n * 功能描述：列出命令的所在路径。\n\n和whereis命令的区别在于：\n\n * whereis命令可以在查找到二进制命令的同时，查找到帮助文档的位置；\n * 而which命令在查找到二进制命令的同时，如果这个命令有别名，则还可以找到别名命令。\n\n[root@heima ~]# which mkdir\n/usr/bin/mkdir\n\n\n\n# locate命令\n\n\n# 基本用法\n\nlocate命令才是可以按照文件名搜索普通文件的命令。\n\n * 优点：按照数据库搜索，搜索速度快，消耗资源小。数据库位置/var/lib/mlocate/mlocate.db， 可以使用updatedb命令强制更新数据库。\n * 缺点：只能按照文件名来搜索文件，而不能执行更复杂的搜索，比如按照权限、大小、修改时间等搜索文件。\n\nlocate命令的基本信息如下。\n\n * 所在路径：/usr/bin/locate。\n * 执行权限：所有用户。\n * 功能描述：按照文件名搜索文件。\n\n[root@xiaoshaozi ~]# locate hello.sh \nlocate: 无法执行 stat () `/var/lib/mlocate/mlocate.db\': 没有那个文件或目录\n\n[root@xiaoshaozi ~]# updatedb\n[root@xiaoshaozi ~]# locate hello.sh\n/root/hello.sh\n\n\n\n# 配置文件\n\n> /etc/updatedb.conf\n\n[jysp@jysp media]$ vim /etc/updatedb.conf\n# 开启搜索限制，也就是让这个配置文件生效\nprune_bind_mounts = "yes"\n# 在locate执行搜索时，禁止搜索这些文件系统类型\nprunefs = "9p afs anon_inodefs auto autofs bdev binfmt_misc cgroup cifs coda configfs cpuset debugfs devpts ecryptfs exofs fuse fuse.sshfs fusectl gfs gfs2 gpfs hugetlbfs inotifyfs iso9660 jffs2 lustre mqueue ncpfs nfs nfs4 nfsd pipefs proc ramfs rootfs rpc_pipefs securityfs selinuxfs sfs sockfs sysfs tmpfs ubifs udf usbfs fuse.glusterfs ceph fuse.ceph"\n# 在locate执行搜索时，禁止搜索带有这些扩展名的文件\nprunenames = ".git .hg .svn"\n# 在locate执行搜索时，禁止搜索这些系统目录\nprunepaths = "/afs /media /mnt /net /sfs /tmp /udev /var/cache/ccache /var/lib/yum/yumdb /var/spool/cups /var/spool/squid /var/tmp /var/lib/ceph"\n\n\n\n# find命令\n\n> 在目录中搜索文件。\n> \n> find 命令：精确查找，磁盘搜索，io读写，cpu开销大\n\n根据需求查找出来直接输出到屏幕\n\nfind 查找路径 选项 关键字\n\n常见选项     含义             备注\n-name    按照文件名查找文件      \n-iname   按照文件名忽略大小写查找   \n-size    按照文件大小来查找      +1m 大于1m -1m 小于1m 1m 等于1m\n-type    按照文件类型来查找      \n-mtime   按文件修改时间来查找文件   -n指n天以内，+n指n天以前\n-atime   按文件访问时间来查      \n-ctime   按文件创建时间来查找文件   \n-perm    按照文件权限来查找文件    \n                        \n\n\n# 按照文件名搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n\t-name：\t按照文件名搜索\n\t-iname：\t按照文件名搜索，不区分文件名大小写\n\t-inum：\t按照inode号搜索\n\n\n> 文件名搜索示例\n\n[root@heima ~]# find /test -name "file1"\n[root@heima ~]# find /test -iname "file1"\n[root@heima ~]# find /etc -name "*.conf"\n\n\n\n# 按照文件大小搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n\n选项：\n\t-size [+|-]大小：按照指定大小搜索文件\n\n注意：-size -1m 当文件中没有小于1m的文件的时候，会变成查找-size -1k\n\n\n这里的“+”的意思是搜索比指定大小还要大的文件，“-”的意思是搜索比指定大小还要小的文件。\n\nfind命令的单位：\n\n[root@localhost ~]# man find\n\n-size n[cwbkmg]\n              file uses n units of space.  the following suffixes can be used:\n\t\t\t  #这是默认单位，如果单位为b或不写单位，则按照512byte搜索\n              `b\'    for 512-byte blocks (this is the default if no suffix is used)\n\t\t\t  #搜索单位是c，按照字节搜索\n              `c\'    for bytes\n\t\t\t  #搜索单位是w，按照双字节（中文）搜索\n              `w\'    for two-byte words\n\t\t\t  #按照kb单位搜索，必须是小写的k\n              `k\'    for kilobytes (units of 1024 bytes)\n\t\t\t  #按照mb单位搜索，必须是大写的m\n              `m\'    for megabytes (units of 1048576 bytes)\n\t\t\t  #按照gb单位搜索，必须是大写的g\n              `g\'    for gigabytes (units of 1073741824 bytes)\n\n              the  size  does  not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  bear in mind that the `%k\' and\n              `%b\' format specifiers of -printf handle sparse files differently.  the `b\' suffix always denotes 512-byte blocks and never 1 kilobyte blocks,  which\n              is different to the behaviour of -ls.\n\n\n\n> 文件大小示例\n\n[root@heima test]# find . -type f -size +1m\n[root@heima test]# find . -type f -size -1m\n[root@heima test]# find . -type f -size -1024k\n[root@heima test]# find . -type f -size 9m\n\n\n\n# 按照修改时间搜索\n\nlinux中的文件有访问时间（atime）、数据修改时间（mtime）、状态修改时间（ctime）这三个时间，我们也可以按照时间来搜索文件。\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n-atime [+|-]时间：按照文件访问时间搜索\n-mtime [+|-]时间：按照文件数据修改时间搜索\n-ctime [+|-]时间：按照文件状态修改时间搜索\n\n\n这三个时间的区别我们在stat命令中已经解释过了，这里用mtime数据修改时间来举例，重点说说“[+-]”时间的含义。\n\n * -5：代表5天内修改的文件。\n * 5：代表前5～6天那一天修改的文件。\n * +5：代表6天前修改的文件。\n\n我们画一个时间轴，来解释一下，如图\n\n\n\n[root@heima test]# find ./ -type f -mtime +2\n[root@heima test]# find ./ -type f -mtime -2\n[root@heima test]# find ./ -type f -mtime 2\n注意：这里的天数需要满24小时为一天的\nfind ./ -type f -daystart -mtime +2\n\n\n\n# 按照权限搜索\n\n命令格式。\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n    -perm  权限模式：查找文件权限刚好等于“权限模式”的文件\n    -perm -权限模式：查找文件权限全部包含“权限模式”的文件\n    -perm +权限模式：查找文件权限包含“权限模式”的任意一个权限的文件\n\n\n\n# 按照所有者和所属组搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n-uid 用户id：\t按照用户id查找所有者是指定id的文件\n-gid 组id：\t 按照用户组id查找所属组是指定id的文件\n-user 用户名：\t按照用户名查找所有者是指定用户的文件\n-group 组名：\t按照组名查找所属组是指定用户组的文件\n-nouser：\t 查找没有所有者的文件\n\n\n按照所有者和所属组搜索时，“-nouser”选项比较常用，主要用于查找垃圾文件。\n\n只有一种情况例外，那就是外来文件。比如光盘和u盘中的文件如果是由windows复制的，在linux中查看就是没有所有者的文件；再比如手工源码包安装的文件，也有可能没有所有者\n\n[root@heima test]# find . -user heima -group heima -type f\n一般省略 -a: find . -user heima -a -group heima -a -type f 代表同时满足\n[root@heima test]# find . -type f -perm 644\n\n\n\n# 按照文件类型搜索\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n\t-type d：查找目录\n\t-type f：查找普通文件\n\t-type l：查找软链接文件\n\n\n> 文件类型示例\n\n[root@heima ~]# find /usr/bin/ -type l\t\t查找连接\n[root@heima ~]# find /dev -type b\t\t\t查找块设备\n[root@heima ~]# cd /test\n[root@heima test]# find . -type d\t\t\t查找目录\n[root@heima test]# find . -type f\t\t\t查找文件\n\n\n\n# 逻辑运算符\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容\n选项：\n\t-a：\t\tand逻辑与\n\t-o：\t\tor逻辑或\n\t-not：\tnot逻辑非\n\n\n1）-a：and逻辑与\n\nfind命令也支持逻辑运算符选项，其中-a代表逻辑与运算，也就是-a的两个条件都成立，find搜索的结果才成立。举个例子：\n\n#在当前目录下搜索大于2kb，并且文件类型是普通文件的文件\n[root@xiaoshaozi ~]# find . -size +2k -a -type f\n\n[root@heima test]# find . -user heima -group heima -type f\n一般省略 -a: find . -user heima -a -group heima -a -type f 代表同时满足\n[root@heima test]# find . -type f -perm 644\n\n\n2）-o：or逻辑或\n\n-o选项代表逻辑或运算，也就是-o的两个条件只要其中一个成立，find命令就可以找到结果。例如：\n\n#在当前目录下搜索文件名要么是cangls的文件，要么是bols的文件\n[root@xiaoshaozi ~]# find . -name cangels -o -name bols\n\n\n3）-not：not逻辑非\n\n-not是逻辑非，也就是取反的意思。举个例子：\n\n#在当前目录下搜索文件名不是cangls的文件\n[root@xiaoshaozi ~]# find . -not -name cangls\n\n\n\n# 其他选项\n\n根据需求查找出来后执行某个动作(命令)\n\nfind 路径 选项 关键字 动作\n\n常见动作      说明\n-exec     对查找到的文件直接执行该参数后的shell命令\n-ok       对查找到的文件询问式执行该参数后的shell命令\n-delete   删除查找到的文件\n-ls       列出查找到的文件,详细信息\n-print    打印出查找到的文件（默认选项）\n          \n\n1）-exec选项\n\n这里我们主要讲解两个选项“-exec”和“-ok”，这两个选项的基本作用非常相似。我们先来看看“-exec”选项的格式。\n\n[root@localhost ~]# find 搜索路径 [选项] 搜索内容 -exec 命令2 {} \\;\n\n\n其次，这个选项的作用其实是把find命令的结果交给由“-exec”调用的命令2来处理。“{}”就代表find命令的查找结果。\n\n2）-ok选项\n\n“-ok”选项和“-exec”选项的作用基本一致，区别在于：“-exec”的命令2会直接处理，而不询问；“-ok”的命令2在处理前会先询问用户是否这样处理，在得到确认命令后，才会执行。\n\n举例说明：\n\n-delete\n\n\n\n-exec | -ok\n\n语法结构：\n注意：\n1. -exec或者-ok后面写完命令必须以空格反斜杠\\;结尾（ \\;）\n2. {}表示find命令所找出来的内容\n\nfind /test/ -type f -ok cp {} /tmp \\;\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"命令--11.包管理工具",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--11.%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html",relativePath:"zs-use/linux/基本使用/命令--11.包管理工具.md",key:"v-31c11330",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--11.%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html",headers:[{level:2,title:"1、软件包分类",slug:"_1、软件包分类",normalizedTitle:"1、软件包分类",charIndex:19},{level:3,title:"㈠ 软件包类型",slug:"一-软件包类型",normalizedTitle:"㈠ 软件包类型",charIndex:31},{level:3,title:"㈡ 常见的二进制包",slug:"二-常见的二进制包",normalizedTitle:"㈡ 常见的二进制包",charIndex:1778},{level:3,title:"㈢ 总结二进制包和源码包区别",slug:"三-总结二进制包和源码包区别",normalizedTitle:"㈢ 总结二进制包和源码包区别",charIndex:1957},{level:2,title:"2、软件包安装方式",slug:"_2、软件包安装方式",normalizedTitle:"2、软件包安装方式",charIndex:2079},{level:3,title:"㈠ 二进制包",slug:"一-二进制包",normalizedTitle:"㈠ 二进制包",charIndex:2093},{level:3,title:"㈡ 源码包",slug:"二-源码包",normalizedTitle:"㈡ 源码包",charIndex:2678},{level:2,title:"3、==二进制rpm包如何管理(重点)==",slug:"_3、-二进制rpm包如何管理-重点",normalizedTitle:"3、==二进制rpm包如何管理(重点)==",charIndex:2863},{level:3,title:"㈠ 如何获取rpm包",slug:"一-如何获取rpm包",normalizedTitle:"㈠ 如何获取rpm包",charIndex:2889},{level:3,title:"㈡ 如何选择合适的rpm包",slug:"二-如何选择合适的rpm包",normalizedTitle:"㈡ 如何选择合适的rpm包",charIndex:3102},{level:3,title:"㈢ 如何管理rpm包",slug:"三-如何管理rpm包",normalizedTitle:"㈢ 如何管理rpm包",charIndex:3404},{level:2,title:"4、源码包安装",slug:"_4、源码包安装",normalizedTitle:"4、源码包安装",charIndex:11171},{level:3,title:"安装过程",slug:"安装过程",normalizedTitle:"安装过程",charIndex:11547},{level:3,title:"删除",slug:"删除",normalizedTitle:"删除",charIndex:7322},{level:3,title:"打入补丁",slug:"打入补丁",normalizedTitle:"打入补丁",charIndex:12335},{level:2,title:"脚本安装程序",slug:"脚本安装程序",normalizedTitle:"脚本安装程序",charIndex:12854},{level:3,title:"Webmin安装",slug:"webmin安装",normalizedTitle:"webmin安装",charIndex:13033}],lastUpdated:"2024年1月8日星期一下午2点56分",lastUpdatedTimestamp:1704696967e3,headersStr:"1、软件包分类 ㈠ 软件包类型 ㈡ 常见的二进制包 ㈢ 总结二进制包和源码包区别 2、软件包安装方式 ㈠ 二进制包 ㈡ 源码包 3、==二进制rpm包如何管理(重点)== ㈠ 如何获取rpm包 ㈡ 如何选择合适的rpm包 ㈢ 如何管理rpm包 4、源码包安装 安装过程 删除 打入补丁 脚本安装程序 Webmin安装",content:'# 命令--11.包管理工具\n\n\n# 1、软件包分类\n\n\n# ㈠ 软件包类型\n\n * 二进制包\n * 源码包\n\n# ① 二进制包\n\n * 什么是二进制包？有什么特点？\n   1. 二进制包，指的是已经 1 好了的软件包，只需要==直接安装==就可以使用。\n   2. 二进制包，==不需要编译==，直接下载安装即可\n   3. 二进制包，需要根据自己的计算机CPU以及操作系统去==选择合适==的\n   4. 二进制包，命名方式一般为： xlockmore-5.31-2.el6.x86_64.rpm\n\n\n\nhttpd-2.2.15-15.el6.centos.1.i686.rpm\nhttpd\t软件包名\n2.2.15\t软件版本\n15\t\t软件发布的次数\nel6\t\t软件发行商。el6是RedHat公司发布，适合RHEL6.x（Red Hat Enterprise Linux）和CentOS6.x下使用\ni686\t适合的硬件平台。RPM包可以在不同的硬件平台安装，选择适合不同CPU的软件版本，可以最大化的发挥CPU性能，所以出现了所谓的i386（386以上计算机都可以安装）、i586（586以上的计算机都可以安装）、i686（奔腾II以上计算机都可以安装，目前所有的CPU都是奔腾II以上，所以这个软件版本居多）、x86_64（64位CPU可以安装）和noarch（没有硬件限制）等文件名了。\nrpm\t\trpm包的扩展名。我们说过Linux下文件不是靠扩展名区分文件类型，也就是Linux中扩展名没有任何含义。可是这里怎么又出现了扩展名呢？原因很简单，如果我不把RPM的扩展名叫做“.rpm”，管理员很难知道这是一个RPM包，当然也就无法正确安装了。也就是说如果RPM包不用“.rpm”作为扩展名，系统可以正确识别没有问题，可是管理员很难识别这是个什么样的软件。\n\n\n包全名：如果操作的是未安装软件包，则使用包全名，而且需要注意绝对路径\n\n包名：如果操作的是已经安装的软件包，则使用包名即可，系统会生产RPM包的数据库（/var/lib/rpm/），而且可以在任意路径下操作\n\n# ② 源码包\n\n * 什么是源码包？有什么特点？\n   1. 源码包，指的是程序员写的原始的==程序代码文件==，==不能==够==直接==在计算机上==运行==。\n   2. 源码包，需要进行==编译==，变成==二进制的软件包后==，才可安装使用\n   3. 源码包，一般可以在任何的计算机上安装使用\n   4. 源码包，命名方式一般为：\n      * 软件包名.tar.gz\n      * 软件包名.tar.bz2\n      * 软件包名.tar.xz\n      * 软件包名.zip\n\n[root@localhost ~]#vim hello.c\n#include <stdio.h>\nint main (void)\n{\n\tprintf ("hello world\\n");\n}\n\n[root@localhost ~]# rpm -ivh /mnt/cdrom/Packages/gcc-4.4.6-4.el6.i686.rpm\n    \n[root@localhost ~]# gcc -c hello.c\n#-c 生成“.o”头文件。这里会生成hello.o头文件，但是不会生成执行文件\n[root@localhost ~]# gcc -o hello hello.o\n#-o 生成执行文件，并制定执行文件名。这里生成的hello就是可执行文件\n[root@localhost ~]# ./hello hello world\n#执行hello文件\n\n\n# ③ 二进制源码包(了解)\n\n * 什么是二进制源码包？有什么特点？\n   1. 二进制源码包，是一个==半成品==，安装后不能直接使用\n   2. 二进制源码包，需要使用 rpmbuild 工具重建成真正的 rpm 包或者重建成源码包才可安装使用\n   3. 二进制源码包，命名方式一般为：\n      * mysql-community-5.7.25-1.el6.==src==.rpm\n      * mysql-community-5.7.25-1.el7.==src==.rpm\n\n\n# ㈡ 常见的二进制包\n\n系统平台                        包类型   工具             在线安装\nRedHat/Centos/Fedora/SUSE   rpm   rpm,rpmbuild   yum/dnf\nUbuntu/Debian               deb   dpkg           apt\n\n\n# ㈢ 总结二进制包和源码包区别\n\n软件包类型   是否编译   安装难易程度          可定制性\n二进制包    否      易(直接安装)         差\n源码包     是      难(配置—>编译—>安装)   好\n\n\n# 2、软件包安装方式\n\n\n# ㈠ 二进制包\n\n# ① ==rpm工具安装==\n\n * 首先，需要下载好rpm包到本地\n\n * 然后，直接使用rpm工具安装\n\nRPM包依赖\n\n\n\n1）树形依赖a----\x3eb----\x3ec 2）环形依赖a----\x3eb----\x3ec----\x3ea 3）函数库依赖\n\n什么是模块依赖？我们举一个例子，尝试安装以下文件：\n\n[root@localhost Packages]# rpm -ivh mysql-connector-odbc-5.2.5-7.el7.x86_64.rpm\n错误：依赖检测失败：\n\tlibodbc.so.2()(64bit)被mysql-connector-odbc-5.2.5-7.el7.x86_64需要\n\tlibodbcinst.so.2()(64bit)被mysql-connector-odbc-5.2.5-7.el7.x86_64需要\n\n\n发现报错，需要安装“libodbc.so.2”函数库文件，这时会发现在光盘中根本找不到这个文件。那是因为函数库没有单独成包，是包含在某一个软件包中的。而如果要知道在哪个软件包中，需要查询网站www.rpmfind.net，如图：\n\n\n\n# ② yum/dnf工具安装\n\n * 首先，需要**==配置软件仓库==**(里面存放很多软件包，但不一定在本地)\n\n * 然后，使用yum/dnf工具安装\n\n\n# ㈡ 源码包\n\n# ① 根据需求==配置==\n\n功能的定制\n\n# ② 编译\n\n使用==编译器==编译成==二进制的软件包==\n\n# ③ 安装\n\n将软件包安装到指定位置\n\n# ④ 源码包安装优点\n\n 1. 可以在==任意平台==上编译安装，编译出来的软件包非常适应所在机器。\n\n 2. 可以在编译的时候，通过配置，==对某些功能进行定制==，开启或关闭相应的功能。\n\n\n# 3、==二进制rpm包如何管理(重点)==\n\n\n# ㈠ 如何获取rpm包\n\nLinux只是内核，Linux发行版本：GNU/Linux\n\n 1. RedHat/Centos光盘\n\n 2. 推荐网站\n    \n    * www.rpmfind.net\n    \n    * rpm.pbone.net\n\n 3. 相应软件官方网站\n    \n    * http://www.mysql.com\n    \n    * http://nginx.org/packages/\n\n\n# ㈡ 如何选择合适的rpm包\n\n 1. 选择==适合当前系统==的版本号\n    \n    * 找不到适合的，才去尝试别的系统版本号\n    \n    * el6兼容el5；el5无法安装 el6\n\n 2. 选择==适合当前计算机cpu==的架构\n    \n    * x86_64包，只能安装在64位的系统上\n    \n    * i386,i586,i686的软件包可以安装在32和64位系统上\n    \n    * noarch表示这个软件包与硬件构架无关，可以通用\n    \n    * 32位系统不能安装64位包\n\n建议： 建议不要跨大版本号去安装软件包，尽量使用当前版本自带软件包安装\n\n\n# ㈢ 如何管理rpm包\n\nRPM包默认安装路径\n\n路径                说明\n/etc/             配置文件安装目录\n/usr/bin/         可执行的命令安装目录\n/usr/lib/         程序所使用的函数库保存位置\n/usr/share/doc/   基本的软件使用手册保存位置\n/usr/share/man/   帮助文件保存位置\n\n# 1）rpm工具管理\n\n# ① rpm工具安装rpm包\n\n(1)安装命令\n\n# rpm -ivh 包全名\n\n注意：软件包的名字必须写全，xxx.rpm\n选项：\n\t-i\tinstall安装（install）\n\t-v\t显示更详细的信息（verbose）\n\t-h\t打印#显示安装进度（hash）\n\n\n--nodeps\t不检测依赖性安装。\n\t软件时会检测依赖性，确定所需的底层软件是否安装。如果没有安装则会报错。如果我不管依赖性，想强行安装，可以使用这个选项。\n\t注意：这样不检测依赖性安装的软件基本是不能使用的，所以不建议这样做\n--replacefiles\t替换文件安装。\n\t如果安装软件包，可是包中部分文件已经存在，那么正常安装时候，会报错“某个文件已经存在”从而导致软件无法安装,\n\t使用这个选项可以忽视这个报错，而覆盖安装\n--replacepkgs\t替换软件包安装。\n\t如果软件包已经安装，此选项可以把软件包重复安装一遍。\n--force\t强制安装。\n\t不管是否已经安装，都重新安装。\n\t就是—replacefiles和—replacepkgs的综合。\n--test\t测试安装。\n\t不会实际安装，只是检测一下依赖性。\n\n--prefix\t指定安装路径。\n\t为安装软件指定安装路径，而不使用默认安装路径。\n\t注意：如果指定了安装路径，软件没有安装到系统默认路径中的话，系统会找不到这些安装的软件，需要进行手工配置才能被系统识别。\n\t所以rpm包我们一般都采用默认路径安装。\n\n\nxshell上传下载工具\n\n\n\nrz 下载\n\nsz 上传\n\n2）服务启动\n\n[root@localhost ~]# service 服务名 start|stop|restart|status \n[root@localhost ~]# systemctl start|stop|restart|status 服务名\n\n\n# ② rpm工具卸载rpm包\n\n# rpm -e 包名\n选项：\n\t--nodeps\t不检查依赖性\n\t-e\t\t\t卸载\n\n\n注意：卸载软件只需要跟软件包名字即可\n\n# ③ rpm包的升级rpm包\n\n# rpm -Uvh 包全名\n或者\n# rpm -Fvh 包全名\n\n选项说明：\n\t-v:输出详细信息\n\t-h:打印散列标记，一般和-v一起使用\n\t-U:升级软件包，如果该软件包没安装，会自动帮你安装\n\t-F:升级软件包，如果该软件包没安装，不会自动帮你安装\n\n\n# ④ 查看rpm包相关信息\n\n# 查看已经安装的所有rpm包\nrpm -qa 软件包名\nrpm -aq|grep 软件包名字\n\n# 查看已经安装软件的详细信息\nrpm -qi 软件包名\n# 查看未安装的软件包的详细信息\nrpm –qip 包全名\n\n# 查看已经安装的软件的文件列表\nrpm -ql 软件包名\n# 查看未安装的rpm包里的文件列表\nrpm -qlp 软件包(xxx.rpm)\n\n# 查看指定文件来自哪个rpm包\nrpm -qf 文件名\n\n# 查询软件包所依赖的软件包\nrpm –qR 包名\n# 查询未安装软件包所依赖的软件包\nrpm –qRp 包名\n\n\n# 查看已经安装软件的文档列表\nrpm -qd 软件包名\n\n\n# 查看已经安装软件的配置文件\nrpm -qc 软件包名\n\n\n\n\n\n\n选项：\n\t-q\t查询（query）\n\t-a\t所有（all）\n\t-i\t查询软件信息(information)\n\t-p\t查询没有安装的软件包（package）\n\t-l\t列出软件包中所有文件列表，以及安装目录\n\t-d\t查看文档\n\t-c\t查看配置文件目录\n\t-f\t系统文件属于哪个软件包（file）\n\t-R\t查询软件包的依赖性（requires）\n\n\n# ⑤ rpm工具其他安装选项\n\n--force\n表示强制\nrpm -ivh 软件包 --force \n强制安装软件包\nrpm -e 软件包名 --force \n强制卸载软件包\n\n\n\n--nodeps \n忽略依赖关系\nrpm -ivh 软件包 --nodeps\n忽略依赖关系安装\nrpm -e 软件包 --nodeps \n忽略依赖关系卸载\n\n\n\n其他了解：\nrpm --import key_file \n导入公钥用于检查rpm文件的签名\nrpm --checksig package.rpm \n检查rpm包的签名\nrpm工具管理rpm软件包\n\n安装、卸载、升级、查看\n缺点：有依赖关系需要我们人肉去解决 A----\x3eB和C\n\n\n# ⑥rpm校验\n\n[root@localhost ~]#rpm –Va\n选项：\n\t-Va\t校验本机已经安装的所有软件包\n\t\n[root@localhost ~]#rpm –V 已安装的包名\n选项：\n\t-V校验指定RPM包中的文件（verify）\n\t\n[root@localhost ~]#rpm –Vf 系统文件名\n选项：\n\t-Vf校验某个系统文件是否被修改\n\n\n验证举例\n\n[root@iZuf616fn1k2l61xnal11vZ html]# rpm -V nginx\nS.5....T.  c /etc/nginx/nginx.conf\n\n\n出现了提示信息，我们来解释下最前面共有8个信息内容，是表示验证内容的。文件名前面的c是表示这是个配置文件（configuration）。最后是文件名。那么验证内容中的8个信息的具体内容如下：\n\nS 文件大小是否改变 M 文件的类型或文件的权限（rwx）是否被改变 5 文件MD5校验和是否改变（可以看成文件内容是否改变） D 设备的主从代码是否改变 L 文件路径是否改变 U 文件的属主（所有者）是否改变 G 文件的属组是否改变 T 文件的修改时间是否改变 apache配置文件的文件类型是c，那么还有哪些文件类型呢？\n\nc 配置文件（config file） d 普通文档（documentation） g “鬼”文件（ghost file），很少见，就是该文件不应该被这个RPM包包含 l 授权文件（license file） r 描述文件（read me）\n\n# ⑦数字证书\n\n刚刚的校验方法只能对已经安装的RPM包中的文件进行校验，但是如果RPM包本身就被动过手脚，那么校验就不能解决问题了。我们就必须使用数字证书验证了。\n\n数字证书有如下特点：\n\n * 首先必须找到原厂的公钥文件，然后进行安装\n * 再安装RPM包是，会去提取RPM包中的证书信息，然后和本机安装的原厂证书进行验证\n * 如果验证通过，则允许安装；如果验证不通过，则不允许安装并警告\n\n数字证书位置\n\n#光盘中的数字证书位置\n[root@localhost ~]# ll /media/centos7_iso/RPM-GPG-KEY-CentOS-7\n-rw-rw-r-- 17 root root 1690 12月 10 2015 /media/centos7_iso/RPM-GPG-KEY-CentOS-7\n\n\n#系统中的数字证书位置\n[root@localhost ~]# ll /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n-rw-r--r--. 1 root root 1690 10月 23 2020 /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n\n\n数字证书导入\n\n[root@localhost ~]# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n\n我们如何查询系统中安装好的数字证书呢？命令如下：\n\n[root@localhost ~]# rpm -qa | grep gpg-pubkey\ngpg-pubkey-621e9f35-58adea78\ngpg-pubkey-f4a80eb5-53a7ff4b\n\n\n数字证书移除\n\nrpm -e gpg-pubkey-621e9f35-58adea78\n\n\n⑧提取rpm包包中文件（了解）\n\n1）cpio命令\n\ncpio命令主要有三种基本模式：“-o”模式指的是copy-out模式，就是把数据备份到文件库中；“-i”模式指的是copy-in模式，就是把数据从文件库中恢复；“-p”模式指的是复制模式，就是不把数据备份到cpio库中，而是直接复制为其他文件。命令如下：\n\n\n\n举几个例子吧，先来看看使用cpio备份数据的方法，命令如下：\n\n\n\n再来看看如何恢复cpio的备份数据，命令如下：\n\n\n\n\n\n在CentOS5.x的版本中，是可以利用上面的命令备份与恢复指定的文件。但是到CentOS6.x当中，需要更加严谨。如果备份时使用绝对路径，则恢复的数据会直接到绝对路径指定的路径中，如果需要把数据恢复到当前目录中，则需要使用相对路径，例如：\n\n\n\n最后来演示一下cpio命令的“-p”复制模式，命令如下：\n\n\n\n2）提取RPM包中文件\n\n\n\n举个例子，现在我假设把系统中的/bin/ls命令不小心误删除了，那么我可以修复回来吗？这时有两种方法修复，要不就是使用—force选项覆盖安装一遍coreutils-8.4-19.el6.i686包，要不就可以使用cpio命令提取出/bin/ls命令文件，再把它拷贝到对应位置就可以了。不过我是怎么知道/bin/ls命令是属于coreutils-8.4-19.el6.i686这个软件包的呢？还记得-qf选项吗？命令如下：\n\n\n\n那么我们在讲RPM包中文件提取，所以我们使用第二章方法，cpio命令提取出ls命令文件，然后拷贝到对应位置，命令如下：\n\n\n\n# 2）==yum（dnf）工具管理==\n\nyum/dnf优点：能够自动解决依赖关系\n\n核心：需要有一个软件仓库，软件仓库指的是来存放软件包和软件包之间的依赖关系地方。\n\n\n\n 1. 需要有软件仓库\n    \n    * 仓库可以在本地——>本地yum源\n    \n    * 仓库可以在远程——>网络yum源——>网络必须ok\n\n 2. 需要告诉yum工具到哪个仓库里找\n    \n    * 默认有一个地方，存放了xxx.repo文件——>定义了去哪个仓库里找\n\n# yum源文件解析\n\nyum源配置文件保存在/etc/yum.repos.d/目录中，文件的扩展名一定是“.repo”。也就是说，yum源配置文件只要扩展名是“.repo”就会生效。\n\n[root@localhost ~]# ls /etc/yum.repos.d/\nCentOS-Base.repo  CentOS-CR.repo  CentOS-Debuginfo.repo  CentOS-fasttrack.repo  CentOS-Media.repo  \nCentOS-Sources.repo  CentOS-Vault.repo  CentOS-x86_64-kernel.repo\n\n\n默认情况下CentOS-Base.repo文件生效。\n\n\n\n[base]\nname=CentOS-$releasever\nenabled=1\nfailovermethod=priority\nbaseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7\n\n[updates]\nname=CentOS-$releasever\nenabled=1\nfailovermethod=priority\nbaseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7\n\n[extras]\nname=CentOS-$releasever\nenabled=1\nfailovermethod=priority\nbaseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7\n\n\n> 解释一下base这个容器。\n> \n>  * [base]：容器名称，一定要放在[]中。\n>  * name：容器说明，可以自己随便写。\n>  * mirrorlist：镜像站点，这个可以注释掉。\n>  * baseurl：我们的yum源服务器的地址。默认是CentOS官方的yum源服务器，是可以使用的。 如果你觉得慢，则可以改成你喜欢的yum源地址。\n>  * enabled：此容器是否生效，如果不写或写成enabled=1则表示此容器生效，写成enabled=0 则表示此容器不生效。\n>  * gpgcheck：如果为1则表示RPM的数字证书生效；如果为0则表示RPM的数字证书不生效。\n>  * gpgkey：数字证书的公钥文件保存位置。不用修改。\n\n光盘yum源CentOS-Media.repo\n\n# 搭建本地光盘yum源\n\n第一步：放入CentOS安装光盘，并挂载光盘到指定位置。命令如下：\n\n\n\n第二步：修改其他几个yum源配置文件的扩展名，让它们失效，因为只有扩展名是“*.repo”的文件才能作为yum源配置文件。当然也可以删除其他几个yum源配置文件，但是如果删除了，当你又想用网络作为yum源时，就没有了参考文件，所以最好还是修改扩展名。命令如下：\n\n\n\n第三步：修改光盘yum源配置文件CentOS-Media.repo，参照以下方法修改：\n\n\n\n\n\n配置完成，现在可以感受一下yum的便捷了。\n\n# 搭建本地yum源\n\n1）本地仓库的分类\n\n * BaseOS存储库\n\n> BaseOS存储库旨在提供一套核心的底层操作系统的功能，为==基础软件==安装库\n\n * AppStream存储库\n\n> AppStream存储库中包括额外的==用户空间应用程序、运行时语言和数据库==，以支持不同的工作负载和用例。AppStream中的内容有两种格式——熟悉的RPM格式和称为模块的RPM格式扩展\n\n2）配置本地仓库\n\n步骤1：挂载镜像到本地系统\n\n/mnt\n\n/media 一般用于第三方设备的挂载点\n\n\n\n[root@RedHat8 ~]# mount -o ro /dev/sr0 /mnt\n手动将/dev/sr0设备挂载到指定 /mnt目录下\n\n\n列出BaseOS和AppStream的内容如下说明仓库已准备好\n[root@RedHat8 ~]# ls /mnt/BaseOS/\nPackages repodata\n[root@RedHat8 ~]# ls /mnt/AppStream/\nPackages repodata\n\n\n步骤2：修改配置文件指定本地存储库\n\n\n\n[root@RedHat8 yum.repos.d]# pwd\n/etc/yum.repos.d\n\n[root@RedHat8 yum.repos.d]# cat local.repo\n[BaseOS]\nname=BaseOS\n# 开启\nenabled=1\n# 本地软件包地址\nbaseurl=file:///mnt/BaseOS\n# 不校验签名\ngpgcheck=0\n\n[AppStream]\nname=AppStream\nenabled=1\nbaseurl=file:///mnt/AppStream\ngpgcheck=0\n\n\n步骤3：查看是否成功\n\n清空yum缓存\n[root@RedHat8 yum.repos.d]# yum clean all\n创建yum缓存\n[root@RedHat8 yum.repos.d]# yum makecache\n查看仓库\n[root@RedHat8 yum.repos.d]# yum repolist\n仓库标识 仓库名称 状态\nAppStream \t\tAppStream \t\t\t4,672\nBaseOS\t\t\t BaseOS \t\t\t1,658\n\n\n# yum（dnf）工具使用\n\n * 查看\n   \n   查看仓库软件\n   # yum list | grep samba\n   \n   查看已安装的软件\n   # yum list installed | samba\n   # rpm -q vsftpd\n   # dnf list installed| grep vsftpd\n   \n   search查找\n   # yum search httpd\n   \n   查询指定软件包的信息。\n   # yum info samba\n   \n   \n   \n\n * 安装软件包\n   \n   # yum -y install 软件包1 软件包2\n   # yum -y groupinstall "包组名"\n   注意：\n   1.其中，-y选项表示取消交互\n   2.包组里面包含很多的软件包。\n   \n   \n   \n\n * 升级rpm包\n   \n   注意：在进行升级操作时，yum源服务器中软件包的版本要比本机安装的软件包的版本高。\n   \n   # yum update 软件包名\n   # yum update \n   \n   \n   \n   \n   \n\n * 卸载软件包\n   \n   再次强调一下，除非你确定卸载的软件的依赖包不会对系统产生影响，否则不要执行yum的卸载，因为很有可能在卸载软件包的同时卸载的依赖包也是重要的系统文件，这就有可能导致系统崩溃。卸载命令如下：\n   \n   # yum -y remove 软件包名\n   # yum -y groupremove "包组名"\n   \n   \n   \n\n# yum组管理命令\n\n查询可以安装的软件组\n\n\n\n查询软件组内包含的软件\n\n\n\n安装软件组\n\n\n\n卸载软件组\n\n\n\n\n# 4、源码包安装\n\n1、应该选择哪种软件包？\n\n * 如果软件包是给大量客户提供访问，建议使用源码包安装，如LAMP环境搭建，因为源码包效率更高。\n * 如果软件包是给Linux底层使用，或只给少量客户访问，建议使用rpm包安装，因为rpm包简单。\n\n2、源码包是从哪里来的？\n\nrpm包是光盘中直接包含的，所以不需要用户单独下载。而源码包是通过官方网站下载的，如果需要使用，是需要单独下载的。\n\n3、是否可以在系统中即安装rpm包的Apache，又安装源码包的Apache？\n\n答案是可以，因为两种安装方法安装的Apache，安装位置是不一样的，例如：\n\n\n\n1.4生产服务器上，是否会同时安装两种Apache？\n\n当然不会啊，因为系统中只有一个80端口，所以你只能启动一个Apache，装多个只能浪费资源。我们建议安装源码包的Apache。\n\n\n# 安装过程\n\n我们来解释一下源码包安装的具体步骤。\n\n（1）下载软件包。\n\n（2）解压缩。\n\n（3）进入解压目录。\n\n（4）./configure 编译前准备\n\n这一步主要有三个作用：\n\n① 在安装之前需要检测系统环境是否符合安装要求。\n\n② 定义需要的功能选项。“./configure”支持的功能选项较多，可以执行“./configure --help” 命令查询其支持的功能。一般都会通过“./configure --prefix=安装路径”来指定安装路径。\n\n③ 把系统环境的检测结果和定义好的功能选项写入Makefile文件，后续的编译和安装需要依赖这个文件的内容。\n\n需要注意的是，configure不是系统命令，而是源码包软件自带的一个脚本程序，所以必须采用“./configure”方式执行（“./”代表在当前目录下）。\n\n\n\n（5）make 编译\n\nmake会调用gcc编译器，并读取Makefile文件中的信息进行系统软件编译。编译的目的就是把源码程序转变为能被Linux识别的可执行文件，这些可执行文件保存在当前目录下。编译过程较为耗时，需要有足够的耐心。\n\n（6）make clean：清空编译内容（非必需步骤）。\n\n如果在“./configure”或“make”编译中报错，那么我们在重新执行命令前一定要记得执行make clean命令，它会清空Makefile文件或编译产生的“.o”头文件。\n\n（7）make install：编译安装\n\n这才是真正的安装过程，一般会写清楚程序的安装位置。如果忘记指定安装目录，则可以把这个命令的执行过程保存下来，以备将来删除使用。\n\n> vim INSTALL\n> \n> \n> \n> \n> 启动\n> \n> \n> \n> ps aux\n\n\n# 删除\n\n源码包没有删除命令，如果需要删除，直接删除安装目录即可。\n\n\n# 打入补丁\n\n# 补丁的生成\n\n\n\n举例\n\n\n\n比较下两个文件的不同，并生成补丁文件“txt.patch”，命令如下：\n\n\n\n#后一个文件比前一个文件多两行（+表示）\n\n# 打入补丁\n\n\n\n“-pn”不好理解，我们说明下。补丁文件是要打入旧文件的，但是你当前所在的目录和补丁文件中的记录的目录是不一定匹配的，所以就需要“-pn”来同步两个目录。比如我当前是在“/root/test”目录中（我要打补丁的旧文件就在当前目录下），补丁文件中记录的文件目录为“/root/test/old.txt”，这时如果写入“-p1”（在补丁文件目录中取消一级目录）那么补丁文件就会打入“/root/test/root/test/old.txt”文件中，这显然是不对的。那如果写入的是“-p2”（在补丁文件目录中取消二级目录）那么补丁文件打入的就是“/root/test/test/old.txt”,这显然也不对。如果写入的是“-p3”（在补丁文件目录中取消三级目录）那么补丁文件就是打入的“/root/test/old.txt”，我们的old.txt文件就在这个目录下，所以就应该是“-p3”。那么我们更新下“old.txt”文件，命令如下：\n\n\n\n\n# 脚本安装程序\n\n脚本程序包并不多见，所以在软件包分类中并没有把它列为一类。它更加类似于Windows下的程序安装，有一个可执行的安装程序，只要运行安装程序，然后进行简单的功能定制选择（比如指定安装目录等），就可以安装成功，只不过是在字符界面下完成的。\n\n目前常见的脚本程序以各类硬件的驱动居多，我们需要学习一下这类软件的安装方式，以备将来不时之需。\n\n\n# Webmin安装\n\n我们来看看脚本程序如何安装和使用。安装一个叫作Webmin的工具软件，Webmin是一个基于Web的系统管理界面。借助任何支持表格和表单的浏览器（和File Manager模块所需要的Java），你就可以设置用户账号、apache、DNS、文件共享等。Webmin包括一个简单的Web服务器和许多CGI程序，这些程序可以直接修改系统文件，比如/etc/inetd.conf和/etc/passwd。Web服务器和所有的CGI程序都是用Perl 5编写的，没有使用任何非标准Perl模块。也就是说，Webmin是一个用Perl语言写的、可以通过浏览器管理Linux的软件。\n\n首先下载Webmin软件，地址为http://sourceforge.net/projects/webadmin/files/webmin/，这里下载的是webmin-1.610.tar.gz。\n\n接下来解压缩软件，命令如下：\n\n\n\n进入解压目录，命令如下：\n\n\n\n执行安装程序setup.sh，并指定功能选项，命令如下：\n\n\n\n',normalizedContent:'# 命令--11.包管理工具\n\n\n# 1、软件包分类\n\n\n# ㈠ 软件包类型\n\n * 二进制包\n * 源码包\n\n# ① 二进制包\n\n * 什么是二进制包？有什么特点？\n   1. 二进制包，指的是已经 1 好了的软件包，只需要==直接安装==就可以使用。\n   2. 二进制包，==不需要编译==，直接下载安装即可\n   3. 二进制包，需要根据自己的计算机cpu以及操作系统去==选择合适==的\n   4. 二进制包，命名方式一般为： xlockmore-5.31-2.el6.x86_64.rpm\n\n\n\nhttpd-2.2.15-15.el6.centos.1.i686.rpm\nhttpd\t软件包名\n2.2.15\t软件版本\n15\t\t软件发布的次数\nel6\t\t软件发行商。el6是redhat公司发布，适合rhel6.x（red hat enterprise linux）和centos6.x下使用\ni686\t适合的硬件平台。rpm包可以在不同的硬件平台安装，选择适合不同cpu的软件版本，可以最大化的发挥cpu性能，所以出现了所谓的i386（386以上计算机都可以安装）、i586（586以上的计算机都可以安装）、i686（奔腾ii以上计算机都可以安装，目前所有的cpu都是奔腾ii以上，所以这个软件版本居多）、x86_64（64位cpu可以安装）和noarch（没有硬件限制）等文件名了。\nrpm\t\trpm包的扩展名。我们说过linux下文件不是靠扩展名区分文件类型，也就是linux中扩展名没有任何含义。可是这里怎么又出现了扩展名呢？原因很简单，如果我不把rpm的扩展名叫做“.rpm”，管理员很难知道这是一个rpm包，当然也就无法正确安装了。也就是说如果rpm包不用“.rpm”作为扩展名，系统可以正确识别没有问题，可是管理员很难识别这是个什么样的软件。\n\n\n包全名：如果操作的是未安装软件包，则使用包全名，而且需要注意绝对路径\n\n包名：如果操作的是已经安装的软件包，则使用包名即可，系统会生产rpm包的数据库（/var/lib/rpm/），而且可以在任意路径下操作\n\n# ② 源码包\n\n * 什么是源码包？有什么特点？\n   1. 源码包，指的是程序员写的原始的==程序代码文件==，==不能==够==直接==在计算机上==运行==。\n   2. 源码包，需要进行==编译==，变成==二进制的软件包后==，才可安装使用\n   3. 源码包，一般可以在任何的计算机上安装使用\n   4. 源码包，命名方式一般为：\n      * 软件包名.tar.gz\n      * 软件包名.tar.bz2\n      * 软件包名.tar.xz\n      * 软件包名.zip\n\n[root@localhost ~]#vim hello.c\n#include <stdio.h>\nint main (void)\n{\n\tprintf ("hello world\\n");\n}\n\n[root@localhost ~]# rpm -ivh /mnt/cdrom/packages/gcc-4.4.6-4.el6.i686.rpm\n    \n[root@localhost ~]# gcc -c hello.c\n#-c 生成“.o”头文件。这里会生成hello.o头文件，但是不会生成执行文件\n[root@localhost ~]# gcc -o hello hello.o\n#-o 生成执行文件，并制定执行文件名。这里生成的hello就是可执行文件\n[root@localhost ~]# ./hello hello world\n#执行hello文件\n\n\n# ③ 二进制源码包(了解)\n\n * 什么是二进制源码包？有什么特点？\n   1. 二进制源码包，是一个==半成品==，安装后不能直接使用\n   2. 二进制源码包，需要使用 rpmbuild 工具重建成真正的 rpm 包或者重建成源码包才可安装使用\n   3. 二进制源码包，命名方式一般为：\n      * mysql-community-5.7.25-1.el6.==src==.rpm\n      * mysql-community-5.7.25-1.el7.==src==.rpm\n\n\n# ㈡ 常见的二进制包\n\n系统平台                        包类型   工具             在线安装\nredhat/centos/fedora/suse   rpm   rpm,rpmbuild   yum/dnf\nubuntu/debian               deb   dpkg           apt\n\n\n# ㈢ 总结二进制包和源码包区别\n\n软件包类型   是否编译   安装难易程度          可定制性\n二进制包    否      易(直接安装)         差\n源码包     是      难(配置—>编译—>安装)   好\n\n\n# 2、软件包安装方式\n\n\n# ㈠ 二进制包\n\n# ① ==rpm工具安装==\n\n * 首先，需要下载好rpm包到本地\n\n * 然后，直接使用rpm工具安装\n\nrpm包依赖\n\n\n\n1）树形依赖a----\x3eb----\x3ec 2）环形依赖a----\x3eb----\x3ec----\x3ea 3）函数库依赖\n\n什么是模块依赖？我们举一个例子，尝试安装以下文件：\n\n[root@localhost packages]# rpm -ivh mysql-connector-odbc-5.2.5-7.el7.x86_64.rpm\n错误：依赖检测失败：\n\tlibodbc.so.2()(64bit)被mysql-connector-odbc-5.2.5-7.el7.x86_64需要\n\tlibodbcinst.so.2()(64bit)被mysql-connector-odbc-5.2.5-7.el7.x86_64需要\n\n\n发现报错，需要安装“libodbc.so.2”函数库文件，这时会发现在光盘中根本找不到这个文件。那是因为函数库没有单独成包，是包含在某一个软件包中的。而如果要知道在哪个软件包中，需要查询网站www.rpmfind.net，如图：\n\n\n\n# ② yum/dnf工具安装\n\n * 首先，需要**==配置软件仓库==**(里面存放很多软件包，但不一定在本地)\n\n * 然后，使用yum/dnf工具安装\n\n\n# ㈡ 源码包\n\n# ① 根据需求==配置==\n\n功能的定制\n\n# ② 编译\n\n使用==编译器==编译成==二进制的软件包==\n\n# ③ 安装\n\n将软件包安装到指定位置\n\n# ④ 源码包安装优点\n\n 1. 可以在==任意平台==上编译安装，编译出来的软件包非常适应所在机器。\n\n 2. 可以在编译的时候，通过配置，==对某些功能进行定制==，开启或关闭相应的功能。\n\n\n# 3、==二进制rpm包如何管理(重点)==\n\n\n# ㈠ 如何获取rpm包\n\nlinux只是内核，linux发行版本：gnu/linux\n\n 1. redhat/centos光盘\n\n 2. 推荐网站\n    \n    * www.rpmfind.net\n    \n    * rpm.pbone.net\n\n 3. 相应软件官方网站\n    \n    * http://www.mysql.com\n    \n    * http://nginx.org/packages/\n\n\n# ㈡ 如何选择合适的rpm包\n\n 1. 选择==适合当前系统==的版本号\n    \n    * 找不到适合的，才去尝试别的系统版本号\n    \n    * el6兼容el5；el5无法安装 el6\n\n 2. 选择==适合当前计算机cpu==的架构\n    \n    * x86_64包，只能安装在64位的系统上\n    \n    * i386,i586,i686的软件包可以安装在32和64位系统上\n    \n    * noarch表示这个软件包与硬件构架无关，可以通用\n    \n    * 32位系统不能安装64位包\n\n建议： 建议不要跨大版本号去安装软件包，尽量使用当前版本自带软件包安装\n\n\n# ㈢ 如何管理rpm包\n\nrpm包默认安装路径\n\n路径                说明\n/etc/             配置文件安装目录\n/usr/bin/         可执行的命令安装目录\n/usr/lib/         程序所使用的函数库保存位置\n/usr/share/doc/   基本的软件使用手册保存位置\n/usr/share/man/   帮助文件保存位置\n\n# 1）rpm工具管理\n\n# ① rpm工具安装rpm包\n\n(1)安装命令\n\n# rpm -ivh 包全名\n\n注意：软件包的名字必须写全，xxx.rpm\n选项：\n\t-i\tinstall安装（install）\n\t-v\t显示更详细的信息（verbose）\n\t-h\t打印#显示安装进度（hash）\n\n\n--nodeps\t不检测依赖性安装。\n\t软件时会检测依赖性，确定所需的底层软件是否安装。如果没有安装则会报错。如果我不管依赖性，想强行安装，可以使用这个选项。\n\t注意：这样不检测依赖性安装的软件基本是不能使用的，所以不建议这样做\n--replacefiles\t替换文件安装。\n\t如果安装软件包，可是包中部分文件已经存在，那么正常安装时候，会报错“某个文件已经存在”从而导致软件无法安装,\n\t使用这个选项可以忽视这个报错，而覆盖安装\n--replacepkgs\t替换软件包安装。\n\t如果软件包已经安装，此选项可以把软件包重复安装一遍。\n--force\t强制安装。\n\t不管是否已经安装，都重新安装。\n\t就是—replacefiles和—replacepkgs的综合。\n--test\t测试安装。\n\t不会实际安装，只是检测一下依赖性。\n\n--prefix\t指定安装路径。\n\t为安装软件指定安装路径，而不使用默认安装路径。\n\t注意：如果指定了安装路径，软件没有安装到系统默认路径中的话，系统会找不到这些安装的软件，需要进行手工配置才能被系统识别。\n\t所以rpm包我们一般都采用默认路径安装。\n\n\nxshell上传下载工具\n\n\n\nrz 下载\n\nsz 上传\n\n2）服务启动\n\n[root@localhost ~]# service 服务名 start|stop|restart|status \n[root@localhost ~]# systemctl start|stop|restart|status 服务名\n\n\n# ② rpm工具卸载rpm包\n\n# rpm -e 包名\n选项：\n\t--nodeps\t不检查依赖性\n\t-e\t\t\t卸载\n\n\n注意：卸载软件只需要跟软件包名字即可\n\n# ③ rpm包的升级rpm包\n\n# rpm -uvh 包全名\n或者\n# rpm -fvh 包全名\n\n选项说明：\n\t-v:输出详细信息\n\t-h:打印散列标记，一般和-v一起使用\n\t-u:升级软件包，如果该软件包没安装，会自动帮你安装\n\t-f:升级软件包，如果该软件包没安装，不会自动帮你安装\n\n\n# ④ 查看rpm包相关信息\n\n# 查看已经安装的所有rpm包\nrpm -qa 软件包名\nrpm -aq|grep 软件包名字\n\n# 查看已经安装软件的详细信息\nrpm -qi 软件包名\n# 查看未安装的软件包的详细信息\nrpm –qip 包全名\n\n# 查看已经安装的软件的文件列表\nrpm -ql 软件包名\n# 查看未安装的rpm包里的文件列表\nrpm -qlp 软件包(xxx.rpm)\n\n# 查看指定文件来自哪个rpm包\nrpm -qf 文件名\n\n# 查询软件包所依赖的软件包\nrpm –qr 包名\n# 查询未安装软件包所依赖的软件包\nrpm –qrp 包名\n\n\n# 查看已经安装软件的文档列表\nrpm -qd 软件包名\n\n\n# 查看已经安装软件的配置文件\nrpm -qc 软件包名\n\n\n\n\n\n\n选项：\n\t-q\t查询（query）\n\t-a\t所有（all）\n\t-i\t查询软件信息(information)\n\t-p\t查询没有安装的软件包（package）\n\t-l\t列出软件包中所有文件列表，以及安装目录\n\t-d\t查看文档\n\t-c\t查看配置文件目录\n\t-f\t系统文件属于哪个软件包（file）\n\t-r\t查询软件包的依赖性（requires）\n\n\n# ⑤ rpm工具其他安装选项\n\n--force\n表示强制\nrpm -ivh 软件包 --force \n强制安装软件包\nrpm -e 软件包名 --force \n强制卸载软件包\n\n\n\n--nodeps \n忽略依赖关系\nrpm -ivh 软件包 --nodeps\n忽略依赖关系安装\nrpm -e 软件包 --nodeps \n忽略依赖关系卸载\n\n\n\n其他了解：\nrpm --import key_file \n导入公钥用于检查rpm文件的签名\nrpm --checksig package.rpm \n检查rpm包的签名\nrpm工具管理rpm软件包\n\n安装、卸载、升级、查看\n缺点：有依赖关系需要我们人肉去解决 a----\x3eb和c\n\n\n# ⑥rpm校验\n\n[root@localhost ~]#rpm –va\n选项：\n\t-va\t校验本机已经安装的所有软件包\n\t\n[root@localhost ~]#rpm –v 已安装的包名\n选项：\n\t-v校验指定rpm包中的文件（verify）\n\t\n[root@localhost ~]#rpm –vf 系统文件名\n选项：\n\t-vf校验某个系统文件是否被修改\n\n\n验证举例\n\n[root@izuf616fn1k2l61xnal11vz html]# rpm -v nginx\ns.5....t.  c /etc/nginx/nginx.conf\n\n\n出现了提示信息，我们来解释下最前面共有8个信息内容，是表示验证内容的。文件名前面的c是表示这是个配置文件（configuration）。最后是文件名。那么验证内容中的8个信息的具体内容如下：\n\ns 文件大小是否改变 m 文件的类型或文件的权限（rwx）是否被改变 5 文件md5校验和是否改变（可以看成文件内容是否改变） d 设备的主从代码是否改变 l 文件路径是否改变 u 文件的属主（所有者）是否改变 g 文件的属组是否改变 t 文件的修改时间是否改变 apache配置文件的文件类型是c，那么还有哪些文件类型呢？\n\nc 配置文件（config file） d 普通文档（documentation） g “鬼”文件（ghost file），很少见，就是该文件不应该被这个rpm包包含 l 授权文件（license file） r 描述文件（read me）\n\n# ⑦数字证书\n\n刚刚的校验方法只能对已经安装的rpm包中的文件进行校验，但是如果rpm包本身就被动过手脚，那么校验就不能解决问题了。我们就必须使用数字证书验证了。\n\n数字证书有如下特点：\n\n * 首先必须找到原厂的公钥文件，然后进行安装\n * 再安装rpm包是，会去提取rpm包中的证书信息，然后和本机安装的原厂证书进行验证\n * 如果验证通过，则允许安装；如果验证不通过，则不允许安装并警告\n\n数字证书位置\n\n#光盘中的数字证书位置\n[root@localhost ~]# ll /media/centos7_iso/rpm-gpg-key-centos-7\n-rw-rw-r-- 17 root root 1690 12月 10 2015 /media/centos7_iso/rpm-gpg-key-centos-7\n\n\n#系统中的数字证书位置\n[root@localhost ~]# ll /etc/pki/rpm-gpg/rpm-gpg-key-centos-7\n-rw-r--r--. 1 root root 1690 10月 23 2020 /etc/pki/rpm-gpg/rpm-gpg-key-centos-7\n\n\n\n数字证书导入\n\n[root@localhost ~]# rpm --import /etc/pki/rpm-gpg/rpm-gpg-key-centos-7\n\n\n我们如何查询系统中安装好的数字证书呢？命令如下：\n\n[root@localhost ~]# rpm -qa | grep gpg-pubkey\ngpg-pubkey-621e9f35-58adea78\ngpg-pubkey-f4a80eb5-53a7ff4b\n\n\n数字证书移除\n\nrpm -e gpg-pubkey-621e9f35-58adea78\n\n\n⑧提取rpm包包中文件（了解）\n\n1）cpio命令\n\ncpio命令主要有三种基本模式：“-o”模式指的是copy-out模式，就是把数据备份到文件库中；“-i”模式指的是copy-in模式，就是把数据从文件库中恢复；“-p”模式指的是复制模式，就是不把数据备份到cpio库中，而是直接复制为其他文件。命令如下：\n\n\n\n举几个例子吧，先来看看使用cpio备份数据的方法，命令如下：\n\n\n\n再来看看如何恢复cpio的备份数据，命令如下：\n\n\n\n\n\n在centos5.x的版本中，是可以利用上面的命令备份与恢复指定的文件。但是到centos6.x当中，需要更加严谨。如果备份时使用绝对路径，则恢复的数据会直接到绝对路径指定的路径中，如果需要把数据恢复到当前目录中，则需要使用相对路径，例如：\n\n\n\n最后来演示一下cpio命令的“-p”复制模式，命令如下：\n\n\n\n2）提取rpm包中文件\n\n\n\n举个例子，现在我假设把系统中的/bin/ls命令不小心误删除了，那么我可以修复回来吗？这时有两种方法修复，要不就是使用—force选项覆盖安装一遍coreutils-8.4-19.el6.i686包，要不就可以使用cpio命令提取出/bin/ls命令文件，再把它拷贝到对应位置就可以了。不过我是怎么知道/bin/ls命令是属于coreutils-8.4-19.el6.i686这个软件包的呢？还记得-qf选项吗？命令如下：\n\n\n\n那么我们在讲rpm包中文件提取，所以我们使用第二章方法，cpio命令提取出ls命令文件，然后拷贝到对应位置，命令如下：\n\n\n\n# 2）==yum（dnf）工具管理==\n\nyum/dnf优点：能够自动解决依赖关系\n\n核心：需要有一个软件仓库，软件仓库指的是来存放软件包和软件包之间的依赖关系地方。\n\n\n\n 1. 需要有软件仓库\n    \n    * 仓库可以在本地——>本地yum源\n    \n    * 仓库可以在远程——>网络yum源——>网络必须ok\n\n 2. 需要告诉yum工具到哪个仓库里找\n    \n    * 默认有一个地方，存放了xxx.repo文件——>定义了去哪个仓库里找\n\n# yum源文件解析\n\nyum源配置文件保存在/etc/yum.repos.d/目录中，文件的扩展名一定是“.repo”。也就是说，yum源配置文件只要扩展名是“.repo”就会生效。\n\n[root@localhost ~]# ls /etc/yum.repos.d/\ncentos-base.repo  centos-cr.repo  centos-debuginfo.repo  centos-fasttrack.repo  centos-media.repo  \ncentos-sources.repo  centos-vault.repo  centos-x86_64-kernel.repo\n\n\n默认情况下centos-base.repo文件生效。\n\n\n\n[base]\nname=centos-$releasever\nenabled=1\nfailovermethod=priority\nbaseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.cloud.aliyuncs.com/centos/rpm-gpg-key-centos-7\n\n[updates]\nname=centos-$releasever\nenabled=1\nfailovermethod=priority\nbaseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.cloud.aliyuncs.com/centos/rpm-gpg-key-centos-7\n\n[extras]\nname=centos-$releasever\nenabled=1\nfailovermethod=priority\nbaseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.cloud.aliyuncs.com/centos/rpm-gpg-key-centos-7\n\n\n> 解释一下base这个容器。\n> \n>  * [base]：容器名称，一定要放在[]中。\n>  * name：容器说明，可以自己随便写。\n>  * mirrorlist：镜像站点，这个可以注释掉。\n>  * baseurl：我们的yum源服务器的地址。默认是centos官方的yum源服务器，是可以使用的。 如果你觉得慢，则可以改成你喜欢的yum源地址。\n>  * enabled：此容器是否生效，如果不写或写成enabled=1则表示此容器生效，写成enabled=0 则表示此容器不生效。\n>  * gpgcheck：如果为1则表示rpm的数字证书生效；如果为0则表示rpm的数字证书不生效。\n>  * gpgkey：数字证书的公钥文件保存位置。不用修改。\n\n光盘yum源centos-media.repo\n\n# 搭建本地光盘yum源\n\n第一步：放入centos安装光盘，并挂载光盘到指定位置。命令如下：\n\n\n\n第二步：修改其他几个yum源配置文件的扩展名，让它们失效，因为只有扩展名是“*.repo”的文件才能作为yum源配置文件。当然也可以删除其他几个yum源配置文件，但是如果删除了，当你又想用网络作为yum源时，就没有了参考文件，所以最好还是修改扩展名。命令如下：\n\n\n\n第三步：修改光盘yum源配置文件centos-media.repo，参照以下方法修改：\n\n\n\n\n\n配置完成，现在可以感受一下yum的便捷了。\n\n# 搭建本地yum源\n\n1）本地仓库的分类\n\n * baseos存储库\n\n> baseos存储库旨在提供一套核心的底层操作系统的功能，为==基础软件==安装库\n\n * appstream存储库\n\n> appstream存储库中包括额外的==用户空间应用程序、运行时语言和数据库==，以支持不同的工作负载和用例。appstream中的内容有两种格式——熟悉的rpm格式和称为模块的rpm格式扩展\n\n2）配置本地仓库\n\n步骤1：挂载镜像到本地系统\n\n/mnt\n\n/media 一般用于第三方设备的挂载点\n\n\n\n[root@redhat8 ~]# mount -o ro /dev/sr0 /mnt\n手动将/dev/sr0设备挂载到指定 /mnt目录下\n\n\n列出baseos和appstream的内容如下说明仓库已准备好\n[root@redhat8 ~]# ls /mnt/baseos/\npackages repodata\n[root@redhat8 ~]# ls /mnt/appstream/\npackages repodata\n\n\n步骤2：修改配置文件指定本地存储库\n\n\n\n[root@redhat8 yum.repos.d]# pwd\n/etc/yum.repos.d\n\n[root@redhat8 yum.repos.d]# cat local.repo\n[baseos]\nname=baseos\n# 开启\nenabled=1\n# 本地软件包地址\nbaseurl=file:///mnt/baseos\n# 不校验签名\ngpgcheck=0\n\n[appstream]\nname=appstream\nenabled=1\nbaseurl=file:///mnt/appstream\ngpgcheck=0\n\n\n步骤3：查看是否成功\n\n清空yum缓存\n[root@redhat8 yum.repos.d]# yum clean all\n创建yum缓存\n[root@redhat8 yum.repos.d]# yum makecache\n查看仓库\n[root@redhat8 yum.repos.d]# yum repolist\n仓库标识 仓库名称 状态\nappstream \t\tappstream \t\t\t4,672\nbaseos\t\t\t baseos \t\t\t1,658\n\n\n# yum（dnf）工具使用\n\n * 查看\n   \n   查看仓库软件\n   # yum list | grep samba\n   \n   查看已安装的软件\n   # yum list installed | samba\n   # rpm -q vsftpd\n   # dnf list installed| grep vsftpd\n   \n   search查找\n   # yum search httpd\n   \n   查询指定软件包的信息。\n   # yum info samba\n   \n   \n   \n\n * 安装软件包\n   \n   # yum -y install 软件包1 软件包2\n   # yum -y groupinstall "包组名"\n   注意：\n   1.其中，-y选项表示取消交互\n   2.包组里面包含很多的软件包。\n   \n   \n   \n\n * 升级rpm包\n   \n   注意：在进行升级操作时，yum源服务器中软件包的版本要比本机安装的软件包的版本高。\n   \n   # yum update 软件包名\n   # yum update \n   \n   \n   \n   \n   \n\n * 卸载软件包\n   \n   再次强调一下，除非你确定卸载的软件的依赖包不会对系统产生影响，否则不要执行yum的卸载，因为很有可能在卸载软件包的同时卸载的依赖包也是重要的系统文件，这就有可能导致系统崩溃。卸载命令如下：\n   \n   # yum -y remove 软件包名\n   # yum -y groupremove "包组名"\n   \n   \n   \n\n# yum组管理命令\n\n查询可以安装的软件组\n\n\n\n查询软件组内包含的软件\n\n\n\n安装软件组\n\n\n\n卸载软件组\n\n\n\n\n# 4、源码包安装\n\n1、应该选择哪种软件包？\n\n * 如果软件包是给大量客户提供访问，建议使用源码包安装，如lamp环境搭建，因为源码包效率更高。\n * 如果软件包是给linux底层使用，或只给少量客户访问，建议使用rpm包安装，因为rpm包简单。\n\n2、源码包是从哪里来的？\n\nrpm包是光盘中直接包含的，所以不需要用户单独下载。而源码包是通过官方网站下载的，如果需要使用，是需要单独下载的。\n\n3、是否可以在系统中即安装rpm包的apache，又安装源码包的apache？\n\n答案是可以，因为两种安装方法安装的apache，安装位置是不一样的，例如：\n\n\n\n1.4生产服务器上，是否会同时安装两种apache？\n\n当然不会啊，因为系统中只有一个80端口，所以你只能启动一个apache，装多个只能浪费资源。我们建议安装源码包的apache。\n\n\n# 安装过程\n\n我们来解释一下源码包安装的具体步骤。\n\n（1）下载软件包。\n\n（2）解压缩。\n\n（3）进入解压目录。\n\n（4）./configure 编译前准备\n\n这一步主要有三个作用：\n\n① 在安装之前需要检测系统环境是否符合安装要求。\n\n② 定义需要的功能选项。“./configure”支持的功能选项较多，可以执行“./configure --help” 命令查询其支持的功能。一般都会通过“./configure --prefix=安装路径”来指定安装路径。\n\n③ 把系统环境的检测结果和定义好的功能选项写入makefile文件，后续的编译和安装需要依赖这个文件的内容。\n\n需要注意的是，configure不是系统命令，而是源码包软件自带的一个脚本程序，所以必须采用“./configure”方式执行（“./”代表在当前目录下）。\n\n\n\n（5）make 编译\n\nmake会调用gcc编译器，并读取makefile文件中的信息进行系统软件编译。编译的目的就是把源码程序转变为能被linux识别的可执行文件，这些可执行文件保存在当前目录下。编译过程较为耗时，需要有足够的耐心。\n\n（6）make clean：清空编译内容（非必需步骤）。\n\n如果在“./configure”或“make”编译中报错，那么我们在重新执行命令前一定要记得执行make clean命令，它会清空makefile文件或编译产生的“.o”头文件。\n\n（7）make install：编译安装\n\n这才是真正的安装过程，一般会写清楚程序的安装位置。如果忘记指定安装目录，则可以把这个命令的执行过程保存下来，以备将来删除使用。\n\n> vim install\n> \n> \n> \n> \n> 启动\n> \n> \n> \n> ps aux\n\n\n# 删除\n\n源码包没有删除命令，如果需要删除，直接删除安装目录即可。\n\n\n# 打入补丁\n\n# 补丁的生成\n\n\n\n举例\n\n\n\n比较下两个文件的不同，并生成补丁文件“txt.patch”，命令如下：\n\n\n\n#后一个文件比前一个文件多两行（+表示）\n\n# 打入补丁\n\n\n\n“-pn”不好理解，我们说明下。补丁文件是要打入旧文件的，但是你当前所在的目录和补丁文件中的记录的目录是不一定匹配的，所以就需要“-pn”来同步两个目录。比如我当前是在“/root/test”目录中（我要打补丁的旧文件就在当前目录下），补丁文件中记录的文件目录为“/root/test/old.txt”，这时如果写入“-p1”（在补丁文件目录中取消一级目录）那么补丁文件就会打入“/root/test/root/test/old.txt”文件中，这显然是不对的。那如果写入的是“-p2”（在补丁文件目录中取消二级目录）那么补丁文件打入的就是“/root/test/test/old.txt”,这显然也不对。如果写入的是“-p3”（在补丁文件目录中取消三级目录）那么补丁文件就是打入的“/root/test/old.txt”，我们的old.txt文件就在这个目录下，所以就应该是“-p3”。那么我们更新下“old.txt”文件，命令如下：\n\n\n\n\n# 脚本安装程序\n\n脚本程序包并不多见，所以在软件包分类中并没有把它列为一类。它更加类似于windows下的程序安装，有一个可执行的安装程序，只要运行安装程序，然后进行简单的功能定制选择（比如指定安装目录等），就可以安装成功，只不过是在字符界面下完成的。\n\n目前常见的脚本程序以各类硬件的驱动居多，我们需要学习一下这类软件的安装方式，以备将来不时之需。\n\n\n# webmin安装\n\n我们来看看脚本程序如何安装和使用。安装一个叫作webmin的工具软件，webmin是一个基于web的系统管理界面。借助任何支持表格和表单的浏览器（和file manager模块所需要的java），你就可以设置用户账号、apache、dns、文件共享等。webmin包括一个简单的web服务器和许多cgi程序，这些程序可以直接修改系统文件，比如/etc/inetd.conf和/etc/passwd。web服务器和所有的cgi程序都是用perl 5编写的，没有使用任何非标准perl模块。也就是说，webmin是一个用perl语言写的、可以通过浏览器管理linux的软件。\n\n首先下载webmin软件，地址为http://sourceforge.net/projects/webadmin/files/webmin/，这里下载的是webmin-1.610.tar.gz。\n\n接下来解压缩软件，命令如下：\n\n\n\n进入解压目录，命令如下：\n\n\n\n执行安装程序setup.sh，并指定功能选项，命令如下：\n\n\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704434924e3},{title:"命令--3.Linux帮助文档",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--3.Linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.html",relativePath:"zs-use/linux/基本使用/命令--3.Linux帮助文档.md",key:"v-ce96bf66",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--3.Linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.html",headers:[{level:2,title:"man",slug:"man",normalizedTitle:"man",charIndex:22},{level:2,title:"info",slug:"info",normalizedTitle:"info",charIndex:1502},{level:2,title:"help",slug:"help",normalizedTitle:"help",charIndex:1561},{level:2,title:"--help选项",slug:"help选项",normalizedTitle:"--help选项",charIndex:1674},{level:2,title:"相关官方文档",slug:"相关官方文档",normalizedTitle:"相关官方文档",charIndex:1796}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"man info help --help选项 相关官方文档",content:"# 命令--3.Linux帮助文档\n\n\n# man\n\n# man man\n    ANUAL SECTIONS\n    The standard sections of the manual include:\n    1    User Commands 所有用户使用命令\n    2    System Calls 系统调用\n    3    C Library Functions 函数库\n    4    Devices and Special Files 设备与特殊文件\n    5    File Formats and Conventions 文档格式说明\n    6    Games et. Al. 游戏\n    7    Miscellanea 杂项\n    8    System Administration tools and Deamons 系统管理员与程序用户相关\n\n\n一般情况是不需要使用章节号，例如：\n# man 1 ls\n# man ls\n# man useradd\n# man setfacl （/EXAMPLES）\n# man -f passwd 列出所有章节中的passwd手册\n# man 1 passwd passwd命令的帮助\n# man 5 passwd 用户配置文件的帮助\n# man -a passwd 在所有章节中查找\n# man -k passwd 以关键字导出man page\n\n程序猿手册 man 23467\n管理员手册 man 158\n\n\n> man命令的快捷键\n\n快捷键    作用\n上箭头    向上移动一行\n下箭头    向下移动一行\nPgUp   向上翻一页\nPgDn   向下翻一页\ng      移动到第一页\nG      移动到最后一页\nq      退出\n/字符串   从当前页向下搜索字符串\n?字符串   从当前页向上搜索字符串\nn      当搜索字符串时，可以使用n键找到下一个字符串\nN      当搜索字符串时，使用N键反向查询字符串。\n       也就是说，如果使用“/字符串”方式搜索，则N键表示向上搜索字符串；\n       如果使用“?字符串”方式搜索，则N键表示向下搜索字符串\n\n> man命令的帮助级别（了解）\n\n级别   作用\n1    普通用户可以执行的系统命令和可执行文件的帮助\n2    内核可以调用的函数和工具的帮助\n3    C语言函数的帮助\n4    设备和特殊文件的帮助\n5    配置文件的帮助\n6    游戏的帮助（个人版的Linux中是有游戏的）\n7    杂项的帮助\n8    超级用户可以执行的系统命令的帮助\n9    内核的帮助\n\nman -f命令或whatis命令\n\n#查看命令拥有哪个级别的帮助\n\n[root@xiaoshaozi ~]# whatis passwd\npasswd (1)           - update user's authentication tokens\nsslpasswd (1ssl)     - compute password hashes\n[root@xiaoshaozi ~]# man -f passwd\npasswd (1)           - update user's authentication tokens\nsslpasswd (1ssl)     - compute password hashes\n\n\n> 了解\n> \n> man -k命令或apropos命令\n> \n> #查看和命令相关的所有帮助\n\n\n# info\n\ninfo命令的帮助信息是一套完整的资料，每个单独命令的帮助信息只是这套完整资料中的某一个小章节。\n\n\n# help\n\n> help只能查看内置命令\n> \n> type 命令判断是否是内置命令\n> \n>  * help 命令查看内部命令\n>  * 命令 --help查看外部命令的帮助\n\ncp --help\nhelp cd\n\n\n\n# --help选项\n\n绝大多数命令都可以使用“--help”选项来查看帮助，这也是一种获取帮助的方法。\n\n[root@xiaoshaozi ~]# ls --help\n\n\n这种方法非常简单，输出的帮助信息基本上是man命令的信息简要版。\n\n\n# 相关官方文档\n\nhttp://httpd.apache.org/docs/2.4/\nhttp://nginx.org/\nhttp://tengine.taobao.org/nginx_docs/cn/docs/\nhttps://www.zabbix.com/documentation/3.4/zh/manual\nhttps://puppet.com/docs\n其他社区\nhttps://www.linuxidc.com/\n等等\n",normalizedContent:"# 命令--3.linux帮助文档\n\n\n# man\n\n# man man\n    anual sections\n    the standard sections of the manual include:\n    1    user commands 所有用户使用命令\n    2    system calls 系统调用\n    3    c library functions 函数库\n    4    devices and special files 设备与特殊文件\n    5    file formats and conventions 文档格式说明\n    6    games et. al. 游戏\n    7    miscellanea 杂项\n    8    system administration tools and deamons 系统管理员与程序用户相关\n\n\n一般情况是不需要使用章节号，例如：\n# man 1 ls\n# man ls\n# man useradd\n# man setfacl （/examples）\n# man -f passwd 列出所有章节中的passwd手册\n# man 1 passwd passwd命令的帮助\n# man 5 passwd 用户配置文件的帮助\n# man -a passwd 在所有章节中查找\n# man -k passwd 以关键字导出man page\n\n程序猿手册 man 23467\n管理员手册 man 158\n\n\n> man命令的快捷键\n\n快捷键    作用\n上箭头    向上移动一行\n下箭头    向下移动一行\npgup   向上翻一页\npgdn   向下翻一页\ng      移动到第一页\ng      移动到最后一页\nq      退出\n/字符串   从当前页向下搜索字符串\n?字符串   从当前页向上搜索字符串\nn      当搜索字符串时，可以使用n键找到下一个字符串\nn      当搜索字符串时，使用n键反向查询字符串。\n       也就是说，如果使用“/字符串”方式搜索，则n键表示向上搜索字符串；\n       如果使用“?字符串”方式搜索，则n键表示向下搜索字符串\n\n> man命令的帮助级别（了解）\n\n级别   作用\n1    普通用户可以执行的系统命令和可执行文件的帮助\n2    内核可以调用的函数和工具的帮助\n3    c语言函数的帮助\n4    设备和特殊文件的帮助\n5    配置文件的帮助\n6    游戏的帮助（个人版的linux中是有游戏的）\n7    杂项的帮助\n8    超级用户可以执行的系统命令的帮助\n9    内核的帮助\n\nman -f命令或whatis命令\n\n#查看命令拥有哪个级别的帮助\n\n[root@xiaoshaozi ~]# whatis passwd\npasswd (1)           - update user's authentication tokens\nsslpasswd (1ssl)     - compute password hashes\n[root@xiaoshaozi ~]# man -f passwd\npasswd (1)           - update user's authentication tokens\nsslpasswd (1ssl)     - compute password hashes\n\n\n> 了解\n> \n> man -k命令或apropos命令\n> \n> #查看和命令相关的所有帮助\n\n\n# info\n\ninfo命令的帮助信息是一套完整的资料，每个单独命令的帮助信息只是这套完整资料中的某一个小章节。\n\n\n# help\n\n> help只能查看内置命令\n> \n> type 命令判断是否是内置命令\n> \n>  * help 命令查看内部命令\n>  * 命令 --help查看外部命令的帮助\n\ncp --help\nhelp cd\n\n\n\n# --help选项\n\n绝大多数命令都可以使用“--help”选项来查看帮助，这也是一种获取帮助的方法。\n\n[root@xiaoshaozi ~]# ls --help\n\n\n这种方法非常简单，输出的帮助信息基本上是man命令的信息简要版。\n\n\n# 相关官方文档\n\nhttp://httpd.apache.org/docs/2.4/\nhttp://nginx.org/\nhttp://tengine.taobao.org/nginx_docs/cn/docs/\nhttps://www.zabbix.com/documentation/3.4/zh/manual\nhttps://puppet.com/docs\n其他社区\nhttps://www.linuxidc.com/\n等等\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"命令--7.1.文件权限(普通)",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.1.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E6%99%AE%E9%80%9A%EF%BC%89.html",relativePath:"zs-use/linux/基本使用/命令--7.1.文件权限（普通）.md",key:"v-737ebd86",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.1.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E6%99%AE%E9%80%9A%EF%BC%89.html",headers:[{level:2,title:"一、权限概述",slug:"一、权限概述",normalizedTitle:"一、权限概述",charIndex:25},{level:3,title:"㈠ 什么是权限",slug:"一-什么是权限",normalizedTitle:"㈠ 什么是权限",charIndex:37},{level:3,title:"㈡ 权限设置目的",slug:"二-权限设置目的",normalizedTitle:"㈡ 权限设置目的",charIndex:50},{level:3,title:"㈢ 文件权限的分类",slug:"三-文件权限的分类",normalizedTitle:"㈢ 文件权限的分类",charIndex:64},{level:2,title:"二、普通权限(重点)",slug:"二、普通权限-重点",normalizedTitle:"二、普通权限(重点)",charIndex:77},{level:3,title:"㈠ 理解普通权限rwx含义",slug:"一-理解普通权限rwx含义",normalizedTitle:"㈠ 理解普通权限rwx含义",charIndex:93},{level:3,title:"㈡ 理解UGO的含义",slug:"二-理解ugo的含义",normalizedTitle:"㈡ 理解ugo的含义",charIndex:112},{level:3,title:"㈢ 修改文件普通权限(chmod)",slug:"三-修改文件普通权限-chmod",normalizedTitle:"㈢ 修改文件普通权限(chmod)",charIndex:128},{level:3,title:"课堂练习",slug:"课堂练习",normalizedTitle:"课堂练习",charIndex:151},{level:2,title:"三、文件的属主和属组",slug:"三、文件的属主和属组",normalizedTitle:"三、文件的属主和属组",charIndex:159},{level:3,title:"㈠ 如何查看文件的属主和属组",slug:"一-如何查看文件的属主和属组",normalizedTitle:"㈠ 如何查看文件的属主和属组",charIndex:175},{level:3,title:"㈡ 如何修改文件的属主和属组",slug:"二-如何修改文件的属主和属组",normalizedTitle:"㈡ 如何修改文件的属主和属组",charIndex:195},{level:2,title:"demo案例",slug:"demo案例",normalizedTitle:"demo案例",charIndex:213}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"一、权限概述 ㈠ 什么是权限 ㈡ 权限设置目的 ㈢ 文件权限的分类 二、普通权限(重点) ㈠ 理解普通权限rwx含义 ㈡ 理解UGO的含义 ㈢ 修改文件普通权限(chmod) 课堂练习 三、文件的属主和属组 ㈠ 如何查看文件的属主和属组 ㈡ 如何修改文件的属主和属组 demo案例",content:'# 命令--7.1.文件权限(普通)\n\n\n\n * 一、权限概述\n   * ㈠ 什么是权限\n   * ㈡ 权限设置目的\n   * ㈢ 文件权限的分类\n * 二、普通权限(重点)\n   * ㈠ 理解普通权限rwx含义\n   * ㈡ 理解UGO的含义\n   * ㈢ 修改文件普通权限(chmod)\n   * 课堂练习\n * 三、文件的属主和属组\n   * ㈠ 如何查看文件的属主和属组\n   * ㈡ 如何修改文件的属主和属组\n * demo案例\n\n\n\n\n# 一、权限概述\n\n\n# ㈠ 什么是权限\n\n权限： 在计算机系统中，权限是指某个计算机用户具有使用软件资源的权利。\n\n思考：计算机资源分为哪两部分？\n\n * 硬件资源 硬盘、CPU、内存、网卡等物理硬件资源\n\n * 软件资源\n   \n   软件：操作系统(特殊的软件)、应用程序。只要不启动，这些软件就是一堆静态的文件，并且静静的躺在我们计算机的磁盘中。\n   \n   软件资源：Linux系统中，一切皆文件！SO，这里的软件资源就是文件资源。\n\n总结：\n\n我们今天所讲的权限，指的就是：文件资源所拥有的相关权限，即文件权限\n\n\n# ㈡ 权限设置目的\n\n文件权限的设置目的：是想让某个用户（Linux操作系统中的用户）有权利操作文件\n\n\n# ㈢ 文件权限的分类\n\n普通权限\n\n * 用户正常情况去操作文件所具有的权限\n\n高级权限\n\n * 用户对某个文件操作有特殊需求，而普通权限不能满足，需要给文件设置高级权限\n\n默认权限\n\n * 用户在系统中创建一个文件，该文件默认都会有一个权限，该权限是默认有的\n\n注意：\n\n权限是设置在文件上的，而不是用户；设置权限目的是让相应的人（用户）去操作相应的文件\n\n\n# 二、普通权限(重点)\n\n\n# ㈠ 理解普通权限rwx含义\n\n1、读权限—r(read)\n\n * 针对目录\n   \n   一个目录拥有r权限，说明可以查看该目录里的内容（ls命令列出）\n\n * 针对普通文件\n   \n   一个普通文件拥有r权限，说明可以查看该文件的内容(cat/head/tail/less/more等命令查看)\n\n * 读权限**r**（read）用数字表示是4\n\n2、写权限—w(write)\n\n * 针对目录\n   \n   一个目录拥有w权限，说明可以在该目录里创建、删除、重命名等操作（mkdir/touch/mv/rm等）\n\n * 针对普通文件\n   \n   一个普通文件拥有w权限，说明可以修改该文件的内容（vi/vim编辑器编辑文件）\n\n * 写权限w（write）用数字表示是**2**\n\n3、执行权限—x(execute)\n\n * 针对目录\n   \n   一个目录拥有x权限，说明可以**进入或切换到**该目录里（cd命令）\n\n * 针对普通文件\n   \n   一个普通文件拥有x权限，说明可以**执行**该文件（一般程序文件、脚本文件、命令都需要执行权限）\n\n * 执行权限x（execute）用数字表示是1\n\n4、没有权限—横杠-\n\n没有任何权限用横杠-表示，数字表示是0\n\n\n# ㈡ 理解UGO的含义\n\n1、UGO指的是什么\n\nUGO，指的是**用户身份**，每个字母代表不同的用户身份。\n\n * U（the user who owns it）\n   \n   文件的拥有者(owner)或者创建者\n\n * G（other users in the file’s group）\n   \n   在文件的所属组（默认是创建文件的用户的主组）里的用户\n\n * O（other users not in the file’s group）\n   \n   既不是文件的创建者，也不在文件属组里的用户，称为其他人\n\n注意：\n\n除了上面ugo以外，还有一个字母**a**（all users）,表示所有用户，包含ugo\n\n2、如何判断不同身份的用户对文件的权限\n\n查看文件详细信息，包含权限信息：\n[root@localhost ~]# ls -l\ntotal 144\n-rw-r--r--. 1 root root 9 Mar 2 20:38 1.sh\n-rw-------. 1 root root 1651 Feb 28 11:00 anaconda-ks.cfg\ndrwxr-xr-x. 2 root root 4096 Mar 6 18:34 Desktop\ndrwxr-xr-x. 2 root root 4096 Feb 28 14:12 dir1\n\n\n\n\n\n# ㈢ 修改文件普通权限(chmod)\n\n1、chmod命令用法\n\nchmod [选项] 模式 文件名\n常见选项：\n-R, --recursive 递归更改目录和目录里文件的权限\n\n\n2、举例说明\n\n① 通过字母形式更改文件权限\n\nu:表示文件拥有者\ng:表示文件属组里的用户\no:表示其他人，即不是文件的创建者，也不在文件属组里\na:表示所有人\n\n\n * 环境准备\n\n[root@heima ~]# mkdir /tmp/dir1\n[root@heima ~]# touch /tmp/dir1/file{1..5}\n[root@heima ~]# touch /tmp/test{1..3}\n[root@heima ~]# ll /tmp/ -R\n\n\n * 使用字母形式修改文件权限\n\n[root@heima tmp]# pwd\n/tmp\n[root@heima tmp]# ll test1\n-rw-r--r--. 1 root root 0 Mar 6 20:45 test1\n[root@heima tmp]# chmod u+x test1\n[root@heima tmp]# ll test1\n-rwxr--r--. 1 root root 0 Mar 6 20:45 test1\n[root@heima tmp]# chmod g+w test1\n[root@heima tmp]# ll test1\n-rwxrw-r--. 1 root root 0 Mar 6 20:45 test1\n[root@heima tmp]# chmod o-r test1\n[root@heima tmp]# ll test1\n-rwxrw----. 1 root root 0 Mar 6 20:45 test1\n\n[root@heima tmp]# ll test2\n-rw-r--r--. 1 root root 0 Mar 6 20:45 test2\n[root@heima tmp]# chmod a+x test2\n[root@heima tmp]# ll test2\n-rwxr-xr-x. 1 root root 0 Mar 6 20:45 test2\n\n[root@heima tmp]# ll test3\n-rw-r--r--. 1 root root 0 Mar 6 20:45 test3\n[root@heima tmp]# chmod u+x,g+w,o-r test3\n[root@heima tmp]# ll test3\n-rwxrw----. 1 root root 0 Mar 6 20:45 test3\n\n[root@heima tmp]# chmod u=rw,g=rx,o+r test3\n[root@heima tmp]# ll test3\n-rw-r-xr--. 1 root root 0 Mar 6 20:45 test3\n\n修改目录的权限：\n[root@heima tmp]# ll -d dir1/\ndrwxr-xr-x. 2 root root 4096 Mar 6 20:45 dir1/\n[root@heima tmp]# ll dir1/\ntotal 0\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file1\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file2\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file3\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file4\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file5\n\n1.只修改目录本身的权限\n[root@heima tmp]# chmod g+w dir1/\n[root@heima tmp]# ll -d dir1/\ndrwxrwxr-x. 2 root root 4096 Mar 6 20:45 dir1/\n[root@heima tmp]# ll dir1/\ntotal 0\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file1\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file2\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file3\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file4\n-rw-r--r--. 1 root root 0 Mar 6 20:45 file5\n说明：目录下面文件的权限并没有修改\n\n2.修改目录以及目录里所有文件的权限（递归修改），使用-R参数\n[root@heima tmp]# chmod -R o+w dir1/\n[root@heima tmp]# ll -d dir1/\ndrwxrwxrwx. 2 root root 4096 Mar 6 20:45 dir1/\n[root@heima tmp]# ll dir1/\ntotal 0\n-rw-r--rw-. 1 root root 0 Mar 6 20:45 file1\n-rw-r--rw-. 1 root root 0 Mar 6 20:45 file2\n-rw-r--rw-. 1 root root 0 Mar 6 20:45 file3\n-rw-r--rw-. 1 root root 0 Mar 6 20:45 file4\n-rw-r--rw-. 1 root root 0 Mar 6 20:45 file5\n\n\n② 通过数字形式更改文件权限\n\n * 学会用数字表示权限\n\n字母和数字对应关系：\nr——4\nw——2\nx——1\n-——0\n\n\nrw- r-x r-- 用数字表示就是654\nrwx rw- --- 用数字表示就是760\n755 用字母表示就是rwx r-x r-x\n644 用字母表示就是rw- r-- r--\n\n\n * 使用数字形式修改文件权限\n\n# chmod 644 file1 rw-r--r--\n# chmod 700 file2\n# chmod -R 755 dir1\n\n\n总结：\n\n 1. 普通权限当中rwx含义\n    \n    * 目录：r（ls列出目录内容），w（创建、删除、重命名等操作），x（cd进入目录）\n    \n    * 文件：r（cat等相关工具查看文件内容），w（修改文件内容），x（可执行，程序，脚本文件等）\n\n 2. 理解用户身份（UGO）\n    \n    * U：文件的拥有者（创建）\n    \n    * G：文件所属组里成员\n    \n    * O：陌生人（其他人）\n\n 3. 如何设置文件的权限？——>chmod命令\n    \n    * 用字母形式\n    \n    chmod u+x,g=rw,o-x filename\n    \n    \n    * 数字形式\n    \n    r——>4\n    w——>2\n    x——>1\n    -——>0\n    rw- r-x r-- = 654\n    \n    \n    chmod 755 filename rwx r-x r-x\n    \n\n 4. 是否可以在目录里创建或删除文件？看当前目录本身是否有w权限！！\n\n 5. 对于正常操作目录而言，一般都会具有r和x权限\n\n\n# 课堂练习\n\n 1. 创建5个用户user01~user05和一个admin组\n\n 2. 将user01~user03用户加入到admin组里\n\n 3. user01用户在其家目录里创建file1~file3三个文件\n\n 4. user02用户编辑/home/user01/file1文件的内容：good good study,day day up!\n\n 5. user05用户往/home/user01/file1文件里追加内容：I known\n\n 6. user04用删除/home/user01家目录的所有文件\n\nid user01\nuseradd user01\nuseradd user02 \nuseradd user03 \nuseradd user04\nuseradd user05\n\ngrep admin /etc/group\ngroupdel admin\ngroupadd admin\ntail /etc/group\n\n\nusermod -G admin user01\ngpasswd -M user01,user02\ngpasswd -a user03\nid user02\ntail -1 /etc/group\n\nsu user01\npwd\ntouch file{1..3}\n\n\nchmod o+rx /home/user01\nchmod o+w /home/user01/file1\necho "good good study,day day up" > file1\necho "I konwn" > file1\n\n\n\n\n\n# 三、文件的属主和属组\n\n\n# ㈠ 如何查看文件的属主和属组\n\n\n\n\n# ㈡ 如何修改文件的属主和属组\n\n# 1、chown命令修改\n\nchown 命令既可以修改文件的属主，也可以修改文件的属组。\n\n只修改文件的属主\n# chown 用户名 文件名\n\n修改文件的属主和属组\n# chown 用户名.组名 文件名\n# chown 用户名:组名 文件名\n# chown 用户名. 文件名 //没有指定组名，默认是用户的主组\n\n只修改文件的属组\n# chown .组名 文件名\n# chown :组名 文件名\n\n可以加-R选项，表示递归修改\n\n\n# 2、chgrp命令修改\n\nchgrp 命令只能修改文件的属组。\n\n# chgrp 组名 文件名\n\n\n\n# demo案例\n\n一、创建目录在跳板机\n\n[root@heima ~]# mkdir /data/code -p\n\n\n二、目录做好权限管控\n\n1、该目录只给开发人员使用\n\n[root@heima ~]# ll -d /data/code/\ndrwxrwx---. 2 root coding 58 8月 1 22:18 /data/code/\n\nchgrp codeing /data/code/\nchmod g+w /data/code/\nchmod o-rx /data/code/\n\n\n2、开发所有人只能自己管理自己\n\n测试结果：\n开发部门的人可以删除其他人的文件，不满足需求，怎么办？\n普通权限无法满足我们的需求，尝试使用高级权限解决\nchmod o+t /data/code\n',normalizedContent:'# 命令--7.1.文件权限(普通)\n\n\n\n * 一、权限概述\n   * ㈠ 什么是权限\n   * ㈡ 权限设置目的\n   * ㈢ 文件权限的分类\n * 二、普通权限(重点)\n   * ㈠ 理解普通权限rwx含义\n   * ㈡ 理解ugo的含义\n   * ㈢ 修改文件普通权限(chmod)\n   * 课堂练习\n * 三、文件的属主和属组\n   * ㈠ 如何查看文件的属主和属组\n   * ㈡ 如何修改文件的属主和属组\n * demo案例\n\n\n\n\n# 一、权限概述\n\n\n# ㈠ 什么是权限\n\n权限： 在计算机系统中，权限是指某个计算机用户具有使用软件资源的权利。\n\n思考：计算机资源分为哪两部分？\n\n * 硬件资源 硬盘、cpu、内存、网卡等物理硬件资源\n\n * 软件资源\n   \n   软件：操作系统(特殊的软件)、应用程序。只要不启动，这些软件就是一堆静态的文件，并且静静的躺在我们计算机的磁盘中。\n   \n   软件资源：linux系统中，一切皆文件！so，这里的软件资源就是文件资源。\n\n总结：\n\n我们今天所讲的权限，指的就是：文件资源所拥有的相关权限，即文件权限\n\n\n# ㈡ 权限设置目的\n\n文件权限的设置目的：是想让某个用户（linux操作系统中的用户）有权利操作文件\n\n\n# ㈢ 文件权限的分类\n\n普通权限\n\n * 用户正常情况去操作文件所具有的权限\n\n高级权限\n\n * 用户对某个文件操作有特殊需求，而普通权限不能满足，需要给文件设置高级权限\n\n默认权限\n\n * 用户在系统中创建一个文件，该文件默认都会有一个权限，该权限是默认有的\n\n注意：\n\n权限是设置在文件上的，而不是用户；设置权限目的是让相应的人（用户）去操作相应的文件\n\n\n# 二、普通权限(重点)\n\n\n# ㈠ 理解普通权限rwx含义\n\n1、读权限—r(read)\n\n * 针对目录\n   \n   一个目录拥有r权限，说明可以查看该目录里的内容（ls命令列出）\n\n * 针对普通文件\n   \n   一个普通文件拥有r权限，说明可以查看该文件的内容(cat/head/tail/less/more等命令查看)\n\n * 读权限**r**（read）用数字表示是4\n\n2、写权限—w(write)\n\n * 针对目录\n   \n   一个目录拥有w权限，说明可以在该目录里创建、删除、重命名等操作（mkdir/touch/mv/rm等）\n\n * 针对普通文件\n   \n   一个普通文件拥有w权限，说明可以修改该文件的内容（vi/vim编辑器编辑文件）\n\n * 写权限w（write）用数字表示是**2**\n\n3、执行权限—x(execute)\n\n * 针对目录\n   \n   一个目录拥有x权限，说明可以**进入或切换到**该目录里（cd命令）\n\n * 针对普通文件\n   \n   一个普通文件拥有x权限，说明可以**执行**该文件（一般程序文件、脚本文件、命令都需要执行权限）\n\n * 执行权限x（execute）用数字表示是1\n\n4、没有权限—横杠-\n\n没有任何权限用横杠-表示，数字表示是0\n\n\n# ㈡ 理解ugo的含义\n\n1、ugo指的是什么\n\nugo，指的是**用户身份**，每个字母代表不同的用户身份。\n\n * u（the user who owns it）\n   \n   文件的拥有者(owner)或者创建者\n\n * g（other users in the file’s group）\n   \n   在文件的所属组（默认是创建文件的用户的主组）里的用户\n\n * o（other users not in the file’s group）\n   \n   既不是文件的创建者，也不在文件属组里的用户，称为其他人\n\n注意：\n\n除了上面ugo以外，还有一个字母**a**（all users）,表示所有用户，包含ugo\n\n2、如何判断不同身份的用户对文件的权限\n\n查看文件详细信息，包含权限信息：\n[root@localhost ~]# ls -l\ntotal 144\n-rw-r--r--. 1 root root 9 mar 2 20:38 1.sh\n-rw-------. 1 root root 1651 feb 28 11:00 anaconda-ks.cfg\ndrwxr-xr-x. 2 root root 4096 mar 6 18:34 desktop\ndrwxr-xr-x. 2 root root 4096 feb 28 14:12 dir1\n\n\n\n\n\n# ㈢ 修改文件普通权限(chmod)\n\n1、chmod命令用法\n\nchmod [选项] 模式 文件名\n常见选项：\n-r, --recursive 递归更改目录和目录里文件的权限\n\n\n2、举例说明\n\n① 通过字母形式更改文件权限\n\nu:表示文件拥有者\ng:表示文件属组里的用户\no:表示其他人，即不是文件的创建者，也不在文件属组里\na:表示所有人\n\n\n * 环境准备\n\n[root@heima ~]# mkdir /tmp/dir1\n[root@heima ~]# touch /tmp/dir1/file{1..5}\n[root@heima ~]# touch /tmp/test{1..3}\n[root@heima ~]# ll /tmp/ -r\n\n\n * 使用字母形式修改文件权限\n\n[root@heima tmp]# pwd\n/tmp\n[root@heima tmp]# ll test1\n-rw-r--r--. 1 root root 0 mar 6 20:45 test1\n[root@heima tmp]# chmod u+x test1\n[root@heima tmp]# ll test1\n-rwxr--r--. 1 root root 0 mar 6 20:45 test1\n[root@heima tmp]# chmod g+w test1\n[root@heima tmp]# ll test1\n-rwxrw-r--. 1 root root 0 mar 6 20:45 test1\n[root@heima tmp]# chmod o-r test1\n[root@heima tmp]# ll test1\n-rwxrw----. 1 root root 0 mar 6 20:45 test1\n\n[root@heima tmp]# ll test2\n-rw-r--r--. 1 root root 0 mar 6 20:45 test2\n[root@heima tmp]# chmod a+x test2\n[root@heima tmp]# ll test2\n-rwxr-xr-x. 1 root root 0 mar 6 20:45 test2\n\n[root@heima tmp]# ll test3\n-rw-r--r--. 1 root root 0 mar 6 20:45 test3\n[root@heima tmp]# chmod u+x,g+w,o-r test3\n[root@heima tmp]# ll test3\n-rwxrw----. 1 root root 0 mar 6 20:45 test3\n\n[root@heima tmp]# chmod u=rw,g=rx,o+r test3\n[root@heima tmp]# ll test3\n-rw-r-xr--. 1 root root 0 mar 6 20:45 test3\n\n修改目录的权限：\n[root@heima tmp]# ll -d dir1/\ndrwxr-xr-x. 2 root root 4096 mar 6 20:45 dir1/\n[root@heima tmp]# ll dir1/\ntotal 0\n-rw-r--r--. 1 root root 0 mar 6 20:45 file1\n-rw-r--r--. 1 root root 0 mar 6 20:45 file2\n-rw-r--r--. 1 root root 0 mar 6 20:45 file3\n-rw-r--r--. 1 root root 0 mar 6 20:45 file4\n-rw-r--r--. 1 root root 0 mar 6 20:45 file5\n\n1.只修改目录本身的权限\n[root@heima tmp]# chmod g+w dir1/\n[root@heima tmp]# ll -d dir1/\ndrwxrwxr-x. 2 root root 4096 mar 6 20:45 dir1/\n[root@heima tmp]# ll dir1/\ntotal 0\n-rw-r--r--. 1 root root 0 mar 6 20:45 file1\n-rw-r--r--. 1 root root 0 mar 6 20:45 file2\n-rw-r--r--. 1 root root 0 mar 6 20:45 file3\n-rw-r--r--. 1 root root 0 mar 6 20:45 file4\n-rw-r--r--. 1 root root 0 mar 6 20:45 file5\n说明：目录下面文件的权限并没有修改\n\n2.修改目录以及目录里所有文件的权限（递归修改），使用-r参数\n[root@heima tmp]# chmod -r o+w dir1/\n[root@heima tmp]# ll -d dir1/\ndrwxrwxrwx. 2 root root 4096 mar 6 20:45 dir1/\n[root@heima tmp]# ll dir1/\ntotal 0\n-rw-r--rw-. 1 root root 0 mar 6 20:45 file1\n-rw-r--rw-. 1 root root 0 mar 6 20:45 file2\n-rw-r--rw-. 1 root root 0 mar 6 20:45 file3\n-rw-r--rw-. 1 root root 0 mar 6 20:45 file4\n-rw-r--rw-. 1 root root 0 mar 6 20:45 file5\n\n\n② 通过数字形式更改文件权限\n\n * 学会用数字表示权限\n\n字母和数字对应关系：\nr——4\nw——2\nx——1\n-——0\n\n\nrw- r-x r-- 用数字表示就是654\nrwx rw- --- 用数字表示就是760\n755 用字母表示就是rwx r-x r-x\n644 用字母表示就是rw- r-- r--\n\n\n * 使用数字形式修改文件权限\n\n# chmod 644 file1 rw-r--r--\n# chmod 700 file2\n# chmod -r 755 dir1\n\n\n总结：\n\n 1. 普通权限当中rwx含义\n    \n    * 目录：r（ls列出目录内容），w（创建、删除、重命名等操作），x（cd进入目录）\n    \n    * 文件：r（cat等相关工具查看文件内容），w（修改文件内容），x（可执行，程序，脚本文件等）\n\n 2. 理解用户身份（ugo）\n    \n    * u：文件的拥有者（创建）\n    \n    * g：文件所属组里成员\n    \n    * o：陌生人（其他人）\n\n 3. 如何设置文件的权限？——>chmod命令\n    \n    * 用字母形式\n    \n    chmod u+x,g=rw,o-x filename\n    \n    \n    * 数字形式\n    \n    r——>4\n    w——>2\n    x——>1\n    -——>0\n    rw- r-x r-- = 654\n    \n    \n    chmod 755 filename rwx r-x r-x\n    \n\n 4. 是否可以在目录里创建或删除文件？看当前目录本身是否有w权限！！\n\n 5. 对于正常操作目录而言，一般都会具有r和x权限\n\n\n# 课堂练习\n\n 1. 创建5个用户user01~user05和一个admin组\n\n 2. 将user01~user03用户加入到admin组里\n\n 3. user01用户在其家目录里创建file1~file3三个文件\n\n 4. user02用户编辑/home/user01/file1文件的内容：good good study,day day up!\n\n 5. user05用户往/home/user01/file1文件里追加内容：i known\n\n 6. user04用删除/home/user01家目录的所有文件\n\nid user01\nuseradd user01\nuseradd user02 \nuseradd user03 \nuseradd user04\nuseradd user05\n\ngrep admin /etc/group\ngroupdel admin\ngroupadd admin\ntail /etc/group\n\n\nusermod -g admin user01\ngpasswd -m user01,user02\ngpasswd -a user03\nid user02\ntail -1 /etc/group\n\nsu user01\npwd\ntouch file{1..3}\n\n\nchmod o+rx /home/user01\nchmod o+w /home/user01/file1\necho "good good study,day day up" > file1\necho "i konwn" > file1\n\n\n\n\n\n# 三、文件的属主和属组\n\n\n# ㈠ 如何查看文件的属主和属组\n\n\n\n\n# ㈡ 如何修改文件的属主和属组\n\n# 1、chown命令修改\n\nchown 命令既可以修改文件的属主，也可以修改文件的属组。\n\n只修改文件的属主\n# chown 用户名 文件名\n\n修改文件的属主和属组\n# chown 用户名.组名 文件名\n# chown 用户名:组名 文件名\n# chown 用户名. 文件名 //没有指定组名，默认是用户的主组\n\n只修改文件的属组\n# chown .组名 文件名\n# chown :组名 文件名\n\n可以加-r选项，表示递归修改\n\n\n# 2、chgrp命令修改\n\nchgrp 命令只能修改文件的属组。\n\n# chgrp 组名 文件名\n\n\n\n# demo案例\n\n一、创建目录在跳板机\n\n[root@heima ~]# mkdir /data/code -p\n\n\n二、目录做好权限管控\n\n1、该目录只给开发人员使用\n\n[root@heima ~]# ll -d /data/code/\ndrwxrwx---. 2 root coding 58 8月 1 22:18 /data/code/\n\nchgrp codeing /data/code/\nchmod g+w /data/code/\nchmod o-rx /data/code/\n\n\n2、开发所有人只能自己管理自己\n\n测试结果：\n开发部门的人可以删除其他人的文件，不满足需求，怎么办？\n普通权限无法满足我们的需求，尝试使用高级权限解决\nchmod o+t /data/code\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"命令--7.2.文件权限（高级）",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.2.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89.html",relativePath:"zs-use/linux/基本使用/命令--7.2.文件权限（高级）.md",key:"v-00a43673",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--7.2.%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89.html",headers:[{level:2,title:"1、冒险位(SETUID)",slug:"_1、冒险位-setuid",normalizedTitle:"1、冒险位(setuid)",charIndex:73},{level:2,title:"2、强制位(SETGID)",slug:"_2、强制位-setgid",normalizedTitle:"2、强制位(setgid)",charIndex:646},{level:2,title:"3、粘滞位(STICKY)",slug:"_3、粘滞位-sticky",normalizedTitle:"3、粘滞位(sticky)",charIndex:1129},{level:3,title:"㈡ 高级权限设置",slug:"二-高级权限设置",normalizedTitle:"㈡ 高级权限设置",charIndex:1449},{level:3,title:"㈢ 总结",slug:"三-总结",normalizedTitle:"㈢ 总结",charIndex:2931},{level:2,title:"默认权限(了解)",slug:"默认权限-了解",normalizedTitle:"默认权限(了解)",charIndex:3133},{level:3,title:"1、临时控制",slug:"_1、临时控制",normalizedTitle:"1、临时控制",charIndex:3266},{level:3,title:"2、永久控制",slug:"_2、永久控制",normalizedTitle:"2、永久控制",charIndex:4093},{level:3,title:"默认权限总结",slug:"默认权限总结",normalizedTitle:"默认权限总结",charIndex:4922},{level:2,title:"ACL",slug:"acl",normalizedTitle:"acl",charIndex:5229},{level:3,title:"开启ACL",slug:"开启acl",normalizedTitle:"开启acl",charIndex:5375},{level:3,title:"ACL基本命令",slug:"acl基本命令",normalizedTitle:"acl基本命令",charIndex:5850},{level:3,title:"最大有效权限mask",slug:"最大有效权限mask",normalizedTitle:"最大有效权限mask",charIndex:6288},{level:3,title:"删除ACL权限",slug:"删除acl权限",normalizedTitle:"删除acl权限",charIndex:5927},{level:3,title:"设置ACL策略(setfacl)",slug:"设置acl策略-setfacl",normalizedTitle:"设置acl策略(setfacl)",charIndex:6666},{level:3,title:"查看ACL策略(getfacl)",slug:"查看acl策略-getfacl",normalizedTitle:"查看acl策略(getfacl)",charIndex:13022},{level:2,title:"chattr",slug:"chattr",normalizedTitle:"chattr",charIndex:13059},{level:2,title:"作业1",slug:"作业1",normalizedTitle:"作业1",charIndex:14387},{level:2,title:"作业2",slug:"作业2",normalizedTitle:"作业2",charIndex:14558},{level:2,title:"综合练习",slug:"综合练习",normalizedTitle:"综合练习",charIndex:14767}],lastUpdated:"2024年1月8日星期一下午2点46分",lastUpdatedTimestamp:1704696387e3,headersStr:"1、冒险位(SETUID) 2、强制位(SETGID) 3、粘滞位(STICKY) ㈡ 高级权限设置 ㈢ 总结 默认权限(了解) 1、临时控制 2、永久控制 默认权限总结 ACL 开启ACL ACL基本命令 最大有效权限mask 删除ACL权限 设置ACL策略(setfacl) 查看ACL策略(getfacl) chattr 作业1 作业2 综合练习",content:'# 命令--7.2.文件权限（高级）\n\n李大毛：file1——>属主和属组是李大毛\n\n王二狗：使用vim编辑器修改李大毛的文件file1\n\n\n# 1、冒险位(SETUID)\n\n * 冒险位，指文件操作者(用户)临时拥有文件拥有者的权限\n\n * 冒险位，一般针对的是命令或者脚本文件\n\n * 冒险位，用字母表示是s或S；数字表示是4\n\n * 冒险位的设置：chmod u+s 文件名 或者 chmod 4xxx 文件名\n   \n   [root@xiaoshaozi zstest]# ll /usr/bin/vim\n   -rwxr-xr-x 1 root root 2294216 6月  28 2019 /usr/bin/vim\n   \n   [root@xiaoshaozi zstest]# chmod u+s /usr/bin/vim\n   [root@xiaoshaozi zstest]# ll /usr/bin/vim\n   -rwsr-xr-x 1 root root 2294216 6月  28 2019 /usr/bin/vim\n   \n   [root@xiaoshaozi zstest]# chmod 0755 /usr/bin/vim\n   [root@xiaoshaozi zstest]# ll /usr/bin/vim\n   -rwxr-xr-x 1 root root 2294216 6月  28 2019 /usr/bin/vim\n   \n\n\n# 2、强制位(SETGID)\n\n * 强制位，一般针对的是目录\n   \n   如果一个目录拥有强制位，那么任何用户在该目录里所创建的任何文件的属组都会继承该目录的属组。/dir1----\x3eadmin yunwei---\x3e/dir1/file1\n\n * 强制位，用字母表示是s或S；数字表示是2\n\n * 强制位的设置： chmod g+s 文件名 或者 chmod 2xxx 文件名\n   \n   [root@xiaoshaozi zstest]# chmod 2755 dir1\n   [root@xiaoshaozi zstest]# ll\n   总用量 12\n   drwxr-sr-x+ 2 root root 4096 1月   5 10:44 dir1\n   \n   \n   [root@xiaoshaozi zstest]# chmod g-s dir1\n   [root@xiaoshaozi zstest]# ll\n   总用量 12\n   drwxr-xr-x+ 2 root root 4096 1月   5 10:44 dir1\n   \n\n\n# 3、粘滞位(STICKY)\n\n * 粘滞位，一般针对的是公共目录\n   \n   如果一个公共目录拥有粘滞位，那么该目录下的文件，只有root和文件的创建者可以删除，其他人只能自己管理自己。（A用户不能删除B用户创建的文件）\n   \n   控制删除！针对公共目录——》任何人都可以使用\n\n * 粘滞位，用字母表示是t或T；数字表示是1\n\n * 粘滞位的设置： chmod o+t 文件名 或者 chmod 1xxx 文件名\n   \n   [root@xiaoshaozi zstest]# ll -d /tmp/\n   drwxrwxrwt. 10 root root 4096 1月   5 10:27 /tmp/\n   \n   \n\n\n# ㈡ 高级权限设置\n\n# 1、冒险位举例\n\n需求：\n给一个vim命令设置冒险位，目的是任何人拿vim去修改文件可以临时获得文件拥有者的权限\n\n[root@heima tmp]# which vim\n/usr/bin/vim\n[root@heima tmp]# ll /usr/bin/vim\n-rwxr-xr-x. 1 root root 2324712 Dec 22 2016 /usr/bin/vim\n[root@heima tmp]# chmod u+s /usr/bin/vim\n或者\n[root@heima tmp]# chmod 4755 /usr/bin/vim\n[root@heima tmp]# ll /usr/bin/vim\n-rwsr-xr-x. 1 root root 2324712 Dec 22 2016 /usr/bin/vim\n测试验证，普通用户使用vim修改一个本没有权限修改的文件：\n[root@heima tmp]# ll /etc/passwd\n-rw-r--r--. 1 root root 1650 Mar 5 20:39 /etc/passwd\n[root@heima tmp]# su - user01\n[user01@localhost ~]$ vim /etc/passwd\n验证是否可以修改成功，如果可以，说明user01用户临时拥有了/etc/passwd文件拥有者的权限\n\n\n# 2、强制位举例\n\n需求：\n给目录dir2设置一个强制位，测试是否任何人在该目录里创建的文件属组都是该目录的属组\n\n[root@heima tmp]# ll -d dir2\ndrwxr-xr-x. 2 root root 4096 Mar 6 13:42 dir2\n给dir2增加强制位：\n[root@heima tmp]# chmod g+s dir2\n给dir2目录设置权限，让其他人可以写\n[root@heima tmp]# chmod o+w dir2\n[root@heima tmp]# ll -d dir2\ndrwxr-srwx. 2 root root 4096 Mar 6 13:42 dir2\n测试普通用户user01在dir2目录里创建文件的属组是否是dir2的属组\n[root@heima tmp]# su - user01\n[user01@localhost ~]$ touch /tmp/dir2/file1\n[user01@localhost ~]$ ll /tmp/dir2/file1\n-rw-rw-r--. 1 user01 root 0 Mar 6 13:44 /tmp/dir2/file1\n\n\n# 3、粘滞位举例\n\n需求：\n在创建一个公共目录/tmp/dir3,要求所有人都可以在该公共目录里创建、删除文件；但是只能自己管理自己，不能删除别人\n的文件\n\n[root@localhost ~]# mkdir /tmp/dir3\n[root@localhost ~]# chmod 777 /tmp/dir3\n[root@localhost ~]# chmod o+t /tmp/dir3\n或者一步到位：\n[root@localhost ~]# chmod 1777 /tmp/dir3\n[root@localhost ~]# ll -d /tmp/dir3\ndrwxrwxrwt. 2 root root 4096 Mar 6 13:52 /tmp/dir3\n测试验证：\n自己完成\n\n\n\n# ㈢ 总结\n\n * 高级权限分类\n   \n   * 冒险位——>针对命令 s/S 4 chmod u+s 命令文件\n   \n   * 强制位——>针对目录 s/S 2 chmod g+s 目录\n   \n   * 粘滞位——>针对公共目录 t/T 1 chmod o+t 公共目录\n\n * 高级权限设置\n\nchmod 4xxx 文件名\nchmod 2xxx 目录名\nchmod 1777 公共目录\n\n\n\n# 默认权限(了解)\n\n㈠ 什么是文件的默认权限\n\n所谓文件的默认权限(遮罩权限)，是指用户创建文件后，文件天生就有的权限，不需要设置。\n\n㈡ 文件默认权限由谁控制\n\n文件默认权限由一个叫做**umask**的东西来控制。\n\n㈢ umask如何控制文件默认权限\n\n\n# 1、临时控制\n\n * 什么是临时控制？\n   \n   > 临时控制，指的是用命令 umask 临时设置，只在当前终端当前进程中生效。\n\n查看当前用户的umask：\n[root@localhost ~]# umask\n0022\n\n[root@localhost ~]# su - user01\n[user01@localhost ~]$ umask\n0002\n\n注意：\n1. 管理员和普通用户的umask不同，就表示管理员和普通用户创建的文件的默认权限不同！\n2. 第1位数字表示高级权限；后面3位数字表示普通权限\n\n普通用户：目录（775）,文件（664）\n管理员： 目录（755），文件（644）\n\n\n * 如何临时设置用户的umask？\n   \n   写在前面：\n   \n   Linux系统中，默认创建目录的最大权限是0777；文件的最大权限是0666\n\n[root@localhost ~]# umask 0007 临时设置root用户的umask为0007\n\n问：umask=0007，那么在当前终端上root用户所创建目录和普通文件的权限分别是什么呢？\n计算过程如下：\numask=文件的最大权限-文件的默认权限\n\n目录：\n目录的默认权限=0777-umask=0777-0007=0770 rwxrwx---\n\n普通文件：\n文件的默认权限=0666-umask=0666-0007=0660 rw-rw----\n\n\n\n说明：\n1.权限用数字表示时没有负数，所以最小就是0\n2.默认权限规则遵循Linux系统中权限最小化原则\n\n$ stu1 umask 0003\n目录：0777-0003=0774 rwxrwxr--\n文件：0666-0003=0663 rw-rw--wx 实际权限：rw-rw-r--\n$ user01 umask 0005\n文件：0666-0005=0661 rw-rw---x 实际权限:rw-rw--w-\n\n\n\n# 2、永久控制\n\n * 什么是永久设置？\n   \n   > 永久设置，指的是通过修改配置文件设置，对用户的所有终端所有进程生效\n\n * 修改哪个配置文件呢？\n   \n   1. 相关配置文件介绍\n   \n   # 全局配置文件（针对所有用户所有进程）\n   /etc/profile\n   系统和用户的环境变量信息，当用户第一次登录时,该文件被读取\n   /etc/bashrc\n   每个运行的bash信息（系统别名、函数及默认权限的定义），当bash被打开时,该文件被读取\n   \n   \n   # 局部配置文件（针对某个特定用户以及用户的所有进程）\n   ~/.bashrc\n   当前用户的bash信息，当用户登录和每次打开新的shell时该文件被读取\n   ~/.bash_profile\n   当前用户的环境变量，当用户登录时，该文件被读取\n   ~/.bash_history\n   保存当前用户历史命令的文件\n   ~/.bash_logout\n   当用户退出bash或者终端时，会首先执行该文件里的代码，然后再退出\n   \n   \n   2. 如何永久设置用户的umask？\n   \n   1.针对所有用户生效\n   # vim /etc/bashrc\n   在该文件的最后增加以下内容：\n   umask 0007\n   重新读取该配置文件让其立马生效\n   # source /etc/bashrc\n   或者\n   # . /etc/bashrc\n   \n   \n   2.针对某个用户生效\n   比如，只针对user01用户生效\n   [user01@localhost ~]$ vim ~/.bashrc\n   在该文件的最后增加以下内容：\n   umask 0007\n   \n   总结：\n   1. 配置文件，分为全局配置和局部配置\n   2. 全局和局部配置冲突，一般情况下以局部配置为准；二般情况，看情况\n   \n\n\n# 默认权限总结\n\n 1. 什么是文件的默认权限？\n    \n    * 文件被（用户）创建出来后，天生自带的权限\n\n 2. 文件的默认权限由谁来控制？\n    \n    * 由umask的值来控制文件的默认权限\n    \n    * umask值针对的用户\n\n 3. 如何去更改或设置用户的umask呢？\n    \n    1）临时设置\n    \n    umask 007 只针对当前用户在当前终端生效\n    \n    \n    2）永久设置\n    \n    * 针对所有人生效——>/etc/bashrc（重新读取生效）\n    \n    * 针对某个人生效——>~/.bashrc（重新读取生效）\n\n\n# ACL\n\n㈠ ACL能做什么\n\n 1. ACL访问控制策略可以作为前面所讲权限的补充，更加细的来控制文件的权限\n 2. ACL策略可以只针对某个用户在文件上有相应权限\n 3. ACL策略也可以只针对多个用户或者一个组里的所有用户在文件上有相应权限\n\n\n\n㈡ 如何设置文件的ACL策略\n\n\n# 开启ACL\n\n[root@localhost ~]# dumpe2fs -h /dev/sda3\n#dumpe2fs命令是查询指定分区详细文件系统信息的命令\n选项：\n\t-h\t仅显示超级块中信息，而不显示磁盘块组的详细信息。\n\t\n...省略部分输出...\nDefault mount options:\tuser_xattr acl\n...省略部分输出...\n\n\n如果没有开启，手工开启分区的ACL权限：\n\n[root@localhost ~]# mount -o remount,acl /\n# 重新挂载根分区，并挂载加入acl权限\n\n\n也可以通过修改/etc/fstab文件，永久开启ACL权限：\n\n[root@localhost ~]# vi /etc/fstab\nUUID=c2ca6f57-b15c-43ea-bca0-f239083d8bd2\t/\text4\tdefaults,acl\t1\t1\n# 加入acl\n[root@localhost ~]# mount -o remount /\n# 重新挂载文件系统或重启动系统，使修改生效\n\n\n\n# ACL基本命令\n\ngetfacl 文件名\t\t\t 查询文件的ACL权限\nsetfacl 选项 文件名\t\t设定ACL权限\n\t-m\t\t设定ACL权限\n\t-b\t\t删除ACL权限\n\t-x:用户  删除单个用户的ACL权限\n\n\n\nsetfacl -m u:用户名:权限 文件名\nsetfacl -m g:组名:权限 文件名\n\nsetfacl -m u:aa:rwx /test   给test目录赋予aa是读写执行的ACL权限\nsetfacl -m u:cc:rx -R soft/ 赋予递归ACL权限，只能赋予目录\n\t-R递归\n\nsetfacl -m d:u:aa:rwx -R /test\tACL默认权限。注意：默认权限只能赋予目录\n\n注意：如果给目录赋予acl权限，两条命令都要输入\n递归与默认的区别：\nsetfacl -m u:cc:rx -R soft/\t\t只对已经存在的文件生效\nsetfacl -m d:u:aa:rwx -R /test\t只对以后新建的文件生效\n\n\n\n# 最大有效权限mask\n\n[root@localhost /]# setfacl -m m:rx project/\n#设定mask权限为r-x。使用“m:权限”格式\n[root@localhost /]# getfacl project/\n# file: project/\n# owner: root\n# group: tgroup\nuser::rwx\ngroup::rwx\t\t\t#effective:r-x\nmask::r-x\n#mask权限变为了r-x\nother::---\n\n\n\n# 删除ACL权限\n\n[root@localhost /]# setfacl -x u:st /project/\n#删除指定用户和用户组的ACL权限\n[root@localhost /]# setfacl -b project/\n#会删除文件的所有的ACL权限\n\n\n\n# 设置ACL策略(setfacl)\n\n常用选项：\n-m 修改或者设置ACL策略\n-R 递归授权，对目录下已存在的目录或文件有acl策略，但新建的文件没有\n-x 去掉某个用户或者某个组的ACL策略\n-b 删除所有的acl策略\n-d 默认ACL策略，只针对目录，该目录下新建的目录和文件都会继承acl策略\nmask: 定义除其他人和所有者外的最大权限\n\n\n重点掌握：\n\nsetfacl -m u:用户:rwx /home/redhat/file1 给单个用户单独加权限\nsetfacl -m g:组名:rwx /home/redhat/file1 给单个组单独加权限\n\nsetfacl -x u:用户 /home/redhat/file1 去掉某个用户的权限\nsetfacl -x g:组名 /home/redhat/file1 去掉某个组的acl策略\nsetfacl -b /home/redhat/file1 删除文件上所有的acl策略\n# setfacl -m u:user01:rw file1 针对于单个用户给可读可写权限\n# setfacl -m g:sysadmin:rw file1 针对于单个组给可读可写权限\n\n\n====》准备工作《====\n[root@xiaoshaozi zstest]# touch file{1..3}\n[root@xiaoshaozi zstest]# chmod 600 file*\n[root@xiaoshaozi zstest]# ll\n总用量 0\n-rw------- 1 root root 0 1月   5 10:20 file1\n-rw------- 1 root root 0 1月   5 10:20 file2\n-rw------- 1 root root 0 1月   5 10:20 file3\n\n[root@xiaoshaozi zstest]# useradd user01\n[root@xiaoshaozi zstest]# useradd user02\n\n\n> 给单个用户、用户组 单独加权限\n\n[root@xiaoshaozi zstest]# setfacl -m u:user01:rw file1\n[root@xiaoshaozi zstest]# su user02\n[user02@xiaoshaozi zstest]$ vim file1\n[user02@xiaoshaozi zstest]$ cat file1\ncat: file1: 权限不够\n\n[root@xiaoshaozi zstest]# su user01\n[user01@xiaoshaozi zstest]$ vim file1\n[user01@xiaoshaozi zstest]$ cat file1\nuser01可以读写\n[user01@xiaoshaozi zstest]$ getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rw-\ngroup::---\nmask::rw-\nother::---\n\n[user01@xiaoshaozi zstest]$ getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nother::---\n\n[root@xiaoshaozi zstest]# groupadd usertest\n[root@xiaoshaozi zstest]# setfacl -m g:usertest:rw file2\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw-rw----+ 1 root root 19 1月   5 10:25 file1\n-rw-rw----+ 1 root root  0 1月   5 10:20 file2\n-rw-------  1 root root  0 1月   5 10:20 file3\n[root@xiaoshaozi zstest]# getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\ngroup:usertest:rw-\nmask::rw-\nother::---\n\n\n> 单独删除ACL权限\n\n[root@xiaoshaozi zstest]# setfacl -x u:user01 file1\n[root@xiaoshaozi zstest]# getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nmask::---\nother::---\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw-------+ 1 root root 19 1月   5 10:25 file1\n-rw-rw----+ 1 root root  0 1月   5 10:20 file2\n-rw-------  1 root root  0 1月   5 10:20 file3\n[root@xiaoshaozi zstest]# setfacl -x m: file1\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw-------  1 root root 19 1月   5 10:25 file1\n-rw-rw----+ 1 root root  0 1月   5 10:20 file2\n-rw-------  1 root root  0 1月   5 10:20 file3\n\n\n> 删除所有ACL权限\n\n[root@xiaoshaozi zstest]# getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\ngroup:usertest:rw-\nmask::rw-\nother::---\n[root@xiaoshaozi zstest]# setfacl -b file2\n[root@xiaoshaozi zstest]# getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nother::---\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw------- 1 root root 19 1月   5 10:25 file1\n-rw------- 1 root root  0 1月   5 10:20 file2\n-rw------- 1 root root  0 1月   5 10:20 file3\n\n\n> mask设置other的最大权限\n\n[root@xiaoshaozi zstest]# getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nother::---\n\n[root@xiaoshaozi zstest]# setfacl -m m::r file1\n[root@xiaoshaozi zstest]# getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nmask::r--\nother::---\n\n\n> 目录递归授权\n\nroot@xiaoshaozi zstest]# mkdir dir{1..2}\n[root@xiaoshaozi zstest]# ll\n总用量 12\ndrwxr-xr-x  2 root root 4096 1月   5 10:37 dir1\ndrwxr-xr-x  2 root root 4096 1月   5 10:37 dir2\n-rw-r-----+ 1 root root   19 1月   5 10:25 file1\n-rw-------  1 root root    0 1月   5 10:20 file2\n-rw-------  1 root root    0 1月   5 10:20 file3\n[root@xiaoshaozi zstest]# setfacl -Rm u:user01:rwx dir1\n[root@xiaoshaozi zstest]# getfacl dir1\n# file: dir1\n# owner: root\n# group: root\nuser::rwx\nuser:user01:rwx\ngroup::r-x\nmask::rwx\nother::r-x\n\n[root@xiaoshaozi zstest]# cd dir1\n[root@xiaoshaozi dir1]# touch dir1_file{1..3}\n[root@xiaoshaozi dir1]# ll\n总用量 0\n-rw-r--r-- 1 root root 0 1月   5 10:39 dir1_file1\n-rw-r--r-- 1 root root 0 1月   5 10:39 dir1_file2\n-rw-r--r-- 1 root root 0 1月   5 10:39 dir1_file3\n[root@xiaoshaozi dir1]# cd ..\n[root@xiaoshaozi zstest]# setfacl -Rm u:user01:rwx dir1\n[root@xiaoshaozi zstest]# cd dir1\n[root@xiaoshaozi dir1]# ll\n总用量 0\n-rw-rwxr--+ 1 root root 0 1月   5 10:39 dir1_file1\n-rw-rwxr--+ 1 root root 0 1月   5 10:39 dir1_file2\n-rw-rwxr--+ 1 root root 0 1月   5 10:39 dir1_file3\n[root@xiaoshaozi dir1]# getfacl *\n# file: dir1_file1\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rwx\ngroup::r--\nmask::rwx\nother::r--\n\n# file: dir1_file2\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rwx\ngroup::r--\nmask::rwx\nother::r--\n\n# file: dir1_file3\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rwx\ngroup::r--\nmask::rwx\nother::r--\n\n\n[root@xiaoshaozi dir1]# su user01\n[user01@xiaoshaozi dir1]$ touch file1\n[user01@xiaoshaozi dir1]$ ls\ndir1_file1  dir1_file2  dir1_file3  file1\n[user01@xiaoshaozi dir1]$ ll\n总用量 0\n-rw-rwxr--+ 1 root   root   0 1月   5 10:39 dir1_file1\n-rw-rwxr--+ 1 root   root   0 1月   5 10:39 dir1_file2\n-rw-rwxr--+ 1 root   root   0 1月   5 10:39 dir1_file3\n-rw-rw-r--  1 user01 user01 0 1月   5 10:44 file1\n\n\n> 新创建的文件授权\n\n[root@xiaoshaozi zstest]# setfacl -dm u:user01:rwx dir2\n[root@xiaoshaozi zstest]# getfacl dir2\n# file: dir2\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:user:user01:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n\n[root@xiaoshaozi zstest]# setfacl -m u:user01:rwx dir2\n[root@xiaoshaozi zstest]# getfacl dir2\n# file: dir2\n# owner: root\n# group: root\nuser::rwx\nuser:user01:rwx\ngroup::r-x\nmask::rwx\nother::r-x\ndefault:user::rwx\ndefault:user:user01:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n\n[root@xiaoshaozi zstest]# su user01\n[user01@xiaoshaozi zstest]$ cd dir2\n[user01@xiaoshaozi dir2]$ touch file1\n[user01@xiaoshaozi dir2]$ mkdir dir1\n[user01@xiaoshaozi dir2]$ ll\n总用量 4\ndrwxrwxr-x+ 2 user01 user01 4096 1月   5 10:48 dir1\n-rw-rw-r--+ 1 user01 user01    0 1月   5 10:48 file1\n\n[user01@xiaoshaozi dir2]$ getfacl dir1 file1\n# file: dir1\n# owner: user01\n# group: user01\nuser::rwx\nuser:user01:rwx\ngroup::r-x\nmask::rwx\nother::r-x\ndefault:user::rwx\ndefault:user:user01:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n\n# file: file1\n# owner: user01\n# group: user01\nuser::rw-\nuser:user01:rwx                 #effective:rw-\ngroup::r-x                      #effective:r--\nmask::rw-\nother::r--\n\n\n\n\n# 查看ACL策略(getfacl)\n\n# getfacl 文件名\n\n\n\n# chattr\n\n> 文件系统属性chattr权限\n\n1、命令格式\n\n[root@localhost ~]#chattr [+-=] [选项]文件或目录名\n选项：\n\t+:\t增加权限\n\t-:\t删除权限\n\t=:\t等于某权限\n\ti:\t对文件，不允许对文件进行删除、改名，也不能添加和修改数据；\n\t\t对目录，只能修改目录下文件的数据，但不允许建立和删除文件。\n\ta:\t对文件，只能在文件中增加数据，但是不能删除也不能修改数据；\n\t\t对目录，只允许在目录中建立和修改文件，但是不允许删除\n\te:\tLinux中绝大多数的文件都默认拥有e属性。\n\t\t表示该文件是使用ext文件系统进行存储的，而且不能使用“chattr -e”命令取消e属性。\n\n\n2、查看文件系统属性lsattr\n\n[root@localhost ~]# lsattr 选项 文件名\n选项：\n\t-a\t显示所有文件和目录\n\t-d\t若目标是目录，仅列出目录本身的属性，而不是子文件的\n\n\n3、举例\n\n例1：\n#给文件赋予i属性\n[root@localhost ~]# touch ftest\n#建立测试文件\n[root@localhost ~]# chattr +i ftest\n[root@localhost ~]# rm -rf ftest\nrm:无法删除"ftest":不允许的操作\n#赋予i属性后，root也不能删除\n[root@localhost ~]# echo 111 >> ftes\n-bash: ftest: 权限不够\n#也不能修改文件的数据\n\n\n#给目录赋予i属性\n[root@localhost ~]# mkdir dtest\n#建立测试目录\n[root@localhost dtest]# touch dtest/abc\n#再建立一个测试文件abc\n[root@localhost ~]# chattr +i dtest/\n#给目录赋予i属性\n[root@localhost ~]# cd dtest/\n[root@localhost dtest]# touch bcd\ntouch:无法创建"bcd":权限不够\n#dtest目录不能新建文件\n[root@localhost dtest]# echo 11 >> abc\n[root@localhost dtest]# cat abc\n11\n#但是可以修改文件内容\n[root@localhost dtest]# rm -rf abc\nrm:无法删除"abc":权限不够\n#不能删除\n\n\n例2：\n[root@localhost ~]# mkdir -p /back/log\n#建立备份目录\n[root@localhost ~]# chattr +a /back/log/\n#赋予a属性\n[root@localhost ~]# cp /var/log/messages /back/log/\n#可以复制文件和新建文件到指定目录\n[root@localhost ~]# rm -rf /back/log/messages\nrm:无法删除"/back/log/messages":不允许的操作\n#但是不允许删除\n\n\n\n# 课后实战\n\n\n# 作业1\n\n 1. root用户新建目录 /tmp/dir1，要求目录的所属组是tom\n\n 2. 创建tom用户，tom用户是否允许在/tmp/dir1下建立文件tomfile？如果不允许，如何让tom用户在/tmp/dir1目录里创建文件tomfile?\n\n 3. 用户jack如果想修改tom用户创建的tomfile文件，怎么做？\n\n\n# 作业2\n\n以普通用户user01身份登录，新建公共目录/shared/sysadmin并且属于sysadmin组\n\n 1. 要求组成员有读写访问的权限，其他成员没有任何权限；\n\n 2. 要求任何人在/shared/sysadmin面创建的文件全部属于sysadmin组\n\n 3. 要求harry可写，natasha不能读写\n\n 4. 要求该目录下的文件只有root和文件创建者可以删，其他人不能删除别人的文件\n\n\n# 综合练习\n\n 1. 使用普通用户stu1登录系统，并在/u01/STU1目录下创建一个文件zhangsan，内容为：我是某某某，我要努力学习！我一定能行的！加油！（I am jack, I want to study hard,I can do it,come on）\n\n 2. 使用stu2用户登录系统，并修改stu1用户刚刚创建的文件zhangsan，增加内容：我要和你挑战（I want to challenge you）！并在相同的目录下创建一个自己的文件lisi，内容同上\n\n 3. stu3用户同时可以查看stu1和stu2两个用户的文件，但是不能做任何修改',normalizedContent:'# 命令--7.2.文件权限（高级）\n\n李大毛：file1——>属主和属组是李大毛\n\n王二狗：使用vim编辑器修改李大毛的文件file1\n\n\n# 1、冒险位(setuid)\n\n * 冒险位，指文件操作者(用户)临时拥有文件拥有者的权限\n\n * 冒险位，一般针对的是命令或者脚本文件\n\n * 冒险位，用字母表示是s或s；数字表示是4\n\n * 冒险位的设置：chmod u+s 文件名 或者 chmod 4xxx 文件名\n   \n   [root@xiaoshaozi zstest]# ll /usr/bin/vim\n   -rwxr-xr-x 1 root root 2294216 6月  28 2019 /usr/bin/vim\n   \n   [root@xiaoshaozi zstest]# chmod u+s /usr/bin/vim\n   [root@xiaoshaozi zstest]# ll /usr/bin/vim\n   -rwsr-xr-x 1 root root 2294216 6月  28 2019 /usr/bin/vim\n   \n   [root@xiaoshaozi zstest]# chmod 0755 /usr/bin/vim\n   [root@xiaoshaozi zstest]# ll /usr/bin/vim\n   -rwxr-xr-x 1 root root 2294216 6月  28 2019 /usr/bin/vim\n   \n\n\n# 2、强制位(setgid)\n\n * 强制位，一般针对的是目录\n   \n   如果一个目录拥有强制位，那么任何用户在该目录里所创建的任何文件的属组都会继承该目录的属组。/dir1----\x3eadmin yunwei---\x3e/dir1/file1\n\n * 强制位，用字母表示是s或s；数字表示是2\n\n * 强制位的设置： chmod g+s 文件名 或者 chmod 2xxx 文件名\n   \n   [root@xiaoshaozi zstest]# chmod 2755 dir1\n   [root@xiaoshaozi zstest]# ll\n   总用量 12\n   drwxr-sr-x+ 2 root root 4096 1月   5 10:44 dir1\n   \n   \n   [root@xiaoshaozi zstest]# chmod g-s dir1\n   [root@xiaoshaozi zstest]# ll\n   总用量 12\n   drwxr-xr-x+ 2 root root 4096 1月   5 10:44 dir1\n   \n\n\n# 3、粘滞位(sticky)\n\n * 粘滞位，一般针对的是公共目录\n   \n   如果一个公共目录拥有粘滞位，那么该目录下的文件，只有root和文件的创建者可以删除，其他人只能自己管理自己。（a用户不能删除b用户创建的文件）\n   \n   控制删除！针对公共目录——》任何人都可以使用\n\n * 粘滞位，用字母表示是t或t；数字表示是1\n\n * 粘滞位的设置： chmod o+t 文件名 或者 chmod 1xxx 文件名\n   \n   [root@xiaoshaozi zstest]# ll -d /tmp/\n   drwxrwxrwt. 10 root root 4096 1月   5 10:27 /tmp/\n   \n   \n\n\n# ㈡ 高级权限设置\n\n# 1、冒险位举例\n\n需求：\n给一个vim命令设置冒险位，目的是任何人拿vim去修改文件可以临时获得文件拥有者的权限\n\n[root@heima tmp]# which vim\n/usr/bin/vim\n[root@heima tmp]# ll /usr/bin/vim\n-rwxr-xr-x. 1 root root 2324712 dec 22 2016 /usr/bin/vim\n[root@heima tmp]# chmod u+s /usr/bin/vim\n或者\n[root@heima tmp]# chmod 4755 /usr/bin/vim\n[root@heima tmp]# ll /usr/bin/vim\n-rwsr-xr-x. 1 root root 2324712 dec 22 2016 /usr/bin/vim\n测试验证，普通用户使用vim修改一个本没有权限修改的文件：\n[root@heima tmp]# ll /etc/passwd\n-rw-r--r--. 1 root root 1650 mar 5 20:39 /etc/passwd\n[root@heima tmp]# su - user01\n[user01@localhost ~]$ vim /etc/passwd\n验证是否可以修改成功，如果可以，说明user01用户临时拥有了/etc/passwd文件拥有者的权限\n\n\n# 2、强制位举例\n\n需求：\n给目录dir2设置一个强制位，测试是否任何人在该目录里创建的文件属组都是该目录的属组\n\n[root@heima tmp]# ll -d dir2\ndrwxr-xr-x. 2 root root 4096 mar 6 13:42 dir2\n给dir2增加强制位：\n[root@heima tmp]# chmod g+s dir2\n给dir2目录设置权限，让其他人可以写\n[root@heima tmp]# chmod o+w dir2\n[root@heima tmp]# ll -d dir2\ndrwxr-srwx. 2 root root 4096 mar 6 13:42 dir2\n测试普通用户user01在dir2目录里创建文件的属组是否是dir2的属组\n[root@heima tmp]# su - user01\n[user01@localhost ~]$ touch /tmp/dir2/file1\n[user01@localhost ~]$ ll /tmp/dir2/file1\n-rw-rw-r--. 1 user01 root 0 mar 6 13:44 /tmp/dir2/file1\n\n\n# 3、粘滞位举例\n\n需求：\n在创建一个公共目录/tmp/dir3,要求所有人都可以在该公共目录里创建、删除文件；但是只能自己管理自己，不能删除别人\n的文件\n\n[root@localhost ~]# mkdir /tmp/dir3\n[root@localhost ~]# chmod 777 /tmp/dir3\n[root@localhost ~]# chmod o+t /tmp/dir3\n或者一步到位：\n[root@localhost ~]# chmod 1777 /tmp/dir3\n[root@localhost ~]# ll -d /tmp/dir3\ndrwxrwxrwt. 2 root root 4096 mar 6 13:52 /tmp/dir3\n测试验证：\n自己完成\n\n\n\n# ㈢ 总结\n\n * 高级权限分类\n   \n   * 冒险位——>针对命令 s/s 4 chmod u+s 命令文件\n   \n   * 强制位——>针对目录 s/s 2 chmod g+s 目录\n   \n   * 粘滞位——>针对公共目录 t/t 1 chmod o+t 公共目录\n\n * 高级权限设置\n\nchmod 4xxx 文件名\nchmod 2xxx 目录名\nchmod 1777 公共目录\n\n\n\n# 默认权限(了解)\n\n㈠ 什么是文件的默认权限\n\n所谓文件的默认权限(遮罩权限)，是指用户创建文件后，文件天生就有的权限，不需要设置。\n\n㈡ 文件默认权限由谁控制\n\n文件默认权限由一个叫做**umask**的东西来控制。\n\n㈢ umask如何控制文件默认权限\n\n\n# 1、临时控制\n\n * 什么是临时控制？\n   \n   > 临时控制，指的是用命令 umask 临时设置，只在当前终端当前进程中生效。\n\n查看当前用户的umask：\n[root@localhost ~]# umask\n0022\n\n[root@localhost ~]# su - user01\n[user01@localhost ~]$ umask\n0002\n\n注意：\n1. 管理员和普通用户的umask不同，就表示管理员和普通用户创建的文件的默认权限不同！\n2. 第1位数字表示高级权限；后面3位数字表示普通权限\n\n普通用户：目录（775）,文件（664）\n管理员： 目录（755），文件（644）\n\n\n * 如何临时设置用户的umask？\n   \n   写在前面：\n   \n   linux系统中，默认创建目录的最大权限是0777；文件的最大权限是0666\n\n[root@localhost ~]# umask 0007 临时设置root用户的umask为0007\n\n问：umask=0007，那么在当前终端上root用户所创建目录和普通文件的权限分别是什么呢？\n计算过程如下：\numask=文件的最大权限-文件的默认权限\n\n目录：\n目录的默认权限=0777-umask=0777-0007=0770 rwxrwx---\n\n普通文件：\n文件的默认权限=0666-umask=0666-0007=0660 rw-rw----\n\n\n\n说明：\n1.权限用数字表示时没有负数，所以最小就是0\n2.默认权限规则遵循linux系统中权限最小化原则\n\n$ stu1 umask 0003\n目录：0777-0003=0774 rwxrwxr--\n文件：0666-0003=0663 rw-rw--wx 实际权限：rw-rw-r--\n$ user01 umask 0005\n文件：0666-0005=0661 rw-rw---x 实际权限:rw-rw--w-\n\n\n\n# 2、永久控制\n\n * 什么是永久设置？\n   \n   > 永久设置，指的是通过修改配置文件设置，对用户的所有终端所有进程生效\n\n * 修改哪个配置文件呢？\n   \n   1. 相关配置文件介绍\n   \n   # 全局配置文件（针对所有用户所有进程）\n   /etc/profile\n   系统和用户的环境变量信息，当用户第一次登录时,该文件被读取\n   /etc/bashrc\n   每个运行的bash信息（系统别名、函数及默认权限的定义），当bash被打开时,该文件被读取\n   \n   \n   # 局部配置文件（针对某个特定用户以及用户的所有进程）\n   ~/.bashrc\n   当前用户的bash信息，当用户登录和每次打开新的shell时该文件被读取\n   ~/.bash_profile\n   当前用户的环境变量，当用户登录时，该文件被读取\n   ~/.bash_history\n   保存当前用户历史命令的文件\n   ~/.bash_logout\n   当用户退出bash或者终端时，会首先执行该文件里的代码，然后再退出\n   \n   \n   2. 如何永久设置用户的umask？\n   \n   1.针对所有用户生效\n   # vim /etc/bashrc\n   在该文件的最后增加以下内容：\n   umask 0007\n   重新读取该配置文件让其立马生效\n   # source /etc/bashrc\n   或者\n   # . /etc/bashrc\n   \n   \n   2.针对某个用户生效\n   比如，只针对user01用户生效\n   [user01@localhost ~]$ vim ~/.bashrc\n   在该文件的最后增加以下内容：\n   umask 0007\n   \n   总结：\n   1. 配置文件，分为全局配置和局部配置\n   2. 全局和局部配置冲突，一般情况下以局部配置为准；二般情况，看情况\n   \n\n\n# 默认权限总结\n\n 1. 什么是文件的默认权限？\n    \n    * 文件被（用户）创建出来后，天生自带的权限\n\n 2. 文件的默认权限由谁来控制？\n    \n    * 由umask的值来控制文件的默认权限\n    \n    * umask值针对的用户\n\n 3. 如何去更改或设置用户的umask呢？\n    \n    1）临时设置\n    \n    umask 007 只针对当前用户在当前终端生效\n    \n    \n    2）永久设置\n    \n    * 针对所有人生效——>/etc/bashrc（重新读取生效）\n    \n    * 针对某个人生效——>~/.bashrc（重新读取生效）\n\n\n# acl\n\n㈠ acl能做什么\n\n 1. acl访问控制策略可以作为前面所讲权限的补充，更加细的来控制文件的权限\n 2. acl策略可以只针对某个用户在文件上有相应权限\n 3. acl策略也可以只针对多个用户或者一个组里的所有用户在文件上有相应权限\n\n\n\n㈡ 如何设置文件的acl策略\n\n\n# 开启acl\n\n[root@localhost ~]# dumpe2fs -h /dev/sda3\n#dumpe2fs命令是查询指定分区详细文件系统信息的命令\n选项：\n\t-h\t仅显示超级块中信息，而不显示磁盘块组的详细信息。\n\t\n...省略部分输出...\ndefault mount options:\tuser_xattr acl\n...省略部分输出...\n\n\n如果没有开启，手工开启分区的acl权限：\n\n[root@localhost ~]# mount -o remount,acl /\n# 重新挂载根分区，并挂载加入acl权限\n\n\n也可以通过修改/etc/fstab文件，永久开启acl权限：\n\n[root@localhost ~]# vi /etc/fstab\nuuid=c2ca6f57-b15c-43ea-bca0-f239083d8bd2\t/\text4\tdefaults,acl\t1\t1\n# 加入acl\n[root@localhost ~]# mount -o remount /\n# 重新挂载文件系统或重启动系统，使修改生效\n\n\n\n# acl基本命令\n\ngetfacl 文件名\t\t\t 查询文件的acl权限\nsetfacl 选项 文件名\t\t设定acl权限\n\t-m\t\t设定acl权限\n\t-b\t\t删除acl权限\n\t-x:用户  删除单个用户的acl权限\n\n\n\nsetfacl -m u:用户名:权限 文件名\nsetfacl -m g:组名:权限 文件名\n\nsetfacl -m u:aa:rwx /test   给test目录赋予aa是读写执行的acl权限\nsetfacl -m u:cc:rx -r soft/ 赋予递归acl权限，只能赋予目录\n\t-r递归\n\nsetfacl -m d:u:aa:rwx -r /test\tacl默认权限。注意：默认权限只能赋予目录\n\n注意：如果给目录赋予acl权限，两条命令都要输入\n递归与默认的区别：\nsetfacl -m u:cc:rx -r soft/\t\t只对已经存在的文件生效\nsetfacl -m d:u:aa:rwx -r /test\t只对以后新建的文件生效\n\n\n\n# 最大有效权限mask\n\n[root@localhost /]# setfacl -m m:rx project/\n#设定mask权限为r-x。使用“m:权限”格式\n[root@localhost /]# getfacl project/\n# file: project/\n# owner: root\n# group: tgroup\nuser::rwx\ngroup::rwx\t\t\t#effective:r-x\nmask::r-x\n#mask权限变为了r-x\nother::---\n\n\n\n# 删除acl权限\n\n[root@localhost /]# setfacl -x u:st /project/\n#删除指定用户和用户组的acl权限\n[root@localhost /]# setfacl -b project/\n#会删除文件的所有的acl权限\n\n\n\n# 设置acl策略(setfacl)\n\n常用选项：\n-m 修改或者设置acl策略\n-r 递归授权，对目录下已存在的目录或文件有acl策略，但新建的文件没有\n-x 去掉某个用户或者某个组的acl策略\n-b 删除所有的acl策略\n-d 默认acl策略，只针对目录，该目录下新建的目录和文件都会继承acl策略\nmask: 定义除其他人和所有者外的最大权限\n\n\n重点掌握：\n\nsetfacl -m u:用户:rwx /home/redhat/file1 给单个用户单独加权限\nsetfacl -m g:组名:rwx /home/redhat/file1 给单个组单独加权限\n\nsetfacl -x u:用户 /home/redhat/file1 去掉某个用户的权限\nsetfacl -x g:组名 /home/redhat/file1 去掉某个组的acl策略\nsetfacl -b /home/redhat/file1 删除文件上所有的acl策略\n# setfacl -m u:user01:rw file1 针对于单个用户给可读可写权限\n# setfacl -m g:sysadmin:rw file1 针对于单个组给可读可写权限\n\n\n====》准备工作《====\n[root@xiaoshaozi zstest]# touch file{1..3}\n[root@xiaoshaozi zstest]# chmod 600 file*\n[root@xiaoshaozi zstest]# ll\n总用量 0\n-rw------- 1 root root 0 1月   5 10:20 file1\n-rw------- 1 root root 0 1月   5 10:20 file2\n-rw------- 1 root root 0 1月   5 10:20 file3\n\n[root@xiaoshaozi zstest]# useradd user01\n[root@xiaoshaozi zstest]# useradd user02\n\n\n> 给单个用户、用户组 单独加权限\n\n[root@xiaoshaozi zstest]# setfacl -m u:user01:rw file1\n[root@xiaoshaozi zstest]# su user02\n[user02@xiaoshaozi zstest]$ vim file1\n[user02@xiaoshaozi zstest]$ cat file1\ncat: file1: 权限不够\n\n[root@xiaoshaozi zstest]# su user01\n[user01@xiaoshaozi zstest]$ vim file1\n[user01@xiaoshaozi zstest]$ cat file1\nuser01可以读写\n[user01@xiaoshaozi zstest]$ getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rw-\ngroup::---\nmask::rw-\nother::---\n\n[user01@xiaoshaozi zstest]$ getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nother::---\n\n[root@xiaoshaozi zstest]# groupadd usertest\n[root@xiaoshaozi zstest]# setfacl -m g:usertest:rw file2\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw-rw----+ 1 root root 19 1月   5 10:25 file1\n-rw-rw----+ 1 root root  0 1月   5 10:20 file2\n-rw-------  1 root root  0 1月   5 10:20 file3\n[root@xiaoshaozi zstest]# getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\ngroup:usertest:rw-\nmask::rw-\nother::---\n\n\n> 单独删除acl权限\n\n[root@xiaoshaozi zstest]# setfacl -x u:user01 file1\n[root@xiaoshaozi zstest]# getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nmask::---\nother::---\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw-------+ 1 root root 19 1月   5 10:25 file1\n-rw-rw----+ 1 root root  0 1月   5 10:20 file2\n-rw-------  1 root root  0 1月   5 10:20 file3\n[root@xiaoshaozi zstest]# setfacl -x m: file1\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw-------  1 root root 19 1月   5 10:25 file1\n-rw-rw----+ 1 root root  0 1月   5 10:20 file2\n-rw-------  1 root root  0 1月   5 10:20 file3\n\n\n> 删除所有acl权限\n\n[root@xiaoshaozi zstest]# getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\ngroup:usertest:rw-\nmask::rw-\nother::---\n[root@xiaoshaozi zstest]# setfacl -b file2\n[root@xiaoshaozi zstest]# getfacl file2\n# file: file2\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nother::---\n[root@xiaoshaozi zstest]# ll\n总用量 4\n-rw------- 1 root root 19 1月   5 10:25 file1\n-rw------- 1 root root  0 1月   5 10:20 file2\n-rw------- 1 root root  0 1月   5 10:20 file3\n\n\n> mask设置other的最大权限\n\n[root@xiaoshaozi zstest]# getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nother::---\n\n[root@xiaoshaozi zstest]# setfacl -m m::r file1\n[root@xiaoshaozi zstest]# getfacl file1\n# file: file1\n# owner: root\n# group: root\nuser::rw-\ngroup::---\nmask::r--\nother::---\n\n\n> 目录递归授权\n\nroot@xiaoshaozi zstest]# mkdir dir{1..2}\n[root@xiaoshaozi zstest]# ll\n总用量 12\ndrwxr-xr-x  2 root root 4096 1月   5 10:37 dir1\ndrwxr-xr-x  2 root root 4096 1月   5 10:37 dir2\n-rw-r-----+ 1 root root   19 1月   5 10:25 file1\n-rw-------  1 root root    0 1月   5 10:20 file2\n-rw-------  1 root root    0 1月   5 10:20 file3\n[root@xiaoshaozi zstest]# setfacl -rm u:user01:rwx dir1\n[root@xiaoshaozi zstest]# getfacl dir1\n# file: dir1\n# owner: root\n# group: root\nuser::rwx\nuser:user01:rwx\ngroup::r-x\nmask::rwx\nother::r-x\n\n[root@xiaoshaozi zstest]# cd dir1\n[root@xiaoshaozi dir1]# touch dir1_file{1..3}\n[root@xiaoshaozi dir1]# ll\n总用量 0\n-rw-r--r-- 1 root root 0 1月   5 10:39 dir1_file1\n-rw-r--r-- 1 root root 0 1月   5 10:39 dir1_file2\n-rw-r--r-- 1 root root 0 1月   5 10:39 dir1_file3\n[root@xiaoshaozi dir1]# cd ..\n[root@xiaoshaozi zstest]# setfacl -rm u:user01:rwx dir1\n[root@xiaoshaozi zstest]# cd dir1\n[root@xiaoshaozi dir1]# ll\n总用量 0\n-rw-rwxr--+ 1 root root 0 1月   5 10:39 dir1_file1\n-rw-rwxr--+ 1 root root 0 1月   5 10:39 dir1_file2\n-rw-rwxr--+ 1 root root 0 1月   5 10:39 dir1_file3\n[root@xiaoshaozi dir1]# getfacl *\n# file: dir1_file1\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rwx\ngroup::r--\nmask::rwx\nother::r--\n\n# file: dir1_file2\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rwx\ngroup::r--\nmask::rwx\nother::r--\n\n# file: dir1_file3\n# owner: root\n# group: root\nuser::rw-\nuser:user01:rwx\ngroup::r--\nmask::rwx\nother::r--\n\n\n[root@xiaoshaozi dir1]# su user01\n[user01@xiaoshaozi dir1]$ touch file1\n[user01@xiaoshaozi dir1]$ ls\ndir1_file1  dir1_file2  dir1_file3  file1\n[user01@xiaoshaozi dir1]$ ll\n总用量 0\n-rw-rwxr--+ 1 root   root   0 1月   5 10:39 dir1_file1\n-rw-rwxr--+ 1 root   root   0 1月   5 10:39 dir1_file2\n-rw-rwxr--+ 1 root   root   0 1月   5 10:39 dir1_file3\n-rw-rw-r--  1 user01 user01 0 1月   5 10:44 file1\n\n\n> 新创建的文件授权\n\n[root@xiaoshaozi zstest]# setfacl -dm u:user01:rwx dir2\n[root@xiaoshaozi zstest]# getfacl dir2\n# file: dir2\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:user:user01:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n\n[root@xiaoshaozi zstest]# setfacl -m u:user01:rwx dir2\n[root@xiaoshaozi zstest]# getfacl dir2\n# file: dir2\n# owner: root\n# group: root\nuser::rwx\nuser:user01:rwx\ngroup::r-x\nmask::rwx\nother::r-x\ndefault:user::rwx\ndefault:user:user01:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n\n[root@xiaoshaozi zstest]# su user01\n[user01@xiaoshaozi zstest]$ cd dir2\n[user01@xiaoshaozi dir2]$ touch file1\n[user01@xiaoshaozi dir2]$ mkdir dir1\n[user01@xiaoshaozi dir2]$ ll\n总用量 4\ndrwxrwxr-x+ 2 user01 user01 4096 1月   5 10:48 dir1\n-rw-rw-r--+ 1 user01 user01    0 1月   5 10:48 file1\n\n[user01@xiaoshaozi dir2]$ getfacl dir1 file1\n# file: dir1\n# owner: user01\n# group: user01\nuser::rwx\nuser:user01:rwx\ngroup::r-x\nmask::rwx\nother::r-x\ndefault:user::rwx\ndefault:user:user01:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n\n# file: file1\n# owner: user01\n# group: user01\nuser::rw-\nuser:user01:rwx                 #effective:rw-\ngroup::r-x                      #effective:r--\nmask::rw-\nother::r--\n\n\n\n\n# 查看acl策略(getfacl)\n\n# getfacl 文件名\n\n\n\n# chattr\n\n> 文件系统属性chattr权限\n\n1、命令格式\n\n[root@localhost ~]#chattr [+-=] [选项]文件或目录名\n选项：\n\t+:\t增加权限\n\t-:\t删除权限\n\t=:\t等于某权限\n\ti:\t对文件，不允许对文件进行删除、改名，也不能添加和修改数据；\n\t\t对目录，只能修改目录下文件的数据，但不允许建立和删除文件。\n\ta:\t对文件，只能在文件中增加数据，但是不能删除也不能修改数据；\n\t\t对目录，只允许在目录中建立和修改文件，但是不允许删除\n\te:\tlinux中绝大多数的文件都默认拥有e属性。\n\t\t表示该文件是使用ext文件系统进行存储的，而且不能使用“chattr -e”命令取消e属性。\n\n\n2、查看文件系统属性lsattr\n\n[root@localhost ~]# lsattr 选项 文件名\n选项：\n\t-a\t显示所有文件和目录\n\t-d\t若目标是目录，仅列出目录本身的属性，而不是子文件的\n\n\n3、举例\n\n例1：\n#给文件赋予i属性\n[root@localhost ~]# touch ftest\n#建立测试文件\n[root@localhost ~]# chattr +i ftest\n[root@localhost ~]# rm -rf ftest\nrm:无法删除"ftest":不允许的操作\n#赋予i属性后，root也不能删除\n[root@localhost ~]# echo 111 >> ftes\n-bash: ftest: 权限不够\n#也不能修改文件的数据\n\n\n#给目录赋予i属性\n[root@localhost ~]# mkdir dtest\n#建立测试目录\n[root@localhost dtest]# touch dtest/abc\n#再建立一个测试文件abc\n[root@localhost ~]# chattr +i dtest/\n#给目录赋予i属性\n[root@localhost ~]# cd dtest/\n[root@localhost dtest]# touch bcd\ntouch:无法创建"bcd":权限不够\n#dtest目录不能新建文件\n[root@localhost dtest]# echo 11 >> abc\n[root@localhost dtest]# cat abc\n11\n#但是可以修改文件内容\n[root@localhost dtest]# rm -rf abc\nrm:无法删除"abc":权限不够\n#不能删除\n\n\n例2：\n[root@localhost ~]# mkdir -p /back/log\n#建立备份目录\n[root@localhost ~]# chattr +a /back/log/\n#赋予a属性\n[root@localhost ~]# cp /var/log/messages /back/log/\n#可以复制文件和新建文件到指定目录\n[root@localhost ~]# rm -rf /back/log/messages\nrm:无法删除"/back/log/messages":不允许的操作\n#但是不允许删除\n\n\n\n# 课后实战\n\n\n# 作业1\n\n 1. root用户新建目录 /tmp/dir1，要求目录的所属组是tom\n\n 2. 创建tom用户，tom用户是否允许在/tmp/dir1下建立文件tomfile？如果不允许，如何让tom用户在/tmp/dir1目录里创建文件tomfile?\n\n 3. 用户jack如果想修改tom用户创建的tomfile文件，怎么做？\n\n\n# 作业2\n\n以普通用户user01身份登录，新建公共目录/shared/sysadmin并且属于sysadmin组\n\n 1. 要求组成员有读写访问的权限，其他成员没有任何权限；\n\n 2. 要求任何人在/shared/sysadmin面创建的文件全部属于sysadmin组\n\n 3. 要求harry可写，natasha不能读写\n\n 4. 要求该目录下的文件只有root和文件创建者可以删，其他人不能删除别人的文件\n\n\n# 综合练习\n\n 1. 使用普通用户stu1登录系统，并在/u01/stu1目录下创建一个文件zhangsan，内容为：我是某某某，我要努力学习！我一定能行的！加油！（i am jack, i want to study hard,i can do it,come on）\n\n 2. 使用stu2用户登录系统，并修改stu1用户刚刚创建的文件zhangsan，增加内容：我要和你挑战（i want to challenge you）！并在相同的目录下创建一个自己的文件lisi，内容同上\n\n 3. stu3用户同时可以查看stu1和stu2两个用户的文件，但是不能做任何修改',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704425034e3},{title:"命令--9.1.文件系统（查看）",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--9.1.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%9F%A5%E7%9C%8B%EF%BC%89.html",relativePath:"zs-use/linux/基本使用/命令--9.1.文件系统（查看）.md",key:"v-7d25a7c4",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--9.1.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%9F%A5%E7%9C%8B%EF%BC%89.html",headers:[{level:2,title:"硬盘结构",slug:"硬盘结构",normalizedTitle:"硬盘结构",charIndex:23},{level:3,title:"1、硬盘的逻辑结构",slug:"_1、硬盘的逻辑结构",normalizedTitle:"1、硬盘的逻辑结构",charIndex:32},{level:3,title:"2、硬盘接口",slug:"_2、硬盘接口",normalizedTitle:"2、硬盘接口",charIndex:246},{level:2,title:"文件系统",slug:"文件系统",normalizedTitle:"文件系统",charIndex:10},{level:3,title:"1.Linux文件系统的特性：",slug:"_1-linux文件系统的特性",normalizedTitle:"1.linux文件系统的特性：",charIndex:606},{level:3,title:"2.Linux常见文件系统",slug:"_2-linux常见文件系统",normalizedTitle:"2.linux常见文件系统",charIndex:1191},{level:2,title:"df",slug:"df",normalizedTitle:"df",charIndex:2666},{level:2,title:"du",slug:"du",normalizedTitle:"du",charIndex:4428},{level:2,title:"lsblk",slug:"lsblk",normalizedTitle:"lsblk",charIndex:4680},{level:2,title:"fsck(用不着)",slug:"fsck-用不着",normalizedTitle:"fsck(用不着)",charIndex:6437},{level:2,title:"dumpe2fs(了解)",slug:"dumpe2fs-了解",normalizedTitle:"dumpe2fs(了解)",charIndex:6490},{level:2,title:"stat(了解)",slug:"stat-了解",normalizedTitle:"stat(了解)",charIndex:6572},{level:2,title:"file(了解)",slug:"file-了解",normalizedTitle:"file(了解)",charIndex:6948}],lastUpdated:"2024年1月5日星期五下午2点00分",lastUpdatedTimestamp:1704434436e3,headersStr:"硬盘结构 1、硬盘的逻辑结构 2、硬盘接口 文件系统 1.Linux文件系统的特性： 2.Linux常见文件系统 df du lsblk fsck(用不着) dumpe2fs(了解) stat(了解) file(了解)",content:'# 命令--9.1.文件系统（查看）\n\n\n# 硬盘结构\n\n\n# 1、硬盘的逻辑结构\n\n\n\n每个扇区的大小事固定的，为512Byte。扇区也是磁盘的最小存贮单位。\n\n\n\n硬盘的大小是使用“磁头数×柱面数×扇区数×每个扇区的大小”这样的公式来计算的。 其中磁头数（Heads）表示硬盘总共有几个磁头，也可以理解成为硬盘有几个盘面，然后乘以二；柱面数（Cylinders）表示硬盘每一面盘片有几条磁道；扇区数（Sectors）表示每条磁道上有几个扇区；每个扇区的大小一般是512Byte。\n\n\n# 2、硬盘接口\n\n * IDE硬盘接口（Integrated Drive Electronics，并口，即电子集成驱动器）也称作“ATA硬盘”或“PATA硬盘”，是早期机械硬盘的主要接口，ATA133硬盘的理论速度可以达到133MB/s（此速度为理论平均值），IDE硬盘接口\n\n * SATA接口（Serial ATA，串口）是速度更高的硬盘标准，具备了更高的传输速度，并具备了更强的纠错能力。目前已经是SATA三代，理论传输速度达到600MB/s（此速度为理论平均值）\n\n * SCSI接口（Small Computer System Interface，小型计算机系统接口）广泛应用在服务器上，具有应用范围广、多任务、带宽大、CPU占用率低及支持热插拔等优点，理论传输速度达到320MB/s\n\n\n# 文件系统\n\n\n# 1.Linux文件系统的特性：\n\n * super block（超级块）：记录整个文件系统的信息，包括block与inode的总量，已经使用的inode和block的数量，未使用的inode和block的数量，block与inode的大小，文件系统的挂载时间，最近一次的写入时间，最近一次的磁盘检验时间等。\n\n * date block（数据块，也称作block）：用来实际保存数据的（柜子的隔断），block的大小（1KB、2KB或4KB）和数量在格式化后就已经决定，不能改变，除非重新格式化（制作柜子的时候，隔断大小就已经决定，不能更改，除非重新制作柜子）。每个blcok只能保存一个文件的数据，要是文件数据小于一个block块，那么这个block的剩余空间不能被其他文件是要；要是文件数据大于一个block块，则占用多个block块。Windows中磁盘碎片整理工具的原理就是把一个文件占用的多个block块尽量整理到一起，这样可以加快读写速度。\n\n * inode（i节点，柜子门上的标签）：用来记录文件的权限（r、w、x），文件的所有者和属组，文件的大小，文件的状态改变时间（ctime），文件的最近一次读取时间（atime），文件的最近一次修改时间（mtime），文件的数据真正保存的block编号。每个文件需要占用一个inode。\n   \n   \n\n\n# 2.Linux常见文件系统\n\n文件系统      描述\next       Linux中最早的文件系统，由于在性能和兼容性上具有很多缺陷，现在已经很少使用\next2      是ext文件系统的升级版本，Red Hat Linux 7.2版本以前的系统默认都是ext2文件系统。\n          于1993年发布，支持最大16TB的分区和最大2TB的文件（1TB=1024GB=1024×1024KB）\next3      是ext2文件系统的升级版本，最大的区别就是带日志功能，以便在系统突然停止时提高文件系统的可靠性。\n          支持最大16TB的分区和最大2TB的文件\next4      是ext3文件系统的升级版。\n          ext4在性能、伸缩性和可靠性方面进行了大量改进。\n          ext4的变化可以说是翻天覆地的，比如向下兼容ext3、最大1EB文件系统和16TB文件、\n          无限数量子目录、Extents连续数据块概念、多块分配、延迟分配、持久预分配、\n          快速FSCK、日志校验、无日志模式、在线碎片整理、inode增强、默认启用barrier等。\n          它是CentOS6.x的默认文件系统\nxfs       XFS最早针对IRIX操作系统开发，是一个高性能的日志型文件系统，\n          能够在断电以及操作系统崩溃的情况下保证文件系统数据的一致性。\n          它是一个64位的文件系统，后来进行开源并且移植到了Linux操作系统中，\n          目前CentOS 7.x将XFS+LVM作为默认的文件系统。\n          据官方所称，XFS对于大文件的读写性能较好。\nswap      swap是Linux中用于交换分区的文件系统（类似于Windows中的虚拟内存），\n          当内存不够用时，使用交换分区暂时替代内存。\n          一般大小为内存的2倍，但是不要超过2GB。它是Linux的必需分区\nNFS       NFS是网络文件系统（Network File System）的缩写，是用来实现不同主机之间文件共享的一种网络服务，\n          本地主机可以通过挂载的方式使用远程共享的资源\niso9660   光盘的标准文件系统。Linux要想使用光盘，必须支持iso9660文件系统\nfat       就是Windows下的fat16文件系统，在Linux中识别为fat\nvfat      就是Windows下的fat32文件系统，在Linux中识别为vfat。\n          支持最大32GB的分区和最大4GB的文件\nNTFS      就是Windows下的NTFS文件系统，不过Linux默认是不能识别NTFS文件系统的，\n          如果需要识别，则需要重新编译内核才能支持。\n          它比fat32文件系统更加安全，速度更快，支持最大2TB的分区和最大64GB的文件\nufs       Sun公司的操作系统Solaris和SunOS所采用的文件系统\nproc      Linux中基于内存的虚拟文件系统，用来管理内存存储目录/proc\nsysfs     和proc一样，也是基于内存的虚拟文件系统，用来管理内存存储目录/sysfs\ntmpfs     也是一种基于内存的虚拟文件系统，不过也可以使用swap交换分区\n\n\n# df\n\n> 统计分区空间使用率\n\ndf\n常见选项：\n\t-a\t显示特殊文件系统，这些文件系统几乎都是保存在内存中的。如/proc,因为是挂载在内存中，所以占用量都是0\n\t-h\t单位不再只用KB，而是换算成习惯单位\n\t-T\t多出了文件系统类型一列\n\n\n\n[jysp@jysp ~]$ df\n文件系统                          1K-块      已用       可用 已用% 挂载点\ndevtmpfs                       66592768         0   66592768    0% /dev\ntmpfs                          66610240         0   66610240    0% /dev/shm\ntmpfs                          66610240    644352   65965888    1% /run\ntmpfs                          66610240         0   66610240    0% /sys/fs/cgroup\n/dev/mapper/centos_jysp-root 4919724032 261916384 4657807648    6% /\n/dev/sda2                      10475520    163880   10311640    2% /boot\n/dev/sda1                       4186108      9264    4176844    1% /boot/efi\n/dev/loop0                      7927042   7927042          0  100% /media/CentOS\ntmpfs                          13322112         0   13322112    0% /run/user/1000\ntmpfs                          13322112       192   13321920    1% /run/user/42\n\n[jysp@jysp ~]$ df -HT\n文件系统                     类型      容量  已用  可用 已用% 挂载点\ndevtmpfs                     devtmpfs   69G     0   69G    0% /dev\ntmpfs                        tmpfs      69G     0   69G    0% /dev/shm\ntmpfs                        tmpfs      69G  660M   68G    1% /run\ntmpfs                        tmpfs      69G     0   69G    0% /sys/fs/cgroup\n/dev/mapper/centos_jysp-root xfs       5.1T  269G  4.8T    6% /\n/dev/sda2                    xfs        11G  168M   11G    2% /boot\n/dev/sda1                    vfat      4.3G  9.5M  4.3G    1% /boot/efi\n/dev/loop0                   iso9660   8.2G  8.2G     0  100% /media/CentOS\ntmpfs                        tmpfs      14G     0   14G    0% /run/user/1000\ntmpfs                        tmpfs      14G  197k   14G    1% /run/user/42\n\n\n\n\n# du\n\n> 统计目录大小\n> \n> ls不统计目录大小\n\ndu [选项] [目录或文件名]\n选项\n-a\t显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量\n-h\t使用习惯单位显示磁盘占用量，如KB，MB或GB等\n-s\t统计总占用量，而不列出子目录和子文件的占用量\n\n\ndu与df的区别：du是用于统计文件大小的，统计的文件大小是准确的；df是用于统计空间大小的，统计的剩余空是准确的\n\nlsof | grep deleted”查看被删除的文件，然后一个进程一个进程的手工kill也是可以的\n\n\n# lsblk\n\n> 查看磁盘挂载信息\n\nlsblk [选项]\n常用\n    -a\t查看挂载磁盘信息，磁盘名称、大小、挂载目录等。\n    -f\t查看挂载磁盘信息，磁盘名称、文件系统类型、UUID、挂载目录等。\n\n\n[jysp@jysp ~]$ lsblk -a\nNAME                 MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsdb                    8:16   0  1.1T  0 disk \n└─sdb1                 8:17   0  1.1T  0 part \n  └─centos_jysp-root 253:0    0  4.6T  0 lvm  /\nloop0                  7:0    0  7.6G  1 loop /media/CentOS\nsda                    8:0    0  3.7T  0 disk \n├─sda2                 8:2    0   10G  0 part /boot\n├─sda3                 8:3    0  3.6T  0 part \n│ ├─centos_jysp-swap 253:1    0  128G  0 lvm  [SWAP]\n│ └─centos_jysp-root 253:0    0  4.6T  0 lvm  /\n└─sda1                 8:1    0    4G  0 part /boot/efi\n[jysp@jysp ~]$ lsblk -f\nNAME                 FSTYPE      LABEL            UUID                                   MOUNTPOINT\nsdb                                                                                      \n└─sdb1               LVM2_member                  IkoMl8-Vi3S-h33b-7pEw-e0MO-fuFD-DU9cIZ \n  └─centos_jysp-root xfs                          6ee2908e-9d9f-4c71-8cd0-f2856686eec6   /\nloop0                iso9660     CentOS 7 aarch64 2020-11-02-15-19-12-00                 /media/CentOS\nsda                                                                                      \n├─sda2               xfs                          be595928-239c-47a7-bbfb-b88f24957a2c   /boot\n├─sda3               LVM2_member                  tQt729-pDak-oEnj-Rcp2-MI1q-Cgkd-0U2b6Z \n│ ├─centos_jysp-swap swap                         b89d1ec3-3dbb-46b3-b812-1efcd670deb8   [SWAP]\n│ └─centos_jysp-root xfs                          6ee2908e-9d9f-4c71-8cd0-f2856686eec6   /\n└─sda1               vfat                         5B32-0B1E                              /boot/efi\n\n\n\n\n# fsck(用不着)\n\n> 文件系统修复命令\n\n# 自动修复\nfsck –y /dev/sdb1\n\n\n\n# dumpe2fs(了解)\n\n> 显示磁盘状态\n\ndumpe2fs /dev/sda3\n\n# 查看超级块组\ndumpe2fs -h /dev/sda3\n\n\n\n\n\n# stat(了解)\n\n> 查看文件的详细时间\n\nstat 文件名\n\n\n[root@xiaoshaozi ~]# stat zs.sh\n  文件："zs.sh"\n  大小：42              块：8          IO 块：4096   普通文件\n设备：fd01h/64769d      Inode：917523      硬链接：1\n权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)\n最近访问：2023-12-21 14:36:51.386064070 +0800\n最近更改：2023-12-21 14:36:32.729400361 +0800\n最近改动：2023-12-21 14:36:32.730400397 +0800\n创建时间：-\n\n\n\n# file(了解)\n\n> 判断文件类型\n\nfile 文件名判断文件类型\n\ntype 命令名判断命令类型\n\n[root@xiaoshaozi ~]# type cd\ncd 是 shell 内嵌\n[root@xiaoshaozi ~]# type mkdir\nmkdir 是 /usr/bin/mkdir\n[root@xiaoshaozi ~]# type ls\nls 是 `ls --color=auto\' 的别名\n\n\n[root@xiaoshaozi ~]# file zs.sh \nzs.sh: Bourne-Again shell script, ASCII text executable\n[root@xiaoshaozi ~]# file docker\ndocker: directory\n\n',normalizedContent:'# 命令--9.1.文件系统（查看）\n\n\n# 硬盘结构\n\n\n# 1、硬盘的逻辑结构\n\n\n\n每个扇区的大小事固定的，为512byte。扇区也是磁盘的最小存贮单位。\n\n\n\n硬盘的大小是使用“磁头数×柱面数×扇区数×每个扇区的大小”这样的公式来计算的。 其中磁头数（heads）表示硬盘总共有几个磁头，也可以理解成为硬盘有几个盘面，然后乘以二；柱面数（cylinders）表示硬盘每一面盘片有几条磁道；扇区数（sectors）表示每条磁道上有几个扇区；每个扇区的大小一般是512byte。\n\n\n# 2、硬盘接口\n\n * ide硬盘接口（integrated drive electronics，并口，即电子集成驱动器）也称作“ata硬盘”或“pata硬盘”，是早期机械硬盘的主要接口，ata133硬盘的理论速度可以达到133mb/s（此速度为理论平均值），ide硬盘接口\n\n * sata接口（serial ata，串口）是速度更高的硬盘标准，具备了更高的传输速度，并具备了更强的纠错能力。目前已经是sata三代，理论传输速度达到600mb/s（此速度为理论平均值）\n\n * scsi接口（small computer system interface，小型计算机系统接口）广泛应用在服务器上，具有应用范围广、多任务、带宽大、cpu占用率低及支持热插拔等优点，理论传输速度达到320mb/s\n\n\n# 文件系统\n\n\n# 1.linux文件系统的特性：\n\n * super block（超级块）：记录整个文件系统的信息，包括block与inode的总量，已经使用的inode和block的数量，未使用的inode和block的数量，block与inode的大小，文件系统的挂载时间，最近一次的写入时间，最近一次的磁盘检验时间等。\n\n * date block（数据块，也称作block）：用来实际保存数据的（柜子的隔断），block的大小（1kb、2kb或4kb）和数量在格式化后就已经决定，不能改变，除非重新格式化（制作柜子的时候，隔断大小就已经决定，不能更改，除非重新制作柜子）。每个blcok只能保存一个文件的数据，要是文件数据小于一个block块，那么这个block的剩余空间不能被其他文件是要；要是文件数据大于一个block块，则占用多个block块。windows中磁盘碎片整理工具的原理就是把一个文件占用的多个block块尽量整理到一起，这样可以加快读写速度。\n\n * inode（i节点，柜子门上的标签）：用来记录文件的权限（r、w、x），文件的所有者和属组，文件的大小，文件的状态改变时间（ctime），文件的最近一次读取时间（atime），文件的最近一次修改时间（mtime），文件的数据真正保存的block编号。每个文件需要占用一个inode。\n   \n   \n\n\n# 2.linux常见文件系统\n\n文件系统      描述\next       linux中最早的文件系统，由于在性能和兼容性上具有很多缺陷，现在已经很少使用\next2      是ext文件系统的升级版本，red hat linux 7.2版本以前的系统默认都是ext2文件系统。\n          于1993年发布，支持最大16tb的分区和最大2tb的文件（1tb=1024gb=1024×1024kb）\next3      是ext2文件系统的升级版本，最大的区别就是带日志功能，以便在系统突然停止时提高文件系统的可靠性。\n          支持最大16tb的分区和最大2tb的文件\next4      是ext3文件系统的升级版。\n          ext4在性能、伸缩性和可靠性方面进行了大量改进。\n          ext4的变化可以说是翻天覆地的，比如向下兼容ext3、最大1eb文件系统和16tb文件、\n          无限数量子目录、extents连续数据块概念、多块分配、延迟分配、持久预分配、\n          快速fsck、日志校验、无日志模式、在线碎片整理、inode增强、默认启用barrier等。\n          它是centos6.x的默认文件系统\nxfs       xfs最早针对irix操作系统开发，是一个高性能的日志型文件系统，\n          能够在断电以及操作系统崩溃的情况下保证文件系统数据的一致性。\n          它是一个64位的文件系统，后来进行开源并且移植到了linux操作系统中，\n          目前centos 7.x将xfs+lvm作为默认的文件系统。\n          据官方所称，xfs对于大文件的读写性能较好。\nswap      swap是linux中用于交换分区的文件系统（类似于windows中的虚拟内存），\n          当内存不够用时，使用交换分区暂时替代内存。\n          一般大小为内存的2倍，但是不要超过2gb。它是linux的必需分区\nnfs       nfs是网络文件系统（network file system）的缩写，是用来实现不同主机之间文件共享的一种网络服务，\n          本地主机可以通过挂载的方式使用远程共享的资源\niso9660   光盘的标准文件系统。linux要想使用光盘，必须支持iso9660文件系统\nfat       就是windows下的fat16文件系统，在linux中识别为fat\nvfat      就是windows下的fat32文件系统，在linux中识别为vfat。\n          支持最大32gb的分区和最大4gb的文件\nntfs      就是windows下的ntfs文件系统，不过linux默认是不能识别ntfs文件系统的，\n          如果需要识别，则需要重新编译内核才能支持。\n          它比fat32文件系统更加安全，速度更快，支持最大2tb的分区和最大64gb的文件\nufs       sun公司的操作系统solaris和sunos所采用的文件系统\nproc      linux中基于内存的虚拟文件系统，用来管理内存存储目录/proc\nsysfs     和proc一样，也是基于内存的虚拟文件系统，用来管理内存存储目录/sysfs\ntmpfs     也是一种基于内存的虚拟文件系统，不过也可以使用swap交换分区\n\n\n# df\n\n> 统计分区空间使用率\n\ndf\n常见选项：\n\t-a\t显示特殊文件系统，这些文件系统几乎都是保存在内存中的。如/proc,因为是挂载在内存中，所以占用量都是0\n\t-h\t单位不再只用kb，而是换算成习惯单位\n\t-t\t多出了文件系统类型一列\n\n\n\n[jysp@jysp ~]$ df\n文件系统                          1k-块      已用       可用 已用% 挂载点\ndevtmpfs                       66592768         0   66592768    0% /dev\ntmpfs                          66610240         0   66610240    0% /dev/shm\ntmpfs                          66610240    644352   65965888    1% /run\ntmpfs                          66610240         0   66610240    0% /sys/fs/cgroup\n/dev/mapper/centos_jysp-root 4919724032 261916384 4657807648    6% /\n/dev/sda2                      10475520    163880   10311640    2% /boot\n/dev/sda1                       4186108      9264    4176844    1% /boot/efi\n/dev/loop0                      7927042   7927042          0  100% /media/centos\ntmpfs                          13322112         0   13322112    0% /run/user/1000\ntmpfs                          13322112       192   13321920    1% /run/user/42\n\n[jysp@jysp ~]$ df -ht\n文件系统                     类型      容量  已用  可用 已用% 挂载点\ndevtmpfs                     devtmpfs   69g     0   69g    0% /dev\ntmpfs                        tmpfs      69g     0   69g    0% /dev/shm\ntmpfs                        tmpfs      69g  660m   68g    1% /run\ntmpfs                        tmpfs      69g     0   69g    0% /sys/fs/cgroup\n/dev/mapper/centos_jysp-root xfs       5.1t  269g  4.8t    6% /\n/dev/sda2                    xfs        11g  168m   11g    2% /boot\n/dev/sda1                    vfat      4.3g  9.5m  4.3g    1% /boot/efi\n/dev/loop0                   iso9660   8.2g  8.2g     0  100% /media/centos\ntmpfs                        tmpfs      14g     0   14g    0% /run/user/1000\ntmpfs                        tmpfs      14g  197k   14g    1% /run/user/42\n\n\n\n\n# du\n\n> 统计目录大小\n> \n> ls不统计目录大小\n\ndu [选项] [目录或文件名]\n选项\n-a\t显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量\n-h\t使用习惯单位显示磁盘占用量，如kb，mb或gb等\n-s\t统计总占用量，而不列出子目录和子文件的占用量\n\n\ndu与df的区别：du是用于统计文件大小的，统计的文件大小是准确的；df是用于统计空间大小的，统计的剩余空是准确的\n\nlsof | grep deleted”查看被删除的文件，然后一个进程一个进程的手工kill也是可以的\n\n\n# lsblk\n\n> 查看磁盘挂载信息\n\nlsblk [选项]\n常用\n    -a\t查看挂载磁盘信息，磁盘名称、大小、挂载目录等。\n    -f\t查看挂载磁盘信息，磁盘名称、文件系统类型、uuid、挂载目录等。\n\n\n[jysp@jysp ~]$ lsblk -a\nname                 maj:min rm  size ro type mountpoint\nsdb                    8:16   0  1.1t  0 disk \n└─sdb1                 8:17   0  1.1t  0 part \n  └─centos_jysp-root 253:0    0  4.6t  0 lvm  /\nloop0                  7:0    0  7.6g  1 loop /media/centos\nsda                    8:0    0  3.7t  0 disk \n├─sda2                 8:2    0   10g  0 part /boot\n├─sda3                 8:3    0  3.6t  0 part \n│ ├─centos_jysp-swap 253:1    0  128g  0 lvm  [swap]\n│ └─centos_jysp-root 253:0    0  4.6t  0 lvm  /\n└─sda1                 8:1    0    4g  0 part /boot/efi\n[jysp@jysp ~]$ lsblk -f\nname                 fstype      label            uuid                                   mountpoint\nsdb                                                                                      \n└─sdb1               lvm2_member                  ikoml8-vi3s-h33b-7pew-e0mo-fufd-du9ciz \n  └─centos_jysp-root xfs                          6ee2908e-9d9f-4c71-8cd0-f2856686eec6   /\nloop0                iso9660     centos 7 aarch64 2020-11-02-15-19-12-00                 /media/centos\nsda                                                                                      \n├─sda2               xfs                          be595928-239c-47a7-bbfb-b88f24957a2c   /boot\n├─sda3               lvm2_member                  tqt729-pdak-oenj-rcp2-mi1q-cgkd-0u2b6z \n│ ├─centos_jysp-swap swap                         b89d1ec3-3dbb-46b3-b812-1efcd670deb8   [swap]\n│ └─centos_jysp-root xfs                          6ee2908e-9d9f-4c71-8cd0-f2856686eec6   /\n└─sda1               vfat                         5b32-0b1e                              /boot/efi\n\n\n\n\n# fsck(用不着)\n\n> 文件系统修复命令\n\n# 自动修复\nfsck –y /dev/sdb1\n\n\n\n# dumpe2fs(了解)\n\n> 显示磁盘状态\n\ndumpe2fs /dev/sda3\n\n# 查看超级块组\ndumpe2fs -h /dev/sda3\n\n\n\n\n\n# stat(了解)\n\n> 查看文件的详细时间\n\nstat 文件名\n\n\n[root@xiaoshaozi ~]# stat zs.sh\n  文件："zs.sh"\n  大小：42              块：8          io 块：4096   普通文件\n设备：fd01h/64769d      inode：917523      硬链接：1\n权限：(0644/-rw-r--r--)  uid：(    0/    root)   gid：(    0/    root)\n最近访问：2023-12-21 14:36:51.386064070 +0800\n最近更改：2023-12-21 14:36:32.729400361 +0800\n最近改动：2023-12-21 14:36:32.730400397 +0800\n创建时间：-\n\n\n\n# file(了解)\n\n> 判断文件类型\n\nfile 文件名判断文件类型\n\ntype 命令名判断命令类型\n\n[root@xiaoshaozi ~]# type cd\ncd 是 shell 内嵌\n[root@xiaoshaozi ~]# type mkdir\nmkdir 是 /usr/bin/mkdir\n[root@xiaoshaozi ~]# type ls\nls 是 `ls --color=auto\' 的别名\n\n\n[root@xiaoshaozi ~]# file zs.sh \nzs.sh: bourne-again shell script, ascii text executable\n[root@xiaoshaozi ~]# file docker\ndocker: directory\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704434436e3},{title:"命令--8.网络配置",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--8.%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html",relativePath:"zs-use/linux/基本使用/命令--8.网络配置.md",key:"v-64302dce",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--8.%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html",headers:[{level:2,title:"主机名",slug:"主机名",normalizedTitle:"主机名",charIndex:17},{level:2,title:"静态IP配置",slug:"静态ip配置",normalizedTitle:"静态ip配置",charIndex:231},{level:3,title:"㈠ 了解Vmware三种网络模式",slug:"一-了解vmware三种网络模式",normalizedTitle:"㈠ 了解vmware三种网络模式",charIndex:242},{level:3,title:"㈡ 静态IP地址配置",slug:"二-静态ip地址配置",normalizedTitle:"㈡ 静态ip地址配置",charIndex:1592},{level:2,title:"复制镜像有可能需要重置UUID（唯一识别符）",slug:"复制镜像有可能需要重置uuid-唯一识别符",normalizedTitle:"复制镜像有可能需要重置uuid（唯一识别符）",charIndex:2297},{level:2,title:"ifconfig",slug:"ifconfig",normalizedTitle:"ifconfig",charIndex:3929},{level:2,title:"ping",slug:"ping",normalizedTitle:"ping",charIndex:4554},{level:2,title:"netstat",slug:"netstat",normalizedTitle:"netstat",charIndex:5355},{level:2,title:"nc（了解）",slug:"nc-了解",normalizedTitle:"nc（了解）",charIndex:11877},{level:2,title:"lsof",slug:"lsof",normalizedTitle:"lsof",charIndex:11912},{level:2,title:"write（了解）",slug:"write-了解",normalizedTitle:"write（了解）",charIndex:12516},{level:2,title:"wall（了解）",slug:"wall-了解",normalizedTitle:"wall（了解）",charIndex:13245},{level:2,title:"mail",slug:"mail",normalizedTitle:"mail",charIndex:13427},{level:3,title:"例子1：发送邮件",slug:"例子1-发送邮件",normalizedTitle:"例子1：发送邮件",charIndex:13491},{level:3,title:"例子2：发送文件内容",slug:"例子2-发送文件内容",normalizedTitle:"例子2：发送文件内容",charIndex:13709},{level:3,title:"例子3：查看已经接收的邮件",slug:"例子3-查看已经接收的邮件",normalizedTitle:"例子3：查看已经接收的邮件",charIndex:13937}],lastUpdated:"2024年1月8日星期一下午2点46分",lastUpdatedTimestamp:1704696387e3,headersStr:"主机名 静态IP配置 ㈠ 了解Vmware三种网络模式 ㈡ 静态IP地址配置 复制镜像有可能需要重置UUID（唯一识别符） ifconfig ping netstat nc（了解） lsof write（了解） wall（了解） mail 例子1：发送邮件 例子2：发送文件内容 例子3：查看已经接收的邮件",content:'# 命令--8.网络配置\n\n\n# 主机名\n\n[root@heima ~]# hostnamectl set-hostname RedHat8.itcast.cn\n[root@heima ~]# cat /etc/hostname\nRedHat8.itcast.cn\n[root@RedHat8 ~]#\n说明：\n1)通过命令hostnamectl修改会写到/etc/hostname文件,故也可以直接修改该文件\n2)退出重新登录立马生效，不需要重启系统\n\n\n\n# 静态IP配置\n\n\n# ㈠ 了解Vmware三种网络模式\n\n# ① 了解虚拟网络设备\n\n> VMnet0：用于虚拟桥接网络下的虚拟交换机\n> \n> VMnet1：用于虚拟Host-Only网络下的虚拟交换机\n> \n> VMnet8：用于虚拟NAT网络下的虚拟交换机\n> \n> VMware Network Adepter VMnet1：Host用于与Host-Only虚拟网络进行通信的虚拟网卡 VMware\n> \n> Network Adepter VMnet8：Host用于与NAT虚拟网络进行通信的虚拟网卡\n\n# ② 了解三种网络模式\n\n * 桥接网络\n\n> 桥接网络是指虚拟网卡通过VMnet0虚拟交换机和本地物理网卡进行桥接，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机。所以要想虚拟机也可以连接到互联网中，那么两个网卡的IP地址也要设置为同一网段。\n\n\n\n * NAT网络\n\n> 在NAT网络中，会用到VMware Network Adepter VMnet8虚拟网卡，主机上的VMware Network Adepter VMnet8虚拟网卡被直接连接到VMnet8虚拟交换机上与虚拟网卡进行通信。\n> \n> VMware Network Adepter VMnet8虚拟网卡的作用仅限于和VMnet8网段进行通信，它不给VMnet8网段提供路由功能，所以虚拟机虚拟一个NAT服务器，使虚拟网卡可以连 接到Internet。\n> \n> VMware Network Adepter VMnet8虚拟网卡的IP地址是在安装VMware时由系统指定生成的，我们尽量不要修改这个数值，否则可能会使主机和虚拟机无法通信。\n\n\n\n思考：\n\n 1. 虚拟主机A1是否可以访问物理真机主机B？\n\n 2. 虚拟主机A1是否可以访问物理真机主机Ｂ下的NAT模式下的虚拟机？\n\n * 仅主机网络\n\n> 在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是物理真机。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。\n\n\n\n总结：\n\n 1. VMware workstation带来哪些网络设备\n    \n    * 三种网络模式下的虚拟交换机\n    \n    * 两张虚拟网卡（vmnet1和vmnet8）——>作用：用于物理主机和虚拟机通讯\n\n 2. 三种网络模式\n    \n    * 桥接网络\n      * 默认情况下可以访问互联网\n      * 桥接网络的虚拟机IP地址和物理真机在同一个网段\n    * NAT网络\n      * 默认情况下可以访问互联网\n      * NAT网络的虚拟IP地址和物理真机不在同一个网段\n      * 为什么NAT网络可以访问互联网？因为NAT路由转换功能（地址转换技术）\n    * 仅主机网络\n      * 默认情况下不可以访问互联网\n      * 仅主机模式下虚拟机IP地址和物理真机不在同一个网段\n\n\n# ㈡ 静态IP地址配置\n\nLinux下一切皆文件!必然通过修改配置文件生效！\n\n# 方法1：直接修改网卡配置文件\n\n配置静态IP地址\n\n[root@heima ~]# cd /etc/sysconfig/network-scripts/\n[root@heima network-scripts]# ls\nifcfg-ens160\n[root@heima network-scripts]# cat ifcfg-ens160\nTYPE=Ethernet \t\t\t以太网\nBOOTPROTO=none \t\t\tIP获取方式，none和static表示静态，dhcp动态\nNAME=ens160 \t\t\t网卡名称\nUUID=63b0b6ee-fbee-4b17-80be-e3b36ff27493 网卡UUID，唯一标识\nDEVICE=ens160 \t\t\t网卡设备名\nONBOOT=yes \t\t\t\t激活网卡\nIPADDR=192.168.159.100 \tIP地址\nPREFIX=24 \t\t\t\t子网掩码 或者 NETMASK=255.255.255.0\nGATEWAY=192.168.159.2 \t网关\nDNS1=8.8.8.8 \t\t\tdns服务器\n\n\n重载网卡配置文件\n\n[root@heima network-scripts]# nmcli connection reload ens160\n# 激活网卡连接\n[root@heima network-scripts]# nmcli connection up ens160\n\n\n# 方式有所改变\nsystemctl restart network.service\n\n\n复制镜像有可能需要重置UUID（唯一识别符）\n\n[root@localhost ~]# vi/etc/sysconfig/network-scripts/ifcfg-eth0\n#删除MAC地址行\n\n[root@localhost ~]# rm-rf/etc/udev/rules.d/70-persistent-net.rules\n#删除MaC地址和UUID绑定文件\n\n[root@localhost ~]# reboot\n#重启Linux\n\n\n# 方法2：使用nmcli工具配置\n\n查看网络连接情况\n\n查看所有连接的网络信息\n[root@heima ~]# nmcli connection show\nNAME UUID TYPE DEVICE\nens160 ea74cf24-c2a2-ecee-3747-a2d76d46f93b ethernet ens160\nvirbr0 e17e3c81-da25-455a-a8db-755ebdf36601 bridge virbr0\n\n查看已经激活的网络连接信息\n[root@heima ~]# nmcli connection show --active\nNAME UUID TYPE DEVICE\nens160 ea74cf24-c2a2-ecee-3747-a2d76d46f93b ethernet ens160\nvirbr0 e17e3c81-da25-455a-a8db-755ebdf36601 bridge virbr0\n\n\n修改当前网卡IP地址\n\n[root@heima ~]# nmcli connection modify ens160 ipv4.addresses 192.168.159.101/24\nipv4.gateway 192.168.159.2 ipv4.dns 114.114.114.114\n\n\n增加/删除IP地址（子接口）\n\n[root@heima ~]# nmcli connection modify ens160 +ipv4.addresses 10.1.1.1/24\n[root@heima ~]# nmcli connection modify ens160 -ipv4.addresses 10.1.1.1/24\n\n\n增加/删除DNS\n\n[root@heima ~]# nmcli connection modify ens160 +ipv4.dns 8.8.8.8\n[root@heima ~]# nmcli connection modify ens160 -ipv4.dns 8.8.8.8\n\n\n修改网络后需要重载配置文件并激活连接\n\n[root@heima ~]# nmcli connection reload ens160\n[root@heima ~]# nmcli connection up ens160\n\n\n# 方法3：使用nmtui文本图形工具\n\n[root@RedHat8 ~]# nmtui\n\n改完后还是需要 使用 nmcli 激活\n# nmcli connection up ens160\n\n\n总结：\n\n 1. 推荐直接修改配置文件方式配置静态IP，一步到位\n\n 2. 从红帽8以后大家要熟悉使用nmcli工具管理网络，红帽7中的network.service即将被废弃\n\n\n# 复制镜像有可能需要重置UUID（唯一识别符）\n\n[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0\n#删除MAC地址行\n\n[root@localhost ~]# rm-rf/etc/udev/rules.d/70-persistent-net.rules\n#删除MaC地址和UUID绑定文件\n\n[root@localhost ~]# reboot\n#重启Linux\n\n\n\n# ifconfig\n\n> 静态ip查询\n> \n> ifconfig命令最主要的作用就是查看IP地址的信息，直接输入ifconfig命令即可。\n\n\n\n[jysp@jysp ~]$ ifconfig\n...省略...\nenp125s0f5: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.1.101  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 fe80::77b1:8f7c:2a45:346  prefixlen 64  scopeid 0x20<link>\n        ether cc:20:8c:73:9d:d8  txqueuelen 1000  (Ethernet)\n        RX packets 5764048  bytes 710412064 (677.5 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 10539417  bytes 4741264284 (4.4 GiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n...省略...\n\n\n\n# ping\n\n> ping是常用的网络命令，主要通过ICMP协议进行网络探测，测试网络中主机的通信情况。\n\nping [选项] IP\n选项：\n\t-b:\t\t\t后面加入广播地址，用于对整个网段进行探测\t\n\t-c 次数:\t   用于指定ping的次数\n\t-s 字节:\t   指定探测包的大小\n\n\n例子：探测网段中的可用主机\n\n> 在ping命令中，可以使用“-b”选项，后面加入广播地址，探测整个网段。我们可以使用这个选 项知道整个网络中有多少主机是可以和我们通信的，而不用一个一个IP地址地进行探测。例如：\n\n[root@localhost ~]# ping -b -c 3 192.168.103.255\nWARNING: pinging broadcast address\nPING 192.168.103.255 (192.168.103.255) 56(84) bytes of data.\n64 bytes from 192.168.103.199: icmp_seq=1 ttl=64 time=1.95 ms\n64 bytes from 192.168.103.168: icmp_seq=1 ttl=64 time=1.97 ms (DUP!)\n64 bytes from 192.168.103.252: icmp_seq=1 ttl=64 time=2.29 ms (DUP!)\n…省略部分内容…\n\n#探测192.168.103.0/24网段中有多少可以通信的主机\n\n\n> Windows的cmd ping排查可用ip的方式之一\n\n# 查看自己的IP\nipconfig/all\n    \n# -w 2毫秒延时，-n 数据包大小\nfor /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.10.%i\n\n# 查看ping的结果\narp -a\n\n\n\n# netstat\n\n> netstat是网络状态查看命令，既可以查看到本机开启的端口，也可以查看有哪些客户端连接。\n> \n> 在CentOS 7.x中netstat命令默认没有安装，如果需要使用，需要安装net-snmp和net-tools软件包。\n\n[root@localhost ~]# netstat [选项]\n选项：\n\t-a：\t\t列出所有网络状态，包括Socket程序\n\t-c 秒数： 指定每隔几秒刷新一次网络状态\n    -n：\t\t使用IP地址和端口号显示，不使用域名与服务名\n    -p：\t\t显示PID和程序名\n    -t：\t\t显示使用TCP协议端口的连接状况\n    -u：\t\t显示使用UDP协议端口的连接状况\n    -l：\t\t仅显示监听状态的连接\n    -r：\t\t显示路由表\n\n\n例子1：查看本机开启的端口\n\n这是本机最常用的方式，使用选项“-tuln”。因为使用了“-l”选项，所以只能看到监听状态的连接，而不能看到已经建立连接状态的连接。例如：\n\n[root@jysp ~]# netstat -tuln\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State\ntcp        0      0 0.0.0.0:4370            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:25235           0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:8883            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:8083            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:9972            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:8084            0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:15672           0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.1:8088          0.0.0.0:*               LISTEN     \n\n#协议接收队列发送队列本机的IP地址及端口号远程主机的IP地址及端口号状态\n\nProto:\t网络连接的协议，一般就是TCP协议或者UDP协议。\nRecv-Q:\t表示接收到的数据，已经在本地的缓冲中，但是还没有被进程取走。\nSend-Q:\t表示从本机发送，对方还没有收到的数据，依然在本地的缓冲中，一般是不具备ACK标志的数据包。\nLocal Address\t\t本机的IP地址和端口号。          \nForeign Address\t\t远程主机的IP地址和端口号。\nState\t\t\t\t状态。常见的状态主要有以下几种。\n\t- LISTEN：监听状态，只有TCP协议需要监听，而UDP协议不需要监听。\n\t- ESTABLISHED：已经建立连接的状态。如果使用“-l”选项，则看不到已经建立连接的状态。\n\t- SYN_SENT：SYN发起包，就是主动发起连接的数据包。\n\t- SYN_RECV：接收到主动连接的数据包。\n\t- FIN_WAIT1：正在中断的连接。\n\t- FIN_WAIT2：已经中断的连接，但是正在等待对方主机进行确认。\n\t- TIME_WAIT：连接已经中断，但是套接字依然在网络中等待结束。\n\t- CLOSED：套接字没有被使用。\n\t\n在这些状态中，我们最常用的就是LISTEN和ESTABLISHED状态，一种代表正在监听，另一种代表已经建立连接。\n\n\n例子2：查看本机有哪些程序开启的端口\n\n如果使用“-p”选项，则可以查看到是哪个程序占用了端口，并且可以知道这个程序的PID。例如：\n\n[root@jysp ~]# netstat -tulnp\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:4370            0.0.0.0:*               LISTEN      15916/ubt_x64a64_al \ntcp        0      0 0.0.0.0:25235           0.0.0.0:*               LISTEN      17209/ubt_x64a64_al \ntcp        0      0 0.0.0.0:8883            0.0.0.0:*               LISTEN      15916/ubt_x64a64_al \ntcp        0      0 0.0.0.0:8083            0.0.0.0:*               LISTEN      15916/ubt_x64a64_al \ntcp        0      0 0.0.0.0:9972            0.0.0.0:*               LISTEN      17209/ubt_x64a64_al \ntcp        0      0 0.0.0.0:8084            0.0.0.0:*               LISTEN      15916/ubt_x64a64_al \ntcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      1682/cupsd          \ntcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      32061/nginx: master \ntcp        0      0 0.0.0.0:15672           0.0.0.0:*               LISTEN      1684/beam.smp       \ntcp        0      0 127.0.0.1:8088          0.0.0.0:*               LISTEN      1798/influxd        \ntcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2803/master         \ntcp        0      0 0.0.0.0:5370            0.0.0.0:*               LISTEN      15916/ubt_x64a64_al \n\n#比之前的命令多了一个“-p”选项，结果多了“PID/程序名”，可以知道是哪个程序占用了端口\n\n\n例子3：查看所有连接\n\n使用选项“-an”可以查看所有连接，包括监听状态的连接（LISTEN）、已经建立连接状态的连接（ESTABLISHED）、Socket程序连接等。因为连接较多，所以输出的内容有很多。例如：\n\n[root@jysp ~]# netstat -an\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State      \ntcp        0      0 0.0.0.0:4370            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:25235           0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:8883            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:8083            0.0.0.0:*               LISTEN     \ntcp        0      0 0.0.0.0:9972            0.0.0.0:*               LISTEN    \n…省略部分内容…\nActive UNIX domain sockets (servers and established)\nProto RefCnt Flags       Type       State         I-Node   Path\nunix  2      [ ACC ]     STREAM     LISTENING     19969    /var/run/docker.sock\nunix  2      [ ACC ]     STREAM     LISTENING     36871    /run/systemd/private\nunix  2      [ ACC ]     STREAM     LISTENING     41230    /run/user/42/pulse/native\nunix  2      [ ACC ]     STREAM     LISTENING     36880    /run/lvm/lvmetad.socket\nunix  2      [ ACC ]     STREAM     LISTENING     36886    /run/lvm/lvmpolld.socket\nunix  2      [ ACC ]     STREAM     LISTENING     19248    @/tmp/.ICE-unix/4010\nunix  2      [ ]         DGRAM                    36893    /run/systemd/shutdownd\nunix  2      [ ACC ]     STREAM     LISTENING     27093    @/tmp/.X11-unix/X0\nunix  3      [ ]         DGRAM                    13347    /run/systemd/notify\n…省略部分内容…\n\n\n从“Active UNIX domain sockets”开始，之后的内容就是Socket程序产生的连接，之前的内容都是网络服务产生的连接。我们可以在“-an”选项的输出中看到各种网络连接状态，而之前的“-tuln”选项则只能看到监听状态。\n\n例子4：查看网关\n\n[root@jysp ~]# netstat -rn\nKernel IP routing table\nDestination     Gateway         Genmask         Flags   MSS Window  irtt Iface\n0.0.0.0         192.168.1.1     0.0.0.0         UG        0 0          0 enp125s0f5\n172.17.0.0      0.0.0.0         255.255.0.0     U         0 0          0 docker0\n172.18.0.0      0.0.0.0         255.255.0.0     U         0 0          0 br-3809f93307e8\n172.19.0.0      0.0.0.0         255.255.0.0     U         0 0          0 br-0aa8284bdd5f\n172.20.0.0      0.0.0.0         255.255.0.0     U         0 0          0 br-f83f277f7a5c\n172.25.0.0      0.0.0.0         255.255.0.0     U         0 0          0 br-61ad061d70be\n172.28.0.0      0.0.0.0         255.255.0.0     U         0 0          0 br-6e32681f18b2\n192.168.1.0     0.0.0.0         255.255.255.0   U         0 0          0 enp125s0f5\n192.168.112.0   0.0.0.0         255.255.240.0   U         0 0          0 br-24a3963f734c\n192.168.224.0   0.0.0.0         255.255.240.0   U         0 0          0 br-22ff53af9bc5\n\n\n查看指定端口占用情况\n\nnetstat -tlnp | grep [端口号|程序]\n# or\nnetstat -anp | grep [端口号|程序]\n\n\n查看所有端口占用情况\n\nnetstat -utlnp\n\n\n查看某个程序进程信息\n\nps -ef | grep [程序]\n# or\nps -aux | grep [程序]\n\n再根据 PID 查看端口占用\nnetstat -anp | grep 进程ID\n\n\nps -u root 根据用户过滤进程 \nps -aux --sort -pcpu | less 根据 CPU 使用来升序排序 \nps -aux --sort -pmem | less 根据用户过滤进程\nps -aux --sort -pcpu,+pmem | head -n 10 查询全前10个使用cpu和内存最高的应用\n\n\n\n# nc（了解）\n\n> telnet/nc判断端口是否开启，了解\n\n\n# lsof\n\n> 查看指定端口使用情况\n\n\nlsof -i <条件>:[端口号]\n[root@xiaoshaozi ~]# lsof -i :22\nCOMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\nsshd     1552 root    3u  IPv4   19568      0t0  TCP *:ssh (LISTEN)\nsshd    28832 root    3u  IPv4 2959288      0t0  TCP iZuf616fn1k2l61xnal11vZ:ssh->220.180.63.118:55502 (ESTABLISHED)\n\n\n列出系统上被进程打开的文件的相关信息\nlsof -i -P | grep [程序]\n[root@xiaoshaozi ~]# lsof -i -P | grep ssh\nsshd       1552     root    3u  IPv4   19568      0t0  TCP *:22 (LISTEN)\nsshd      28832     root    3u  IPv4 2959288      0t0  TCP iZuf616fn1k2l61xnal11vZ:22->220.180.63.118:55502 (ESTABLISHED)\n\n\n\n\n# write（了解）\n\nA终端\n[root@jysp ~]# write root pts/5\nhello 中文\n\nB终端\n[root@jysp ~]# \nMessage from root@jysp on pts/3 at 10:25 ...\nhello \\344\\270\\255\\346\\226\\207\nEOF\n\n\n\n# ctrl+d 发送\n# 不支持中文\n\n\n[root@jysp ~]# w\n 10:22:24 up 6 days,  1:08,  4 users,  load average: 2.84, 3.07, 3.44\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\njysp     pts/1    192.168.1.9      09:27   42:48  29:51   0.06s -bash\njysp     pts/2    192.168.1.9      09:27   54:40  17.63s 17.60s top\nroot     pts/3    192.168.1.103    09:34    0.00s  0.05s  0.01s w\nroot     pts/4    192.168.1.103    09:34   48:20  16.44s 16.42s top\n\n\nLinux中终端\n\n * 本地字符终端 tty1-6 使用alt + f1-6\n * 本地图形终端tty7 ctrl+alt+F7(按住3秒，需要安装启动图形界面)\n * 远程终端 pts/0-255\n\n谁在执行w就是当前终端\n\n\n# wall（了解）\n\n> write命令用于给指定用户发送信息，而wall命令用于给所有登录用户发送信息，包括你自己。\n> \n> 执行时，在wall命令后加入需要发送的信息即可，例如：\n\n[root@localhost ~]# wall "I will be in 5 minutes to restart, please save your data"\n\n\n\n# mail\n\n> mail是Linux的邮件客户端命令，可以利用这个命令给其他用户发送邮件。mail命令的基本信息如下。\n\n\n# 例子1：发送邮件\n\n如果我们想要给其他用户发送邮件，则可以执行如下命令：\n\n[root@localhost ~]# mail user1\nSubject: hello\t\t<-邮件标题\nNice to meet you!\t<-邮件具体内容\n.\t\t\t\t\t<-使用“.”来结束邮件输入\n\n#发送邮件给user1用户\n\n\n我们接收到的邮件都保存在“/var/spool/mail/用户名”中，每个用户都有一个以自己的用户名命名的邮箱。\n\n\n# 例子2：发送文件内容\n\n如果我们想把某个文件的内容发送给指定用户，则可以执行如下命令：\n\n[root@localhost ~]# mail -s "test mail" root < /root/anaconda-ks.cfg\n选项：\n-s：指定邮件标题\n\n#把/root/anaconda-ks.cfg文件的内容发送给root用户\n\n\n我们在写脚本时，有时需要脚本自动发送一些信息给指定用户，把要发送的信息预先写到文件中，是一个非常不错的选择。\n\n\n# 例子3：查看已经接收的邮件\n\n我们可以直接在命令行中执行mail命令，进入mail的交互命令中，可以在这里查看已经接收到的邮件。例如：\n\n[root@localhost ~]# mail\nHeirloom Mail version 12.4 7/29/08.Type ?for help.\n"/var/spool/mail/root":1 message 1 new\n>N\t1 root\t\t\tMon Dec\t5 22:45\t68/1777\t"test mail"<-之前收到的邮件\n>N\t2 root\t\t\tMon Dec\t5 23:08\t18/602\t"hello"\n#未阅读 编号 发件人\t时间\t标题\n&\t\t\t\t\t<-等待用户输入命令\n\n\n可以看到已经接收到的邮件列表，“N”代表未读邮件，如果是已经阅读过的邮件，则前面是不会有这个“N”的；之后的数字是邮件的编号，我们主要通过这个编号来进行邮件的操作。如果我们想要查看第一封邮件，则只需输入邮件的编号“1”就可以了。\n\n在交互命令中执行“？”，可以查看这个交互界面支持的命令。\n\n解释一下常用的交互命令。\n\n * headers：列出邮件标题列表，直接输入“h”命令即可。\n\n * delete：删除指定邮件。比如想要删除第二封邮件，可以输入“d 2”。\n\n * save：保存邮件。可以把指定邮件保存成文件，如“s 2 /tmp/test.mail”。\n\n * quit：退出，并把已经操作过的邮件进行保存。比如移除已删除邮件、保存已阅读邮件等。\n\n * exit：退出，但是不保存任何操作。',normalizedContent:'# 命令--8.网络配置\n\n\n# 主机名\n\n[root@heima ~]# hostnamectl set-hostname redhat8.itcast.cn\n[root@heima ~]# cat /etc/hostname\nredhat8.itcast.cn\n[root@redhat8 ~]#\n说明：\n1)通过命令hostnamectl修改会写到/etc/hostname文件,故也可以直接修改该文件\n2)退出重新登录立马生效，不需要重启系统\n\n\n\n# 静态ip配置\n\n\n# ㈠ 了解vmware三种网络模式\n\n# ① 了解虚拟网络设备\n\n> vmnet0：用于虚拟桥接网络下的虚拟交换机\n> \n> vmnet1：用于虚拟host-only网络下的虚拟交换机\n> \n> vmnet8：用于虚拟nat网络下的虚拟交换机\n> \n> vmware network adepter vmnet1：host用于与host-only虚拟网络进行通信的虚拟网卡 vmware\n> \n> network adepter vmnet8：host用于与nat虚拟网络进行通信的虚拟网卡\n\n# ② 了解三种网络模式\n\n * 桥接网络\n\n> 桥接网络是指虚拟网卡通过vmnet0虚拟交换机和本地物理网卡进行桥接，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机。所以要想虚拟机也可以连接到互联网中，那么两个网卡的ip地址也要设置为同一网段。\n\n\n\n * nat网络\n\n> 在nat网络中，会用到vmware network adepter vmnet8虚拟网卡，主机上的vmware network adepter vmnet8虚拟网卡被直接连接到vmnet8虚拟交换机上与虚拟网卡进行通信。\n> \n> vmware network adepter vmnet8虚拟网卡的作用仅限于和vmnet8网段进行通信，它不给vmnet8网段提供路由功能，所以虚拟机虚拟一个nat服务器，使虚拟网卡可以连 接到internet。\n> \n> vmware network adepter vmnet8虚拟网卡的ip地址是在安装vmware时由系统指定生成的，我们尽量不要修改这个数值，否则可能会使主机和虚拟机无法通信。\n\n\n\n思考：\n\n 1. 虚拟主机a1是否可以访问物理真机主机b？\n\n 2. 虚拟主机a1是否可以访问物理真机主机ｂ下的nat模式下的虚拟机？\n\n * 仅主机网络\n\n> 在host-only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是物理真机。其实host-only网络和nat网络很相似，不同的地方就是host-only网络没有nat服务，所以虚拟网络不能连接到internet。主机和虚拟机之间的通信是通过vmware network adepter vmnet1虚拟网卡来实现的。\n\n\n\n总结：\n\n 1. vmware workstation带来哪些网络设备\n    \n    * 三种网络模式下的虚拟交换机\n    \n    * 两张虚拟网卡（vmnet1和vmnet8）——>作用：用于物理主机和虚拟机通讯\n\n 2. 三种网络模式\n    \n    * 桥接网络\n      * 默认情况下可以访问互联网\n      * 桥接网络的虚拟机ip地址和物理真机在同一个网段\n    * nat网络\n      * 默认情况下可以访问互联网\n      * nat网络的虚拟ip地址和物理真机不在同一个网段\n      * 为什么nat网络可以访问互联网？因为nat路由转换功能（地址转换技术）\n    * 仅主机网络\n      * 默认情况下不可以访问互联网\n      * 仅主机模式下虚拟机ip地址和物理真机不在同一个网段\n\n\n# ㈡ 静态ip地址配置\n\nlinux下一切皆文件!必然通过修改配置文件生效！\n\n# 方法1：直接修改网卡配置文件\n\n配置静态ip地址\n\n[root@heima ~]# cd /etc/sysconfig/network-scripts/\n[root@heima network-scripts]# ls\nifcfg-ens160\n[root@heima network-scripts]# cat ifcfg-ens160\ntype=ethernet \t\t\t以太网\nbootproto=none \t\t\tip获取方式，none和static表示静态，dhcp动态\nname=ens160 \t\t\t网卡名称\nuuid=63b0b6ee-fbee-4b17-80be-e3b36ff27493 网卡uuid，唯一标识\ndevice=ens160 \t\t\t网卡设备名\nonboot=yes \t\t\t\t激活网卡\nipaddr=192.168.159.100 \tip地址\nprefix=24 \t\t\t\t子网掩码 或者 netmask=255.255.255.0\ngateway=192.168.159.2 \t网关\ndns1=8.8.8.8 \t\t\tdns服务器\n\n\n重载网卡配置文件\n\n[root@heima network-scripts]# nmcli connection reload ens160\n# 激活网卡连接\n[root@heima network-scripts]# nmcli connection up ens160\n\n\n# 方式有所改变\nsystemctl restart network.service\n\n\n复制镜像有可能需要重置uuid（唯一识别符）\n\n[root@localhost ~]# vi/etc/sysconfig/network-scripts/ifcfg-eth0\n#删除mac地址行\n\n[root@localhost ~]# rm-rf/etc/udev/rules.d/70-persistent-net.rules\n#删除mac地址和uuid绑定文件\n\n[root@localhost ~]# reboot\n#重启linux\n\n\n# 方法2：使用nmcli工具配置\n\n查看网络连接情况\n\n查看所有连接的网络信息\n[root@heima ~]# nmcli connection show\nname uuid type device\nens160 ea74cf24-c2a2-ecee-3747-a2d76d46f93b ethernet ens160\nvirbr0 e17e3c81-da25-455a-a8db-755ebdf36601 bridge virbr0\n\n查看已经激活的网络连接信息\n[root@heima ~]# nmcli connection show --active\nname uuid type device\nens160 ea74cf24-c2a2-ecee-3747-a2d76d46f93b ethernet ens160\nvirbr0 e17e3c81-da25-455a-a8db-755ebdf36601 bridge virbr0\n\n\n修改当前网卡ip地址\n\n[root@heima ~]# nmcli connection modify ens160 ipv4.addresses 192.168.159.101/24\nipv4.gateway 192.168.159.2 ipv4.dns 114.114.114.114\n\n\n增加/删除ip地址（子接口）\n\n[root@heima ~]# nmcli connection modify ens160 +ipv4.addresses 10.1.1.1/24\n[root@heima ~]# nmcli connection modify ens160 -ipv4.addresses 10.1.1.1/24\n\n\n增加/删除dns\n\n[root@heima ~]# nmcli connection modify ens160 +ipv4.dns 8.8.8.8\n[root@heima ~]# nmcli connection modify ens160 -ipv4.dns 8.8.8.8\n\n\n修改网络后需要重载配置文件并激活连接\n\n[root@heima ~]# nmcli connection reload ens160\n[root@heima ~]# nmcli connection up ens160\n\n\n# 方法3：使用nmtui文本图形工具\n\n[root@redhat8 ~]# nmtui\n\n改完后还是需要 使用 nmcli 激活\n# nmcli connection up ens160\n\n\n总结：\n\n 1. 推荐直接修改配置文件方式配置静态ip，一步到位\n\n 2. 从红帽8以后大家要熟悉使用nmcli工具管理网络，红帽7中的network.service即将被废弃\n\n\n# 复制镜像有可能需要重置uuid（唯一识别符）\n\n[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0\n#删除mac地址行\n\n[root@localhost ~]# rm-rf/etc/udev/rules.d/70-persistent-net.rules\n#删除mac地址和uuid绑定文件\n\n[root@localhost ~]# reboot\n#重启linux\n\n\n\n# ifconfig\n\n> 静态ip查询\n> \n> ifconfig命令最主要的作用就是查看ip地址的信息，直接输入ifconfig命令即可。\n\n\n\n[jysp@jysp ~]$ ifconfig\n...省略...\nenp125s0f5: flags=4163<up,broadcast,running,multicast>  mtu 1500\n        inet 192.168.1.101  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 fe80::77b1:8f7c:2a45:346  prefixlen 64  scopeid 0x20<link>\n        ether cc:20:8c:73:9d:d8  txqueuelen 1000  (ethernet)\n        rx packets 5764048  bytes 710412064 (677.5 mib)\n        rx errors 0  dropped 0  overruns 0  frame 0\n        tx packets 10539417  bytes 4741264284 (4.4 gib)\n        tx errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n...省略...\n\n\n\n# ping\n\n> ping是常用的网络命令，主要通过icmp协议进行网络探测，测试网络中主机的通信情况。\n\nping [选项] ip\n选项：\n\t-b:\t\t\t后面加入广播地址，用于对整个网段进行探测\t\n\t-c 次数:\t   用于指定ping的次数\n\t-s 字节:\t   指定探测包的大小\n\n\n例子：探测网段中的可用主机\n\n> 在ping命令中，可以使用“-b”选项，后面加入广播地址，探测整个网段。我们可以使用这个选 项知道整个网络中有多少主机是可以和我们通信的，而不用一个一个ip地址地进行探测。例如：\n\n[root@localhost ~]# ping -b -c 3 192.168.103.255\nwarning: pinging broadcast address\nping 192.168.103.255 (192.168.103.255) 56(84) bytes of data.\n64 bytes from 192.168.103.199: icmp_seq=1 ttl=64 time=1.95 ms\n64 bytes from 192.168.103.168: icmp_seq=1 ttl=64 time=1.97 ms (dup!)\n64 bytes from 192.168.103.252: icmp_seq=1 ttl=64 time=2.29 ms (dup!)\n…省略部分内容…\n\n#探测192.168.103.0/24网段中有多少可以通信的主机\n\n\n> windows的cmd ping排查可用ip的方式之一\n\n# 查看自己的ip\nipconfig/all\n    \n# -w 2毫秒延时，-n 数据包大小\nfor /l %i in (1,1,254) do ping -w 2 -n 1 192.168.10.%i\n\n# 查看ping的结果\narp -a\n\n\n\n# netstat\n\n> netstat是网络状态查看命令，既可以查看到本机开启的端口，也可以查看有哪些客户端连接。\n> \n> 在centos 7.x中netstat命令默认没有安装，如果需要使用，需要安装net-snmp和net-tools软件包。\n\n[root@localhost ~]# netstat [选项]\n选项：\n\t-a：\t\t列出所有网络状态，包括socket程序\n\t-c 秒数： 指定每隔几秒刷新一次网络状态\n    -n：\t\t使用ip地址和端口号显示，不使用域名与服务名\n    -p：\t\t显示pid和程序名\n    -t：\t\t显示使用tcp协议端口的连接状况\n    -u：\t\t显示使用udp协议端口的连接状况\n    -l：\t\t仅显示监听状态的连接\n    -r：\t\t显示路由表\n\n\n例子1：查看本机开启的端口\n\n这是本机最常用的方式，使用选项“-tuln”。因为使用了“-l”选项，所以只能看到监听状态的连接，而不能看到已经建立连接状态的连接。例如：\n\n[root@jysp ~]# netstat -tuln\nactive internet connections (only servers)\nproto recv-q send-q local address           foreign address         state\ntcp        0      0 0.0.0.0:4370            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:25235           0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:8883            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:8083            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:9972            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:8084            0.0.0.0:*               listen     \ntcp        0      0 127.0.0.1:631           0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:8888            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:15672           0.0.0.0:*               listen     \ntcp        0      0 127.0.0.1:8088          0.0.0.0:*               listen     \n\n#协议接收队列发送队列本机的ip地址及端口号远程主机的ip地址及端口号状态\n\nproto:\t网络连接的协议，一般就是tcp协议或者udp协议。\nrecv-q:\t表示接收到的数据，已经在本地的缓冲中，但是还没有被进程取走。\nsend-q:\t表示从本机发送，对方还没有收到的数据，依然在本地的缓冲中，一般是不具备ack标志的数据包。\nlocal address\t\t本机的ip地址和端口号。          \nforeign address\t\t远程主机的ip地址和端口号。\nstate\t\t\t\t状态。常见的状态主要有以下几种。\n\t- listen：监听状态，只有tcp协议需要监听，而udp协议不需要监听。\n\t- established：已经建立连接的状态。如果使用“-l”选项，则看不到已经建立连接的状态。\n\t- syn_sent：syn发起包，就是主动发起连接的数据包。\n\t- syn_recv：接收到主动连接的数据包。\n\t- fin_wait1：正在中断的连接。\n\t- fin_wait2：已经中断的连接，但是正在等待对方主机进行确认。\n\t- time_wait：连接已经中断，但是套接字依然在网络中等待结束。\n\t- closed：套接字没有被使用。\n\t\n在这些状态中，我们最常用的就是listen和established状态，一种代表正在监听，另一种代表已经建立连接。\n\n\n例子2：查看本机有哪些程序开启的端口\n\n如果使用“-p”选项，则可以查看到是哪个程序占用了端口，并且可以知道这个程序的pid。例如：\n\n[root@jysp ~]# netstat -tulnp\nactive internet connections (only servers)\nproto recv-q send-q local address           foreign address         state       pid/program name    \ntcp        0      0 0.0.0.0:4370            0.0.0.0:*               listen      15916/ubt_x64a64_al \ntcp        0      0 0.0.0.0:25235           0.0.0.0:*               listen      17209/ubt_x64a64_al \ntcp        0      0 0.0.0.0:8883            0.0.0.0:*               listen      15916/ubt_x64a64_al \ntcp        0      0 0.0.0.0:8083            0.0.0.0:*               listen      15916/ubt_x64a64_al \ntcp        0      0 0.0.0.0:9972            0.0.0.0:*               listen      17209/ubt_x64a64_al \ntcp        0      0 0.0.0.0:8084            0.0.0.0:*               listen      15916/ubt_x64a64_al \ntcp        0      0 127.0.0.1:631           0.0.0.0:*               listen      1682/cupsd          \ntcp        0      0 0.0.0.0:8888            0.0.0.0:*               listen      32061/nginx: master \ntcp        0      0 0.0.0.0:15672           0.0.0.0:*               listen      1684/beam.smp       \ntcp        0      0 127.0.0.1:8088          0.0.0.0:*               listen      1798/influxd        \ntcp        0      0 127.0.0.1:25            0.0.0.0:*               listen      2803/master         \ntcp        0      0 0.0.0.0:5370            0.0.0.0:*               listen      15916/ubt_x64a64_al \n\n#比之前的命令多了一个“-p”选项，结果多了“pid/程序名”，可以知道是哪个程序占用了端口\n\n\n例子3：查看所有连接\n\n使用选项“-an”可以查看所有连接，包括监听状态的连接（listen）、已经建立连接状态的连接（established）、socket程序连接等。因为连接较多，所以输出的内容有很多。例如：\n\n[root@jysp ~]# netstat -an\nactive internet connections (servers and established)\nproto recv-q send-q local address           foreign address         state      \ntcp        0      0 0.0.0.0:4370            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:25235           0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:8883            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:8083            0.0.0.0:*               listen     \ntcp        0      0 0.0.0.0:9972            0.0.0.0:*               listen    \n…省略部分内容…\nactive unix domain sockets (servers and established)\nproto refcnt flags       type       state         i-node   path\nunix  2      [ acc ]     stream     listening     19969    /var/run/docker.sock\nunix  2      [ acc ]     stream     listening     36871    /run/systemd/private\nunix  2      [ acc ]     stream     listening     41230    /run/user/42/pulse/native\nunix  2      [ acc ]     stream     listening     36880    /run/lvm/lvmetad.socket\nunix  2      [ acc ]     stream     listening     36886    /run/lvm/lvmpolld.socket\nunix  2      [ acc ]     stream     listening     19248    @/tmp/.ice-unix/4010\nunix  2      [ ]         dgram                    36893    /run/systemd/shutdownd\nunix  2      [ acc ]     stream     listening     27093    @/tmp/.x11-unix/x0\nunix  3      [ ]         dgram                    13347    /run/systemd/notify\n…省略部分内容…\n\n\n从“active unix domain sockets”开始，之后的内容就是socket程序产生的连接，之前的内容都是网络服务产生的连接。我们可以在“-an”选项的输出中看到各种网络连接状态，而之前的“-tuln”选项则只能看到监听状态。\n\n例子4：查看网关\n\n[root@jysp ~]# netstat -rn\nkernel ip routing table\ndestination     gateway         genmask         flags   mss window  irtt iface\n0.0.0.0         192.168.1.1     0.0.0.0         ug        0 0          0 enp125s0f5\n172.17.0.0      0.0.0.0         255.255.0.0     u         0 0          0 docker0\n172.18.0.0      0.0.0.0         255.255.0.0     u         0 0          0 br-3809f93307e8\n172.19.0.0      0.0.0.0         255.255.0.0     u         0 0          0 br-0aa8284bdd5f\n172.20.0.0      0.0.0.0         255.255.0.0     u         0 0          0 br-f83f277f7a5c\n172.25.0.0      0.0.0.0         255.255.0.0     u         0 0          0 br-61ad061d70be\n172.28.0.0      0.0.0.0         255.255.0.0     u         0 0          0 br-6e32681f18b2\n192.168.1.0     0.0.0.0         255.255.255.0   u         0 0          0 enp125s0f5\n192.168.112.0   0.0.0.0         255.255.240.0   u         0 0          0 br-24a3963f734c\n192.168.224.0   0.0.0.0         255.255.240.0   u         0 0          0 br-22ff53af9bc5\n\n\n查看指定端口占用情况\n\nnetstat -tlnp | grep [端口号|程序]\n# or\nnetstat -anp | grep [端口号|程序]\n\n\n查看所有端口占用情况\n\nnetstat -utlnp\n\n\n查看某个程序进程信息\n\nps -ef | grep [程序]\n# or\nps -aux | grep [程序]\n\n再根据 pid 查看端口占用\nnetstat -anp | grep 进程id\n\n\nps -u root 根据用户过滤进程 \nps -aux --sort -pcpu | less 根据 cpu 使用来升序排序 \nps -aux --sort -pmem | less 根据用户过滤进程\nps -aux --sort -pcpu,+pmem | head -n 10 查询全前10个使用cpu和内存最高的应用\n\n\n\n# nc（了解）\n\n> telnet/nc判断端口是否开启，了解\n\n\n# lsof\n\n> 查看指定端口使用情况\n\n\nlsof -i <条件>:[端口号]\n[root@xiaoshaozi ~]# lsof -i :22\ncommand   pid user   fd   type  device size/off node name\nsshd     1552 root    3u  ipv4   19568      0t0  tcp *:ssh (listen)\nsshd    28832 root    3u  ipv4 2959288      0t0  tcp izuf616fn1k2l61xnal11vz:ssh->220.180.63.118:55502 (established)\n\n\n列出系统上被进程打开的文件的相关信息\nlsof -i -p | grep [程序]\n[root@xiaoshaozi ~]# lsof -i -p | grep ssh\nsshd       1552     root    3u  ipv4   19568      0t0  tcp *:22 (listen)\nsshd      28832     root    3u  ipv4 2959288      0t0  tcp izuf616fn1k2l61xnal11vz:22->220.180.63.118:55502 (established)\n\n\n\n\n# write（了解）\n\na终端\n[root@jysp ~]# write root pts/5\nhello 中文\n\nb终端\n[root@jysp ~]# \nmessage from root@jysp on pts/3 at 10:25 ...\nhello \\344\\270\\255\\346\\226\\207\neof\n\n\n\n# ctrl+d 发送\n# 不支持中文\n\n\n[root@jysp ~]# w\n 10:22:24 up 6 days,  1:08,  4 users,  load average: 2.84, 3.07, 3.44\nuser     tty      from             login@   idle   jcpu   pcpu what\njysp     pts/1    192.168.1.9      09:27   42:48  29:51   0.06s -bash\njysp     pts/2    192.168.1.9      09:27   54:40  17.63s 17.60s top\nroot     pts/3    192.168.1.103    09:34    0.00s  0.05s  0.01s w\nroot     pts/4    192.168.1.103    09:34   48:20  16.44s 16.42s top\n\n\nlinux中终端\n\n * 本地字符终端 tty1-6 使用alt + f1-6\n * 本地图形终端tty7 ctrl+alt+f7(按住3秒，需要安装启动图形界面)\n * 远程终端 pts/0-255\n\n谁在执行w就是当前终端\n\n\n# wall（了解）\n\n> write命令用于给指定用户发送信息，而wall命令用于给所有登录用户发送信息，包括你自己。\n> \n> 执行时，在wall命令后加入需要发送的信息即可，例如：\n\n[root@localhost ~]# wall "i will be in 5 minutes to restart, please save your data"\n\n\n\n# mail\n\n> mail是linux的邮件客户端命令，可以利用这个命令给其他用户发送邮件。mail命令的基本信息如下。\n\n\n# 例子1：发送邮件\n\n如果我们想要给其他用户发送邮件，则可以执行如下命令：\n\n[root@localhost ~]# mail user1\nsubject: hello\t\t<-邮件标题\nnice to meet you!\t<-邮件具体内容\n.\t\t\t\t\t<-使用“.”来结束邮件输入\n\n#发送邮件给user1用户\n\n\n我们接收到的邮件都保存在“/var/spool/mail/用户名”中，每个用户都有一个以自己的用户名命名的邮箱。\n\n\n# 例子2：发送文件内容\n\n如果我们想把某个文件的内容发送给指定用户，则可以执行如下命令：\n\n[root@localhost ~]# mail -s "test mail" root < /root/anaconda-ks.cfg\n选项：\n-s：指定邮件标题\n\n#把/root/anaconda-ks.cfg文件的内容发送给root用户\n\n\n我们在写脚本时，有时需要脚本自动发送一些信息给指定用户，把要发送的信息预先写到文件中，是一个非常不错的选择。\n\n\n# 例子3：查看已经接收的邮件\n\n我们可以直接在命令行中执行mail命令，进入mail的交互命令中，可以在这里查看已经接收到的邮件。例如：\n\n[root@localhost ~]# mail\nheirloom mail version 12.4 7/29/08.type ?for help.\n"/var/spool/mail/root":1 message 1 new\n>n\t1 root\t\t\tmon dec\t5 22:45\t68/1777\t"test mail"<-之前收到的邮件\n>n\t2 root\t\t\tmon dec\t5 23:08\t18/602\t"hello"\n#未阅读 编号 发件人\t时间\t标题\n&\t\t\t\t\t<-等待用户输入命令\n\n\n可以看到已经接收到的邮件列表，“n”代表未读邮件，如果是已经阅读过的邮件，则前面是不会有这个“n”的；之后的数字是邮件的编号，我们主要通过这个编号来进行邮件的操作。如果我们想要查看第一封邮件，则只需输入邮件的编号“1”就可以了。\n\n在交互命令中执行“？”，可以查看这个交互界面支持的命令。\n\n解释一下常用的交互命令。\n\n * headers：列出邮件标题列表，直接输入“h”命令即可。\n\n * delete：删除指定邮件。比如想要删除第二封邮件，可以输入“d 2”。\n\n * save：保存邮件。可以把指定邮件保存成文件，如“s 2 /tmp/test.mail”。\n\n * quit：退出，并把已经操作过的邮件进行保存。比如移除已删除邮件、保存已阅读邮件等。\n\n * exit：退出，但是不保存任何操作。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170442765e4},{title:"常用配置",frontmatter:{},regularPath:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/",relativePath:"中间件/nginx/readme.md",key:"v-fa92aa00",path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/",headers:[{level:2,title:"下载安装",slug:"下载安装",normalizedTitle:"下载安装",charIndex:228},{level:2,title:"一、Web服务器",slug:"一、web服务器",normalizedTitle:"一、web服务器",charIndex:258},{level:2,title:"二、反向代理",slug:"二、反向代理",normalizedTitle:"二、反向代理",charIndex:639},{level:2,title:"三、负载均衡",slug:"三、负载均衡",normalizedTitle:"三、负载均衡",charIndex:1635},{level:3,title:"轮询(默认)",slug:"轮询-默认",normalizedTitle:"轮询(默认)",charIndex:1941},{level:3,title:"指定权重",slug:"指定权重",normalizedTitle:"指定权重",charIndex:2067},{level:3,title:"IP绑定 ip_hash",slug:"ip绑定-ip-hash",normalizedTitle:"ip绑定 ip_hash",charIndex:2206},{level:3,title:"fair（第三方）",slug:"fair-第三方",normalizedTitle:"fair（第三方）",charIndex:2364},{level:3,title:"url_hash（第三方）",slug:"url-hash-第三方",normalizedTitle:"url_hash（第三方）",charIndex:2477},{level:2,title:"四、URL重定向",slug:"四、url重定向",normalizedTitle:"四、url重定向",charIndex:2658},{level:2,title:"五、防盗链",slug:"五、防盗链",normalizedTitle:"五、防盗链",charIndex:2953},{level:2,title:"六、手机端重定向PC端",slug:"六、手机端重定向pc端",normalizedTitle:"六、手机端重定向pc端",charIndex:3197},{level:2,title:"七、基于请求路径转发不同服务",slug:"七、基于请求路径转发不同服务",normalizedTitle:"七、基于请求路径转发不同服务",charIndex:3404},{level:2,title:"四、URL重定向",slug:"四、url重定向-2",normalizedTitle:"四、url重定向",charIndex:2658},{level:2,title:"五、防盗链",slug:"五、防盗链-2",normalizedTitle:"五、防盗链",charIndex:2953},{level:2,title:"六、手机端重定向PC端",slug:"六、手机端重定向pc端-2",normalizedTitle:"六、手机端重定向pc端",charIndex:3197},{level:2,title:"七、基于请求路径转发不同服务",slug:"七、基于请求路径转发不同服务-2",normalizedTitle:"七、基于请求路径转发不同服务",charIndex:3404},{level:2,title:"八、目录索引",slug:"八、目录索引",normalizedTitle:"八、目录索引",charIndex:5216},{level:2,title:"九、Nginx状态监控（了解）",slug:"九、nginx状态监控-了解",normalizedTitle:"九、nginx状态监控（了解）",charIndex:6303},{level:2,title:"十、Nginx访问控制",slug:"十、nginx访问控制",normalizedTitle:"十、nginx访问控制",charIndex:6990},{level:3,title:"Nginx基于ip的访问控制",slug:"nginx基于ip的访问控制",normalizedTitle:"nginx基于ip的访问控制",charIndex:7006},{level:3,title:"Nginx基于用户认证访问控制",slug:"nginx基于用户认证访问控制",normalizedTitle:"nginx基于用户认证访问控制",charIndex:8e3},{level:2,title:"十一、Nginx访问限制",slug:"十一、nginx访问限制",normalizedTitle:"十一、nginx访问限制",charIndex:9931},{level:3,title:"连接数限制",slug:"连接数限制",normalizedTitle:"连接数限制",charIndex:10099},{level:3,title:"请求数限制",slug:"请求数限制",normalizedTitle:"请求数限制",charIndex:12165},{level:2,title:"Nginx Location",slug:"nginx-location",normalizedTitle:"nginx location",charIndex:13378},{level:3,title:"Location语法优先级排序",slug:"location语法优先级排序",normalizedTitle:"location语法优先级排序",charIndex:13471},{level:3,title:"配置location优先级",slug:"配置location优先级",normalizedTitle:"配置location优先级",charIndex:13694},{level:3,title:"location应用场景",slug:"location应用场景",normalizedTitle:"location应用场景",charIndex:14166},{level:2,title:"Nginx日志",slug:"nginx日志",normalizedTitle:"nginx日志",charIndex:15061},{level:3,title:"log_format配置",slug:"log-format配置",normalizedTitle:"log_format配置",charIndex:15162},{level:3,title:"access_log配置",slug:"access-log配置",normalizedTitle:"access_log配置",charIndex:18756},{level:3,title:"日志配置实例",slug:"日志配置实例",normalizedTitle:"日志配置实例",charIndex:19038},{level:2,title:"Nginx虚拟主机",slug:"nginx虚拟主机",normalizedTitle:"nginx虚拟主机",charIndex:24084},{level:2,title:"版本暴露问题",slug:"版本暴露问题",normalizedTitle:"版本暴露问题",charIndex:24296},{level:2,title:"ws代理",slug:"ws代理",normalizedTitle:"ws代理",charIndex:24352}],headersStr:"下载安装 一、Web服务器 二、反向代理 三、负载均衡 轮询(默认) 指定权重 IP绑定 ip_hash fair（第三方） url_hash（第三方） 四、URL重定向 五、防盗链 六、手机端重定向PC端 七、基于请求路径转发不同服务 四、URL重定向 五、防盗链 六、手机端重定向PC端 七、基于请求路径转发不同服务 八、目录索引 九、Nginx状态监控（了解） 十、Nginx访问控制 Nginx基于ip的访问控制 Nginx基于用户认证访问控制 十一、Nginx访问限制 连接数限制 请求数限制 Nginx Location Location语法优先级排序 配置location优先级 location应用场景 Nginx日志 log_format配置 access_log配置 日志配置实例 Nginx虚拟主机 版本暴露问题 ws代理",content:'# 常用配置\n\nhttps://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN\n\nNginx，一个高性能的 HTTP 和 反向代理 web 服务器，同时也提供了IMAP/POP3/SMTP 等服务。\n\n相对于 Apache 服务器，Nginx 更轻量、更适于高并发场景，单机就能够支持高达 5w 个并发连接数，常用于作为接入层网关，用于负载均衡，分摊用户的请求。\n\n\n\n\n# 下载安装\n\n先下载直接去官网nginx.org\n\n\n\n\n# 一、Web服务器\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        root\t/data/wwwroot;\n        index\tindex.html index.htm;\n    }\n}\n\nserver {\n    listen\t443\tssl;\n    server_name\t_;\n    ssl_certificate\t/path/to/certificate.crt;\n    ssl_certificate_key\t/path/to/private-key.key;\n    location / {\n        root\t/data/wwwroot;\n        index\tindex.html index.htm;\n    }\n}\n\n\n\n# 二、反向代理\n\nserver{\n\tlisten\t80;\n    server_name\t_;\n    location / {\n        proxy_pass http://192.168.1.100;\n        proxy_set_header Host $host;\n        # 域名和访问IP传递\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\n\nserver {\n    listen     \t\t443 ssl;\n    server_name  \tlocalhost;\n    ssl_dhparam          /etc/nginx/ssl/dhparam.pem;\n    ssl_certificate      /etc/nginx/ssl/server.crt;\n    ssl_certificate_key  /etc/nginx/ssl/server.key;\n    ssl_session_cache \tshared:SSL:1m;\n    ssl_session_timeout  4h;\n    ssl_session_tickets on;\n    ssl_protocols TLSv1.2;\n    ssl_prefer_server_ciphers  on;\n    client_max_body_size 0;\t\n\t# 前端页面\n    location / {\n        autoindex off;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:18002/;\n    }\n}\n\n\n\n# 三、负载均衡\n\nupstream webservers {\n    ip_hash;\n    server 192.168.1.100:8080;\n \tserver 192.168.1.101:8080;   \n}\n\nserver {\n    listen 80;\n    server_name _;\n    location / {\n        proxy_pass http://webservers;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\n\n\n# 轮询(默认)\n\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n\nupstream backserver { \nserver 192.168.0.14; \nserver 192.168.0.15; \n}\n\n\n\n# 指定权重\n\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n\nupstream backserver { \nserver 192.168.0.14 weight=8; \nserver 192.168.0.15 weight=10; \n} \n\n\n\n# IP绑定 ip_hash\n\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n\nupstream backserver { \nip_hash; \nserver 192.168.0.14:88; \nserver 192.168.0.15:80; \n}\n\n\n\n# fair（第三方）\n\n按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n\nupstream backserver { \nserver server1; \nserver server2; \nfair; \n} \n\n\n\n# url_hash（第三方）\n\n按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n\nupstream backserver { \nserver squid1:3128; \nserver squid2:3128; \nhash $request_uri; \nhash_method crc32; \n} \n\n\n\n# 四、URL重定向\n\n# 域名重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/(.*)$ https://new.example.org/$1;\n    }\n}\n\n# 路径重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/old-path/(.*)$ /new-path/$1;\n    }\n}\n\n\n\n# 五、防盗链\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location ~* \\.(gif|jpg|png)$ {\n        # 允许这个域名的访问，其他域名访问禁止\n        valid_referers none blocked *.example.org;\n        if ($invalid_referer) {\n            return 403;\n        }\n    }\n}\n\n\n\n# 六、手机端重定向PC端\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        if($http_user_agent ~* \'(android|iphone|ipad)\'){\n            rewrite ^/(.*)$ https://m.example.org/$1;\n        }\n    }\n}\n\n\n\n# 七、基于请求路径转发不同服务\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        proxy_pass http://192.168.1.100;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n    location /beijing/ {\n        proxy_pass http://192.168.1.101;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n    location /shanghai/ {\n        proxy_pass http://192.168.1.102;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\n\n\n# 四、URL重定向\n\n# 域名重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/(.*)$ https://new.example.org/$1;\n    }\n}\n\n# 路径重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/old-path/(.*)$ /new-path/$1;\n    }\n}\n\n\n\n# 五、防盗链\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location ~* \\.(gif|jpg|png)$ {\n        # 允许这个域名的访问，其他域名访问禁止\n        valid_referers none blocked *.example.org;\n        if ($invalid_referer) {\n            return 403;\n        }\n    }\n}\n\n\n\n# 六、手机端重定向PC端\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        if($http_user_agent ~* \'(android|iphone|ipad)\'){\n            rewrite ^/(.*)$ https://m.example.org/$1;\n        }\n    }\n}\n\n\n\n# 七、基于请求路径转发不同服务\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        proxy_pass http://192.168.1.100;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n    location /beijing/ {\n        proxy_pass http://192.168.1.101;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n    location /shanghai/ {\n        proxy_pass http://192.168.1.102;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\n\n\n# 八、目录索引\n\n * Nginx默认是不允许列出整个目录浏览下载\n\n * 配置目录索引的命令\n   \n   * 语法格式：autoindex on | off ; on开启 off关闭\n   \n   * 默认配置：autoindex off; 如果默认开启的话所有的文件都会以列表形式累出来，这些文件是不能给用户看到的\n   \n   * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）\n\n * autoindex常用参数\n   \n   * autoindex_exact_size off; 修改为on表示显示出文件的确切大小，单位是bytes，修改为off表示显示出文件的大概大小，单位是kb或者mb或者gb\n   \n   * autoindex_localtime on; 修改为on表示显示的时间为服务器中文件的时间，修改为off表示显示文件时间为GMT时间\n   \n   * charset utf-8,gbk; 默认中文目录乱码，添加上解决乱码，一般只配置一个utf-8即可，如果配置了utf8不行，那么久加上gbk\n\n * 案例：实现目录索引\n\n * 需求：1.当访问know.com时打开首页，2.访问know.com/download则打开目录索引列表\n\n * 注意：对单个页面实现目录索引，则在location /xxx{}中进行配置，想要实现首页目录索引，则在location /中配置\n\n[root@localhost conf.d]# vim know.conf\nserver {\n    listen 80;\n    server_name know.com;\n\n    location / {\n        root    /web/know;\n        index   index.html;\n    }\n\n    location /download {\n        root /web/know;\n        # 开启目录文件列表\n        autoindex on;\n        # 显示出文件的确切大小，单位是bytes\n        autoindex_exact_size on;\n        # 显示的文件时间为文件的服务器时间        \n        autoindex_localtime on;\n        # 指定字符集编码\n        charset utf-8,gbk;\n    }\n}\n\n\n\n\n\n# 九、Nginx状态监控（了解）\n\n * ngx_http_stub_status_module用于展示nginx连接状态信息，需要–with-http_stub_module模块支持\n * 配置状态监控命令\n   * 语法格式：stub_status; 老版本的nginx需要在后面加个on\n   * 默认配置：-\n   * 配置文件：server（对单个站点生效）、location（对单个页面生效，最常用）\n * 配置nginx status\n\n[root@localhost conf.d]# vim know.conf\nserver {\n    listen 80;\n    server_name know.com;\n\n    location / {\n        root    /web/know;\n        index   index.html;\n    }\n\n    location /nginx_status {\t\t\t//这里必须是nginx_status\n            stub_status;\n        access_log off;\t\t//这一项必须加上，表示不把此页面的访问写入到日志中\n    }\n}\n\n\n * 注意：\n   * 如果使用restart重置服务，会清空所有的连接数\n   * reload重载不会清空之前的连接数\n   * 通过状态监控，可以验证长连接和短连接的区别\n   * 设置短连接只需要修改/etc/nginx/nginx.conf文件中keepalive_timeout 0;即可\n\n\n# 十、Nginx访问控制\n\n\n# Nginx基于ip的访问控制\n\n * 基于ip的访问控制 http_access_module\n * 配置命令\n * 允许配置语法\n   * 语法格式：allow *address|CIDR|unix:|all*;\n   * 默认配置：-\n   * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n * 拒绝配置语法\n   * 语法格式：deny *address|CIDR|unix:|all*;\n   * 默认配置：-\n   * 配置区域：http、server、location、limit_except\n * 访问控制规则查看流程：从上往下、依次匹配，满足就不再继续，和网络中的acl规则一致\n * 企业中访问控制思路\n   * 先写允许的就默认拒绝所有\n   * 先写拒绝的就默认允许所有\n * 常见配置\n   * 允许一个：allow 192.168.81.210\n   * 允许一个网段：allow 192.168.81.0/24\n   * 允许多个网段就多写几个allow\n   * 允许所有allow all\n   * 拒绝一个：deny 192.168.81.210\n   * 拒绝一个网段：deny 192.168.81.0/24\n   * 拒绝多个网段就多写几个deny\n   * 拒绝所有deny all\n * 案例1：只允许192.168.81.1访问nginx_status，其他都拒绝\n\n[root@localhost conf.d]# vim know.conf\nlocation /nginx_status {\n    stub_status;\n    access_log off;\n    allow 192.168.81.1;\n    deny all;\n}\n\n\n * 案例2，拒绝192.168.81.1访问nginx_status，其他都允许\n\n[root@localhost conf.d]# vim know.conf\nlocation /nginx_status {\n    stub_status;\n    access_log off;\n    deny 192.168.81.1;\n    allow all;\n}\n\n\n\n# Nginx基于用户认证访问控制\n\n * 基于用户登录认证：http_auth_basic_module\n\n * 认证配置命令\n   \n   * 语法格式：auth_basic string |off; string表示描述信息，off表示关闭\n   * 默认配置：auth_basic off;\n   * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n\n * 用户密码配置文件\n   \n   * 语法格式：auth_basic_user_file filepath；\n   * 默认配置：-\n   * 配置区域：配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n\n * 实例\n   \n   生成用户密码文件\n   [root@localhost ~]# htpasswd -b -c /etc/nginx/.auth_passwd.conf admin 123456\n   Adding password for user admin\t\n   //首次创建使用-c创建出文件，第二次添加用户时不能使用-c，会把原来内容覆盖，-b表示命令行中一并输入用户名和密码而不是根据提示输入密码，可以看见明文，不需要交互，-D 删除指定的用户，建议多创建一些账号密码给不同人使用，某人离职后使用-D给他删掉\n   [root@localhost ~]# htpasswd -b /etc/nginx/.auth_passwd.conf jiangxl 123456\n   Adding password for user jiangxl\n   \n   删除用户\n   [root@localhost ~]# htpasswd -D /etc/nginx/.auth_passwd.conf wuzh\n   Deleting password for user wuzh\n   [root@localhost ~]# cat /etc/nginx/.auth_passwd.conf \n   admin:$apr1$ZanWwGuM$HSZAnt6DfJ0QQ3QK8xFp3.\n   jiangxl:$apr1$57gO0dsC$oNVF71wAfQN2qgTck8iI//\n   \n   [root@localhost conf.d]# vim know.conf\n   server {\n       listen 80;\n       server_name know.com;\n   \n       location / {\n           root    /web/know;\n           index   index.html;\n       }\n   \n       location /download {\n           alias /web/know;\n           autoindex on;\n           charset utf-8,gbk;\n           autoindex_exact_size on;\n           autoindex_localtime on;\n           auth_basic "Please enter the user name password!!!";\n           auth_basic_user_file /etc/nginx/.auth_passwd.conf;\n       }\n   }\n   \n   [root@localhost ~]# nginx -t\n   nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\n   nginx: configuration file /etc/nginx/nginx.conf test is successful\n   [root@localhost ~]# systemctl reload nginx\n   \n   谷歌看不到我么配置的提示内容，可以使用火狐\n   \n\n> 需要安装 http 才有 htpasswd 命令\n> \n> # centos\n> yum install -y httpd\n> # ubuntu\n> apt-get install -y apache2-utils\n\n\n\n\n# 十一、Nginx访问限制\n\n * 经常会遇到这种情况，服务器流量异常，负载过大等等，对于大流量恶意的攻击访问，会带来带宽的浪费，服务器压力，影响业务，往往开考虑对同一个IP的连接数，并发数进行限制\n * ngx_http_limit_conn_module模块可以根据定义key来限制每个键值的连接数，如同一个IP来源的连接数\n\n\n# 连接数限制\n\n * HTTP请求建立在一次TCP连接基础上，一次TCP连接至少产生一次HTTP请求\n * 用到的变量\n   * $binary_remote_addr 变量的长度是固定的4字节，表示客户端的地址存储字节，一个IP就是4字节，完全没有必要用7-15字节的，除非IPv6\n   * $remote_addr 变量的长度是7-15字节\n * 一个IP地址=32bit=4字节，假如我们配置的策略大小是10M那么可以容纳的IP数为10M=10X024X024\n * limit_conn_module连接频率限制\n * NGINX连接限制预语法\n   * 定义连接数限制zone\n     * 语法格式：limit_conn_zone key zone=name:size;\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）\n   * 调用连接数限制zone\n     * 语法格式：limit_conn name number;\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）\n * 实例\n\n首先定义一个zone限制，可以定义多个，对不同站点做不同的限制，配置在http模块中，按着正规配置就配置在nginx.conf中的http中，也可以配置到单个server配置中的最上方\n[root@localhost conf.d]# vim /etc/nginx/nginx.conf\nhttp {\n \t.....\n \t.....\n    limit_conn_zone $binary_remote_addr zone=know_conn:10m;\n    include /etc/nginx/conf.d/*.conf;\n}\n\n限制同一个IP来源的数量\n[root@localhost conf.d]# vim know.conf\nlimit_conn_zone $binary_remote_addr zone=know_conn:10m;\nserver {\n        listen 80;\n        server_name know.com;\n\n        location / {\n                root    /web/know;\n                index   index.html;\n                limit_conn know_conn 1;\n        }\n}        \n\n[root@localhost ~]# nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n[root@localhost ~]# systemctl reload nginx\n\n解释：\n\tlimit_conn_zone $binary_remote_addr zone=know_conn:10m;\t\t//定义一个限制，将用户的IP保存到变量$binary_remote_addr中，定义限制的名称是know_conn大小为10m\n\tlimit_conn know_conn 1;\t\t//调用刚刚定义的限制zone，1表示同一时刻只允许一个客户端ip连接\n\n\n压力测试\n\n[root@localhost ~]# ab -n 30000 -c 200 http://know.com/index.html\n\n\n * 博客详细介绍https://www.cnblogs.com/jingmin/p/9100747.html\n\n * 重要参数解释\n\n参数                     含义\nServer Software        服务器软件名称及版本信息)\nServer Hostname        服务器主机名\nServer Port            服务器端口\nDocument Path          供测试的URL路径\nDocument Length        供测试的URL返回的文档大小\nConcurrency Level      并发数\nTime taken for tests   压力测试消耗的总时间\nComplete requests      压力测试的的总次数\nFailed requests        失败的请求数\nTotal transferred      传输的总数据量\nHTML transferred       HTML文档的总数据量\nRequests per second    平均每秒的请求数\n\n\n# 请求数限制\n\n * limit_req_module请求频率限制\n * 请求数限制语法\n   * 定义请求数限制语法\n     * 语法格式：limit_req_zone key zone=name:size rate=rate;\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）\n   * 调用请求数限制语法\n     * 语法格式：limit_req zone number [burst=number] [nodelay];\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）\n * 请求数配置实例\n\n[root@localhost conf.d]# vim know.conf\nlimit_req_zone $binary_remote_addr zone=know_req:10m rate=1r/s;\nserver {\n        listen 80;\n        server_name know.com;\n\n        location / {\n                root    /web/know;\n                index   index.html;\n                limit_req zone=know_req burst=3 nodelay;\n        }\n}        \n\n解释：\n\tlimit_req_zone $binary_remote_addr zone=know_req:10m rate=1r/s;\t\t//定义一个req请求限制，把ip保存在变量中，zone名称是know_req大小10m，频率为1r/s表示1秒只能请求1个，多了就会报错，实际工作中肯定不会是1，可以根据自身应用的情况来进行调优，800-900适中\n\tlimit_req zone=know_req burst=3 nodelay;   //调用know_req，设置最大吞吐量为3，也就是最小是1，最多请求在给3个，当超过了3个就会报错\n\t\n[root@localhost ~]# nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n[root@localhost ~]# systemctl reload nginx\n\n使用压力测试来验证即可\n[root@localhost ~]# ab -n 20 -c 10 http://know.com/index.html\n\n\n\n# Nginx Location\n\n * 使用Nginx Location可以控制访问网站的路径\n * 语法格式\n   * location [=||*|^~] uri { … }\n\n\n# Location语法优先级排序\n\n匹配符   匹配规则             优先级\n=     精确匹配             1\n^~    以某个字符串开头         2\n~     区分大小写的正则匹配       3\n~*    不区分大小写的正则匹配      4\n!~    区分大小写的不匹配正则      5\n!~*   不区分大小写的不匹配正则     6\n/     通用匹配，任何请求都会匹配到   7\n\n\n# 配置location优先级\n\n[root@localhost conf.d]# vim testserver.conf\nserver {\n    listen 80;\n    server_name jiangxl.com;\n    location / {\n        default_type text/html;\t\t\t网站类型，必须是文本文档或者html\n            return 200 "location / jiang";\t如果访问代码是200则显示location / jiang\n    }\n\n    #location =/ {\n    #       default_type text/html;\n    #       return 200 "location =/ xiao";\n    #}\n\n    location ~ / {\n        default_type text/html;\n        return 200 "location ~/ long";\n    }\n}\n\n\n\n# location应用场景\n\n通用匹配，任何请求都会匹配到\nlocation / {\n}\n\n严格区分大小写，匹配以php结尾的都在这个location\nlocation ~ \\.php$ {\n    fastcgi_pass http://127.0.0.1:9000;\n}\n\n严格区分大小写，匹配jsp结尾的都在这个location\nlocation ~ \\.jsp$ {\n    proxy_pass http://127.0.0.1:8080;\n}\n\n不区分大小写匹配，只要访问.jpg,gif,png,js,css都都这条location\nlocation ~* .*\\.(jpg|gif|png|js|css) {\n    rewrite (.*) http://cdn.oldboyedu.com$request_url;\n}\n\n不区分大小写匹配\nlocation ~* .*\\.(sql|bak|tgz|tar.gz|git)$ {\n    default_type text/html;\n    return 403 "启用访问控制成功"\n}\n\n区分大小写拒绝访问网页中的avi文件\nlocation ~ .*\\.avi$ {\n    deny all;\n    #return 403 "拒绝成功";\n}\n\n不区分大小写拒绝访问网页中关于音视频的文件\nlocation ~* .*\\.(avi|mp3|mp4|pbb)$ {\t\t//前面匹配任意一个字符到多个字符结尾包含.avi或者.mp3或者.mp4或者.pbb的文件\n        deny all;\n    #return 403 "拒绝成功"\n}\n\n不区分大小写拒绝网页中的任意图片格式\nlocation ~* .*\\.(jpg|gif|png|jpeg)$ {\n    deny all;\n}\n\n拒绝访问sql、bak、tgz、tar.gz、.git文件\nlocation ~* .*\\.(sql|bak|tgz|tar.gz|git)$ {\n    return 403 "启用访问控制成功";\n}\n\n\n\n# Nginx日志\n\n * Nginx有非常灵活的日志记录模式。每个级别的配置可以有各自独立的访问日志，也就是说每个站点都可以有自己独立的访问日志，日志格式可以通过log_format命令定义格式\n\n\n# log_format配置\n\n * log_format指令\n   \n   * 配置语法对error.log、access.log都生效\n   * 语法格式：log_format name [escape=default|json string…;\n   * 默认配置：log_format combined “…”;\n   * 配置区域：http(对所有站点生效)\n\n * 默认的Nginx定义日志语法\n   \n   默认配置\n   log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                     \'$status $body_bytes_sent "$http_referer" \'\n                     \'"$http_user_agent" "$http_x_forwarded_for"\';\n   \n   192.168.81.1 - - [07/Apr/2020:18:26:12 +0800] "GET /linux-data/linux-txt.html HTTP/1.1" 200 2875 "http://know.com/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36" "-"\n   \n   如果做了代理或者负载可以用如下配置\n   log_format main \'$remote_addr $remote_user [$time_local] “$request” \'\n   \t\t\t\t\'$status $body_bytes_sent “$http_referer” \'\n   \t\t\t\t\'$http_user_agent $http_x_forwarded_for $request_time \t\t\t$upstream_response_time $upstream_addr $upstream_status\';\n   \t\t\t\t\n   log_format用来定义，main是定义的日志名称\n   可以定义多个log_format，用不同的名字区分最后调用即可\n   \n\n * Nginx日志格式允许保安的变量\n   \n   变量名                       日志内容                                                         作用\n   $remote_addr              192.168.81.1                                                 记录客户端IP地址\n   $remote_user              -                                                            记录客户端用户名一般为空\n   $time_local               [07/Apr/2020:18:26:12 +0800]                                 记录通用的本地时间\n   $time_iso8601             [2020-04-07T18:31:29+08:00]                                  记录ISO8601标准格式下的本地时间\n   $request                  "GET /linux-data/linux-txt.html HTTP/1.1                     记录请求的方法以及请求的http协议以及请求的文件\n   $status                   200                                                          记录请求状态码\n   $body_bytes_sent          2875                                                         发送给客户端的资源字节数\n   $bytes_sent               180                                                          发送给客户端的总字节数\n   $msec                     1586256157.677                                               日志写入时间，单位为秒，精度是毫秒\n   $http_referer             “http://know.com/”                                           记录从哪个页面连接访问过来的\n   $http_host                know.com                                                     请求地址，即浏览器中输入的访问地址\n   $http_user_agent          “Mozilla/5.0 (Windows NT 10.0; Win64; x64)                   记录客户端浏览器相关信息\n                             AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80\n                             Safari/537.36”\n   $http_x_forwarded_for     -                                                            记录客户端IP地址\n   $request_length           -                                                            请求的长度（包括请求行，请求头和请求正文）\n   $request_time             0.000                                                        请求花费的时间，单位为秒，精度毫秒\n   $ssl_protocol             TLSv1                                                        SSL协议版本\n   $ssl_cipher               RC4-SHA                                                      交换数据中的算法\n   $upstream_addr            192.168.81.210                                               后台upstream的地址，即真正提供服务的主机地址\n   $upstream_response_time   -                                                            请求过程中upstream后台服务器的响应时间\n   $upstream_status          200                                                          后台服务器响应的状态码\n\n * 注意：如果nginx位于负载均衡器，nginx反向代理后，web服务器无法直接获取客户端的真实ip地址\n\n * $remote_addr获取的是反向代理的ip地址，反向代理服务器在转发请求的http头信息中\n\n * 增加x-forwarded-for信息，用来记录客户端ip地址和客户端请求的服务器地址，即使客户端设置了代理服务器，同样能看到客户端的源地址，代理服务器和web服务器都需要配置for_forwarded_for\n\n\n# access_log配置\n\n * access_log指令\n   * 语法格式：access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition] ];\n   * access_log off;\n   * 默认配置：access_log logs/access.log combined;\n   * 配置区域：配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n\n\n# 日志配置实例\n\n需求：对所有站点设置单独的访问日志和错误日志，并定义不同的日志格式\n\n# 定义不同的日志格式\n\n修改主配置文件nginx.conf，把其中的access_log、error_log注释掉，并增加多个log_format\n即使注释掉，新的站点如果不定义access_log/error_log依然会存放到默认的路径下\n[root@localhost conf.d]# vim ../nginx.conf \n#error_log  /var/log/nginx/error.log warn;\nhttp {\n.....\n    log_format  know_log  \'$remote_addr - $remote_user [$time_local] $http_host   "$request" $request_time \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n\n    log_format  shangmei_log  \'$remote_addr - $http_host $remote_user [$time_local]  "$request" $request_time \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    #access_log  /var/log/nginx/access.log  main;\n....\n}\n\n\n# 编辑know.com配置文件\n\n修改站点know.com的配置文件，增加access_log、error_log\n[root@localhost conf.d]# vim know.conf\nserver {\n        listen 80;\n        server_name know.com;\n        access_log  /nginx_log/know_access.log know_log;   调用刚刚在主配置文件中增加的know_log\n        error_log /nginx_log/know_error.log warn;\n        ...\n}\n\n\n# 编辑shangmei.com配置文件\n\n修改站点shangmei.com的配置文件\n[root@localhost conf.d]# vim shangmei.conf\nserver {\n        listen 80;\n        server_name shangmei.com;\n        access_log /nginx_log/shangmei_access.log shangmei_log;\n        error_log /nginx_log/shangmei_error.log warn;\n        ...\n}\n\n\n# 新建nginx日志目录并重载\n\n[root@localhost conf.d]# mkdir /nginx_log\n\n[root@localhost conf.d]# nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n[root@localhost conf.d]# systemctl reload nginx\n\n[root@localhost conf.d]# ls /nginx_log/\nknow_access.log  know_error.log  shangmei_access.log  shangmei_error.log\n\n\n# 验证\n\n验证，发现对应的日志文件都有输出内容，并且access日志中格式也有所不同，know.com中url在第四列，shangmei.com中的url在第二列\n\nknow.com站点\n[root@localhost conf.d]# tail -f /nginx_log/know_access.log \n192.168.81.1 - - [07/Apr/2020:20:39:30 +0800] know.com   "GET /cisco+H3C%20data/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8.html HTTP/1.1" 0.000 304 0 "http://know.com/cisco+H3C%20data/cisco-text.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36" "-"\n[root@localhost conf.d]# tail -f /nginx_log/know_error.log \n2020/04/07 20:42:30 [error] 34599#34599: *667924 open() "/web/know/cisco+H3C data/Linux笔记大全.html" failed (2: No such file or directory), client: 192.168.81.1, server: know.com, request: "GET /cisco+H3C%20data/Linux%E7%AC%94%E8%AE%B0%E5%A4%A7%E5%85%A8.html HTTP/1.1", host: "know.com", referrer: "http://know.com/cisco+H3C%20data/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8.html"\n\nshangmei.com站点\n[root@localhost conf.d]# tail -f /nginx_log/shangmei_access.log\n192.168.81.1 - shangmei.com admin [07/Apr/2020:21:06:47 +0800]  "GET /download/ HTTP/1.1" 0.000 200 164 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36" "-"\n[root@localhost conf.d]# tail -f /nginx_log/shangmei_error.log \n2020/04/07 20:40:16 [error] 34599#34599: *667922 open() "/web/chapter/channel.js" failed (2: No such file or directory), client: 192.168.81.1, server: shangmei.com, request: "GET /channel.js HTTP/1.1", host: "shangmei.com", referrer: "http://shangmei.com/"\n\n\n# 【扩展】编译安装实现不同日志存放\n\n# server与主配置文件分离\n\n * 编译安装的nginx如果想把serve分出来可以这样配置\n\n[root@localhost ~]# mkdir /application/nginx/conf/conf.d\n[root@localhost ~]# cd /application/nginx/conf\n[root@localhost conf]# vim nginx.conf\nhttp {\n\t...\n\tinclude       /application/nginx/conf/conf.d/*.conf;\n\t...\n}\n[root@localhost conf]# touch conf.d/{know.conf,shangmei.conf,liurenxing.conf}\n\n\n\n# 构造server站点和日志\n\n编译安装的可能在主配置文件定义的log_format不会生效，这个不知道为啥可能跟源码包有关\n解决办法是在conf.d某个文件中定义好即可，这里在know.conf中定义\n\nknow.com\n[root@localhost conf]# vim conf.d/know.conf\nlog_format  acclog  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\nserver {\n        listen 80;\n        server_name know.com;\n        access_log  /nginx_log/know_access.log acclog;\n        error_log /nginx_log/know_error.log warn;\n        location / {\n                root    /web/know;\n                index   index.html;\n        }\n}\n\nshangmei.com\n[root@localhost conf]# vim conf.d/shangmei.conf\nserver {\n        listen 80;\n        server_name shangmei.com;\n        access_log /nginx_log/shangmei_access.log acclog;\n        error_log /nginx_log/shangmei_error.log warn;\n        location / {\n                root /web/shangmei;\n                index index.html;\n        }\n}\n\n[root@localhost conf]# vim conf.d/liurenxing.conf\nserver {\n        listen 80;\n        server_name lrx.com;\n        access_log /nginx_log/lrx_access.log acclog;\n        error_log /nginx_log/lrx_error.log warn;\n\n        location / {\n                root /web/liurenxing;\n                index index.htm;\n        }\n}\n\n\n\n# Nginx虚拟主机\n\n * 环境：在一台服务器上实现多个站点\n * 实现虚拟主机的方式\n   * 基于ip 不同IP实现\n   * 基于端口 相同IP不同端口\n   * 基于域名 相同ip相同端口不同域名\n * 需求：公司有三个站点需要发布分别采用是那种不同虚拟主机来实现，并且每个站点使用不同的日志存放，know.com、shangmei.com用各自定义的log_format，lrx.com用默认的main。\n\n\n# 版本暴露问题\n\nhttp {\n\n\t# 解决版本号暴露问题\n\tserver_tokens off;\n}\n\n\n\n# ws代理\n\nserver {\n    listen \t\t82;\n    server_name localhost;\n\n    location ^~ /zkhy/100/ {\n        autoindex off;\n        proxy_pass http://192.168.2.100:82/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "Upgrade";\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_connect_timeout 86400s;\n        proxy_read_timeout 86400s;\n        proxy_send_timeout 86400s;\n    }\n}\n\n\nserver {\n    listen     \t\t443 ssl;\n    server_name  \tlocalhost;\n    ssl_dhparam          /etc/nginx/ssl/dhparam.pem;\n    ssl_certificate      /etc/nginx/ssl/server.crt;\n    ssl_certificate_key  /etc/nginx/ssl/server.key;\n    ssl_session_cache \tshared:SSL:1m;\n    ssl_session_timeout  4h;\n    ssl_session_tickets on;\n    ssl_protocols TLSv1.2;\n    ssl_prefer_server_ciphers  on;\n    client_max_body_size 0;\n    location ^~ /webSocket/ {\n        autoindex off;\n        proxy_pass http://127.0.0.1:18002/webSocket/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "Upgrade";\n        proxy_set_header X-real-ip $remote_addr;\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_connect_timeout 86400s;\n        proxy_read_timeout 86400s;\n        proxy_send_timeout 86400s;\n    }\n}\n',normalizedContent:'# 常用配置\n\nhttps://www.digitalocean.com/community/tools/nginx?global.app.lang=zhcn\n\nnginx，一个高性能的 http 和 反向代理 web 服务器，同时也提供了imap/pop3/smtp 等服务。\n\n相对于 apache 服务器，nginx 更轻量、更适于高并发场景，单机就能够支持高达 5w 个并发连接数，常用于作为接入层网关，用于负载均衡，分摊用户的请求。\n\n\n\n\n# 下载安装\n\n先下载直接去官网nginx.org\n\n\n\n\n# 一、web服务器\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        root\t/data/wwwroot;\n        index\tindex.html index.htm;\n    }\n}\n\nserver {\n    listen\t443\tssl;\n    server_name\t_;\n    ssl_certificate\t/path/to/certificate.crt;\n    ssl_certificate_key\t/path/to/private-key.key;\n    location / {\n        root\t/data/wwwroot;\n        index\tindex.html index.htm;\n    }\n}\n\n\n\n# 二、反向代理\n\nserver{\n\tlisten\t80;\n    server_name\t_;\n    location / {\n        proxy_pass http://192.168.1.100;\n        proxy_set_header host $host;\n        # 域名和访问ip传递\n        proxy_set_header x-real-ip $remote_addr;\n    }\n}\n\n\nserver {\n    listen     \t\t443 ssl;\n    server_name  \tlocalhost;\n    ssl_dhparam          /etc/nginx/ssl/dhparam.pem;\n    ssl_certificate      /etc/nginx/ssl/server.crt;\n    ssl_certificate_key  /etc/nginx/ssl/server.key;\n    ssl_session_cache \tshared:ssl:1m;\n    ssl_session_timeout  4h;\n    ssl_session_tickets on;\n    ssl_protocols tlsv1.2;\n    ssl_prefer_server_ciphers  on;\n    client_max_body_size 0;\t\n\t# 前端页面\n    location / {\n        autoindex off;\n        proxy_set_header remote-host $remote_addr;\n        proxy_set_header x-real-ip $remote_addr;\n        proxy_set_header x-forwarded-proto $scheme;\n        proxy_set_header host $http_host;\n        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:18002/;\n    }\n}\n\n\n\n# 三、负载均衡\n\nupstream webservers {\n    ip_hash;\n    server 192.168.1.100:8080;\n \tserver 192.168.1.101:8080;   \n}\n\nserver {\n    listen 80;\n    server_name _;\n    location / {\n        proxy_pass http://webservers;\n        proxy_set_header host $host;\n        proxy_set_header x-real-ip $remote_addr;\n    }\n}\n\n\n\n# 轮询(默认)\n\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n\nupstream backserver { \nserver 192.168.0.14; \nserver 192.168.0.15; \n}\n\n\n\n# 指定权重\n\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n\nupstream backserver { \nserver 192.168.0.14 weight=8; \nserver 192.168.0.15 weight=10; \n} \n\n\n\n# ip绑定 ip_hash\n\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n\nupstream backserver { \nip_hash; \nserver 192.168.0.14:88; \nserver 192.168.0.15:80; \n}\n\n\n\n# fair（第三方）\n\n按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n\nupstream backserver { \nserver server1; \nserver server2; \nfair; \n} \n\n\n\n# url_hash（第三方）\n\n按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n\nupstream backserver { \nserver squid1:3128; \nserver squid2:3128; \nhash $request_uri; \nhash_method crc32; \n} \n\n\n\n# 四、url重定向\n\n# 域名重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/(.*)$ https://new.example.org/$1;\n    }\n}\n\n# 路径重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/old-path/(.*)$ /new-path/$1;\n    }\n}\n\n\n\n# 五、防盗链\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location ~* \\.(gif|jpg|png)$ {\n        # 允许这个域名的访问，其他域名访问禁止\n        valid_referers none blocked *.example.org;\n        if ($invalid_referer) {\n            return 403;\n        }\n    }\n}\n\n\n\n# 六、手机端重定向pc端\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        if($http_user_agent ~* \'(android|iphone|ipad)\'){\n            rewrite ^/(.*)$ https://m.example.org/$1;\n        }\n    }\n}\n\n\n\n# 七、基于请求路径转发不同服务\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        proxy_pass http://192.168.1.100;\n        proxy_set_header host $host;\n        proxy_set_header x-real-ip $remote_addr;\n    }\n    location /beijing/ {\n        proxy_pass http://192.168.1.101;\n        proxy_set_header host $host;\n        proxy_set_header x-real-ip $remote_addr;\n    }\n    location /shanghai/ {\n        proxy_pass http://192.168.1.102;\n        proxy_set_header host $host;\n        proxy_set_header x-real-ip $remote_addr;\n    }\n}\n\n\n\n# 四、url重定向\n\n# 域名重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/(.*)$ https://new.example.org/$1;\n    }\n}\n\n# 路径重定向\nserver {\n    listen\t80;\n    server_name\told.example.org;\n    location / {\n        rewrite ^/old-path/(.*)$ /new-path/$1;\n    }\n}\n\n\n\n# 五、防盗链\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location ~* \\.(gif|jpg|png)$ {\n        # 允许这个域名的访问，其他域名访问禁止\n        valid_referers none blocked *.example.org;\n        if ($invalid_referer) {\n            return 403;\n        }\n    }\n}\n\n\n\n# 六、手机端重定向pc端\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        if($http_user_agent ~* \'(android|iphone|ipad)\'){\n            rewrite ^/(.*)$ https://m.example.org/$1;\n        }\n    }\n}\n\n\n\n# 七、基于请求路径转发不同服务\n\nserver {\n    listen\t80;\n    server_name\t_;\n    location / {\n        proxy_pass http://192.168.1.100;\n        proxy_set_header host $host;\n        proxy_set_header x-real-ip $remote_addr;\n    }\n    location /beijing/ {\n        proxy_pass http://192.168.1.101;\n        proxy_set_header host $host;\n        proxy_set_header x-real-ip $remote_addr;\n    }\n    location /shanghai/ {\n        proxy_pass http://192.168.1.102;\n        proxy_set_header host $host;\n        proxy_set_header x-real-ip $remote_addr;\n    }\n}\n\n\n\n# 八、目录索引\n\n * nginx默认是不允许列出整个目录浏览下载\n\n * 配置目录索引的命令\n   \n   * 语法格式：autoindex on | off ; on开启 off关闭\n   \n   * 默认配置：autoindex off; 如果默认开启的话所有的文件都会以列表形式累出来，这些文件是不能给用户看到的\n   \n   * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）\n\n * autoindex常用参数\n   \n   * autoindex_exact_size off; 修改为on表示显示出文件的确切大小，单位是bytes，修改为off表示显示出文件的大概大小，单位是kb或者mb或者gb\n   \n   * autoindex_localtime on; 修改为on表示显示的时间为服务器中文件的时间，修改为off表示显示文件时间为gmt时间\n   \n   * charset utf-8,gbk; 默认中文目录乱码，添加上解决乱码，一般只配置一个utf-8即可，如果配置了utf8不行，那么久加上gbk\n\n * 案例：实现目录索引\n\n * 需求：1.当访问know.com时打开首页，2.访问know.com/download则打开目录索引列表\n\n * 注意：对单个页面实现目录索引，则在location /xxx{}中进行配置，想要实现首页目录索引，则在location /中配置\n\n[root@localhost conf.d]# vim know.conf\nserver {\n    listen 80;\n    server_name know.com;\n\n    location / {\n        root    /web/know;\n        index   index.html;\n    }\n\n    location /download {\n        root /web/know;\n        # 开启目录文件列表\n        autoindex on;\n        # 显示出文件的确切大小，单位是bytes\n        autoindex_exact_size on;\n        # 显示的文件时间为文件的服务器时间        \n        autoindex_localtime on;\n        # 指定字符集编码\n        charset utf-8,gbk;\n    }\n}\n\n\n\n\n\n# 九、nginx状态监控（了解）\n\n * ngx_http_stub_status_module用于展示nginx连接状态信息，需要–with-http_stub_module模块支持\n * 配置状态监控命令\n   * 语法格式：stub_status; 老版本的nginx需要在后面加个on\n   * 默认配置：-\n   * 配置文件：server（对单个站点生效）、location（对单个页面生效，最常用）\n * 配置nginx status\n\n[root@localhost conf.d]# vim know.conf\nserver {\n    listen 80;\n    server_name know.com;\n\n    location / {\n        root    /web/know;\n        index   index.html;\n    }\n\n    location /nginx_status {\t\t\t//这里必须是nginx_status\n            stub_status;\n        access_log off;\t\t//这一项必须加上，表示不把此页面的访问写入到日志中\n    }\n}\n\n\n * 注意：\n   * 如果使用restart重置服务，会清空所有的连接数\n   * reload重载不会清空之前的连接数\n   * 通过状态监控，可以验证长连接和短连接的区别\n   * 设置短连接只需要修改/etc/nginx/nginx.conf文件中keepalive_timeout 0;即可\n\n\n# 十、nginx访问控制\n\n\n# nginx基于ip的访问控制\n\n * 基于ip的访问控制 http_access_module\n * 配置命令\n * 允许配置语法\n   * 语法格式：allow *address|cidr|unix:|all*;\n   * 默认配置：-\n   * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n * 拒绝配置语法\n   * 语法格式：deny *address|cidr|unix:|all*;\n   * 默认配置：-\n   * 配置区域：http、server、location、limit_except\n * 访问控制规则查看流程：从上往下、依次匹配，满足就不再继续，和网络中的acl规则一致\n * 企业中访问控制思路\n   * 先写允许的就默认拒绝所有\n   * 先写拒绝的就默认允许所有\n * 常见配置\n   * 允许一个：allow 192.168.81.210\n   * 允许一个网段：allow 192.168.81.0/24\n   * 允许多个网段就多写几个allow\n   * 允许所有allow all\n   * 拒绝一个：deny 192.168.81.210\n   * 拒绝一个网段：deny 192.168.81.0/24\n   * 拒绝多个网段就多写几个deny\n   * 拒绝所有deny all\n * 案例1：只允许192.168.81.1访问nginx_status，其他都拒绝\n\n[root@localhost conf.d]# vim know.conf\nlocation /nginx_status {\n    stub_status;\n    access_log off;\n    allow 192.168.81.1;\n    deny all;\n}\n\n\n * 案例2，拒绝192.168.81.1访问nginx_status，其他都允许\n\n[root@localhost conf.d]# vim know.conf\nlocation /nginx_status {\n    stub_status;\n    access_log off;\n    deny 192.168.81.1;\n    allow all;\n}\n\n\n\n# nginx基于用户认证访问控制\n\n * 基于用户登录认证：http_auth_basic_module\n\n * 认证配置命令\n   \n   * 语法格式：auth_basic string |off; string表示描述信息，off表示关闭\n   * 默认配置：auth_basic off;\n   * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n\n * 用户密码配置文件\n   \n   * 语法格式：auth_basic_user_file filepath；\n   * 默认配置：-\n   * 配置区域：配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n\n * 实例\n   \n   生成用户密码文件\n   [root@localhost ~]# htpasswd -b -c /etc/nginx/.auth_passwd.conf admin 123456\n   adding password for user admin\t\n   //首次创建使用-c创建出文件，第二次添加用户时不能使用-c，会把原来内容覆盖，-b表示命令行中一并输入用户名和密码而不是根据提示输入密码，可以看见明文，不需要交互，-d 删除指定的用户，建议多创建一些账号密码给不同人使用，某人离职后使用-d给他删掉\n   [root@localhost ~]# htpasswd -b /etc/nginx/.auth_passwd.conf jiangxl 123456\n   adding password for user jiangxl\n   \n   删除用户\n   [root@localhost ~]# htpasswd -d /etc/nginx/.auth_passwd.conf wuzh\n   deleting password for user wuzh\n   [root@localhost ~]# cat /etc/nginx/.auth_passwd.conf \n   admin:$apr1$zanwwgum$hszant6dfj0qq3qk8xfp3.\n   jiangxl:$apr1$57go0dsc$onvf71wafqn2qgtck8ii//\n   \n   [root@localhost conf.d]# vim know.conf\n   server {\n       listen 80;\n       server_name know.com;\n   \n       location / {\n           root    /web/know;\n           index   index.html;\n       }\n   \n       location /download {\n           alias /web/know;\n           autoindex on;\n           charset utf-8,gbk;\n           autoindex_exact_size on;\n           autoindex_localtime on;\n           auth_basic "please enter the user name password!!!";\n           auth_basic_user_file /etc/nginx/.auth_passwd.conf;\n       }\n   }\n   \n   [root@localhost ~]# nginx -t\n   nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\n   nginx: configuration file /etc/nginx/nginx.conf test is successful\n   [root@localhost ~]# systemctl reload nginx\n   \n   谷歌看不到我么配置的提示内容，可以使用火狐\n   \n\n> 需要安装 http 才有 htpasswd 命令\n> \n> # centos\n> yum install -y httpd\n> # ubuntu\n> apt-get install -y apache2-utils\n\n\n\n\n# 十一、nginx访问限制\n\n * 经常会遇到这种情况，服务器流量异常，负载过大等等，对于大流量恶意的攻击访问，会带来带宽的浪费，服务器压力，影响业务，往往开考虑对同一个ip的连接数，并发数进行限制\n * ngx_http_limit_conn_module模块可以根据定义key来限制每个键值的连接数，如同一个ip来源的连接数\n\n\n# 连接数限制\n\n * http请求建立在一次tcp连接基础上，一次tcp连接至少产生一次http请求\n * 用到的变量\n   * $binary_remote_addr 变量的长度是固定的4字节，表示客户端的地址存储字节，一个ip就是4字节，完全没有必要用7-15字节的，除非ipv6\n   * $remote_addr 变量的长度是7-15字节\n * 一个ip地址=32bit=4字节，假如我们配置的策略大小是10m那么可以容纳的ip数为10m=10x024x024\n * limit_conn_module连接频率限制\n * nginx连接限制预语法\n   * 定义连接数限制zone\n     * 语法格式：limit_conn_zone key zone=name:size;\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）\n   * 调用连接数限制zone\n     * 语法格式：limit_conn name number;\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）\n * 实例\n\n首先定义一个zone限制，可以定义多个，对不同站点做不同的限制，配置在http模块中，按着正规配置就配置在nginx.conf中的http中，也可以配置到单个server配置中的最上方\n[root@localhost conf.d]# vim /etc/nginx/nginx.conf\nhttp {\n \t.....\n \t.....\n    limit_conn_zone $binary_remote_addr zone=know_conn:10m;\n    include /etc/nginx/conf.d/*.conf;\n}\n\n限制同一个ip来源的数量\n[root@localhost conf.d]# vim know.conf\nlimit_conn_zone $binary_remote_addr zone=know_conn:10m;\nserver {\n        listen 80;\n        server_name know.com;\n\n        location / {\n                root    /web/know;\n                index   index.html;\n                limit_conn know_conn 1;\n        }\n}        \n\n[root@localhost ~]# nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n[root@localhost ~]# systemctl reload nginx\n\n解释：\n\tlimit_conn_zone $binary_remote_addr zone=know_conn:10m;\t\t//定义一个限制，将用户的ip保存到变量$binary_remote_addr中，定义限制的名称是know_conn大小为10m\n\tlimit_conn know_conn 1;\t\t//调用刚刚定义的限制zone，1表示同一时刻只允许一个客户端ip连接\n\n\n压力测试\n\n[root@localhost ~]# ab -n 30000 -c 200 http://know.com/index.html\n\n\n * 博客详细介绍https://www.cnblogs.com/jingmin/p/9100747.html\n\n * 重要参数解释\n\n参数                     含义\nserver software        服务器软件名称及版本信息)\nserver hostname        服务器主机名\nserver port            服务器端口\ndocument path          供测试的url路径\ndocument length        供测试的url返回的文档大小\nconcurrency level      并发数\ntime taken for tests   压力测试消耗的总时间\ncomplete requests      压力测试的的总次数\nfailed requests        失败的请求数\ntotal transferred      传输的总数据量\nhtml transferred       html文档的总数据量\nrequests per second    平均每秒的请求数\n\n\n# 请求数限制\n\n * limit_req_module请求频率限制\n * 请求数限制语法\n   * 定义请求数限制语法\n     * 语法格式：limit_req_zone key zone=name:size rate=rate;\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）\n   * 调用请求数限制语法\n     * 语法格式：limit_req zone number [burst=number] [nodelay];\n     * 默认配置：-\n     * 配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）\n * 请求数配置实例\n\n[root@localhost conf.d]# vim know.conf\nlimit_req_zone $binary_remote_addr zone=know_req:10m rate=1r/s;\nserver {\n        listen 80;\n        server_name know.com;\n\n        location / {\n                root    /web/know;\n                index   index.html;\n                limit_req zone=know_req burst=3 nodelay;\n        }\n}        \n\n解释：\n\tlimit_req_zone $binary_remote_addr zone=know_req:10m rate=1r/s;\t\t//定义一个req请求限制，把ip保存在变量中，zone名称是know_req大小10m，频率为1r/s表示1秒只能请求1个，多了就会报错，实际工作中肯定不会是1，可以根据自身应用的情况来进行调优，800-900适中\n\tlimit_req zone=know_req burst=3 nodelay;   //调用know_req，设置最大吞吐量为3，也就是最小是1，最多请求在给3个，当超过了3个就会报错\n\t\n[root@localhost ~]# nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n[root@localhost ~]# systemctl reload nginx\n\n使用压力测试来验证即可\n[root@localhost ~]# ab -n 20 -c 10 http://know.com/index.html\n\n\n\n# nginx location\n\n * 使用nginx location可以控制访问网站的路径\n * 语法格式\n   * location [=||*|^~] uri { … }\n\n\n# location语法优先级排序\n\n匹配符   匹配规则             优先级\n=     精确匹配             1\n^~    以某个字符串开头         2\n~     区分大小写的正则匹配       3\n~*    不区分大小写的正则匹配      4\n!~    区分大小写的不匹配正则      5\n!~*   不区分大小写的不匹配正则     6\n/     通用匹配，任何请求都会匹配到   7\n\n\n# 配置location优先级\n\n[root@localhost conf.d]# vim testserver.conf\nserver {\n    listen 80;\n    server_name jiangxl.com;\n    location / {\n        default_type text/html;\t\t\t网站类型，必须是文本文档或者html\n            return 200 "location / jiang";\t如果访问代码是200则显示location / jiang\n    }\n\n    #location =/ {\n    #       default_type text/html;\n    #       return 200 "location =/ xiao";\n    #}\n\n    location ~ / {\n        default_type text/html;\n        return 200 "location ~/ long";\n    }\n}\n\n\n\n# location应用场景\n\n通用匹配，任何请求都会匹配到\nlocation / {\n}\n\n严格区分大小写，匹配以php结尾的都在这个location\nlocation ~ \\.php$ {\n    fastcgi_pass http://127.0.0.1:9000;\n}\n\n严格区分大小写，匹配jsp结尾的都在这个location\nlocation ~ \\.jsp$ {\n    proxy_pass http://127.0.0.1:8080;\n}\n\n不区分大小写匹配，只要访问.jpg,gif,png,js,css都都这条location\nlocation ~* .*\\.(jpg|gif|png|js|css) {\n    rewrite (.*) http://cdn.oldboyedu.com$request_url;\n}\n\n不区分大小写匹配\nlocation ~* .*\\.(sql|bak|tgz|tar.gz|git)$ {\n    default_type text/html;\n    return 403 "启用访问控制成功"\n}\n\n区分大小写拒绝访问网页中的avi文件\nlocation ~ .*\\.avi$ {\n    deny all;\n    #return 403 "拒绝成功";\n}\n\n不区分大小写拒绝访问网页中关于音视频的文件\nlocation ~* .*\\.(avi|mp3|mp4|pbb)$ {\t\t//前面匹配任意一个字符到多个字符结尾包含.avi或者.mp3或者.mp4或者.pbb的文件\n        deny all;\n    #return 403 "拒绝成功"\n}\n\n不区分大小写拒绝网页中的任意图片格式\nlocation ~* .*\\.(jpg|gif|png|jpeg)$ {\n    deny all;\n}\n\n拒绝访问sql、bak、tgz、tar.gz、.git文件\nlocation ~* .*\\.(sql|bak|tgz|tar.gz|git)$ {\n    return 403 "启用访问控制成功";\n}\n\n\n\n# nginx日志\n\n * nginx有非常灵活的日志记录模式。每个级别的配置可以有各自独立的访问日志，也就是说每个站点都可以有自己独立的访问日志，日志格式可以通过log_format命令定义格式\n\n\n# log_format配置\n\n * log_format指令\n   \n   * 配置语法对error.log、access.log都生效\n   * 语法格式：log_format name [escape=default|json string…;\n   * 默认配置：log_format combined “…”;\n   * 配置区域：http(对所有站点生效)\n\n * 默认的nginx定义日志语法\n   \n   默认配置\n   log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                     \'$status $body_bytes_sent "$http_referer" \'\n                     \'"$http_user_agent" "$http_x_forwarded_for"\';\n   \n   192.168.81.1 - - [07/apr/2020:18:26:12 +0800] "get /linux-data/linux-txt.html http/1.1" 200 2875 "http://know.com/" "mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/75.0.3770.80 safari/537.36" "-"\n   \n   如果做了代理或者负载可以用如下配置\n   log_format main \'$remote_addr $remote_user [$time_local] “$request” \'\n   \t\t\t\t\'$status $body_bytes_sent “$http_referer” \'\n   \t\t\t\t\'$http_user_agent $http_x_forwarded_for $request_time \t\t\t$upstream_response_time $upstream_addr $upstream_status\';\n   \t\t\t\t\n   log_format用来定义，main是定义的日志名称\n   可以定义多个log_format，用不同的名字区分最后调用即可\n   \n\n * nginx日志格式允许保安的变量\n   \n   变量名                       日志内容                                                         作用\n   $remote_addr              192.168.81.1                                                 记录客户端ip地址\n   $remote_user              -                                                            记录客户端用户名一般为空\n   $time_local               [07/apr/2020:18:26:12 +0800]                                 记录通用的本地时间\n   $time_iso8601             [2020-04-07t18:31:29+08:00]                                  记录iso8601标准格式下的本地时间\n   $request                  "get /linux-data/linux-txt.html http/1.1                     记录请求的方法以及请求的http协议以及请求的文件\n   $status                   200                                                          记录请求状态码\n   $body_bytes_sent          2875                                                         发送给客户端的资源字节数\n   $bytes_sent               180                                                          发送给客户端的总字节数\n   $msec                     1586256157.677                                               日志写入时间，单位为秒，精度是毫秒\n   $http_referer             “http://know.com/”                                           记录从哪个页面连接访问过来的\n   $http_host                know.com                                                     请求地址，即浏览器中输入的访问地址\n   $http_user_agent          “mozilla/5.0 (windows nt 10.0; win64; x64)                   记录客户端浏览器相关信息\n                             applewebkit/537.36 (khtml, like gecko) chrome/75.0.3770.80\n                             safari/537.36”\n   $http_x_forwarded_for     -                                                            记录客户端ip地址\n   $request_length           -                                                            请求的长度（包括请求行，请求头和请求正文）\n   $request_time             0.000                                                        请求花费的时间，单位为秒，精度毫秒\n   $ssl_protocol             tlsv1                                                        ssl协议版本\n   $ssl_cipher               rc4-sha                                                      交换数据中的算法\n   $upstream_addr            192.168.81.210                                               后台upstream的地址，即真正提供服务的主机地址\n   $upstream_response_time   -                                                            请求过程中upstream后台服务器的响应时间\n   $upstream_status          200                                                          后台服务器响应的状态码\n\n * 注意：如果nginx位于负载均衡器，nginx反向代理后，web服务器无法直接获取客户端的真实ip地址\n\n * $remote_addr获取的是反向代理的ip地址，反向代理服务器在转发请求的http头信息中\n\n * 增加x-forwarded-for信息，用来记录客户端ip地址和客户端请求的服务器地址，即使客户端设置了代理服务器，同样能看到客户端的源地址，代理服务器和web服务器都需要配置for_forwarded_for\n\n\n# access_log配置\n\n * access_log指令\n   * 语法格式：access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition] ];\n   * access_log off;\n   * 默认配置：access_log logs/access.log combined;\n   * 配置区域：配置区域：http（对所有站点生效）、server（对单个站点生效）、location（对单个页面生效，最常用）、limit_except（特殊位置）\n\n\n# 日志配置实例\n\n需求：对所有站点设置单独的访问日志和错误日志，并定义不同的日志格式\n\n# 定义不同的日志格式\n\n修改主配置文件nginx.conf，把其中的access_log、error_log注释掉，并增加多个log_format\n即使注释掉，新的站点如果不定义access_log/error_log依然会存放到默认的路径下\n[root@localhost conf.d]# vim ../nginx.conf \n#error_log  /var/log/nginx/error.log warn;\nhttp {\n.....\n    log_format  know_log  \'$remote_addr - $remote_user [$time_local] $http_host   "$request" $request_time \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n\n    log_format  shangmei_log  \'$remote_addr - $http_host $remote_user [$time_local]  "$request" $request_time \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    #access_log  /var/log/nginx/access.log  main;\n....\n}\n\n\n# 编辑know.com配置文件\n\n修改站点know.com的配置文件，增加access_log、error_log\n[root@localhost conf.d]# vim know.conf\nserver {\n        listen 80;\n        server_name know.com;\n        access_log  /nginx_log/know_access.log know_log;   调用刚刚在主配置文件中增加的know_log\n        error_log /nginx_log/know_error.log warn;\n        ...\n}\n\n\n# 编辑shangmei.com配置文件\n\n修改站点shangmei.com的配置文件\n[root@localhost conf.d]# vim shangmei.conf\nserver {\n        listen 80;\n        server_name shangmei.com;\n        access_log /nginx_log/shangmei_access.log shangmei_log;\n        error_log /nginx_log/shangmei_error.log warn;\n        ...\n}\n\n\n# 新建nginx日志目录并重载\n\n[root@localhost conf.d]# mkdir /nginx_log\n\n[root@localhost conf.d]# nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n[root@localhost conf.d]# systemctl reload nginx\n\n[root@localhost conf.d]# ls /nginx_log/\nknow_access.log  know_error.log  shangmei_access.log  shangmei_error.log\n\n\n# 验证\n\n验证，发现对应的日志文件都有输出内容，并且access日志中格式也有所不同，know.com中url在第四列，shangmei.com中的url在第二列\n\nknow.com站点\n[root@localhost conf.d]# tail -f /nginx_log/know_access.log \n192.168.81.1 - - [07/apr/2020:20:39:30 +0800] know.com   "get /cisco+h3c%20data/%e7%bd%91%e7%bb%9c%e6%8a%80%e6%9c%af%e4%b8%8e%e5%ba%94%e7%94%a8.html http/1.1" 0.000 304 0 "http://know.com/cisco+h3c%20data/cisco-text.html" "mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/75.0.3770.80 safari/537.36" "-"\n[root@localhost conf.d]# tail -f /nginx_log/know_error.log \n2020/04/07 20:42:30 [error] 34599#34599: *667924 open() "/web/know/cisco+h3c data/linux笔记大全.html" failed (2: no such file or directory), client: 192.168.81.1, server: know.com, request: "get /cisco+h3c%20data/linux%e7%ac%94%e8%ae%b0%e5%a4%a7%e5%85%a8.html http/1.1", host: "know.com", referrer: "http://know.com/cisco+h3c%20data/%e7%bd%91%e7%bb%9c%e6%8a%80%e6%9c%af%e4%b8%8e%e5%ba%94%e7%94%a8.html"\n\nshangmei.com站点\n[root@localhost conf.d]# tail -f /nginx_log/shangmei_access.log\n192.168.81.1 - shangmei.com admin [07/apr/2020:21:06:47 +0800]  "get /download/ http/1.1" 0.000 200 164 "-" "mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/75.0.3770.80 safari/537.36" "-"\n[root@localhost conf.d]# tail -f /nginx_log/shangmei_error.log \n2020/04/07 20:40:16 [error] 34599#34599: *667922 open() "/web/chapter/channel.js" failed (2: no such file or directory), client: 192.168.81.1, server: shangmei.com, request: "get /channel.js http/1.1", host: "shangmei.com", referrer: "http://shangmei.com/"\n\n\n# 【扩展】编译安装实现不同日志存放\n\n# server与主配置文件分离\n\n * 编译安装的nginx如果想把serve分出来可以这样配置\n\n[root@localhost ~]# mkdir /application/nginx/conf/conf.d\n[root@localhost ~]# cd /application/nginx/conf\n[root@localhost conf]# vim nginx.conf\nhttp {\n\t...\n\tinclude       /application/nginx/conf/conf.d/*.conf;\n\t...\n}\n[root@localhost conf]# touch conf.d/{know.conf,shangmei.conf,liurenxing.conf}\n\n\n\n# 构造server站点和日志\n\n编译安装的可能在主配置文件定义的log_format不会生效，这个不知道为啥可能跟源码包有关\n解决办法是在conf.d某个文件中定义好即可，这里在know.conf中定义\n\nknow.com\n[root@localhost conf]# vim conf.d/know.conf\nlog_format  acclog  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\nserver {\n        listen 80;\n        server_name know.com;\n        access_log  /nginx_log/know_access.log acclog;\n        error_log /nginx_log/know_error.log warn;\n        location / {\n                root    /web/know;\n                index   index.html;\n        }\n}\n\nshangmei.com\n[root@localhost conf]# vim conf.d/shangmei.conf\nserver {\n        listen 80;\n        server_name shangmei.com;\n        access_log /nginx_log/shangmei_access.log acclog;\n        error_log /nginx_log/shangmei_error.log warn;\n        location / {\n                root /web/shangmei;\n                index index.html;\n        }\n}\n\n[root@localhost conf]# vim conf.d/liurenxing.conf\nserver {\n        listen 80;\n        server_name lrx.com;\n        access_log /nginx_log/lrx_access.log acclog;\n        error_log /nginx_log/lrx_error.log warn;\n\n        location / {\n                root /web/liurenxing;\n                index index.htm;\n        }\n}\n\n\n\n# nginx虚拟主机\n\n * 环境：在一台服务器上实现多个站点\n * 实现虚拟主机的方式\n   * 基于ip 不同ip实现\n   * 基于端口 相同ip不同端口\n   * 基于域名 相同ip相同端口不同域名\n * 需求：公司有三个站点需要发布分别采用是那种不同虚拟主机来实现，并且每个站点使用不同的日志存放，know.com、shangmei.com用各自定义的log_format，lrx.com用默认的main。\n\n\n# 版本暴露问题\n\nhttp {\n\n\t# 解决版本号暴露问题\n\tserver_tokens off;\n}\n\n\n\n# ws代理\n\nserver {\n    listen \t\t82;\n    server_name localhost;\n\n    location ^~ /zkhy/100/ {\n        autoindex off;\n        proxy_pass http://192.168.2.100:82/;\n        proxy_http_version 1.1;\n        proxy_set_header upgrade $http_upgrade;\n        proxy_set_header connection "upgrade";\n        proxy_set_header x-real-ip $remote_addr;\n        proxy_set_header x-forwarded-for $remote_addr;\n        proxy_connect_timeout 86400s;\n        proxy_read_timeout 86400s;\n        proxy_send_timeout 86400s;\n    }\n}\n\n\nserver {\n    listen     \t\t443 ssl;\n    server_name  \tlocalhost;\n    ssl_dhparam          /etc/nginx/ssl/dhparam.pem;\n    ssl_certificate      /etc/nginx/ssl/server.crt;\n    ssl_certificate_key  /etc/nginx/ssl/server.key;\n    ssl_session_cache \tshared:ssl:1m;\n    ssl_session_timeout  4h;\n    ssl_session_tickets on;\n    ssl_protocols tlsv1.2;\n    ssl_prefer_server_ciphers  on;\n    client_max_body_size 0;\n    location ^~ /websocket/ {\n        autoindex off;\n        proxy_pass http://127.0.0.1:18002/websocket/;\n        proxy_http_version 1.1;\n        proxy_set_header upgrade $http_upgrade;\n        proxy_set_header connection "upgrade";\n        proxy_set_header x-real-ip $remote_addr;\n        proxy_set_header x-forwarded-for $remote_addr;\n        proxy_connect_timeout 86400s;\n        proxy_read_timeout 86400s;\n        proxy_send_timeout 86400s;\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1}},{title:"网络服务—NFS",frontmatter:{"autoGroup-1":"服务管理"},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86--NFS.html",relativePath:"zs-use/linux/基本使用/服务管理--NFS.md",key:"v-823483c8",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86--NFS.html",headers:[{level:2,title:"1.什么是NFS？",slug:"_1-什么是nfs",normalizedTitle:"1.什么是nfs？",charIndex:15},{level:2,title:"2.挂载原理",slug:"_2-挂载原理",normalizedTitle:"2.挂载原理",charIndex:378},{level:2,title:"3.协议及安装",slug:"_3-协议及安装",normalizedTitle:"3.协议及安装",charIndex:1284},{level:2,title:"4.守护进程",slug:"_4-守护进程",normalizedTitle:"4.守护进程",charIndex:1457},{level:2,title:"5.配置",slug:"_5-配置",normalizedTitle:"5.配置",charIndex:1611},{level:2,title:"6.启动与停止",slug:"_6-启动与停止",normalizedTitle:"6.启动与停止",charIndex:2564},{level:2,title:"7.实验示例",slug:"_7-实验示例",normalizedTitle:"7.实验示例",charIndex:2964},{level:2,title:"8.相关命令",slug:"_8-相关命令",normalizedTitle:"8.相关命令",charIndex:4038},{level:3,title:"exportfs命令",slug:"exportfs命令",normalizedTitle:"exportfs命令",charIndex:3278},{level:3,title:"rpcinfo命令",slug:"rpcinfo命令",normalizedTitle:"rpcinfo命令",charIndex:4404},{level:2,title:"收集示例1",slug:"收集示例1",normalizedTitle:"收集示例1",charIndex:4507},{level:3,title:"一、服务器A下操作（IP地址：192.168.2.21）",slug:"一、服务器a下操作-ip地址-192-168-2-21",normalizedTitle:"一、服务器a下操作（ip地址：192.168.2.21）",charIndex:4517},{level:3,title:"二、客户端B下操作（IP地址：192.168.2.25）",slug:"二、客户端b下操作-ip地址-192-168-2-25",normalizedTitle:"二、客户端b下操作（ip地址：192.168.2.25）",charIndex:5583},{level:3,title:"三、NFS客户端开机自启动挂载",slug:"三、nfs客户端开机自启动挂载",normalizedTitle:"三、nfs客户端开机自启动挂载",charIndex:6262},{level:3,title:"Debian）统信uos的NFS只是安装包不同",slug:"debian-统信uos的nfs只是安装包不同",normalizedTitle:"debian）统信uos的nfs只是安装包不同",charIndex:6688},{level:2,title:"收集示例2",slug:"收集示例2",normalizedTitle:"收集示例2",charIndex:6828},{level:3,title:"NFS Server",slug:"nfs-server",normalizedTitle:"nfs server",charIndex:6838},{level:3,title:"NFS Client",slug:"nfs-client",normalizedTitle:"nfs client",charIndex:7432},{level:2,title:"收集示例3",slug:"收集示例3",normalizedTitle:"收集示例3",charIndex:8047},{level:3,title:"NFS Server",slug:"nfs-server-2",normalizedTitle:"nfs server",charIndex:6838},{level:3,title:"NFS Client",slug:"nfs-client-2",normalizedTitle:"nfs client",charIndex:7432}],lastUpdated:"2024年1月5日星期五上午11点23分",lastUpdatedTimestamp:1704425034e3,headersStr:"1.什么是NFS？ 2.挂载原理 3.协议及安装 4.守护进程 5.配置 6.启动与停止 7.实验示例 8.相关命令 exportfs命令 rpcinfo命令 收集示例1 一、服务器A下操作（IP地址：192.168.2.21） 二、客户端B下操作（IP地址：192.168.2.25） 三、NFS客户端开机自启动挂载 Debian）统信uos的NFS只是安装包不同 收集示例2 NFS Server NFS Client 收集示例3 NFS Server NFS Client",content:'# 网络服务—NFS\n\n\n# 1.什么是NFS？\n\nNFS是Network File System的缩写，即网络文件系统。一种使用于分散式文件系统的协定，由Sun公司开发，于1984年向外公布。功能是通过网络让不同的机器、不同的操作系统能够彼此分享个别的数据，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法\n\n\n\n它的主要功能是通过网络让不同的机器系统之间可以彼此共享文件和目录。NFS服务器可以允许NFS客户端将远端NFS服务器端的共享目录挂载到本地的NFS客户端中。在本地的NFS客户端的机器看来，NFS服务器端共享的目录就好像自己的磁盘分区和目录一样。一般客户端挂载到本地目录的名字可以随便，但为方便管理，我们要和服务器端一样比较好。\n\nNFS一般用来存储共享视频，图片等静态数据。\n\n\n\n\n# 2.挂载原理\n\nNFS是通过网络来进行服务端和客户端之间的数据传输。两者之间要传输数据就要有想对应的网络端口来进行传输。NFS服务器到底使用什么网络端口来传输数据的，NFS服务器端其实是随机选择端口来进行数据传输。那NFS客户端又是如何知道NFS服务器端到底使用的是哪个端口呢？其实NFS服务器时通过远程过程调用（remote procedure call简称RPC）协议/服务来实现的。也就是说RPC服务会统一管理NFS的端口，客户端和服务端通过RPC来先沟通NFS使用了哪些端口，之后再利用这些端口（小于1024）来进行数据的传输。\n\n也就是RPC管理服务端的NFS端口分配，客户端要传数据，那客户端的RPC会先跟服务端的RPC去要服务器的端口，要到端口后再建立连接，然后传输数据。\n\n那RPC和NFS之间又是如何之间相互通讯的？\n\n首先当NFS启动后，就会随机的使用一些端口，然后NFS就会向RPC去注册这些端口。RPC就会记录下这些端口。并且RPC会开启111端口，等待客户端RPC的请求，如果客户端有请求，那服务端的RPC就会将记录的NFS端口信息告知客户端。\n\nRPC和NFS的启动顺序是怎样的？\n\n在启动NFS SERVER之前，首先要启动RPC服务（即portmap服务，下同）否则NFS SERVER就无法向RPC服务区注册，另外，如果RPC服务重新启动，原来已经注册好的NFS端口数据就会全部丢失。因此此时RPC服务管理的NFS程序也要重新启动以重新向RPC注册。特别注意：一般修改NFS配置文档后，是不需要重启NFS的，直接在命令执行/etc/init.d/nfsreload\n\n总结：客户端NFS和服务端NFS通讯过程\n\n1）首先服务器端启动RPC服务，并开启111端口\n\n2）启动NFS服务，并向RPC注册端口信息\n\n3）客户端启动RPC（portmap服务），向服务端的RPC(portmap)服务请求服务端的NFS端口\n\n4）服务端的RPC(portmap)服务反馈NFS端口信息给客户端。\n\n5）客户端通过获取的NFS端口来建立和服务端的NFS连接并进行数据的传输。\n\n\n\n\n# 3.协议及安装\n\n协议：\n\nRPC（Remote Procedure Call Protocol）——远程过程调用协议\n\n软件：\n\nnfs-utils-*：包括NFS命令与监控程序* rpcbind-*：支持安全NFS RPC服务的连接\n\n注：通常情况下，是作为系统的默认包安装的\n\nCentOS6.*之前rpcbind叫portmap\n\n\n# 4.守护进程\n\nnfs：它是基本的NFS守护进程，主要功能是管理客户端是否能够登录服务器\n\nrpcbind：主要功能是进行端口映射工作。当客户端尝试连接并使用RPC服务器提供的服务（如NFS服务）时，rpcbind会将所管理的与服务对应的端口提供给客户端，从而使客户可以通过该端口向服务器请求服务。\n\n\n# 5.配置\n\n1、配置文件\n\n> /etc/exports这个文件不一定会存在，可能要使用vim手动建立\n\n2、/etc/exports文件内容格式：\n\n共享目录 客户端1(访问权限,用户映射,其他) 客户端2(访问权限,用户映射,其他)\n\n/it 192.168.2.0/24(rw,sync,no_root_squash)\n\n# 共享目录：\n# 客户端地址\n\t\t指定ip地址的主机：192.168.0.200\n\t\t指定子网中的所有主机：192.168.88.0\n\t\t指定域名的主机：www.atguigu.com\n\t\t指定域中的所有主机：*.atguigu.com\n\t\t所有主机：*\n# 访问权限、映射规则\n访问权限选项：\n\t\t设置输出目录只读：ro\n\t\t设置输出目录读写：rw\n用户映射选项：\n\t\troot_squash：\t将root用户的访问映射为匿名（nfsnobody）用户uid和gid；（默认生效）\n\t\tno_root_squash：\t保留管理员权限，以服务器管理员的权限管理；\n\t\tall_squash：\t\t将远程访问的用户及所属组都映射为指定uid、gid的匿名用户；\n\t\t\t\tanonuid=xxx：将远程访问的所有用户都映射为指定uid的匿名用户；\n\t\t\t\tanongid=xxx：将远程访问的所有用户组都映射为指定gid匿名组账户；\n其它选项：\n\t\tsync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性（同步）；\n\t\tasync：将数据先保存在内存缓冲区中，必要时才写入磁盘（异步）；\n\n\n3、刷新配置\n\nexportfs -rv　　# 立即生效\n\n\n4、查看\n\n查看配置好的nfs共享目录\n\nexportfs\n\n[root@jysp jysp]# exportfs\n/data           10.139.102.0/24\n/data1          10.139.102.0/24\n\n\nshowmount\n\n[root@jysp jysp]# showmount -e localhost\nExport list for localhost:\n/data1 10.139.102.0/24\n/data  10.139.102.0/24\n\n\n\n# 6.启动与停止\n\n1、启动NFS服务器\n\n为了使NFS服务器能正常工作，需要启动rpcbind和nfs两个服务，并且rpcbind一定要先于nfs启动。\n\n# centos7之后\nsystemctl start rpcbind\nsystemctl start nfs\n\n# 开机自启动\nsystemctl enable rpcbind \nsystemctl enable nfs\n\n# 查看rpc注册的端口：\nrpcinfo -p 127.0.0.1\n\n\n2、停止NFS服务器\n\n要停止NFS运行时，需要先停止nfs服务再停止rpcbind服务，对于系统中有其他服务(如NIS)需要使用时，不需要停止rpcbind服务\n\nsystemctl stop nfs\nsystemctl stop rpcbind\n\n\n3、查看RPC服务器开启了哪些端口\n\nrpcinfo -p localhost\n\n\n\n# 7.实验示例\n\n1、将NFS服务器的/home/zhangsan共享给192.168.115.0网段，rw权限\n\n# vi /etc/exports\n/home/zhangsan 192.168.115.0(rw)\n\n\n2、重启rpcbind和nfs服务\n\nservice rpcbind restart\nservice nfs restart\nexportfs\n\n\n[root@jysp jysp]# exportfs\n/data           10.139.102.0/24\n/data1          10.139.102.0/24\n\n\n3、服务器端查看nfs共享状态\n\n查看自己共享的服务 showmount、exportfs命令作用相同\n\nshowmount -e 本机ip\n\n\n4、客户端查看nfs共享状态\n\nshowmount -e NFS服务器IP\n\n\n5、客户端挂载nfs服务器共享目录\n\n命令格式：mount NFS服务器IP:共享目录本地挂载点目录\n\nmount 192.168.115.10:/home/zhangsan/ /media/zhangsan/\nmount | grep nfs\nmount –o vers=3 共享本地#指定挂载使用nfs V3/V4版本（避免同步延迟）\n\n\n验证客户端和nfs服务器端文件是否一致：\n\n\n\n修改服务器端相应权限，不然客户端无法正常访问和使用\n\n6、nfs共享权限和访问控制\n\na.客户端root用户\n\n使用客户端的root身份在nfs服务器上创建文件，文件的所有者和所属组是nfsnobody。\n\nb.客户端普通用户\n\n使用客户端的普通用户身份在nfs服务器上创建文件，所有者和所属组是nobody或普通用户。\n\n如果明确设定了普通用户的映射用户身份，那么此时客户端用户的身份转换为指定映射用户；\n\n如果NFS server上面有同名用户，那么此时客户端登录账户的身份转换为NFS server上面的同名用户；\n\n7、卸载和自动挂载\n\n卸载：\n\n1.卸载客户端的挂载目录\n\numount 挂载点\n\n2.停止服务器端的共享\n\nexportfs –au\n\n自动挂载：/etc/fstab\n\n格式：:</remote/export> </local/directory> nfs < options> 0 0\n\n#192.168.115.10:/home/zhangsan /media/zhangsan nfs defaults, 0 0\n#mount –a\n\n\n\n# 8.相关命令\n\n\n# exportfs命令\n\n如果我们在启动了NFS之后又修改了/etc/exports，是不是还要重新启动nfs呢？这个时候我们就可以用exportfs命令来使改动立刻生效，该命令格式如下：\n\n格式：exportfs [-aruv]\n\t\t-a\t全部挂载或卸载 /etc/exports 中的内容\n\t\t-r\t重新读取 /etc/exports 中的信息，并同步更新 /etc/exports 、/var/lib/nfs/xtab\n\t\t-u\t卸载单一目录（和-a一起使用为卸载所有/etc/exports文件中的目录）\n\t\t-v\t在export的时候，将详细的信息输出到屏幕上。\n\n具体例子：\n\t# exportfs -au 卸载所有共享目录\n\t# exportfs -ra 重新共享所有目录并输出详细信息\n\n\n\n# rpcinfo命令\n\n利用rpcinfo -p可以查看出RPC开启的端口所提供的程序有哪些\n\n其中nfs开启的是2049，portmapper(rpcbind)开启的是111，其余则是rpc开启的\n\n\n# 收集示例1\n\n\n# 一、服务器A下操作（IP地址：192.168.2.21）\n\n1、查看NFS安装情况：\n\nrpm -qa nfs-utils rpcbind\n\n\n（没有的话，用yum install nfs-utils rpcbind -y安装）\n\n2、启动RPC：\n\nsystemctl start rpcbind   (service rpcbind start)　\n\n\n开机自启动：\n\nsystemctl enable rpcbind   (service rpcbind enable)\n\n\n看看有没有注册的端口：\n\nrpcinfo -p 127.0.0.1\n\n\n3、启动NFS：\n\nsystemctl start nfs（十以上版本sudo service nfs-server start）或者（systemctl start nfs-server）\n\n\n再看注册的端口\n\nrpcinfo -p 127.0.0.1\n\n\n发现多了很多\n\n4、配置nfs （NFS配置文件/etc/exports）\n\n创建目录**/it和/it/a**文件作为共享目录和共享文件\n\nmkdir /it\ntouch /it/a\n\n\n编辑文件(读写，同步，其它服务器挂载后root可操作)\n\nvim /etc/exports\n/it 192.168.2.0/24(rw,sync,no_root_squash)\n\n\n5、重启NFS\n\nsystemctl reload nfs或者exportfs -r\n\n\n若出现exportfs: /home requires fsid= for NFS export\n\n解决方法：\n\n/home 192.167.253.0/24(fsid=0,rw,sync,no_root_squash) //加入fsid=0参数就可\n\n\nnfs默认用户nfsnobody\n\ngrep nfsno /etc/passwd\n\n\n没有的话，自己创建\n\ngroupadd -g -f 65534 nfsnobody\nuseradd nfsnobody -u 65534 -g nfsnobody -s /sbin/nologin -M\n\n\n6、授权\n\nchown -R nfsnobody.nfsnobody /it\n\n\n7、检查自己\n\nshowmount -e 192.168.2.21  (exportfs)\n\n\n8、服务器本地挂载：\n\nmount -t nfs 192.168.2.21:/it /mnt\n\n\n\n\n\n\n本地测试成功\n\n\n# 二、客户端B下操作（IP地址：192.168.2.25）\n\n1、查看NFS安装情况：\n\nrpm -qa nfs-utils rpcbind\n\n\n（安装nfs-utils的目的是为了获得showmount命令） 2、启动RPC：\n\nsystemctl start rpcbind\n\n\n开机自启动：\n\nsystemctl enable rpcbind\n\n\nnetstat -lntup|grep 111\n\n\n\n\n3、查看NFS服务器提供的共享目录\n\nshowmount -e 192.168.2.21\n\n\n{ i、若出现clnt_create: RPC: Program not registered：程序没有注册\n\n\n\n说明：RPC服务器开启了，但NFS没有告诉RPC开启的服务端口 重启nfs（首先检查服务端NFS是否开启）\n\nsystemctl start nfs（十以上版本sudo service nfs-server start）或者（systemctl start nfs-server）\n\n\n检查：rpcinfo -p 127.0.0.1（出现很多表明可以了）\n\nii、若出现：\n\n去服务端（192.168.2.21）关闭防火墙\n\nsystemctl stop firewalld\n\n\n} 4、挂载测试（将192.168.2.21挂载到192.168.2.25下）\n\nmount -t nfs 192.168.2.21:/it /mnt\n\n\n若出现： 则需要关掉防火墙：service firewalld stop\n\n\n\n\n\n挂载成功。\n\n\n# 三、NFS客户端开机自启动挂载\n\n方法一：/etc/rc.local\n\nchmod +x /etc/rc.d/rc.local\n\n\n\n\nvim /etc/rc.local\n在底部加上\n/bin/mount -t nfs 192.168.109.132:/it /mnt\n(将192.168.109.132挂载到192.168.109.131下)　\n\n\n然后reboot重启 查看是否成功\n\n方法二：放入vim /etc/fstab（有坑）\n\n192.168.109.132:/it  /mnt  nfs defaults   0 0\n\n\n开启延迟满足的服务remote-fs.target(centos7) netfs(centos6)\n\nsystemctl start remote-fs.target\nsystemctl enable remote-fs.target\nsystemctl status remote-fs.target\n\n\n\n# Debian）统信uos的NFS只是安装包不同\n\n服务器安装包：\n\napt-get install nfs-kernel-server\n\n\n客户端安装包：\n\napt install -y nfs-common　\ndpkg -l nfs-kernel-server查看包\n\n\n\n# 收集示例2\n\n\n# NFS Server\n\nNFS Server\n1. 安装nfs-server\n　　# yum install -y nfs-utils\n\n2. 创建NFS目录\n　　# mkdir /nfs\n\n3. 配置NFS目录\n \n\n　　# echo "/nfs    *(rw,sync,no_root_squash)" >> /etc/exports\n\n　　参数说明： \n\n　　　　rw 读写\n　　　　ro 只读\n　　　　sync 数据直接写入磁盘\n　　　　async 数据先写入内存\n　　　　no_root_squash 对root用户不压制，在服务端都映射为服务端的root用户\n　　　　root_squash 如果客户端是用户root操作，会被压制成nobody用户\n　　　　all_squash 不管客户端的使用nfs的用户是谁，都会压制成nobody用户\n　　　　nonuid=uid: 指定uid的值\n　　　　anongid=gid:指定gid的值\n\n \n\n　　# exportfs -rv　　# 立即生效\n\n4. 启动NFS服务\n　　# systemctl enable --now nfs-server.service\n\n　　# showmount -e\n\n\n\n\n\nmkdir /zsdata\nchmod o+w /zsdata/\n\nvim /etc/exports\n\n\n\n\n\n# NFS Client\n\n\nNFS Client(方法一)\n1. 安装nfs-client\n　　# yum install -y nfs-utils\n\n2. 创建挂载目录\n　　# mkdir /var/nfs\n\n3. 查看NFS Server目录\n　　# showmount -e nfs-server-ip\n\n4. 挂载NFS Server目录\n　　# mount -t nfs nfs-server-ip:/nfs /var/nfs\n\n \n\nNFS Client(方法二)\n要实现开机自动挂载，通常将挂载配置信息直接写入到 /etc/fstab文件中。\n​autofs自动挂载服务是一种Linux系统守护进程，当检测到用户访问一个尚未挂载的文件系统时，会自动根据配置文件进行挂载（动态挂载）。\n\n \n\n1. 安装autofs\n　　# yum install autofs\n\n2. 创建挂载目录\n　　# mkdir /var/nfs\n\n3. 自动挂载NFS配置\n　　# echo "/var/nfs    /etc/auto.nfs" >> /etc/auto.master\n\n　　# echo "data -fstype=nfs nfs-server-ip:/nfs" >> /etc/auto.nfs\n\n4. 启动autofs服务\n　　# systemctl enable --now autofs.service\n\n\n\n# 收集示例3\n\n\n# NFS Server\n\n1、安装nfs服务\n\nyum -y install rpcbind nfs-utils\n\n\n2、创建共享目录\n\n在服务器上创建共享目录，并设置权限。\n\nmkdir /data/share/\nchmod 755 -R /data/share/\n\n\n3、配置NFS\n\nnfs的配置文件是 /etc/exports ，在配置文件中加入一行：\n\n/data/share/ 192.168.11.34(rw,no_root_squash,no_all_squash,sync)\n\n\n这行代码的意思是把共享目录/data/share/共享给192.168.11.34这个客户端ip，后面括号里的内容是权限参数，其中：\n\nrw 表示设置目录可读写。\n\nsync 表示数据会同步写入到内存和硬盘中，相反 rsync 表示数据会先暂存于内存中，而非直接写入到硬盘中。\n\nno_root_squash NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。\n\nno_all_squash 不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都不会拥有匿名用户权限。\n\n如果有多个共享目录配置，则使用多行，一行一个配置。保存好配置文件后，需要执行以下命令使配置立即生效：\n\nexportfs -r\n\n\n4.设置防火墙\n\n如果你的系统没有开启防火墙，那么该步骤可以省略。\n\nNFS的防火墙特别难搞，因为除了固定的port111、2049外，还有其他服务如rpc.mounted等开启的不固定的端口，这样对防火墙来说就比较麻烦了。为了解决这个问题，我们可以设置NFS服务的端口配置文件。\n\n修改/etc/sysconfig/nfs文件，将下列内容的注释去掉，如果没有则添加：\n\nRQUOTAD_PORT=1001\nLOCKD_TCPPORT=30001\nLOCKD_UDPPORT=30002\nMOUNTD_PORT=1002\n\n\n保存好后，将端口加入到防火墙允许策略中。执行：\n\nfirewall-cmd --zone=public --add-port=111/tcp --add-port=111/udp --add-port=2049/tcp --add-port=2049/udp --add-port=1001/tcp --add-port=1001/udp --add-port=1002/tcp --add-port=1002/udp --add-port=30001/tcp --add-port=30002/udp --permanent\nfirewall-cmd --reload\n\n\n5.启动服务\n\n按顺序启动rpcbind和nfs服务：\n\nsystemctl start rpcbind\nsystemctl start nfs\n\n\n加入开机启动：\n\nsystemctl enable rpcbind \nsystemctl enable nfs\n\n\nnfs服务启动后，可以使用命令 rpcinfo -p 查看端口是否生效。\n\n服务器的后，我们可以使用 showmount 命令来查看服务端(本机)是否可连接：\n\n[root@localhost ~]# showmount -e localhost\nExport list for localhost:\n/data/share 192.168.11.34\n\n\n出现上面结果表明NFS服务端配置正常。\n\n\n# NFS Client\n\n1.安装rpcbind服务\n\n客户端只需要安装rpcbind服务即可，无需安装nfs或开启nfs服务。\n\nyum -y install rpcbind\n\n\n2.挂载远程nfs文件系统\n\n查看服务端已共享的目录:\n\n[root@localhost ~]# showmount -e 192.168.11.31\nExport list for 192.168.11.31:\n/data/share 192.168.11.34\n\n\n建立挂载目录，执行挂载命令：\n\nmkdir -p /mnt/share\nmount -t nfs 192.168.11.34:/data/share /mnt/share/ -o nolock,nfsvers=3,vers=3\n\n\n如果不加 -o nolock,nfsvers=3 则在挂载目录下的文件属主和组都是nobody，如果指定nfsvers=3则显示root。\n\n如果要解除挂载，可执行命令：\n\numount /mnt/share\n\n\n3.开机自动挂载\n\n如果按本文上面的部分配置好，NFS即部署好了，但是如果你重启客户端系统，发现不能随机器一起挂载，需要再次手动操作挂载，这样操作比较麻烦，因此我们需要设置开机自动挂载。我们不要把挂载项写到/etc/fstab文件中，因为开机时先挂载本机磁盘再启动网络，而NFS是需要网络启动后才能挂载的，所以我们把挂载命令写入到/etc/rc.d/rc.local文件中即可。\n\n[root@localhost ~]# vim /etc/rc.d/rc.local\n#在文件最后添加一行：\nmount -t nfs 192.168.11.34:/data/share /mnt/share/ -o nolock,nfsvers=3,vers=3\n\n\n保存并重启机器看看。\n\n测试验证\n\n查看挂载结果，在客户端输入 df -h\n\n文件系统    容量 已用 可用 已用% 挂载点\n/dev/mapper/centos-root   18G 5.0G 13G 29% /\ndevtmpfs      904M  0 904M 0% /dev\ntmpfs       916M  0 916M 0% /dev/shm\ntmpfs       916M 9.3M 906M 2% /run\ntmpfs       916M  0 916M 0% /sys/fs/cgroup\n/dev/sda1      497M 164M 334M 33% /boot\ntmpfs       184M  0 184M 0% /run/user/0\n192.168.11.31:/data/share  18G 1.7G 16G 10% /mnt/share\n\n\n看到最后一行了没，说明已经挂载成功了。接下来就可以在客户端上进入目录/mnt/share下，新建/删除文件，然后在服务端的目录/data/share查看是不是有效果了，同样反过来在服务端操作在客户端对应的目录下看效果。\n\n总结\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家对ZaLou.Cn的支持。',normalizedContent:'# 网络服务—nfs\n\n\n# 1.什么是nfs？\n\nnfs是network file system的缩写，即网络文件系统。一种使用于分散式文件系统的协定，由sun公司开发，于1984年向外公布。功能是通过网络让不同的机器、不同的操作系统能够彼此分享个别的数据，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类unix系统间实现磁盘文件共享的一种方法\n\n\n\n它的主要功能是通过网络让不同的机器系统之间可以彼此共享文件和目录。nfs服务器可以允许nfs客户端将远端nfs服务器端的共享目录挂载到本地的nfs客户端中。在本地的nfs客户端的机器看来，nfs服务器端共享的目录就好像自己的磁盘分区和目录一样。一般客户端挂载到本地目录的名字可以随便，但为方便管理，我们要和服务器端一样比较好。\n\nnfs一般用来存储共享视频，图片等静态数据。\n\n\n\n\n# 2.挂载原理\n\nnfs是通过网络来进行服务端和客户端之间的数据传输。两者之间要传输数据就要有想对应的网络端口来进行传输。nfs服务器到底使用什么网络端口来传输数据的，nfs服务器端其实是随机选择端口来进行数据传输。那nfs客户端又是如何知道nfs服务器端到底使用的是哪个端口呢？其实nfs服务器时通过远程过程调用（remote procedure call简称rpc）协议/服务来实现的。也就是说rpc服务会统一管理nfs的端口，客户端和服务端通过rpc来先沟通nfs使用了哪些端口，之后再利用这些端口（小于1024）来进行数据的传输。\n\n也就是rpc管理服务端的nfs端口分配，客户端要传数据，那客户端的rpc会先跟服务端的rpc去要服务器的端口，要到端口后再建立连接，然后传输数据。\n\n那rpc和nfs之间又是如何之间相互通讯的？\n\n首先当nfs启动后，就会随机的使用一些端口，然后nfs就会向rpc去注册这些端口。rpc就会记录下这些端口。并且rpc会开启111端口，等待客户端rpc的请求，如果客户端有请求，那服务端的rpc就会将记录的nfs端口信息告知客户端。\n\nrpc和nfs的启动顺序是怎样的？\n\n在启动nfs server之前，首先要启动rpc服务（即portmap服务，下同）否则nfs server就无法向rpc服务区注册，另外，如果rpc服务重新启动，原来已经注册好的nfs端口数据就会全部丢失。因此此时rpc服务管理的nfs程序也要重新启动以重新向rpc注册。特别注意：一般修改nfs配置文档后，是不需要重启nfs的，直接在命令执行/etc/init.d/nfsreload\n\n总结：客户端nfs和服务端nfs通讯过程\n\n1）首先服务器端启动rpc服务，并开启111端口\n\n2）启动nfs服务，并向rpc注册端口信息\n\n3）客户端启动rpc（portmap服务），向服务端的rpc(portmap)服务请求服务端的nfs端口\n\n4）服务端的rpc(portmap)服务反馈nfs端口信息给客户端。\n\n5）客户端通过获取的nfs端口来建立和服务端的nfs连接并进行数据的传输。\n\n\n\n\n# 3.协议及安装\n\n协议：\n\nrpc（remote procedure call protocol）——远程过程调用协议\n\n软件：\n\nnfs-utils-*：包括nfs命令与监控程序* rpcbind-*：支持安全nfs rpc服务的连接\n\n注：通常情况下，是作为系统的默认包安装的\n\ncentos6.*之前rpcbind叫portmap\n\n\n# 4.守护进程\n\nnfs：它是基本的nfs守护进程，主要功能是管理客户端是否能够登录服务器\n\nrpcbind：主要功能是进行端口映射工作。当客户端尝试连接并使用rpc服务器提供的服务（如nfs服务）时，rpcbind会将所管理的与服务对应的端口提供给客户端，从而使客户可以通过该端口向服务器请求服务。\n\n\n# 5.配置\n\n1、配置文件\n\n> /etc/exports这个文件不一定会存在，可能要使用vim手动建立\n\n2、/etc/exports文件内容格式：\n\n共享目录 客户端1(访问权限,用户映射,其他) 客户端2(访问权限,用户映射,其他)\n\n/it 192.168.2.0/24(rw,sync,no_root_squash)\n\n# 共享目录：\n# 客户端地址\n\t\t指定ip地址的主机：192.168.0.200\n\t\t指定子网中的所有主机：192.168.88.0\n\t\t指定域名的主机：www.atguigu.com\n\t\t指定域中的所有主机：*.atguigu.com\n\t\t所有主机：*\n# 访问权限、映射规则\n访问权限选项：\n\t\t设置输出目录只读：ro\n\t\t设置输出目录读写：rw\n用户映射选项：\n\t\troot_squash：\t将root用户的访问映射为匿名（nfsnobody）用户uid和gid；（默认生效）\n\t\tno_root_squash：\t保留管理员权限，以服务器管理员的权限管理；\n\t\tall_squash：\t\t将远程访问的用户及所属组都映射为指定uid、gid的匿名用户；\n\t\t\t\tanonuid=xxx：将远程访问的所有用户都映射为指定uid的匿名用户；\n\t\t\t\tanongid=xxx：将远程访问的所有用户组都映射为指定gid匿名组账户；\n其它选项：\n\t\tsync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性（同步）；\n\t\tasync：将数据先保存在内存缓冲区中，必要时才写入磁盘（异步）；\n\n\n3、刷新配置\n\nexportfs -rv　　# 立即生效\n\n\n4、查看\n\n查看配置好的nfs共享目录\n\nexportfs\n\n[root@jysp jysp]# exportfs\n/data           10.139.102.0/24\n/data1          10.139.102.0/24\n\n\nshowmount\n\n[root@jysp jysp]# showmount -e localhost\nexport list for localhost:\n/data1 10.139.102.0/24\n/data  10.139.102.0/24\n\n\n\n# 6.启动与停止\n\n1、启动nfs服务器\n\n为了使nfs服务器能正常工作，需要启动rpcbind和nfs两个服务，并且rpcbind一定要先于nfs启动。\n\n# centos7之后\nsystemctl start rpcbind\nsystemctl start nfs\n\n# 开机自启动\nsystemctl enable rpcbind \nsystemctl enable nfs\n\n# 查看rpc注册的端口：\nrpcinfo -p 127.0.0.1\n\n\n2、停止nfs服务器\n\n要停止nfs运行时，需要先停止nfs服务再停止rpcbind服务，对于系统中有其他服务(如nis)需要使用时，不需要停止rpcbind服务\n\nsystemctl stop nfs\nsystemctl stop rpcbind\n\n\n3、查看rpc服务器开启了哪些端口\n\nrpcinfo -p localhost\n\n\n\n# 7.实验示例\n\n1、将nfs服务器的/home/zhangsan共享给192.168.115.0网段，rw权限\n\n# vi /etc/exports\n/home/zhangsan 192.168.115.0(rw)\n\n\n2、重启rpcbind和nfs服务\n\nservice rpcbind restart\nservice nfs restart\nexportfs\n\n\n[root@jysp jysp]# exportfs\n/data           10.139.102.0/24\n/data1          10.139.102.0/24\n\n\n3、服务器端查看nfs共享状态\n\n查看自己共享的服务 showmount、exportfs命令作用相同\n\nshowmount -e 本机ip\n\n\n4、客户端查看nfs共享状态\n\nshowmount -e nfs服务器ip\n\n\n5、客户端挂载nfs服务器共享目录\n\n命令格式：mount nfs服务器ip:共享目录本地挂载点目录\n\nmount 192.168.115.10:/home/zhangsan/ /media/zhangsan/\nmount | grep nfs\nmount –o vers=3 共享本地#指定挂载使用nfs v3/v4版本（避免同步延迟）\n\n\n验证客户端和nfs服务器端文件是否一致：\n\n\n\n修改服务器端相应权限，不然客户端无法正常访问和使用\n\n6、nfs共享权限和访问控制\n\na.客户端root用户\n\n使用客户端的root身份在nfs服务器上创建文件，文件的所有者和所属组是nfsnobody。\n\nb.客户端普通用户\n\n使用客户端的普通用户身份在nfs服务器上创建文件，所有者和所属组是nobody或普通用户。\n\n如果明确设定了普通用户的映射用户身份，那么此时客户端用户的身份转换为指定映射用户；\n\n如果nfs server上面有同名用户，那么此时客户端登录账户的身份转换为nfs server上面的同名用户；\n\n7、卸载和自动挂载\n\n卸载：\n\n1.卸载客户端的挂载目录\n\numount 挂载点\n\n2.停止服务器端的共享\n\nexportfs –au\n\n自动挂载：/etc/fstab\n\n格式：:</remote/export> </local/directory> nfs < options> 0 0\n\n#192.168.115.10:/home/zhangsan /media/zhangsan nfs defaults, 0 0\n#mount –a\n\n\n\n# 8.相关命令\n\n\n# exportfs命令\n\n如果我们在启动了nfs之后又修改了/etc/exports，是不是还要重新启动nfs呢？这个时候我们就可以用exportfs命令来使改动立刻生效，该命令格式如下：\n\n格式：exportfs [-aruv]\n\t\t-a\t全部挂载或卸载 /etc/exports 中的内容\n\t\t-r\t重新读取 /etc/exports 中的信息，并同步更新 /etc/exports 、/var/lib/nfs/xtab\n\t\t-u\t卸载单一目录（和-a一起使用为卸载所有/etc/exports文件中的目录）\n\t\t-v\t在export的时候，将详细的信息输出到屏幕上。\n\n具体例子：\n\t# exportfs -au 卸载所有共享目录\n\t# exportfs -ra 重新共享所有目录并输出详细信息\n\n\n\n# rpcinfo命令\n\n利用rpcinfo -p可以查看出rpc开启的端口所提供的程序有哪些\n\n其中nfs开启的是2049，portmapper(rpcbind)开启的是111，其余则是rpc开启的\n\n\n# 收集示例1\n\n\n# 一、服务器a下操作（ip地址：192.168.2.21）\n\n1、查看nfs安装情况：\n\nrpm -qa nfs-utils rpcbind\n\n\n（没有的话，用yum install nfs-utils rpcbind -y安装）\n\n2、启动rpc：\n\nsystemctl start rpcbind   (service rpcbind start)　\n\n\n开机自启动：\n\nsystemctl enable rpcbind   (service rpcbind enable)\n\n\n看看有没有注册的端口：\n\nrpcinfo -p 127.0.0.1\n\n\n3、启动nfs：\n\nsystemctl start nfs（十以上版本sudo service nfs-server start）或者（systemctl start nfs-server）\n\n\n再看注册的端口\n\nrpcinfo -p 127.0.0.1\n\n\n发现多了很多\n\n4、配置nfs （nfs配置文件/etc/exports）\n\n创建目录**/it和/it/a**文件作为共享目录和共享文件\n\nmkdir /it\ntouch /it/a\n\n\n编辑文件(读写，同步，其它服务器挂载后root可操作)\n\nvim /etc/exports\n/it 192.168.2.0/24(rw,sync,no_root_squash)\n\n\n5、重启nfs\n\nsystemctl reload nfs或者exportfs -r\n\n\n若出现exportfs: /home requires fsid= for nfs export\n\n解决方法：\n\n/home 192.167.253.0/24(fsid=0,rw,sync,no_root_squash) //加入fsid=0参数就可\n\n\nnfs默认用户nfsnobody\n\ngrep nfsno /etc/passwd\n\n\n没有的话，自己创建\n\ngroupadd -g -f 65534 nfsnobody\nuseradd nfsnobody -u 65534 -g nfsnobody -s /sbin/nologin -m\n\n\n6、授权\n\nchown -r nfsnobody.nfsnobody /it\n\n\n7、检查自己\n\nshowmount -e 192.168.2.21  (exportfs)\n\n\n8、服务器本地挂载：\n\nmount -t nfs 192.168.2.21:/it /mnt\n\n\n\n\n\n\n本地测试成功\n\n\n# 二、客户端b下操作（ip地址：192.168.2.25）\n\n1、查看nfs安装情况：\n\nrpm -qa nfs-utils rpcbind\n\n\n（安装nfs-utils的目的是为了获得showmount命令） 2、启动rpc：\n\nsystemctl start rpcbind\n\n\n开机自启动：\n\nsystemctl enable rpcbind\n\n\nnetstat -lntup|grep 111\n\n\n\n\n3、查看nfs服务器提供的共享目录\n\nshowmount -e 192.168.2.21\n\n\n{ i、若出现clnt_create: rpc: program not registered：程序没有注册\n\n\n\n说明：rpc服务器开启了，但nfs没有告诉rpc开启的服务端口 重启nfs（首先检查服务端nfs是否开启）\n\nsystemctl start nfs（十以上版本sudo service nfs-server start）或者（systemctl start nfs-server）\n\n\n检查：rpcinfo -p 127.0.0.1（出现很多表明可以了）\n\nii、若出现：\n\n去服务端（192.168.2.21）关闭防火墙\n\nsystemctl stop firewalld\n\n\n} 4、挂载测试（将192.168.2.21挂载到192.168.2.25下）\n\nmount -t nfs 192.168.2.21:/it /mnt\n\n\n若出现： 则需要关掉防火墙：service firewalld stop\n\n\n\n\n\n挂载成功。\n\n\n# 三、nfs客户端开机自启动挂载\n\n方法一：/etc/rc.local\n\nchmod +x /etc/rc.d/rc.local\n\n\n\n\nvim /etc/rc.local\n在底部加上\n/bin/mount -t nfs 192.168.109.132:/it /mnt\n(将192.168.109.132挂载到192.168.109.131下)　\n\n\n然后reboot重启 查看是否成功\n\n方法二：放入vim /etc/fstab（有坑）\n\n192.168.109.132:/it  /mnt  nfs defaults   0 0\n\n\n开启延迟满足的服务remote-fs.target(centos7) netfs(centos6)\n\nsystemctl start remote-fs.target\nsystemctl enable remote-fs.target\nsystemctl status remote-fs.target\n\n\n\n# debian）统信uos的nfs只是安装包不同\n\n服务器安装包：\n\napt-get install nfs-kernel-server\n\n\n客户端安装包：\n\napt install -y nfs-common　\ndpkg -l nfs-kernel-server查看包\n\n\n\n# 收集示例2\n\n\n# nfs server\n\nnfs server\n1. 安装nfs-server\n　　# yum install -y nfs-utils\n\n2. 创建nfs目录\n　　# mkdir /nfs\n\n3. 配置nfs目录\n \n\n　　# echo "/nfs    *(rw,sync,no_root_squash)" >> /etc/exports\n\n　　参数说明： \n\n　　　　rw 读写\n　　　　ro 只读\n　　　　sync 数据直接写入磁盘\n　　　　async 数据先写入内存\n　　　　no_root_squash 对root用户不压制，在服务端都映射为服务端的root用户\n　　　　root_squash 如果客户端是用户root操作，会被压制成nobody用户\n　　　　all_squash 不管客户端的使用nfs的用户是谁，都会压制成nobody用户\n　　　　nonuid=uid: 指定uid的值\n　　　　anongid=gid:指定gid的值\n\n \n\n　　# exportfs -rv　　# 立即生效\n\n4. 启动nfs服务\n　　# systemctl enable --now nfs-server.service\n\n　　# showmount -e\n\n\n\n\n\nmkdir /zsdata\nchmod o+w /zsdata/\n\nvim /etc/exports\n\n\n\n\n\n# nfs client\n\n\nnfs client(方法一)\n1. 安装nfs-client\n　　# yum install -y nfs-utils\n\n2. 创建挂载目录\n　　# mkdir /var/nfs\n\n3. 查看nfs server目录\n　　# showmount -e nfs-server-ip\n\n4. 挂载nfs server目录\n　　# mount -t nfs nfs-server-ip:/nfs /var/nfs\n\n \n\nnfs client(方法二)\n要实现开机自动挂载，通常将挂载配置信息直接写入到 /etc/fstab文件中。\n​autofs自动挂载服务是一种linux系统守护进程，当检测到用户访问一个尚未挂载的文件系统时，会自动根据配置文件进行挂载（动态挂载）。\n\n \n\n1. 安装autofs\n　　# yum install autofs\n\n2. 创建挂载目录\n　　# mkdir /var/nfs\n\n3. 自动挂载nfs配置\n　　# echo "/var/nfs    /etc/auto.nfs" >> /etc/auto.master\n\n　　# echo "data -fstype=nfs nfs-server-ip:/nfs" >> /etc/auto.nfs\n\n4. 启动autofs服务\n　　# systemctl enable --now autofs.service\n\n\n\n# 收集示例3\n\n\n# nfs server\n\n1、安装nfs服务\n\nyum -y install rpcbind nfs-utils\n\n\n2、创建共享目录\n\n在服务器上创建共享目录，并设置权限。\n\nmkdir /data/share/\nchmod 755 -r /data/share/\n\n\n3、配置nfs\n\nnfs的配置文件是 /etc/exports ，在配置文件中加入一行：\n\n/data/share/ 192.168.11.34(rw,no_root_squash,no_all_squash,sync)\n\n\n这行代码的意思是把共享目录/data/share/共享给192.168.11.34这个客户端ip，后面括号里的内容是权限参数，其中：\n\nrw 表示设置目录可读写。\n\nsync 表示数据会同步写入到内存和硬盘中，相反 rsync 表示数据会先暂存于内存中，而非直接写入到硬盘中。\n\nno_root_squash nfs客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。\n\nno_all_squash 不论nfs客户端连接服务端时使用什么用户，对服务端分享的目录来说都不会拥有匿名用户权限。\n\n如果有多个共享目录配置，则使用多行，一行一个配置。保存好配置文件后，需要执行以下命令使配置立即生效：\n\nexportfs -r\n\n\n4.设置防火墙\n\n如果你的系统没有开启防火墙，那么该步骤可以省略。\n\nnfs的防火墙特别难搞，因为除了固定的port111、2049外，还有其他服务如rpc.mounted等开启的不固定的端口，这样对防火墙来说就比较麻烦了。为了解决这个问题，我们可以设置nfs服务的端口配置文件。\n\n修改/etc/sysconfig/nfs文件，将下列内容的注释去掉，如果没有则添加：\n\nrquotad_port=1001\nlockd_tcpport=30001\nlockd_udpport=30002\nmountd_port=1002\n\n\n保存好后，将端口加入到防火墙允许策略中。执行：\n\nfirewall-cmd --zone=public --add-port=111/tcp --add-port=111/udp --add-port=2049/tcp --add-port=2049/udp --add-port=1001/tcp --add-port=1001/udp --add-port=1002/tcp --add-port=1002/udp --add-port=30001/tcp --add-port=30002/udp --permanent\nfirewall-cmd --reload\n\n\n5.启动服务\n\n按顺序启动rpcbind和nfs服务：\n\nsystemctl start rpcbind\nsystemctl start nfs\n\n\n加入开机启动：\n\nsystemctl enable rpcbind \nsystemctl enable nfs\n\n\nnfs服务启动后，可以使用命令 rpcinfo -p 查看端口是否生效。\n\n服务器的后，我们可以使用 showmount 命令来查看服务端(本机)是否可连接：\n\n[root@localhost ~]# showmount -e localhost\nexport list for localhost:\n/data/share 192.168.11.34\n\n\n出现上面结果表明nfs服务端配置正常。\n\n\n# nfs client\n\n1.安装rpcbind服务\n\n客户端只需要安装rpcbind服务即可，无需安装nfs或开启nfs服务。\n\nyum -y install rpcbind\n\n\n2.挂载远程nfs文件系统\n\n查看服务端已共享的目录:\n\n[root@localhost ~]# showmount -e 192.168.11.31\nexport list for 192.168.11.31:\n/data/share 192.168.11.34\n\n\n建立挂载目录，执行挂载命令：\n\nmkdir -p /mnt/share\nmount -t nfs 192.168.11.34:/data/share /mnt/share/ -o nolock,nfsvers=3,vers=3\n\n\n如果不加 -o nolock,nfsvers=3 则在挂载目录下的文件属主和组都是nobody，如果指定nfsvers=3则显示root。\n\n如果要解除挂载，可执行命令：\n\numount /mnt/share\n\n\n3.开机自动挂载\n\n如果按本文上面的部分配置好，nfs即部署好了，但是如果你重启客户端系统，发现不能随机器一起挂载，需要再次手动操作挂载，这样操作比较麻烦，因此我们需要设置开机自动挂载。我们不要把挂载项写到/etc/fstab文件中，因为开机时先挂载本机磁盘再启动网络，而nfs是需要网络启动后才能挂载的，所以我们把挂载命令写入到/etc/rc.d/rc.local文件中即可。\n\n[root@localhost ~]# vim /etc/rc.d/rc.local\n#在文件最后添加一行：\nmount -t nfs 192.168.11.34:/data/share /mnt/share/ -o nolock,nfsvers=3,vers=3\n\n\n保存并重启机器看看。\n\n测试验证\n\n查看挂载结果，在客户端输入 df -h\n\n文件系统    容量 已用 可用 已用% 挂载点\n/dev/mapper/centos-root   18g 5.0g 13g 29% /\ndevtmpfs      904m  0 904m 0% /dev\ntmpfs       916m  0 916m 0% /dev/shm\ntmpfs       916m 9.3m 906m 2% /run\ntmpfs       916m  0 916m 0% /sys/fs/cgroup\n/dev/sda1      497m 164m 334m 33% /boot\ntmpfs       184m  0 184m 0% /run/user/0\n192.168.11.31:/data/share  18g 1.7g 16g 10% /mnt/share\n\n\n看到最后一行了没，说明已经挂载成功了。接下来就可以在客户端上进入目录/mnt/share下，新建/删除文件，然后在服务端的目录/data/share查看是不是有效果了，同样反过来在服务端操作在客户端对应的目录下看效果。\n\n总结\n\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家对zalou.cn的支持。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170291186e4},{title:"系统管理--1.启动引导与修复",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--1.%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC%E4%B8%8E%E4%BF%AE%E5%A4%8D.html",relativePath:"zs-use/linux/基本使用/系统管理--1.启动引导与修复.md",key:"v-44b004af",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--1.%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC%E4%B8%8E%E4%BF%AE%E5%A4%8D.html",headers:[{level:2,title:"1、运行级别",slug:"_1、运行级别",normalizedTitle:"1、运行级别",charIndex:22},{level:2,title:"2、系统默认运行级别",slug:"_2、系统默认运行级别",normalizedTitle:"2、系统默认运行级别",charIndex:718},{level:2,title:"3、启动rc文件",slug:"_3、启动rc文件",normalizedTitle:"3、启动rc文件",charIndex:839},{level:2,title:"启动引导程序（Boot Loader）",slug:"启动引导程序-boot-loader",normalizedTitle:"启动引导程序（boot loader）",charIndex:1608},{level:3,title:"CentOS6",slug:"centos6",normalizedTitle:"centos6",charIndex:1809},{level:3,title:"CentOS7",slug:"centos7",normalizedTitle:"centos7",charIndex:3136},{level:2,title:"系统修复模式",slug:"系统修复模式",normalizedTitle:"系统修复模式",charIndex:3150},{level:3,title:"单用户模式",slug:"单用户模式",normalizedTitle:"单用户模式",charIndex:73},{level:3,title:"光盘修复模式",slug:"光盘修复模式",normalizedTitle:"光盘修复模式",charIndex:3419}],lastUpdated:"2024年1月9日星期二下午1点46分",lastUpdatedTimestamp:170477919e4,headersStr:"1、运行级别 2、系统默认运行级别 3、启动rc文件 启动引导程序（Boot Loader） CentOS6 CentOS7 系统修复模式 单用户模式 光盘修复模式",content:"# 系统管理--1.启动引导与修复\n\n\n# 1、运行级别\n\nLinux默认有7个运行级别\n\n运行级别   含义\n0      关机\n1      单用户模式，可以想象为windows的安全模式，主要用于系统修复\n2      不完全的命令行模式，不含NFS服务\n3      完全的命令行模式，就是标准字符界面\n4      系统保留\n5      图形模式\n6      重启动\n\n在Linux系统中可以使用runlevel命令来查看系统的运行级别，命令如下：\n\n[root@localhost ~]# runlevel\nN 3\n#N代表进入这个级别前，上一个是哪个级别。3代表当前级别\n\n\n在这个命令的结果中，“N 3”中的N代表进入这个级别前，上一个级别是什么，3代表当前级别。 “N”就是None的意思，也就是说系统是开机直接进入的3运行级别，没有上一个运行级别。 那如果是从图形界面切换到字符界面的话，再查看运行级别，就应该是这样的：\n\n[root@localhost ~]# runlevel\n5 3\n#代表是由5级别进入的3级别\n\n\n那么可以手工改变当前的运行级别吗？当然可以了，只要使用init命令（注意着不是init进程）即可，命令如下：\n\n[root@localhost ~]# init 5\n#进入图形界面，当然要已经安装了图形界面才可以\n\n[root@localhost ~]# init 0\n#关机\n\n[root@localhost ~]# init 6\n#重启动\n\n\n不过要注意使用init命令关机和重启动，并不是太安全，容易造成数据丢失。所以推荐大家还是使用shutdown命令进行关机和重启吧！\n\n\n# 2、系统默认运行级别\n\n知道了运行级别的作用，我们回到系统启动过程中来。 /etc/init/rcS.conf配置文件调用/etc/inittab配置文件的目的就是为了确定系统的默认运行级别， 也就是系统一开机后会进入那个运行级别。\n\n\n# 3、启动rc文件\n\n/etc/rc.d/rc.local文件\n\n这个配置文件会在用户登陆之前读取，这个文件中写入什么命令，在每次系统启动时都会执行一次。也就是说，我如果有任何需要在系统启动就运行的工作，只需要写入/etc/rc.d/rc.local这个配置文件即可。这个文件内容如下：\n\nvim /etc/rc.local\n#!/bin/bash\n# THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES\n#\n# It is highly advisable to create own systemd services or udev rules\n# to run scripts during boot instead of using this file.\n#\n# In contrast to previous versions due to parallel execution during boot\n# this script will NOT be run after all other services.\n#\n# Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure\n# that this script will be executed during boot.\n\n\n# 默认会touch这个文件，每次系统启动时touch这个文件，这个文件的修改时间就是系统的启动时间了。\ntouch /var/lock/subsys/local\n\n\n#如果写入RPM包安装的apache的启动命令，apache服务就会开机时自动启动了。\n/etc/rc.d/init.d/httpd start\n\n\n\n# 启动引导程序（Boot Loader）\n\n早期的Lilo引导程序已经不是很常见了，grub相比来讲有很多优势，主要有：\n\n * 支持更多的文件系统；\n * grub的主程序可以直接在文件系统中查找内核文件；\n * 在系统启动时，可以利用grub的交互界面编辑和修改启动选项；\n * 可以动态的修改grub的配置文件，这样在修改配置文件之后不需要重新安装grub，而只需要重新启动就可以生效了。\n\n\n# CentOS6\n\n1/boot/grub目录\n\n编译后加载的内核，要看源码/usr/src/kernels下\n\n\n\n其实这个目录中主要就是grub的配置文件和各种文件系统的stage1.5文件。不过grub的配置文件有两个/boot/grub/grub.conf和/boot/grub/menu.lst，这两个配置文件是软链接，所以修改哪一个都可以，我个人更习惯为grub.conf这个文件。\n\n2 Grub的配置文件\n\n1）、在grub中分区的表示方法\n\n\n\n2）、grub的配置文件\n\n\n\ndefault=0\n\n默认启动第一个系统。也就是如果在等待时间结束后，用户没有选择进入哪一个系统，那么系统会默认进入第一个系统。如果有多系统并存，那么每个系统都会有自己的title字段，如果想要默认进入第二个系统，这里就可以设为default=1。\n\ntimeout=5\n\n等待时间，默认是5秒。也就是进入系统时，如果5秒内用户没有按下任意键，那么系统会进入default字段定义的系统。当然可以手工修改这个等待时间，如果timeout=0则不会等待直接进入系统，timeout=-1则是一直等待用户输入，而不会自动进入系统。\n\nsplashimage=(hd0,0)/grub/splash.xpm.gz\n\n这里是指定grub启动时的背景图像文件的保存位置的。记得CentOS 6.x启动时后台的蓝色图像吧，就是这个文件的作用哦。不过这个文件具体在哪里啊？已经说过了hd（0,0）代表第一个硬盘的第一个分区，而超哥的系统安装时/boot分区就是第一个分区，所以这个背景图像的实际位置就是/boot/grub/splash.xpm.gz。\n\nhiddenmenu\n\n隐藏菜单。启动时默认只能看到读秒，而不能看到菜单，如果想要看到菜单需要按任意键。如果注释了这句话，那么启动时就能直接看到菜单了。\n\n以上就是grub的整体设置，下面我们介绍CentOS系统的启动设置：\n\ntitle CentOS (2.6.32-279.el6.i686)\n\ntitle就是标题的意思，也就是说在title后面写入的是什么，那么系统启动时在grub的启动菜单中看到的就是什么。\n\nroot (hd0,0)\n\n是指启动程序的保存分区。这里要注意啊，这个root并不是管理员哦。在我的系统中，/boot分区是独立划分的，而且设备文件名为/dev/sda1，所以在grub中，就被描述为hd(0,0)。\n\n/vmlinuz-2.6.32-279.el6.i686：指定了内核文件的位置，这里的/是指/boot分区。\n\nro：启动时以只读方式挂载根文件系统，这是为了不让启动过程影响磁盘内的文件系统。\n\nroot=UUID=b9a7a1a8-767f-4a87-8a2b-a535edb362c9：指定根文件系统的所在位置。这里和以前的Linux版本不太一样了，不再是通过分区的设备文件名或卷标号来指定，而是通过分区的UUID来进行指定。那么如何查询分区的UUID号呢？方法有很多种，最简单的办法就是查询/etc/fstab文件，命令如下：\n\n\n\n3 grub加密\n\n\n\n\n\n\n\n\n# CentOS7\n\n\n\n\n# 系统修复模式\n\n\n# 单用户模式\n\n我们先来看看单用户模式是怎么使用的吧。Linux的单用户模式有些类似Windows的安全模式，只启动最少的程序用于系统修复。在单用户模式（运行级别为1）中，Linux引导进入根shell，网络被禁用，只有少数进程运行。单用户模式可以用来修改文件系统损坏、还原配置文件、移动用户数据等。\n\n1)、如何进入单用户模式\n\n\n\n2)、单用户模式常见的错误修复\n\n我们已经进入单用户模式了，那么我们在单用户模式中主要可以修复哪些系统错误呢？我们举几个例子吧。\n\n遗忘root密码\n\n修改系统默认运行级别\n\n\n# 光盘修复模式\n\n1）、如何进入光盘修复模式\n\n\n\n2)、光盘修复模式常见的错误修复\n\n重要系统文件丢失，导致系统无法启动\n\n如果系统中的重要系统文件丢失，当然会导致系统无法正常启动。这时也可以利用光盘修复模式修复。我们假设把/etc/inittab文件丢失了，我们通过系统启动过程知道这个文件是定义系统默认运行级别的，如果丢失了这个文件，系统当然不能正常启动，这时就需要进入光盘修复模式中了。然后需要利用chroot命令。\n\n[root@localhost ~]#chroot 目录名\n\n\nchroot命令的作用是“change root directory”改变系统根目录的意思。也就是可以把根目录暂时移动到某个目录当中。我们是通过光盘启动的光盘修复模式，所以我们现在所在的根目录不是真正的系统根目录，而是光盘的模拟根目录。系统根目录被当成外来设备放在了/mnt/sysimage/目录中。这时就需要chroot命令把我们现在的所在目录移动成真正的系统根目录。命令如下：\n\nbash-4.1# chroot /mnt/sysimage\n\n\n这条命令执行之后，当前的根目录就已经是真正的系统根目录了。如果系统有任何错误都可以直接修复。比如/etc/inittab文件丢失了。这时如果我们曾经备份过系统重要文件，只需要把备份文件重新复制到/etc/目录下即可。如果没有备份的文件，就需要从rpm包中提取inittab文件，然后复制了。具体命令如下：\n\n\n\n\n\n注意此命令执行时不能将文件直接恢复至/etc目录，只能提取到当前目录下，且恢复的文件名称所在路径要写完整的绝对路径。提取文件成功后，将其复制到根分区所在的/mnt/sysimage目录下相应位置即可。",normalizedContent:"# 系统管理--1.启动引导与修复\n\n\n# 1、运行级别\n\nlinux默认有7个运行级别\n\n运行级别   含义\n0      关机\n1      单用户模式，可以想象为windows的安全模式，主要用于系统修复\n2      不完全的命令行模式，不含nfs服务\n3      完全的命令行模式，就是标准字符界面\n4      系统保留\n5      图形模式\n6      重启动\n\n在linux系统中可以使用runlevel命令来查看系统的运行级别，命令如下：\n\n[root@localhost ~]# runlevel\nn 3\n#n代表进入这个级别前，上一个是哪个级别。3代表当前级别\n\n\n在这个命令的结果中，“n 3”中的n代表进入这个级别前，上一个级别是什么，3代表当前级别。 “n”就是none的意思，也就是说系统是开机直接进入的3运行级别，没有上一个运行级别。 那如果是从图形界面切换到字符界面的话，再查看运行级别，就应该是这样的：\n\n[root@localhost ~]# runlevel\n5 3\n#代表是由5级别进入的3级别\n\n\n那么可以手工改变当前的运行级别吗？当然可以了，只要使用init命令（注意着不是init进程）即可，命令如下：\n\n[root@localhost ~]# init 5\n#进入图形界面，当然要已经安装了图形界面才可以\n\n[root@localhost ~]# init 0\n#关机\n\n[root@localhost ~]# init 6\n#重启动\n\n\n不过要注意使用init命令关机和重启动，并不是太安全，容易造成数据丢失。所以推荐大家还是使用shutdown命令进行关机和重启吧！\n\n\n# 2、系统默认运行级别\n\n知道了运行级别的作用，我们回到系统启动过程中来。 /etc/init/rcs.conf配置文件调用/etc/inittab配置文件的目的就是为了确定系统的默认运行级别， 也就是系统一开机后会进入那个运行级别。\n\n\n# 3、启动rc文件\n\n/etc/rc.d/rc.local文件\n\n这个配置文件会在用户登陆之前读取，这个文件中写入什么命令，在每次系统启动时都会执行一次。也就是说，我如果有任何需要在系统启动就运行的工作，只需要写入/etc/rc.d/rc.local这个配置文件即可。这个文件内容如下：\n\nvim /etc/rc.local\n#!/bin/bash\n# this file is added for compatibility purposes\n#\n# it is highly advisable to create own systemd services or udev rules\n# to run scripts during boot instead of using this file.\n#\n# in contrast to previous versions due to parallel execution during boot\n# this script will not be run after all other services.\n#\n# please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure\n# that this script will be executed during boot.\n\n\n# 默认会touch这个文件，每次系统启动时touch这个文件，这个文件的修改时间就是系统的启动时间了。\ntouch /var/lock/subsys/local\n\n\n#如果写入rpm包安装的apache的启动命令，apache服务就会开机时自动启动了。\n/etc/rc.d/init.d/httpd start\n\n\n\n# 启动引导程序（boot loader）\n\n早期的lilo引导程序已经不是很常见了，grub相比来讲有很多优势，主要有：\n\n * 支持更多的文件系统；\n * grub的主程序可以直接在文件系统中查找内核文件；\n * 在系统启动时，可以利用grub的交互界面编辑和修改启动选项；\n * 可以动态的修改grub的配置文件，这样在修改配置文件之后不需要重新安装grub，而只需要重新启动就可以生效了。\n\n\n# centos6\n\n1/boot/grub目录\n\n编译后加载的内核，要看源码/usr/src/kernels下\n\n\n\n其实这个目录中主要就是grub的配置文件和各种文件系统的stage1.5文件。不过grub的配置文件有两个/boot/grub/grub.conf和/boot/grub/menu.lst，这两个配置文件是软链接，所以修改哪一个都可以，我个人更习惯为grub.conf这个文件。\n\n2 grub的配置文件\n\n1）、在grub中分区的表示方法\n\n\n\n2）、grub的配置文件\n\n\n\ndefault=0\n\n默认启动第一个系统。也就是如果在等待时间结束后，用户没有选择进入哪一个系统，那么系统会默认进入第一个系统。如果有多系统并存，那么每个系统都会有自己的title字段，如果想要默认进入第二个系统，这里就可以设为default=1。\n\ntimeout=5\n\n等待时间，默认是5秒。也就是进入系统时，如果5秒内用户没有按下任意键，那么系统会进入default字段定义的系统。当然可以手工修改这个等待时间，如果timeout=0则不会等待直接进入系统，timeout=-1则是一直等待用户输入，而不会自动进入系统。\n\nsplashimage=(hd0,0)/grub/splash.xpm.gz\n\n这里是指定grub启动时的背景图像文件的保存位置的。记得centos 6.x启动时后台的蓝色图像吧，就是这个文件的作用哦。不过这个文件具体在哪里啊？已经说过了hd（0,0）代表第一个硬盘的第一个分区，而超哥的系统安装时/boot分区就是第一个分区，所以这个背景图像的实际位置就是/boot/grub/splash.xpm.gz。\n\nhiddenmenu\n\n隐藏菜单。启动时默认只能看到读秒，而不能看到菜单，如果想要看到菜单需要按任意键。如果注释了这句话，那么启动时就能直接看到菜单了。\n\n以上就是grub的整体设置，下面我们介绍centos系统的启动设置：\n\ntitle centos (2.6.32-279.el6.i686)\n\ntitle就是标题的意思，也就是说在title后面写入的是什么，那么系统启动时在grub的启动菜单中看到的就是什么。\n\nroot (hd0,0)\n\n是指启动程序的保存分区。这里要注意啊，这个root并不是管理员哦。在我的系统中，/boot分区是独立划分的，而且设备文件名为/dev/sda1，所以在grub中，就被描述为hd(0,0)。\n\n/vmlinuz-2.6.32-279.el6.i686：指定了内核文件的位置，这里的/是指/boot分区。\n\nro：启动时以只读方式挂载根文件系统，这是为了不让启动过程影响磁盘内的文件系统。\n\nroot=uuid=b9a7a1a8-767f-4a87-8a2b-a535edb362c9：指定根文件系统的所在位置。这里和以前的linux版本不太一样了，不再是通过分区的设备文件名或卷标号来指定，而是通过分区的uuid来进行指定。那么如何查询分区的uuid号呢？方法有很多种，最简单的办法就是查询/etc/fstab文件，命令如下：\n\n\n\n3 grub加密\n\n\n\n\n\n\n\n\n# centos7\n\n\n\n\n# 系统修复模式\n\n\n# 单用户模式\n\n我们先来看看单用户模式是怎么使用的吧。linux的单用户模式有些类似windows的安全模式，只启动最少的程序用于系统修复。在单用户模式（运行级别为1）中，linux引导进入根shell，网络被禁用，只有少数进程运行。单用户模式可以用来修改文件系统损坏、还原配置文件、移动用户数据等。\n\n1)、如何进入单用户模式\n\n\n\n2)、单用户模式常见的错误修复\n\n我们已经进入单用户模式了，那么我们在单用户模式中主要可以修复哪些系统错误呢？我们举几个例子吧。\n\n遗忘root密码\n\n修改系统默认运行级别\n\n\n# 光盘修复模式\n\n1）、如何进入光盘修复模式\n\n\n\n2)、光盘修复模式常见的错误修复\n\n重要系统文件丢失，导致系统无法启动\n\n如果系统中的重要系统文件丢失，当然会导致系统无法正常启动。这时也可以利用光盘修复模式修复。我们假设把/etc/inittab文件丢失了，我们通过系统启动过程知道这个文件是定义系统默认运行级别的，如果丢失了这个文件，系统当然不能正常启动，这时就需要进入光盘修复模式中了。然后需要利用chroot命令。\n\n[root@localhost ~]#chroot 目录名\n\n\nchroot命令的作用是“change root directory”改变系统根目录的意思。也就是可以把根目录暂时移动到某个目录当中。我们是通过光盘启动的光盘修复模式，所以我们现在所在的根目录不是真正的系统根目录，而是光盘的模拟根目录。系统根目录被当成外来设备放在了/mnt/sysimage/目录中。这时就需要chroot命令把我们现在的所在目录移动成真正的系统根目录。命令如下：\n\nbash-4.1# chroot /mnt/sysimage\n\n\n这条命令执行之后，当前的根目录就已经是真正的系统根目录了。如果系统有任何错误都可以直接修复。比如/etc/inittab文件丢失了。这时如果我们曾经备份过系统重要文件，只需要把备份文件重新复制到/etc/目录下即可。如果没有备份的文件，就需要从rpm包中提取inittab文件，然后复制了。具体命令如下：\n\n\n\n\n\n注意此命令执行时不能将文件直接恢复至/etc目录，只能提取到当前目录下，且恢复的文件名称所在路径要写完整的绝对路径。提取文件成功后，将其复制到根分区所在的/mnt/sysimage目录下相应位置即可。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170477919e4},{title:"说明",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",relativePath:"zs-use/linux/常见问题/README.md",key:"v-16519c4b",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",lastUpdated:"2023年12月5日星期二中午11点51分",lastUpdatedTimestamp:1701748296e3,headersStr:null,content:"# 说明\n\n💯Linux实际问题\n\n🥳SSH免密登录🥳",normalizedContent:"# 说明\n\n💯linux实际问题\n\n🥳ssh免密登录🥳",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701748296e3},{title:"系统管理--3.1.系统管理",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.1.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86.html",relativePath:"zs-use/linux/基本使用/系统管理--3.1.系统管理.md",key:"v-095be634",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.1.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86.html",headers:[{level:2,title:"进程生命周期",slug:"进程生命周期",normalizedTitle:"进程生命周期",charIndex:21},{level:2,title:"ps",slug:"ps",normalizedTitle:"ps",charIndex:783},{level:2,title:"top",slug:"top",normalizedTitle:"top",charIndex:444},{level:2,title:"pstree",slug:"pstree",normalizedTitle:"pstree",charIndex:1409},{level:2,title:"其他命令",slug:"其他命令",normalizedTitle:"其他命令",charIndex:1380},{level:2,title:"进程的管理",slug:"进程的管理",normalizedTitle:"进程的管理",charIndex:7962},{level:2,title:"kill",slug:"kill",normalizedTitle:"kill",charIndex:7757},{level:2,title:"killall",slug:"killall",normalizedTitle:"killall",charIndex:7773},{level:2,title:"pkill",slug:"pkill",normalizedTitle:"pkill",charIndex:7781},{level:2,title:"工作管理",slug:"工作管理",normalizedTitle:"工作管理",charIndex:10538},{level:2,title:"后台命令管理",slug:"后台命令管理",normalizedTitle:"后台命令管理",charIndex:12545},{level:2,title:"系统资源查看",slug:"系统资源查看",normalizedTitle:"系统资源查看",charIndex:12999},{level:3,title:"vmstat命令监控系统资源",slug:"vmstat命令监控系统资源",normalizedTitle:"vmstat命令监控系统资源",charIndex:13010},{level:3,title:"dmesg显示开机时内核检测信息",slug:"dmesg显示开机时内核检测信息",normalizedTitle:"dmesg显示开机时内核检测信息",charIndex:14128},{level:3,title:"free命令查看内存使用状态",slug:"free命令查看内存使用状态",normalizedTitle:"free命令查看内存使用状态",charIndex:14253},{level:3,title:"查看CPU信息",slug:"查看cpu信息",normalizedTitle:"查看cpu信息",charIndex:14189},{level:3,title:"查看本机登陆用户信息",slug:"查看本机登陆用户信息",normalizedTitle:"查看本机登陆用户信息",charIndex:15388},{level:3,title:"uptime命令",slug:"uptime命令",normalizedTitle:"uptime命令",charIndex:16152},{level:3,title:"查看系统与内核相关信息",slug:"查看系统与内核相关信息",normalizedTitle:"查看系统与内核相关信息",charIndex:16343}],lastUpdated:"2024年1月9日星期二下午1点46分",lastUpdatedTimestamp:170477919e4,headersStr:"进程生命周期 ps top pstree 其他命令 进程的管理 kill killall pkill 工作管理 后台命令管理 系统资源查看 vmstat命令监控系统资源 dmesg显示开机时内核检测信息 free命令查看内存使用状态 查看CPU信息 查看本机登陆用户信息 uptime命令 查看系统与内核相关信息",content:'# 系统管理--3.1.系统管理\n\n\n# 进程生命周期\n\n父进程,复制自己的地址空间（fork）创建一个新的（子）进程结构。每个新进程分配一个唯一的进程 ID （PID），满足跟踪安全性之需。PID 和 父进程 ID (PPID）是子进程环境的元素，任何进程都可以创建子进程，所有进程都是第一个系统进程的后代：Centos5/6: ==init== RedHat7/8: ==systemd==\n\n子进程继承父进程的安全性身份、过去和当前的文件描述符、端口和资源特权、环境变量，以及程序代码。随后，子进程exec 自己的程序代码。通常，父进程在子进程运行期间处于睡眠（sleeping）状态。当子进程完成时发出（exit）信号请求，在退出时， 子进程会关闭或丢弃了其资源环境，剩余的部分称之为僵停（僵尸Zombie）。父进程在子进程退出时收到信号而被唤醒，清理剩余的结构，然后继续执行其自己的程序代码\n\n\n\n㈠ 进程的优先级控制\n\n① 调整正在运行进程的优先级(renice)\n\n1）使用top按"r"来调整\n\n改变NICE---\x3ePR\n优先级的范围：\n-20——19 数字越低，优先级越高，系统会按照更多的cpu时间给该进程\n\n\n2）命令行使用renice调整\n\nsleep命令没有实际意义，延迟(睡觉)5000秒\n[root@localhost ~]# sleep 5000 &\n[1] 2544\nsleep程序已经运行，通过renice命令调整优先级\n[root@localhost ~]# renice -20 2544\n2544: old priority 0, new priority -20\n\n\n② 程序运行时指定优先级(nice)\n\n启动进程时，通常会继承父进程的 nice级别，默认为0。\n# nice -n -5 sleep 6000 &\n# ps axo command,pid,nice |grep sleep\n\n\n\n# ps\n\n常见组合\n\nps -ef\nps -eF\nps -ely\nps aux\nps auxf\n\na 显示当前终端下的所有进程，包括其他用户的进程\nu 显示进程拥有者、状态、资源占用等的详细信息（注意有“-”和无“-”的区别）\nx 显示没有控制终端的进程。通常与a这个参数一起使用，可列出较完整信息\no 自定义打印内容\n-e 显示所有进程。\n-f 完整输出显示进程之间的父子关系\n-l 较长、较详细的将该进程的信息列出\n\n\n\n\n\n\n\nUSER: \t运行进程的用户\nPID: \t进程ID\n%CPU: \tCPU占用率\n%MEM: \t内存占用率\nVSZ: \t占用虚拟内存\nRSS: \t占用实际内存,驻留内存\nTTY: \t进程运行的终端\nSTAT: \t进程状态,man ps获取帮助(/STATE)\n    R \t运行\n    S \t可中断睡眠 Sleep\n    D \t不可中断睡眠\n    T \t停止的进程\n    Z \t僵尸进程\n    Ss \ts进程的领导者，父进程\n    S< \t<优先级较高的进程\n    SN \tN优先级较低的进程\n    R+ \t+表示是前台的进程组\n    Sl \t以线程的方式运行\nSTART \t进程的启动时间\nTIME \t进程占用CPU的总时间\nCOMMAND 进程文件，进程名\n\n其他命令查看进行信息\npidof \t查看指定进程的PID\npstree \t查看进程树\n\n\nps命令是用来静态显示系统中进程的命令。 不过这个命令有些特殊，它的部分命令的选项不能加入“-”，比如命令“psaux”，其中“aux”是选项，但是这个选项不能加入“-”。 这是因为ps命令的部分选项需要遵守BSD操作系统的格式。 所以ps命令的常用选项的组合是固定的。\n\n[root@localhost ~]# ps aux\n#查看系统中所有进程，使用BSD操作系统格式\n\n[root@localhost ~]# ps -le\n#查看系统中所有进程，使用Linux标准命令格式。\n选项：\n    a:\t显示一个终端的所有进程，除了会话引线\n    u:\t显示进程的归属用户及内存的使用情况\n    x:\t显示没有控制终端的进程\n    -l\t长格式显示。显示更加详细的信息\n    -e\t显示所有进程，和-A作用一致\n\n\n[root@jysp grub2]# vim /etc/default/grub\n[root@jysp grub2]# ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         2  0.0  0.0      0     0 ?        S    1月02   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        I<   1月02   0:00 [rcu_gp]\n\n\n解释下这个命令的输出：\n\n * USER：该进程是由哪个用户产生的；\n\n * PID：进程的ID号；\n\n * %CPU：该进程占用CPU资源的百分比，占用越高，进程越耗费资源；\n\n * %MEM：该进程占用物理内存的百分比，占用越高，进程越耗费资源；\n\n * VSZ：该进程占用虚拟内存的大小，单位KB；\n\n * RSS：该进程占用实际物理内存的大小，单位KB；\n\n * TTY：该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端（可以通过alt+F1-F7键切换不同的终端），tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端，一般是远程连接的终端，第一个远程连接占用的是pts/0终端，第二个远程连接占用pts/1，依次增长。\n\n * STAT：进程状态。常见的状态有：\n   \n   * D：不可被唤醒的睡眠状态，通常用于I/O情况\n   * R：该进程正在运行\n   * S：该进程在睡眠状态，可被唤醒\n   * T：停止状态，可能是在后台暂停或进程在除错状态\n   * W：内存交互状态（从2.6内核开始无效）\n   * X：死掉的进程（应该不会出现）\n   * Z：僵尸进程。进程已经终止，但是部分程序还在内存当中。\n   * <：高优先级（以下状态在BSD格式当中出现）\n   * N：低优先级L：被锁入内存\n   * s：包含子进程\n   * l：多线程（小写L）\n   * +：位于后台\n\n * START：该进程的启动时间\n\n * TIME：该进程占用CPU的运算时间，注意不是系统时间\n\n * COMMAND：产生此进程的命令名\n\n[root@jysp grub2]# ps -le\nF S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n4 S     0     1     0  0  80   0 -  2461 ep_pol ?        00:01:15 systemd\n1 S     0     2     0  0  80   0 -     0 kthrea ?        00:00:00 kthreadd\n\n\n * F：进程标志，说明进程的权限，常见的标志有：\n   * 1：进程可以复制，但是不能执行\n   * 4：进程使用超级用户权限\n * S：进程状态。具体的状态和“ps aux”命令中STAT状态一致\n * UID：进程是哪个UID用户调用运行的\n * PID：进程的ID号\n * PPID：父进程的ID号\n * C：该进程的CPU使用率，单位是百分比\n * PRI：进程的优先级，数值越小该进程优先级越高，越快被CPU执行\n * NI：进程的优先级，也是数值越小越早被执行\n * ADDR：该进程在内存的哪个位置\n * SZ：该进程占用多大内存\n * WCHAN：该进程是否运行。“-”代表正在运行\n * TTY：该进程由哪个终端产生\n * TIME：该进程占用CPU的运算时间，注意不是系统时间\n * CMD：产生此进程的命令名\n\n\n# top\n\n[root@localhost ~]# top [选项]\n选项：\n\n\n我们看看top命令的执行结果：\n\ntop - 19:26:48 up 3 days,  5:51,  2 users,  load average: 0.32, 0.13, 0.12\nTasks:  97 total,   1 running,  96 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  1.9 us,  2.0 sy,  0.0 ni, 96.1 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  1776404 total,   557000 free,   340088 used,   879316 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  1251988 avail Mem \n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                           \n 1210 root      10 -10  227028  33768  10748 S   3.3  1.9  79:34.76 AliYunDunMonito                   \n24408 root      20   0  157728   6372   4620 S   0.3  0.4   1:05.81 sshd                              \n\n\ntop命令的输出内容是动态的，默认每3秒刷新一次。\n\n命令的输出主要分为两大部分： 第一部分是前五行，显示的是整个系统的资源使用状况，我们就是通过这些输出判断服务器的健康状态； 第二部分从第六行开始，显示的是系统中进程的信息。\n\n * 我们先来说明第一部分的作用：\n   \n   * 第一行信息为任务队列信息\n     \n     内容                               说明\n     19:26:48                         系统当前时间\n     up 3 days, 5:51                  系统的运行时间\n     2 users                          当前登录了两个用户\n     load average: 0.32, 0.13, 0.12   系统在之前1分钟，5分钟，15分钟的平均负载。\n                                      如果CPU是单核，则这个数超过1，就是高负载。\n                                      如果CPU是四核，则这个数超过4，就是高负载。\n                                      （这个平均负载完全是个人经验来进行判断的，一般认为不应该超过服务器CPU的核数。）\n     \n     物理CPU(N路)：主板上CPU插槽的个数\n     CPU核数：一块CPU上面能处理数据的芯片组的数量\n     逻辑CPU：一般情况，一颗cpu可以有多核，加上intel的超线程技术(HT), 可以在逻辑上再分一倍数量的cpu core出来；\n     逻辑CPU数量=物理cpu数量 x cpu核数。如果支持HT,还要更多。\n     \n     查看物理CPU的个数\n     # cat /proc/cpuinfo |grep "physical id"|sort |uniq|wc -l\n     查看逻辑CPU的个数\n     # cat /proc/cpuinfo |grep "processor"|wc -l\n     查看CPU是几核\n     # cat /proc/cpuinfo |grep "cores"|uniq\n     \n   \n   * 第二行为进程信息\n     \n     内容                说明\n     Tasks: 97 total   系统中的进程总数\n     1 running         正在运行的进程数\n     96 sleeping       睡眠的进程\n     0 stopped         正在停止的进程\n     0 zombie          僵尸进程。如果不是0，需要手工检查僵尸进程\n   \n   * 第三行为CPU信息\n     \n     内容                说明\n     %Cpu(s): 1.9 us   用户模式占用的CPU百分比\n     2.0 sy            系统模式占用的CPU百分比\n     0.0 ni            改变过优先级的用户进程占用的CPU百分比\n     96.1 id           空闲CPU的CPU百分比\n     0.0 wa            等待输入/输出的进程的占用CPU百分比\n     0.0 hi            硬中断请求服务占用的CPU百分比\n     0.0 si            软中断请求服务占用的CPU百分比\n     0.0 st            st（Steal time）虚拟时间百分比。\n                       就是当有虚拟机时，虚拟CPU等待实际CPU的时间百分比。\n     \n     us \t\t用户进程占用CPU的比率\n     sy \t\t内核、内核进程占用CPU的比率；\n     ni \t\t如果一些用户进程修改过优先级，这里显示这些进程占用CPU时间的比率；\n     id \t\tCPU空闲比率，如果系统缓慢而这个值很高，说明系统慢的原因不是CPU负载高；\n     wa \t\tCPU等待执行I/O操作的时间比率，该指标可以用来排查磁盘I/O的问题，通常结合wa和id判断\n     hi \t\tCPU处理硬件中断所占时间的比率；\n     si \t\tCPU处理软件中断所占时间的比率；\n     st \t\t其他任务所占CPU时间的比率；\n     \n     说明：\n     1. 用户进程占比高，wa低，说明系统缓慢的原因在于进程占用大量CPU，通常还会伴有教低的id，说明CPU空闲时间很少；\n     2. wa低，id高，可以排除CPU资源瓶颈的可能。\n     3. wa高，说明I/O占用了大量的CPU时间，需要检查交换空间的使用；如果内存充足，但wa很高，说明需要检查哪个进程占用\n     了大量的I/O资源。\n     \n   \n   * 第四行为物理内存信息，\n     \n     内容                        说明\n     KiB Mem : 1776404 total   物理内存的总量，单位KB\n     557000 free               已经使用的物理内存数量\n     340088 used               空闲的物理内存数量，我们使用的是虚拟机，\n                               总共只分配了628MB内存，所以只有53MB的空闲内存了\n     879316 buff/cache         作为缓冲的内存数量\n   \n   * 第五行为交换分区（swap）信息\n     \n     内容                  说明\n     KiB Swap: 0 total   交换分区（虚拟内存）的总大小\n     0k used             已经使用的交互分区的大小\n     0 free              空闲交换分区的大小\n     1251988 avail Mem   作为缓存的交互分区的大小\n\n * 再来看top命令的第二部分输出，主要是系统进程信息。\n   \n   \n   \n   * PID：进程ID\n   * USER：该进程所属的用户\n   * PR：优先级，数值越小优先级越高\n   * NI：优先级，数值越小优先级越高\n   * VIRT：该进程使用的虚拟内存的大小，单位KB\n   * RES：该进程使用的物理内存的大小，单位KB\n   * SHR：共享内存大小，单位KB\n   * S：进程状态\n   * %CPU：该进程占用CPU的百分比\n   * %MEM：该进程占用内存的百分比\n   * TIME+：该进程总共占用的CPU时间\n   * COMMAND：进程的命令名\n\n比如我如果只想让top命令查看某一个进程，这时就可以使用“-p选项”：\n\n[root@localhost ~]# top -p 15273\n#只查看PID为15273的apache进程\n\n\ntop命令常用按键命令\n\nh|? 帮助\nM 按内存的使用排序\nP 按CPU使用排序\nT 按该进程使用的CPU时间累积排序\nk 给某个PID一个信号（signal），默认值是信号15\n1 显示所有CPU的负载\ns 改变两次刷新之间的时间。默认是5秒\nq 退出程序\nN 以PID的大小排序\nR 对排序进行反转\nf 自定义显示字段\nr 重新安排一个进程的优先级别\n\n\ntop命令常用的选项\n\n-d 后面可以接秒数，指定每两次屏幕信息刷新之间的时间间隔；\n-p 指定某个进程来进行监控；\n-u 指定进程的拥有者\n-b -n 以批处理方式执行top命令。通常使用数据流重定向，将处理结果输出为文件；\n[root@MissHou ~]# top\n[root@MissHou ~]# top -d 1\n[root@MissHou ~]# top -d 1 -p 10126 查看指定进程的动态信\n息\n[root@MissHou ~]# top -d 1 -u apache 查看指定用户的进程\n[root@MissHou ~]# top -d 1 -b -n 2 > top.txt 将2次top信息写入到文件\n\n\n\n# pstree\n\npstree [选项]\n    -p 显示进程的PID\n    -u 显示进程的所属用户\n\n\n\n# 其他命令\n\nkill [信号] 进程PID\nkillall\npkill\n给进程号为15621的进程发送默认信号(-15可以省略)\nkill -15 15621\n给stu1用户的所有进程发送9号信号（结束stu1的所有进程），根据用户结束进程\npkill -9 -u stu1\n给进程名为vsftpd的进程发送9号信号(根据进程名来结束进程)\npkill -9 vsftpd\nkillall -15 vsftpd\n\n\n\n# 进程的管理\n\n系统中可以识别的信号较多，我们可以使用命令“kill -l”或“man 7 signal”来查询，命令如下：\n\n[root@xiaoshaozi ~]# kill -l\n 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP\n 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1\n11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM\n16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP\n21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ\n26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR\n31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3\n38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8\n43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13\n48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12\n53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7\n58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2\n63) SIGRTMAX-1  64) SIGRTMAX  \n\n\n这里我们介绍一下主要的信号，\n\n信号代号   信号名称      说明\n1      SIGHUP    该信号让进程立即关闭，然后重新读取配置文件之后重启。\n2      SIGINT    程序终止信号，用于终止前台进程。相当于输出ctrl+c快捷键。\n8      SIGFPE    在发生致命的算术运算错误时发出.\n                 不仅包括浮点运算错误,还包括溢出及除数为0等其它所有的算术的错误。\n9      SIGKILL   用来立即结束程序的运行.本信号不能被阻塞、处理和忽略。\n                 一般用于强制终止进程。\n14     SIGALRM   时钟定时信号,计算的是实际的时间或时钟时间.alarm函数使用该信号。\n15     SIGTERM   正常结束进程的信号，kill命令的默认信号。\n                 有时如果进程已经发生问题，这个信号是无法正常终止进程的，我们才会尝试SIGKILL信号，也就是信号9。\n18     SIGCONT   该信号可以让暂停的进程恢复执行，本信号不能被阻断。\n19     SIGSTOP   该信号可以暂停前台进程，相当于输入ctrl+z快捷键。本信号不能被阻断。\n\n信号编号   信号名       解释说明\n1      SIGHUP    默认终止控制终端进程(可用来重新加载配置文件，平滑重启)\n2      SIGINT    键盘中断(ctrl+c)\n3      SIGQUIT   键盘退出(ctrl+)，一般指程序异常产生core文件\n9      SIGKILL   强制终止\n15     SIGTERM   正常结束，默认信号\n18     SIGCONT   继续\n19     SIGSTOP   停止\n20     SIGTSTP   暂停(ctrl+z)\n                 \n\n\n# kill\n\n[root@localhost ~]# kill [信号] PID\n\n\n例2：使用“-1”信号，让进程重启\n[root@localhost ~]# kill -1 2246\n#使用“-1（数字一）”信号，让httpd的主进程重启动。\n\n\n例3：使用“-19”信号，让进程暂停。\n[root@localhost ~]# vi test.sh\n#使用vi命令编辑一个文件，不要退出\n\n[root@localhost ~]# ps aux | grep "vi" | grep -v "grep"\nroot\t2313\t0.0\t0.2\t7116\t1544\tpts/1\tS+\t19:20\t0:00 vi test.sh\n#换一个不同的终端，查看下这个进程的状态。进程状态是S（休眠）和+（位于后台），\n#因为是在另外一个终端运行的命令\n\n[root@localhost ~]# kill -19 2313\n#使用-19信号，让PID是2313的进程暂停。相当于在vi界面按“ctrl+z”快捷键。\n\n[root@localhost ~]# ps aux | grep "vi" | grep -v "grep"\nroot\t2313\t0.0\t0.2\t7116\t1580 pts/1\tT\t19:20\t0:00 vi test.sh\n#注意2313进程的状态，变成了T（暂停）状态。这时我切换回vi的终端，发现vi命令已\n#经暂停，又回到了命令提示符。\n#不过2313进程就会卡在后台，如果想要恢复可以使用“kill -9 2313”强制终止进程，也\n#可以利用15.2小节将要学习的工作管理来进行恢复。\n\n\n\n# killall\n\n[root@localhost ~]#killall [选项][信号] 进程名\n选项：\n    -i：\t交互式，询问是否要杀死某个进程\n    -I：\t忽略进程名的大小写\n\n\n交互式杀死sshd进程\n[root@localhost ~]# ps aux | grep "sshd" | grep -v "grep"\nroot\t1733\t0.0\t0.1\t8508\t1008 ?\tSs\t19:47\t0:00 /usr/sbin/sshd\nroot\t1735\t0.1\t0.5\t11452\t3296 ?\tSs\t19:47\t0:00 sshd: root@pts/0\nroot\t1758\t0.1\t0.5\t11452\t3296 ?\tSs\t19:47\t0:00 sshd: root@pts/1\n#查询系统有3个sshd进程。1733是sshd服务的进程，1735和1758是我的两个远程连接\n#的进程\n\n[root@localhost ~]# killall -i sshd\n#交互式杀死sshd进程\n杀死sshd(1733) ? (y/N) n\n# 这个进程是sshd的服务进程，如果杀死，所有的sshd连接都不能登录。\n杀死sshd(1735) ? (y/N) n\n# 这是我当前登录终端，不能杀死我自己吧！\n杀死sshd(1758) ? (y/N) y\n# 把另外一个sshd登录终端踢出。\n\n\n\n# pkill\n\npkill命令和killall命令非常类似，也是按照进程名来杀死进程。\n\n[root@localhost ~]#pkill [选项][信号] 进程名\n选项：\n\t-t终端号：按照终端号踢出用户\n\t\n[root@localhost ~]# pkill -9 -t pts/1\n#强制杀死从pts/1虚拟终端登录的进程\n\n\n\n# 工作管理\n\n后台管理有几个事项需要大家注意：\n\n * 前台是指当前可以操控和执行命令的这个操作环境，\n   \n   后台是指工作可以自行运行，但是不能直接用ctrl+c来终止它，只能使用fg/bg来调用工作；\n\n * 当前的登录终端，只能管理当前终端的工作，而不能管理其他登录终端的工作。\n   \n   如tty1登录的终端是不能管理tty2终端中的工作的；\n\n * 放入后台的命令必须可以持续运行一段时间，这样我们才能扑捉和操作这个工作。 如果把ls命令放入后台执行，它很快就会执行完成，我们很难操作它。\n\n * 放入后台执行的命令不能和前台用户有交互或需要前台输入，否则放入后台只能暂停，而不能执行。 比如vi命令放入后台只能暂停，而不能执行，因为vi需要前台输入信息。 top命令也不能放入后台执行，而只能放入后台暂停，因为top命令需要和前台有交互。\n\n如何把命令放入后台\n\n1)、第一种方法是“命令 &”，把命令放入后台执行\n\n第一种把命令放入后台的方法是在命令后面加入“空格&”，这种方法放入后台的命令，在后台是执行状态。 但是注意，放入后台执行的命令不能与前台有交互，否则这个命令是不能在后台执行的。\n\n[root@localhost ~]# find / -name install.log &\n[1] 1920\n# [工作号] 进程号\n# find命令放入后台执行，每个后台命令会分配一个工作号，命令既然可以执行，就会有进程产生，所以也会有进程号。\n\n\n这样的话，虽然find命令在执行，但是当前终端我还是可以进行其他命令操作的。如果在终端上出现：\n\n[1]+\tDone\tfind / -name install.log\n\n\n证明后台这个任务已经完成了，当然命令如果有执行结果的话，也会显示到操作终端上。 [1]是这个命令的工作号，+号代表这个任务是最近一个被放入后台的工作。\n\n2)、第二种方法是在命令执行过程中按ctrl+z快捷键，命令在后台是暂停状态\n\n使用这种方法放入后台的命令，就算是不和前台有交互，能在后台执行的命令，也是暂停状态，ctrl+z快捷键就是暂停的快捷键。\n\n例1：\n[root@localhost ~]# top\n#在top命令执行的过程中，按下ctrl+z快捷键\n[1]+\tStopped\ttop\n#提示命令被放入后台，工作号是1，状态是暂停。而且虽然top命令没有结束，也能取得\n#控制台权限。\n\n例2：\n[root@localhost ~]# tar -zcf etc.tar.gz /etc\n#压缩一下/etc/目录\ntar:从成员名中删除开头的“/”\ntar:从硬连接目标中删除开头的“/”\n^Z\t\t<--执行的过程中，按下ctrl+z快捷键\n[2]+\tStopped\t\ttar -zcf etc.tar.gz /etc\n#命令被放入后台，工作号是2，状态是暂停。\n\n\n\n# 后台命令管理\n\n1)、查看后台的工作\n\n[root@localhost ~]# jobs [-l]\n选项：\n\t-l：显示工作的PID\n\n\n2）、将后台暂停的工作恢复到前台执行\n\n[root@localhost ~]# fg %工作号\n参数：\n\t%工作号：%号可以省略，但是注意工作号和PID的区别\n\n\n3）、把后台暂停的工作恢复到后台执行\n\n[root@localhost ~]# bg %工作号\n\n\n4）、后台命令脱离登录终端运行\n\nnohup命令的作用就是让后台工作在离开操作终端时，也能够正确的在后台执行。\n\n[root@localhost ~]# nohup [命令] &\n\n例如：\n[root@localhost ~]# nohup find / -print > /root/file.log &\n[3] 2349 \t<--用find命令，打印/下所有文件。放入后台执行\n[root@localhost ~]# nohup: 忽略输入并把输出追加到"nohup.out"\n#有提示信息\n\n\n\n# 系统资源查看\n\n\n# vmstat命令监控系统资源\n\n[root@localhost ~]#vmstat [刷新延时 刷新次数]\n\n例如：\n[root@xiaoshaozi ~]# vmstat 1 3\n#使用vmstat检测，每1秒刷新一次，共刷新3次\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 2  0      0 551100 219936 665036    0    0     1     4   39   64  1  0 99  0  0\n 0  0      0 550548 219936 665044    0    0     0    40 3378 5995  3  3 94  0  0\n 0  0      0 550996 219936 665048    0    0     0     0 3141 5986  1  1 99  0  0\n解释下这个命令的输出：\nprocs：进程信息字段：\n    r：等待运行的进程数，数量越大，系统越繁忙。\n    b：不可被唤醒的进程数量，数量越大，系统月繁忙。\nmemory：内存信息字段：\n    swpd：虚拟内存的使用情况，单位KB\n    free：空闲的内存容量，单位KB\n    buff：缓冲的内存容量，单位KB\n    cache：缓存的内存容量，单位KB\n    \nswap：交换分区的信息字段：\n    si：从磁盘中交换到内存中数据的数量，单位KB。\n    so：从内存中交换到磁盘中数据的数量，单位KB。此两个数越大，证明数据需要经常在磁盘和内存之间交换，系统性能越差。\nio：磁盘读写信息字段：\n    bi：从块设备读入数据的总量，单位是块。\n    bo：写到块设备的数据的总量，单位是块。此两个数越大，代表系统的I/O越繁忙。\nsystem：系统信息字段：\n    in：每秒被中断的进程次数。\n    cs：每秒钟进行的事件切换次数。此两个数越大，代表系统与接口设备的通信非常繁忙。\nCPU：CPU信息字段：\n    us：非内核进程消耗CPU运算时间的百分比。\n    sy：内核进程消耗CPU运算时间的百分比。\n    id：空闲CPU的百分比。\n    wa：等待I/O所消耗的CPU百分比。\n    st：被虚拟机所盗用的CPU占比。\n\n\n\n# dmesg显示开机时内核检测信息\n\n例如：\n[root@xiaoshaozi ~]# mesg | grep CPU\n# 查看CPU信息\n[root@xiaoshaozi ~]# dmesg | grep eth0\n# 查询第一块网卡信息\n\n\n\n# free命令查看内存使用状态\n\n[root@localhost ~]# free [-b|-k|-m|-g]\n选项：\n    -b：以字节为单位显示\n    -k：以KB为单位显示，默认就是以KB为单位显示\n    -m：以MB为单位显示\n    -g：以GB为单位显示\n\n[root@xiaoshaozi ~]#  free\n              total        used        free      shared  buff/cache   available\nMem:         625344      219704      405640         0      56852      85276\n-/+ buffers/cache:\t\t  77576\t\t 547768\nSwap:        524280           0      524280\n\n第一行：\n\ttotal\t是总内存数，\n\tused\t是已经使用的内存数，\n\tfree\t是空闲的内存数，\n\tshared\t是多个进程共享的内存总数，\n\tbuffers\t是缓冲内存数，\n\tcached\t是缓存内存数。默认单位是KB。\n\t\n第二行：\n\t-/buffers/cache 的内存数，相当于第一行的used-buffers-cached。\n\t+/buffers/cache 的内存数，相当于第一行的free+buffers+cached。\n\n第三行：\n\ttotal\t是swap的总数；\n\tused\t是已经使用的swap数，\n\tfree\t是空闲的swap数。默认单位是KB。\n\t\n\n\n\n\n# 查看CPU信息\n\nCPU的主要信息保存在/proc/cpuinfo这个文件当中，我们只要查看这个文件，就可以知道cpu的相关信息。\n\n[root@xiaoshaozi ~]#  cat /proc/cpuinfo\nprocessor       : 0\n#逻辑CPU编号\nvendor_id       : GenuineIntel\n#CPU制造厂商\ncpu family      : 6\n#产品的系列代号\nmodel           : 85\n#CPU系列代号\nmodel name      : Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz\n#CPU系列的名字，编号，主频\nstepping        : 7\n#更新版本\nmicrocode       : 0x1\ncpu MHz         : 2499.998\n#实际主频\ncache size      : 36608 KB\n#二级缓存\n\n\n\n\n\n# 查看本机登陆用户信息\n\nw、who命令\n\n[root@xiaoshaozi ~]# w\n 09:59:28 up 3 days, 20:24,  2 users,  load average: 0.44, 0.22, 0.16\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    220.180.63.118   08:39    8.00s  0.00s  0.00s -bash\nroot     pts/1    220.180.63.118   08:39    1:19m  3.57s  3.57s top\n\n[root@xiaoshaozi ~]# who\nroot     pts/0        2024-01-09 08:39 (220.180.63.118)\nroot     pts/1        2024-01-09 08:39 (220.180.63.118)\n\n\n\n第一行其实和top命令的第一行非常类似，主要显示了系统当前时间，开机多久（up），有多少用户登陆（users），1分钟、5分钟、15分钟前的平均负载（load average）。\n第二行是项目的说明，第三行开始每行代表一个用户。这些项目是：\nUSER：登陆的用户名；\nTTY：登陆终端；\nFROM：从哪个IP地址登陆；\nLOGIN@：登陆时间；\nIDLE：用户闲置时间；\nJCPU：指的是和该终端连接的所有进程占用的CPU运算时间。这个时间里并不包括过去的后台作业时间，但却包括当前正在运行的后台作业所占用的时间；\nPCPU：是指当前进程所占用的CPU运算时间；\nWHAT：当前正在运行的命令。\n\n\n\n# uptime命令\n\nuptime命令的作用就是显示系统的启动时间和平均负载，也就是top命令的第一行。\n\n其实w命令也能看到这一行的数据，具体原意使用哪个命令看个人习惯。\n\n[root@xiaoshaozi ~]# uptime\n 10:09:07 up 3 days, 20:34,  2 users,  load average: 0.08, 0.06, 0.11\n\n\n\n\n# 查看系统与内核相关信息\n\n我们使用uname命令查看内核的相关信息\n\n[root@localhost ~]# uname [选项]\n选项：\n    -a：查看系统所有相关信息；\n    -r：查看内核版本；\n    -s：查看内核名称。\n    -m：查看CPU架构\n\n\n如果我们想要判断当前系统的位数，可以通过file命令来判断系统文件（主要是系统命令）的位数来推断系统的位数。\n\n[root@xiaoshaozi ~]#  file /bin/ls\n/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=ceaf496f3aec08afced234f4f36330d3d13a657b, stripped\n\n\n如果我们想要查询当前Linux系统的发行版本，可以使用“lsb_release -a”命令查看，\n\n[root@xiaoshaozi ~]# lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID: CentOS\nDescription:    CentOS Linux release 7.6.1810 (Core) \nRelease:        7.6.1810\nCodename:       Core\n',normalizedContent:'# 系统管理--3.1.系统管理\n\n\n# 进程生命周期\n\n父进程,复制自己的地址空间（fork）创建一个新的（子）进程结构。每个新进程分配一个唯一的进程 id （pid），满足跟踪安全性之需。pid 和 父进程 id (ppid）是子进程环境的元素，任何进程都可以创建子进程，所有进程都是第一个系统进程的后代：centos5/6: ==init== redhat7/8: ==systemd==\n\n子进程继承父进程的安全性身份、过去和当前的文件描述符、端口和资源特权、环境变量，以及程序代码。随后，子进程exec 自己的程序代码。通常，父进程在子进程运行期间处于睡眠（sleeping）状态。当子进程完成时发出（exit）信号请求，在退出时， 子进程会关闭或丢弃了其资源环境，剩余的部分称之为僵停（僵尸zombie）。父进程在子进程退出时收到信号而被唤醒，清理剩余的结构，然后继续执行其自己的程序代码\n\n\n\n㈠ 进程的优先级控制\n\n① 调整正在运行进程的优先级(renice)\n\n1）使用top按"r"来调整\n\n改变nice---\x3epr\n优先级的范围：\n-20——19 数字越低，优先级越高，系统会按照更多的cpu时间给该进程\n\n\n2）命令行使用renice调整\n\nsleep命令没有实际意义，延迟(睡觉)5000秒\n[root@localhost ~]# sleep 5000 &\n[1] 2544\nsleep程序已经运行，通过renice命令调整优先级\n[root@localhost ~]# renice -20 2544\n2544: old priority 0, new priority -20\n\n\n② 程序运行时指定优先级(nice)\n\n启动进程时，通常会继承父进程的 nice级别，默认为0。\n# nice -n -5 sleep 6000 &\n# ps axo command,pid,nice |grep sleep\n\n\n\n# ps\n\n常见组合\n\nps -ef\nps -ef\nps -ely\nps aux\nps auxf\n\na 显示当前终端下的所有进程，包括其他用户的进程\nu 显示进程拥有者、状态、资源占用等的详细信息（注意有“-”和无“-”的区别）\nx 显示没有控制终端的进程。通常与a这个参数一起使用，可列出较完整信息\no 自定义打印内容\n-e 显示所有进程。\n-f 完整输出显示进程之间的父子关系\n-l 较长、较详细的将该进程的信息列出\n\n\n\n\n\n\n\nuser: \t运行进程的用户\npid: \t进程id\n%cpu: \tcpu占用率\n%mem: \t内存占用率\nvsz: \t占用虚拟内存\nrss: \t占用实际内存,驻留内存\ntty: \t进程运行的终端\nstat: \t进程状态,man ps获取帮助(/state)\n    r \t运行\n    s \t可中断睡眠 sleep\n    d \t不可中断睡眠\n    t \t停止的进程\n    z \t僵尸进程\n    ss \ts进程的领导者，父进程\n    s< \t<优先级较高的进程\n    sn \tn优先级较低的进程\n    r+ \t+表示是前台的进程组\n    sl \t以线程的方式运行\nstart \t进程的启动时间\ntime \t进程占用cpu的总时间\ncommand 进程文件，进程名\n\n其他命令查看进行信息\npidof \t查看指定进程的pid\npstree \t查看进程树\n\n\nps命令是用来静态显示系统中进程的命令。 不过这个命令有些特殊，它的部分命令的选项不能加入“-”，比如命令“psaux”，其中“aux”是选项，但是这个选项不能加入“-”。 这是因为ps命令的部分选项需要遵守bsd操作系统的格式。 所以ps命令的常用选项的组合是固定的。\n\n[root@localhost ~]# ps aux\n#查看系统中所有进程，使用bsd操作系统格式\n\n[root@localhost ~]# ps -le\n#查看系统中所有进程，使用linux标准命令格式。\n选项：\n    a:\t显示一个终端的所有进程，除了会话引线\n    u:\t显示进程的归属用户及内存的使用情况\n    x:\t显示没有控制终端的进程\n    -l\t长格式显示。显示更加详细的信息\n    -e\t显示所有进程，和-a作用一致\n\n\n[root@jysp grub2]# vim /etc/default/grub\n[root@jysp grub2]# ps aux\nuser       pid %cpu %mem    vsz   rss tty      stat start   time command\nroot         2  0.0  0.0      0     0 ?        s    1月02   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        i<   1月02   0:00 [rcu_gp]\n\n\n解释下这个命令的输出：\n\n * user：该进程是由哪个用户产生的；\n\n * pid：进程的id号；\n\n * %cpu：该进程占用cpu资源的百分比，占用越高，进程越耗费资源；\n\n * %mem：该进程占用物理内存的百分比，占用越高，进程越耗费资源；\n\n * vsz：该进程占用虚拟内存的大小，单位kb；\n\n * rss：该进程占用实际物理内存的大小，单位kb；\n\n * tty：该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端（可以通过alt+f1-f7键切换不同的终端），tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端，一般是远程连接的终端，第一个远程连接占用的是pts/0终端，第二个远程连接占用pts/1，依次增长。\n\n * stat：进程状态。常见的状态有：\n   \n   * d：不可被唤醒的睡眠状态，通常用于i/o情况\n   * r：该进程正在运行\n   * s：该进程在睡眠状态，可被唤醒\n   * t：停止状态，可能是在后台暂停或进程在除错状态\n   * w：内存交互状态（从2.6内核开始无效）\n   * x：死掉的进程（应该不会出现）\n   * z：僵尸进程。进程已经终止，但是部分程序还在内存当中。\n   * <：高优先级（以下状态在bsd格式当中出现）\n   * n：低优先级l：被锁入内存\n   * s：包含子进程\n   * l：多线程（小写l）\n   * +：位于后台\n\n * start：该进程的启动时间\n\n * time：该进程占用cpu的运算时间，注意不是系统时间\n\n * command：产生此进程的命令名\n\n[root@jysp grub2]# ps -le\nf s   uid   pid  ppid  c pri  ni addr sz wchan  tty          time cmd\n4 s     0     1     0  0  80   0 -  2461 ep_pol ?        00:01:15 systemd\n1 s     0     2     0  0  80   0 -     0 kthrea ?        00:00:00 kthreadd\n\n\n * f：进程标志，说明进程的权限，常见的标志有：\n   * 1：进程可以复制，但是不能执行\n   * 4：进程使用超级用户权限\n * s：进程状态。具体的状态和“ps aux”命令中stat状态一致\n * uid：进程是哪个uid用户调用运行的\n * pid：进程的id号\n * ppid：父进程的id号\n * c：该进程的cpu使用率，单位是百分比\n * pri：进程的优先级，数值越小该进程优先级越高，越快被cpu执行\n * ni：进程的优先级，也是数值越小越早被执行\n * addr：该进程在内存的哪个位置\n * sz：该进程占用多大内存\n * wchan：该进程是否运行。“-”代表正在运行\n * tty：该进程由哪个终端产生\n * time：该进程占用cpu的运算时间，注意不是系统时间\n * cmd：产生此进程的命令名\n\n\n# top\n\n[root@localhost ~]# top [选项]\n选项：\n\n\n我们看看top命令的执行结果：\n\ntop - 19:26:48 up 3 days,  5:51,  2 users,  load average: 0.32, 0.13, 0.12\ntasks:  97 total,   1 running,  96 sleeping,   0 stopped,   0 zombie\n%cpu(s):  1.9 us,  2.0 sy,  0.0 ni, 96.1 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nkib mem :  1776404 total,   557000 free,   340088 used,   879316 buff/cache\nkib swap:        0 total,        0 free,        0 used.  1251988 avail mem \n\n  pid user      pr  ni    virt    res    shr s  %cpu %mem     time+ command                           \n 1210 root      10 -10  227028  33768  10748 s   3.3  1.9  79:34.76 aliyundunmonito                   \n24408 root      20   0  157728   6372   4620 s   0.3  0.4   1:05.81 sshd                              \n\n\ntop命令的输出内容是动态的，默认每3秒刷新一次。\n\n命令的输出主要分为两大部分： 第一部分是前五行，显示的是整个系统的资源使用状况，我们就是通过这些输出判断服务器的健康状态； 第二部分从第六行开始，显示的是系统中进程的信息。\n\n * 我们先来说明第一部分的作用：\n   \n   * 第一行信息为任务队列信息\n     \n     内容                               说明\n     19:26:48                         系统当前时间\n     up 3 days, 5:51                  系统的运行时间\n     2 users                          当前登录了两个用户\n     load average: 0.32, 0.13, 0.12   系统在之前1分钟，5分钟，15分钟的平均负载。\n                                      如果cpu是单核，则这个数超过1，就是高负载。\n                                      如果cpu是四核，则这个数超过4，就是高负载。\n                                      （这个平均负载完全是个人经验来进行判断的，一般认为不应该超过服务器cpu的核数。）\n     \n     物理cpu(n路)：主板上cpu插槽的个数\n     cpu核数：一块cpu上面能处理数据的芯片组的数量\n     逻辑cpu：一般情况，一颗cpu可以有多核，加上intel的超线程技术(ht), 可以在逻辑上再分一倍数量的cpu core出来；\n     逻辑cpu数量=物理cpu数量 x cpu核数。如果支持ht,还要更多。\n     \n     查看物理cpu的个数\n     # cat /proc/cpuinfo |grep "physical id"|sort |uniq|wc -l\n     查看逻辑cpu的个数\n     # cat /proc/cpuinfo |grep "processor"|wc -l\n     查看cpu是几核\n     # cat /proc/cpuinfo |grep "cores"|uniq\n     \n   \n   * 第二行为进程信息\n     \n     内容                说明\n     tasks: 97 total   系统中的进程总数\n     1 running         正在运行的进程数\n     96 sleeping       睡眠的进程\n     0 stopped         正在停止的进程\n     0 zombie          僵尸进程。如果不是0，需要手工检查僵尸进程\n   \n   * 第三行为cpu信息\n     \n     内容                说明\n     %cpu(s): 1.9 us   用户模式占用的cpu百分比\n     2.0 sy            系统模式占用的cpu百分比\n     0.0 ni            改变过优先级的用户进程占用的cpu百分比\n     96.1 id           空闲cpu的cpu百分比\n     0.0 wa            等待输入/输出的进程的占用cpu百分比\n     0.0 hi            硬中断请求服务占用的cpu百分比\n     0.0 si            软中断请求服务占用的cpu百分比\n     0.0 st            st（steal time）虚拟时间百分比。\n                       就是当有虚拟机时，虚拟cpu等待实际cpu的时间百分比。\n     \n     us \t\t用户进程占用cpu的比率\n     sy \t\t内核、内核进程占用cpu的比率；\n     ni \t\t如果一些用户进程修改过优先级，这里显示这些进程占用cpu时间的比率；\n     id \t\tcpu空闲比率，如果系统缓慢而这个值很高，说明系统慢的原因不是cpu负载高；\n     wa \t\tcpu等待执行i/o操作的时间比率，该指标可以用来排查磁盘i/o的问题，通常结合wa和id判断\n     hi \t\tcpu处理硬件中断所占时间的比率；\n     si \t\tcpu处理软件中断所占时间的比率；\n     st \t\t其他任务所占cpu时间的比率；\n     \n     说明：\n     1. 用户进程占比高，wa低，说明系统缓慢的原因在于进程占用大量cpu，通常还会伴有教低的id，说明cpu空闲时间很少；\n     2. wa低，id高，可以排除cpu资源瓶颈的可能。\n     3. wa高，说明i/o占用了大量的cpu时间，需要检查交换空间的使用；如果内存充足，但wa很高，说明需要检查哪个进程占用\n     了大量的i/o资源。\n     \n   \n   * 第四行为物理内存信息，\n     \n     内容                        说明\n     kib mem : 1776404 total   物理内存的总量，单位kb\n     557000 free               已经使用的物理内存数量\n     340088 used               空闲的物理内存数量，我们使用的是虚拟机，\n                               总共只分配了628mb内存，所以只有53mb的空闲内存了\n     879316 buff/cache         作为缓冲的内存数量\n   \n   * 第五行为交换分区（swap）信息\n     \n     内容                  说明\n     kib swap: 0 total   交换分区（虚拟内存）的总大小\n     0k used             已经使用的交互分区的大小\n     0 free              空闲交换分区的大小\n     1251988 avail mem   作为缓存的交互分区的大小\n\n * 再来看top命令的第二部分输出，主要是系统进程信息。\n   \n   \n   \n   * pid：进程id\n   * user：该进程所属的用户\n   * pr：优先级，数值越小优先级越高\n   * ni：优先级，数值越小优先级越高\n   * virt：该进程使用的虚拟内存的大小，单位kb\n   * res：该进程使用的物理内存的大小，单位kb\n   * shr：共享内存大小，单位kb\n   * s：进程状态\n   * %cpu：该进程占用cpu的百分比\n   * %mem：该进程占用内存的百分比\n   * time+：该进程总共占用的cpu时间\n   * command：进程的命令名\n\n比如我如果只想让top命令查看某一个进程，这时就可以使用“-p选项”：\n\n[root@localhost ~]# top -p 15273\n#只查看pid为15273的apache进程\n\n\ntop命令常用按键命令\n\nh|? 帮助\nm 按内存的使用排序\np 按cpu使用排序\nt 按该进程使用的cpu时间累积排序\nk 给某个pid一个信号（signal），默认值是信号15\n1 显示所有cpu的负载\ns 改变两次刷新之间的时间。默认是5秒\nq 退出程序\nn 以pid的大小排序\nr 对排序进行反转\nf 自定义显示字段\nr 重新安排一个进程的优先级别\n\n\ntop命令常用的选项\n\n-d 后面可以接秒数，指定每两次屏幕信息刷新之间的时间间隔；\n-p 指定某个进程来进行监控；\n-u 指定进程的拥有者\n-b -n 以批处理方式执行top命令。通常使用数据流重定向，将处理结果输出为文件；\n[root@misshou ~]# top\n[root@misshou ~]# top -d 1\n[root@misshou ~]# top -d 1 -p 10126 查看指定进程的动态信\n息\n[root@misshou ~]# top -d 1 -u apache 查看指定用户的进程\n[root@misshou ~]# top -d 1 -b -n 2 > top.txt 将2次top信息写入到文件\n\n\n\n# pstree\n\npstree [选项]\n    -p 显示进程的pid\n    -u 显示进程的所属用户\n\n\n\n# 其他命令\n\nkill [信号] 进程pid\nkillall\npkill\n给进程号为15621的进程发送默认信号(-15可以省略)\nkill -15 15621\n给stu1用户的所有进程发送9号信号（结束stu1的所有进程），根据用户结束进程\npkill -9 -u stu1\n给进程名为vsftpd的进程发送9号信号(根据进程名来结束进程)\npkill -9 vsftpd\nkillall -15 vsftpd\n\n\n\n# 进程的管理\n\n系统中可以识别的信号较多，我们可以使用命令“kill -l”或“man 7 signal”来查询，命令如下：\n\n[root@xiaoshaozi ~]# kill -l\n 1) sighup       2) sigint       3) sigquit      4) sigill       5) sigtrap\n 6) sigabrt      7) sigbus       8) sigfpe       9) sigkill     10) sigusr1\n11) sigsegv     12) sigusr2     13) sigpipe     14) sigalrm     15) sigterm\n16) sigstkflt   17) sigchld     18) sigcont     19) sigstop     20) sigtstp\n21) sigttin     22) sigttou     23) sigurg      24) sigxcpu     25) sigxfsz\n26) sigvtalrm   27) sigprof     28) sigwinch    29) sigio       30) sigpwr\n31) sigsys      34) sigrtmin    35) sigrtmin+1  36) sigrtmin+2  37) sigrtmin+3\n38) sigrtmin+4  39) sigrtmin+5  40) sigrtmin+6  41) sigrtmin+7  42) sigrtmin+8\n43) sigrtmin+9  44) sigrtmin+10 45) sigrtmin+11 46) sigrtmin+12 47) sigrtmin+13\n48) sigrtmin+14 49) sigrtmin+15 50) sigrtmax-14 51) sigrtmax-13 52) sigrtmax-12\n53) sigrtmax-11 54) sigrtmax-10 55) sigrtmax-9  56) sigrtmax-8  57) sigrtmax-7\n58) sigrtmax-6  59) sigrtmax-5  60) sigrtmax-4  61) sigrtmax-3  62) sigrtmax-2\n63) sigrtmax-1  64) sigrtmax  \n\n\n这里我们介绍一下主要的信号，\n\n信号代号   信号名称      说明\n1      sighup    该信号让进程立即关闭，然后重新读取配置文件之后重启。\n2      sigint    程序终止信号，用于终止前台进程。相当于输出ctrl+c快捷键。\n8      sigfpe    在发生致命的算术运算错误时发出.\n                 不仅包括浮点运算错误,还包括溢出及除数为0等其它所有的算术的错误。\n9      sigkill   用来立即结束程序的运行.本信号不能被阻塞、处理和忽略。\n                 一般用于强制终止进程。\n14     sigalrm   时钟定时信号,计算的是实际的时间或时钟时间.alarm函数使用该信号。\n15     sigterm   正常结束进程的信号，kill命令的默认信号。\n                 有时如果进程已经发生问题，这个信号是无法正常终止进程的，我们才会尝试sigkill信号，也就是信号9。\n18     sigcont   该信号可以让暂停的进程恢复执行，本信号不能被阻断。\n19     sigstop   该信号可以暂停前台进程，相当于输入ctrl+z快捷键。本信号不能被阻断。\n\n信号编号   信号名       解释说明\n1      sighup    默认终止控制终端进程(可用来重新加载配置文件，平滑重启)\n2      sigint    键盘中断(ctrl+c)\n3      sigquit   键盘退出(ctrl+)，一般指程序异常产生core文件\n9      sigkill   强制终止\n15     sigterm   正常结束，默认信号\n18     sigcont   继续\n19     sigstop   停止\n20     sigtstp   暂停(ctrl+z)\n                 \n\n\n# kill\n\n[root@localhost ~]# kill [信号] pid\n\n\n例2：使用“-1”信号，让进程重启\n[root@localhost ~]# kill -1 2246\n#使用“-1（数字一）”信号，让httpd的主进程重启动。\n\n\n例3：使用“-19”信号，让进程暂停。\n[root@localhost ~]# vi test.sh\n#使用vi命令编辑一个文件，不要退出\n\n[root@localhost ~]# ps aux | grep "vi" | grep -v "grep"\nroot\t2313\t0.0\t0.2\t7116\t1544\tpts/1\ts+\t19:20\t0:00 vi test.sh\n#换一个不同的终端，查看下这个进程的状态。进程状态是s（休眠）和+（位于后台），\n#因为是在另外一个终端运行的命令\n\n[root@localhost ~]# kill -19 2313\n#使用-19信号，让pid是2313的进程暂停。相当于在vi界面按“ctrl+z”快捷键。\n\n[root@localhost ~]# ps aux | grep "vi" | grep -v "grep"\nroot\t2313\t0.0\t0.2\t7116\t1580 pts/1\tt\t19:20\t0:00 vi test.sh\n#注意2313进程的状态，变成了t（暂停）状态。这时我切换回vi的终端，发现vi命令已\n#经暂停，又回到了命令提示符。\n#不过2313进程就会卡在后台，如果想要恢复可以使用“kill -9 2313”强制终止进程，也\n#可以利用15.2小节将要学习的工作管理来进行恢复。\n\n\n\n# killall\n\n[root@localhost ~]#killall [选项][信号] 进程名\n选项：\n    -i：\t交互式，询问是否要杀死某个进程\n    -i：\t忽略进程名的大小写\n\n\n交互式杀死sshd进程\n[root@localhost ~]# ps aux | grep "sshd" | grep -v "grep"\nroot\t1733\t0.0\t0.1\t8508\t1008 ?\tss\t19:47\t0:00 /usr/sbin/sshd\nroot\t1735\t0.1\t0.5\t11452\t3296 ?\tss\t19:47\t0:00 sshd: root@pts/0\nroot\t1758\t0.1\t0.5\t11452\t3296 ?\tss\t19:47\t0:00 sshd: root@pts/1\n#查询系统有3个sshd进程。1733是sshd服务的进程，1735和1758是我的两个远程连接\n#的进程\n\n[root@localhost ~]# killall -i sshd\n#交互式杀死sshd进程\n杀死sshd(1733) ? (y/n) n\n# 这个进程是sshd的服务进程，如果杀死，所有的sshd连接都不能登录。\n杀死sshd(1735) ? (y/n) n\n# 这是我当前登录终端，不能杀死我自己吧！\n杀死sshd(1758) ? (y/n) y\n# 把另外一个sshd登录终端踢出。\n\n\n\n# pkill\n\npkill命令和killall命令非常类似，也是按照进程名来杀死进程。\n\n[root@localhost ~]#pkill [选项][信号] 进程名\n选项：\n\t-t终端号：按照终端号踢出用户\n\t\n[root@localhost ~]# pkill -9 -t pts/1\n#强制杀死从pts/1虚拟终端登录的进程\n\n\n\n# 工作管理\n\n后台管理有几个事项需要大家注意：\n\n * 前台是指当前可以操控和执行命令的这个操作环境，\n   \n   后台是指工作可以自行运行，但是不能直接用ctrl+c来终止它，只能使用fg/bg来调用工作；\n\n * 当前的登录终端，只能管理当前终端的工作，而不能管理其他登录终端的工作。\n   \n   如tty1登录的终端是不能管理tty2终端中的工作的；\n\n * 放入后台的命令必须可以持续运行一段时间，这样我们才能扑捉和操作这个工作。 如果把ls命令放入后台执行，它很快就会执行完成，我们很难操作它。\n\n * 放入后台执行的命令不能和前台用户有交互或需要前台输入，否则放入后台只能暂停，而不能执行。 比如vi命令放入后台只能暂停，而不能执行，因为vi需要前台输入信息。 top命令也不能放入后台执行，而只能放入后台暂停，因为top命令需要和前台有交互。\n\n如何把命令放入后台\n\n1)、第一种方法是“命令 &”，把命令放入后台执行\n\n第一种把命令放入后台的方法是在命令后面加入“空格&”，这种方法放入后台的命令，在后台是执行状态。 但是注意，放入后台执行的命令不能与前台有交互，否则这个命令是不能在后台执行的。\n\n[root@localhost ~]# find / -name install.log &\n[1] 1920\n# [工作号] 进程号\n# find命令放入后台执行，每个后台命令会分配一个工作号，命令既然可以执行，就会有进程产生，所以也会有进程号。\n\n\n这样的话，虽然find命令在执行，但是当前终端我还是可以进行其他命令操作的。如果在终端上出现：\n\n[1]+\tdone\tfind / -name install.log\n\n\n证明后台这个任务已经完成了，当然命令如果有执行结果的话，也会显示到操作终端上。 [1]是这个命令的工作号，+号代表这个任务是最近一个被放入后台的工作。\n\n2)、第二种方法是在命令执行过程中按ctrl+z快捷键，命令在后台是暂停状态\n\n使用这种方法放入后台的命令，就算是不和前台有交互，能在后台执行的命令，也是暂停状态，ctrl+z快捷键就是暂停的快捷键。\n\n例1：\n[root@localhost ~]# top\n#在top命令执行的过程中，按下ctrl+z快捷键\n[1]+\tstopped\ttop\n#提示命令被放入后台，工作号是1，状态是暂停。而且虽然top命令没有结束，也能取得\n#控制台权限。\n\n例2：\n[root@localhost ~]# tar -zcf etc.tar.gz /etc\n#压缩一下/etc/目录\ntar:从成员名中删除开头的“/”\ntar:从硬连接目标中删除开头的“/”\n^z\t\t<--执行的过程中，按下ctrl+z快捷键\n[2]+\tstopped\t\ttar -zcf etc.tar.gz /etc\n#命令被放入后台，工作号是2，状态是暂停。\n\n\n\n# 后台命令管理\n\n1)、查看后台的工作\n\n[root@localhost ~]# jobs [-l]\n选项：\n\t-l：显示工作的pid\n\n\n2）、将后台暂停的工作恢复到前台执行\n\n[root@localhost ~]# fg %工作号\n参数：\n\t%工作号：%号可以省略，但是注意工作号和pid的区别\n\n\n3）、把后台暂停的工作恢复到后台执行\n\n[root@localhost ~]# bg %工作号\n\n\n4）、后台命令脱离登录终端运行\n\nnohup命令的作用就是让后台工作在离开操作终端时，也能够正确的在后台执行。\n\n[root@localhost ~]# nohup [命令] &\n\n例如：\n[root@localhost ~]# nohup find / -print > /root/file.log &\n[3] 2349 \t<--用find命令，打印/下所有文件。放入后台执行\n[root@localhost ~]# nohup: 忽略输入并把输出追加到"nohup.out"\n#有提示信息\n\n\n\n# 系统资源查看\n\n\n# vmstat命令监控系统资源\n\n[root@localhost ~]#vmstat [刷新延时 刷新次数]\n\n例如：\n[root@xiaoshaozi ~]# vmstat 1 3\n#使用vmstat检测，每1秒刷新一次，共刷新3次\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 2  0      0 551100 219936 665036    0    0     1     4   39   64  1  0 99  0  0\n 0  0      0 550548 219936 665044    0    0     0    40 3378 5995  3  3 94  0  0\n 0  0      0 550996 219936 665048    0    0     0     0 3141 5986  1  1 99  0  0\n解释下这个命令的输出：\nprocs：进程信息字段：\n    r：等待运行的进程数，数量越大，系统越繁忙。\n    b：不可被唤醒的进程数量，数量越大，系统月繁忙。\nmemory：内存信息字段：\n    swpd：虚拟内存的使用情况，单位kb\n    free：空闲的内存容量，单位kb\n    buff：缓冲的内存容量，单位kb\n    cache：缓存的内存容量，单位kb\n    \nswap：交换分区的信息字段：\n    si：从磁盘中交换到内存中数据的数量，单位kb。\n    so：从内存中交换到磁盘中数据的数量，单位kb。此两个数越大，证明数据需要经常在磁盘和内存之间交换，系统性能越差。\nio：磁盘读写信息字段：\n    bi：从块设备读入数据的总量，单位是块。\n    bo：写到块设备的数据的总量，单位是块。此两个数越大，代表系统的i/o越繁忙。\nsystem：系统信息字段：\n    in：每秒被中断的进程次数。\n    cs：每秒钟进行的事件切换次数。此两个数越大，代表系统与接口设备的通信非常繁忙。\ncpu：cpu信息字段：\n    us：非内核进程消耗cpu运算时间的百分比。\n    sy：内核进程消耗cpu运算时间的百分比。\n    id：空闲cpu的百分比。\n    wa：等待i/o所消耗的cpu百分比。\n    st：被虚拟机所盗用的cpu占比。\n\n\n\n# dmesg显示开机时内核检测信息\n\n例如：\n[root@xiaoshaozi ~]# mesg | grep cpu\n# 查看cpu信息\n[root@xiaoshaozi ~]# dmesg | grep eth0\n# 查询第一块网卡信息\n\n\n\n# free命令查看内存使用状态\n\n[root@localhost ~]# free [-b|-k|-m|-g]\n选项：\n    -b：以字节为单位显示\n    -k：以kb为单位显示，默认就是以kb为单位显示\n    -m：以mb为单位显示\n    -g：以gb为单位显示\n\n[root@xiaoshaozi ~]#  free\n              total        used        free      shared  buff/cache   available\nmem:         625344      219704      405640         0      56852      85276\n-/+ buffers/cache:\t\t  77576\t\t 547768\nswap:        524280           0      524280\n\n第一行：\n\ttotal\t是总内存数，\n\tused\t是已经使用的内存数，\n\tfree\t是空闲的内存数，\n\tshared\t是多个进程共享的内存总数，\n\tbuffers\t是缓冲内存数，\n\tcached\t是缓存内存数。默认单位是kb。\n\t\n第二行：\n\t-/buffers/cache 的内存数，相当于第一行的used-buffers-cached。\n\t+/buffers/cache 的内存数，相当于第一行的free+buffers+cached。\n\n第三行：\n\ttotal\t是swap的总数；\n\tused\t是已经使用的swap数，\n\tfree\t是空闲的swap数。默认单位是kb。\n\t\n\n\n\n\n# 查看cpu信息\n\ncpu的主要信息保存在/proc/cpuinfo这个文件当中，我们只要查看这个文件，就可以知道cpu的相关信息。\n\n[root@xiaoshaozi ~]#  cat /proc/cpuinfo\nprocessor       : 0\n#逻辑cpu编号\nvendor_id       : genuineintel\n#cpu制造厂商\ncpu family      : 6\n#产品的系列代号\nmodel           : 85\n#cpu系列代号\nmodel name      : intel(r) xeon(r) platinum 8269cy cpu @ 2.50ghz\n#cpu系列的名字，编号，主频\nstepping        : 7\n#更新版本\nmicrocode       : 0x1\ncpu mhz         : 2499.998\n#实际主频\ncache size      : 36608 kb\n#二级缓存\n\n\n\n\n\n# 查看本机登陆用户信息\n\nw、who命令\n\n[root@xiaoshaozi ~]# w\n 09:59:28 up 3 days, 20:24,  2 users,  load average: 0.44, 0.22, 0.16\nuser     tty      from             login@   idle   jcpu   pcpu what\nroot     pts/0    220.180.63.118   08:39    8.00s  0.00s  0.00s -bash\nroot     pts/1    220.180.63.118   08:39    1:19m  3.57s  3.57s top\n\n[root@xiaoshaozi ~]# who\nroot     pts/0        2024-01-09 08:39 (220.180.63.118)\nroot     pts/1        2024-01-09 08:39 (220.180.63.118)\n\n\n\n第一行其实和top命令的第一行非常类似，主要显示了系统当前时间，开机多久（up），有多少用户登陆（users），1分钟、5分钟、15分钟前的平均负载（load average）。\n第二行是项目的说明，第三行开始每行代表一个用户。这些项目是：\nuser：登陆的用户名；\ntty：登陆终端；\nfrom：从哪个ip地址登陆；\nlogin@：登陆时间；\nidle：用户闲置时间；\njcpu：指的是和该终端连接的所有进程占用的cpu运算时间。这个时间里并不包括过去的后台作业时间，但却包括当前正在运行的后台作业所占用的时间；\npcpu：是指当前进程所占用的cpu运算时间；\nwhat：当前正在运行的命令。\n\n\n\n# uptime命令\n\nuptime命令的作用就是显示系统的启动时间和平均负载，也就是top命令的第一行。\n\n其实w命令也能看到这一行的数据，具体原意使用哪个命令看个人习惯。\n\n[root@xiaoshaozi ~]# uptime\n 10:09:07 up 3 days, 20:34,  2 users,  load average: 0.08, 0.06, 0.11\n\n\n\n\n# 查看系统与内核相关信息\n\n我们使用uname命令查看内核的相关信息\n\n[root@localhost ~]# uname [选项]\n选项：\n    -a：查看系统所有相关信息；\n    -r：查看内核版本；\n    -s：查看内核名称。\n    -m：查看cpu架构\n\n\n如果我们想要判断当前系统的位数，可以通过file命令来判断系统文件（主要是系统命令）的位数来推断系统的位数。\n\n[root@xiaoshaozi ~]#  file /bin/ls\n/bin/ls: elf 64-bit lsb executable, x86-64, version 1 (sysv), dynamically linked (uses shared libs), for gnu/linux 2.6.32, buildid[sha1]=ceaf496f3aec08afced234f4f36330d3d13a657b, stripped\n\n\n如果我们想要查询当前linux系统的发行版本，可以使用“lsb_release -a”命令查看，\n\n[root@xiaoshaozi ~]# lsb_release -a\nlsb version:    :core-4.1-amd64:core-4.1-noarch\ndistributor id: centos\ndescription:    centos linux release 7.6.1810 (core) \nrelease:        7.6.1810\ncodename:       core\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170477919e4},{title:"SSH 三步解决免密登录",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.html",relativePath:"zs-use/linux/常见问题/ssh免密登录.md",key:"v-b3d34a96",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.html",headers:[{level:2,title:"1.客户端生成公私钥",slug:"_1-客户端生成公私钥",normalizedTitle:"1.客户端生成公私钥",charIndex:19},{level:2,title:"2.上传公钥到服务器",slug:"_2-上传公钥到服务器",normalizedTitle:"2.上传公钥到服务器",charIndex:33},{level:2,title:"3.测试免密登录",slug:"_3-测试免密登录",normalizedTitle:"3.测试免密登录",charIndex:47},{level:2,title:"4.上传文件到服务器",slug:"_4-上传文件到服务器",normalizedTitle:"4.上传文件到服务器",charIndex:457},{level:2,title:"常见错误",slug:"常见错误",normalizedTitle:"常见错误",charIndex:560},{level:3,title:"无法上传秘钥",slug:"无法上传秘钥",normalizedTitle:"无法上传秘钥",charIndex:569}],lastUpdated:"2024年2月22日星期四晚上9点28分",lastUpdatedTimestamp:1708608517e3,headersStr:"1.客户端生成公私钥 2.上传公钥到服务器 3.测试免密登录 4.上传文件到服务器 常见错误 无法上传秘钥",content:'# SSH 三步解决免密登录\n\n * 1.客户端生成公私钥\n * 2.上传公钥到服务器\n * 3.测试免密登录\n\n\n# 1.客户端生成公私钥\n\n本地客户端生成公私钥：（一路回车默认即可）\n\nssh-keygen\n\n\n上面这个命令会在用户目录.ssh文件夹下创建公私钥\n\ncd ~/.ssh\n\n\nls\n\n\n下创建两个密钥：\n\n 1. id_rsa （私钥）\n 2. id_rsa.pub (公钥)\n\n\n# 2.上传公钥到服务器\n\n上传公钥到服务器\n\nssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.1.101 -p 10022\n\n\n上面这条命令是写到服务器上的ssh目录下去了\n\ncd ~/.ssh\n\n\nvim authorized_keys\n\n\n可以看到客户端写入到服务器的 id_rsa.pub （公钥）内容。\n\n\n# 3.测试免密登录\n\n客户端通过ssh连接远程服务器，就可以免密登录了。\n\nssh root@192.168.1.101 -p 10022\n\n\n\n# 4.上传文件到服务器\n\n使用scp命令\n\nscp -P 10022 -r "./dist" xiaoshaozi@192.168.1.101:/home/xiaoshaozi/workspace\n\n\n\n# 常见错误\n\n\n# 无法上传秘钥\n\n> 上传报错\n\nmiyufeng@MacBook-Pro .ssh % ssh-copy-id -i ~/.ssh/linux_106_rsa_ssh.pub root@106.14.41.60\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/Users/miyufeng/.ssh/linux_106_rsa_ssh.pub"\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n\n/usr/bin/ssh-copy-id: ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nERROR: @    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\nERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nERROR: IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nERROR: Someone could be eavesdropping on you right now (man-in-the-middle attack)!\nERROR: It is also possible that a host key has just been changed.\nERROR: The fingerprint for the ECDSA key sent by the remote host is\nERROR: SHA256:kXtnmnqUFcE/btiDu5sFkCInUpwU2dgLTPyuyBtxUsw.\nERROR: Please contact your system administrator.\nERROR: Add correct host key in /Users/miyufeng/.ssh/known_hosts to get rid of this message.\nERROR: Offending ECDSA key in /Users/miyufeng/.ssh/known_hosts:1\nERROR: ECDSA host key for 106.14.41.60 has changed and you have requested strict checking.\nERROR: Host key verification failed.\n\nmiyufeng@MacBook-Pro .ssh % ssh-copy-id -i ~/.ssh/linux_106_rsa_ssh.pub root@106.14.41.60 -p 22\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/Users/miyufeng/.ssh/linux_106_rsa_ssh.pub"\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n\n/usr/bin/ssh-copy-id: ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nERROR: @    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\nERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nERROR: IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nERROR: Someone could be eavesdropping on you right now (man-in-the-middle attack)!\nERROR: It is also possible that a host key has just been changed.\nERROR: The fingerprint for the ECDSA key sent by the remote host is\nERROR: SHA256:kXtnmnqUFcE/btiDu5sFkCInUpwU2dgLTPyuyBtxUsw.\nERROR: Please contact your system administrator.\nERROR: Add correct host key in /Users/miyufeng/.ssh/known_hosts to get rid of this message.\nERROR: Offending ECDSA key in /Users/miyufeng/.ssh/known_hosts:1\nERROR: ECDSA host key for 106.14.41.60 has changed and you have requested strict checking.\nERROR: Host key verification failed.\n\n\n解决方法一： 清除本地缓存证书\n\n执行 ssh-keygen -R IP地址\n\n**解决方法二：**在.ssh/known_hosts中删除对应ip\n\n执行vi .ssh/known_hosts 找到并删除',normalizedContent:'# ssh 三步解决免密登录\n\n * 1.客户端生成公私钥\n * 2.上传公钥到服务器\n * 3.测试免密登录\n\n\n# 1.客户端生成公私钥\n\n本地客户端生成公私钥：（一路回车默认即可）\n\nssh-keygen\n\n\n上面这个命令会在用户目录.ssh文件夹下创建公私钥\n\ncd ~/.ssh\n\n\nls\n\n\n下创建两个密钥：\n\n 1. id_rsa （私钥）\n 2. id_rsa.pub (公钥)\n\n\n# 2.上传公钥到服务器\n\n上传公钥到服务器\n\nssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.1.101 -p 10022\n\n\n上面这条命令是写到服务器上的ssh目录下去了\n\ncd ~/.ssh\n\n\nvim authorized_keys\n\n\n可以看到客户端写入到服务器的 id_rsa.pub （公钥）内容。\n\n\n# 3.测试免密登录\n\n客户端通过ssh连接远程服务器，就可以免密登录了。\n\nssh root@192.168.1.101 -p 10022\n\n\n\n# 4.上传文件到服务器\n\n使用scp命令\n\nscp -p 10022 -r "./dist" xiaoshaozi@192.168.1.101:/home/xiaoshaozi/workspace\n\n\n\n# 常见错误\n\n\n# 无法上传秘钥\n\n> 上传报错\n\nmiyufeng@macbook-pro .ssh % ssh-copy-id -i ~/.ssh/linux_106_rsa_ssh.pub root@106.14.41.60\n/usr/bin/ssh-copy-id: info: source of key(s) to be installed: "/users/miyufeng/.ssh/linux_106_rsa_ssh.pub"\n/usr/bin/ssh-copy-id: info: attempting to log in with the new key(s), to filter out any that are already installed\n\n/usr/bin/ssh-copy-id: error: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nerror: @    warning: remote host identification has changed!     @\nerror: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nerror: it is possible that someone is doing something nasty!\nerror: someone could be eavesdropping on you right now (man-in-the-middle attack)!\nerror: it is also possible that a host key has just been changed.\nerror: the fingerprint for the ecdsa key sent by the remote host is\nerror: sha256:kxtnmnqufce/btidu5sfkcinupwu2dgltpyuybtxusw.\nerror: please contact your system administrator.\nerror: add correct host key in /users/miyufeng/.ssh/known_hosts to get rid of this message.\nerror: offending ecdsa key in /users/miyufeng/.ssh/known_hosts:1\nerror: ecdsa host key for 106.14.41.60 has changed and you have requested strict checking.\nerror: host key verification failed.\n\nmiyufeng@macbook-pro .ssh % ssh-copy-id -i ~/.ssh/linux_106_rsa_ssh.pub root@106.14.41.60 -p 22\n/usr/bin/ssh-copy-id: info: source of key(s) to be installed: "/users/miyufeng/.ssh/linux_106_rsa_ssh.pub"\n/usr/bin/ssh-copy-id: info: attempting to log in with the new key(s), to filter out any that are already installed\n\n/usr/bin/ssh-copy-id: error: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nerror: @    warning: remote host identification has changed!     @\nerror: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nerror: it is possible that someone is doing something nasty!\nerror: someone could be eavesdropping on you right now (man-in-the-middle attack)!\nerror: it is also possible that a host key has just been changed.\nerror: the fingerprint for the ecdsa key sent by the remote host is\nerror: sha256:kxtnmnqufce/btidu5sfkcinupwu2dgltpyuybtxusw.\nerror: please contact your system administrator.\nerror: add correct host key in /users/miyufeng/.ssh/known_hosts to get rid of this message.\nerror: offending ecdsa key in /users/miyufeng/.ssh/known_hosts:1\nerror: ecdsa host key for 106.14.41.60 has changed and you have requested strict checking.\nerror: host key verification failed.\n\n\n解决方法一： 清除本地缓存证书\n\n执行 ssh-keygen -r ip地址\n\n**解决方法二：**在.ssh/known_hosts中删除对应ip\n\n执行vi .ssh/known_hosts 找到并删除',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1701748296e3},{title:"命令--13.时间日期",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--13.%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.html",relativePath:"zs-use/linux/基本使用/命令--13.时间日期.md",key:"v-40ce9bc1",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4--13.%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.html",headers:[{level:2,title:"时区设置",slug:"时区设置",normalizedTitle:"时区设置",charIndex:18},{level:3,title:"图形化设置",slug:"图形化设置",normalizedTitle:"图形化设置",charIndex:477},{level:3,title:"tzselect",slug:"tzselect",normalizedTitle:"tzselect",charIndex:753},{level:3,title:"timedatectl",slug:"timedatectl",normalizedTitle:"timedatectl",charIndex:1178},{level:3,title:"cp文件设置时区",slug:"cp文件设置时区",normalizedTitle:"cp文件设置时区",charIndex:1513},{level:3,title:"vim修改时区文件",slug:"vim修改时区文件",normalizedTitle:"vim修改时区文件",charIndex:1656},{level:2,title:"时间命令",slug:"时间命令",normalizedTitle:"时间命令",charIndex:1816},{level:3,title:"1、date命令（重点）",slug:"_1、date命令-重点",normalizedTitle:"1、date命令（重点）",charIndex:1825},{level:3,title:"2、hwclock命令",slug:"_2、hwclock命令",normalizedTitle:"2、hwclock命令",charIndex:7295},{level:3,title:"3、timedatectl命令",slug:"_3、timedatectl命令",normalizedTitle:"3、timedatectl命令",charIndex:7971},{level:3,title:"4、cal命令（了解）",slug:"_4、cal命令-了解",normalizedTitle:"4、cal命令（了解）",charIndex:8675},{level:3,title:"5、tzselector（了解）",slug:"_5、tzselector-了解",normalizedTitle:"5、tzselector（了解）",charIndex:9044},{level:3,title:"综合应用",slug:"综合应用",normalizedTitle:"综合应用",charIndex:9218},{level:2,title:"时间同步NTP",slug:"时间同步ntp",normalizedTitle:"时间同步ntp",charIndex:9495},{level:3,title:"1、了解时间同步的重要性",slug:"_1、了解时间同步的重要性",normalizedTitle:"1、了解时间同步的重要性",charIndex:9507},{level:3,title:"2、了解时间同步服务器",slug:"_2、了解时间同步服务器",normalizedTitle:"2、了解时间同步服务器",charIndex:9725},{level:3,title:"3、chrony如何同步自己系统时间",slug:"_3、chrony如何同步自己系统时间",normalizedTitle:"3、chrony如何同步自己系统时间",charIndex:9790},{level:3,title:"4、chrony搭建时间同步服务",slug:"_4、chrony搭建时间同步服务",normalizedTitle:"4、chrony搭建时间同步服务",charIndex:10202},{level:3,title:"5、windows开启ntp服务功能",slug:"_5、windows开启ntp服务功能",normalizedTitle:"5、windows开启ntp服务功能",charIndex:11876},{level:3,title:"6、ntp工具",slug:"_6、ntp工具",normalizedTitle:"6、ntp工具",charIndex:13066},{level:2,title:"chrony和ntp",slug:"chrony和ntp",normalizedTitle:"chrony和ntp",charIndex:10348},{level:3,title:"chrony和ntp的区别",slug:"chrony和ntp的区别",normalizedTitle:"chrony和ntp的区别",charIndex:17545},{level:3,title:"chrony的组成与端口说明",slug:"chrony的组成与端口说明",normalizedTitle:"chrony的组成与端口说明",charIndex:18973},{level:3,title:"chrony安装和命令管理说明",slug:"chrony安装和命令管理说明",normalizedTitle:"chrony安装和命令管理说明",charIndex:19874},{level:3,title:"chrony常用配置参数说明",slug:"chrony常用配置参数说明",normalizedTitle:"chrony常用配置参数说明",charIndex:20597},{level:3,title:"chronyd常用命令说明",slug:"chronyd常用命令说明",normalizedTitle:"chronyd常用命令说明",charIndex:20999},{level:2,title:"内网chrony配置时间同步",slug:"内网chrony配置时间同步",normalizedTitle:"内网chrony配置时间同步",charIndex:24664},{level:3,title:"内网环境服务端配置",slug:"内网环境服务端配置",normalizedTitle:"内网环境服务端配置",charIndex:24683},{level:3,title:"时区确定",slug:"时区确定",normalizedTitle:"时区确定",charIndex:25112},{level:3,title:"安装chrony",slug:"安装chrony",normalizedTitle:"安装chrony",charIndex:25907},{level:3,title:"服务端配置",slug:"服务端配置",normalizedTitle:"服务端配置",charIndex:24687},{level:3,title:"内网客户端配置",slug:"内网客户端配置",normalizedTitle:"内网客户端配置",charIndex:31422},{level:2,title:"外网chrony配置时间同步",slug:"外网chrony配置时间同步",normalizedTitle:"外网chrony配置时间同步",charIndex:42270},{level:3,title:"外网环境chrony服务端配置",slug:"外网环境chrony服务端配置",normalizedTitle:"外网环境chrony服务端配置",charIndex:42289},{level:3,title:"外网客户端连接",slug:"外网客户端连接",normalizedTitle:"外网客户端连接",charIndex:52468},{level:2,title:"[](https://blog.csdn.net/cuichongxin/article/details/123178318)时间不同步可能的原因",slug:"时间不同步可能的原因",normalizedTitle:'<a href="https://blog.csdn.net/cuichongxin/article/details/123178318" target="_blank" rel="noopener noreferrer"><outboundlink/></a>时间不同步可能的原因',charIndex:null},{level:3,title:"1.chrony服务端、客户端 版本是否一致和服务是否正常【chrony各版本之间差异很大，确保版本一致】",slug:"_1-chrony服务端、客户端-版本是否一致和服务是否正常【chrony各版本之间差异很大-确保版本一致】",normalizedTitle:"1.chrony服务端、客户端 版本是否一致和服务是否正常【chrony各版本之间差异很大，确保版本一致】",charIndex:62956},{level:3,title:"2、服务端防火墙原因",slug:"_2、服务端防火墙原因",normalizedTitle:"2、服务端防火墙原因",charIndex:63472},{level:3,title:"3、检查服务端和客户端是否能互通",slug:"_3、检查服务端和客户端是否能互通",normalizedTitle:"3、检查服务端和客户端是否能互通",charIndex:63600},{level:3,title:"4、看看时区是否正确",slug:"_4、看看时区是否正确",normalizedTitle:"4、看看时区是否正确",charIndex:63661},{level:3,title:"5、间隔2小时左右，chrony服务端机器ntp不同步",slug:"_5、间隔2小时左右-chrony服务端机器ntp不同步",normalizedTitle:"5、间隔2小时左右，chrony服务端机器ntp不同步",charIndex:63996},{level:3,title:"6、更换为ntp方式连接",slug:"_6、更换为ntp方式连接",normalizedTitle:"6、更换为ntp方式连接",charIndex:65225},{level:3,title:"7、配置文件server和allow",slug:"_7、配置文件server和allow",normalizedTitle:"7、配置文件server和allow",charIndex:65380},{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:7543},{level:2,title:"[](https://blog.csdn.net/cuichongxin/article/details/123178318)timedatectl说明",slug:"timedatectl说明",normalizedTitle:'<a href="https://blog.csdn.net/cuichongxin/article/details/123178318" target="_blank" rel="noopener noreferrer"><outboundlink/></a>timedatectl说明',charIndex:null},{level:3,title:"查看系统时间timedatectl",slug:"查看系统时间timedatectl",normalizedTitle:"查看系统时间timedatectl",charIndex:66998},{level:3,title:"常见用法",slug:"常见用法",normalizedTitle:"常见用法",charIndex:67495},{level:3,title:"[](https://blog.csdn.net/cuichongxin/article/details/123178318)使用示例",slug:"使用示例",normalizedTitle:'<a href="https://blog.csdn.net/cuichongxin/article/details/123178318" target="_blank" rel="noopener noreferrer"><outboundlink/></a>使用示例',charIndex:null}],lastUpdated:"2024年1月5日星期五下午2点08分",lastUpdatedTimestamp:1704434924e3,headersStr:"时区设置 图形化设置 tzselect timedatectl cp文件设置时区 vim修改时区文件 时间命令 1、date命令（重点） 2、hwclock命令 3、timedatectl命令 4、cal命令（了解） 5、tzselector（了解） 综合应用 时间同步NTP 1、了解时间同步的重要性 2、了解时间同步服务器 3、chrony如何同步自己系统时间 4、chrony搭建时间同步服务 5、windows开启ntp服务功能 6、ntp工具 chrony和ntp chrony和ntp的区别 chrony的组成与端口说明 chrony安装和命令管理说明 chrony常用配置参数说明 chronyd常用命令说明 内网chrony配置时间同步 内网环境服务端配置 时区确定 安装chrony 服务端配置 内网客户端配置 外网chrony配置时间同步 外网环境chrony服务端配置 外网客户端连接 [](https://blog.csdn.net/cuichongxin/article/details/123178318)时间不同步可能的原因 1.chrony服务端、客户端 版本是否一致和服务是否正常【chrony各版本之间差异很大，确保版本一致】 2、服务端防火墙原因 3、检查服务端和客户端是否能互通 4、看看时区是否正确 5、间隔2小时左右，chrony服务端机器ntp不同步 6、更换为ntp方式连接 7、配置文件server和allow 说明 [](https://blog.csdn.net/cuichongxin/article/details/123178318)timedatectl说明 查看系统时间timedatectl 常见用法 [](https://blog.csdn.net/cuichongxin/article/details/123178318)使用示例",content:"# 命令--13.时间日期\n\n\n# 时区设置\n\n在Linux系统中，默认使用的是UTC时间。\n\n即使在安装系统的时候，选择的时区是亚洲上海，Linux默认的BIOS时间（也称：硬件时间）也是UTC时间。 在重启之后，系统时间会和硬件时间同步，如果两者不一致，会以硬件时间为标准进行时间的校准。所以，之前设置的时区和时间就失效了 北京时间比UTC时间早8小时，以2023年1月1日0000UTC为例，UTC时间是零点，北京时间为2023年1月1日早上8点整。\n\n# 查看当前系统时间\ndate\n\n# 查看当前硬件时间\nhwclock或clock\n\n#查看当前系统时区\ndate -R\n\n\n\n[root@jysp jysp]# date \n2023年 12月 15日 星期五 09:14:28 CST\n\n[root@jysp jysp]# hwclock\n2023年12月15日 星期五 09时12分57秒  -0.179492 秒\n\n[jysp@jysp ~]$ date -R\nFri, 15 Dec 2023 09:12:23 +0800\n\n\n\n\n# 图形化设置\n\nCentOS7如何图形化设置时区？\n\n这与图形化设置网络、设置主机名、设置新用户等，基本相同。过程简单，对于初学者比较友好。\n\n# 1.进入设置\n\n点击【应用程序】->【系统工具】->【设置】选项\n\n\n\n# 2.找到时区\n\n点击【详细信息】->【日期和时间】\n\n\n\n# 3.操作认证\n\n点击【解锁】并输入密码进行【认证】\n\nCentos7不需要认证，而Centos8和ubuntu 修改时区时需要认证。按要求认证即可。\n\n# 4.自动设置\n\n开启【自动设置日期和时间】、【自动设置时区】选项\n\n根据情况，可决定是否开启自动设置。\n\n\n# tzselect\n\n用tzselect设置时区采用人机交互的形式，十分方便。\n\n命令中第一个字母t是时间time的简写; 命令中第二个字母z是区域zone的简写。\n\n使用tzselect 设置时区，按照提示，一步步进行，没有难度。 按照提示一路选择: 5) asia —-> 9) china ——> 1) beijing 但成功设置后，会提示把时区变量作为全局变量添加到profile中\n\n\n\n1.可以采用命令追加形式\n\necho “export TZ='Asia/Shanghai'”  >>/etc/profile\n\n\n2.可以采用vim 打开文件，在最后一行添加内容\n\nexport  TZ='Asia/Shanghai'\n\n\n保存，退出 完成对文件的修改后，并不能马上更改时区，仍然需要执行命令 source /etc/profile 当执行source命令时，系统会退出当前bash，并重新登录。 再重新查看时间与时区，已更新。\n\n\n# timedatectl\n\ntimedatectl是一个命令行工具，它允许你查看或者修改系统的时间和日期。它在所有现代的基于 system 的 linux 系统中都可以使用。 timedatectl 打印当前时区信息 如果不带参数直接运行，会正常打印出时间信息。\n\ntimedatectl 查看可以设置的时区\n\ntimedatectl list-timezones\n\n\n带上list-timezones参数运行下，看到如下的结果：\n\n上面的结果展示不全， 往下翻找可以看到 Asia/Shanghai 这一行。\n\n不想全部看完，可按q退出查看。\n\ntimedatectl 设置时区\n\ntimedatectl set-timezone Asia/Shanghai\n\n\n\n# cp文件设置时区\n\ncp文件设置时区\n\n    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n\n这种方式也可以设置时间，但是还是建议使用timedatectl工具。 因为timedatectl工具屏蔽了各个linux的差异性。vim修改时区文件\n\n\n# vim修改时区文件\n\n我们如何确定自己的时区是正确的？ 时区文件默认的是：/etc/localtime 下面命令会把我们系统的时间还有时区显示出来\n\n\n\n原文链接：https://blog.csdn.net/qq_36142959/article/details/132719285\n\n\n# 时间命令\n\n\n# 1、date命令（重点）\n\ndate :打印或者设置当前系统日期和时间\n\ndate --help 自己先求帮助\n\n用法：date [选项]... [+格式]\n　或：date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]\nDisplay the current time in the given FORMAT, or set the system date.\n \nMandatory arguments to long options are mandatory for short options too.\n  -d, --date=STRING         display time described by STRING, not 'now'\n  -f, --file=DATEFILE       like --date once for each line of DATEFILE\n  -I[TIMESPEC], --iso-8601[=TIMESPEC]  output date/time in ISO 8601 format.\n                            TIMESPEC='date' for date only (the default),\n                            'hours', 'minutes', 'seconds', or 'ns' for date\n                            and time to the indicated precision.\n  -r, --reference=文件          显示文件指定文件的最后修改时间\n  -R, --rfc-2822                以RFC 2822格式输出日期和时间\n                                例如：2006年8月7日，星期一 12:34:56 -0600\n      --rfc-3339=TIMESPEC   output date and time in RFC 3339 format.\n                            TIMESPEC='date', 'seconds', or 'ns' for\n                            date and time to the indicated precision.\n                            Date and time components are separated by\n                            a single space: 2006-08-07 12:34:56-06:00\n  -s, --set=STRING          set time described by STRING\n  -u, --utc, --universal    print or set Coordinated Universal Time (UTC)\n      --help            显示此帮助信息并退出\n      --version         显示版本信息并退出\n\n给定的格式FORMAT 控制着输出，解释序列如下：\n\n  %%    一个文字的 %\n  %a    当前locale 的星期名缩写(例如： 日，代表星期日)\n  %A    当前locale 的星期名全称 (如：星期日)\n  %b    当前locale 的月名缩写 (如：一，代表一月)\n  %B    当前locale 的月名全称 (如：一月)\n  %c    当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)\n  %C    世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)\n  %d    按月计的日期(例如：01)\n  %D    按月计的日期；等于%m/%d/%y\n  %e    按月计的日期，添加空格，等于%_d\n  %F    完整日期格式，等价于 %Y-%m-%d\n  %g    ISO-8601 格式年份的最后两位 (参见%G)\n  %G    ISO-8601 格式年份 (参见%V)，一般只和 %V 结合使用\n  %h    等于%b\n  %H    小时(00-23)\n  %I    小时(00-12)\n  %j    按年计的日期(001-366)\n  %k   hour, space padded ( 0..23); same as %_H\n  %l   hour, space padded ( 1..12); same as %_I\n  %m   month (01..12)\n  %M   minute (00..59)\n  %n    换行\n  %N    纳秒(000000000-999999999)\n  %p    当前locale 下的\"上午\"或者\"下午\"，未知时输出为空\n  %P    与%p 类似，但是输出小写字母\n  %r    当前locale 下的 12 小时时钟时间 (如：11:11:04 下午)\n  %R    24 小时时间的时和分，等价于 %H:%M\n  %s    自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数\n  %S    秒(00-60)\n  %t    输出制表符 Tab\n  %T    时间，等于%H:%M:%S\n  %u    星期，1 代表星期一\n  %U    一年中的第几周，以周日为每星期第一天(00-53)\n  %V    ISO-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53)\n  %w    一星期中的第几日(0-6)，0 代表周一\n  %W    一年中的第几周，以周一为每星期第一天(00-53)\n  %x    当前locale 下的日期描述 (如：12/31/99)\n  %X    当前locale 下的时间描述 (如：23:13:48)\n  %y    年份最后两位数位 (00-99)\n  %Y    年份\n  %z +hhmm              数字时区(例如，-0400)\n  %:z +hh:mm            数字时区(例如，-04:00)\n  %::z +hh:mm:ss        数字时区(例如，-04:00:00)\n  %:::z                 数字时区带有必要的精度 (例如，-04，+05:30)\n  %Z                    按字母表排序的时区缩写 (例如，EDT)\n\n默认情况下，日期的数字区域以0 填充。\nThe following optional flags may follow '%':\n\n  -  (hyphen) do not pad the field\n  _  (underscore) pad with spaces\n  0  (zero) pad with zeros\n  ^  use upper case if possible\n  #  use opposite case if possible\n\n在任何标记之后还允许一个可选的域宽度指定，它是一个十进制数字。\n作为一个可选的修饰声明，它可以是E，在可能的情况下使用本地环境关联的\n表示方式；或者是O，在可能的情况下使用本地环境关联的数字符号。\n\nExamples:\nConvert seconds since the epoch (1970-01-01 UTC) to a date\n  $ date --date='@2147483647'\n\nShow the time on the west coast of the US (use tzselect(1) to find TZ)\n  $ TZ='America/Los_Angeles' date\n\nShow the local time for 9AM next Friday on the west coast of the US\n  $ date --date='TZ=\"America/Los_Angeles\" 09:00 next Fri'\n\nGNU coreutils online help: <http://www.gnu.org/software/coreutils/>\n请向<http://translationproject.org/team/zh_CN.html> 报告date 的翻译错误\n要获取完整文档，请运行：info coreutils 'date invocation'\n\n\n# ① 打印日期或时间\n\n常用格式：\n    获取系统当前时间\n    yyyy-mm-dd\n\t    date +%F\n    \tdate +%Y-%m-%d\n\n    yyyy-mm-dd HH:mm:ss\n\t    date +'%F %T'\n    \tdate +'%Y-%m-%d %H:%M:%S'\n\n\t获取非当前时间 days,months,years\n\tyyyy-mm-dd\n\t\tdate -d '+3days' +'%F %T'\n\t\tdate --date='3days' +'%F %T'\n\t\t\n\t\tdate -d '-3days' +'%F %T'\n\t\tdate -d '3days ago' +'%F %T'\n\t\tdate --date='-3days' +'%F %T'\n\n\n\n打印系统当前日期或时间\n[root@heima ~]# date\n[root@heima ~]# date +%D\n[root@heima ~]# date +%F\n[root@heima ~]# date +%Y-%m-%d\n[root@heima ~]# date +%T\n[root@heima ~]# date +%X\n[root@heima ~]# date +'%F %X'\n[root@heima ~]# date +%c\n打印系统非当前日期或时间\n[root@heima ~]# date -d '+3days' +%F\n[root@heima ~]# date -d '-3days' +%F\n[root@heima ~]# date -d '3days' +%F\n[root@heima ~]# date -d '3days ago' +%F\n[root@heima ~]# date --date='30days' +%F\n\n\n[jysp@jysp ~]$ date +'%Y %m %d'\n2023 11 01\n[jysp@jysp ~]$ date +%T\n10:32:06\n[jysp@jysp ~]$ date +%X\n10时32分14秒\n[jysp@jysp ~]$ date +%F %X\ndate: 额外的操作数 \"%X\"\nTry 'date --help' for more information.\n[jysp@jysp ~]$ date +'%F %X'\n2023-11-01 10时32分30秒\n[jysp@jysp ~]$ date +%c\n2023年11月01日 星期三 10时33分10秒\n[jysp@jysp ~]$ date -d\ndate：选项需要一个参数 -- d\nTry 'date --help' for more information.\n[jysp@jysp ~]$ date -d '+3days' +%F\n2023-11-04\n[jysp@jysp ~]$ date -d '+3days' +%c\n2023年11月04日 星期六 10时34分06秒\n[jysp@jysp ~]$ date -d '-3days' +%F\n2023-10-29\n[jysp@jysp ~]$ date -d '3days ago' +%F\n2023-10-29\n[jysp@jysp ~]$ date -d '3days' +%F\n2023-11-04\n[jysp@jysp ~]$ date --date='30days' +%F\n2023-12-01\n[jysp@jysp ~]$ \n\n\n# ② 设置系统日期或时间\n\n选项：-s 设置当前系统时间，只有root权限才能设置，其他只能查看。\ndate -s 20200523 设置成20100523，这样会把具体时间设置成空00:00:00\ndate -s \"01:01:01 2020-05-2\" 这样可以设置全部时间\ndate -s \"01:01:01 20200523\" 这样可以设置全部时间\ndate -s \"2020-05-23 01:01:01\" 这样可以设置全部时间\ndate -s \"20200523 01:01:01\" 这样可以设置全部时间\n\n注意：\n红帽8，设置为过去的时间，过段时间会被重置为当前时间\n\n\n\n# 2、hwclock命令\n\n# ③ 系统时间同步硬件时间\n\nhwclock :查看并且设置硬件时间\n\n选项：\n# 设置系统时间：从硬件时间同步到系统时间\n-s, --hctosys set the system time from the RTC\n# 设置硬件时间：从系统时间同步到硬件时间\n-w, --systohc set the RTC from the system time\n# 查看硬件时间\n-l, --localtime the RTC timescale is Local\n\n\n举例说明：\n[root@heima ~]# hwclock --hctosys\n[root@heima ~]# hwclock\n2019-06-23 18:44:10.377920+08:00\n\n[root@heima ~]# date\n2019年 06月 23日 星期日 18:44:21 CST\n[root@heima ~]# date -s \"20221010 12:12:12\"\n2022年 10月 10日 星期一 12:12:12 CST\n[root@heima ~]# date\n2022年 10月 10日 星期一 12:12:14 CST\n[root@heima ~]# hwclock\n2019-06-23 18:45:01.368135+08:00\n[root@heima ~]# hwclock --systohc\n[root@heima ~]# hwclock\n2022-10-10 12:12:43.179274+08:00\n\n\n\n# 3、timedatectl命令\n\ntimedatectl\n\n查看当前时间、时区、NTP服务状态 设置系统时间、硬件时间、时区\n\n> ntp服务\n\n# 从7开始就有\ntimedatectl -h 设置和查看系统的时间和日期（设置时区以及开启或关闭ntp服务）\n\n# 查看当前时间\n[jysp@jysp ~]$ timedatectl status\n      Local time: 三 2023-11-01 10:47:08 CST\n  Universal time: 三 2023-11-01 02:47:08 UTC\n        RTC time: 三 2023-11-01 02:47:42\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n\n\n# 关闭NTP同步\ntimedatectl set-ntp no\n\n\n# 设置时间:系统时间、硬件时间\ntimedatectl set-time 2020-10-10\ntimedatectl set-time 11:11:11\ntimedatectl list-timezones\ntimedatectl set-timezone xxx\n\n\n\n# 同步当前时间\n# 6版本中\nntpdate\n\n# 8版本中\ntimedatectl set-ntp yes\ntimedatectl status\nchronyc makestep\n\n\n\n# 4、cal命令（了解）\n\ncal :查看日历\n\n用法：\n cal [选项] [[[日] 月] 年]\n\n选项：\n -1, --one        只显示当前月份(默认)\n -3, --three      显示上个月、当月和下个月\n -s, --sunday     周日作为一周第一天\n -m, --monday     周一用为一周第一天\n -j, --julian     输出儒略日\n -y, --year       输出整年\n -V, --version    显示版本信息并退出\n -h, --help       显示此帮助并退出\n\n\n\ncal 或者 cal -1 \t\t表示直接输出当前月份的日历\ncal -3 \t\t\t\t 表示输出上一个月+本月+下个月的日历\ncal -y 年份 \t\t\t表示输出某一个年份的日历\n\n\n\n# 5、tzselector（了解）\n\n用tzselect设置时区采用人机交互的形式，十分方便。\n\n命令中第一个字母t是时间time的简写; 命令中第二个字母z是区域zone的简写。\n\n使用tzselect 设置时区，按照提示，一步步进行，没有难度。 按照提示一路选择: 5) asia —-> 9) china ——> 1) beijing\n\n\n# 综合应用\n\n# ④ 应用案例\n\n> 有时候我们需要用到当前的系统时间，如何调用？比如以当前系统日期命名创建目录或文件\n\n2020-10-10.log.tar.gz\n2020-10-11.log.tar.gz\n$()：括号里面的命令优先执行 \tdate +%F \t\t2019-06-23\n`` ：引号里面的命令优先执行，不允许嵌套\n\n创建目录和文件，以当前系统日期命名\n[root@heima ~]# mkdir $(date +%F)\n[root@heima ~]# touch $(date -d '+3days' +%Y%m%d).log\n\n\n\n# 时间同步NTP\n\n\n# 1、了解时间同步的重要性\n\n由于IT系统中，准确的计时非常重要，有很多种原因需要准确计时，如\n\n在网络传输中，数据包和日志需要准确的时间戳\n\n各种应用程序中，如订单信息，交易信息等都需要准确的时间戳\n\n在Linux系统中， Network Time Protocol (NTP)，NTP协议由在用户空间中运行的守护程序实现，即ntp和chrony。\n\n> 红帽6以前使用ntp，红帽7ntp和chrony，红帽8 chrony\n\n\n# 2、了解时间同步服务器\n\n\n\n查看可以提供时间同步的服务器：\n\nhttp://www.ntp.org.cn/pool\n\n\n\n\n# 3、chrony如何同步自己系统时间\n\n> 需要联网\n\n（1）方式一：自动同步\n\n# 手动设置时间\ndate -s \"2020-10-10 10:10:10\"\n\n# 查看chrony安装包\nyum list|grep chrony\n\n# 查看软件包，配置文件位置\nrpm -qc chrony\n\n\n\n\n# 重启服务\nsystemctl restart chronyd.service\nsystemctl status chronyd.service\n\n# 修改时间，测试自动同步\ndate -s \"2020-10-10 10:10:10\"\n\n\n（2）方式二：手动临时同步\n\n临时指定ntp服务器同步\n\nsystemctl status chronyd.service\nsystemctl stop chronyd.service\n\nchronyd -q \"server cn.ntp.org.cn iburst\"\n\n\n\n# 4、chrony搭建时间同步服务\n\n# ㈠ 了解RHEL7和RHEL8区别\n\n * 在RHEL7中，用户可以在ntp和chrony之间进行选择，以确保准确的计时。\n\n * 在RHEL8中，不再支持ntp,使用chronyd守护进程来实现NTP,默认已启用,从chrony软件包获得。\n\n * chrony和ntp之间的差异\n   \n   * ntpd服务器在控制客户端访问方式上默认响应来自任何地址的请求，相对不安全chronyd默认不允许访问，要想提供时间同步服务端需要在allow中指定\n   \n   * ntpd 和 chronyd 在系统时钟校正方面的默认行为也不同。\n   \n   * 客户端同步方式有差异\n\n * 还有很多不同可以参考官方网站：https://chrony.tuxfamily.org/comparison.html\n\n总结：\n\nchrony在各种条件下表现良好，包括间歇性网络连接，高度拥挤的网络，温度变化（普通计算机时钟对温度敏感），以及不能连续运行或在虚拟机上运行的系统。\n\n# ㈡ RHEL8配置时间同步服务\n\n 1. 关闭防火墙和selinux（实验）\n\n 2. 配置软件仓库\n\n 3. 软件三部曲\n    \n    * 安装软件\n    \n    * 确认软件是否成功安装\n    \n    * 查看软件的文件列表（配置文件、程序本身、man手册）\n\n 4. 了解配置文件（man 5 xxx.conf）\n\n 5. 根据需求通过修改配置文件来完成服务搭建\n\n 6. 启动服务，开机自启动\n\n 7. 测试验证\n\n * 时间同步服务器端\n   \n   # 防火墙\n   systemctl status firewalld.service\n   # selinux\n   getenforce\n   # 软件仓库\n   dnf repolist\n   # 查看软件包\n   rpm -q chrony\n   # 查看配置文件\n   rpm -ql chrony\n   \n   \n   \n   # vim /etc/chrony.conf\n   #自己本身向谁来同步时间\n   pool cn.ntp.org.cn iburst\n   #允许哪些客户端来同步,192.168.159网段的ip/子网掩码24位\n   allow 192.168.159.0/24\n   \n   重启服务\n   systemctl restart chronyd.service\n   \n   查看服务状态\n   systemctl status chronyd.service\n   \n   查看udp端口状态\n   netstat -nlup|grep chronyd\n   \n\n * 客户端\n   \n   修改配置文件\n   \n   \n   \n   重启服务\n   systemctl restart chronyd.service\n   \n   查看当前客户端使用的源\n   chronyc sources\n   chronyc sourcestats\n   chronyc sources -v\n   \n   [root@client ~]# chronyc sources\n   210 Number of sources = 1\n   MS Name/IP address Stratum Poll Reach LastRx Last sample\n   ===============================================================================\n   ^? 192.168.159.100 3 6 37 5 +10766h[+10766h] +/- 3872us\n   \n   手动同步时间，官方不建议使用\n   [root@client ~]# chronyc makestep\n   200 OK\n   \n\n> *代办当前在使用的源\n\n\n\n\n# 5、windows开启ntp服务功能\n\n（1）打开搜索注册表或win+R 输入regedit\n\n\n\n\n\n（2）设定授权时间服务器\n\n注册表路径： HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Config\n\n修改 AnnounceFlags 数a改为 5\n\n\n\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\n\n修改 Enabled 数值0修改为 1\n\n\n\n（3）搜索服务或 win+R 输入services.msc打开服务面板\n\n\n\n\n\n（4）启动服务\n\n\n\n\n\n服务的启停，需要使用管理员运行\n\n * net start w32time\n\n * net stop w32time\n\nMicrosoft Windows [版本 10.0.19045.3693]\n(c) Microsoft Corporation。保留所有权利。\n\nC:\\WINDOWS\\system32>net start w32time\n请求的服务已经启动。\n\n请键入 NET HELPMSG 2182 以获得更多的帮助。\n\n\nC:\\WINDOWS\\system32>net stop w32time\nWindows Time 服务正在停止.\nWindows Time 服务已成功停止。\n\n\nC:\\WINDOWS\\system32>net start w32time\nWindows Time 服务正在启动 .\nWindows Time 服务已经启动成功。\n\n\n\n\n\n\n本机测试\n\nC:\\Users\\miyufeng>w32tm /stripchart /computer:127.0.0.1\n正在跟踪 127.0.0.1 [127.0.0.1:123]。\n当前时间是 2023/12/17 15:23:45。\n15:23:45, d:+00.0013197s o:+00.0004149s  [                           *                           ]\n15:23:47, d:+00.0006835s o:+00.0002398s  [                           *                           ]\n15:23:49, d:+00.0004796s o:+00.0000808s  [                           *                           ]\n\n\n（5）防火墙配置\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n（6）局域网内设备时间同步测试\n\n\n\n\n\n\n\n\n# 6、ntp工具\n\n# ntp客户端\n\n1、安装ntp和ntpdate两个rpm包。\n\n使用yum install ntp、yum install ntpdate命令执行安装操作（本次省略）\n\n2、配置ntp客户端文件【/etc/ntp.conf】中的server项, 只保留server的有效行（默认有3-4行server有效行去向公网同步时间，需注释掉）。如\n\nserver 172.29.12.120  perfer      #提供ntp-server的主机地址\nserver  172.29.120.12 perfer  (iburst）    #提供ntp-server的主机地址\n\n\n#restrict default kod nomodify notrap nopeer noquery 注释此行内容 作为ntp服务器可注释掉（取消默认不行其他主机连接同步时间）\n\nserver x.x.x.x iburst 同步时间服务ip 客户端只是配这个就可以\n\n3、启动ntpd服务、并添加至开机启动项。如\n\n启动服务\n\nsystemctl  start  ntpd        #启动ntpd服务\nsystemctl  start  ntpdate\nsystemctl enable  ntpd        #将ntpd添加到开机启动项\nsystemctl enable  ntpdate\nsystemctl is-enabled ntpd        #查看是否在开机启动项\nsystemctl is-enabled ntpdate\nsystemctl list-unit-files | grep ntp     #查看是否在开机启动项\nsystemctl status ntpd                     #查看ntpd服务的状态\n\n\n4、验证\n\n ntpq -p           #查看该主机使用的ntp-server情况和同步延时等信息；\n timedatectl      #查看ntpd服务或chronyd服务是否生效。\n                  #只有centos7、redhat7、ubuntu14等以上（含）才有该命令；\n\n\n5、其他配置（或添加时间同步的计划任务） 使用ntpdate命令也可以执行ntp时间同步，不需要ntp客户的ntpd服务。如\n\nntpdate 172.29.120.12     #向172.29.120.12的ntpserver主机同步本地系统时间。\nntpdate -u 172.29.120.12  ##同上，-u参数是可以在客户端ntpd服务启动时同时执行的命令。\n\n\n计划任务中的时间同步，同样的效果。也可以和客户端的ntpd服务同时存在。\n\ncrontab -l\n0 0 * * 0 /usr/sbin/ntpdate -u 172.29.120.12 || /usr/sbin/ntpdate -u 172.29.12.120\n\n\n\n\n查看服务状态 ntpstat ntptime timedatectl 三个命令看状态\n\n\n\nCentOS7下使用NTP遇到的问题 问题1、在CentOS7下使用NTP时，客户端ntpd服务添加到开机启动项中了，但主机系统启动后ntpd服务还是停止状态（dead），无法正常启动。 解决以上现象有两种方法 ，本人常用方法一的操作： 方法一： 1.通过命令 systemctl enable ntpd 设置NTP服务开机自启动。 2.重启虚拟机后查看 服务运行状态 systemctl status ntpd ，发现服务并没有成功启动。 3.查看chrony是否被设置为开机自启动。通过指令 systemctl is-enabled chronyd 或systemctl list-unit-files | grep chrony 查看，发现这个服务已经被设置为开机自启动所以导致NTP服务的自启动失败。 4.所以要把 chrony 的自启动去掉。执行指令 systemctl disable chronyd 。 5.重启虚拟机， 执行 systemctl status ntpd ，问题解决。 systemctl list-unit-files|grep ntpd systemctl list-unit-files|grep chrony\n\n方法二： 需要开机自启动某服务，第一个想到的当然是开机启动自定义脚本。 在Centos之前版本只要在 /etc/rc.d/rc.local 文件中加入 启动服务的命令，当虚拟机重启时就会执行该文件中的命令，服务也就启动了。但是但Centos7版本，这个文件的权限被降低了，所以当你打开这个文件时，注释中很友好的提示让你给这个文件赋权，以确保它有可执行权限。chmod +x /etc/rc.d/rc.local 。 所以只要把指令写到这个文件中，就可以在开机时启动服务或者让虚拟机做其它事情。 chmod +x /etc/rc.d/rc.local echo “systemctl start ntpd” >> !$\n\n问题2、ntpdate命令执行报错，提示ntpd服务已经存在（ntpdate：the NTP socket is in use, exiting） 报错的原因是因为客户端有ntpd服务在运行。因此需要继续执行，必须加-u参数，如 update -u 172.29.120.12\n\n\n\n问题3、启动了ntpd服务，却未执行过同步时间操作。 需要检查ntpd服务是否生效、并应用是否也生效了。如\n\n\n\n\n\n查看状态 ntpstat ntptime timedatectl\n\n\n\n1、npq -p 执行结果的参数解释\n\n\n\nntpq -p命令列出了所有作为时钟源校正过本地NTP服务器时钟上层NTP服务器的列表，每一列的含义分别如下： remote：响应请求的NTP服务器的名称（IP地址或域名），带“”的表示本地NTP服务器与该服务器同步 refid：远程NTP服务器使用的上一级ntp服务器的IP地址 st：远程NTP服务器的级别，由于NTP是层级结构，有顶端的服务器，多层的Relay Server再到客户端。所以服务器从高到低，级别可以设定为1~16级。为了减缓负荷和网络堵塞，原则上应该避免直接连接到级别为1的服务器。 t：本地NTP服务器与远程NTP服务器的通信方式。u：单播；b：广播；I：本地 when：上次成功请求后到现在的秒数 poll：本地NTP服务器与远程NTP服务器同步的时间间隔。 reach：这是一个八进制的值，用来测试衡量前八次查询是否成功和服务器连接。377表示都成功，0表示不成功 delay：网络延时，单位为微秒（μs） offset：本地NTP服务器与远程NTP服务器的时间偏移，单位为毫秒（ms）。offset越接近于0，主机与NTP服务器的时间越接近 jitter：查询偏差的分布值，用于表示远程NTP的网络延时是否稳定，单位为微秒（μs）*\n\n2、timedatectl 命令的讲解 timedatectl输出解析\n\n\n\n1.1.Local time 本地时间，初始值来自于RTC，由内核维护，系统启动之后和RTC就没有关系，通常等于RTC+时区值（如上图的本地时间=RTC+8）\n\n1.2.Universal time 系统时间永远是UTC，在应用程序使用的时候转换为本地时间\n\n1.3.RTC（real-time clock）time 指硬件时间，一般是主板上的特殊电路，专用用于记录时间，有电池供电，不受服务器和操作系统的开启关闭影响。也称作BIOS时间。 需要注意的是：当/etc/sysconfig/clock 文件中 UTC=true时， BIOS 使用UTC时间； UTC=false时， BIOS 使用本地时间。 hwclock --localtime #显示 BIOS 中实际的时间 hwclock --systohc #根据系统时间设置硬件时间\n\n1.4.Time zone 本地时区，即服务器所在的时区，在中国通常使用Asia/Shanghai timedatectl set-timezone “Asia/Shanghai” #设置时区为上海\n\n1.5.NTP enable 状态为“yes”,表示开启NTP同步。 网络时间协议，英文名称：Network Time Protocol（NTP）是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源（如石英钟，GPS等等)做同步化，它可以提供高精准度的时间校正。 timedatectl set-ntp true #开启ntp同步 timedatectl set-ntp false #禁止ntp同步\n\n1.6.NTP synchronized 为“yes”,表示NTP同步完成。\n\n1.7.RTC in local TZ 设置RTC时间，为\"no\"表示未设置 timedatectl set-local-rtc 1 #将RTC设置为本地时间 timedatectl set-local-rtc 0 #将RTC设置为UTC\n\n2.2、timedatectl常用命令 timedatectl set-time 15:58:30 #只设置时间 timedatectl set-time 20151120 #只设置日期 timedatectl set-time ‘16:10:40 2015-11-20’ #设置时间和日期2.3 相关命令\n\nrpm -qi ntp 查看版本 最新\n\ndate 系统时间 clock 硬件时间\n\ndate -s 设置系统时间 clock -w 系统时间同步到硬件时间\n\nntpdate IP 同步ntp服务器时间\n\nchkconfig --list ntpd 查看开机启动\n\nchkconfig ntpd on 开机启动\n\nntpq -p 客户端查看同步情况 *号代表同步成功 ntpstat\n\nps aux | grep ntpd 查看进程\n\nss -ntul 看进程端口 netstat -anp | grep ntpd ss -ntulp 看进程端口\n\ncrontab -l; echo \"*/60 * * * * /usr/sbin/ntpdate x.x.x.x(ntp服务器IP) >>/tmp/ntp.log 设置定时同步 crontab -l 查看计划任务\n\necho \"*/60 * * * * /usr/sbin/ntpdate x.x.x.x(ntp服务器IP) >>/tmp/ntp.log\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# chrony和ntp\n\n\n# chrony和ntp的区别\n\n * （1）chronyd做的比ntpd好的\n   * chronyd可以在时断时续访问参考时间源的环境下工作，而ntpd需要定期轮询参考时间源才能正常工作。\n   * 即使网络拥塞时间更长，chronyd也可以运行良好。\n   * chronyd通常可以更快、更准确地同步时钟。\n   * chronyd能够快速适应晶体振荡器温度变化引起的时钟频率的突然变化，而ntpd可能需要很长时间才能稳定下来。\n   * 在默认配置下，为了不影响其他正在运行的程序，chronyd从不在系统启动同步时钟之后执行时间步进。ntpd也可以配置为从不步进时间，但它必须使用不同的方法来调整时钟，这有一些缺点，包括对时钟精度的负面影响。\n   * chronyd可以在更大的范围内调整Linux系统上的时钟频率，这使得它甚至可以在时钟损坏或不稳定的机器上运行。例如，在一些虚拟机上。\n   * chronyd体积更小，占用的内存更少，而且只有在必要的时候才会唤醒CPU，这对于节能来说是更好的选择。\n * （2）chronyd能做的但ntpd做不到的\n   * chronyd提供了对孤立网络的支持，在孤立网络中，时间校正的唯一方法就是手动输入。例如，由管理员查看时钟。chronyd可以检查在不同的更新中修正的错误，从而估算出计算机增加或减少时间的速度，并在随后使用这个估算来调整计算机时钟。\n   * chronyd可以计算RTC时钟（在计算机关闭时保持时间的时钟）的增益和损耗率。它可以在系统启动时使用这些计算的数据，以及从RTC时钟获取的时间调整值来设置系统时间。RTC时钟设备目前仅在Linux系统上可用。\n     支持Linux上的硬件时间戳，允许在本地网络上进行非常精确的同步。\n * （3）ntpd做得到但chronyd做不到的\n   * ntpd支持NTP v4（RFC 5905）的所有同步模式，包括broadcast、multicast和manycast clients and servers模式。请注意，broadcast和multicast模式（即使有身份验证）与普通servers and clients模式相比，更不精确、更不安全，通常应避免使用。\n   * ntpd支持使用公钥加密的Autokey协议（RFC 5906）对服务器进行身份验证。注意，该协议已被证明是不安全的，可能会被Network Time Security（NTS）取代。\n   * ntpd包含很多参考时间源的驱动程序，而chronyd依赖于其他程序（例如gpsd），以使用共享内存（SHM）或Unix domain socket（SOCK）访问参考时间源的数据。\n * （4）chronyd与ntpd，该怎么选\n   * 除了由不支持Chrony的工具管理或监视的系统，或者具有不能与Chrony一起使用的硬件参考时钟的系统之外，其他系统都应该首选Chrony。\n   * 需要使用Autokey协议对数据包进行身份验证的系统只能使用ntpd，因为chronyd不支持这个协议。Autokey协议存在严重的安全问题，应避免使用该协议。使用对称密钥进行身份验证，而不是使用Autokey，这是chronyd和ntpd都支持的。Chrony支持更强的哈希函数，如SHA256和SHA512，而ntpd只能使用MD5和SHA1。\n\n\n# chrony的组成与端口说明\n\n * chrony 是由 守护进程 chronyd 以及 命令行工具 chronyc 组成的，具体如下图\n   \n\n * chronyd 在后台静默运行并通过 123 端口与时间服务器定时同步时间，默认的配置文件是 /etc/chrony.conf\n\n * chronyc 通过 323 端口与 chronyd 交互，可监控 chronyd 的性能并在运行时更改各种操作参数\n   chronyc 通过下面的方式访问 chronyd\n   \n   * 1、通过 IPv4 或 IPv6 访问\n   * 2、通过 Unix 域 socket, 但只能访问到本地的 chronyd，而且需要 root 用户或者 chrony 用户才能访问\n\n * chronyd和ntp一样，端口都是udp\n\n[root@yum-centos-dmz ~]# netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           8938/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           8938/chronyd        \nudp6       0      0 ::1:323                 :::*                                8938/chronyd        \n[root@yum-centos-dmz ~]# \n\n\n\n * 默认情况下，chronyc 先通过 Unix 域 socket 访问 chronyd，默认的 socket 文件是 /var/run/chrony/chronyd.sock, 如果失败（常见的原因是使用非 root 用户运行 chronyc ），将尝试通过 127.0.0.1 访问 chronyd\n\n\n# chrony安装和命令管理说明\n\n * 在新的 Linux 发行版（centos8、Ubuntu 20.04、Fedora 30）及以后的版本中，系统默认已经安装了 chrony，在这之前的版本是没有安装的，可以使用下面的命令进行安装\n   yum install chrony -y\n * 安装完成后，chrony 服务默认会自动加到 systemctl 中管理，下面列出了一些常用的命令\n\n#查询 chronyd 服务状态\nsystemctl status chronyd     \n\n#启动 chronyd 服务\nsystemctl start chronyd   \n\n#关闭 chronyd 服务\nsystemctl stop chronyd   \n\n#重启 chronyd 服务\nsystemctl restart chronyd   \n\n#设置 chronyd 服务开机自启\nsystemctl enable chronyd\nsystemctl daemon-reload\n\n\n\n# 启动服务报错处理\n\n另外，启动 chronyd 服务的时候如果出现下面截图中的错误，需要安装或者升级 libsepol、policycoreutils-python【最小化安装的系统可能会出现这种问题】 查看日志或者执行journalctl -xe均可查看报错内容~\n\n * 具体的问题说明详见Red Hat Bugzilla – Bug 1592775\n\n * 解决方法 安装 libsepol 和 policycoreutils-python yum install libsepol policycoreutils-python -y\n\n\n# chrony常用配置参数说明\n\n * 守护进程 chronyd 的默认配置文件是 /etc/chrony.conf，其中可配置项很多，这里介绍一些常用的\n\n配置项                说明\nserver             客户端需找哪个服务器询问当前时间\npool               同 server 配置项\ndriftfile          本地时钟和服务器时钟的预估漂移保存到哪个文件中\nmakestep           纠正客户端时间的步进参数\nrtcsync            是否允许内核同步实时时钟\nallow              允许客户端通过内网地址同步时钟\nlocal stratum 10   开启，即使server指令种时间服务器不可用，也允许将本地时间作为标准时间授予其他客户端\nlogdir             日志目录\n\n\n# chronyd常用命令说明\n\n * 查看时间同步源状态： chronyc sourcestats -v 【-v是列出详细，可以不要】\n * 立即校准时间服务器：chronyc tracking 【配置的时候默认是自动校准的，一般用于服务端修改时间了，客户端立即校准用】\n * 启用NTP时间同步： timedatectl set-ntp yes【默认是启用的，timedatectl命令可以查看状态】\n * 查看客户端连接情况【服务端执行】：chronyc clients\n * 列出ntp状态详细：timedatectl\n   下面timedatectl说明中有详细介绍哈\n   * 设置硬件时间\n     硬件时间默认为UTC： timedatectl set-local-rtc 1/0\n     * 设置硬件时钟为本地时间：timedatectl set-local-rtc 1\n     * 设置硬件时钟为UTC时间：timedatectl set-local-rtc 0\n   * 启用NTP时间同步： timedatectl set-ntp yes\n   * 开启 NTP：timedatectl set-ntp true/flase\n   * 校准时间服务器： chronyc tracking\n\n[root@yum-centos-dmz ~]# timedatectl \n      Local time: Wed 2022-07-06 09:53:00 CST\n  Universal time: Wed 2022-07-06 01:53:00 UTC\n        RTC time: Wed 2022-07-06 01:44:58\n       Time zone: Asia/Shanghai (CST, +0800)  # 当前zone【我们要 +8 才正常】 最后timedatectl命令有说如何定义\n     NTP enabled: yes   # ntp是否启用\nNTP synchronized: yes  # 是否完成过一次ntp同步\n RTC in local TZ: no    #是否启用rtc时间【我们为cst+8，所以这为no才是正常的】\n      DST active: n/a\n[root@yum-centos-dmz ~]# \n\n\n\n# ntpdate客户端立即更新时间\n\n * 立即更新时间，我们可以使用ntpdate\n   这个还是比较好用的，如果服务端时间更新了，客户端没有及时更新，可以执行这个命令\n   如下，我在服务端更新时间了\n\n[root@ccx_server128 ~]# date\n2022年 03月 01日 星期二 01:10:04 CST\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:10:34\"\nFailed to set time: Automatic time synchronization is enabled\n[root@ccx_server128 ~]# timedatectl \n      Local time: 二 2022-03-01 01:13:18 CST\n  Universal time: 一 2022-02-28 17:13:18 UTC\n        RTC time: 一 2022-02-28 17:13:18\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server128 ~]# timedatectl set-time \"2022-06-28 17:10:34\"\nFailed to set time: Automatic time synchronization is enabled\n[root@ccx_server128 ~]# timedatectl set-ntp no\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:13:55\"\n[root@ccx_server128 ~]# date\n2022年 02月 28日 星期一 17:13:57 CST\n[root@ccx_server128 ~]# timedatectl \n      Local time: 一 2022-02-28 17:14:02 CST\n  Universal time: 一 2022-02-28 09:14:02 UTC\n        RTC time: 一 2022-02-28 09:14:02\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: no\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server128 ~]# timedatectl set-ntp yes\n[root@ccx_server128 ~]# \n\n# 然后我去客户端立即获取。。。多香啊\n[root@ccx_server129 ~]# date\nTue Mar  1 01:15:13 CST 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# ntpdate 192.168.59.128\n28 Feb 17:15:37 ntpdate[46458]: step time server 192.168.59.128 offset -28789.784156 sec\n[root@ccx_server129 ~]# date\nMon Feb 28 17:15:39 CST 2022\n[root@ccx_server129 ~]# \n\n\n\n * 当然，这也带来一个问题，好像chronyd状态出问题了，不是^*了，然后重启一下又恢复正常，所以，可能这个netdate和重启服务效果一样吧。\n\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^? ccx_server128                 0   6   377     -     +0ns[   +0ns] +/-    0ns\n[root@ccx_server129 ~]# systemctl restart chronyd #重启了\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^? ccx_server128                10   6     1     2  -3874ns[-3874ns] +/-  106us\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^* ccx_server128                10   6     7     1  +1884ns[-7831ns] +/-   99us\n[root@ccx_server129 ~]# \n\n\n\n\n# 内网chrony配置时间同步\n\n\n# 内网环境服务端配置\n\n * 守护进程 chronyd 既可作为客户端 与 服务器同步时间，又可作为一个服务器，接受其他客户端同步时间的请求\n\n * 下面以配置局域网时间服务器为例来说明 chronyd 的客户端和服务器的配置，虚拟机规划如下：\n\n用途      IP               系统                                     配置前系统时间\n服务端ip   192.168.59.128   CentOS Linux release 7.6.1810 (Core)   2022年 02月 28日 星期一 19:41:38 CST\n客户端ip   192.168.59.129   CentOS Linux release 7.6.1810 (Core)   Mon Feb 28 06:46:54 EST 2022\n\n * 注：我上面2台虚拟机没有通公网的，所以我下面安装服务用的是本地源方式搭建。\n\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是UTC时间，如下UTC，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 06:50:32 UTC\n  Universal time: Wed 2022-07-06 06:50:32 UTC\n        RTC time: Wed 2022-07-06 06:50:32\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone Asia/Shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone Asia/Shanghai\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 14:54:56 CST\n  Universal time: Wed 2022-07-06 06:54:56 UTC\n        RTC time: Wed 2022-07-06 06:54:56\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n\n# 安装chrony\n\n[root@ccx_server128 ~]# yum install -y chrony\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl enable chronyd --now\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n\n\n\n# 服务端配置\n\n * 安装 chrony 之后，默认的配置是客户端的启动配置的，要想作为一个时间服务器来运行的话， 需要在配置中增加 allow 配置项，它表示允许客户端通过该地址和服务器同步时间\n   默认配置文件：/etc/chrony.conf\n\n * 另外，时间服务器的时间也需要从网络上其他的时间服务器进行同步，这里直接用默认的即可，具体的配置如下\n   【其实我没做啥修改，就把allow取消注释，然后加上服务端的ip即可】\n   我给没注释的代码都加上说明了，可以看看哦。\n\n[root@ccx_server128 ~]# cat /etc/chrony.conf \n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#表示与本机IP同步时间，其他server注释或删除\n#注：内网环境必须这么做，否则其他会无法同步成功。 如果通公网，可以使用公网的服务器时间\nserver 127.127.1.0\n\n# Record the rate at which the system clock gains/losses time.\n# 为了在下次启动时稳定的同步，系统时钟的预估漂移需要保存到指定的文件中\ndriftfile /var/lib/chrony/drift\n\n# Allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\n# 如果系统时钟由于某种原因与启动后的服务器时间相差甚远，允许 chronyd \n# 通过步进而不是回转来快速纠正它，这个过程将花费很长时间\nmakestep 1.0 3\n\n# Enable kernel synchronization of the real-time clock (RTC).\n# 为了使客户端实时时钟接近服务器的时钟，以便下次时钟启动时更接近真实的时间\n# 增加了一种 rtcsync 模式，该模式下，系统时间会定期的拷贝到实时时钟里\nrtcsync\n\n# Enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# Increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# Allow NTP client access from local network.\n# 允许指定网络的主机同步时间，不指定就是拒绝所有，且默认不开启。\n# 如果要允许所有则：  allow 0.0.0.0/24\n#如下，允许一个网段，如果有多个网段，则添加多个allow\nallow 192.168.59.0/24\n#allow ...\n\n# Serve time even if not synchronized to a time source.\n# 不去同步任何人的时间，时间同步服务级别\n# 开启后，即使server指令中时间服务器不可用，也允许将本地时间作为标准时间授予其他客户端\n#注：内网环境必须开，否则其他虚拟机无法同步时间\nlocal stratum 10\n\n# Specify file containing keys for NTP authentication.\n#keyfile /etc/chrony.keys\n\n# Specify directory for log files.\n# chrony日志存放路径\nlogdir /var/log/chrony\n\n# Select which information is logged.\n#log measurements statistics tracking\n[root@ccx_server128 ~]# \n\n\n# pool说明\n\n * pool=server。 一般我们都直接用server，只是我这说明一下pool的意思罢了。\n * pool 配置项\n   * 客户端需要去时间服务器获取时间，配置文件中 server 和 pool 配置项表示时间服务器的地址，支持域名或者IP\n   * pool指的是进行时间同步的服务器IP地址或域名，作为服务器来说，其机器时间也需要从其他时间服务器同步，此时，服务器是作为一个客户端从网络服务器上获取时间\n   * 建议配置多个时间服务器的地址，优先选择同步良好，网络稳定且靠近客户端的地址\n\n# 防火墙设置\n\n * 注：chronyd和ntp一样端口是upd的而非tcp，都是依赖123端口通信的，323是chronyd之间通信用的，如果你放开了123端口别人连接不上，关闭防火墙又能连上了，那把323端口开放【理论不用开放这个的】\n\n[root@ccx_server128 ~]#  netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           11048/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           11048/chronyd        \nudp6       0      0 ::1:323                 :::*                                11048/chronyd        \n[root@ccx_server128 ~]#  \n\n\n\n * 可以先查看防火墙状态，如果是关闭的，那么下面操作不用做了，我的是测试机，是可以直接关闭防火墙的【如果客户端已配置，则关闭服务端防火墙后，客户端重启 systemctl restart chronyd】\n   以firewalld为例\n\n[root@ccx_server128 ~]# ip a | grep 128\n    inet6 ::1/128 scope host \n    inet 192.168.59.128/24 brd 192.168.59.255 scope global noprefixroute ens33\n[root@ccx_server128 ~]# systemctl is-active firewalld.service \nactive\n[root@ccx_server128 ~]# systemctl stop firewalld.service\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl is-active firewalld.service \ninactive\n[root@ccx_server128 ~]# \n\n\n\n * 时间服务器如果有开启防火墙的话，需要开启 UDP 协议 的 123 端口，以允许客户端向服务器发送获取时间的请求\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --add-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n * 如果想要关闭防火墙的 123 端口，在服务器机器上执行下面的命令\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --remove-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n * 关于防火墙，我重新用一个新的ip搭建了个chronyd服务【和128一样的搭建方法】，将防火墙打开，测试客户端是否能正常同步，发现也能正常同步，防火墙不拦截嘛？【该测试仅用于参考】\n   \n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@ccx_server128 ~]# systemctl restart chronyd\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n\n\n\n * 查看端口监听是否正常\n\n[root@ccx_server128 ~]#  netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           11048/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           11048/chronyd        \nudp6       0      0 ::1:323                 :::*                                11048/chronyd        \n[root@ccx_server128 ~]#  \n\n\n\n# 服务端同步ntp服务器时间&时间模式调整\n\n * 内网主机是以本机时间为准，所以没有同步网络时间的概念，但是可以通过最后面timedatectl命令调整本机时间，其他客户端会自动更新为本机时间的。\n\n# 查询ntp是否同步&查看同步的客户端信息\n\n * 查看时间同步源状态： chronyc sourcestats -v\n   \n   * 因为我是本地源，所以是同步不成功的，这是正常的，这种情况就需要后面手动维护本机时间，确保客户端的时间能准确，也就是说，客户端的时间准不准确，就看自己平常咋维护服务端的时间了。\n     \n   * 但是外网的不是这样，使用了ntp服务器时间，那么这就得有一条是同步成功的【具体看下面外网搭建】\n\n * 服务端命令：chronyc clients【查看哪些ip连接我的ntp时间了】\n   注：我下面显示的是主机名而不是ip，是因为我添加解析了！！！如果没添加解析，显示的是ip。\n\n# 注：要有客户端连了才有该信息，没人连是为空。\n[root@ccx_server128 ~]# chronyc clients\nHostname                      NTP   Drop Int IntL Last     Cmd   Drop Int  Last\n===============================================================================\nccx_server129                  16      0   6   -    15       0      0   -     -\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# cat /etc/hosts\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.59.129 ccx_server129\n[root@ccx_server128 ~]# \n\n\n\n\n# 内网客户端配置\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是UTC时间，如下UTC，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 06:50:32 UTC\n  Universal time: Wed 2022-07-06 06:50:32 UTC\n        RTC time: Wed 2022-07-06 06:50:32\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone Asia/Shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone Asia/Shanghai\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 14:54:56 CST\n  Universal time: Wed 2022-07-06 06:54:56 UTC\n        RTC time: Wed 2022-07-06 06:54:56\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n# 安装chrony\n\n[root@ccx_server129 ~]# yum install -y chrony\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# systemctl enable chronyd --now\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n# 客户端配置\n\n * 安装好 chrony 之后，编辑 /etc/chrony.conf 配置文件，客户端的配置比较简单\n   我给没注释的代码都加上说明了，可以看看哦。\n\n[root@ccx_server129 ~]# cat /etc/chrony.conf\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n# 同步时间的服务器 IP 或 域名\n# 这直接使用服务端的ip即可\nserver 192.168.59.128 iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n\n# Record the rate at which the system clock gains/losses time.\n# 系统时钟的预估漂移保存到指定的文件中，是为了在下次启动时能稳定的同步\ndriftfile /var/lib/chrony/drift\n\n# Allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\n# 如果系统时钟由于某种原因与启动后的服务器时间相差甚远，允许 chronyd \n# 通过步进而不是回转来快速纠正它\nmakestep 1.0 3\n\n# Enable kernel synchronization of the real-time clock (RTC).\n# 为了使客户端实时时钟接近服务器的时钟，以便下次时钟启动时更接近真实的时间\n# 增加了一种 rtcsync 模式，该模式下，系统时间会定期的拷贝到实时时钟里\nrtcsync\n\n# Enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# Increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# Allow NTP client access from local network.\n#allow 192.168.0.0/16\n\n# Serve time even if not synchronized to a time source.\n#local stratum 10\n\n# Specify file containing keys for NTP authentication.\n#keyfile /etc/chrony.keys\n\n# Specify directory for log files.\n# chrony日志存放路径\nlogdir /var/log/chrony\n\n# Select which information is logged.\n#log measurements statistics tracking\n[root@ccx_server129 ~]# \n\n\n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@ccx_server129 ~]# systemctl restart chronyd\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n# 查看服务器信息\n\n * 客户端查看连接情况命令：chronyc sources -v【加-v显示详细信息，可以不加】\n   如下，我没同步前时间为15:28，同步以后时间变成23:22了【和服务端一样】【如果没有自动同步可以执行chronyc tracking立即同步】\n   显示的是主机名而非ip是因为我添加解析了。。。没添加解析是显示的ip\n   * ^?同步失败\n   * ^* 同步成功【可能不是立即显示，反正只要Reach有值就表示成功了，状态需要等一会才能更新】\n\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# date\nMon Feb 28 15:28:05 CST 2022\n[root@ccx_server129 ~]# systemctl restart chronyd\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^? ccx_server128                10   6     3     0  +2317ns[+2317ns] +/-   90us\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^? ccx_server128                10   6     3     1  +2317ns[+2317ns] +/-   90us\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^? ccx_server128                10   6     3     1  +2317ns[+2317ns] +/-   90us\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^* ccx_server128                10   6    17     0  -1762ns[-2940ns] +/-   92us\n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^* ccx_server128                10   6    17     2  -1762ns[-2940ns] +/-   92us\n[root@ccx_server129 ~]# date\nMon Feb 28 23:22:20 CST 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# cat /etc/hosts\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.59.128 ccx_server128\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# chronyc sources -v\n210 Number of sources = 1\n\n  .-- Source mode  '^' = server, '=' = peer, '#' = local clock.\n / .- Source state '*' = current synced, '+' = combined , '-' = not combined,\n| /   '?' = unreachable, 'x' = time may be in error, '~' = time too variable.\n||                                                 .- xxxx [ yyyy ] +/- zzzz\n||      Reachability register (octal) -.           |  xxxx = adjusted offset,\n||      Log2(Polling interval) --.      |          |  yyyy = measured offset,\n||                                \\     |          |  zzzz = estimated error.\n||                                 |    |           \\\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^* ccx_server128                10   9   377   386    -15us[  -19us] +/-  133us\n[root@ccx_server129 ~]# \n\n\n\n * 而且，当时间同步成功以后，ntp服务这些全是yes\n   下面NTP synchronized状态如果为no，手动改为yes是不生效的。。成功以后状态会自动变成yes。\n   开启ntp命令是：timedatectl set-ntp true/flase\n\n[root@ccx_server129 ~]# timedatectl \n      Local time: Mon 2022-02-28 23:38:32 CST\n  Universal time: Mon 2022-02-28 15:38:32 UTC\n        RTC time: Mon 2022-02-28 15:38:32\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: yes\n RTC in local TZ: yes\n      DST active: n/a\n# 这个警告是因为我吧时间改为本地了，下面有说改回RTC的方法哈。\nWarning: The system is configured to read the RTC time in the local time zone.\n         This mode can not be fully supported. It will create various problems\n         with time zone changes and daylight saving time adjustments. The RTC\n         time is never updated, it relies on external facilities to maintain it.\n         If at all possible, use RTC in UTC by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server129 ~]# \n\n\n\n# 没加解析的服务器端说明\n\n * 上面是因为我排错的过程中添加解析了，所以无论是客户端还是服务端看到的ip都是主机名。。。\n   我下面呢重新用一台没加解析的虚拟机做服务端，重新试一下效果哦。\n\n * 我这不对代码做解释了哦，具体的代码说明看上面哈~\n\n * 服务端配置\n\n[root@ciserver ~]# ip a | grep 151\n    inet 192.168.59.151/24 brd 192.168.59.255 scope global noprefixroute ens33\n[root@ciserver ~]# cat /etc/chrony.conf \n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n#server 192.168.59.128\nserver 127.127.1.0\n\n# Record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# Allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# Enable kernel synchronization of the real-time clock (RTC).\nrtcsync\n\n# Enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# Increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# Allow NTP client access from local network.\n#allow 192.168.0.0/16\nallow 192.168.59.0/24\n\n# Serve time even if not synchronized to a time source.\nlocal stratum 10\n\n# Specify file containing keys for NTP authentication.\n#keyfile /etc/chrony.keys\n\n# Specify directory for log files.\nlogdir /var/log/chrony\n\n# Select which information is logged.\n#log measurements statistics tracking\n[root@ciserver ~]# \n[root@ciserver ~]# systemctl restart chronyd\n[root@ciserver ~]# \n[root@ciserver ~]# chronyc clients\nHostname                      NTP   Drop Int IntL Last     Cmd   Drop Int  Last\n===============================================================================\n[root@ciserver ~]# \n[root@ciserver ~]# date\nMon Feb 28 17:54:19 CST 2022\n[root@ciserver ~]# \n\n# 下面客户端配置完毕以后再回到服务端，可以看到客户端的ip了哦\n[root@ciserver ~]# chronyc clients\nHostname                      NTP   Drop Int IntL Last     Cmd   Drop Int  Last\n===============================================================================\n192.168.59.129                  5      0   4   -    34       0      0   -     -\n[root@ciserver ~]# \n\n\n\n * 客户端\n   我还是用上面的那个客户端来做测试吧\n\n[root@ccx_server129 ~]# cat /etc/chrony.conf\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\nserver 192.168.59.151 iburst\n#server 192.168.59.128 iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n\n# Record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# Allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# Enable kernel synchronization of the real-time clock (RTC).\nrtcsync\n\n# Enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# Increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# Allow NTP client access from local network.\n#allow 192.168.0.0/16\n#allow 192.168.59.128\n#local stratum 10\n# Serve time even if not synchronized to a time source.\n#local stratum 10\n\n# Specify file containing keys for NTP authentication.\n#keyfile /etc/chrony.keys\n\n# Specify directory for log files.\nlogdir /var/log/chrony\n\n# Select which information is logged.\n#log measurements statistics tracking\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# date #之前服务端的时间\nMon Feb 28 17:48:46 CST 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# systemctl restart chronyd #重启\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# chronyc sources #生效了哦，同步成功了\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^* 192.168.59.151               10   6    17     3  -1053ns[-1698ns] +/-  150us\n[root@ccx_server129 ~]#  #时间也变了\n[root@ccx_server129 ~]# date\nMon Feb 28 17:54:56 CST 2022\n[root@ccx_server129 ~]# \n\n\n\n\n# 外网chrony配置时间同步\n\n\n# 外网环境chrony服务端配置\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是UTC时间，如下UTC，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 06:50:32 UTC\n  Universal time: Wed 2022-07-06 06:50:32 UTC\n        RTC time: Wed 2022-07-06 06:50:32\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone Asia/Shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone Asia/Shanghai\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 14:54:56 CST\n  Universal time: Wed 2022-07-06 06:54:56 UTC\n        RTC time: Wed 2022-07-06 06:54:56\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n# 安装chrony\n\n[root@ccx_server128 ~]# yum install -y chrony\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl enable chronyd --now\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n\n\n\n# 服务端配置【国内常用的几个ntp服务器地址】\n\n * 国内NTP时间服务器：\n   验证是否能用： 在配置主机上ping下面域名，能ping通就可以用。\n\n#最常见、熟知的就是，www.pool.ntp.org/zone/cn\nntp.ntsc.ac.cn #国家授时中心 网络授时服务器的域名\ncn.ntp.org.cn #中国\nedu.ntp.org.cn #中国教育网\nntp1.aliyun.com #阿里云\nntp2.aliyun.com #阿里云\ncn.pool.ntp.org #最常用的国内NTP服务器\n\n\n\n * 外网配置很简单，也没啥讲究，配置文件/etc/chrony.conf 修改一个内容就行了，修改内容如下：\n   注：代码意思见上面内网环境中的服务端配置说明哈。\n\n# 先在主机上ping一下，确定能ping通下面ntp服务器地址才行哈\n[root@yum-centos-dmz ~]# ping .cn.pool.ntp.org\nping: .cn.pool.ntp.org: Name or service not known\n[root@yum-centos-dmz ~]# ping cn.pool.ntp.org\nPING cn.pool.ntp.org (219.216.128.25) 56(84) bytes of data.\n64 bytes from 219.216.128.25 (219.216.128.25): icmp_seq=1 ttl=44 time=80.5 ms\n64 bytes from 219.216.128.25 (219.216.128.25): icmp_seq=2 ttl=44 time=80.2 ms\n^C\n--- cn.pool.ntp.org ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\nrtt min/avg/max/mdev = 80.285/80.408/80.531/0.123 ms\n[root@yum-centos-dmz ~]# \n\n#把配置文件下面四行注释掉：\nserver 0.centos.pool.ntp.org iburst\nserver 1.centos.pool.ntp.org iburst\nserver 2.centos.pool.ntp.org iburst\nserver 3.centos.pool.ntp.org iburst\n#然后在下面添加这几行，也可以添加上面的ntp服务器地址\nserver 0.cn.pool.ntp.org iburst\nserver 1.cn.pool.ntp.org iburst\nserver 2.cn.pool.ntp.org iburst\nserver 3.cn.pool.ntp.org iburst\n\n# 添加下面内容，允许所有虚拟机连接\nallow 0.0.0.0/24\n\n# 取消注释下面行。外网环境下面如果不取消注释，可能chronyd服务无法同步，只有ntp可以同步，开了好。\nlocal stratum 10\n\n# 完整代码配置文件如下\n[root@yum-centos-dmz yum.repos.d]# cat /etc/chrony.conf \n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n#一定要先ping，要确保地址能ping通才可以正常同步啊！！！！\nserver cn.ntp.org.cn iburst\nserver cn.pool.ntp.org iburst\n#server 0.cn.pool.ntp.org iburst\n#server 1.cn.pool.ntp.org iburst\n#server 2.cn.pool.ntp.org iburst\n#server 3.cn.pool.ntp.org iburst\n\n# Record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# Allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# Enable kernel synchronization of the real-time clock (RTC).\nrtcsync\n\n# Enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# Increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# Allow NTP client access from local network.\n#allow 192.168.0.0/16\nallow 1.2.105.0/24\nallow 1.2.0.0/16\n\n# Serve time even if not synchronized to a time source.\nlocal stratum 10\n\n# Specify file containing keys for NTP authentication.\n#keyfile /etc/chrony.keys\n\n# Specify directory for log files.\nlogdir /var/log/chrony\n\n# Select which information is logged.\n#log measurements statistics tracking\n[root@yum-centos-dmz yum.repos.d]#\n\n\n\n# 防火墙设置\n\n * 引用上面内网中内容，方法一样。\n * 注：chronyd和ntp一样端口是upd的而非tcp，都是依赖123端口通信的，323是chronyd之间通信用的，如果你放开了123端口别人连接不上，关闭防火墙又能连上了，那把323端口开放【理论不用开放这个的】\n\n[root@ccx_server128 ~]#  netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           11048/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           11048/chronyd        \nudp6       0      0 ::1:323                 :::*                                11048/chronyd        \n[root@ccx_server128 ~]#  \n\n\n\n * 可以先查看防火墙状态，如果是关闭的，那么下面操作不用做了，我的是测试机，是可以直接关闭防火墙的【如果客户端已配置，则关闭服务端防火墙后，客户端重启 systemctl restart chronyd】\n   以firewalld为例\n\n[root@ccx_server128 ~]# ip a | grep 128\n    inet6 ::1/128 scope host \n    inet 192.168.59.128/24 brd 192.168.59.255 scope global noprefixroute ens33\n[root@ccx_server128 ~]# systemctl is-active firewalld.service \nactive\n[root@ccx_server128 ~]# systemctl stop firewalld.service\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl is-active firewalld.service \ninactive\n[root@ccx_server128 ~]# \n\n\n\n * 时间服务器如果有开启防火墙的话，需要开启 UDP 协议 的 123 端口，以允许客户端向服务器发送获取时间的请求\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --add-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n * 如果想要关闭防火墙的 123 端口，在服务器机器上执行下面的命令\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --remove-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@yum-centos-dmz ~]# systemctl restart chronyd\n[root@yum-centos-dmz ~]# systemctl is-active chronyd\nactive\n[root@yum-centos-dmz ~]# \n\n\n\n * 查看端口监听是否正常\n\n[root@yum-centos-dmz ~]# netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           14248/chronyd       \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           14248/chronyd       \nudp6       0      0 ::1:323                 :::*                                14248/chronyd       \n[root@yum-centos-dmz ~]# \n\n\n\n# 服务端同步ntp服务器时间&时间模式调整\n\n * 理论上重启服务以后会自动同步时间的，如果没有自动同步，可以执行下面命令立即同步。\n   只要出现^*行就代表成功。【如果没有自动同步可以执行chronyc tracking立即同步】\n\n[root@yum-centos-dmz ~]# chronyc sources -v\n210 Number of sources = 4\n\n  .-- Source mode  '^' = server, '=' = peer, '#' = local clock.\n / .- Source state '*' = current synced, '+' = combined , '-' = not combined,\n| /   '?' = unreachable, 'x' = time may be in error, '~' = time too variable.\n||                                                 .- xxxx [ yyyy ] +/- zzzz\n||      Reachability register (octal) -.           |  xxxx = adjusted offset,\n||      Log2(Polling interval) --.      |          |  yyyy = measured offset,\n||                                \\     |          |  zzzz = estimated error.\n||                                 |    |           \\\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^- electrode.felixc.at           3   6   377    31    -14us[  -14us] +/-  181ms\n^* 120.25.115.20                 2   6   146   164  -2455us[+2334us] +/-   35ms\n^- tick.ntp.infomaniak.ch        1   6   377    29  -3515us[-3515us] +/-  102ms\n^- makaki.miuku.net              2   6   377    30    -72ms[  -72ms] +/-  138ms\n[root@yum-centos-dmz ~]# chronyc sources \n210 Number of sources = 4\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^- electrode.felixc.at           3   6   377     8    +30ms[  +30ms] +/-  153ms\n^* 120.25.115.20                 2   6   231    11  -3186us[-5099us] +/-   38ms\n^- tick.ntp.infomaniak.ch        1   6   377     7    -47ms[  -47ms] +/-  151ms\n^- makaki.miuku.net              2   6   377     7    -21ms[  -21ms] +/-   91ms\n[root@yum-centos-dmz ~]# \n[root@yum-centos-dmz ~]# date\nTue Jul  5 02:53:16 UTC 2022\n[root@yum-centos-dmz ~]#\n\n\n\n * 理论上重启服务时间就自动同步的，但我看到虚拟机上的时间一直是2点过，而我本地的时间是10点过，不对啊，但同步又是成功的，后面我发现分和秒都和我本地对上的，想起了虚拟机是UTC模式啊，也就是没有+8.。。问题就在这。\n   所以我们就将UTC模式调整一下嘛【文章最后有说timedatectl命令的使用方式哈】\n\n[root@yum-centos-dmz ~]# date\nTue Jul  5 03:09:28 UTC 2022\n\n# 下面命令可以看到UTC是+0\n[root@yum-centos-dmz ~]# timedatectl \n      Local time: Tue 2022-07-05 03:09:30 UTC\n  Universal time: Tue 2022-07-05 03:09:30 UTC\n        RTC time: Tue 2022-07-05 03:01:29\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: yes\n RTC in local TZ: no\n      DST active: n/a\n[root@yum-centos-dmz ~]# \n[root@yum-centos-dmz ~]# timedatectl list-timezones | grep hai\nAsia/Shanghai\n[root@yum-centos-dmz ~]# timedatectl set-timezone Asia/Shanghai\n\n# 调整为上海以后就UTC就变成+8了，正常了。\n[root@yum-centos-dmz ~]# timedatectl \n      Local time: Tue 2022-07-05 11:10:33 CST\n  Universal time: Tue 2022-07-05 03:10:33 UTC\n        RTC time: Tue 2022-07-05 03:02:33\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: yes\n RTC in local TZ: no\n      DST active: n/a\n\n# 再次查看时间，正常了，搞定。\n[root@yum-centos-dmz ~]# date\nTue Jul  5 11:10:39 CST 2022\n[root@yum-centos-dmz ~]# \n\n\n\n# 查看同步的客户端信息\n\n * 服务端命令：chronyc clients【查看哪些ip连接我的ntp时间了】\n   注：我下面显示的是主机名而不是ip，是因为我添加解析了！！！如果没添加解析，显示的是ip。\n\n# 注：要有客户端连了才有该信息，没人连是为空。\n[root@yum-centos-dmz ~]# chronyc clients\nHostname                      NTP   Drop Int IntL Last     Cmd   Drop Int  Last\n===============================================================================\nccx_server129                  16      0   6   -    15       0      0   -     -\n[root@yum-centos-dmz ~]#\n\n# 下面是别人连接以后【ip有修改】\n[root@yum-centos-dmz ~]# chronyc  clients\nHostname                      NTP   Drop Int IntL Last     Cmd   Drop Int  Last\n===============================================================================\n1.2.102.47                   5      0   6   -    51       0      0   -     -\n1.2.105.58                   3      0   6   -   141       0      0   -     -\n1.2.105.39                   8      0   6   -     1       0      0   -     -\n1.2.102.36                   4      0   6   -    15       0      0   -     -\n1.2.102.16                   3      0   6   -    10       0      0   -     -\n1.2.102.54                   2      0   6   -    48       0      0   -     -\n1.2.102.55                   2      0   6   -    29       0      0   -     -\n[root@yum-centos-dmz ~]# \n\n\n\n\n# 外网客户端连接\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是UTC时间，如下UTC，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 06:50:32 UTC\n  Universal time: Wed 2022-07-06 06:50:32 UTC\n        RTC time: Wed 2022-07-06 06:50:32\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone Asia/Shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone Asia/Shanghai\n[root@test21 ~]# timedatectl \n      Local time: Wed 2022-07-06 14:54:56 CST\n  Universal time: Wed 2022-07-06 06:54:56 UTC\n        RTC time: Wed 2022-07-06 06:54:56\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@test21 ~]# \n\n\n\n# chronyd的方法连接\n\n# 安装chrony\n\n[root@ccx_server129 ~]# yum install -y chrony\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# systemctl enable chronyd --now\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n# 客户端配置\n\n * 安装好 chrony 之后，编辑 /etc/chrony.conf 配置文件，客户端的配置比较简单\n   我给没注释的代码都加上说明了，可以看看哦。\n\n[root@test ~]#  cat /etc/chrony.conf\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n# 同步时间的服务器 IP 或 域名\n# 这直接使用服务端的ip即可\nserver 1.2.105.41 iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n\n# 其他配置默认不动即可。\n\n\n\n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@test ~]#  systemctl restart chronyd\n[root@test ~]#  systemctl is-active chronyd\nactive\n[root@test ~]# \n\n\n\n# 查看服务器信息\n\n * 客户端查看连接情况命令：chronyc sources -v【加-v显示详细信息，可以不加】\n   如下，我没同步前时间为15:28，同步以后时间变成23:22了【和服务端一样】【如果没有自动同步可以执行chronyc tracking立即同步】\n   显示的是主机名而非ip是因为我添加解析了。。。没添加解析是显示的ip\n   * ^?同步失败\n   * ^* 同步成功【可能不是立即显示，反正只要Reach有值就表示成功了，状态需要等一会才能更新】\n     \n\n# ntp的方式连接chronyd服务端【必看】\n\n# ntp服务端搭建\n\n * 本文主要说的是chronyd服务，ntp是我测试的时候做过，也顺便说一下，ntp超级简单。\n   为什么用chronyd，是因为chronyd管理更方便，比如可以看到已经连接该主机的ip有哪些。\n * 安装ntp，ntpdate已经系统默认安装过了\n\n[root@localhost ~]# yum install -y ntp\n\n\n\n * 修改ntp配置文件\n\n[root@localhost ~]# vim /etc/ntp.conf\n\n#把配置文件下面四行注释掉：\nserver 0.centos.pool.ntp.org iburst\nserver 1.centos.pool.ntp.org iburst\nserver 2.centos.pool.ntp.org iburst\nserver 3.centos.pool.ntp.org iburst\n\n#然后在下面添加这几行即可，其他默认不变就行了。\n#也可以使用上面chronyd中说到的公网ntp服务器\nserver 0.cn.pool.ntp.org iburst\nserver 1.cn.pool.ntp.org iburst\nserver 2.cn.pool.ntp.org iburst\nserver 3.cn.pool.ntp.org iburst\n\n\n\n * 权限配置说明【默认允许所有连接，下面内容了解为主】\n   \n   * 1 配置方法一：只允许192.168.100.0网段的客户机进行时间同步\n     在restrict default kod nomodify notrap nopeer noquery（表示默认拒绝所有IP的时间同步）之后增加一行：\n     restrict 192.168.100.0 mask 255.255.255.0 nomodify notrap\n   \n   * 2 配置方法二：允许任何ip的客户机都可以进行时间同步\n     将restrict default kod nomodify notrap nopeer noquery修改为如下行：\n     Restrict default nomodify\n\n * 参数说明：\n   \n   * ignore ：关闭所有的 NTP 联机服务\n   * nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。\n   * notrust：客户端除非通过认证，否则该客户端来源将被视为不信任子网\n   * noquery：不提供客户端的时间查询\n\n * 启动ntp服务，并开机自启动\n\n[root@localhost ~]# systemctl start ntpd\n[root@localhost ~]# systemctl enable ntpd\n\n\n\n * 查询ntp是否同步\n\n[root@localhost ~]# ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*119.28.206.193  100.122.36.196   2 u  128  128  377   19.711   -0.468   5.363\n\n\n\n * 如果没有立即同步可以执行 ntpdate cn.pool.ntp.org 或 ntpdate -u cn.pool.ntp.org 立即同步\n   同步成功后如下，NTP synchronized: yes\n\n[root@yum-centos-dmz ~]# timedatectl \n      Local time: Wed 2022-07-06 14:08:15 CST\n  Universal time: Wed 2022-07-06 06:08:15 UTC\n        RTC time: Wed 2022-07-06 06:00:13\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: yes\n RTC in local TZ: no\n      DST active: n/a\n[root@yum-centos-dmz ~]# \n\n\n\n * 开启防火墙ntp默认端口udp123\n\n[root@localhost ~]# firewall-cmd --permanent --zone=public --add-port=123/udp\nsuccess\n[root@localhost ~]# firewall-cmd --reload\nsuccess\n\n\n\n# 说明【重要】\n\n * 服务器是chronyd服务，客户端如果我也用chronyd服务，有可能能用，有可能不能用，明白我意思吧？\n   但是我服务端是chronyd，我客户端用ntp方式，欸，那么就很好用，随时用随时正确。\n * 如下，chronyd服务是不正常的，但是我用ntpdata拉取时间后重启又\n\n# 现在状态正常\n[root@host-10-241-105-39 ~]# systemctl is-active chronyd\nactive\n[root@host-10-241-105-39 ~]#\n[root@host-10-241-105-39 ~]# \n# 看，之前的是一直同步失败的\n[root@host-10-241-105-39 ~]# timedatectl \n      Local time: Wed 2022-07-06 12:13:41 CST\n  Universal time: Wed 2022-07-06 04:13:41 UTC\n        RTC time: Wed 2022-07-06 04:13:41\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@host-10-241-105-39 ~]# \n\n# 我用ntp的方式更新时间成功了 \n[root@host-10-241-105-39 ~]# ntpdate 1.2.105.41\n 6 Jul 12:22:13 ntpdate[6220]: step time server 1.2.105.41 offset 481.822244 sec\n[root@host-10-241-105-39 ~]# timedatectl \n      Local time: Wed 2022-07-06 12:22:21 CST\n  Universal time: Wed 2022-07-06 04:22:21 UTC\n        RTC time: Wed 2022-07-06 04:14:19\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@host-10-241-105-39 ~]# date\nWed Jul  6 12:22:29 CST 2022\n[root@host-10-241-105-39 ~]#\n\n# 我修改时间为错误的\n[root@host-10-241-105-39 ~]# timedatectl set-time \"2022-06-28 17:10:34\"\nFailed to set time: Automatic time synchronization is enabled\n[root@host-10-241-105-39 ~]# date\nWed Jul  6 12:22:59 CST 2022\n[root@host-10-241-105-39 ~]# \n[root@host-10-241-105-39 ~]# timedatectl set-ntp no\n[root@host-10-241-105-39 ~]# timedatectl set-time \"2022-07-01 17:10:34\"\n[root@host-10-241-105-39 ~]# date\nFri Jul  1 17:10:35 CST 2022\n[root@host-10-241-105-39 ~]#\n\n# 使用chronyd的方式又成功了，他奶奶的，之前一直搞都是错误的同步不了。\n[root@host-10-241-105-39 ~]# chronyc tracking\n506 Cannot talk to daemon\n[root@host-10-241-105-39 ~]# systemctl is-active chronyd\nunknown\n[root@host-10-241-105-39 ~]# systemctl restart chronyd\n[root@host-10-241-105-39 ~]# chronyc tracking\nReference ID    : 00000000 ()\nStratum         : 0\nRef time (UTC)  : Thu Jan 01 00:00:00 1970\nSystem time     : 0.000000000 seconds slow of NTP time\nLast offset     : +0.000000000 seconds\nRMS offset      : 0.000000000 seconds\nFrequency       : 26.307 ppm slow\nResidual freq   : +0.000 ppm\nSkew            : 0.000 ppm\nRoot delay      : 1.000000000 seconds\nRoot dispersion : 1.000000000 seconds\nUpdate interval : 0.0 seconds\nLeap status     : Not synchronised\n[root@host-10-241-105-39 ~]# timedatectl \n      Local time: Wed 2022-07-06 12:26:12 CST\n  Universal time: Wed 2022-07-06 04:26:12 UTC\n        RTC time: Fri 2022-07-01 09:12:31\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: no\nNTP synchronized: yes\n RTC in local TZ: no\n      DST active: n/a\n[root@host-10-241-105-39 ~]# date\nWed Jul  6 12:26:23 CST 2022\n[root@host-10-241-105-39 ~]# \n[root@host-10-241-105-39 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^* host-10-241-105-41.opens>     4   6   177    41    +39us[  +73us] +/-   91ms\n[root@host-10-241-105-39 ~]# \n\n\n\n# 客户端安装ntpd\n\n[root@host-10-241-105-39 ~]#  yum install -y ntp\n[root@host-10-241-105-39 ~]#  \n[root@host-10-241-105-39 ~]#  systemctl enable ntpd --now\n[root@host-10-241-105-39 ~]#  systemctl is-active ntpd\nactive\n[root@host-10-241-105-39 ~]# \n\n\n\n# 客户端配置并重启服务\n\n * 指需要修改一项，server注释现有的4项，加一个服务端ip即可。\n\n[root@test ~]# cat /etc/ntp.conf | grep iburst\n#server 0.centos.pool.ntp.org iburst\n##server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\nserver 1.2.105.41 iburst\n[root@test ~]# \n\n\n\n * 重启服务生效\n\n[root@test ~]# systemctl restart ntpd\n\n\n\n# 客户端与NTP server服务器同步一下时间\n\n * 如果时间没有立即同步，执行：ntpdata -u 服务端ip\n   如下，我修改为错误时间立即同步回来。\n\n[root@test ~]# systemctl status ntpd\n● ntpd.service - Network Time Service\n   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled)\n   Active: active (running) since Wed 2022-07-06 04:05:58 UTC; 32min ago\n  Process: 21024 ExecStart=/usr/sbin/ntpd -u ntp:ntp $OPTIONS (code=exited, status=0/SUCCESS)\n Main PID: 21025 (ntpd)\n   CGroup: /system.slice/ntpd.service\n           └─21025 /usr/sbin/ntpd -u ntp:ntp -g\n\nJul 06 04:05:58 test.novalocal ntpd[21025]: Listen normally on 3 eth0 1.2.105.58 UDP 123\nJul 06 04:05:58 test.novalocal ntpd[21025]: Listen normally on 4 lo ::1 UDP 123\nJul 06 04:05:58 test.novalocal ntpd[21025]: Listen normally on 5 eth0 fe80::f816:3eff:fe18:a626 UDP 123\nJul 06 04:05:58 test.novalocal ntpd[21025]: Listening on routing socket on fd #22 for interface updates\nJul 06 04:05:58 test.novalocal ntpd[21025]: 0.0.0.0 c016 06 restart\nJul 06 04:05:58 test.novalocal ntpd[21025]: 0.0.0.0 c012 02 freq_set kernel 0.000 PPM\nJul 06 04:05:58 test.novalocal ntpd[21025]: 0.0.0.0 c011 01 freq_not_set\nJul 06 04:06:05 test.novalocal ntpd[21025]: 0.0.0.0 c614 04 freq_mode\nJul 06 04:27:22 test.novalocal ntpd[21025]: 0.0.0.0 0612 02 freq_set kernel 17.735 PPM\nJul 06 04:27:22 test.novalocal ntpd[21025]: 0.0.0.0 0615 05 clock_sync\n[root@test ~]# \n[root@test ~]# date\nWed Jul  6 04:38:23 UTC 2022\n[root@test ~]# timedatectl set-ntp no\n[root@test ~]# timedatectl set-time \"2022-06-28 17:10:34\"\n[root@test ~]# ntpdate 1.2.105.41\n28 Jun 17:10:46 ntpdate[21076]: the NTP socket is in use, exiting\n[root@test ~]# date\nTue Jun 28 17:10:48 UTC 2022\n[root@test ~]# ntpdate -u 1.2.105.41\n 6 Jul 04:39:32 ntpdate[21079]: step time server 1.2.105.41 offset 646112.382185 sec\n[root@test ~]# date\nWed Jul  6 04:39:35 UTC 2022\n[root@test ~]# \n\n\n\n# 查看同步状态\n\n * 客户端和服务器都可以查询。\n * 前面有*则正常。\n\n#客户端1\n[root@test ~]# ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*host-10-241-105 162.159.200.1    4 u   45   64  377    0.643    3.976  11.360\n[root@test ~]# \n\n#客户端2\n[root@xz-oa-uatapp-05 ~]# ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*1.2.105.41   162.159.200.1    4 u   59   64  377    1.296   -4.194   0.785\n[root@xz-oa-uatapp-05 ~]# \n\n\n\n# 同步时间加入定时任务\n\n * 理论上同步一次时间，如果系统不重启会一直生效保持和服务端时间一致，如果重启后没有立即更新，执行一下 ntpdate -u 服务端ip即可，个人觉得加定时任务意义不大。\n * 客户端设置：\n\n[root@test ~]# ls /usr/sbin/ntpdate \n/usr/sbin/ntpdate\n[root@test ~]# \n[root@test ~]# crontab -e\n\n#加入一行，意思是每天8点30同步一次时间\n30 8 * * * /usr/sbin/ntpdate -u 1.2.105.41\n\n\n\n\n# 时间不同步可能的原因\n\n\n# 1.chrony服务端、客户端 版本是否一致和服务是否正常【chrony各版本之间差异很大，确保版本一致】\n\n * 查看客户端和服务端版本是否一致\n\n# 服务端\n[root@ccx_server128 ~]# chronyc -v\nchronyc (chrony) version 3.2 (+READLINE +IPV6 +DEBUG)\n[root@ccx_server128 ~]# \n#客户端\n[root@ccx_server129 ~]# chronyc -v\nchronyc (chrony) version 3.2 (+READLINE +IPV6 +DEBUG)\n[root@ccx_server129 ~]# \n\n\n\n * 查看服务是否正常\n\n# 服务端\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n# 客户端\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n\n# 2、服务端防火墙原因\n\n * 防火墙这个东西应该没啥好说的了，无论是iptables还是firewalld都最好关闭，如果不能关闭，则放开123端口【上面有说防火墙设置。】\n * selinux也可以关闭。\n   setenforce 0临时关闭\n\n\n# 3、检查服务端和客户端是否能互通\n\n * 也就是说客户端和服务端是不是在同一网络，能互相ssh就证明网络没问题。\n\n\n# 4、看看时区是否正确\n\n * 执行date 如果时区不是CST修改时区，我今天就遇到这个问题了，修改方式如下\n   这种情况一般是要和服务端保持一致哈，如果服务端不是est，客户端单独改了也没用。\n\n[root@ccx_server129 ~]# date\nMon Feb 28 07:58:21 EST 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# timedatectl set-timezone Asia/Shanghai\n[root@ccx_server129 ~]# date\nMon Feb 28 22:56:13 CST 2022\n[root@ccx_server129 ~]# \n\n\n\n\n# 5、间隔2小时左右，chrony服务端机器ntp不同步\n\n * 意思是NTP synchronized这个出问题了，看下面注释后面说的\n   但是此时同步状态是正常的【^*】\n * 未找到相应解决办法。临时解决方法 ：在定时任务中 每隔一段时间重启该客户端的chrony。\n\n[root@ccx_server129 ~]# timedatectl \n      Local time: Tue 2022-03-01 00:22:57 CST\n  Universal time: Mon 2022-02-28 16:22:57 UTC\n        RTC time: Mon 2022-02-28 16:22:57\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: yes # 就是这个变成no了\n RTC in local TZ: yes\n      DST active: n/a\n\nWarning: The system is configured to read the RTC time in the local time zone.\n         This mode can not be fully supported. It will create various problems\n         with time zone changes and daylight saving time adjustments. The RTC\n         time is never updated, it relies on external facilities to maintain it.\n         If at all possible, use RTC in UTC by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# chronyc sources\n210 Number of sources = 1\nMS Name/IP address         Stratum Poll Reach LastRx Last sample               \n===============================================================================\n^* ccx_server128                10   9   377   499    -15us[  -19us] +/-  133us\n[root@ccx_server129 ~]# \n\n\n\n\n# 6、更换为ntp方式连接\n\n * 我在测试环境各种顺畅，跑到真实环境就是各种报错，真绝了。这是今天遇到的一个大坑，解决方式就是更换为ntp。\n * 服务端是chronyd，客户端用chronyd老是出问题，就改用ntp的方式连接chronyd即可。具体方法见上面ntp的方式连接chronyd服务端。\n\n\n# 7、配置文件server和allow\n\n我的服务端今天我是改为如下才正常的。\n可以参考一下。\n\n[root@yum-centos-dmz ~]# cat /etc/chrony.conf \n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\nserver cn.pool.ntp.org iburst\n#server 0.cn.pool.ntp.org iburst\n#server 1.cn.pool.ntp.org iburst\n#server 2.cn.pool.ntp.org iburst\n#server 3.cn.pool.ntp.org iburst\n\n# Record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# Allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# Enable kernel synchronization of the real-time clock (RTC).\nrtcsync\n\n# Enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# Increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# Allow NTP client access from local network.\n#allow 192.168.0.0/16\nallow 1.2.105.0/24\nallow 1.2.0.0/16\n\n# Serve time even if not synchronized to a time source.\n#local stratum 10\n\n# Specify file containing keys for NTP authentication.\n#keyfile /etc/chrony.keys\n\n# Specify directory for log files.\nlogdir /var/log/chrony\n\n# Select which information is logged.\n#log measurements statistics tracking\n[root@yum-centos-dmz ~]# \n\n\n\n\n# 说明\n\n * 一般就上面几种情况导致不同步。\n * 如果你上面都排查了还是没用，仔细检查配置文件，配置文件有问题。\n\n\n# timedatectl说明\n\ntimedatectl是Linux下的一条命令，用于控制系统时间和日期。可以用来查询和更改系统时钟于设定，同时可以设定和修改时区信息。这篇文章简单介绍一下如何使用timedatectl进行常见操作。\n\n\n# 查看系统时间timedatectl\n\n[root@ccx_server128 ~]# timedatectl \n      Local time: 二 2022-03-01 00:47:50 CST #当地时间\n  Universal time: 一 2022-02-28 16:47:50 UTC #伦敦时间\n        RTC time: 一 2022-02-28 16:47:50 #硬件时间\n       Time zone: Asia/Shanghai (CST, +0800) #时区：亚洲上海（东8区）UTC时间加上8等于当前时间\n     NTP enabled: yes #NTP服务\nNTP synchronized: no #NTP时间是否启用\n RTC in local TZ: no  #是否启用RTC硬件时间【设定系统时间计算方式，0表示使用utc时间计算方式，yes为0，no为1】【timedatectl set-local-rtc 1这个命令控制】\n      DST active: n/a\n[root@ccx_server128 ~]# \n\n\n\n\n# 常见用法\n\n * 使用timedatectl可以进行如下常见操作\n   * 查看当前时间/日期/时区：timedatectl或者timedatectl status\n   * 查看所有可用时区：timedatectl list-timezones\n   * 设置时区：timedatectl set-timezone 时区信息\n     * 显示系统的所有时区： timedatectl list-timezones\n     * 如：设定系统时区为亚洲上海timedatectl set-timezone Asia/Shanghai\n   * 设置UTC：timedatectl set-timezone UTC【别乱操作，设置这个以后上面定义的上海+8就没了，变成+0了】\n   * 设置硬件时钟为本地时间：timedatectl set-local-rtc 1【/etc/adjtime 文件中第三个为状态】\n   * 设置硬件时钟为UTC时间：timedatectl set-local-rtc 0【/etc/adjtime 文件中第三个为状态】\n   * 设置时间：timedatectl set-time HH:MM:SS\n   * 设置日期：timedatectl set-time YYYY-MM-DD\n   * 设置日期时间：timedatectl set-time “YYYY-MM-DD HH:MM:SS”【年月日时分秒】\n     * 修改报错执行：timedatectl set-ntp no\n     * 修改时间后执行：clock -w【写入硬件时间，一般2个时间同步修改】\n   * 启动NTP时间同步（启用NTP服务或者Chrony服务）：timedatectl set-ntp true\n   * 禁用NTP时间同步（禁用NTP服务或者Chrony服务）：timedatectl set-ntp false\n\n\n# 使用示例\n\n我觉得上面常见用法中已经很明显了，我这不做全部示例，只做部分。\n\n# 设置时区\n\n * 设置时区：timedatectl set-timezone 时区信息【“要不要都行】\n   * 显示系统的所有时区： timedatectl list-timezones\n   * 如：设定系统时区为亚洲上海timedatectl set-timezone Asia/Shanghai\n\n[root@ccx_server129 ~]# date\nMon Feb 28 07:58:21 EST 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# timedatectl list-timezones | grep hai\nAsia/Shanghai\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# timedatectl set-timezone Asia/Shanghai\n[root@ccx_server129 ~]# date\nMon Feb 28 22:56:13 CST 2022\n[root@ccx_server129 ~]# \n\n\n\n# 设置时间\n\n * 设置时间：timedatectl set-time HH:MM:SS\n\n * 设置日期：timedatectl set-time YYYY-MM-DD\n\n * 设置日期时间：timedatectl set-time “YYYY-MM-DD HH:MM:SS”【年月日时分秒】\n   \n   * 修改报错执行：timedatectl set-ntp no\n   * 修改时间后执行：clock -w【写入硬件时间，一般2个时间同步修改】\n\n * 我这以我ntp服务端时间为例\n\n[root@ccx_server128 ~]# date\n2022年 03月 01日 星期二 01:10:04 CST\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:10:34\"\nFailed to set time: Automatic time synchronization is enabled\n[root@ccx_server128 ~]# timedatectl \n      Local time: 二 2022-03-01 01:13:18 CST\n  Universal time: 一 2022-02-28 17:13:18 UTC\n        RTC time: 一 2022-02-28 17:13:18\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server128 ~]# timedatectl set-ntp no\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:13:55\"\n[root@ccx_server128 ~]# date\n2022年 02月 28日 星期一 17:13:57 CST\n[root@ccx_server128 ~]# timedatectl \n      Local time: 一 2022-02-28 17:14:02 CST\n  Universal time: 一 2022-02-28 09:14:02 UTC\n        RTC time: 一 2022-02-28 09:14:02\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: no\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server128 ~]# timedatectl set-ntp yes\n[root@ccx_server128 ~]# \n\n# 然后我去客户端立即获取。。。多香啊\n[root@ccx_server129 ~]# date\nTue Mar  1 01:15:13 CST 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# ntpdate 192.168.59.128\n28 Feb 17:15:37 ntpdate[46458]: step time server 192.168.59.128 offset -28789.784156 sec\n[root@ccx_server129 ~]# date\nMon Feb 28 17:15:39 CST 2022\n[root@ccx_server129 ~]# \n\n\n\n# 设置硬件时间\n\n * 设置硬件时钟为本地（LOCAL）时间：timedatectl set-local-rtc 1【/etc/adjtime 文件中第三个为状态】\n\n * 设置硬件时钟为UTC时间：timedatectl set-local-rtc 0【/etc/adjtime 文件中第三个为状态】\n\n * 没有加入ntp服务测试：\n\n[root@ccx_server130 ~]# cat /etc/adjtime  #没有加入ntp显示是这样的\n0.0 0 0.0\n0\nUTC\n[root@ccx_server130 ~]# timedatectl \n      Local time: Tue 2022-03-01 01:27:44 CST\n  Universal time: Mon 2022-02-28 17:27:44 UTC\n        RTC time: Mon 2022-02-28 17:27:44\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl set-local-rtc 1 #设置为本地\n[root@ccx_server130 ~]# timedatectl \n      Local time: Tue 2022-03-01 01:27:55 CST\n  Universal time: Mon 2022-02-28 17:27:55 UTC\n        RTC time: Tue 2022-03-01 01:27:56\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: yes\n      DST active: n/a\n\n# 改成local以后会有一串这样的警告，也不知道有啥副作用。。..\nWarning: The system is configured to read the RTC time in the local time zone.\n         This mode can not be fully supported. It will create various problems\n         with time zone changes and daylight saving time adjustments. The RTC\n         time is never updated, it relies on external facilities to maintain it.\n         If at all possible, use RTC in UTC by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nLOCAL  #显示local\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl set-local-rtc 0\n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nUTC\n[root@ccx_server130 ~]# timedatectl \n      Local time: Tue 2022-03-01 01:28:27 CST\n  Universal time: Mon 2022-02-28 17:28:27 UTC\n        RTC time: Mon 2022-02-28 17:28:27\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server130 ~]# \n\n\n\n * 加入ntp\n   就文件中显示不一样而已，我也不知道有啥区别。。。。反正其他倒是一样的，改为local会有一串警告\n\n[root@ccx_server129 ~]# cat /etc/adjtime \n0.000000 1646040080 0.000000\n1646040080\nUTC\n[root@ccx_server129 ~]# \n\n\n\n# UTC测试\n\n * 设置UTC：timedatectl set-timezone UTC【别乱操作，设置这个以后上面定义的上海+8就没了，变成+0了】\n   哈哈 我一开始还没搞懂这个UTC是啥，我以为这个UTC和上面设置硬件时间是一样的【改变的是UTC/LOCAL】\n   下面是我测试，你先看看，能发现啥不~\n\n[root@ccx_server130 ~]# timedatectl  #设置为utc前\n      Local time: Tue 2022-03-01 01:28:27 CST\n  Universal time: Mon 2022-02-28 17:28:27 UTC\n        RTC time: Mon 2022-02-28 17:28:27\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nUTC\n[root@ccx_server130 ~]# timedatectl set-local-rtc 1 \n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nLOCAL\n[root@ccx_server130 ~]# timedatectl set-timezone UTC \n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nLOCAL\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl \n      Local time: Mon 2022-02-28 17:31:43 UTC\n  Universal time: Mon 2022-02-28 17:31:43 UTC\n        RTC time: Mon 2022-02-28 17:31:43\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: yes\n      DST active: n/a\n\nWarning: The system is configured to read the RTC time in the local time zone.\n         This mode can not be fully supported. It will create various problems\n         with time zone changes and daylight saving time adjustments. The RTC\n         time is never updated, it relies on external facilities to maintain it.\n         If at all possible, use RTC in UTC by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server130 ~]# timedatectl set-local-rtc 0\n[root@ccx_server130 ~]# timedatectl \n      Local time: Mon 2022-02-28 17:32:07 UTC\n  Universal time: Mon 2022-02-28 17:32:07 UTC\n        RTC time: Mon 2022-02-28 17:32:08\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server130 ~]# \n\n\n\n * 解密，后面我发现我设置为LOCAL以后，再设置UTC，但我发现配置文件中LOCAL没变，于是确认这个不是设置硬件时间的。\n   然后执行timedatectl set-timezone LOCAL报错了，并且我在timedatectl list-timezones 这里面看到了UTC，发现不对劲，仔细一看timedatectl中的Time zone选项，发现后面变成UTC，并且时间为+0了，哈哈，我之前设置的亚洲上海+8没了。\n   所以，这个UTC就是恢复默认的哦，为+0，所以我还是需要改回去的哈\n\n[root@ccx_server130 ~]# timedatectl set-timezone UTC \n[root@ccx_server130 ~]# timedatectl \n      Local time: Mon 2022-02-28 17:32:12 UTC\n  Universal time: Mon 2022-02-28 17:32:12 UTC\n        RTC time: Mon 2022-02-28 17:32:12\n       Time zone: UTC (UTC, +0000)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl set-timezone Asia/Shanghai\n[root@ccx_server130 ~]# timedatectl \n      Local time: Tue 2022-03-01 01:43:26 CST\n  Universal time: Mon 2022-02-28 17:43:26 UTC\n        RTC time: Mon 2022-02-28 17:43:27\n       Time zone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: no\n RTC in local TZ: no\n      DST active: n/a\n[root@ccx_server130 ~]# \n\n\n\nhttps://blog.csdn.net/cuichongxin/article/details/123178318\n\nhttps://blog.csdn.net/wangjie72270/article/details/122196213?spm=1018.2226.3001.9630.1&extra%5Btitle%5D=Linux%20%E2%9D%89%20Chronyd%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%A6%E8%A7%A3&extra%5Butm_source%5D=vip_chatgpt_common_search_pc_result&extra%5Butm_medium%5D=distribute.pc_search_result.none-task-cask-2~all~insert_cask~default-1-null.142%5Ev96%5Epc_search_result_base2",normalizedContent:"# 命令--13.时间日期\n\n\n# 时区设置\n\n在linux系统中，默认使用的是utc时间。\n\n即使在安装系统的时候，选择的时区是亚洲上海，linux默认的bios时间（也称：硬件时间）也是utc时间。 在重启之后，系统时间会和硬件时间同步，如果两者不一致，会以硬件时间为标准进行时间的校准。所以，之前设置的时区和时间就失效了 北京时间比utc时间早8小时，以2023年1月1日0000utc为例，utc时间是零点，北京时间为2023年1月1日早上8点整。\n\n# 查看当前系统时间\ndate\n\n# 查看当前硬件时间\nhwclock或clock\n\n#查看当前系统时区\ndate -r\n\n\n\n[root@jysp jysp]# date \n2023年 12月 15日 星期五 09:14:28 cst\n\n[root@jysp jysp]# hwclock\n2023年12月15日 星期五 09时12分57秒  -0.179492 秒\n\n[jysp@jysp ~]$ date -r\nfri, 15 dec 2023 09:12:23 +0800\n\n\n\n\n# 图形化设置\n\ncentos7如何图形化设置时区？\n\n这与图形化设置网络、设置主机名、设置新用户等，基本相同。过程简单，对于初学者比较友好。\n\n# 1.进入设置\n\n点击【应用程序】->【系统工具】->【设置】选项\n\n\n\n# 2.找到时区\n\n点击【详细信息】->【日期和时间】\n\n\n\n# 3.操作认证\n\n点击【解锁】并输入密码进行【认证】\n\ncentos7不需要认证，而centos8和ubuntu 修改时区时需要认证。按要求认证即可。\n\n# 4.自动设置\n\n开启【自动设置日期和时间】、【自动设置时区】选项\n\n根据情况，可决定是否开启自动设置。\n\n\n# tzselect\n\n用tzselect设置时区采用人机交互的形式，十分方便。\n\n命令中第一个字母t是时间time的简写; 命令中第二个字母z是区域zone的简写。\n\n使用tzselect 设置时区，按照提示，一步步进行，没有难度。 按照提示一路选择: 5) asia —-> 9) china ——> 1) beijing 但成功设置后，会提示把时区变量作为全局变量添加到profile中\n\n\n\n1.可以采用命令追加形式\n\necho “export tz='asia/shanghai'”  >>/etc/profile\n\n\n2.可以采用vim 打开文件，在最后一行添加内容\n\nexport  tz='asia/shanghai'\n\n\n保存，退出 完成对文件的修改后，并不能马上更改时区，仍然需要执行命令 source /etc/profile 当执行source命令时，系统会退出当前bash，并重新登录。 再重新查看时间与时区，已更新。\n\n\n# timedatectl\n\ntimedatectl是一个命令行工具，它允许你查看或者修改系统的时间和日期。它在所有现代的基于 system 的 linux 系统中都可以使用。 timedatectl 打印当前时区信息 如果不带参数直接运行，会正常打印出时间信息。\n\ntimedatectl 查看可以设置的时区\n\ntimedatectl list-timezones\n\n\n带上list-timezones参数运行下，看到如下的结果：\n\n上面的结果展示不全， 往下翻找可以看到 asia/shanghai 这一行。\n\n不想全部看完，可按q退出查看。\n\ntimedatectl 设置时区\n\ntimedatectl set-timezone asia/shanghai\n\n\n\n# cp文件设置时区\n\ncp文件设置时区\n\n    cp /usr/share/zoneinfo/asia/shanghai /etc/localtime\n\n\n这种方式也可以设置时间，但是还是建议使用timedatectl工具。 因为timedatectl工具屏蔽了各个linux的差异性。vim修改时区文件\n\n\n# vim修改时区文件\n\n我们如何确定自己的时区是正确的？ 时区文件默认的是：/etc/localtime 下面命令会把我们系统的时间还有时区显示出来\n\n\n\n原文链接：https://blog.csdn.net/qq_36142959/article/details/132719285\n\n\n# 时间命令\n\n\n# 1、date命令（重点）\n\ndate :打印或者设置当前系统日期和时间\n\ndate --help 自己先求帮助\n\n用法：date [选项]... [+格式]\n　或：date [-u|--utc|--universal] [mmddhhmm[[cc]yy][.ss]]\ndisplay the current time in the given format, or set the system date.\n \nmandatory arguments to long options are mandatory for short options too.\n  -d, --date=string         display time described by string, not 'now'\n  -f, --file=datefile       like --date once for each line of datefile\n  -i[timespec], --iso-8601[=timespec]  output date/time in iso 8601 format.\n                            timespec='date' for date only (the default),\n                            'hours', 'minutes', 'seconds', or 'ns' for date\n                            and time to the indicated precision.\n  -r, --reference=文件          显示文件指定文件的最后修改时间\n  -r, --rfc-2822                以rfc 2822格式输出日期和时间\n                                例如：2006年8月7日，星期一 12:34:56 -0600\n      --rfc-3339=timespec   output date and time in rfc 3339 format.\n                            timespec='date', 'seconds', or 'ns' for\n                            date and time to the indicated precision.\n                            date and time components are separated by\n                            a single space: 2006-08-07 12:34:56-06:00\n  -s, --set=string          set time described by string\n  -u, --utc, --universal    print or set coordinated universal time (utc)\n      --help            显示此帮助信息并退出\n      --version         显示版本信息并退出\n\n给定的格式format 控制着输出，解释序列如下：\n\n  %%    一个文字的 %\n  %a    当前locale 的星期名缩写(例如： 日，代表星期日)\n  %a    当前locale 的星期名全称 (如：星期日)\n  %b    当前locale 的月名缩写 (如：一，代表一月)\n  %b    当前locale 的月名全称 (如：一月)\n  %c    当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)\n  %c    世纪；比如 %y，通常为省略当前年份的后两位数字(例如：20)\n  %d    按月计的日期(例如：01)\n  %d    按月计的日期；等于%m/%d/%y\n  %e    按月计的日期，添加空格，等于%_d\n  %f    完整日期格式，等价于 %y-%m-%d\n  %g    iso-8601 格式年份的最后两位 (参见%g)\n  %g    iso-8601 格式年份 (参见%v)，一般只和 %v 结合使用\n  %h    等于%b\n  %h    小时(00-23)\n  %i    小时(00-12)\n  %j    按年计的日期(001-366)\n  %k   hour, space padded ( 0..23); same as %_h\n  %l   hour, space padded ( 1..12); same as %_i\n  %m   month (01..12)\n  %m   minute (00..59)\n  %n    换行\n  %n    纳秒(000000000-999999999)\n  %p    当前locale 下的\"上午\"或者\"下午\"，未知时输出为空\n  %p    与%p 类似，但是输出小写字母\n  %r    当前locale 下的 12 小时时钟时间 (如：11:11:04 下午)\n  %r    24 小时时间的时和分，等价于 %h:%m\n  %s    自utc 时间 1970-01-01 00:00:00 以来所经过的秒数\n  %s    秒(00-60)\n  %t    输出制表符 tab\n  %t    时间，等于%h:%m:%s\n  %u    星期，1 代表星期一\n  %u    一年中的第几周，以周日为每星期第一天(00-53)\n  %v    iso-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53)\n  %w    一星期中的第几日(0-6)，0 代表周一\n  %w    一年中的第几周，以周一为每星期第一天(00-53)\n  %x    当前locale 下的日期描述 (如：12/31/99)\n  %x    当前locale 下的时间描述 (如：23:13:48)\n  %y    年份最后两位数位 (00-99)\n  %y    年份\n  %z +hhmm              数字时区(例如，-0400)\n  %:z +hh:mm            数字时区(例如，-04:00)\n  %::z +hh:mm:ss        数字时区(例如，-04:00:00)\n  %:::z                 数字时区带有必要的精度 (例如，-04，+05:30)\n  %z                    按字母表排序的时区缩写 (例如，edt)\n\n默认情况下，日期的数字区域以0 填充。\nthe following optional flags may follow '%':\n\n  -  (hyphen) do not pad the field\n  _  (underscore) pad with spaces\n  0  (zero) pad with zeros\n  ^  use upper case if possible\n  #  use opposite case if possible\n\n在任何标记之后还允许一个可选的域宽度指定，它是一个十进制数字。\n作为一个可选的修饰声明，它可以是e，在可能的情况下使用本地环境关联的\n表示方式；或者是o，在可能的情况下使用本地环境关联的数字符号。\n\nexamples:\nconvert seconds since the epoch (1970-01-01 utc) to a date\n  $ date --date='@2147483647'\n\nshow the time on the west coast of the us (use tzselect(1) to find tz)\n  $ tz='america/los_angeles' date\n\nshow the local time for 9am next friday on the west coast of the us\n  $ date --date='tz=\"america/los_angeles\" 09:00 next fri'\n\ngnu coreutils online help: <http://www.gnu.org/software/coreutils/>\n请向<http://translationproject.org/team/zh_cn.html> 报告date 的翻译错误\n要获取完整文档，请运行：info coreutils 'date invocation'\n\n\n# ① 打印日期或时间\n\n常用格式：\n    获取系统当前时间\n    yyyy-mm-dd\n\t    date +%f\n    \tdate +%y-%m-%d\n\n    yyyy-mm-dd hh:mm:ss\n\t    date +'%f %t'\n    \tdate +'%y-%m-%d %h:%m:%s'\n\n\t获取非当前时间 days,months,years\n\tyyyy-mm-dd\n\t\tdate -d '+3days' +'%f %t'\n\t\tdate --date='3days' +'%f %t'\n\t\t\n\t\tdate -d '-3days' +'%f %t'\n\t\tdate -d '3days ago' +'%f %t'\n\t\tdate --date='-3days' +'%f %t'\n\n\n\n打印系统当前日期或时间\n[root@heima ~]# date\n[root@heima ~]# date +%d\n[root@heima ~]# date +%f\n[root@heima ~]# date +%y-%m-%d\n[root@heima ~]# date +%t\n[root@heima ~]# date +%x\n[root@heima ~]# date +'%f %x'\n[root@heima ~]# date +%c\n打印系统非当前日期或时间\n[root@heima ~]# date -d '+3days' +%f\n[root@heima ~]# date -d '-3days' +%f\n[root@heima ~]# date -d '3days' +%f\n[root@heima ~]# date -d '3days ago' +%f\n[root@heima ~]# date --date='30days' +%f\n\n\n[jysp@jysp ~]$ date +'%y %m %d'\n2023 11 01\n[jysp@jysp ~]$ date +%t\n10:32:06\n[jysp@jysp ~]$ date +%x\n10时32分14秒\n[jysp@jysp ~]$ date +%f %x\ndate: 额外的操作数 \"%x\"\ntry 'date --help' for more information.\n[jysp@jysp ~]$ date +'%f %x'\n2023-11-01 10时32分30秒\n[jysp@jysp ~]$ date +%c\n2023年11月01日 星期三 10时33分10秒\n[jysp@jysp ~]$ date -d\ndate：选项需要一个参数 -- d\ntry 'date --help' for more information.\n[jysp@jysp ~]$ date -d '+3days' +%f\n2023-11-04\n[jysp@jysp ~]$ date -d '+3days' +%c\n2023年11月04日 星期六 10时34分06秒\n[jysp@jysp ~]$ date -d '-3days' +%f\n2023-10-29\n[jysp@jysp ~]$ date -d '3days ago' +%f\n2023-10-29\n[jysp@jysp ~]$ date -d '3days' +%f\n2023-11-04\n[jysp@jysp ~]$ date --date='30days' +%f\n2023-12-01\n[jysp@jysp ~]$ \n\n\n# ② 设置系统日期或时间\n\n选项：-s 设置当前系统时间，只有root权限才能设置，其他只能查看。\ndate -s 20200523 设置成20100523，这样会把具体时间设置成空00:00:00\ndate -s \"01:01:01 2020-05-2\" 这样可以设置全部时间\ndate -s \"01:01:01 20200523\" 这样可以设置全部时间\ndate -s \"2020-05-23 01:01:01\" 这样可以设置全部时间\ndate -s \"20200523 01:01:01\" 这样可以设置全部时间\n\n注意：\n红帽8，设置为过去的时间，过段时间会被重置为当前时间\n\n\n\n# 2、hwclock命令\n\n# ③ 系统时间同步硬件时间\n\nhwclock :查看并且设置硬件时间\n\n选项：\n# 设置系统时间：从硬件时间同步到系统时间\n-s, --hctosys set the system time from the rtc\n# 设置硬件时间：从系统时间同步到硬件时间\n-w, --systohc set the rtc from the system time\n# 查看硬件时间\n-l, --localtime the rtc timescale is local\n\n\n举例说明：\n[root@heima ~]# hwclock --hctosys\n[root@heima ~]# hwclock\n2019-06-23 18:44:10.377920+08:00\n\n[root@heima ~]# date\n2019年 06月 23日 星期日 18:44:21 cst\n[root@heima ~]# date -s \"20221010 12:12:12\"\n2022年 10月 10日 星期一 12:12:12 cst\n[root@heima ~]# date\n2022年 10月 10日 星期一 12:12:14 cst\n[root@heima ~]# hwclock\n2019-06-23 18:45:01.368135+08:00\n[root@heima ~]# hwclock --systohc\n[root@heima ~]# hwclock\n2022-10-10 12:12:43.179274+08:00\n\n\n\n# 3、timedatectl命令\n\ntimedatectl\n\n查看当前时间、时区、ntp服务状态 设置系统时间、硬件时间、时区\n\n> ntp服务\n\n# 从7开始就有\ntimedatectl -h 设置和查看系统的时间和日期（设置时区以及开启或关闭ntp服务）\n\n# 查看当前时间\n[jysp@jysp ~]$ timedatectl status\n      local time: 三 2023-11-01 10:47:08 cst\n  universal time: 三 2023-11-01 02:47:08 utc\n        rtc time: 三 2023-11-01 02:47:42\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n\n\n# 关闭ntp同步\ntimedatectl set-ntp no\n\n\n# 设置时间:系统时间、硬件时间\ntimedatectl set-time 2020-10-10\ntimedatectl set-time 11:11:11\ntimedatectl list-timezones\ntimedatectl set-timezone xxx\n\n\n\n# 同步当前时间\n# 6版本中\nntpdate\n\n# 8版本中\ntimedatectl set-ntp yes\ntimedatectl status\nchronyc makestep\n\n\n\n# 4、cal命令（了解）\n\ncal :查看日历\n\n用法：\n cal [选项] [[[日] 月] 年]\n\n选项：\n -1, --one        只显示当前月份(默认)\n -3, --three      显示上个月、当月和下个月\n -s, --sunday     周日作为一周第一天\n -m, --monday     周一用为一周第一天\n -j, --julian     输出儒略日\n -y, --year       输出整年\n -v, --version    显示版本信息并退出\n -h, --help       显示此帮助并退出\n\n\n\ncal 或者 cal -1 \t\t表示直接输出当前月份的日历\ncal -3 \t\t\t\t 表示输出上一个月+本月+下个月的日历\ncal -y 年份 \t\t\t表示输出某一个年份的日历\n\n\n\n# 5、tzselector（了解）\n\n用tzselect设置时区采用人机交互的形式，十分方便。\n\n命令中第一个字母t是时间time的简写; 命令中第二个字母z是区域zone的简写。\n\n使用tzselect 设置时区，按照提示，一步步进行，没有难度。 按照提示一路选择: 5) asia —-> 9) china ——> 1) beijing\n\n\n# 综合应用\n\n# ④ 应用案例\n\n> 有时候我们需要用到当前的系统时间，如何调用？比如以当前系统日期命名创建目录或文件\n\n2020-10-10.log.tar.gz\n2020-10-11.log.tar.gz\n$()：括号里面的命令优先执行 \tdate +%f \t\t2019-06-23\n`` ：引号里面的命令优先执行，不允许嵌套\n\n创建目录和文件，以当前系统日期命名\n[root@heima ~]# mkdir $(date +%f)\n[root@heima ~]# touch $(date -d '+3days' +%y%m%d).log\n\n\n\n# 时间同步ntp\n\n\n# 1、了解时间同步的重要性\n\n由于it系统中，准确的计时非常重要，有很多种原因需要准确计时，如\n\n在网络传输中，数据包和日志需要准确的时间戳\n\n各种应用程序中，如订单信息，交易信息等都需要准确的时间戳\n\n在linux系统中， network time protocol (ntp)，ntp协议由在用户空间中运行的守护程序实现，即ntp和chrony。\n\n> 红帽6以前使用ntp，红帽7ntp和chrony，红帽8 chrony\n\n\n# 2、了解时间同步服务器\n\n\n\n查看可以提供时间同步的服务器：\n\nhttp://www.ntp.org.cn/pool\n\n\n\n\n# 3、chrony如何同步自己系统时间\n\n> 需要联网\n\n（1）方式一：自动同步\n\n# 手动设置时间\ndate -s \"2020-10-10 10:10:10\"\n\n# 查看chrony安装包\nyum list|grep chrony\n\n# 查看软件包，配置文件位置\nrpm -qc chrony\n\n\n\n\n# 重启服务\nsystemctl restart chronyd.service\nsystemctl status chronyd.service\n\n# 修改时间，测试自动同步\ndate -s \"2020-10-10 10:10:10\"\n\n\n（2）方式二：手动临时同步\n\n临时指定ntp服务器同步\n\nsystemctl status chronyd.service\nsystemctl stop chronyd.service\n\nchronyd -q \"server cn.ntp.org.cn iburst\"\n\n\n\n# 4、chrony搭建时间同步服务\n\n# ㈠ 了解rhel7和rhel8区别\n\n * 在rhel7中，用户可以在ntp和chrony之间进行选择，以确保准确的计时。\n\n * 在rhel8中，不再支持ntp,使用chronyd守护进程来实现ntp,默认已启用,从chrony软件包获得。\n\n * chrony和ntp之间的差异\n   \n   * ntpd服务器在控制客户端访问方式上默认响应来自任何地址的请求，相对不安全chronyd默认不允许访问，要想提供时间同步服务端需要在allow中指定\n   \n   * ntpd 和 chronyd 在系统时钟校正方面的默认行为也不同。\n   \n   * 客户端同步方式有差异\n\n * 还有很多不同可以参考官方网站：https://chrony.tuxfamily.org/comparison.html\n\n总结：\n\nchrony在各种条件下表现良好，包括间歇性网络连接，高度拥挤的网络，温度变化（普通计算机时钟对温度敏感），以及不能连续运行或在虚拟机上运行的系统。\n\n# ㈡ rhel8配置时间同步服务\n\n 1. 关闭防火墙和selinux（实验）\n\n 2. 配置软件仓库\n\n 3. 软件三部曲\n    \n    * 安装软件\n    \n    * 确认软件是否成功安装\n    \n    * 查看软件的文件列表（配置文件、程序本身、man手册）\n\n 4. 了解配置文件（man 5 xxx.conf）\n\n 5. 根据需求通过修改配置文件来完成服务搭建\n\n 6. 启动服务，开机自启动\n\n 7. 测试验证\n\n * 时间同步服务器端\n   \n   # 防火墙\n   systemctl status firewalld.service\n   # selinux\n   getenforce\n   # 软件仓库\n   dnf repolist\n   # 查看软件包\n   rpm -q chrony\n   # 查看配置文件\n   rpm -ql chrony\n   \n   \n   \n   # vim /etc/chrony.conf\n   #自己本身向谁来同步时间\n   pool cn.ntp.org.cn iburst\n   #允许哪些客户端来同步,192.168.159网段的ip/子网掩码24位\n   allow 192.168.159.0/24\n   \n   重启服务\n   systemctl restart chronyd.service\n   \n   查看服务状态\n   systemctl status chronyd.service\n   \n   查看udp端口状态\n   netstat -nlup|grep chronyd\n   \n\n * 客户端\n   \n   修改配置文件\n   \n   \n   \n   重启服务\n   systemctl restart chronyd.service\n   \n   查看当前客户端使用的源\n   chronyc sources\n   chronyc sourcestats\n   chronyc sources -v\n   \n   [root@client ~]# chronyc sources\n   210 number of sources = 1\n   ms name/ip address stratum poll reach lastrx last sample\n   ===============================================================================\n   ^? 192.168.159.100 3 6 37 5 +10766h[+10766h] +/- 3872us\n   \n   手动同步时间，官方不建议使用\n   [root@client ~]# chronyc makestep\n   200 ok\n   \n\n> *代办当前在使用的源\n\n\n\n\n# 5、windows开启ntp服务功能\n\n（1）打开搜索注册表或win+r 输入regedit\n\n\n\n\n\n（2）设定授权时间服务器\n\n注册表路径： hkey_local_machine\\system\\currentcontrolset\\services\\w32time\\config\n\n修改 announceflags 数a改为 5\n\n\n\nhkey_local_machine\\system\\currentcontrolset\\services\\w32time\\timeproviders\\ntpserver\n\n修改 enabled 数值0修改为 1\n\n\n\n（3）搜索服务或 win+r 输入services.msc打开服务面板\n\n\n\n\n\n（4）启动服务\n\n\n\n\n\n服务的启停，需要使用管理员运行\n\n * net start w32time\n\n * net stop w32time\n\nmicrosoft windows [版本 10.0.19045.3693]\n(c) microsoft corporation。保留所有权利。\n\nc:\\windows\\system32>net start w32time\n请求的服务已经启动。\n\n请键入 net helpmsg 2182 以获得更多的帮助。\n\n\nc:\\windows\\system32>net stop w32time\nwindows time 服务正在停止.\nwindows time 服务已成功停止。\n\n\nc:\\windows\\system32>net start w32time\nwindows time 服务正在启动 .\nwindows time 服务已经启动成功。\n\n\n\n\n\n\n本机测试\n\nc:\\users\\miyufeng>w32tm /stripchart /computer:127.0.0.1\n正在跟踪 127.0.0.1 [127.0.0.1:123]。\n当前时间是 2023/12/17 15:23:45。\n15:23:45, d:+00.0013197s o:+00.0004149s  [                           *                           ]\n15:23:47, d:+00.0006835s o:+00.0002398s  [                           *                           ]\n15:23:49, d:+00.0004796s o:+00.0000808s  [                           *                           ]\n\n\n（5）防火墙配置\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n（6）局域网内设备时间同步测试\n\n\n\n\n\n\n\n\n# 6、ntp工具\n\n# ntp客户端\n\n1、安装ntp和ntpdate两个rpm包。\n\n使用yum install ntp、yum install ntpdate命令执行安装操作（本次省略）\n\n2、配置ntp客户端文件【/etc/ntp.conf】中的server项, 只保留server的有效行（默认有3-4行server有效行去向公网同步时间，需注释掉）。如\n\nserver 172.29.12.120  perfer      #提供ntp-server的主机地址\nserver  172.29.120.12 perfer  (iburst）    #提供ntp-server的主机地址\n\n\n#restrict default kod nomodify notrap nopeer noquery 注释此行内容 作为ntp服务器可注释掉（取消默认不行其他主机连接同步时间）\n\nserver x.x.x.x iburst 同步时间服务ip 客户端只是配这个就可以\n\n3、启动ntpd服务、并添加至开机启动项。如\n\n启动服务\n\nsystemctl  start  ntpd        #启动ntpd服务\nsystemctl  start  ntpdate\nsystemctl enable  ntpd        #将ntpd添加到开机启动项\nsystemctl enable  ntpdate\nsystemctl is-enabled ntpd        #查看是否在开机启动项\nsystemctl is-enabled ntpdate\nsystemctl list-unit-files | grep ntp     #查看是否在开机启动项\nsystemctl status ntpd                     #查看ntpd服务的状态\n\n\n4、验证\n\n ntpq -p           #查看该主机使用的ntp-server情况和同步延时等信息；\n timedatectl      #查看ntpd服务或chronyd服务是否生效。\n                  #只有centos7、redhat7、ubuntu14等以上（含）才有该命令；\n\n\n5、其他配置（或添加时间同步的计划任务） 使用ntpdate命令也可以执行ntp时间同步，不需要ntp客户的ntpd服务。如\n\nntpdate 172.29.120.12     #向172.29.120.12的ntpserver主机同步本地系统时间。\nntpdate -u 172.29.120.12  ##同上，-u参数是可以在客户端ntpd服务启动时同时执行的命令。\n\n\n计划任务中的时间同步，同样的效果。也可以和客户端的ntpd服务同时存在。\n\ncrontab -l\n0 0 * * 0 /usr/sbin/ntpdate -u 172.29.120.12 || /usr/sbin/ntpdate -u 172.29.12.120\n\n\n\n\n查看服务状态 ntpstat ntptime timedatectl 三个命令看状态\n\n\n\ncentos7下使用ntp遇到的问题 问题1、在centos7下使用ntp时，客户端ntpd服务添加到开机启动项中了，但主机系统启动后ntpd服务还是停止状态（dead），无法正常启动。 解决以上现象有两种方法 ，本人常用方法一的操作： 方法一： 1.通过命令 systemctl enable ntpd 设置ntp服务开机自启动。 2.重启虚拟机后查看 服务运行状态 systemctl status ntpd ，发现服务并没有成功启动。 3.查看chrony是否被设置为开机自启动。通过指令 systemctl is-enabled chronyd 或systemctl list-unit-files | grep chrony 查看，发现这个服务已经被设置为开机自启动所以导致ntp服务的自启动失败。 4.所以要把 chrony 的自启动去掉。执行指令 systemctl disable chronyd 。 5.重启虚拟机， 执行 systemctl status ntpd ，问题解决。 systemctl list-unit-files|grep ntpd systemctl list-unit-files|grep chrony\n\n方法二： 需要开机自启动某服务，第一个想到的当然是开机启动自定义脚本。 在centos之前版本只要在 /etc/rc.d/rc.local 文件中加入 启动服务的命令，当虚拟机重启时就会执行该文件中的命令，服务也就启动了。但是但centos7版本，这个文件的权限被降低了，所以当你打开这个文件时，注释中很友好的提示让你给这个文件赋权，以确保它有可执行权限。chmod +x /etc/rc.d/rc.local 。 所以只要把指令写到这个文件中，就可以在开机时启动服务或者让虚拟机做其它事情。 chmod +x /etc/rc.d/rc.local echo “systemctl start ntpd” >> !$\n\n问题2、ntpdate命令执行报错，提示ntpd服务已经存在（ntpdate：the ntp socket is in use, exiting） 报错的原因是因为客户端有ntpd服务在运行。因此需要继续执行，必须加-u参数，如 update -u 172.29.120.12\n\n\n\n问题3、启动了ntpd服务，却未执行过同步时间操作。 需要检查ntpd服务是否生效、并应用是否也生效了。如\n\n\n\n\n\n查看状态 ntpstat ntptime timedatectl\n\n\n\n1、npq -p 执行结果的参数解释\n\n\n\nntpq -p命令列出了所有作为时钟源校正过本地ntp服务器时钟上层ntp服务器的列表，每一列的含义分别如下： remote：响应请求的ntp服务器的名称（ip地址或域名），带“”的表示本地ntp服务器与该服务器同步 refid：远程ntp服务器使用的上一级ntp服务器的ip地址 st：远程ntp服务器的级别，由于ntp是层级结构，有顶端的服务器，多层的relay server再到客户端。所以服务器从高到低，级别可以设定为1~16级。为了减缓负荷和网络堵塞，原则上应该避免直接连接到级别为1的服务器。 t：本地ntp服务器与远程ntp服务器的通信方式。u：单播；b：广播；i：本地 when：上次成功请求后到现在的秒数 poll：本地ntp服务器与远程ntp服务器同步的时间间隔。 reach：这是一个八进制的值，用来测试衡量前八次查询是否成功和服务器连接。377表示都成功，0表示不成功 delay：网络延时，单位为微秒（μs） offset：本地ntp服务器与远程ntp服务器的时间偏移，单位为毫秒（ms）。offset越接近于0，主机与ntp服务器的时间越接近 jitter：查询偏差的分布值，用于表示远程ntp的网络延时是否稳定，单位为微秒（μs）*\n\n2、timedatectl 命令的讲解 timedatectl输出解析\n\n\n\n1.1.local time 本地时间，初始值来自于rtc，由内核维护，系统启动之后和rtc就没有关系，通常等于rtc+时区值（如上图的本地时间=rtc+8）\n\n1.2.universal time 系统时间永远是utc，在应用程序使用的时候转换为本地时间\n\n1.3.rtc（real-time clock）time 指硬件时间，一般是主板上的特殊电路，专用用于记录时间，有电池供电，不受服务器和操作系统的开启关闭影响。也称作bios时间。 需要注意的是：当/etc/sysconfig/clock 文件中 utc=true时， bios 使用utc时间； utc=false时， bios 使用本地时间。 hwclock --localtime #显示 bios 中实际的时间 hwclock --systohc #根据系统时间设置硬件时间\n\n1.4.time zone 本地时区，即服务器所在的时区，在中国通常使用asia/shanghai timedatectl set-timezone “asia/shanghai” #设置时区为上海\n\n1.5.ntp enable 状态为“yes”,表示开启ntp同步。 网络时间协议，英文名称：network time protocol（ntp）是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源（如石英钟，gps等等)做同步化，它可以提供高精准度的时间校正。 timedatectl set-ntp true #开启ntp同步 timedatectl set-ntp false #禁止ntp同步\n\n1.6.ntp synchronized 为“yes”,表示ntp同步完成。\n\n1.7.rtc in local tz 设置rtc时间，为\"no\"表示未设置 timedatectl set-local-rtc 1 #将rtc设置为本地时间 timedatectl set-local-rtc 0 #将rtc设置为utc\n\n2.2、timedatectl常用命令 timedatectl set-time 15:58:30 #只设置时间 timedatectl set-time 20151120 #只设置日期 timedatectl set-time ‘16:10:40 2015-11-20’ #设置时间和日期2.3 相关命令\n\nrpm -qi ntp 查看版本 最新\n\ndate 系统时间 clock 硬件时间\n\ndate -s 设置系统时间 clock -w 系统时间同步到硬件时间\n\nntpdate ip 同步ntp服务器时间\n\nchkconfig --list ntpd 查看开机启动\n\nchkconfig ntpd on 开机启动\n\nntpq -p 客户端查看同步情况 *号代表同步成功 ntpstat\n\nps aux | grep ntpd 查看进程\n\nss -ntul 看进程端口 netstat -anp | grep ntpd ss -ntulp 看进程端口\n\ncrontab -l; echo \"*/60 * * * * /usr/sbin/ntpdate x.x.x.x(ntp服务器ip) >>/tmp/ntp.log 设置定时同步 crontab -l 查看计划任务\n\necho \"*/60 * * * * /usr/sbin/ntpdate x.x.x.x(ntp服务器ip) >>/tmp/ntp.log\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# chrony和ntp\n\n\n# chrony和ntp的区别\n\n * （1）chronyd做的比ntpd好的\n   * chronyd可以在时断时续访问参考时间源的环境下工作，而ntpd需要定期轮询参考时间源才能正常工作。\n   * 即使网络拥塞时间更长，chronyd也可以运行良好。\n   * chronyd通常可以更快、更准确地同步时钟。\n   * chronyd能够快速适应晶体振荡器温度变化引起的时钟频率的突然变化，而ntpd可能需要很长时间才能稳定下来。\n   * 在默认配置下，为了不影响其他正在运行的程序，chronyd从不在系统启动同步时钟之后执行时间步进。ntpd也可以配置为从不步进时间，但它必须使用不同的方法来调整时钟，这有一些缺点，包括对时钟精度的负面影响。\n   * chronyd可以在更大的范围内调整linux系统上的时钟频率，这使得它甚至可以在时钟损坏或不稳定的机器上运行。例如，在一些虚拟机上。\n   * chronyd体积更小，占用的内存更少，而且只有在必要的时候才会唤醒cpu，这对于节能来说是更好的选择。\n * （2）chronyd能做的但ntpd做不到的\n   * chronyd提供了对孤立网络的支持，在孤立网络中，时间校正的唯一方法就是手动输入。例如，由管理员查看时钟。chronyd可以检查在不同的更新中修正的错误，从而估算出计算机增加或减少时间的速度，并在随后使用这个估算来调整计算机时钟。\n   * chronyd可以计算rtc时钟（在计算机关闭时保持时间的时钟）的增益和损耗率。它可以在系统启动时使用这些计算的数据，以及从rtc时钟获取的时间调整值来设置系统时间。rtc时钟设备目前仅在linux系统上可用。\n     支持linux上的硬件时间戳，允许在本地网络上进行非常精确的同步。\n * （3）ntpd做得到但chronyd做不到的\n   * ntpd支持ntp v4（rfc 5905）的所有同步模式，包括broadcast、multicast和manycast clients and servers模式。请注意，broadcast和multicast模式（即使有身份验证）与普通servers and clients模式相比，更不精确、更不安全，通常应避免使用。\n   * ntpd支持使用公钥加密的autokey协议（rfc 5906）对服务器进行身份验证。注意，该协议已被证明是不安全的，可能会被network time security（nts）取代。\n   * ntpd包含很多参考时间源的驱动程序，而chronyd依赖于其他程序（例如gpsd），以使用共享内存（shm）或unix domain socket（sock）访问参考时间源的数据。\n * （4）chronyd与ntpd，该怎么选\n   * 除了由不支持chrony的工具管理或监视的系统，或者具有不能与chrony一起使用的硬件参考时钟的系统之外，其他系统都应该首选chrony。\n   * 需要使用autokey协议对数据包进行身份验证的系统只能使用ntpd，因为chronyd不支持这个协议。autokey协议存在严重的安全问题，应避免使用该协议。使用对称密钥进行身份验证，而不是使用autokey，这是chronyd和ntpd都支持的。chrony支持更强的哈希函数，如sha256和sha512，而ntpd只能使用md5和sha1。\n\n\n# chrony的组成与端口说明\n\n * chrony 是由 守护进程 chronyd 以及 命令行工具 chronyc 组成的，具体如下图\n   \n\n * chronyd 在后台静默运行并通过 123 端口与时间服务器定时同步时间，默认的配置文件是 /etc/chrony.conf\n\n * chronyc 通过 323 端口与 chronyd 交互，可监控 chronyd 的性能并在运行时更改各种操作参数\n   chronyc 通过下面的方式访问 chronyd\n   \n   * 1、通过 ipv4 或 ipv6 访问\n   * 2、通过 unix 域 socket, 但只能访问到本地的 chronyd，而且需要 root 用户或者 chrony 用户才能访问\n\n * chronyd和ntp一样，端口都是udp\n\n[root@yum-centos-dmz ~]# netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           8938/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           8938/chronyd        \nudp6       0      0 ::1:323                 :::*                                8938/chronyd        \n[root@yum-centos-dmz ~]# \n\n\n\n * 默认情况下，chronyc 先通过 unix 域 socket 访问 chronyd，默认的 socket 文件是 /var/run/chrony/chronyd.sock, 如果失败（常见的原因是使用非 root 用户运行 chronyc ），将尝试通过 127.0.0.1 访问 chronyd\n\n\n# chrony安装和命令管理说明\n\n * 在新的 linux 发行版（centos8、ubuntu 20.04、fedora 30）及以后的版本中，系统默认已经安装了 chrony，在这之前的版本是没有安装的，可以使用下面的命令进行安装\n   yum install chrony -y\n * 安装完成后，chrony 服务默认会自动加到 systemctl 中管理，下面列出了一些常用的命令\n\n#查询 chronyd 服务状态\nsystemctl status chronyd     \n\n#启动 chronyd 服务\nsystemctl start chronyd   \n\n#关闭 chronyd 服务\nsystemctl stop chronyd   \n\n#重启 chronyd 服务\nsystemctl restart chronyd   \n\n#设置 chronyd 服务开机自启\nsystemctl enable chronyd\nsystemctl daemon-reload\n\n\n\n# 启动服务报错处理\n\n另外，启动 chronyd 服务的时候如果出现下面截图中的错误，需要安装或者升级 libsepol、policycoreutils-python【最小化安装的系统可能会出现这种问题】 查看日志或者执行journalctl -xe均可查看报错内容~\n\n * 具体的问题说明详见red hat bugzilla – bug 1592775\n\n * 解决方法 安装 libsepol 和 policycoreutils-python yum install libsepol policycoreutils-python -y\n\n\n# chrony常用配置参数说明\n\n * 守护进程 chronyd 的默认配置文件是 /etc/chrony.conf，其中可配置项很多，这里介绍一些常用的\n\n配置项                说明\nserver             客户端需找哪个服务器询问当前时间\npool               同 server 配置项\ndriftfile          本地时钟和服务器时钟的预估漂移保存到哪个文件中\nmakestep           纠正客户端时间的步进参数\nrtcsync            是否允许内核同步实时时钟\nallow              允许客户端通过内网地址同步时钟\nlocal stratum 10   开启，即使server指令种时间服务器不可用，也允许将本地时间作为标准时间授予其他客户端\nlogdir             日志目录\n\n\n# chronyd常用命令说明\n\n * 查看时间同步源状态： chronyc sourcestats -v 【-v是列出详细，可以不要】\n * 立即校准时间服务器：chronyc tracking 【配置的时候默认是自动校准的，一般用于服务端修改时间了，客户端立即校准用】\n * 启用ntp时间同步： timedatectl set-ntp yes【默认是启用的，timedatectl命令可以查看状态】\n * 查看客户端连接情况【服务端执行】：chronyc clients\n * 列出ntp状态详细：timedatectl\n   下面timedatectl说明中有详细介绍哈\n   * 设置硬件时间\n     硬件时间默认为utc： timedatectl set-local-rtc 1/0\n     * 设置硬件时钟为本地时间：timedatectl set-local-rtc 1\n     * 设置硬件时钟为utc时间：timedatectl set-local-rtc 0\n   * 启用ntp时间同步： timedatectl set-ntp yes\n   * 开启 ntp：timedatectl set-ntp true/flase\n   * 校准时间服务器： chronyc tracking\n\n[root@yum-centos-dmz ~]# timedatectl \n      local time: wed 2022-07-06 09:53:00 cst\n  universal time: wed 2022-07-06 01:53:00 utc\n        rtc time: wed 2022-07-06 01:44:58\n       time zone: asia/shanghai (cst, +0800)  # 当前zone【我们要 +8 才正常】 最后timedatectl命令有说如何定义\n     ntp enabled: yes   # ntp是否启用\nntp synchronized: yes  # 是否完成过一次ntp同步\n rtc in local tz: no    #是否启用rtc时间【我们为cst+8，所以这为no才是正常的】\n      dst active: n/a\n[root@yum-centos-dmz ~]# \n\n\n\n# ntpdate客户端立即更新时间\n\n * 立即更新时间，我们可以使用ntpdate\n   这个还是比较好用的，如果服务端时间更新了，客户端没有及时更新，可以执行这个命令\n   如下，我在服务端更新时间了\n\n[root@ccx_server128 ~]# date\n2022年 03月 01日 星期二 01:10:04 cst\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:10:34\"\nfailed to set time: automatic time synchronization is enabled\n[root@ccx_server128 ~]# timedatectl \n      local time: 二 2022-03-01 01:13:18 cst\n  universal time: 一 2022-02-28 17:13:18 utc\n        rtc time: 一 2022-02-28 17:13:18\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server128 ~]# timedatectl set-time \"2022-06-28 17:10:34\"\nfailed to set time: automatic time synchronization is enabled\n[root@ccx_server128 ~]# timedatectl set-ntp no\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:13:55\"\n[root@ccx_server128 ~]# date\n2022年 02月 28日 星期一 17:13:57 cst\n[root@ccx_server128 ~]# timedatectl \n      local time: 一 2022-02-28 17:14:02 cst\n  universal time: 一 2022-02-28 09:14:02 utc\n        rtc time: 一 2022-02-28 09:14:02\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: no\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server128 ~]# timedatectl set-ntp yes\n[root@ccx_server128 ~]# \n\n# 然后我去客户端立即获取。。。多香啊\n[root@ccx_server129 ~]# date\ntue mar  1 01:15:13 cst 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# ntpdate 192.168.59.128\n28 feb 17:15:37 ntpdate[46458]: step time server 192.168.59.128 offset -28789.784156 sec\n[root@ccx_server129 ~]# date\nmon feb 28 17:15:39 cst 2022\n[root@ccx_server129 ~]# \n\n\n\n * 当然，这也带来一个问题，好像chronyd状态出问题了，不是^*了，然后重启一下又恢复正常，所以，可能这个netdate和重启服务效果一样吧。\n\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^? ccx_server128                 0   6   377     -     +0ns[   +0ns] +/-    0ns\n[root@ccx_server129 ~]# systemctl restart chronyd #重启了\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^? ccx_server128                10   6     1     2  -3874ns[-3874ns] +/-  106us\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^* ccx_server128                10   6     7     1  +1884ns[-7831ns] +/-   99us\n[root@ccx_server129 ~]# \n\n\n\n\n# 内网chrony配置时间同步\n\n\n# 内网环境服务端配置\n\n * 守护进程 chronyd 既可作为客户端 与 服务器同步时间，又可作为一个服务器，接受其他客户端同步时间的请求\n\n * 下面以配置局域网时间服务器为例来说明 chronyd 的客户端和服务器的配置，虚拟机规划如下：\n\n用途      ip               系统                                     配置前系统时间\n服务端ip   192.168.59.128   centos linux release 7.6.1810 (core)   2022年 02月 28日 星期一 19:41:38 cst\n客户端ip   192.168.59.129   centos linux release 7.6.1810 (core)   mon feb 28 06:46:54 est 2022\n\n * 注：我上面2台虚拟机没有通公网的，所以我下面安装服务用的是本地源方式搭建。\n\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是utc时间，如下utc，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 06:50:32 utc\n  universal time: wed 2022-07-06 06:50:32 utc\n        rtc time: wed 2022-07-06 06:50:32\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone asia/shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone asia/shanghai\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 14:54:56 cst\n  universal time: wed 2022-07-06 06:54:56 utc\n        rtc time: wed 2022-07-06 06:54:56\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n\n# 安装chrony\n\n[root@ccx_server128 ~]# yum install -y chrony\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl enable chronyd --now\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n\n\n\n# 服务端配置\n\n * 安装 chrony 之后，默认的配置是客户端的启动配置的，要想作为一个时间服务器来运行的话， 需要在配置中增加 allow 配置项，它表示允许客户端通过该地址和服务器同步时间\n   默认配置文件：/etc/chrony.conf\n\n * 另外，时间服务器的时间也需要从网络上其他的时间服务器进行同步，这里直接用默认的即可，具体的配置如下\n   【其实我没做啥修改，就把allow取消注释，然后加上服务端的ip即可】\n   我给没注释的代码都加上说明了，可以看看哦。\n\n[root@ccx_server128 ~]# cat /etc/chrony.conf \n# use public servers from the pool.ntp.org project.\n# please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#表示与本机ip同步时间，其他server注释或删除\n#注：内网环境必须这么做，否则其他会无法同步成功。 如果通公网，可以使用公网的服务器时间\nserver 127.127.1.0\n\n# record the rate at which the system clock gains/losses time.\n# 为了在下次启动时稳定的同步，系统时钟的预估漂移需要保存到指定的文件中\ndriftfile /var/lib/chrony/drift\n\n# allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\n# 如果系统时钟由于某种原因与启动后的服务器时间相差甚远，允许 chronyd \n# 通过步进而不是回转来快速纠正它，这个过程将花费很长时间\nmakestep 1.0 3\n\n# enable kernel synchronization of the real-time clock (rtc).\n# 为了使客户端实时时钟接近服务器的时钟，以便下次时钟启动时更接近真实的时间\n# 增加了一种 rtcsync 模式，该模式下，系统时间会定期的拷贝到实时时钟里\nrtcsync\n\n# enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# allow ntp client access from local network.\n# 允许指定网络的主机同步时间，不指定就是拒绝所有，且默认不开启。\n# 如果要允许所有则：  allow 0.0.0.0/24\n#如下，允许一个网段，如果有多个网段，则添加多个allow\nallow 192.168.59.0/24\n#allow ...\n\n# serve time even if not synchronized to a time source.\n# 不去同步任何人的时间，时间同步服务级别\n# 开启后，即使server指令中时间服务器不可用，也允许将本地时间作为标准时间授予其他客户端\n#注：内网环境必须开，否则其他虚拟机无法同步时间\nlocal stratum 10\n\n# specify file containing keys for ntp authentication.\n#keyfile /etc/chrony.keys\n\n# specify directory for log files.\n# chrony日志存放路径\nlogdir /var/log/chrony\n\n# select which information is logged.\n#log measurements statistics tracking\n[root@ccx_server128 ~]# \n\n\n# pool说明\n\n * pool=server。 一般我们都直接用server，只是我这说明一下pool的意思罢了。\n * pool 配置项\n   * 客户端需要去时间服务器获取时间，配置文件中 server 和 pool 配置项表示时间服务器的地址，支持域名或者ip\n   * pool指的是进行时间同步的服务器ip地址或域名，作为服务器来说，其机器时间也需要从其他时间服务器同步，此时，服务器是作为一个客户端从网络服务器上获取时间\n   * 建议配置多个时间服务器的地址，优先选择同步良好，网络稳定且靠近客户端的地址\n\n# 防火墙设置\n\n * 注：chronyd和ntp一样端口是upd的而非tcp，都是依赖123端口通信的，323是chronyd之间通信用的，如果你放开了123端口别人连接不上，关闭防火墙又能连上了，那把323端口开放【理论不用开放这个的】\n\n[root@ccx_server128 ~]#  netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           11048/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           11048/chronyd        \nudp6       0      0 ::1:323                 :::*                                11048/chronyd        \n[root@ccx_server128 ~]#  \n\n\n\n * 可以先查看防火墙状态，如果是关闭的，那么下面操作不用做了，我的是测试机，是可以直接关闭防火墙的【如果客户端已配置，则关闭服务端防火墙后，客户端重启 systemctl restart chronyd】\n   以firewalld为例\n\n[root@ccx_server128 ~]# ip a | grep 128\n    inet6 ::1/128 scope host \n    inet 192.168.59.128/24 brd 192.168.59.255 scope global noprefixroute ens33\n[root@ccx_server128 ~]# systemctl is-active firewalld.service \nactive\n[root@ccx_server128 ~]# systemctl stop firewalld.service\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl is-active firewalld.service \ninactive\n[root@ccx_server128 ~]# \n\n\n\n * 时间服务器如果有开启防火墙的话，需要开启 udp 协议 的 123 端口，以允许客户端向服务器发送获取时间的请求\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --add-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n * 如果想要关闭防火墙的 123 端口，在服务器机器上执行下面的命令\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --remove-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n * 关于防火墙，我重新用一个新的ip搭建了个chronyd服务【和128一样的搭建方法】，将防火墙打开，测试客户端是否能正常同步，发现也能正常同步，防火墙不拦截嘛？【该测试仅用于参考】\n   \n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@ccx_server128 ~]# systemctl restart chronyd\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n\n\n\n * 查看端口监听是否正常\n\n[root@ccx_server128 ~]#  netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           11048/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           11048/chronyd        \nudp6       0      0 ::1:323                 :::*                                11048/chronyd        \n[root@ccx_server128 ~]#  \n\n\n\n# 服务端同步ntp服务器时间&时间模式调整\n\n * 内网主机是以本机时间为准，所以没有同步网络时间的概念，但是可以通过最后面timedatectl命令调整本机时间，其他客户端会自动更新为本机时间的。\n\n# 查询ntp是否同步&查看同步的客户端信息\n\n * 查看时间同步源状态： chronyc sourcestats -v\n   \n   * 因为我是本地源，所以是同步不成功的，这是正常的，这种情况就需要后面手动维护本机时间，确保客户端的时间能准确，也就是说，客户端的时间准不准确，就看自己平常咋维护服务端的时间了。\n     \n   * 但是外网的不是这样，使用了ntp服务器时间，那么这就得有一条是同步成功的【具体看下面外网搭建】\n\n * 服务端命令：chronyc clients【查看哪些ip连接我的ntp时间了】\n   注：我下面显示的是主机名而不是ip，是因为我添加解析了！！！如果没添加解析，显示的是ip。\n\n# 注：要有客户端连了才有该信息，没人连是为空。\n[root@ccx_server128 ~]# chronyc clients\nhostname                      ntp   drop int intl last     cmd   drop int  last\n===============================================================================\nccx_server129                  16      0   6   -    15       0      0   -     -\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# cat /etc/hosts\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.59.129 ccx_server129\n[root@ccx_server128 ~]# \n\n\n\n\n# 内网客户端配置\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是utc时间，如下utc，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 06:50:32 utc\n  universal time: wed 2022-07-06 06:50:32 utc\n        rtc time: wed 2022-07-06 06:50:32\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone asia/shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone asia/shanghai\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 14:54:56 cst\n  universal time: wed 2022-07-06 06:54:56 utc\n        rtc time: wed 2022-07-06 06:54:56\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n# 安装chrony\n\n[root@ccx_server129 ~]# yum install -y chrony\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# systemctl enable chronyd --now\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n# 客户端配置\n\n * 安装好 chrony 之后，编辑 /etc/chrony.conf 配置文件，客户端的配置比较简单\n   我给没注释的代码都加上说明了，可以看看哦。\n\n[root@ccx_server129 ~]# cat /etc/chrony.conf\n# use public servers from the pool.ntp.org project.\n# please consider joining the pool (http://www.pool.ntp.org/join.html).\n# 同步时间的服务器 ip 或 域名\n# 这直接使用服务端的ip即可\nserver 192.168.59.128 iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n\n# record the rate at which the system clock gains/losses time.\n# 系统时钟的预估漂移保存到指定的文件中，是为了在下次启动时能稳定的同步\ndriftfile /var/lib/chrony/drift\n\n# allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\n# 如果系统时钟由于某种原因与启动后的服务器时间相差甚远，允许 chronyd \n# 通过步进而不是回转来快速纠正它\nmakestep 1.0 3\n\n# enable kernel synchronization of the real-time clock (rtc).\n# 为了使客户端实时时钟接近服务器的时钟，以便下次时钟启动时更接近真实的时间\n# 增加了一种 rtcsync 模式，该模式下，系统时间会定期的拷贝到实时时钟里\nrtcsync\n\n# enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# allow ntp client access from local network.\n#allow 192.168.0.0/16\n\n# serve time even if not synchronized to a time source.\n#local stratum 10\n\n# specify file containing keys for ntp authentication.\n#keyfile /etc/chrony.keys\n\n# specify directory for log files.\n# chrony日志存放路径\nlogdir /var/log/chrony\n\n# select which information is logged.\n#log measurements statistics tracking\n[root@ccx_server129 ~]# \n\n\n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@ccx_server129 ~]# systemctl restart chronyd\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n# 查看服务器信息\n\n * 客户端查看连接情况命令：chronyc sources -v【加-v显示详细信息，可以不加】\n   如下，我没同步前时间为15:28，同步以后时间变成23:22了【和服务端一样】【如果没有自动同步可以执行chronyc tracking立即同步】\n   显示的是主机名而非ip是因为我添加解析了。。。没添加解析是显示的ip\n   * ^?同步失败\n   * ^* 同步成功【可能不是立即显示，反正只要reach有值就表示成功了，状态需要等一会才能更新】\n\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# date\nmon feb 28 15:28:05 cst 2022\n[root@ccx_server129 ~]# systemctl restart chronyd\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^? ccx_server128                10   6     3     0  +2317ns[+2317ns] +/-   90us\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^? ccx_server128                10   6     3     1  +2317ns[+2317ns] +/-   90us\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^? ccx_server128                10   6     3     1  +2317ns[+2317ns] +/-   90us\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^* ccx_server128                10   6    17     0  -1762ns[-2940ns] +/-   92us\n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^* ccx_server128                10   6    17     2  -1762ns[-2940ns] +/-   92us\n[root@ccx_server129 ~]# date\nmon feb 28 23:22:20 cst 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# cat /etc/hosts\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.59.128 ccx_server128\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# chronyc sources -v\n210 number of sources = 1\n\n  .-- source mode  '^' = server, '=' = peer, '#' = local clock.\n / .- source state '*' = current synced, '+' = combined , '-' = not combined,\n| /   '?' = unreachable, 'x' = time may be in error, '~' = time too variable.\n||                                                 .- xxxx [ yyyy ] +/- zzzz\n||      reachability register (octal) -.           |  xxxx = adjusted offset,\n||      log2(polling interval) --.      |          |  yyyy = measured offset,\n||                                \\     |          |  zzzz = estimated error.\n||                                 |    |           \\\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^* ccx_server128                10   9   377   386    -15us[  -19us] +/-  133us\n[root@ccx_server129 ~]# \n\n\n\n * 而且，当时间同步成功以后，ntp服务这些全是yes\n   下面ntp synchronized状态如果为no，手动改为yes是不生效的。。成功以后状态会自动变成yes。\n   开启ntp命令是：timedatectl set-ntp true/flase\n\n[root@ccx_server129 ~]# timedatectl \n      local time: mon 2022-02-28 23:38:32 cst\n  universal time: mon 2022-02-28 15:38:32 utc\n        rtc time: mon 2022-02-28 15:38:32\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: yes\n rtc in local tz: yes\n      dst active: n/a\n# 这个警告是因为我吧时间改为本地了，下面有说改回rtc的方法哈。\nwarning: the system is configured to read the rtc time in the local time zone.\n         this mode can not be fully supported. it will create various problems\n         with time zone changes and daylight saving time adjustments. the rtc\n         time is never updated, it relies on external facilities to maintain it.\n         if at all possible, use rtc in utc by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server129 ~]# \n\n\n\n# 没加解析的服务器端说明\n\n * 上面是因为我排错的过程中添加解析了，所以无论是客户端还是服务端看到的ip都是主机名。。。\n   我下面呢重新用一台没加解析的虚拟机做服务端，重新试一下效果哦。\n\n * 我这不对代码做解释了哦，具体的代码说明看上面哈~\n\n * 服务端配置\n\n[root@ciserver ~]# ip a | grep 151\n    inet 192.168.59.151/24 brd 192.168.59.255 scope global noprefixroute ens33\n[root@ciserver ~]# cat /etc/chrony.conf \n# use public servers from the pool.ntp.org project.\n# please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n#server 192.168.59.128\nserver 127.127.1.0\n\n# record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# enable kernel synchronization of the real-time clock (rtc).\nrtcsync\n\n# enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# allow ntp client access from local network.\n#allow 192.168.0.0/16\nallow 192.168.59.0/24\n\n# serve time even if not synchronized to a time source.\nlocal stratum 10\n\n# specify file containing keys for ntp authentication.\n#keyfile /etc/chrony.keys\n\n# specify directory for log files.\nlogdir /var/log/chrony\n\n# select which information is logged.\n#log measurements statistics tracking\n[root@ciserver ~]# \n[root@ciserver ~]# systemctl restart chronyd\n[root@ciserver ~]# \n[root@ciserver ~]# chronyc clients\nhostname                      ntp   drop int intl last     cmd   drop int  last\n===============================================================================\n[root@ciserver ~]# \n[root@ciserver ~]# date\nmon feb 28 17:54:19 cst 2022\n[root@ciserver ~]# \n\n# 下面客户端配置完毕以后再回到服务端，可以看到客户端的ip了哦\n[root@ciserver ~]# chronyc clients\nhostname                      ntp   drop int intl last     cmd   drop int  last\n===============================================================================\n192.168.59.129                  5      0   4   -    34       0      0   -     -\n[root@ciserver ~]# \n\n\n\n * 客户端\n   我还是用上面的那个客户端来做测试吧\n\n[root@ccx_server129 ~]# cat /etc/chrony.conf\n# use public servers from the pool.ntp.org project.\n# please consider joining the pool (http://www.pool.ntp.org/join.html).\nserver 192.168.59.151 iburst\n#server 192.168.59.128 iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n\n# record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# enable kernel synchronization of the real-time clock (rtc).\nrtcsync\n\n# enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# allow ntp client access from local network.\n#allow 192.168.0.0/16\n#allow 192.168.59.128\n#local stratum 10\n# serve time even if not synchronized to a time source.\n#local stratum 10\n\n# specify file containing keys for ntp authentication.\n#keyfile /etc/chrony.keys\n\n# specify directory for log files.\nlogdir /var/log/chrony\n\n# select which information is logged.\n#log measurements statistics tracking\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# date #之前服务端的时间\nmon feb 28 17:48:46 cst 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# systemctl restart chronyd #重启\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# chronyc sources #生效了哦，同步成功了\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^* 192.168.59.151               10   6    17     3  -1053ns[-1698ns] +/-  150us\n[root@ccx_server129 ~]#  #时间也变了\n[root@ccx_server129 ~]# date\nmon feb 28 17:54:56 cst 2022\n[root@ccx_server129 ~]# \n\n\n\n\n# 外网chrony配置时间同步\n\n\n# 外网环境chrony服务端配置\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是utc时间，如下utc，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 06:50:32 utc\n  universal time: wed 2022-07-06 06:50:32 utc\n        rtc time: wed 2022-07-06 06:50:32\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone asia/shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone asia/shanghai\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 14:54:56 cst\n  universal time: wed 2022-07-06 06:54:56 utc\n        rtc time: wed 2022-07-06 06:54:56\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n# 安装chrony\n\n[root@ccx_server128 ~]# yum install -y chrony\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl enable chronyd --now\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n\n\n\n# 服务端配置【国内常用的几个ntp服务器地址】\n\n * 国内ntp时间服务器：\n   验证是否能用： 在配置主机上ping下面域名，能ping通就可以用。\n\n#最常见、熟知的就是，www.pool.ntp.org/zone/cn\nntp.ntsc.ac.cn #国家授时中心 网络授时服务器的域名\ncn.ntp.org.cn #中国\nedu.ntp.org.cn #中国教育网\nntp1.aliyun.com #阿里云\nntp2.aliyun.com #阿里云\ncn.pool.ntp.org #最常用的国内ntp服务器\n\n\n\n * 外网配置很简单，也没啥讲究，配置文件/etc/chrony.conf 修改一个内容就行了，修改内容如下：\n   注：代码意思见上面内网环境中的服务端配置说明哈。\n\n# 先在主机上ping一下，确定能ping通下面ntp服务器地址才行哈\n[root@yum-centos-dmz ~]# ping .cn.pool.ntp.org\nping: .cn.pool.ntp.org: name or service not known\n[root@yum-centos-dmz ~]# ping cn.pool.ntp.org\nping cn.pool.ntp.org (219.216.128.25) 56(84) bytes of data.\n64 bytes from 219.216.128.25 (219.216.128.25): icmp_seq=1 ttl=44 time=80.5 ms\n64 bytes from 219.216.128.25 (219.216.128.25): icmp_seq=2 ttl=44 time=80.2 ms\n^c\n--- cn.pool.ntp.org ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\nrtt min/avg/max/mdev = 80.285/80.408/80.531/0.123 ms\n[root@yum-centos-dmz ~]# \n\n#把配置文件下面四行注释掉：\nserver 0.centos.pool.ntp.org iburst\nserver 1.centos.pool.ntp.org iburst\nserver 2.centos.pool.ntp.org iburst\nserver 3.centos.pool.ntp.org iburst\n#然后在下面添加这几行，也可以添加上面的ntp服务器地址\nserver 0.cn.pool.ntp.org iburst\nserver 1.cn.pool.ntp.org iburst\nserver 2.cn.pool.ntp.org iburst\nserver 3.cn.pool.ntp.org iburst\n\n# 添加下面内容，允许所有虚拟机连接\nallow 0.0.0.0/24\n\n# 取消注释下面行。外网环境下面如果不取消注释，可能chronyd服务无法同步，只有ntp可以同步，开了好。\nlocal stratum 10\n\n# 完整代码配置文件如下\n[root@yum-centos-dmz yum.repos.d]# cat /etc/chrony.conf \n# use public servers from the pool.ntp.org project.\n# please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n#一定要先ping，要确保地址能ping通才可以正常同步啊！！！！\nserver cn.ntp.org.cn iburst\nserver cn.pool.ntp.org iburst\n#server 0.cn.pool.ntp.org iburst\n#server 1.cn.pool.ntp.org iburst\n#server 2.cn.pool.ntp.org iburst\n#server 3.cn.pool.ntp.org iburst\n\n# record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# enable kernel synchronization of the real-time clock (rtc).\nrtcsync\n\n# enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# allow ntp client access from local network.\n#allow 192.168.0.0/16\nallow 1.2.105.0/24\nallow 1.2.0.0/16\n\n# serve time even if not synchronized to a time source.\nlocal stratum 10\n\n# specify file containing keys for ntp authentication.\n#keyfile /etc/chrony.keys\n\n# specify directory for log files.\nlogdir /var/log/chrony\n\n# select which information is logged.\n#log measurements statistics tracking\n[root@yum-centos-dmz yum.repos.d]#\n\n\n\n# 防火墙设置\n\n * 引用上面内网中内容，方法一样。\n * 注：chronyd和ntp一样端口是upd的而非tcp，都是依赖123端口通信的，323是chronyd之间通信用的，如果你放开了123端口别人连接不上，关闭防火墙又能连上了，那把323端口开放【理论不用开放这个的】\n\n[root@ccx_server128 ~]#  netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           11048/chronyd        \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           11048/chronyd        \nudp6       0      0 ::1:323                 :::*                                11048/chronyd        \n[root@ccx_server128 ~]#  \n\n\n\n * 可以先查看防火墙状态，如果是关闭的，那么下面操作不用做了，我的是测试机，是可以直接关闭防火墙的【如果客户端已配置，则关闭服务端防火墙后，客户端重启 systemctl restart chronyd】\n   以firewalld为例\n\n[root@ccx_server128 ~]# ip a | grep 128\n    inet6 ::1/128 scope host \n    inet 192.168.59.128/24 brd 192.168.59.255 scope global noprefixroute ens33\n[root@ccx_server128 ~]# systemctl is-active firewalld.service \nactive\n[root@ccx_server128 ~]# systemctl stop firewalld.service\n[root@ccx_server128 ~]# \n[root@ccx_server128 ~]# systemctl is-active firewalld.service \ninactive\n[root@ccx_server128 ~]# \n\n\n\n * 时间服务器如果有开启防火墙的话，需要开启 udp 协议 的 123 端口，以允许客户端向服务器发送获取时间的请求\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --add-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n * 如果想要关闭防火墙的 123 端口，在服务器机器上执行下面的命令\n   以firewalld为例\n\n[root@ccx_server128 ~]# firewall-cmd --permanent --remove-port=123/udp\nsuccess\n[root@ccx_server128 ~]# firewall-cmd --reload\nsuccess\n\n\n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@yum-centos-dmz ~]# systemctl restart chronyd\n[root@yum-centos-dmz ~]# systemctl is-active chronyd\nactive\n[root@yum-centos-dmz ~]# \n\n\n\n * 查看端口监听是否正常\n\n[root@yum-centos-dmz ~]# netstat -nulp | grep chro\nudp        0      0 0.0.0.0:123             0.0.0.0:*                           14248/chronyd       \nudp        0      0 127.0.0.1:323           0.0.0.0:*                           14248/chronyd       \nudp6       0      0 ::1:323                 :::*                                14248/chronyd       \n[root@yum-centos-dmz ~]# \n\n\n\n# 服务端同步ntp服务器时间&时间模式调整\n\n * 理论上重启服务以后会自动同步时间的，如果没有自动同步，可以执行下面命令立即同步。\n   只要出现^*行就代表成功。【如果没有自动同步可以执行chronyc tracking立即同步】\n\n[root@yum-centos-dmz ~]# chronyc sources -v\n210 number of sources = 4\n\n  .-- source mode  '^' = server, '=' = peer, '#' = local clock.\n / .- source state '*' = current synced, '+' = combined , '-' = not combined,\n| /   '?' = unreachable, 'x' = time may be in error, '~' = time too variable.\n||                                                 .- xxxx [ yyyy ] +/- zzzz\n||      reachability register (octal) -.           |  xxxx = adjusted offset,\n||      log2(polling interval) --.      |          |  yyyy = measured offset,\n||                                \\     |          |  zzzz = estimated error.\n||                                 |    |           \\\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^- electrode.felixc.at           3   6   377    31    -14us[  -14us] +/-  181ms\n^* 120.25.115.20                 2   6   146   164  -2455us[+2334us] +/-   35ms\n^- tick.ntp.infomaniak.ch        1   6   377    29  -3515us[-3515us] +/-  102ms\n^- makaki.miuku.net              2   6   377    30    -72ms[  -72ms] +/-  138ms\n[root@yum-centos-dmz ~]# chronyc sources \n210 number of sources = 4\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^- electrode.felixc.at           3   6   377     8    +30ms[  +30ms] +/-  153ms\n^* 120.25.115.20                 2   6   231    11  -3186us[-5099us] +/-   38ms\n^- tick.ntp.infomaniak.ch        1   6   377     7    -47ms[  -47ms] +/-  151ms\n^- makaki.miuku.net              2   6   377     7    -21ms[  -21ms] +/-   91ms\n[root@yum-centos-dmz ~]# \n[root@yum-centos-dmz ~]# date\ntue jul  5 02:53:16 utc 2022\n[root@yum-centos-dmz ~]#\n\n\n\n * 理论上重启服务时间就自动同步的，但我看到虚拟机上的时间一直是2点过，而我本地的时间是10点过，不对啊，但同步又是成功的，后面我发现分和秒都和我本地对上的，想起了虚拟机是utc模式啊，也就是没有+8.。。问题就在这。\n   所以我们就将utc模式调整一下嘛【文章最后有说timedatectl命令的使用方式哈】\n\n[root@yum-centos-dmz ~]# date\ntue jul  5 03:09:28 utc 2022\n\n# 下面命令可以看到utc是+0\n[root@yum-centos-dmz ~]# timedatectl \n      local time: tue 2022-07-05 03:09:30 utc\n  universal time: tue 2022-07-05 03:09:30 utc\n        rtc time: tue 2022-07-05 03:01:29\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: yes\n rtc in local tz: no\n      dst active: n/a\n[root@yum-centos-dmz ~]# \n[root@yum-centos-dmz ~]# timedatectl list-timezones | grep hai\nasia/shanghai\n[root@yum-centos-dmz ~]# timedatectl set-timezone asia/shanghai\n\n# 调整为上海以后就utc就变成+8了，正常了。\n[root@yum-centos-dmz ~]# timedatectl \n      local time: tue 2022-07-05 11:10:33 cst\n  universal time: tue 2022-07-05 03:10:33 utc\n        rtc time: tue 2022-07-05 03:02:33\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: yes\n rtc in local tz: no\n      dst active: n/a\n\n# 再次查看时间，正常了，搞定。\n[root@yum-centos-dmz ~]# date\ntue jul  5 11:10:39 cst 2022\n[root@yum-centos-dmz ~]# \n\n\n\n# 查看同步的客户端信息\n\n * 服务端命令：chronyc clients【查看哪些ip连接我的ntp时间了】\n   注：我下面显示的是主机名而不是ip，是因为我添加解析了！！！如果没添加解析，显示的是ip。\n\n# 注：要有客户端连了才有该信息，没人连是为空。\n[root@yum-centos-dmz ~]# chronyc clients\nhostname                      ntp   drop int intl last     cmd   drop int  last\n===============================================================================\nccx_server129                  16      0   6   -    15       0      0   -     -\n[root@yum-centos-dmz ~]#\n\n# 下面是别人连接以后【ip有修改】\n[root@yum-centos-dmz ~]# chronyc  clients\nhostname                      ntp   drop int intl last     cmd   drop int  last\n===============================================================================\n1.2.102.47                   5      0   6   -    51       0      0   -     -\n1.2.105.58                   3      0   6   -   141       0      0   -     -\n1.2.105.39                   8      0   6   -     1       0      0   -     -\n1.2.102.36                   4      0   6   -    15       0      0   -     -\n1.2.102.16                   3      0   6   -    10       0      0   -     -\n1.2.102.54                   2      0   6   -    48       0      0   -     -\n1.2.102.55                   2      0   6   -    29       0      0   -     -\n[root@yum-centos-dmz ~]# \n\n\n\n\n# 外网客户端连接\n\n# 时区确定\n\n * 配置前先执行timedatectl 如果是utc时间，如下utc，+0，则需要修改时区\n\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 06:50:32 utc\n  universal time: wed 2022-07-06 06:50:32 utc\n        rtc time: wed 2022-07-06 06:50:32\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n * 修改方式为： timedatectl set-timezone asia/shanghai，修改后正确信息如下\n\n[root@test21 ~]# timedatectl set-timezone asia/shanghai\n[root@test21 ~]# timedatectl \n      local time: wed 2022-07-06 14:54:56 cst\n  universal time: wed 2022-07-06 06:54:56 utc\n        rtc time: wed 2022-07-06 06:54:56\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@test21 ~]# \n\n\n\n# chronyd的方法连接\n\n# 安装chrony\n\n[root@ccx_server129 ~]# yum install -y chrony\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# systemctl enable chronyd --now\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n# 客户端配置\n\n * 安装好 chrony 之后，编辑 /etc/chrony.conf 配置文件，客户端的配置比较简单\n   我给没注释的代码都加上说明了，可以看看哦。\n\n[root@test ~]#  cat /etc/chrony.conf\n# use public servers from the pool.ntp.org project.\n# please consider joining the pool (http://www.pool.ntp.org/join.html).\n# 同步时间的服务器 ip 或 域名\n# 这直接使用服务端的ip即可\nserver 1.2.105.41 iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\n\n# 其他配置默认不动即可。\n\n\n\n\n# 重启chrony\n\n * 为使配置生效，需要重启 chronyd 服务\n\n[root@test ~]#  systemctl restart chronyd\n[root@test ~]#  systemctl is-active chronyd\nactive\n[root@test ~]# \n\n\n\n# 查看服务器信息\n\n * 客户端查看连接情况命令：chronyc sources -v【加-v显示详细信息，可以不加】\n   如下，我没同步前时间为15:28，同步以后时间变成23:22了【和服务端一样】【如果没有自动同步可以执行chronyc tracking立即同步】\n   显示的是主机名而非ip是因为我添加解析了。。。没添加解析是显示的ip\n   * ^?同步失败\n   * ^* 同步成功【可能不是立即显示，反正只要reach有值就表示成功了，状态需要等一会才能更新】\n     \n\n# ntp的方式连接chronyd服务端【必看】\n\n# ntp服务端搭建\n\n * 本文主要说的是chronyd服务，ntp是我测试的时候做过，也顺便说一下，ntp超级简单。\n   为什么用chronyd，是因为chronyd管理更方便，比如可以看到已经连接该主机的ip有哪些。\n * 安装ntp，ntpdate已经系统默认安装过了\n\n[root@localhost ~]# yum install -y ntp\n\n\n\n * 修改ntp配置文件\n\n[root@localhost ~]# vim /etc/ntp.conf\n\n#把配置文件下面四行注释掉：\nserver 0.centos.pool.ntp.org iburst\nserver 1.centos.pool.ntp.org iburst\nserver 2.centos.pool.ntp.org iburst\nserver 3.centos.pool.ntp.org iburst\n\n#然后在下面添加这几行即可，其他默认不变就行了。\n#也可以使用上面chronyd中说到的公网ntp服务器\nserver 0.cn.pool.ntp.org iburst\nserver 1.cn.pool.ntp.org iburst\nserver 2.cn.pool.ntp.org iburst\nserver 3.cn.pool.ntp.org iburst\n\n\n\n * 权限配置说明【默认允许所有连接，下面内容了解为主】\n   \n   * 1 配置方法一：只允许192.168.100.0网段的客户机进行时间同步\n     在restrict default kod nomodify notrap nopeer noquery（表示默认拒绝所有ip的时间同步）之后增加一行：\n     restrict 192.168.100.0 mask 255.255.255.0 nomodify notrap\n   \n   * 2 配置方法二：允许任何ip的客户机都可以进行时间同步\n     将restrict default kod nomodify notrap nopeer noquery修改为如下行：\n     restrict default nomodify\n\n * 参数说明：\n   \n   * ignore ：关闭所有的 ntp 联机服务\n   * nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。\n   * notrust：客户端除非通过认证，否则该客户端来源将被视为不信任子网\n   * noquery：不提供客户端的时间查询\n\n * 启动ntp服务，并开机自启动\n\n[root@localhost ~]# systemctl start ntpd\n[root@localhost ~]# systemctl enable ntpd\n\n\n\n * 查询ntp是否同步\n\n[root@localhost ~]# ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*119.28.206.193  100.122.36.196   2 u  128  128  377   19.711   -0.468   5.363\n\n\n\n * 如果没有立即同步可以执行 ntpdate cn.pool.ntp.org 或 ntpdate -u cn.pool.ntp.org 立即同步\n   同步成功后如下，ntp synchronized: yes\n\n[root@yum-centos-dmz ~]# timedatectl \n      local time: wed 2022-07-06 14:08:15 cst\n  universal time: wed 2022-07-06 06:08:15 utc\n        rtc time: wed 2022-07-06 06:00:13\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: yes\n rtc in local tz: no\n      dst active: n/a\n[root@yum-centos-dmz ~]# \n\n\n\n * 开启防火墙ntp默认端口udp123\n\n[root@localhost ~]# firewall-cmd --permanent --zone=public --add-port=123/udp\nsuccess\n[root@localhost ~]# firewall-cmd --reload\nsuccess\n\n\n\n# 说明【重要】\n\n * 服务器是chronyd服务，客户端如果我也用chronyd服务，有可能能用，有可能不能用，明白我意思吧？\n   但是我服务端是chronyd，我客户端用ntp方式，欸，那么就很好用，随时用随时正确。\n * 如下，chronyd服务是不正常的，但是我用ntpdata拉取时间后重启又\n\n# 现在状态正常\n[root@host-10-241-105-39 ~]# systemctl is-active chronyd\nactive\n[root@host-10-241-105-39 ~]#\n[root@host-10-241-105-39 ~]# \n# 看，之前的是一直同步失败的\n[root@host-10-241-105-39 ~]# timedatectl \n      local time: wed 2022-07-06 12:13:41 cst\n  universal time: wed 2022-07-06 04:13:41 utc\n        rtc time: wed 2022-07-06 04:13:41\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@host-10-241-105-39 ~]# \n\n# 我用ntp的方式更新时间成功了 \n[root@host-10-241-105-39 ~]# ntpdate 1.2.105.41\n 6 jul 12:22:13 ntpdate[6220]: step time server 1.2.105.41 offset 481.822244 sec\n[root@host-10-241-105-39 ~]# timedatectl \n      local time: wed 2022-07-06 12:22:21 cst\n  universal time: wed 2022-07-06 04:22:21 utc\n        rtc time: wed 2022-07-06 04:14:19\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@host-10-241-105-39 ~]# date\nwed jul  6 12:22:29 cst 2022\n[root@host-10-241-105-39 ~]#\n\n# 我修改时间为错误的\n[root@host-10-241-105-39 ~]# timedatectl set-time \"2022-06-28 17:10:34\"\nfailed to set time: automatic time synchronization is enabled\n[root@host-10-241-105-39 ~]# date\nwed jul  6 12:22:59 cst 2022\n[root@host-10-241-105-39 ~]# \n[root@host-10-241-105-39 ~]# timedatectl set-ntp no\n[root@host-10-241-105-39 ~]# timedatectl set-time \"2022-07-01 17:10:34\"\n[root@host-10-241-105-39 ~]# date\nfri jul  1 17:10:35 cst 2022\n[root@host-10-241-105-39 ~]#\n\n# 使用chronyd的方式又成功了，他奶奶的，之前一直搞都是错误的同步不了。\n[root@host-10-241-105-39 ~]# chronyc tracking\n506 cannot talk to daemon\n[root@host-10-241-105-39 ~]# systemctl is-active chronyd\nunknown\n[root@host-10-241-105-39 ~]# systemctl restart chronyd\n[root@host-10-241-105-39 ~]# chronyc tracking\nreference id    : 00000000 ()\nstratum         : 0\nref time (utc)  : thu jan 01 00:00:00 1970\nsystem time     : 0.000000000 seconds slow of ntp time\nlast offset     : +0.000000000 seconds\nrms offset      : 0.000000000 seconds\nfrequency       : 26.307 ppm slow\nresidual freq   : +0.000 ppm\nskew            : 0.000 ppm\nroot delay      : 1.000000000 seconds\nroot dispersion : 1.000000000 seconds\nupdate interval : 0.0 seconds\nleap status     : not synchronised\n[root@host-10-241-105-39 ~]# timedatectl \n      local time: wed 2022-07-06 12:26:12 cst\n  universal time: wed 2022-07-06 04:26:12 utc\n        rtc time: fri 2022-07-01 09:12:31\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: no\nntp synchronized: yes\n rtc in local tz: no\n      dst active: n/a\n[root@host-10-241-105-39 ~]# date\nwed jul  6 12:26:23 cst 2022\n[root@host-10-241-105-39 ~]# \n[root@host-10-241-105-39 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^* host-10-241-105-41.opens>     4   6   177    41    +39us[  +73us] +/-   91ms\n[root@host-10-241-105-39 ~]# \n\n\n\n# 客户端安装ntpd\n\n[root@host-10-241-105-39 ~]#  yum install -y ntp\n[root@host-10-241-105-39 ~]#  \n[root@host-10-241-105-39 ~]#  systemctl enable ntpd --now\n[root@host-10-241-105-39 ~]#  systemctl is-active ntpd\nactive\n[root@host-10-241-105-39 ~]# \n\n\n\n# 客户端配置并重启服务\n\n * 指需要修改一项，server注释现有的4项，加一个服务端ip即可。\n\n[root@test ~]# cat /etc/ntp.conf | grep iburst\n#server 0.centos.pool.ntp.org iburst\n##server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\nserver 1.2.105.41 iburst\n[root@test ~]# \n\n\n\n * 重启服务生效\n\n[root@test ~]# systemctl restart ntpd\n\n\n\n# 客户端与ntp server服务器同步一下时间\n\n * 如果时间没有立即同步，执行：ntpdata -u 服务端ip\n   如下，我修改为错误时间立即同步回来。\n\n[root@test ~]# systemctl status ntpd\n● ntpd.service - network time service\n   loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled)\n   active: active (running) since wed 2022-07-06 04:05:58 utc; 32min ago\n  process: 21024 execstart=/usr/sbin/ntpd -u ntp:ntp $options (code=exited, status=0/success)\n main pid: 21025 (ntpd)\n   cgroup: /system.slice/ntpd.service\n           └─21025 /usr/sbin/ntpd -u ntp:ntp -g\n\njul 06 04:05:58 test.novalocal ntpd[21025]: listen normally on 3 eth0 1.2.105.58 udp 123\njul 06 04:05:58 test.novalocal ntpd[21025]: listen normally on 4 lo ::1 udp 123\njul 06 04:05:58 test.novalocal ntpd[21025]: listen normally on 5 eth0 fe80::f816:3eff:fe18:a626 udp 123\njul 06 04:05:58 test.novalocal ntpd[21025]: listening on routing socket on fd #22 for interface updates\njul 06 04:05:58 test.novalocal ntpd[21025]: 0.0.0.0 c016 06 restart\njul 06 04:05:58 test.novalocal ntpd[21025]: 0.0.0.0 c012 02 freq_set kernel 0.000 ppm\njul 06 04:05:58 test.novalocal ntpd[21025]: 0.0.0.0 c011 01 freq_not_set\njul 06 04:06:05 test.novalocal ntpd[21025]: 0.0.0.0 c614 04 freq_mode\njul 06 04:27:22 test.novalocal ntpd[21025]: 0.0.0.0 0612 02 freq_set kernel 17.735 ppm\njul 06 04:27:22 test.novalocal ntpd[21025]: 0.0.0.0 0615 05 clock_sync\n[root@test ~]# \n[root@test ~]# date\nwed jul  6 04:38:23 utc 2022\n[root@test ~]# timedatectl set-ntp no\n[root@test ~]# timedatectl set-time \"2022-06-28 17:10:34\"\n[root@test ~]# ntpdate 1.2.105.41\n28 jun 17:10:46 ntpdate[21076]: the ntp socket is in use, exiting\n[root@test ~]# date\ntue jun 28 17:10:48 utc 2022\n[root@test ~]# ntpdate -u 1.2.105.41\n 6 jul 04:39:32 ntpdate[21079]: step time server 1.2.105.41 offset 646112.382185 sec\n[root@test ~]# date\nwed jul  6 04:39:35 utc 2022\n[root@test ~]# \n\n\n\n# 查看同步状态\n\n * 客户端和服务器都可以查询。\n * 前面有*则正常。\n\n#客户端1\n[root@test ~]# ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*host-10-241-105 162.159.200.1    4 u   45   64  377    0.643    3.976  11.360\n[root@test ~]# \n\n#客户端2\n[root@xz-oa-uatapp-05 ~]# ntpq -p\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*1.2.105.41   162.159.200.1    4 u   59   64  377    1.296   -4.194   0.785\n[root@xz-oa-uatapp-05 ~]# \n\n\n\n# 同步时间加入定时任务\n\n * 理论上同步一次时间，如果系统不重启会一直生效保持和服务端时间一致，如果重启后没有立即更新，执行一下 ntpdate -u 服务端ip即可，个人觉得加定时任务意义不大。\n * 客户端设置：\n\n[root@test ~]# ls /usr/sbin/ntpdate \n/usr/sbin/ntpdate\n[root@test ~]# \n[root@test ~]# crontab -e\n\n#加入一行，意思是每天8点30同步一次时间\n30 8 * * * /usr/sbin/ntpdate -u 1.2.105.41\n\n\n\n\n# 时间不同步可能的原因\n\n\n# 1.chrony服务端、客户端 版本是否一致和服务是否正常【chrony各版本之间差异很大，确保版本一致】\n\n * 查看客户端和服务端版本是否一致\n\n# 服务端\n[root@ccx_server128 ~]# chronyc -v\nchronyc (chrony) version 3.2 (+readline +ipv6 +debug)\n[root@ccx_server128 ~]# \n#客户端\n[root@ccx_server129 ~]# chronyc -v\nchronyc (chrony) version 3.2 (+readline +ipv6 +debug)\n[root@ccx_server129 ~]# \n\n\n\n * 查看服务是否正常\n\n# 服务端\n[root@ccx_server128 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server128 ~]# \n# 客户端\n[root@ccx_server129 ~]# systemctl is-active chronyd\nactive\n[root@ccx_server129 ~]# \n\n\n\n\n# 2、服务端防火墙原因\n\n * 防火墙这个东西应该没啥好说的了，无论是iptables还是firewalld都最好关闭，如果不能关闭，则放开123端口【上面有说防火墙设置。】\n * selinux也可以关闭。\n   setenforce 0临时关闭\n\n\n# 3、检查服务端和客户端是否能互通\n\n * 也就是说客户端和服务端是不是在同一网络，能互相ssh就证明网络没问题。\n\n\n# 4、看看时区是否正确\n\n * 执行date 如果时区不是cst修改时区，我今天就遇到这个问题了，修改方式如下\n   这种情况一般是要和服务端保持一致哈，如果服务端不是est，客户端单独改了也没用。\n\n[root@ccx_server129 ~]# date\nmon feb 28 07:58:21 est 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# timedatectl set-timezone asia/shanghai\n[root@ccx_server129 ~]# date\nmon feb 28 22:56:13 cst 2022\n[root@ccx_server129 ~]# \n\n\n\n\n# 5、间隔2小时左右，chrony服务端机器ntp不同步\n\n * 意思是ntp synchronized这个出问题了，看下面注释后面说的\n   但是此时同步状态是正常的【^*】\n * 未找到相应解决办法。临时解决方法 ：在定时任务中 每隔一段时间重启该客户端的chrony。\n\n[root@ccx_server129 ~]# timedatectl \n      local time: tue 2022-03-01 00:22:57 cst\n  universal time: mon 2022-02-28 16:22:57 utc\n        rtc time: mon 2022-02-28 16:22:57\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: yes # 就是这个变成no了\n rtc in local tz: yes\n      dst active: n/a\n\nwarning: the system is configured to read the rtc time in the local time zone.\n         this mode can not be fully supported. it will create various problems\n         with time zone changes and daylight saving time adjustments. the rtc\n         time is never updated, it relies on external facilities to maintain it.\n         if at all possible, use rtc in utc by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# chronyc sources\n210 number of sources = 1\nms name/ip address         stratum poll reach lastrx last sample               \n===============================================================================\n^* ccx_server128                10   9   377   499    -15us[  -19us] +/-  133us\n[root@ccx_server129 ~]# \n\n\n\n\n# 6、更换为ntp方式连接\n\n * 我在测试环境各种顺畅，跑到真实环境就是各种报错，真绝了。这是今天遇到的一个大坑，解决方式就是更换为ntp。\n * 服务端是chronyd，客户端用chronyd老是出问题，就改用ntp的方式连接chronyd即可。具体方法见上面ntp的方式连接chronyd服务端。\n\n\n# 7、配置文件server和allow\n\n我的服务端今天我是改为如下才正常的。\n可以参考一下。\n\n[root@yum-centos-dmz ~]# cat /etc/chrony.conf \n# use public servers from the pool.ntp.org project.\n# please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org iburst\n#server 1.centos.pool.ntp.org iburst\n#server 2.centos.pool.ntp.org iburst\n#server 3.centos.pool.ntp.org iburst\nserver cn.pool.ntp.org iburst\n#server 0.cn.pool.ntp.org iburst\n#server 1.cn.pool.ntp.org iburst\n#server 2.cn.pool.ntp.org iburst\n#server 3.cn.pool.ntp.org iburst\n\n# record the rate at which the system clock gains/losses time.\ndriftfile /var/lib/chrony/drift\n\n# allow the system clock to be stepped in the first three updates\n# if its offset is larger than 1 second.\nmakestep 1.0 3\n\n# enable kernel synchronization of the real-time clock (rtc).\nrtcsync\n\n# enable hardware timestamping on all interfaces that support it.\n#hwtimestamp *\n\n# increase the minimum number of selectable sources required to adjust\n# the system clock.\n#minsources 2\n\n# allow ntp client access from local network.\n#allow 192.168.0.0/16\nallow 1.2.105.0/24\nallow 1.2.0.0/16\n\n# serve time even if not synchronized to a time source.\n#local stratum 10\n\n# specify file containing keys for ntp authentication.\n#keyfile /etc/chrony.keys\n\n# specify directory for log files.\nlogdir /var/log/chrony\n\n# select which information is logged.\n#log measurements statistics tracking\n[root@yum-centos-dmz ~]# \n\n\n\n\n# 说明\n\n * 一般就上面几种情况导致不同步。\n * 如果你上面都排查了还是没用，仔细检查配置文件，配置文件有问题。\n\n\n# timedatectl说明\n\ntimedatectl是linux下的一条命令，用于控制系统时间和日期。可以用来查询和更改系统时钟于设定，同时可以设定和修改时区信息。这篇文章简单介绍一下如何使用timedatectl进行常见操作。\n\n\n# 查看系统时间timedatectl\n\n[root@ccx_server128 ~]# timedatectl \n      local time: 二 2022-03-01 00:47:50 cst #当地时间\n  universal time: 一 2022-02-28 16:47:50 utc #伦敦时间\n        rtc time: 一 2022-02-28 16:47:50 #硬件时间\n       time zone: asia/shanghai (cst, +0800) #时区：亚洲上海（东8区）utc时间加上8等于当前时间\n     ntp enabled: yes #ntp服务\nntp synchronized: no #ntp时间是否启用\n rtc in local tz: no  #是否启用rtc硬件时间【设定系统时间计算方式，0表示使用utc时间计算方式，yes为0，no为1】【timedatectl set-local-rtc 1这个命令控制】\n      dst active: n/a\n[root@ccx_server128 ~]# \n\n\n\n\n# 常见用法\n\n * 使用timedatectl可以进行如下常见操作\n   * 查看当前时间/日期/时区：timedatectl或者timedatectl status\n   * 查看所有可用时区：timedatectl list-timezones\n   * 设置时区：timedatectl set-timezone 时区信息\n     * 显示系统的所有时区： timedatectl list-timezones\n     * 如：设定系统时区为亚洲上海timedatectl set-timezone asia/shanghai\n   * 设置utc：timedatectl set-timezone utc【别乱操作，设置这个以后上面定义的上海+8就没了，变成+0了】\n   * 设置硬件时钟为本地时间：timedatectl set-local-rtc 1【/etc/adjtime 文件中第三个为状态】\n   * 设置硬件时钟为utc时间：timedatectl set-local-rtc 0【/etc/adjtime 文件中第三个为状态】\n   * 设置时间：timedatectl set-time hh:mm:ss\n   * 设置日期：timedatectl set-time yyyy-mm-dd\n   * 设置日期时间：timedatectl set-time “yyyy-mm-dd hh:mm:ss”【年月日时分秒】\n     * 修改报错执行：timedatectl set-ntp no\n     * 修改时间后执行：clock -w【写入硬件时间，一般2个时间同步修改】\n   * 启动ntp时间同步（启用ntp服务或者chrony服务）：timedatectl set-ntp true\n   * 禁用ntp时间同步（禁用ntp服务或者chrony服务）：timedatectl set-ntp false\n\n\n# 使用示例\n\n我觉得上面常见用法中已经很明显了，我这不做全部示例，只做部分。\n\n# 设置时区\n\n * 设置时区：timedatectl set-timezone 时区信息【“要不要都行】\n   * 显示系统的所有时区： timedatectl list-timezones\n   * 如：设定系统时区为亚洲上海timedatectl set-timezone asia/shanghai\n\n[root@ccx_server129 ~]# date\nmon feb 28 07:58:21 est 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# timedatectl list-timezones | grep hai\nasia/shanghai\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# timedatectl set-timezone asia/shanghai\n[root@ccx_server129 ~]# date\nmon feb 28 22:56:13 cst 2022\n[root@ccx_server129 ~]# \n\n\n\n# 设置时间\n\n * 设置时间：timedatectl set-time hh:mm:ss\n\n * 设置日期：timedatectl set-time yyyy-mm-dd\n\n * 设置日期时间：timedatectl set-time “yyyy-mm-dd hh:mm:ss”【年月日时分秒】\n   \n   * 修改报错执行：timedatectl set-ntp no\n   * 修改时间后执行：clock -w【写入硬件时间，一般2个时间同步修改】\n\n * 我这以我ntp服务端时间为例\n\n[root@ccx_server128 ~]# date\n2022年 03月 01日 星期二 01:10:04 cst\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:10:34\"\nfailed to set time: automatic time synchronization is enabled\n[root@ccx_server128 ~]# timedatectl \n      local time: 二 2022-03-01 01:13:18 cst\n  universal time: 一 2022-02-28 17:13:18 utc\n        rtc time: 一 2022-02-28 17:13:18\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server128 ~]# timedatectl set-ntp no\n[root@ccx_server128 ~]# timedatectl set-time \"2022-02-28 17:13:55\"\n[root@ccx_server128 ~]# date\n2022年 02月 28日 星期一 17:13:57 cst\n[root@ccx_server128 ~]# timedatectl \n      local time: 一 2022-02-28 17:14:02 cst\n  universal time: 一 2022-02-28 09:14:02 utc\n        rtc time: 一 2022-02-28 09:14:02\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: no\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server128 ~]# timedatectl set-ntp yes\n[root@ccx_server128 ~]# \n\n# 然后我去客户端立即获取。。。多香啊\n[root@ccx_server129 ~]# date\ntue mar  1 01:15:13 cst 2022\n[root@ccx_server129 ~]# \n[root@ccx_server129 ~]# ntpdate 192.168.59.128\n28 feb 17:15:37 ntpdate[46458]: step time server 192.168.59.128 offset -28789.784156 sec\n[root@ccx_server129 ~]# date\nmon feb 28 17:15:39 cst 2022\n[root@ccx_server129 ~]# \n\n\n\n# 设置硬件时间\n\n * 设置硬件时钟为本地（local）时间：timedatectl set-local-rtc 1【/etc/adjtime 文件中第三个为状态】\n\n * 设置硬件时钟为utc时间：timedatectl set-local-rtc 0【/etc/adjtime 文件中第三个为状态】\n\n * 没有加入ntp服务测试：\n\n[root@ccx_server130 ~]# cat /etc/adjtime  #没有加入ntp显示是这样的\n0.0 0 0.0\n0\nutc\n[root@ccx_server130 ~]# timedatectl \n      local time: tue 2022-03-01 01:27:44 cst\n  universal time: mon 2022-02-28 17:27:44 utc\n        rtc time: mon 2022-02-28 17:27:44\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl set-local-rtc 1 #设置为本地\n[root@ccx_server130 ~]# timedatectl \n      local time: tue 2022-03-01 01:27:55 cst\n  universal time: mon 2022-02-28 17:27:55 utc\n        rtc time: tue 2022-03-01 01:27:56\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: yes\n      dst active: n/a\n\n# 改成local以后会有一串这样的警告，也不知道有啥副作用。。..\nwarning: the system is configured to read the rtc time in the local time zone.\n         this mode can not be fully supported. it will create various problems\n         with time zone changes and daylight saving time adjustments. the rtc\n         time is never updated, it relies on external facilities to maintain it.\n         if at all possible, use rtc in utc by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nlocal  #显示local\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl set-local-rtc 0\n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nutc\n[root@ccx_server130 ~]# timedatectl \n      local time: tue 2022-03-01 01:28:27 cst\n  universal time: mon 2022-02-28 17:28:27 utc\n        rtc time: mon 2022-02-28 17:28:27\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server130 ~]# \n\n\n\n * 加入ntp\n   就文件中显示不一样而已，我也不知道有啥区别。。。。反正其他倒是一样的，改为local会有一串警告\n\n[root@ccx_server129 ~]# cat /etc/adjtime \n0.000000 1646040080 0.000000\n1646040080\nutc\n[root@ccx_server129 ~]# \n\n\n\n# utc测试\n\n * 设置utc：timedatectl set-timezone utc【别乱操作，设置这个以后上面定义的上海+8就没了，变成+0了】\n   哈哈 我一开始还没搞懂这个utc是啥，我以为这个utc和上面设置硬件时间是一样的【改变的是utc/local】\n   下面是我测试，你先看看，能发现啥不~\n\n[root@ccx_server130 ~]# timedatectl  #设置为utc前\n      local time: tue 2022-03-01 01:28:27 cst\n  universal time: mon 2022-02-28 17:28:27 utc\n        rtc time: mon 2022-02-28 17:28:27\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nutc\n[root@ccx_server130 ~]# timedatectl set-local-rtc 1 \n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nlocal\n[root@ccx_server130 ~]# timedatectl set-timezone utc \n[root@ccx_server130 ~]# cat /etc/adjtime \n0.0 0 0.0\n0\nlocal\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl \n      local time: mon 2022-02-28 17:31:43 utc\n  universal time: mon 2022-02-28 17:31:43 utc\n        rtc time: mon 2022-02-28 17:31:43\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: yes\n      dst active: n/a\n\nwarning: the system is configured to read the rtc time in the local time zone.\n         this mode can not be fully supported. it will create various problems\n         with time zone changes and daylight saving time adjustments. the rtc\n         time is never updated, it relies on external facilities to maintain it.\n         if at all possible, use rtc in utc by calling\n         'timedatectl set-local-rtc 0'.\n[root@ccx_server130 ~]# timedatectl set-local-rtc 0\n[root@ccx_server130 ~]# timedatectl \n      local time: mon 2022-02-28 17:32:07 utc\n  universal time: mon 2022-02-28 17:32:07 utc\n        rtc time: mon 2022-02-28 17:32:08\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server130 ~]# \n\n\n\n * 解密，后面我发现我设置为local以后，再设置utc，但我发现配置文件中local没变，于是确认这个不是设置硬件时间的。\n   然后执行timedatectl set-timezone local报错了，并且我在timedatectl list-timezones 这里面看到了utc，发现不对劲，仔细一看timedatectl中的time zone选项，发现后面变成utc，并且时间为+0了，哈哈，我之前设置的亚洲上海+8没了。\n   所以，这个utc就是恢复默认的哦，为+0，所以我还是需要改回去的哈\n\n[root@ccx_server130 ~]# timedatectl set-timezone utc \n[root@ccx_server130 ~]# timedatectl \n      local time: mon 2022-02-28 17:32:12 utc\n  universal time: mon 2022-02-28 17:32:12 utc\n        rtc time: mon 2022-02-28 17:32:12\n       time zone: utc (utc, +0000)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server130 ~]# \n[root@ccx_server130 ~]# timedatectl set-timezone asia/shanghai\n[root@ccx_server130 ~]# timedatectl \n      local time: tue 2022-03-01 01:43:26 cst\n  universal time: mon 2022-02-28 17:43:26 utc\n        rtc time: mon 2022-02-28 17:43:27\n       time zone: asia/shanghai (cst, +0800)\n     ntp enabled: yes\nntp synchronized: no\n rtc in local tz: no\n      dst active: n/a\n[root@ccx_server130 ~]# \n\n\n\nhttps://blog.csdn.net/cuichongxin/article/details/123178318\n\nhttps://blog.csdn.net/wangjie72270/article/details/122196213?spm=1018.2226.3001.9630.1&extra%5btitle%5d=linux%20%e2%9d%89%20chronyd%e6%97%b6%e9%97%b4%e5%90%8c%e6%ad%a5%e6%9c%8d%e5%8a%a1%e5%99%a8%e8%af%a6%e8%a7%a3&extra%5butm_source%5d=vip_chatgpt_common_search_pc_result&extra%5butm_medium%5d=distribute.pc_search_result.none-task-cask-2~all~insert_cask~default-1-null.142%5ev96%5epc_search_result_base2",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1704434924e3},{title:"系统管理--3.2.系统管理-定时任务",frontmatter:{},regularPath:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.2.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html",relativePath:"zs-use/linux/基本使用/系统管理--3.2.系统管理-定时任务.md",key:"v-78c67846",path:"/zs-use/linux/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86--3.2.%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html",headers:[{level:2,title:"at一次性执行定时任务",slug:"at一次性执行定时任务",normalizedTitle:"at一次性执行定时任务",charIndex:26},{level:3,title:"1)、at服务管理与访问控制",slug:"_1-、at服务管理与访问控制",normalizedTitle:"1)、at服务管理与访问控制",charIndex:42},{level:3,title:"2）、at命令",slug:"_2-、at命令",normalizedTitle:"2）、at命令",charIndex:1063},{level:3,title:"3）、其他at管理命令",slug:"_3-、其他at管理命令",normalizedTitle:"3）、其他at管理命令",charIndex:2081},{level:2,title:"crontab循环执行定时任务",slug:"crontab循环执行定时任务",normalizedTitle:"crontab循环执行定时任务",charIndex:2372},{level:3,title:"1）、crond服务管理与访问控制",slug:"_1-、crond服务管理与访问控制",normalizedTitle:"1）、crond服务管理与访问控制",charIndex:4214},{level:3,title:"2）、用户的crontab设置",slug:"_2-、用户的crontab设置",normalizedTitle:"2）、用户的crontab设置",charIndex:4659},{level:3,title:"3）、crontab的注意事项",slug:"_3-、crontab的注意事项",normalizedTitle:"3）、crontab的注意事项",charIndex:5481},{level:2,title:"系统的crontab设置",slug:"系统的crontab设置",normalizedTitle:"系统的crontab设置",charIndex:5749},{level:2,title:"anacron",slug:"anacron",normalizedTitle:"anacron",charIndex:7052}],lastUpdated:"2024年1月9日星期二下午1点46分",lastUpdatedTimestamp:170477919e4,headersStr:"at一次性执行定时任务 1)、at服务管理与访问控制 2）、at命令 3）、其他at管理命令 crontab循环执行定时任务 1）、crond服务管理与访问控制 2）、用户的crontab设置 3）、crontab的注意事项 系统的crontab设置 anacron",content:'# 系统管理--3.2.系统管理-定时任务\n\n\n# at一次性执行定时任务\n\n\n# 1)、at服务管理与访问控制\n\nat命令要想正确执行，需要atd服务的支持。atd服务是独立的服务，所以启动的命令是：\n\n[root@localhost ~]# service atd start\n正在启动 atd：\t\t\t\t\t\t[确定]\n\n\n如果想要让atd服务开机时自动启动，可以使用如下命令：\n\n[root@localhost ~]# chkconfig atd on\n\n\natd服务启动之后，at命令才可以正常使用，不过我们还要学习下at命令的访问控制。 这里的访问控制指的是允许哪些用户使用at命令设定定时任务，或者不允许哪些用户使用at命令。 大家可以想象成为设定黑名单或设定白名单，这样更容易理解。 at的访问控制是依靠/etc/at.allow文件（白名单）和/etc/at.deny文件（黑名单）这两个文件来实现的，具体规则如下：\n\n * 如果系统中有/etc/at.allow文件，那么只有写入/etc/at.allow文件（白名单）中的用户可以使用at命令，其他用户不能使用at命令（/etc/at.deny文件会被忽略，也就是说同一个用户既写入/etc/at.allow文件，也写入/etc/at.deny文件，那么这个用户是可以使用at命令的，因为/etc/at.allow文件优先级更高。）\n * 如果系统中没有/etc/at.allow文件，只有/etc/at.deny文件，那么写入/etc/at.deny文件（黑名单）中的用户不能使用at命令，其他用户可以使用at命令。不过这个文件对root用户不生效。\n * 如果系统中这两个文件都不存在，那么只有root用户可以使用at命令。\n\n系统中默认时只有/etc/at.deny文件，而且这个文件是空的，这样的话系统中所有的用户都可以使用at命令。 不过如果我们打算控制用户的at命令权限，把用户写入/etc/at.deny文件即可\n\n/etc/at.allow文件的权限更高，如果/etc/at.allow文件存在，则/etc/at.deny文件失效。 /etc/at.allow管理行为更加严格，因为只有写入这个文件的用户才能使用at命令，如果需要禁用at命令的用户较多，则可以把少数用户写入这个文件。/etc/at.deny文件的管理较为松散，如果允许使用at命令的用户较多，则可以把禁用的用户写入这个文件。不过这两个文件都不能对root用户生效。\n\n\n# 2）、at命令\n\n[root@localhost ~]# at [选项] 时间\n选项：\n\t-m：\t\t\t当at工作完成后，无论是否命令有输出，都用email通知执行at命令的用户\n\t-c 工作号：\t  显示该at工作的实际内容\n\t\n时间：\n\tat支持的时间格式如下：\n\tHH:MM\t\t\t\t\t\t\t\t\t\t在指定的“小时:分钟”执行命令，例如：02:30\t\n\tHH:MM YYYY-MM-DD\t\t\t\t\t\t\t在指定的“小时:分钟年月日”执行，例如02:30 2018-07-25\n\tHH:MM[am|pm] [month] [date]\t\t\t\t\t在指定的“小时:分钟[上午下午][月][日]”执行，例如02:30 July 25\n\tHH:MM[am|pm] + [minutes|hours|days|weeks]\t在指定的时间“再加多久执行”，例如now + 5 minutes，05am +2 hours\n\n\nat命令只要指定正确的时间，就可以输入需要在指定时间执行的命令了，这个命令可以是系统命令，也可以是shell脚本。\n\n例子1：\n[root@localhost ~]# cat /root/hello.sh\n#!/bin/bash\necho "hello world!!"\n\n\n[root@localhost ~]# at now +2 minutes\nat> /root/hello.sh >> /root/hello.log\n#执行hello.sh脚本，并把输出写入/root/hello.log文件\nat> <EOT>\t\t<-使用ctrl+d保存at任务\njob 8 at 2018-07-2520:54\t<-这是第8个at任务，会在2018年7月25日20:54分执行\n\n\n[root@localhost ~]# at -c 8\n#查询第8个at任务的内容\n…省略部分内容…\t\t\t<-主要是定义系统的环境变量\n/root/hello.sh >> /root/hello.log\n#可以看到at执行的任务\n\n\n例子2：\n[root@localhost ~]# at 02:00 2018-07-26\nat> /bin/sync\nat> /sbin/shutdown -h now\nat> <EOT>\njob 9 at 2018-07-26 02:00\n\n#在指定的时间关机。在一个at任务中，是可以执行多个系统命令的\n\n\n\n# 3）、其他at管理命令\n\nat还有查询和删除命令\n\n[root@localhost ~]# atq\n#查询当前服务器上的at工作\n\n例如：\n[root@localhost ~]# atq\n9\t2018-07-26  02:00 a root\n#说明root用户有一个at任务在2018年7月26日的02:00执行，工作号是9\n\n[root@localhost ~]#atrm [工作号]\n#删除指定的at任务\n\n\n例如：\n[root@localhost ~]# atrm 9\n[root@localhost ~]# atq\n#删除9号at任务，再查询就没有at任务存在了\n\n\n\n# crontab循环执行定时任务\n\n了解系统计划任务相关文件\n\n/etc/cron.d/\n/etc/cron.d/0hourly \t系统每小时第一分钟需要执行的任务\n/etc/cron.deny \t\t\t用户拒绝列表（在该文件中的用户不能使用cron服务）\n/etc/crontab \t\t\t该文件的作用相当于/etc/cron.d/下面的某一个文件，可以定义系统计划任务\n\n/etc/cron.monthly/ \t\t存放系统每个月需要执行的脚本\n/etc/cron.weekly/ \t\t存放系统每周需要执行的脚本\n/etc/cron.daily/ \t\t存放系统每天需要执行的脚本\n/etc/cron.hourly/ \t\t存放系统每小时需要执行的脚本\n/var/spool/cron \t\t这个目录用来存放各个用户自己设定的定时任务，普通用户没有权限直接访问\n\n\n\n\n计划任务的周期编写\n\n[root@rhel8 ~]# cat /etc/crontab\nSHELL=/bin/bash\n默认的shell，告诉系统使用哪个shell\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\n定义命令的路径\nMAILTO=root\n结果以邮件的形式发送给root（不管是正确还是错误结果），如果MAILTO=""代表不会发邮件给任何人。\n# For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# | .------------- hour (0 - 23)\n# | | .---------- day of month (1 - 31)\n# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\n# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# | | | | |\n# * * * * * user-name command to be executed\n前5个字段分别表示：\n\t分钟：0-59\n\t小时：0-23\n\t日期：1-31\n\t月份：1-12\n\t星期：0-7（0表示周日或者7表示周日）\n\n* \t每个单位的第一个\n,\t不连续时间\n-\t代办连续时间范围\n*/n\t每隔n个单位执行一次\n\n\n5 * * * *\t\t每小时的第五分钟\n05 * * * *\t\t每小时的第五分钟\n20 08 * * *\t\t每天8点20分\n45 22 * * *\t\t每天22点45分\n00 06 * 12 *\t12月每天的6点\n\n03 01 * * 7\t\t每周日的1点03分\n0 17 * * 1\t\t每周1的17点0分\n\n\n还可以用一些特殊符号：\n, \t\t表示分割，间隔\n- \t\t表示一个段\n/n \t\t表示每个n的单位执行一次\n\n*/5 * * * *\t\t每隔5分钟执行一次\n0 5 1,15 * *\t每月1号和15号的凌晨5点0分\n03 03,06 1-15 * *\t每隔月的 1号到15号的 3点03分和6点03分 执行任务\n\n礼拜1和礼拜3每隔2个小时去执行一个任务\n00 */2 * * 1,3\n\n每个月的1号-15号，和25号的早上8:00到晚上6:00每隔2小时执行一个任务\n00 08-18/2 1-15,25 * *\n\n以下4行是rhel5里的配置；rhel6看不到，但是也生效\n红帽5在/etc/crontab文件下有，之后的都没有但生效\n01 * * * * \t\troot run-parts /etc/cron.hourly/\t每小时的第1分钟root执行目录里的脚本\n02 04 * * * \troot run-parts /etc/cron.daily/\t\t每天的4点2分\n22 04 * * 7 \troot run-parts /etc/cron.weekly/\t每周日4点22分\n42 04 1 * * \troot run-parts /etc/cron.monthly/\t每月1号4点42分\n\n注意：\nrun-parts：\ncrond用这个工具来执行某个目录下所有的可执行脚本，定时任务中的每小时/每天/每周/每月任务就是通过这个工具来触发的.\n\n\n\n# 1）、crond服务管理与访问控制\n\ncrontab命令是需要crond服务支持的，crond服务同样是独立的服务\n\ncrontab命令和at命令类似，也是通过/etc/cron.allow和/etc/cron.deny文件来限制某些用户是否可以使用crontab命令的。 而且原则也非常相似：\n\n * 当系统中有/etc/cron.allow文件时，只有写入此文件的用户可以使用crontab命令，没有写入的用户不能使用crontab命令。 同样如果有此文件，/etc/cron.deny文件会被忽略，/etc/cron.allow文件的优先级更高。\n * 当系统中只有/etc/cron.deny文件时，则写入此文件的用户不能使用crontab命令，没有写入文件的用户可以使用crontab命令。\n\n这个规则基本和at的规则一直，同样/etc/cron.allow文件的优先级比/etc/cron.deny文件的优先级高，Linux中默认只有/etc/cron.deny文件。\n\n\n# 2）、用户的crontab设置\n\n每个用户都可以实现自己的crontab定时任务，只要是使用这个用户身份执行“crontab -e”命令即可，当然这个用户不能加入/etc/cron.deny文件中。\n\n[root@localhost ~]# crontab [选项]\n选项：\n    -e：编辑crontab定时任务\n    -l：查询crontab任务\n    -r：删除当前用户所有的crontab任务，如果有多个任务，只想删除一个，可以所以用“crontab -e”\n    -u 用户名：修改或删除其他用户的crontab任务。只有root可用\n    \n    \n[root@localhost ~]#crontab -e\n#进入crontab编辑界面。会打开vim编辑你的工作。\n\n\n例子1：让系统每隔5分钟，就向/tmp/test文件中写入一行“11”，验证一下系统定时任务是否会执行\n[root@localhost ~]# crontab -e\n*/5 * * * * /bin/echo "11" >> /tmp/test\n\n\n例子2：在系统在每周二的凌晨5点05分重启一次\n[root@localhost ~]# crontab -e\n5 5 * * 2 /sbin/shutdown -r now\n\n\n例子3：在每月的1号，10号，15号的凌晨3点30分都定时执行日志备份脚本autobak.sh\n[root@localhost ~]# crontab -e\n30 3 1,10,15 * * /root/sh/autobak.sh\n[root@localhost ~]# crontab -l\n#查看root用户的crontab任务\n[root@localhost ~]# crontab -r\n#删除root用户所有的定时任务，如果只想删除某一个定时任务\n#可以“crontab -e”进入编辑模式手工删除\n\n\n\n# 3）、crontab的注意事项\n\n在书写crontab定时任务时，需要注意几个注意事项，这里我们再强调下：\n\n * 六个选项都不能为空，必须填写。如果不确定使用“*”代表任意时间；\n * crontab定时任务，最小有效时间是分钟，最大时间范围是月。像2018年某时执行，3点30分30秒这样的时间都不能识别；\n * 在定义时间时，日期和星期最好不要在一条定时任务中出现，因为它们都是以天作为单位，非常容易让管理员混乱；\n * 在定时任务中，不管是直接写命令，还是在脚本中写命令，最好都是用绝对路径。有时相对路径的命令会报错。\n\n\n# 系统的crontab设置\n\n“crontab -e”是每个用户执行的命令，也就是说不同的用户身份可以执行自己的定时任务。\n\n可是有些定时任务需要系统执行，这时我们就需要编辑/etc/crontab这个配置文件了。\n\n当然，并不是说写入/etc/crontab配置文件中的定时任务执行时，不需要用户身份，而是“crontab -e”命令定义定时任务时，默认用户身份是当前登录用户。\n\n而修改/etc/crontab配置文件时，定时任务的执行着身份是可以手工指定的。\n\n这样定时任务的执行会更加灵活，修改起来也更加方便。\n\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\n\n# For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n# 分 时 日 月  周 执行者身份  命令\n\n\n在CentOS 6.x中，/etc/crontab这个文件也发生了变化，在CentOS 5.x中这个文件的内容大概是这个样子：\n\n\n\n在CentOS5.x版本中，/etc/crontab文件会使用run-parts脚本执行/etc/cron.{daily,weekly,monthly}目录中的所有文件。这个run-parts其实是一个shell脚本，保存在/usr/bin/run-parts，它的作用就是把其后面跟随的目录中的所有可执行文件依次执行。也就是说，如果我们想让某个脚本在每天都执行一次，可以不用手工去写定时任务，而只需要给这个脚本赋予执行权限，并把它放入/etc/cron.daily/目录中。这样这个脚本就会在每天的凌晨4点02分执行了。\n\n可是在CentOS 6.x版本中，/etc/crontab文件中不再有相关的段落，那么是否run-ptars这种定时任务执行方法不可用了呢？我们看到/etc/crontab中有一句提示，让我们“man 4 crontabs”来查看帮助，那么我们就看看这个帮助吧！在这个帮助中，明确写明了“在旧版本的crontab配置文件中，是通过run-parts脚本来调用cron.{daily,weekly,monthly}目录，定时执行这些目录中的脚本。在当前系统中，为了避免cron和anacron之间产生冲突，只要anacron已经安装，就使用anacron来执行这些目录中的脚本。具体可以查看anacron（8）的帮助。”。对于anacron的用法，我们下一个小节来介绍。\n\n其实对我们用户来讲，我们并不需要知道这个定时任务到底是由哪个程序调用的。我们需要知道的事情是如何使用系统的crontab设置。这个新老版本的CentOS没有区别，配置方法都有两种：\n\n * 第一种方法就是我刚刚说过的，把你需要定时执行的工作写成脚本程序，并赋予执行权限，然后直接把这个脚本复制到/etc/cron.{daily,weekly,monthly}目录中的任意一个。比如我需要让某个脚本每周执行，那么就把这个脚本复制到/etc/cron.weekly/目中中。这样这个脚本就会每周执行一次，具体的执行时间要参考anacron的配置。\n\n * 第二种方法就是修改/etc/crontab这个配置文件，自己加入自己的定时任务，不过需要注意指定脚本的执行者身份。例如：\n\n\n\n只要保存/etc/crontab文件，这个定时任务就可以执行了，当然要确定crond服务是运行的。\n\n这两种方法都是可以使用的，具体看个人的习惯吧！不过要想修改/etc/crontab文件，当然我要是root用户才可以，普通不能修改，只能使用用户身份的crontab命令。\n\n\n# anacron\n\nanacron是用来干什么的呢？我们的Linux服务器如果不是24小时开机的，那么刚好在关机的时间段之内有系统定时任务（cron）需要执行，那么这些定时任务是不会执行的。也就是说，假设我们需要在凌晨5点05分执行系统的日志备份，但是我们的Linux服务器不是24小时开机的，在晚上需要关机，白天上班之后才会再次开机。这个定时任务的执行时间我们的服务器刚好没有开机，那么这个任务就不会执行了。anacron就是用来解决这个问题的。\n\nanacron会使用一天，七天，一个月作为检测周期，用来判断是否有定时任务在关机之后没有执行，如果有这样的任务，anacron会在特定的时间重新执行这些定时任务。那么anacron是如何判断这些定时任务已经超过了执行时间呢？在系统的/var/spool/anacron/目录中存在cron.{daily,weekly,monthly}文件，这些文件中都保存着anacron上次执行时的时间。anacron会去读取这些文件中的时间，然后和当前时间做比较，若果两个时间的差值超过了anacron的指定时间差值（一般是1天，7天和一个月），就说明有定时任务漏掉了没有被执行，这时anacron会介入而执行这个漏掉的定时任务，从而保证在关机时没有被执行的定时任务不会被漏掉。\n\n在CentOS 6.x中，我们使用cronie-anacron取代了vixie-cron软件包。而且在原先的CentOS版本中/etc/cron.{daily,weekly,monthly}这些目录中的定时任务会同时被cron和anacron调用，这样非常容易出现重复执行同一个定时任务的错误。在现在的CentOS6.x中 ，/etc/cron.{daily,weekly,monthly}目录中的定时任务程序只会被anacron调用，从而保证这些定时任务只会在每天、每周或每月被定时执行一次，而不会重复执行。这也是我们在上一个小节中介绍的CentOS 6.x的变化之一。\n\n在CentOS 6.x中anacron还有一个变化，anacron不再是单独的服务，而变成了系统命令。也就是说我们不再可以使用“service anacron restart”命令来管理anacron服务了。而是需要使用anacron命令来管理anacron工作，具体命令如下：\n\n\n\n在我们当前的Linux中，其实不需要执行任何anacron命令，只需要配置好/etc/anacrontab文件，系统就会依赖这个文件中的设定来通过anacron执行定时任务。那么关键就是/etc/anacrontab文件的内容了，这个文件如下：\n\n\n\n这个文件中“RANDOM_DELAY”定义的是最大随机延迟，也就是说cron.daily任务如果超过1天没有执行，并不会马上执行，而是先延迟强制延迟时间之后，再延迟随机延迟时间之后再执行命令。“START_HOURS_RANGE”定义anacron的执行时间范围，anacron只会在这个时间范围之内执行。\n\n我们用cron.daily工作来说明下/etc/anacrontab的执行过程：\n\n * 首先读取/var/spool/anacron/cron.daily中的上一次anacron执行的时间；\n\n * 和当前时间比较，如果两个时间的差值超过1天，就执行cron.daily工作；\n\n * 执行这个工作只能在03:00-22:00之间；\n\n * 执行工作时强制延迟时间为5分钟，再随机延迟0-45分钟时间；\n\n * 使用nice命令指定默认优先级，使用run-parts脚本执行/etc/cron.daily目录中的所有可执行文件。\n\n大家发现了吧，/etc/cron.{daily,weekly,monthly}中的脚本，在当前的Linux中是被anacron调用的，不再依靠cron服务。不过anacron不用设置多余的配置，我们只需要把需要定时执行的脚本放入/etc/cron.{daily,weekly,monthly}目录当中，就会每天、每周或每月执行，而且也不再需要启动anacron服务了。我们如果做修改的话，只用修改/etc/anacrontab配置文件即可。比如我更加习惯让定时任务在凌晨03:00-05:00执行，就可以如下修改：\n\n\n\n这样我们所有放入/etc/cron.{daily,weekly,monthly}目录中的脚本都会在指定时间运行了，而且也不怕服务器万一关机的情况了。',normalizedContent:'# 系统管理--3.2.系统管理-定时任务\n\n\n# at一次性执行定时任务\n\n\n# 1)、at服务管理与访问控制\n\nat命令要想正确执行，需要atd服务的支持。atd服务是独立的服务，所以启动的命令是：\n\n[root@localhost ~]# service atd start\n正在启动 atd：\t\t\t\t\t\t[确定]\n\n\n如果想要让atd服务开机时自动启动，可以使用如下命令：\n\n[root@localhost ~]# chkconfig atd on\n\n\natd服务启动之后，at命令才可以正常使用，不过我们还要学习下at命令的访问控制。 这里的访问控制指的是允许哪些用户使用at命令设定定时任务，或者不允许哪些用户使用at命令。 大家可以想象成为设定黑名单或设定白名单，这样更容易理解。 at的访问控制是依靠/etc/at.allow文件（白名单）和/etc/at.deny文件（黑名单）这两个文件来实现的，具体规则如下：\n\n * 如果系统中有/etc/at.allow文件，那么只有写入/etc/at.allow文件（白名单）中的用户可以使用at命令，其他用户不能使用at命令（/etc/at.deny文件会被忽略，也就是说同一个用户既写入/etc/at.allow文件，也写入/etc/at.deny文件，那么这个用户是可以使用at命令的，因为/etc/at.allow文件优先级更高。）\n * 如果系统中没有/etc/at.allow文件，只有/etc/at.deny文件，那么写入/etc/at.deny文件（黑名单）中的用户不能使用at命令，其他用户可以使用at命令。不过这个文件对root用户不生效。\n * 如果系统中这两个文件都不存在，那么只有root用户可以使用at命令。\n\n系统中默认时只有/etc/at.deny文件，而且这个文件是空的，这样的话系统中所有的用户都可以使用at命令。 不过如果我们打算控制用户的at命令权限，把用户写入/etc/at.deny文件即可\n\n/etc/at.allow文件的权限更高，如果/etc/at.allow文件存在，则/etc/at.deny文件失效。 /etc/at.allow管理行为更加严格，因为只有写入这个文件的用户才能使用at命令，如果需要禁用at命令的用户较多，则可以把少数用户写入这个文件。/etc/at.deny文件的管理较为松散，如果允许使用at命令的用户较多，则可以把禁用的用户写入这个文件。不过这两个文件都不能对root用户生效。\n\n\n# 2）、at命令\n\n[root@localhost ~]# at [选项] 时间\n选项：\n\t-m：\t\t\t当at工作完成后，无论是否命令有输出，都用email通知执行at命令的用户\n\t-c 工作号：\t  显示该at工作的实际内容\n\t\n时间：\n\tat支持的时间格式如下：\n\thh:mm\t\t\t\t\t\t\t\t\t\t在指定的“小时:分钟”执行命令，例如：02:30\t\n\thh:mm yyyy-mm-dd\t\t\t\t\t\t\t在指定的“小时:分钟年月日”执行，例如02:30 2018-07-25\n\thh:mm[am|pm] [month] [date]\t\t\t\t\t在指定的“小时:分钟[上午下午][月][日]”执行，例如02:30 july 25\n\thh:mm[am|pm] + [minutes|hours|days|weeks]\t在指定的时间“再加多久执行”，例如now + 5 minutes，05am +2 hours\n\n\nat命令只要指定正确的时间，就可以输入需要在指定时间执行的命令了，这个命令可以是系统命令，也可以是shell脚本。\n\n例子1：\n[root@localhost ~]# cat /root/hello.sh\n#!/bin/bash\necho "hello world!!"\n\n\n[root@localhost ~]# at now +2 minutes\nat> /root/hello.sh >> /root/hello.log\n#执行hello.sh脚本，并把输出写入/root/hello.log文件\nat> <eot>\t\t<-使用ctrl+d保存at任务\njob 8 at 2018-07-2520:54\t<-这是第8个at任务，会在2018年7月25日20:54分执行\n\n\n[root@localhost ~]# at -c 8\n#查询第8个at任务的内容\n…省略部分内容…\t\t\t<-主要是定义系统的环境变量\n/root/hello.sh >> /root/hello.log\n#可以看到at执行的任务\n\n\n例子2：\n[root@localhost ~]# at 02:00 2018-07-26\nat> /bin/sync\nat> /sbin/shutdown -h now\nat> <eot>\njob 9 at 2018-07-26 02:00\n\n#在指定的时间关机。在一个at任务中，是可以执行多个系统命令的\n\n\n\n# 3）、其他at管理命令\n\nat还有查询和删除命令\n\n[root@localhost ~]# atq\n#查询当前服务器上的at工作\n\n例如：\n[root@localhost ~]# atq\n9\t2018-07-26  02:00 a root\n#说明root用户有一个at任务在2018年7月26日的02:00执行，工作号是9\n\n[root@localhost ~]#atrm [工作号]\n#删除指定的at任务\n\n\n例如：\n[root@localhost ~]# atrm 9\n[root@localhost ~]# atq\n#删除9号at任务，再查询就没有at任务存在了\n\n\n\n# crontab循环执行定时任务\n\n了解系统计划任务相关文件\n\n/etc/cron.d/\n/etc/cron.d/0hourly \t系统每小时第一分钟需要执行的任务\n/etc/cron.deny \t\t\t用户拒绝列表（在该文件中的用户不能使用cron服务）\n/etc/crontab \t\t\t该文件的作用相当于/etc/cron.d/下面的某一个文件，可以定义系统计划任务\n\n/etc/cron.monthly/ \t\t存放系统每个月需要执行的脚本\n/etc/cron.weekly/ \t\t存放系统每周需要执行的脚本\n/etc/cron.daily/ \t\t存放系统每天需要执行的脚本\n/etc/cron.hourly/ \t\t存放系统每小时需要执行的脚本\n/var/spool/cron \t\t这个目录用来存放各个用户自己设定的定时任务，普通用户没有权限直接访问\n\n\n\n\n计划任务的周期编写\n\n[root@rhel8 ~]# cat /etc/crontab\nshell=/bin/bash\n默认的shell，告诉系统使用哪个shell\npath=/sbin:/bin:/usr/sbin:/usr/bin\n定义命令的路径\nmailto=root\n结果以邮件的形式发送给root（不管是正确还是错误结果），如果mailto=""代表不会发邮件给任何人。\n# for details see man 4 crontabs\n\n# example of job definition:\n# .---------------- minute (0 - 59)\n# | .------------- hour (0 - 23)\n# | | .---------- day of month (1 - 31)\n# | | | .------- month (1 - 12) or jan,feb,mar,apr ...\n# | | | | .---- day of week (0 - 6) (sunday=0 or 7) or sun,mon,tue,wed,thu,fri,sat\n# | | | | |\n# * * * * * user-name command to be executed\n前5个字段分别表示：\n\t分钟：0-59\n\t小时：0-23\n\t日期：1-31\n\t月份：1-12\n\t星期：0-7（0表示周日或者7表示周日）\n\n* \t每个单位的第一个\n,\t不连续时间\n-\t代办连续时间范围\n*/n\t每隔n个单位执行一次\n\n\n5 * * * *\t\t每小时的第五分钟\n05 * * * *\t\t每小时的第五分钟\n20 08 * * *\t\t每天8点20分\n45 22 * * *\t\t每天22点45分\n00 06 * 12 *\t12月每天的6点\n\n03 01 * * 7\t\t每周日的1点03分\n0 17 * * 1\t\t每周1的17点0分\n\n\n还可以用一些特殊符号：\n, \t\t表示分割，间隔\n- \t\t表示一个段\n/n \t\t表示每个n的单位执行一次\n\n*/5 * * * *\t\t每隔5分钟执行一次\n0 5 1,15 * *\t每月1号和15号的凌晨5点0分\n03 03,06 1-15 * *\t每隔月的 1号到15号的 3点03分和6点03分 执行任务\n\n礼拜1和礼拜3每隔2个小时去执行一个任务\n00 */2 * * 1,3\n\n每个月的1号-15号，和25号的早上8:00到晚上6:00每隔2小时执行一个任务\n00 08-18/2 1-15,25 * *\n\n以下4行是rhel5里的配置；rhel6看不到，但是也生效\n红帽5在/etc/crontab文件下有，之后的都没有但生效\n01 * * * * \t\troot run-parts /etc/cron.hourly/\t每小时的第1分钟root执行目录里的脚本\n02 04 * * * \troot run-parts /etc/cron.daily/\t\t每天的4点2分\n22 04 * * 7 \troot run-parts /etc/cron.weekly/\t每周日4点22分\n42 04 1 * * \troot run-parts /etc/cron.monthly/\t每月1号4点42分\n\n注意：\nrun-parts：\ncrond用这个工具来执行某个目录下所有的可执行脚本，定时任务中的每小时/每天/每周/每月任务就是通过这个工具来触发的.\n\n\n\n# 1）、crond服务管理与访问控制\n\ncrontab命令是需要crond服务支持的，crond服务同样是独立的服务\n\ncrontab命令和at命令类似，也是通过/etc/cron.allow和/etc/cron.deny文件来限制某些用户是否可以使用crontab命令的。 而且原则也非常相似：\n\n * 当系统中有/etc/cron.allow文件时，只有写入此文件的用户可以使用crontab命令，没有写入的用户不能使用crontab命令。 同样如果有此文件，/etc/cron.deny文件会被忽略，/etc/cron.allow文件的优先级更高。\n * 当系统中只有/etc/cron.deny文件时，则写入此文件的用户不能使用crontab命令，没有写入文件的用户可以使用crontab命令。\n\n这个规则基本和at的规则一直，同样/etc/cron.allow文件的优先级比/etc/cron.deny文件的优先级高，linux中默认只有/etc/cron.deny文件。\n\n\n# 2）、用户的crontab设置\n\n每个用户都可以实现自己的crontab定时任务，只要是使用这个用户身份执行“crontab -e”命令即可，当然这个用户不能加入/etc/cron.deny文件中。\n\n[root@localhost ~]# crontab [选项]\n选项：\n    -e：编辑crontab定时任务\n    -l：查询crontab任务\n    -r：删除当前用户所有的crontab任务，如果有多个任务，只想删除一个，可以所以用“crontab -e”\n    -u 用户名：修改或删除其他用户的crontab任务。只有root可用\n    \n    \n[root@localhost ~]#crontab -e\n#进入crontab编辑界面。会打开vim编辑你的工作。\n\n\n例子1：让系统每隔5分钟，就向/tmp/test文件中写入一行“11”，验证一下系统定时任务是否会执行\n[root@localhost ~]# crontab -e\n*/5 * * * * /bin/echo "11" >> /tmp/test\n\n\n例子2：在系统在每周二的凌晨5点05分重启一次\n[root@localhost ~]# crontab -e\n5 5 * * 2 /sbin/shutdown -r now\n\n\n例子3：在每月的1号，10号，15号的凌晨3点30分都定时执行日志备份脚本autobak.sh\n[root@localhost ~]# crontab -e\n30 3 1,10,15 * * /root/sh/autobak.sh\n[root@localhost ~]# crontab -l\n#查看root用户的crontab任务\n[root@localhost ~]# crontab -r\n#删除root用户所有的定时任务，如果只想删除某一个定时任务\n#可以“crontab -e”进入编辑模式手工删除\n\n\n\n# 3）、crontab的注意事项\n\n在书写crontab定时任务时，需要注意几个注意事项，这里我们再强调下：\n\n * 六个选项都不能为空，必须填写。如果不确定使用“*”代表任意时间；\n * crontab定时任务，最小有效时间是分钟，最大时间范围是月。像2018年某时执行，3点30分30秒这样的时间都不能识别；\n * 在定义时间时，日期和星期最好不要在一条定时任务中出现，因为它们都是以天作为单位，非常容易让管理员混乱；\n * 在定时任务中，不管是直接写命令，还是在脚本中写命令，最好都是用绝对路径。有时相对路径的命令会报错。\n\n\n# 系统的crontab设置\n\n“crontab -e”是每个用户执行的命令，也就是说不同的用户身份可以执行自己的定时任务。\n\n可是有些定时任务需要系统执行，这时我们就需要编辑/etc/crontab这个配置文件了。\n\n当然，并不是说写入/etc/crontab配置文件中的定时任务执行时，不需要用户身份，而是“crontab -e”命令定义定时任务时，默认用户身份是当前登录用户。\n\n而修改/etc/crontab配置文件时，定时任务的执行着身份是可以手工指定的。\n\n这样定时任务的执行会更加灵活，修改起来也更加方便。\n\nshell=/bin/bash\npath=/sbin:/bin:/usr/sbin:/usr/bin\nmailto=root\n\n# for details see man 4 crontabs\n\n# example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) or jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (sunday=0 or 7) or sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n# 分 时 日 月  周 执行者身份  命令\n\n\n在centos 6.x中，/etc/crontab这个文件也发生了变化，在centos 5.x中这个文件的内容大概是这个样子：\n\n\n\n在centos5.x版本中，/etc/crontab文件会使用run-parts脚本执行/etc/cron.{daily,weekly,monthly}目录中的所有文件。这个run-parts其实是一个shell脚本，保存在/usr/bin/run-parts，它的作用就是把其后面跟随的目录中的所有可执行文件依次执行。也就是说，如果我们想让某个脚本在每天都执行一次，可以不用手工去写定时任务，而只需要给这个脚本赋予执行权限，并把它放入/etc/cron.daily/目录中。这样这个脚本就会在每天的凌晨4点02分执行了。\n\n可是在centos 6.x版本中，/etc/crontab文件中不再有相关的段落，那么是否run-ptars这种定时任务执行方法不可用了呢？我们看到/etc/crontab中有一句提示，让我们“man 4 crontabs”来查看帮助，那么我们就看看这个帮助吧！在这个帮助中，明确写明了“在旧版本的crontab配置文件中，是通过run-parts脚本来调用cron.{daily,weekly,monthly}目录，定时执行这些目录中的脚本。在当前系统中，为了避免cron和anacron之间产生冲突，只要anacron已经安装，就使用anacron来执行这些目录中的脚本。具体可以查看anacron（8）的帮助。”。对于anacron的用法，我们下一个小节来介绍。\n\n其实对我们用户来讲，我们并不需要知道这个定时任务到底是由哪个程序调用的。我们需要知道的事情是如何使用系统的crontab设置。这个新老版本的centos没有区别，配置方法都有两种：\n\n * 第一种方法就是我刚刚说过的，把你需要定时执行的工作写成脚本程序，并赋予执行权限，然后直接把这个脚本复制到/etc/cron.{daily,weekly,monthly}目录中的任意一个。比如我需要让某个脚本每周执行，那么就把这个脚本复制到/etc/cron.weekly/目中中。这样这个脚本就会每周执行一次，具体的执行时间要参考anacron的配置。\n\n * 第二种方法就是修改/etc/crontab这个配置文件，自己加入自己的定时任务，不过需要注意指定脚本的执行者身份。例如：\n\n\n\n只要保存/etc/crontab文件，这个定时任务就可以执行了，当然要确定crond服务是运行的。\n\n这两种方法都是可以使用的，具体看个人的习惯吧！不过要想修改/etc/crontab文件，当然我要是root用户才可以，普通不能修改，只能使用用户身份的crontab命令。\n\n\n# anacron\n\nanacron是用来干什么的呢？我们的linux服务器如果不是24小时开机的，那么刚好在关机的时间段之内有系统定时任务（cron）需要执行，那么这些定时任务是不会执行的。也就是说，假设我们需要在凌晨5点05分执行系统的日志备份，但是我们的linux服务器不是24小时开机的，在晚上需要关机，白天上班之后才会再次开机。这个定时任务的执行时间我们的服务器刚好没有开机，那么这个任务就不会执行了。anacron就是用来解决这个问题的。\n\nanacron会使用一天，七天，一个月作为检测周期，用来判断是否有定时任务在关机之后没有执行，如果有这样的任务，anacron会在特定的时间重新执行这些定时任务。那么anacron是如何判断这些定时任务已经超过了执行时间呢？在系统的/var/spool/anacron/目录中存在cron.{daily,weekly,monthly}文件，这些文件中都保存着anacron上次执行时的时间。anacron会去读取这些文件中的时间，然后和当前时间做比较，若果两个时间的差值超过了anacron的指定时间差值（一般是1天，7天和一个月），就说明有定时任务漏掉了没有被执行，这时anacron会介入而执行这个漏掉的定时任务，从而保证在关机时没有被执行的定时任务不会被漏掉。\n\n在centos 6.x中，我们使用cronie-anacron取代了vixie-cron软件包。而且在原先的centos版本中/etc/cron.{daily,weekly,monthly}这些目录中的定时任务会同时被cron和anacron调用，这样非常容易出现重复执行同一个定时任务的错误。在现在的centos6.x中 ，/etc/cron.{daily,weekly,monthly}目录中的定时任务程序只会被anacron调用，从而保证这些定时任务只会在每天、每周或每月被定时执行一次，而不会重复执行。这也是我们在上一个小节中介绍的centos 6.x的变化之一。\n\n在centos 6.x中anacron还有一个变化，anacron不再是单独的服务，而变成了系统命令。也就是说我们不再可以使用“service anacron restart”命令来管理anacron服务了。而是需要使用anacron命令来管理anacron工作，具体命令如下：\n\n\n\n在我们当前的linux中，其实不需要执行任何anacron命令，只需要配置好/etc/anacrontab文件，系统就会依赖这个文件中的设定来通过anacron执行定时任务。那么关键就是/etc/anacrontab文件的内容了，这个文件如下：\n\n\n\n这个文件中“random_delay”定义的是最大随机延迟，也就是说cron.daily任务如果超过1天没有执行，并不会马上执行，而是先延迟强制延迟时间之后，再延迟随机延迟时间之后再执行命令。“start_hours_range”定义anacron的执行时间范围，anacron只会在这个时间范围之内执行。\n\n我们用cron.daily工作来说明下/etc/anacrontab的执行过程：\n\n * 首先读取/var/spool/anacron/cron.daily中的上一次anacron执行的时间；\n\n * 和当前时间比较，如果两个时间的差值超过1天，就执行cron.daily工作；\n\n * 执行这个工作只能在03:00-22:00之间；\n\n * 执行工作时强制延迟时间为5分钟，再随机延迟0-45分钟时间；\n\n * 使用nice命令指定默认优先级，使用run-parts脚本执行/etc/cron.daily目录中的所有可执行文件。\n\n大家发现了吧，/etc/cron.{daily,weekly,monthly}中的脚本，在当前的linux中是被anacron调用的，不再依靠cron服务。不过anacron不用设置多余的配置，我们只需要把需要定时执行的脚本放入/etc/cron.{daily,weekly,monthly}目录当中，就会每天、每周或每月执行，而且也不再需要启动anacron服务了。我们如果做修改的话，只用修改/etc/anacrontab配置文件即可。比如我更加习惯让定时任务在凌晨03:00-05:00执行，就可以如下修改：\n\n\n\n这样我们所有放入/etc/cron.{daily,weekly,monthly}目录中的脚本都会在指定时间运行了，而且也不怕服务器万一关机的情况了。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170477919e4},{title:"CentOS7.9显卡驱动安装",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/CentOS7.9%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85.html",relativePath:"zs-use/linux/常见问题/CentOS7.9显卡驱动安装.md",key:"v-17596cd2",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/CentOS7.9%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85.html",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:15},{level:3,title:"rpm包",slug:"rpm包",normalizedTitle:"rpm包",charIndex:794},{level:3,title:"run包",slug:"run包",normalizedTitle:"run包",charIndex:932},{level:2,title:"卸载重装",slug:"卸载重装",normalizedTitle:"卸载重装",charIndex:1416},{level:2,title:"安装CUDA（未亲测）",slug:"安装cuda-未亲测",normalizedTitle:"安装cuda（未亲测）",charIndex:2266},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:2864}],lastUpdated:"2024年1月18日星期四下午5点59分",lastUpdatedTimestamp:1705571989e3,headersStr:"安装 rpm包 run包 卸载重装 安装CUDA（未亲测） 参考",content:"# CentOS7.9显卡驱动安装\n\n查看系统版本\n\ncat /etc/redhat-release\n\n\n查看系统架构\n\narch\n\n\n查看显卡型号\n\n lspci | grep -i nvidia\n\n\n\n\n查询显卡具体型号信息\n\nhttps://admin.pci-ids.ucw.cz/mods/PC/10de?action=help?help=pci\n\n\n\n\n\n驱动下载地址\n\nhttps://www.nvidia.cn/Download/index.aspx?lang=cn\n\n\n\n\n\n下载后的文件为.run文件\n\n\n\n\n# 安装\n\nyum install gcc gcc-c++ tar make\nyum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n\n\n禁用nouveau\n\n查询Nouneau模块是否运行，如果运行则需要禁用\n\nlsmod | grep nouveau\n\n如果有输出则表示运行，如果没有输出则表示禁用成功。\n\n\n#新建一个配置文件\nsudo vim /etc/modprobe.d/blacklist-nouveau.conf\n#写入以下内容\nblacklist nouveau\noptions nouveau modeset=0\n\n\n\n#备份当前的镜像\nsudo mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak\n#建立新的镜像\nsudo dracut /boot/initramfs-$(uname -r).img $(uname -r)\n#重启\nsudo reboot\n#最后输入上面的命令验证\nlsmod | grep nouveau\n\n\n安装驱动后缀分为.run和.rpm\n\n\n# rpm包\n\n使用rpm命令安装 rpm 包。\n\nrpm -i nvidia-diag-driver-local-repo-XXX.rpm\n\nyum install cuda-drivers\n\nreboot\n\n\n运行nvidia-smi能输出正确信息代表驱动安装成功。\n\n\n# run包\n\n上传下载好的驱动程序NVIDIA-Linux-xxxx.run到GPU节点（将文件上传至服务器）\n\nsudo chmod a+x NVIDIA-Linux-x86_64-460.106.00.run\n\nsudo ./NVIDIA-Linux-xxxx.run\n\n注：如果使用GUI安装包，可能会出现如下错误\nYou appear to be running an X server; please exit X before installing.\n关闭X server的方法如下：\nhttps://blog.csdn.net/qq_36287702/article/details/122443262\n\n\n如果执行过程中出现下图情况，执行\n\n./NVIDIA-Linux-xxxx.run -no-x-check -no-nouveau-check -no-opengl-files\n\n\n\n\n在安装过程中可能会显示一个问题：\n\n\n\n选择NO继续\n\n后面的直接yes直到安装完成\n\n\n\n安装只后输入nvidai-smi，显示如下，则安装成功。\n\n\n\n\n# 卸载重装\n\nsudo /usr/bin/nvidia-uninstall\n\nyum install gcc gcc-c++ tar make\n\nyum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n\n\n卸载\n\nsudo /usr/bin/nvidia-uninstall\n\n出现xconfig选择yes\n\n\n查询Nouneau模块是否运行，如果运行则需要禁用\n\nlsmod | grep nouveau\n\n如果有输出则表示运行，如果没有输出则表示禁用成功。\n\n\n禁用则在以下文件内写入以下内容：\n\nvim /usr/lib/modprobe.d/blacklist-nouveau.conf\n\n# 加入的内容：\nblacklist nouveau\noptions nouveau modeset=0\n\n\n执行以下命令使内核生效，并重启服务器\n\ndracut -f\n\nsystemctl set-default multi-user.target\n\nreboot\n\n\n再次查看Nouneau模块是否运行，如果没有输出则禁用成功。\n\nlsmod | grep nouveau\n\n\n上传下载好的驱动程序NVIDIA-Linux-xxxx.run到GPU节点（将文件上传至服务器）\n\nsudo chmod a+x NVIDIA-Linux-x86_64-460.106.00.run\n\nsudo ./NVIDIA-Linux-xxxx.run\n\n\n如果出现以下问题，请重启计算机\n\n\n\n如果执行过程中出现下图情况，执行\n\n./NVIDIA-Linux-xxxx.run -no-x-check -no-nouveau-check -no-opengl-files\n\n\n\n\n在安装过程中可能会显示一个问题：\n\n\n\n选择NO继续\n\n后面的直接yes直到安装完成\n\n\n\n安装只后输入nvidai-smi，显示如下，则安装成功。\n\n\n\n\n# 安装CUDA（未亲测）\n\n1.CUDA驱动下载 https://developer.nvidia.com/cuda-75-downloads-archive 。\n\n2.选择操作系统和安装包。以 CentOS 7.9 64 位为例，可按如下方式进行选择：\n\n下载rpm安装包\n\n3.在 CUDA 安装包所在目录下运行如下命令：\n\nsudo rpm -i cuda-repo-rhel7-9-2-local-9.2.148-1.x86_64.rpm sudo yum clean all sudo yum install cuda 4.在/usr/local/cuda/samples/1_Utilities/deviceQuery目录下，执行make命令，可以编译出deviceQuery程序。\n\n5.执行deviceQuery正常显示设备信息，此刻认为CUDA安装正确。\n\n=================更新===============\n\n如果使用rpm文件报错，则考虑使用run文件进行安装。\n\n下载地址：\n\nCUDA Toolkit Archive | NVIDIA Developer\n\n我安装是是10.1版本，可以离线安装。10.2的版本可以选择在线下载和离线下载。\n\n下载run文件进行安装\n\nsh cuda_*.run 建议最好不要使用GUI图形化界面操作，容易报错。\n\n\n# 参考\n\nhttp://t.csdnimg.cn/z72O4\n\nhttp://t.csdnimg.cn/mhpQX\n\nhttp://t.csdnimg.cn/2mcgC\n\nhttp://t.csdnimg.cn/WZRw3\n\nhttp://t.csdnimg.cn/sDfky\n\nhttp://t.csdnimg.cn/KwqBk\n\n查看支持cuda的GPU列表\n\nhttps://developer.nvidia.com/cuda-gpus\n\n系统是否是受支持的Linux版本\n\nhttps://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html",normalizedContent:"# centos7.9显卡驱动安装\n\n查看系统版本\n\ncat /etc/redhat-release\n\n\n查看系统架构\n\narch\n\n\n查看显卡型号\n\n lspci | grep -i nvidia\n\n\n\n\n查询显卡具体型号信息\n\nhttps://admin.pci-ids.ucw.cz/mods/pc/10de?action=help?help=pci\n\n\n\n\n\n驱动下载地址\n\nhttps://www.nvidia.cn/download/index.aspx?lang=cn\n\n\n\n\n\n下载后的文件为.run文件\n\n\n\n\n# 安装\n\nyum install gcc gcc-c++ tar make\nyum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n\n\n禁用nouveau\n\n查询nouneau模块是否运行，如果运行则需要禁用\n\nlsmod | grep nouveau\n\n如果有输出则表示运行，如果没有输出则表示禁用成功。\n\n\n#新建一个配置文件\nsudo vim /etc/modprobe.d/blacklist-nouveau.conf\n#写入以下内容\nblacklist nouveau\noptions nouveau modeset=0\n\n\n\n#备份当前的镜像\nsudo mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak\n#建立新的镜像\nsudo dracut /boot/initramfs-$(uname -r).img $(uname -r)\n#重启\nsudo reboot\n#最后输入上面的命令验证\nlsmod | grep nouveau\n\n\n安装驱动后缀分为.run和.rpm\n\n\n# rpm包\n\n使用rpm命令安装 rpm 包。\n\nrpm -i nvidia-diag-driver-local-repo-xxx.rpm\n\nyum install cuda-drivers\n\nreboot\n\n\n运行nvidia-smi能输出正确信息代表驱动安装成功。\n\n\n# run包\n\n上传下载好的驱动程序nvidia-linux-xxxx.run到gpu节点（将文件上传至服务器）\n\nsudo chmod a+x nvidia-linux-x86_64-460.106.00.run\n\nsudo ./nvidia-linux-xxxx.run\n\n注：如果使用gui安装包，可能会出现如下错误\nyou appear to be running an x server; please exit x before installing.\n关闭x server的方法如下：\nhttps://blog.csdn.net/qq_36287702/article/details/122443262\n\n\n如果执行过程中出现下图情况，执行\n\n./nvidia-linux-xxxx.run -no-x-check -no-nouveau-check -no-opengl-files\n\n\n\n\n在安装过程中可能会显示一个问题：\n\n\n\n选择no继续\n\n后面的直接yes直到安装完成\n\n\n\n安装只后输入nvidai-smi，显示如下，则安装成功。\n\n\n\n\n# 卸载重装\n\nsudo /usr/bin/nvidia-uninstall\n\nyum install gcc gcc-c++ tar make\n\nyum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n\n\n卸载\n\nsudo /usr/bin/nvidia-uninstall\n\n出现xconfig选择yes\n\n\n查询nouneau模块是否运行，如果运行则需要禁用\n\nlsmod | grep nouveau\n\n如果有输出则表示运行，如果没有输出则表示禁用成功。\n\n\n禁用则在以下文件内写入以下内容：\n\nvim /usr/lib/modprobe.d/blacklist-nouveau.conf\n\n# 加入的内容：\nblacklist nouveau\noptions nouveau modeset=0\n\n\n执行以下命令使内核生效，并重启服务器\n\ndracut -f\n\nsystemctl set-default multi-user.target\n\nreboot\n\n\n再次查看nouneau模块是否运行，如果没有输出则禁用成功。\n\nlsmod | grep nouveau\n\n\n上传下载好的驱动程序nvidia-linux-xxxx.run到gpu节点（将文件上传至服务器）\n\nsudo chmod a+x nvidia-linux-x86_64-460.106.00.run\n\nsudo ./nvidia-linux-xxxx.run\n\n\n如果出现以下问题，请重启计算机\n\n\n\n如果执行过程中出现下图情况，执行\n\n./nvidia-linux-xxxx.run -no-x-check -no-nouveau-check -no-opengl-files\n\n\n\n\n在安装过程中可能会显示一个问题：\n\n\n\n选择no继续\n\n后面的直接yes直到安装完成\n\n\n\n安装只后输入nvidai-smi，显示如下，则安装成功。\n\n\n\n\n# 安装cuda（未亲测）\n\n1.cuda驱动下载 https://developer.nvidia.com/cuda-75-downloads-archive 。\n\n2.选择操作系统和安装包。以 centos 7.9 64 位为例，可按如下方式进行选择：\n\n下载rpm安装包\n\n3.在 cuda 安装包所在目录下运行如下命令：\n\nsudo rpm -i cuda-repo-rhel7-9-2-local-9.2.148-1.x86_64.rpm sudo yum clean all sudo yum install cuda 4.在/usr/local/cuda/samples/1_utilities/devicequery目录下，执行make命令，可以编译出devicequery程序。\n\n5.执行devicequery正常显示设备信息，此刻认为cuda安装正确。\n\n=================更新===============\n\n如果使用rpm文件报错，则考虑使用run文件进行安装。\n\n下载地址：\n\ncuda toolkit archive | nvidia developer\n\n我安装是是10.1版本，可以离线安装。10.2的版本可以选择在线下载和离线下载。\n\n下载run文件进行安装\n\nsh cuda_*.run 建议最好不要使用gui图形化界面操作，容易报错。\n\n\n# 参考\n\nhttp://t.csdnimg.cn/z72o4\n\nhttp://t.csdnimg.cn/mhpqx\n\nhttp://t.csdnimg.cn/2mcgc\n\nhttp://t.csdnimg.cn/wzrw3\n\nhttp://t.csdnimg.cn/sdfky\n\nhttp://t.csdnimg.cn/kwqbk\n\n查看支持cuda的gpu列表\n\nhttps://developer.nvidia.com/cuda-gpus\n\n系统是否是受支持的linux版本\n\nhttps://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705570879e3},{title:"小功能",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B0%8F%E5%8A%9F%E8%83%BD.html",relativePath:"zs-use/linux/常见问题/小功能.md",key:"v-3e878b94",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B0%8F%E5%8A%9F%E8%83%BD.html",headers:[{level:2,title:"解析域名得到ip",slug:"解析域名得到ip",normalizedTitle:"解析域名得到ip",charIndex:10},{level:2,title:"查看系统信息",slug:"查看系统信息",normalizedTitle:"查看系统信息",charIndex:81}],lastUpdated:"2023年12月19日星期二晚上7点27分",lastUpdatedTimestamp:170298526e4,headersStr:"解析域名得到ip 查看系统信息",content:"# 小功能\n\n\n# 解析域名得到ip\n\nping www.baidu.com -c 1 | sed '1{s/[^(]*(//;s/).*//;q}'\n\n\n\n# 查看系统信息\n\n[root@jysp ~]# uname -a\nLinux jysp 4.18.0-193.28.1.el7.aarch64 #1 SMP Wed Oct 21 16:25:35 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux\n\n[root@jysp ~]# cat /proc/version\nLinux version 4.18.0-193.28.1.el7.aarch64 (mockbuild@aarch64-01.bsys.centos.org) (gcc version 8.3.1 20190311 (Red Hat 8.3.1-3) (GCC)) #1 SMP Wed Oct 21 16:25:35 UTC 2020\n\n[root@jysp ~]# cat /etc/redhat-release\nCentOS Linux release 7.9.2009 (AltArch)\n\n[root@jysp ~]# arch\nx86_64\n",normalizedContent:"# 小功能\n\n\n# 解析域名得到ip\n\nping www.baidu.com -c 1 | sed '1{s/[^(]*(//;s/).*//;q}'\n\n\n\n# 查看系统信息\n\n[root@jysp ~]# uname -a\nlinux jysp 4.18.0-193.28.1.el7.aarch64 #1 smp wed oct 21 16:25:35 utc 2020 aarch64 aarch64 aarch64 gnu/linux\n\n[root@jysp ~]# cat /proc/version\nlinux version 4.18.0-193.28.1.el7.aarch64 (mockbuild@aarch64-01.bsys.centos.org) (gcc version 8.3.1 20190311 (red hat 8.3.1-3) (gcc)) #1 smp wed oct 21 16:25:35 utc 2020\n\n[root@jysp ~]# cat /etc/redhat-release\ncentos linux release 7.9.2009 (altarch)\n\n[root@jysp ~]# arch\nx86_64\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702985053e3},{title:"查找命令所在包",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%80%E5%9C%A8%E5%8C%85.html",relativePath:"zs-use/linux/常见问题/查找命令所在包.md",key:"v-106e935c",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%80%E5%9C%A8%E5%8C%85.html",headers:[{level:2,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:14},{level:2,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:500}],lastUpdated:"2023年12月21日星期四上午9点36分",lastUpdatedTimestamp:1703122586e3,headersStr:"方式一 方式二",content:"# 查找命令所在包\n\n\n# 方式一\n\n> 利用yum工具\n\n在CentOS中，你可以使用yum provides命令来查找命令所在的软件包。以下是具体的步骤：\n\nyum provides <command>\n\n其中，<command>是你要查找的命令。\n\n\n举个例子\n\n[root@jysp ~]# yum provides killall\n已加载插件：fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\npsmisc-22.20-17.el7.x86_64 : Utilities for managing processes on your system\n源    ：c7-media\n匹配来源：\n文件名    ：/usr/bin/killall\n\n\n\npsmisc-22.20-17.el7.x86_64 : Utilities for managing processes on your system\n源    ：@anaconda\n匹配来源：\n文件名    ：/usr/bin/killall\n\n\n\n# 方式二\n\n使用man <command>当文章shift + g末尾最后一行，该方式有些命令查看不到",normalizedContent:"# 查找命令所在包\n\n\n# 方式一\n\n> 利用yum工具\n\n在centos中，你可以使用yum provides命令来查找命令所在的软件包。以下是具体的步骤：\n\nyum provides <command>\n\n其中，<command>是你要查找的命令。\n\n\n举个例子\n\n[root@jysp ~]# yum provides killall\n已加载插件：fastestmirror, langpacks\nloading mirror speeds from cached hostfile\npsmisc-22.20-17.el7.x86_64 : utilities for managing processes on your system\n源    ：c7-media\n匹配来源：\n文件名    ：/usr/bin/killall\n\n\n\npsmisc-22.20-17.el7.x86_64 : utilities for managing processes on your system\n源    ：@anaconda\n匹配来源：\n文件名    ：/usr/bin/killall\n\n\n\n# 方式二\n\n使用man <command>当文章shift + g末尾最后一行，该方式有些命令查看不到",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1703122586e3},{title:"服务器安装手册",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C.html",relativePath:"zs-use/linux/常见问题/服务器安装手册.md",key:"v-8001c0ce",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C.html",headers:[{level:2,title:"防火墙与 selinux 关闭",slug:"防火墙与-selinux-关闭",normalizedTitle:"防火墙与 selinux 关闭",charIndex:14},{level:2,title:"修改系统的 open files 与 nproc",slug:"修改系统的-open-files-与-nproc",normalizedTitle:"修改系统的 open files 与 nproc",charIndex:198},{level:2,title:"修改 sshd 监听端口",slug:"修改-sshd-监听端口",normalizedTitle:"修改 sshd 监听端口",charIndex:478},{level:2,title:"主机名设置",slug:"主机名设置",normalizedTitle:"主机名设置",charIndex:631},{level:2,title:"修改 hosts 文件",slug:"修改-hosts-文件",normalizedTitle:"修改 hosts 文件",charIndex:768},{level:2,title:"rpm证书",slug:"rpm证书",normalizedTitle:"rpm证书",charIndex:1089},{level:2,title:"本地yum源",slug:"本地yum源",normalizedTitle:"本地yum源",charIndex:1152},{level:2,title:"网络设置",slug:"网络设置",normalizedTitle:"网络设置",charIndex:1975}],lastUpdated:"2023年12月19日星期二晚上7点45分",lastUpdatedTimestamp:1702986325e3,headersStr:"防火墙与 selinux 关闭 修改系统的 open files 与 nproc 修改 sshd 监听端口 主机名设置 修改 hosts 文件 rpm证书 本地yum源 网络设置",content:"# 服务器安装手册\n\n\n# 防火墙与 selinux 关闭\n\n使用 root 用户进行登入\n\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n\n\n关闭 selinux，修改 selinux 配置文件：/etc/selinux/config。修改文件中的“SELINUX”值为：disabled\n\n\n\n\n# 修改系统的 open files 与 nproc\n\n建议将系统的 open files 与 nproc 两个参数修改为：65535\n\n先修改 open files 的，打开文件：/etc/security/limits.conf，在文件中添加：\n\n* soft nproc 65535\n* hard nproc 65535\n\n\n\n\n再修改系统 nproc 的参数，修改文件：/etc/security/limits.d/20-nproc.conf。在文件中修改添加：\n\n* soft nproc 65535\n* hard nproc 65535\n\n\n\n\n\n# 修改 sshd 监听端口\n\n以 root 用户权限修改配置文件：/etc/ssh/sshd_config。\n\n将 Port 前的注释“#”去掉，修改 22 为 10022。\n\n\n\n修改保存后，重启 sshd.service 服务：\n\nsystemctl restart sshd.service\n\n\n\n# 主机名设置\n\n已 root 权限(切换 root 用命令：su -)打开系统的/etc/hostname 文件，并修改该文件，且该文件中只保留一行“xiaoshaozi”\n\nsystemctl restart systemd-hostnamed.service \n\n\n\n# 修改 hosts 文件\n\n以 root 用户权限，在/etc/hosts 文件中添加本地地址的 DNS 解析，\n\n解决后面RabbitMQ 的访问速率缓慢，RabbitMQ 通过主机名解析进行访问。\n\n因此需将主机名解析加到服务器的本地解析文件中，由于已经确定了主机名是：jysp，\n\n网络地址：192.168.1.100，因此只需添加：\n\n\n\n# 重启网卡 刷新生效\n/etc/init.d/network restart\n\nsystemctl restart network.service\n\n# 解析域名ip地址\nping www.baidu.com -c 1 | sed '1{s/[^(]*(//;s/).*//;q}'\n\n\n\n# rpm证书\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n\n\n# 本地yum源\n\n将CentOS-7-aarch64-Everything-2009.iso镜像文件上传到服务器\n\n[root@jysp jysp]# mkdir /media/CentOS/\n\n[root@jysp jysp]# mount -o loop /home/jysp/CentOS-7-x86_64-Everything-2009.iso /media/CentOS/\nmount: /dev/loop0 写保护，将以只读方式挂载\n\n\n在/etc/yum.repos.d/目录下新建目录bak，然后将yum.repo.d目录下的所有文件都移动到bak目录下\n\nmkdir /etc/yum.repos.d/bak\nmv /etc/yum.repos.d/* /etc/yum.repos.d/bak\n\n\nvim CentOS-Media.repo\n# 容器名称\n[c7-media]\n# 容器说明\nname=CentOS-$releasever - Media\n# mirrorlist 镜像站点\n# yum源服务器的地址,镜像挂载地址\nbaseurl=file:///media/CentOS/\n# 如果为1则表示RPM的数字证书生效\ngpgcheck=1\n# 此容器是否生效\nenabled=1\n# 数字证书的公钥文件保存位置\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n\n\n清空yum缓存\n[root@RedHat8 yum.repos.d]# yum clean all\n创建yum缓存\n[root@RedHat8 yum.repos.d]# yum makecache\n查看仓库\n[root@RedHat8 yum.repos.d]# yum repolist\n查看yum列表\n[root@RedHat8 yum.repos.d]# yum list\n\n\n\n# 网络设置\n\n\n\n\n\n\n\n\n\n",normalizedContent:"# 服务器安装手册\n\n\n# 防火墙与 selinux 关闭\n\n使用 root 用户进行登入\n\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n\n\n关闭 selinux，修改 selinux 配置文件：/etc/selinux/config。修改文件中的“selinux”值为：disabled\n\n\n\n\n# 修改系统的 open files 与 nproc\n\n建议将系统的 open files 与 nproc 两个参数修改为：65535\n\n先修改 open files 的，打开文件：/etc/security/limits.conf，在文件中添加：\n\n* soft nproc 65535\n* hard nproc 65535\n\n\n\n\n再修改系统 nproc 的参数，修改文件：/etc/security/limits.d/20-nproc.conf。在文件中修改添加：\n\n* soft nproc 65535\n* hard nproc 65535\n\n\n\n\n\n# 修改 sshd 监听端口\n\n以 root 用户权限修改配置文件：/etc/ssh/sshd_config。\n\n将 port 前的注释“#”去掉，修改 22 为 10022。\n\n\n\n修改保存后，重启 sshd.service 服务：\n\nsystemctl restart sshd.service\n\n\n\n# 主机名设置\n\n已 root 权限(切换 root 用命令：su -)打开系统的/etc/hostname 文件，并修改该文件，且该文件中只保留一行“xiaoshaozi”\n\nsystemctl restart systemd-hostnamed.service \n\n\n\n# 修改 hosts 文件\n\n以 root 用户权限，在/etc/hosts 文件中添加本地地址的 dns 解析，\n\n解决后面rabbitmq 的访问速率缓慢，rabbitmq 通过主机名解析进行访问。\n\n因此需将主机名解析加到服务器的本地解析文件中，由于已经确定了主机名是：jysp，\n\n网络地址：192.168.1.100，因此只需添加：\n\n\n\n# 重启网卡 刷新生效\n/etc/init.d/network restart\n\nsystemctl restart network.service\n\n# 解析域名ip地址\nping www.baidu.com -c 1 | sed '1{s/[^(]*(//;s/).*//;q}'\n\n\n\n# rpm证书\n\nrpm --import /etc/pki/rpm-gpg/rpm-gpg-key-centos-7\n\n\n\n# 本地yum源\n\n将centos-7-aarch64-everything-2009.iso镜像文件上传到服务器\n\n[root@jysp jysp]# mkdir /media/centos/\n\n[root@jysp jysp]# mount -o loop /home/jysp/centos-7-x86_64-everything-2009.iso /media/centos/\nmount: /dev/loop0 写保护，将以只读方式挂载\n\n\n在/etc/yum.repos.d/目录下新建目录bak，然后将yum.repo.d目录下的所有文件都移动到bak目录下\n\nmkdir /etc/yum.repos.d/bak\nmv /etc/yum.repos.d/* /etc/yum.repos.d/bak\n\n\nvim centos-media.repo\n# 容器名称\n[c7-media]\n# 容器说明\nname=centos-$releasever - media\n# mirrorlist 镜像站点\n# yum源服务器的地址,镜像挂载地址\nbaseurl=file:///media/centos/\n# 如果为1则表示rpm的数字证书生效\ngpgcheck=1\n# 此容器是否生效\nenabled=1\n# 数字证书的公钥文件保存位置\ngpgkey=file:///etc/pki/rpm-gpg/rpm-gpg-key-centos-7\n\n\n\n清空yum缓存\n[root@redhat8 yum.repos.d]# yum clean all\n创建yum缓存\n[root@redhat8 yum.repos.d]# yum makecache\n查看仓库\n[root@redhat8 yum.repos.d]# yum repolist\n查看yum列表\n[root@redhat8 yum.repos.d]# yum list\n\n\n\n# 网络设置\n\n\n\n\n\n\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702985053e3},{title:"主机名修改",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%BF%AE%E6%94%B9.html",relativePath:"zs-use/linux/常见问题/主机名修改.md",key:"v-351d81a2",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%BF%AE%E6%94%B9.html",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:12},{level:2,title:"一、查看主机名",slug:"一、查看主机名",normalizedTitle:"一、查看主机名",charIndex:149},{level:2,title:"二、修改主机名",slug:"二、修改主机名",normalizedTitle:"二、修改主机名",charIndex:224},{level:3,title:"1.临时修改主机名",slug:"_1-临时修改主机名",normalizedTitle:"1.临时修改主机名",charIndex:236},{level:3,title:"2.永久修改主机名",slug:"_2-永久修改主机名",normalizedTitle:"2.永久修改主机名",charIndex:309},{level:2,title:"三、主机名所在服务",slug:"三、主机名所在服务",normalizedTitle:"三、主机名所在服务",charIndex:913}],lastUpdated:"2023年12月19日星期二晚上7点27分",lastUpdatedTimestamp:170298526e4,headersStr:"概述 一、查看主机名 二、修改主机名 1.临时修改主机名 2.永久修改主机名 三、主机名所在服务",content:'# 主机名修改\n\n\n# 概述\n\n> RHEL6修改主机名的配置文件是 /etc/sysconfig/network\n> \n> RHEL7修改主机名的配置文件是 /etc/hostname\n> \n> 其次，主机名修改又分为临时修改和永久修改；\n> \n> 还可划分为修改配置文件和用命令修改。\n\n\n# 一、查看主机名\n\nhostname  #查看主机名 (各版本通用命令)\nhostnamectl #查看主机信息(RHEL7或以上版本有效)\n\n\n\n# 二、修改主机名\n\n\n# 1.临时修改主机名\n\nhostname RHEL7.2  #临时通过命令修改主机名（修改后立即生效）\nhostname  #查看主机名\n\n\n\n# 2.永久修改主机名\n\n# 1.RHEL6修改方式\n\nvim /etc/sysconfig/network #编辑配置文件，修改主机名\n    \n     注：此方式，在RHEL7及其以上版本，已被弃用。\n\n\n NETWORKING=yes\n\nHOSTNAME=RHEL6.5 注：CentOS6.5也是修改这里\n     \nreboot #重启后生效\n\n\n# 2.RHEL7及其以上版本修改方法(修改后立即生效，无需重启服务)\n\na)修改配置文件（方法一）\n\nvim /etc/hostname  #修改主机名 \n    RHEL7.2 \n\n\n注：直接把名称写入即可\n\nb)命令修改 （方法二）\n\nhostnamectl set-hostname --static "RHEL7.2"   #注：该命令会同步修改/etc/hostname\nhostnamectl set-hostname --pretty "RHEL7init"   #给主机起别名（昵称）\nhostnamectl   #查看设置后的主机名信息\n\n\n注：如果觉得这个方式稍微繁琐，可以直接用（该方式本质是上面两个命令的合集，把主机名和昵称修改为一致了）\n\nhostnamectl set-hostname RHEL7.2    \nhostnamectl #查看主机名\n\n\nc)图形界面修改（方法三）\n\nnmtui #打开图形界面\n\n\n\n# 三、主机名所在服务\n\n在RHEL7上面有一个服务控制主机名\n\ncd /usr/lib/systemd/system  #切换到服务所在列表\nls systemd-hostnamed.service\nvim systemd-hostnamed.service  #查看服务信息\n',normalizedContent:'# 主机名修改\n\n\n# 概述\n\n> rhel6修改主机名的配置文件是 /etc/sysconfig/network\n> \n> rhel7修改主机名的配置文件是 /etc/hostname\n> \n> 其次，主机名修改又分为临时修改和永久修改；\n> \n> 还可划分为修改配置文件和用命令修改。\n\n\n# 一、查看主机名\n\nhostname  #查看主机名 (各版本通用命令)\nhostnamectl #查看主机信息(rhel7或以上版本有效)\n\n\n\n# 二、修改主机名\n\n\n# 1.临时修改主机名\n\nhostname rhel7.2  #临时通过命令修改主机名（修改后立即生效）\nhostname  #查看主机名\n\n\n\n# 2.永久修改主机名\n\n# 1.rhel6修改方式\n\nvim /etc/sysconfig/network #编辑配置文件，修改主机名\n    \n     注：此方式，在rhel7及其以上版本，已被弃用。\n\n\n networking=yes\n\nhostname=rhel6.5 注：centos6.5也是修改这里\n     \nreboot #重启后生效\n\n\n# 2.rhel7及其以上版本修改方法(修改后立即生效，无需重启服务)\n\na)修改配置文件（方法一）\n\nvim /etc/hostname  #修改主机名 \n    rhel7.2 \n\n\n注：直接把名称写入即可\n\nb)命令修改 （方法二）\n\nhostnamectl set-hostname --static "rhel7.2"   #注：该命令会同步修改/etc/hostname\nhostnamectl set-hostname --pretty "rhel7init"   #给主机起别名（昵称）\nhostnamectl   #查看设置后的主机名信息\n\n\n注：如果觉得这个方式稍微繁琐，可以直接用（该方式本质是上面两个命令的合集，把主机名和昵称修改为一致了）\n\nhostnamectl set-hostname rhel7.2    \nhostnamectl #查看主机名\n\n\nc)图形界面修改（方法三）\n\nnmtui #打开图形界面\n\n\n\n# 三、主机名所在服务\n\n在rhel7上面有一个服务控制主机名\n\ncd /usr/lib/systemd/system  #切换到服务所在列表\nls systemd-hostnamed.service\nvim systemd-hostnamed.service  #查看服务信息\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702985053e3},{title:"2、base基本功能",frontmatter:{autoSort:9999},regularPath:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/2%E3%80%81base%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD.html",relativePath:"zs-use/linux/shell编程/2、base基本功能.md",key:"v-2e4bb12b",path:"/zs-use/linux/shell%E7%BC%96%E7%A8%8B/2%E3%80%81base%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD.html",headers:[{level:2,title:"历史命令",slug:"历史命令",normalizedTitle:"历史命令",charIndex:17},{level:2,title:"命令与文件的补全",slug:"命令与文件的补全",normalizedTitle:"命令与文件的补全",charIndex:47},{level:2,title:"命令别名",slug:"命令别名",normalizedTitle:"命令别名",charIndex:65},{level:2,title:"Bash常用快捷键",slug:"bash常用快捷键",normalizedTitle:"bash常用快捷键",charIndex:93},{level:2,title:"输入输出重定向",slug:"输入输出重定向",normalizedTitle:"输入输出重定向",charIndex:551},{level:2,title:"多命令顺序执行",slug:"多命令顺序执行",normalizedTitle:"多命令顺序执行",charIndex:1503},{level:2,title:"管道符",slug:"管道符",normalizedTitle:"管道符",charIndex:2098},{level:2,title:"通配符",slug:"通配符",normalizedTitle:"通配符",charIndex:2122},{level:2,title:"Bash中其他特殊符号",slug:"bash中其他特殊符号",normalizedTitle:"bash中其他特殊符号",charIndex:2372}],lastUpdated:"2024年2月22日星期四晚上10点21分",lastUpdatedTimestamp:1708611676e3,headersStr:"历史命令 命令与文件的补全 命令别名 Bash常用快捷键 输入输出重定向 多命令顺序执行 管道符 通配符 Bash中其他特殊符号",content:'# 2、base基本功能\n\n\n# 历史命令\n\n> 参考： 23、history.md\n\n\n# 命令与文件的补全\n\n> 略\n\n\n# 命令别名\n\n> 参考： 24、alias.md\n\n\n# Bash常用快捷键\n\n快捷键      作用\nTab键     命令或文件补全\nctrl+a   把光标移动到命令行开头。\n         如果我们输入的命令过长，想要把光标移动到命令行开头时使用。\nctrl+e   把光标移动到命令行结尾。\nctrl+c   强制终止当前的命令。\nctrl+l   清屏，相当于clear命令。\nctrl+u   删除或剪切光标之前的命令。\n         我输入了一行很长的命令，不用使用退格键一个一个字符的删除，使用这个快捷键会更加方便\nctrl+y   粘贴ctrl+u剪切的内容。\nctrl+k   粘贴ctrl+u或ctrl+k剪切的内容。\nctrl+r   在历史命令中搜索，按下ctrl+r之后，就会出现搜索界面，只要输入搜索内容，就会从历史命令中搜索。\nctrl+d   退出当前终端。\nctrl+z   暂停，并放入后台。这个快捷键牵扯工作管理的内容，我们在系统管理章节详细介绍。\nctrl+s   暂停屏幕输出。\nctrl+q   恢复屏幕输出。\n\n\n# 输入输出重定向\n\n1）、bash的标准输入输出\n\n设备    设备文件名         文件描述符   类型\n键盘    /dev/stdin    0       标准输入\n显示器   /dev/stdout   1       标准输出\n显示器   /dev/stderr   2       标准错误输出\n\n2）、输出重定向\n\n类型              符号               作用\n标准输出重定向         命令 > 文件          以覆盖的方式，把命令的正确输出输出到指定的文件或设备当中。\n                命令 >> 文件         以追加的方式，把命令的正确输出输出到指定的文件或设备当中。\n标准错误输出重定向       错误命令 2> 文件       以覆盖的方式，把命令的错误输出输出到指定的文件或设备当中。\n                错误命令 2>> 文件      以追加的方式，把命令的错误输出输出到指定的文件或设备当中。\n正确输出和错误输出同时保存   命令 > 文件 2>&1     以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令>>文件2>&1       以追加的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令&>文件           以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令&>>文件          以追加的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令>>文件1 2>>文件2   把正确的输出追加到文件1中，把错误的输出追加到文件2中。\n\n3）、输入重定向\n\n[root@localhost ~]# wc [选项] [文件名]\n选项：\n    -c\t统计字节数\n    -w\t统计单词数\n    -l\t统计行数\n    \n    \n[jysp@xiaoshaozi root]$ wc << uio\n> 1234\n> 1234\n> 1234\n> 12345\n> uio\n 4  4 21\n\n\n\n\n\n# 多命令顺序执行\n\n多命令执行符   格式          作用\n;        命令1;命令2     多个命令顺序执行，命令之间没有任何逻辑联系\n&&       命令1 &&命令2   当命令1正确执行 （$?=0），则命令2才会执行\n                     当命令1执行不正确（$?≠0），则命令2不会执行命令1\n||       命令1||命令2    当命令1执行不正确（$?≠0），则命令2才会执行\n                     当命令1正确执行（$?=0），则命令2不会执行\n\n同时执行\n[root@xiaoshaozi ~]# ls;date;cd /etc\nhello.sh\n2023年 12月 20日 星期三 16:38:14 CST\n[root@xiaoshaozi etc]# \n\n正确执行 命令1，才执行，命令2\n[root@xiaoshaozi ~]# ls && echo yes\nhello.sh\nyes\n\n正确执行 输出yes,错误执行 输出no\n[root@xiaoshaozi ~]# ls && echo yes || echo no\nhello.sh\nyes\n[root@xiaoshaozi ~]# ls123 && echo yes || echo no\nbash: ls123: 未找到命令\nno\n\n\n\n# 管道符\n\n> 参考： 19、管道.md\n\n\n# 通配符\n\n通配符   作用\n?     匹配一个任意字符\n*     匹配0个或任意多个任意字符，\n      也就是可以匹配任何内容\n[]    匹配中括号中任意一个字符。\n      例如：[abc]代表一定匹配一个字符，或者是a，或者是b，或者是c。\n[-]   匹配中括号中任意一个字符，代表一个范围。\n      例如：[a-z]代表匹配一个小写字母。\n[^]   逻辑非，表示匹配不是中括号内的一个字符。\n      例如：[^0-9]代表匹配一个不是数字的字符。\n      \n\n\n# Bash中其他特殊符号\n\n符号    作用\n\'\'    单引号。\n      在单引号中所有的特殊符号，如"$"和"`"(反引号)都没有特殊含义。\n""    双引号。\n      在双引号中特殊符号都没有特殊含义，\n      但是“$”、“`”和“\\”是例外，拥有“调用变量的值”、“引用命令”和“转义符”的特殊含义。\n``    反引号。\n      反引号括起来的内容是系统命令，在Bash中会先执行它。\n      和$()作用一样，不过推荐使用$()，因为反引号非常容易看错。\n$()   和反引号作用一样，用来引用系统命令。\n()    用于一串命令执行时，()中的命令会在子Shell中运行\n{}    用于一串命令执行时，{}中的命令会在当前Shell中执行。也可以用于变量变形与替换。\n[]    用于变量的测试。\n#     在Shell脚本中，#开头的行代表注释。\n$     用于调用变量的值，如需要调用变量name的值时，需要用$name的方式得到变量的值。\n\\     转义符，跟在\\之后的特殊符号将失去特殊含义，变为普通字符。如\\$将输出“$”符号，而不当做是变量引用。\n      \n\n1）、单引号和双引号\n\n定义变量name的值是sc（就是最正直的人，超哥我了！）\n[root@xiaoshaozi ~]# name=sc\n\n如果输出时使用单引号，则$name原封不动的输出\n[root@xiaoshaozi ~]# echo \'$name\'\n$name\n\n如果输出时使用双引号，则会输出变量name的值sc\n[root@xiaoshaozi ~]# echo "$name"\nsc\n\n\n[root@xiaoshaozi ~]# echo $name\nsc\n\n\n2）、反引号\n\n> 可以看懂 不推荐使用，推荐使用$()作用是一样的\n\n执行命令，输出\n[root@xiaoshaozi ~]# echo `date`\n2023年 12月 20日 星期三 17:08:29 CST\n\n输出 字符串\n[root@xiaoshaozi ~]# echo \'`date`\'\n`date`\n\n执行命令，输出\n[root@xiaoshaozi ~]# echo "`date`"\n2023年 12月 20日 星期三 17:09:05 CST\n\n\n[root@xiaoshaozi ~]# echo "date"\ndate\n\n\n\n\n3）、小括号、中括号和大括号\n\n在介绍小括号和大括号的区别之前，我们先要解释一个概念，那就是父Shell和子Shell。\n\n在我们的bash中，是可以调用新的bash的，比如：\n\n[root@xiaoshaozi ~]# bash\n[root@xiaoshaozi ~]# pstree\nsystemd─┬─AliYunDun───10*[{AliYunDun}]\n…省略部分输出\n        ├─sshd───sshd─┬─bash───sleep\n        │             ├─bash───su───bash───bash───pstree\n        │             └─bash───top\n …省略部分输出\n[root@xiaoshaozi ~]# \n\n\n知道了父Shell和子Shell，我们接着解释小括号和大括号的区别。如果是用于一串命令的执行，那么小括号和大括号的主要区别在于：\n\n()执行一串命令时，需要重新开一个子shell进行执行 {}执行一串命令时，是在当前shell执行； ()和{}都是把一串的命令放在括号里面，并且命令之间用;号隔开； ()最后一个命令可以不用分号； {}最后一个命令要用分号； {}的第一个命令和左括号之间必须要有一个空格； ()里的各命令不必和括号有空格； ()和{}中括号里面的某个命令的重定向只影响该命令，但括号外的重定向则影响到括号里的所有命令。\n\n还是举几个例子来看看吧，这样写实在是太抽象了：\n\n[root@xiaoshaozi ~]# name=sc\n\n# 在父Shell中定义变量name的值是sc\n# 如果用()括起来一串命令，这些命令都可以执行\n# 给name变量重新赋值，但是这个值只在子Shell中生效\n[root@xiaoshaozi ~]# (name=xiaoshaozi;echo $name)\nxiaoshaozi\n[root@xiaoshaozi ~]# echo $name\nsc\n\n# 但是用大括号来进行一串命令的执行时，name变量的修改是直接在父Shell当中的\n# 注意大括号的格式\n[root@xiaoshaozi ~]# { name=xiaoshaozi;echo $name; }\nxiaoshaozi\n[root@xiaoshaozi ~]# echo $name\nxiaoshaozi\n[root@xiaoshaozi ~]# \n\n',normalizedContent:'# 2、base基本功能\n\n\n# 历史命令\n\n> 参考： 23、history.md\n\n\n# 命令与文件的补全\n\n> 略\n\n\n# 命令别名\n\n> 参考： 24、alias.md\n\n\n# bash常用快捷键\n\n快捷键      作用\ntab键     命令或文件补全\nctrl+a   把光标移动到命令行开头。\n         如果我们输入的命令过长，想要把光标移动到命令行开头时使用。\nctrl+e   把光标移动到命令行结尾。\nctrl+c   强制终止当前的命令。\nctrl+l   清屏，相当于clear命令。\nctrl+u   删除或剪切光标之前的命令。\n         我输入了一行很长的命令，不用使用退格键一个一个字符的删除，使用这个快捷键会更加方便\nctrl+y   粘贴ctrl+u剪切的内容。\nctrl+k   粘贴ctrl+u或ctrl+k剪切的内容。\nctrl+r   在历史命令中搜索，按下ctrl+r之后，就会出现搜索界面，只要输入搜索内容，就会从历史命令中搜索。\nctrl+d   退出当前终端。\nctrl+z   暂停，并放入后台。这个快捷键牵扯工作管理的内容，我们在系统管理章节详细介绍。\nctrl+s   暂停屏幕输出。\nctrl+q   恢复屏幕输出。\n\n\n# 输入输出重定向\n\n1）、bash的标准输入输出\n\n设备    设备文件名         文件描述符   类型\n键盘    /dev/stdin    0       标准输入\n显示器   /dev/stdout   1       标准输出\n显示器   /dev/stderr   2       标准错误输出\n\n2）、输出重定向\n\n类型              符号               作用\n标准输出重定向         命令 > 文件          以覆盖的方式，把命令的正确输出输出到指定的文件或设备当中。\n                命令 >> 文件         以追加的方式，把命令的正确输出输出到指定的文件或设备当中。\n标准错误输出重定向       错误命令 2> 文件       以覆盖的方式，把命令的错误输出输出到指定的文件或设备当中。\n                错误命令 2>> 文件      以追加的方式，把命令的错误输出输出到指定的文件或设备当中。\n正确输出和错误输出同时保存   命令 > 文件 2>&1     以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令>>文件2>&1       以追加的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令&>文件           以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令&>>文件          以追加的方式，把正确输出和错误输出都保存到同一个文件当中。\n                命令>>文件1 2>>文件2   把正确的输出追加到文件1中，把错误的输出追加到文件2中。\n\n3）、输入重定向\n\n[root@localhost ~]# wc [选项] [文件名]\n选项：\n    -c\t统计字节数\n    -w\t统计单词数\n    -l\t统计行数\n    \n    \n[jysp@xiaoshaozi root]$ wc << uio\n> 1234\n> 1234\n> 1234\n> 12345\n> uio\n 4  4 21\n\n\n\n\n\n# 多命令顺序执行\n\n多命令执行符   格式          作用\n;        命令1;命令2     多个命令顺序执行，命令之间没有任何逻辑联系\n&&       命令1 &&命令2   当命令1正确执行 （$?=0），则命令2才会执行\n                     当命令1执行不正确（$?=0），则命令2不会执行命令1\n||       命令1||命令2    当命令1执行不正确（$?=0），则命令2才会执行\n                     当命令1正确执行（$?=0），则命令2不会执行\n\n同时执行\n[root@xiaoshaozi ~]# ls;date;cd /etc\nhello.sh\n2023年 12月 20日 星期三 16:38:14 cst\n[root@xiaoshaozi etc]# \n\n正确执行 命令1，才执行，命令2\n[root@xiaoshaozi ~]# ls && echo yes\nhello.sh\nyes\n\n正确执行 输出yes,错误执行 输出no\n[root@xiaoshaozi ~]# ls && echo yes || echo no\nhello.sh\nyes\n[root@xiaoshaozi ~]# ls123 && echo yes || echo no\nbash: ls123: 未找到命令\nno\n\n\n\n# 管道符\n\n> 参考： 19、管道.md\n\n\n# 通配符\n\n通配符   作用\n?     匹配一个任意字符\n*     匹配0个或任意多个任意字符，\n      也就是可以匹配任何内容\n[]    匹配中括号中任意一个字符。\n      例如：[abc]代表一定匹配一个字符，或者是a，或者是b，或者是c。\n[-]   匹配中括号中任意一个字符，代表一个范围。\n      例如：[a-z]代表匹配一个小写字母。\n[^]   逻辑非，表示匹配不是中括号内的一个字符。\n      例如：[^0-9]代表匹配一个不是数字的字符。\n      \n\n\n# bash中其他特殊符号\n\n符号    作用\n\'\'    单引号。\n      在单引号中所有的特殊符号，如"$"和"`"(反引号)都没有特殊含义。\n""    双引号。\n      在双引号中特殊符号都没有特殊含义，\n      但是“$”、“`”和“\\”是例外，拥有“调用变量的值”、“引用命令”和“转义符”的特殊含义。\n``    反引号。\n      反引号括起来的内容是系统命令，在bash中会先执行它。\n      和$()作用一样，不过推荐使用$()，因为反引号非常容易看错。\n$()   和反引号作用一样，用来引用系统命令。\n()    用于一串命令执行时，()中的命令会在子shell中运行\n{}    用于一串命令执行时，{}中的命令会在当前shell中执行。也可以用于变量变形与替换。\n[]    用于变量的测试。\n#     在shell脚本中，#开头的行代表注释。\n$     用于调用变量的值，如需要调用变量name的值时，需要用$name的方式得到变量的值。\n\\     转义符，跟在\\之后的特殊符号将失去特殊含义，变为普通字符。如\\$将输出“$”符号，而不当做是变量引用。\n      \n\n1）、单引号和双引号\n\n定义变量name的值是sc（就是最正直的人，超哥我了！）\n[root@xiaoshaozi ~]# name=sc\n\n如果输出时使用单引号，则$name原封不动的输出\n[root@xiaoshaozi ~]# echo \'$name\'\n$name\n\n如果输出时使用双引号，则会输出变量name的值sc\n[root@xiaoshaozi ~]# echo "$name"\nsc\n\n\n[root@xiaoshaozi ~]# echo $name\nsc\n\n\n2）、反引号\n\n> 可以看懂 不推荐使用，推荐使用$()作用是一样的\n\n执行命令，输出\n[root@xiaoshaozi ~]# echo `date`\n2023年 12月 20日 星期三 17:08:29 cst\n\n输出 字符串\n[root@xiaoshaozi ~]# echo \'`date`\'\n`date`\n\n执行命令，输出\n[root@xiaoshaozi ~]# echo "`date`"\n2023年 12月 20日 星期三 17:09:05 cst\n\n\n[root@xiaoshaozi ~]# echo "date"\ndate\n\n\n\n\n3）、小括号、中括号和大括号\n\n在介绍小括号和大括号的区别之前，我们先要解释一个概念，那就是父shell和子shell。\n\n在我们的bash中，是可以调用新的bash的，比如：\n\n[root@xiaoshaozi ~]# bash\n[root@xiaoshaozi ~]# pstree\nsystemd─┬─aliyundun───10*[{aliyundun}]\n…省略部分输出\n        ├─sshd───sshd─┬─bash───sleep\n        │             ├─bash───su───bash───bash───pstree\n        │             └─bash───top\n …省略部分输出\n[root@xiaoshaozi ~]# \n\n\n知道了父shell和子shell，我们接着解释小括号和大括号的区别。如果是用于一串命令的执行，那么小括号和大括号的主要区别在于：\n\n()执行一串命令时，需要重新开一个子shell进行执行 {}执行一串命令时，是在当前shell执行； ()和{}都是把一串的命令放在括号里面，并且命令之间用;号隔开； ()最后一个命令可以不用分号； {}最后一个命令要用分号； {}的第一个命令和左括号之间必须要有一个空格； ()里的各命令不必和括号有空格； ()和{}中括号里面的某个命令的重定向只影响该命令，但括号外的重定向则影响到括号里的所有命令。\n\n还是举几个例子来看看吧，这样写实在是太抽象了：\n\n[root@xiaoshaozi ~]# name=sc\n\n# 在父shell中定义变量name的值是sc\n# 如果用()括起来一串命令，这些命令都可以执行\n# 给name变量重新赋值，但是这个值只在子shell中生效\n[root@xiaoshaozi ~]# (name=xiaoshaozi;echo $name)\nxiaoshaozi\n[root@xiaoshaozi ~]# echo $name\nsc\n\n# 但是用大括号来进行一串命令的执行时，name变量的修改是直接在父shell当中的\n# 注意大括号的格式\n[root@xiaoshaozi ~]# { name=xiaoshaozi;echo $name; }\nxiaoshaozi\n[root@xiaoshaozi ~]# echo $name\nxiaoshaozi\n[root@xiaoshaozi ~]# \n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1703122586e3},{title:"说明",frontmatter:{},regularPath:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/",relativePath:"zs-use/linux/虚拟化/readme.md",key:"v-8d1ed816",path:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/",lastUpdated:"2024年1月19日星期五上午9点43分",lastUpdatedTimestamp:1705628604e3,headersStr:null,content:"# 说明",normalizedContent:"# 说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705628604e3},{title:"docker默认存储目录",frontmatter:{},regularPath:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/docker--faq--%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3.html",relativePath:"zs-use/linux/虚拟化/docker--faq--磁盘空间不足.md",key:"v-267387f4",path:"/zs-use/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/docker--faq--%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3.html",headers:[{level:2,title:"docker默认存储目录",slug:"docker默认存储目录",normalizedTitle:"docker默认存储目录",charIndex:2}],lastUpdated:"2024年1月19日星期五上午9点43分",lastUpdatedTimestamp:1705628604e3,headersStr:"docker默认存储目录",content:'# docker默认存储目录\n\n当你在使用 Docker 时，如果 /var/lib/docker 目录的空间不足，可能会导致一些问题，如无法创建新的容器或无法下载镜像等。为了解决这个问题，你可以采取以下几个步骤：\n\n * 清理无用的镜像和容器： 使用 docker system prune 命令可以清理掉未使用的镜像、停止的容器和无用的网络等资源。这将释放一些磁盘空间。\n\n * 移动 Docker 数据目录： 如果你的 /var/lib/docker 目录所在的分区空间非常有限，你可以考虑将 Docker 的数据目录迁移到另一个具有足够空间的分区上。 首先，停止 Docker 服务：systemctl stop docker。 然后，将 /var/lib/docker 目录下的所有内容复制到新的目录中（例如 /new/docker）。 接下来，在 /etc/docker/daemon.json 文件中添加以下配置项：\n   \n   vim /etc/docker/daemon.json\n   {\n     "data-root":"/new/docker"\n   }\n   \n   \n   保存并退出文件，然后启动 Docker 服务：systemctl start docker。这样 Docker 将使用新的数据目录来存储镜像、容器等数据。\n\n * 调整 Docker 镜像存储位置： Docker 默认将镜像存储在 /var/lib/docker 目录下的 overlay2 文件夹中。 你可以修改 Docker 配置，将镜像存储到具有更多空间的位置。 首先，停止 Docker 服务：systemctl stop docker。然后，编辑 /etc/docker/daemon.json 文件，在其中添加以下配置项：\n   \n   vim /etc/docker/daemon.json\n   { \n       "graph": "/new/image/storage/path" \n   } \n   \n   \n   将 /new/image/storage/path 替换为一个具有足够空间的目录路径。 保存并退出文件，然后启动 Docker 服务：systemctl start docker。\n\n这些方法都可以帮助你解决 /var/lib/docker 空间不足的问题，并确保 Docker 的正常运行。记得在操作前备份重要的数据，以免丢失。',normalizedContent:'# docker默认存储目录\n\n当你在使用 docker 时，如果 /var/lib/docker 目录的空间不足，可能会导致一些问题，如无法创建新的容器或无法下载镜像等。为了解决这个问题，你可以采取以下几个步骤：\n\n * 清理无用的镜像和容器： 使用 docker system prune 命令可以清理掉未使用的镜像、停止的容器和无用的网络等资源。这将释放一些磁盘空间。\n\n * 移动 docker 数据目录： 如果你的 /var/lib/docker 目录所在的分区空间非常有限，你可以考虑将 docker 的数据目录迁移到另一个具有足够空间的分区上。 首先，停止 docker 服务：systemctl stop docker。 然后，将 /var/lib/docker 目录下的所有内容复制到新的目录中（例如 /new/docker）。 接下来，在 /etc/docker/daemon.json 文件中添加以下配置项：\n   \n   vim /etc/docker/daemon.json\n   {\n     "data-root":"/new/docker"\n   }\n   \n   \n   保存并退出文件，然后启动 docker 服务：systemctl start docker。这样 docker 将使用新的数据目录来存储镜像、容器等数据。\n\n * 调整 docker 镜像存储位置： docker 默认将镜像存储在 /var/lib/docker 目录下的 overlay2 文件夹中。 你可以修改 docker 配置，将镜像存储到具有更多空间的位置。 首先，停止 docker 服务：systemctl stop docker。然后，编辑 /etc/docker/daemon.json 文件，在其中添加以下配置项：\n   \n   vim /etc/docker/daemon.json\n   { \n       "graph": "/new/image/storage/path" \n   } \n   \n   \n   将 /new/image/storage/path 替换为一个具有足够空间的目录路径。 保存并退出文件，然后启动 docker 服务：systemctl start docker。\n\n这些方法都可以帮助你解决 /var/lib/docker 空间不足的问题，并确保 docker 的正常运行。记得在操作前备份重要的数据，以免丢失。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705628604e3},{title:"安装nexus",frontmatter:{},regularPath:"/zs-use/maven/nexus--1.%E5%AE%89%E8%A3%85.html",relativePath:"zs-use/maven/nexus--1.安装.md",key:"v-aa79f4da",path:"/zs-use/maven/nexus--1.%E5%AE%89%E8%A3%85.html",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:14},{level:2,title:"window安装",slug:"window安装",normalizedTitle:"window安装",charIndex:311},{level:2,title:"Linux安装",slug:"linux安装",normalizedTitle:"linux安装",charIndex:579},{level:3,title:"安装过程",slug:"安装过程",normalizedTitle:"安装过程",charIndex:591},{level:3,title:"启动nexus",slug:"启动nexus",normalizedTitle:"启动nexus",charIndex:906},{level:3,title:"其它说明",slug:"其它说明",normalizedTitle:"其它说明",charIndex:1146}],lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:"简介 window安装 Linux安装 安装过程 启动nexus 其它说明",content:"# 安装nexus\n\n\n# 简介\n\nmaven仓库管理软件：\n\nApache基金会的archiva：Archiva – The Build Artifact Repository Manager\n\nJFrog的Artifactory：Artifactory - Universal Artifact Repository Manager - JFrog\n\nSonatype的Nexus：My Sonatype | Customer Platform\n\n推荐使用第三种，本文将在windows环境下介绍这三种。\n\n注意：nexus是java开发，所以需要j保证电脑安装了java环境。\n\n下载地址：Download\n\n\n# window安装\n\n\n\n解压后文件夹后进入bin目录\n\n\n\n直接cmd运行：\n\nD:\\App\\nexus-3.55.0-01-win64\\nexus-3.55.0-01\\bin>nexus.exe /run\n\n\n运行之后出现如下异常、但是不影响：\n\n\n\n浏览器打开如下：\n\nhttp://localhost:8081/\n\n\n\n右上角登录：\n\n用户名：admin（默认）\n\n密码：第一次启动时生成，(在/sonatype-work/nexus3/admin.password 文件中)\n\n登录之后可以进行一些修改密码等指引操作。\n\n\n# Linux安装\n\n\n# 安装过程\n\ncd /usr/local && mkdir nexus && cd nexus\n\nwget http://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.6.0-02-unix.tar.gz\n\ntar -zxvf nexus-3.6.0-02-unix.tar.gz  //解压\nmv nexus-3.6.0-02  nexus              //重命名\n\n#如果Linux硬件配置比较低的话，建议修改为合适的大小，否则会出现运行崩溃的现象\nvim nexus/bin/nexus.vmoptions //虚拟机选项配置文件\n\n\n\n\n\n# 启动nexus\n\n启动 Nexus（默认端口是8081），Nexus 常用的一些命令包括：/usr/local/nexus/nexus/bin/nexus {start|stop|run|run-redirect|status|restart|force-reload}，下面我们启动Nexus：启动命令：bin/nexus start\n\n\n\n说明已经安装启动成功，上面报错意思是nexus建议不要用root用户来启动nexus，但并不影响启动,如果要去除这个可以百度。\n\n\n# 其它说明\n\n1）Nexus默认的端口是8081，可以在etc/nexus-default.properties配置中修改。\n\n2）Nexus默认的用户名密码是admin/admin123\n\n3）当遇到奇怪问题时，重启nexus，启动时间会比较慢 要1分钟左右后才能访问。\n\n4）Nexus的工作目录是sonatype-work（路径一般在nexus同级目录下）",normalizedContent:"# 安装nexus\n\n\n# 简介\n\nmaven仓库管理软件：\n\napache基金会的archiva：archiva – the build artifact repository manager\n\njfrog的artifactory：artifactory - universal artifact repository manager - jfrog\n\nsonatype的nexus：my sonatype | customer platform\n\n推荐使用第三种，本文将在windows环境下介绍这三种。\n\n注意：nexus是java开发，所以需要j保证电脑安装了java环境。\n\n下载地址：download\n\n\n# window安装\n\n\n\n解压后文件夹后进入bin目录\n\n\n\n直接cmd运行：\n\nd:\\app\\nexus-3.55.0-01-win64\\nexus-3.55.0-01\\bin>nexus.exe /run\n\n\n运行之后出现如下异常、但是不影响：\n\n\n\n浏览器打开如下：\n\nhttp://localhost:8081/\n\n\n\n右上角登录：\n\n用户名：admin（默认）\n\n密码：第一次启动时生成，(在/sonatype-work/nexus3/admin.password 文件中)\n\n登录之后可以进行一些修改密码等指引操作。\n\n\n# linux安装\n\n\n# 安装过程\n\ncd /usr/local && mkdir nexus && cd nexus\n\nwget http://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.6.0-02-unix.tar.gz\n\ntar -zxvf nexus-3.6.0-02-unix.tar.gz  //解压\nmv nexus-3.6.0-02  nexus              //重命名\n\n#如果linux硬件配置比较低的话，建议修改为合适的大小，否则会出现运行崩溃的现象\nvim nexus/bin/nexus.vmoptions //虚拟机选项配置文件\n\n\n\n\n\n# 启动nexus\n\n启动 nexus（默认端口是8081），nexus 常用的一些命令包括：/usr/local/nexus/nexus/bin/nexus {start|stop|run|run-redirect|status|restart|force-reload}，下面我们启动nexus：启动命令：bin/nexus start\n\n\n\n说明已经安装启动成功，上面报错意思是nexus建议不要用root用户来启动nexus，但并不影响启动,如果要去除这个可以百度。\n\n\n# 其它说明\n\n1）nexus默认的端口是8081，可以在etc/nexus-default.properties配置中修改。\n\n2）nexus默认的用户名密码是admin/admin123\n\n3）当遇到奇怪问题时，重启nexus，启动时间会比较慢 要1分钟左右后才能访问。\n\n4）nexus的工作目录是sonatype-work（路径一般在nexus同级目录下）",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"自定义archetype-01",frontmatter:{},regularPath:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-01.html",relativePath:"zs-use/maven/自定义archetype-01.md",key:"v-46446437",path:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-01.html",lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:null,content:"# 自定义archetype-01\n\nArchetype 是一个 Maven 项目模板工具包。原型被定义为原始模式或模型，从中创建所有其他相同类型的东西。这些名称适合我们尝试提供一个系统，该系统提供生成Maven项目的一致方法。Archetype 将帮助作者为用户创建 Maven 项目模板，并为用户提供生成这些项目模板的参数化版本的方法。\n\n技术成熟的公司基本都有自己的一套 Archetype ，接下来我们就来实践一下，怎么定义出自己的 Archetype 。\n\n1.创建一个maven工程为 archetype 的模板生成作准备。结构如下：\n\n\n\n 2. 到项目根目录下执行(pom.xml同级目录) ，执行 mvn archetype:create-from-project ，执行成功后会在项目target下生成这些文件:\n\n\n\n3.先进入到 target/generated-sources/archetype/ 目录里面。如下图：\n\n\n\n4.然后执行 mvn install .执行成功后，执行 mvn archetype:crawl 命令，在本地仓库的根目录生成archetype-catalog.xml骨架配置文件:\n\n\n\n由于每个人的 maven 仓库不一样，所以这里打出来的文件里可能又多个，也有可能只有一个。不过只要保证 自己的哪个骨架模板在里面就行。\n\n5.使用archetype模板\n\n1.执行mvn archetype:generate -DarchetypeCatalog=local从本地archeType模板中创建项目。然后会让你选择模板序号和groupId、artifactId、version和package信息：\n\n\n\n然后打开对应的工程可以发现结构、内容都是跟之前生成这个 archetype 的工程是一摸一样的。\n\n2.使用IDEA来帮我们用图形界面使用archeType模板创建项目\n\n\n\n\n\n注意：在properites下加一行：archetypeCatalog = internal，其中internal用来指定archetype-catalog.xml文件从哪里获取,为可选值为：remote，internal ，local等，默认remote远程下载，非常慢，我们这里模板在本地，所以修改成本地。\n\n这样就完成了 maven archetype 的制作了。\n\n本文转自 https://www.cnblogs.com/wuzhenzhao/p/13307436.html，如有侵权，请联系删除。",normalizedContent:"# 自定义archetype-01\n\narchetype 是一个 maven 项目模板工具包。原型被定义为原始模式或模型，从中创建所有其他相同类型的东西。这些名称适合我们尝试提供一个系统，该系统提供生成maven项目的一致方法。archetype 将帮助作者为用户创建 maven 项目模板，并为用户提供生成这些项目模板的参数化版本的方法。\n\n技术成熟的公司基本都有自己的一套 archetype ，接下来我们就来实践一下，怎么定义出自己的 archetype 。\n\n1.创建一个maven工程为 archetype 的模板生成作准备。结构如下：\n\n\n\n 2. 到项目根目录下执行(pom.xml同级目录) ，执行 mvn archetype:create-from-project ，执行成功后会在项目target下生成这些文件:\n\n\n\n3.先进入到 target/generated-sources/archetype/ 目录里面。如下图：\n\n\n\n4.然后执行 mvn install .执行成功后，执行 mvn archetype:crawl 命令，在本地仓库的根目录生成archetype-catalog.xml骨架配置文件:\n\n\n\n由于每个人的 maven 仓库不一样，所以这里打出来的文件里可能又多个，也有可能只有一个。不过只要保证 自己的哪个骨架模板在里面就行。\n\n5.使用archetype模板\n\n1.执行mvn archetype:generate -darchetypecatalog=local从本地archetype模板中创建项目。然后会让你选择模板序号和groupid、artifactid、version和package信息：\n\n\n\n然后打开对应的工程可以发现结构、内容都是跟之前生成这个 archetype 的工程是一摸一样的。\n\n2.使用idea来帮我们用图形界面使用archetype模板创建项目\n\n\n\n\n\n注意：在properites下加一行：archetypecatalog = internal，其中internal用来指定archetype-catalog.xml文件从哪里获取,为可选值为：remote，internal ，local等，默认remote远程下载，非常慢，我们这里模板在本地，所以修改成本地。\n\n这样就完成了 maven archetype 的制作了。\n\n本文转自 https://www.cnblogs.com/wuzhenzhao/p/13307436.html，如有侵权，请联系删除。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"错误--没有子进程",frontmatter:{},regularPath:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%94%99%E8%AF%AF--%E6%B2%A1%E6%9C%89%E5%AD%90%E8%BF%9B%E7%A8%8B.html",relativePath:"zs-use/linux/常见问题/错误--没有子进程.md",key:"v-41855c61",path:"/zs-use/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%94%99%E8%AF%AF--%E6%B2%A1%E6%9C%89%E5%AD%90%E8%BF%9B%E7%A8%8B.html",lastUpdated:"2023年12月19日星期二晚上7点34分",lastUpdatedTimestamp:1702985647e3,headersStr:null,content:"# 错误--没有子进程\n\n> linux fork: retry: 没有子进程、资源暂时不可用问题解决\n\n普通用户执行命令时，有时候会报如下错误\n\n-bash: fork: retry: 没有子进程\n-bash: fork: retry: 没有子进程\n-bash: fork: retry: 没有子进程\n-bash: fork: retry: 资源暂时不可用\n\n\n是因为该用户的线程满了导致的。通过ulimit -a命令查看可以看到该用户的max user processes值是1024或者4096。对比查看root用户的，可以看到是unlimited。\n\n知道问题出在哪儿，就好解决了。 解决方法1、直接使用ulimit -u命令修改即可。\n\n[sgs@localhost ~]$ ulimit -u 10000\n[sgs@localhost ~]$ ulimit -u\n10000\n\n\n解决方法2、通过修改配置文件中该参数的值即可。\n\ncentos7.5中配置文件为/etc/security/limits.d/20-nproc.conf。 网上的参考资料中centos6为/etc/security/limits.d/90-nproc.conf这个未验证。\n\n[sgs@localhost ~]$ sudo vi /etc/security/limits.d/20-nproc.conf\n\n# Default limit for number of user's processes to prevent\n# accidental fork bombs.\n# See rhbz #432903 for reasoning.\n\n*          soft    nproc     4096\nroot       soft    nproc     unlimited\n\n\n修改4096为10000（所需的值）保存即可。注意需要用户重新登录才能生效，这一步网上许多关于修改配置文件的解决方法后都没提，要注意。",normalizedContent:"# 错误--没有子进程\n\n> linux fork: retry: 没有子进程、资源暂时不可用问题解决\n\n普通用户执行命令时，有时候会报如下错误\n\n-bash: fork: retry: 没有子进程\n-bash: fork: retry: 没有子进程\n-bash: fork: retry: 没有子进程\n-bash: fork: retry: 资源暂时不可用\n\n\n是因为该用户的线程满了导致的。通过ulimit -a命令查看可以看到该用户的max user processes值是1024或者4096。对比查看root用户的，可以看到是unlimited。\n\n知道问题出在哪儿，就好解决了。 解决方法1、直接使用ulimit -u命令修改即可。\n\n[sgs@localhost ~]$ ulimit -u 10000\n[sgs@localhost ~]$ ulimit -u\n10000\n\n\n解决方法2、通过修改配置文件中该参数的值即可。\n\ncentos7.5中配置文件为/etc/security/limits.d/20-nproc.conf。 网上的参考资料中centos6为/etc/security/limits.d/90-nproc.conf这个未验证。\n\n[sgs@localhost ~]$ sudo vi /etc/security/limits.d/20-nproc.conf\n\n# default limit for number of user's processes to prevent\n# accidental fork bombs.\n# see rhbz #432903 for reasoning.\n\n*          soft    nproc     4096\nroot       soft    nproc     unlimited\n\n\n修改4096为10000（所需的值）保存即可。注意需要用户重新登录才能生效，这一步网上许多关于修改配置文件的解决方法后都没提，要注意。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1702985647e3},{title:"自定义archetype-02-插件",frontmatter:{},regularPath:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-02-%E6%8F%92%E4%BB%B6.html",relativePath:"zs-use/maven/自定义archetype-02-插件.md",key:"v-60fd296e",path:"/zs-use/maven/%E8%87%AA%E5%AE%9A%E4%B9%89archetype-02-%E6%8F%92%E4%BB%B6.html",headers:[{level:2,title:"配置插件生成模板文件",slug:"配置插件生成模板文件",normalizedTitle:"配置插件生成模板文件",charIndex:25},{level:2,title:"修改父pom",slug:"修改父pom",normalizedTitle:"修改父pom",charIndex:192},{level:2,title:"修改module",slug:"修改module",normalizedTitle:"修改module",charIndex:1015},{level:2,title:"archetype-metadata 修改",slug:"archetype-metadata-修改",normalizedTitle:"archetype-metadata 修改",charIndex:1238}],lastUpdated:"2024年1月30日星期二下午4点58分",lastUpdatedTimestamp:1706605108e3,headersStr:"配置插件生成模板文件 修改父pom 修改module archetype-metadata 修改",content:"# 自定义archetype-02-插件\n\n\n# 配置插件生成模板文件\n\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-archetype-plugin</artifactId>\n    <version>3.2.0</version>\n</plugin>\n\n\n\n\n\n# 修改父pom\n\n首先，找到根目录的pom文件，会发现缺少module信息，这个必须加上。\n\n\n\n<modules>\n    <module>${rootArtifactId}-api</module>\n    <module>${rootArtifactId}-app</module>\n    <module>${rootArtifactId}-domain</module>\n    <module>${rootArtifactId}-trigger</module>\n    <module>${rootArtifactId}-infrastructure</module>\n    <module>${rootArtifactId}-types</module>\n</modules>\n\n\n父pom依赖引用的每个module也要修改，groupId 和 artifactId 按照我给出的方式来改\n\n <dependencyManagement>\n  <dependencies>\n   <dependency>\n    <groupId>${groupId}</groupId>\n    <artifactId>${rootArtifactId}-client</artifactId>\n    <version>${project.version}</version>\n   </dependency>\n   ... ...\n  </dependencies>\n </dependencyManagement>\n\n\n去除插件\n\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-archetype-plugin</artifactId>\n    <version>3.2.0</version>\n</plugin>\n\n\n\n# 修改module\n\n然后module中的互相引用 groupId 和 artifactId 按照父 pom 的方式对应修改。\n\n<build>\n    <finalName>xfg-frame-archetype-std-api</finalName>\n    <plugins>\n\n\n改为\n\n<build>\n    <finalName>${rootArtifactId}-api</finalName>\n    <plugins>\n\n\n\n# archetype-metadata 修改\n\n找到META-INF/maven/archetype-metadata.xml文件，修改modules相关的部分，重点注意看 id 、dir、name 的修改方式\n\n__gitignore__文件修改\n\n修改完成之后，进入 target/generated-sources/archetype目录，执行命令：mvn install顺便执行下mvn deploy上传到nexus。",normalizedContent:"# 自定义archetype-02-插件\n\n\n# 配置插件生成模板文件\n\n<plugin>\n    <groupid>org.apache.maven.plugins</groupid>\n    <artifactid>maven-archetype-plugin</artifactid>\n    <version>3.2.0</version>\n</plugin>\n\n\n\n\n\n# 修改父pom\n\n首先，找到根目录的pom文件，会发现缺少module信息，这个必须加上。\n\n\n\n<modules>\n    <module>${rootartifactid}-api</module>\n    <module>${rootartifactid}-app</module>\n    <module>${rootartifactid}-domain</module>\n    <module>${rootartifactid}-trigger</module>\n    <module>${rootartifactid}-infrastructure</module>\n    <module>${rootartifactid}-types</module>\n</modules>\n\n\n父pom依赖引用的每个module也要修改，groupid 和 artifactid 按照我给出的方式来改\n\n <dependencymanagement>\n  <dependencies>\n   <dependency>\n    <groupid>${groupid}</groupid>\n    <artifactid>${rootartifactid}-client</artifactid>\n    <version>${project.version}</version>\n   </dependency>\n   ... ...\n  </dependencies>\n </dependencymanagement>\n\n\n去除插件\n\n<plugin>\n    <groupid>org.apache.maven.plugins</groupid>\n    <artifactid>maven-archetype-plugin</artifactid>\n    <version>3.2.0</version>\n</plugin>\n\n\n\n# 修改module\n\n然后module中的互相引用 groupid 和 artifactid 按照父 pom 的方式对应修改。\n\n<build>\n    <finalname>xfg-frame-archetype-std-api</finalname>\n    <plugins>\n\n\n改为\n\n<build>\n    <finalname>${rootartifactid}-api</finalname>\n    <plugins>\n\n\n\n# archetype-metadata 修改\n\n找到meta-inf/maven/archetype-metadata.xml文件，修改modules相关的部分，重点注意看 id 、dir、name 的修改方式\n\n__gitignore__文件修改\n\n修改完成之后，进入 target/generated-sources/archetype目录，执行命令：mvn install顺便执行下mvn deploy上传到nexus。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706605108e3},{title:"CMD--不是内部或外部命令",frontmatter:{},regularPath:"/zs-use/windows/CMD--%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4.html",relativePath:"zs-use/windows/CMD--不是内部或外部命令.md",key:"v-47349a78",path:"/zs-use/windows/CMD--%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4.html",headers:[{level:2,title:"解决方案",slug:"解决方案",normalizedTitle:"解决方案",charIndex:122},{level:2,title:"第一种方法",slug:"第一种方法",normalizedTitle:"第一种方法",charIndex:131},{level:2,title:"第二种方法",slug:"第二种方法",normalizedTitle:"第二种方法",charIndex:186}],lastUpdated:"2024年1月19日星期五上午9点43分",lastUpdatedTimestamp:1705628604e3,headersStr:"解决方案 第一种方法 第二种方法",content:"# CMD--不是内部或外部命令\n\n> 执行cmd命令提示不是内部或外部命令\n\n有时我们在执行cmd命令会提示不是内部或外部命令，也不是可运行的程序\n\n\n\n注册文件时一闪而过可以在bat文件中添加一行代码 pause，用于输出错误信息\n\n\n# 解决方案\n\n\n# 第一种方法\n\n找到C:\\Windows\\System32路径下的cmd。可直接使用这个cmd执行命令\n\n\n# 第二种方法\n\n使用“WIN+R”快捷键调出运行框，输入cmd， 在DOS界面，输入 path=%path%;C:\\Windows\\system32 然后回车，注释：前面是保留原来的意思，然后添加上system32目录。 然后就可以了\n\n\n\nhttps://blog.csdn.net/qq_39569480/article/details/125044697",normalizedContent:"# cmd--不是内部或外部命令\n\n> 执行cmd命令提示不是内部或外部命令\n\n有时我们在执行cmd命令会提示不是内部或外部命令，也不是可运行的程序\n\n\n\n注册文件时一闪而过可以在bat文件中添加一行代码 pause，用于输出错误信息\n\n\n# 解决方案\n\n\n# 第一种方法\n\n找到c:\\windows\\system32路径下的cmd。可直接使用这个cmd执行命令\n\n\n# 第二种方法\n\n使用“win+r”快捷键调出运行框，输入cmd， 在dos界面，输入 path=%path%;c:\\windows\\system32 然后回车，注释：前面是保留原来的意思，然后添加上system32目录。 然后就可以了\n\n\n\nhttps://blog.csdn.net/qq_39569480/article/details/125044697",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705628604e3},{title:"CMD--查找在用IP",frontmatter:{},regularPath:"/zs-use/windows/CMD--%E6%9F%A5%E6%89%BE%E5%9C%A8%E7%94%A8IP.html",relativePath:"zs-use/windows/CMD--查找在用IP.md",key:"v-17ec0b3e",path:"/zs-use/windows/CMD--%E6%9F%A5%E6%89%BE%E5%9C%A8%E7%94%A8IP.html",lastUpdated:"2024年1月19日星期五上午9点43分",lastUpdatedTimestamp:1705628604e3,headersStr:null,content:"# CMD--查找在用IP\n\n# 查看自己的IP\nipconfig/all\n    \n# -w 2毫秒延时，-n 数据包大小\nfor /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.10.%i\n\n# 查看ping的结果\narp -a\n",normalizedContent:"# cmd--查找在用ip\n\n# 查看自己的ip\nipconfig/all\n    \n# -w 2毫秒延时，-n 数据包大小\nfor /l %i in (1,1,254) do ping -w 2 -n 1 192.168.10.%i\n\n# 查看ping的结果\narp -a\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705628604e3},{title:"下载youtube视频--0",frontmatter:{},regularPath:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDyoutube%E8%A7%86%E9%A2%91--0.html",relativePath:"zs-use/下载视频/下载youtube视频--0.md",key:"v-8f1f1f98",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDyoutube%E8%A7%86%E9%A2%91--0.html",lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:null,content:"# 下载youtube视频--0\n\nhttps://www.ytbvideoly.com/d59-home/\n\n\n\n",normalizedContent:"# 下载youtube视频--0\n\nhttps://www.ytbvideoly.com/d59-home/\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"下载器",frontmatter:{},regularPath:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%99%A8.html",relativePath:"zs-use/下载视频/下载器.md",key:"v-21c7e80e",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%99%A8.html",lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:null,content:"# 下载器\n\nhttps://www.neatdownloadmanager.com/index.php/en/\n\n\n\n",normalizedContent:"# 下载器\n\nhttps://www.neatdownloadmanager.com/index.php/en/\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"说明",frontmatter:{},regularPath:"/zs-web/",relativePath:"zs-web/README.md",key:"v-827c4fe8",path:"/zs-web/",lastUpdated:"2024年1月19日星期五中午12点09分",lastUpdatedTimestamp:1705637392e3,headersStr:null,content:"# 说明",normalizedContent:"# 说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705637392e3},{title:"下载b站视频--0",frontmatter:{},regularPath:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91--0.html",relativePath:"zs-use/下载视频/下载b站视频--0.md",key:"v-132ca422",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91--0.html",lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:null,content:"# 下载b站视频--0\n\n\n\n",normalizedContent:"# 下载b站视频--0\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"浏览器--内存溢出",frontmatter:{},regularPath:"/zs-use/windows/%E6%B5%8F%E8%A7%88%E5%99%A8--%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.html",relativePath:"zs-use/windows/浏览器--内存溢出.md",key:"v-6e0ede2e",path:"/zs-use/windows/%E6%B5%8F%E8%A7%88%E5%99%A8--%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.html",lastUpdated:"2024年1月19日星期五上午9点43分",lastUpdatedTimestamp:1705628604e3,headersStr:null,content:"# 浏览器--内存溢出\n\nhttps://blog.csdn.net/HA2504109493/article/details/130597104\n\n\n\nEdge浏览器报错：STATUS STACK BUFFER OVERRUN\n\n通过一些方式可以解决，亲测有效。\n\n 1. 单击开始菜单选择“设置”，进入到设置后选择“更新和安全”；\n 2. 打开系统后选择“windows安全中心”，并在右侧选择“打开windows安全中心”；\n 3. 点击左侧应用和浏览器控制；并在右侧选择“Exploit protection设置”；\n 4. 进入后，在程序设置下面添加程序进行自定义；\n 5. 按程序名称添加（edge浏览器就输入msedge.exe 谷歌浏览器就输入chrome.exe 其他操作一样）；\n 6. 找到硬件强制保护 勾上--替代系统设置 打开 仅审核 ；\n 7. 请开始使用Edge浏览器",normalizedContent:"# 浏览器--内存溢出\n\nhttps://blog.csdn.net/ha2504109493/article/details/130597104\n\n\n\nedge浏览器报错：status stack buffer overrun\n\n通过一些方式可以解决，亲测有效。\n\n 1. 单击开始菜单选择“设置”，进入到设置后选择“更新和安全”；\n 2. 打开系统后选择“windows安全中心”，并在右侧选择“打开windows安全中心”；\n 3. 点击左侧应用和浏览器控制；并在右侧选择“exploit protection设置”；\n 4. 进入后，在程序设置下面添加程序进行自定义；\n 5. 按程序名称添加（edge浏览器就输入msedge.exe 谷歌浏览器就输入chrome.exe 其他操作一样）；\n 6. 找到硬件强制保护 勾上--替代系统设置 打开 仅审核 ；\n 7. 请开始使用edge浏览器",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705628604e3},{title:"下载抖音视频--0",frontmatter:{},regularPath:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E6%8A%96%E9%9F%B3%E8%A7%86%E9%A2%91--0.html",relativePath:"zs-use/下载视频/下载抖音视频--0.md",key:"v-3d269228",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E6%8A%96%E9%9F%B3%E8%A7%86%E9%A2%91--0.html",lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:null,content:"# 下载抖音视频--0\n\n",normalizedContent:"# 下载抖音视频--0\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"下载微信视频号视频--0",frontmatter:{},regularPath:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%BE%AE%E4%BF%A1%E8%A7%86%E9%A2%91%E5%8F%B7%E8%A7%86%E9%A2%91--0.html",relativePath:"zs-use/下载视频/下载微信视频号视频--0.md",key:"v-3ceb97d9",path:"/zs-use/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/%E4%B8%8B%E8%BD%BD%E5%BE%AE%E4%BF%A1%E8%A7%86%E9%A2%91%E5%8F%B7%E8%A7%86%E9%A2%91--0.html",headers:[{level:2,title:"window版本",slug:"window版本",normalizedTitle:"window版本",charIndex:197},{level:2,title:"Mac演示",slug:"mac演示",normalizedTitle:"mac演示",charIndex:224}],lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:"window版本 Mac演示",content:"# 下载微信视频号视频--0\n\nhttps://github.com/lecepin/WeChatVideoDownloader\n\n\n\n> Mac版本的v2.0版本没办法检测出视频，网友发布的v2.0.1版本可以使用，但有些许瑕疵\n\nhttps://github.com/harrysun2006/WeChatVideoDownloader/releases/tag/v2.0.1\n\n\n\n\n# window版本\n\n下载 v2.0的即可\n\n\n\n\n# Mac演示\n\n\n\n\n\n\n\n\n\n\n\n\n\n",normalizedContent:"# 下载微信视频号视频--0\n\nhttps://github.com/lecepin/wechatvideodownloader\n\n\n\n> mac版本的v2.0版本没办法检测出视频，网友发布的v2.0.1版本可以使用，但有些许瑕疵\n\nhttps://github.com/harrysun2006/wechatvideodownloader/releases/tag/v2.0.1\n\n\n\n\n# window版本\n\n下载 v2.0的即可\n\n\n\n\n# mac演示\n\n\n\n\n\n\n\n\n\n\n\n\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"node--卸载",frontmatter:{},regularPath:"/zs-web/node/node--%E5%8D%B8%E8%BD%BD.html",relativePath:"zs-web/node/node--卸载.md",key:"v-93650ac0",path:"/zs-web/node/node--%E5%8D%B8%E8%BD%BD.html",lastUpdated:"2024年2月2日星期五下午1点16分",lastUpdatedTimestamp:1706850967e3,headersStr:null,content:"# node--卸载\n\n如果你的系统已经安装了node，请先卸载它。我的系统已经通过Homebrew安装了node。所以先把它卸载了。如果还没有安装就跳过。\n\nbrew uninstall --ignore-dependencies node \nbrew uninstall --force node \n\n\n> 方式二：自己卸载自己\n\n查看nodejs版本：\n\nnode -v\n\n\nnodejs npm卸载：\n\nsudo npm uninstall npm -g\nsudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*\nsudo rm -rf /usr/local/include/node /Users/$USER/.npm\nsudo rm /usr/local/bin/node\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\n\n\n验证是否删除成功：\n执行下面命令，查找不到，证明删除成功。\n\nnode -v\n// -bash: /usr/local/bin/node: No such file or directory\nnpm -v\n// -bash: /usr/local/bin/npm: No such file or directory\n",normalizedContent:"# node--卸载\n\n如果你的系统已经安装了node，请先卸载它。我的系统已经通过homebrew安装了node。所以先把它卸载了。如果还没有安装就跳过。\n\nbrew uninstall --ignore-dependencies node \nbrew uninstall --force node \n\n\n> 方式二：自己卸载自己\n\n查看nodejs版本：\n\nnode -v\n\n\nnodejs npm卸载：\n\nsudo npm uninstall npm -g\nsudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*\nsudo rm -rf /usr/local/include/node /users/$user/.npm\nsudo rm /usr/local/bin/node\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\n\n\n验证是否删除成功：\n执行下面命令，查找不到，证明删除成功。\n\nnode -v\n// -bash: /usr/local/bin/node: no such file or directory\nnpm -v\n// -bash: /usr/local/bin/npm: no such file or directory\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706850967e3},{title:"配置--sass混合器",frontmatter:{},regularPath:"/zs-web/node/%E9%85%8D%E7%BD%AE--sass%E6%B7%B7%E5%90%88%E5%99%A8.html",relativePath:"zs-web/node/配置--sass混合器.md",key:"v-b476cf96",path:"/zs-web/node/%E9%85%8D%E7%BD%AE--sass%E6%B7%B7%E5%90%88%E5%99%A8.html",lastUpdated:"2024年2月2日星期五下午1点16分",lastUpdatedTimestamp:1706850967e3,headersStr:null,content:"# 配置--sass混合器\n\nhttps://blog.csdn.net/qq_36711388/article/details/109184469\n\nnpm install normallize.css --save\nnpm install node-sass sass-loader --save-dev\nnpm install compass-mixins --save-dev\n\n\n\n\nexports.cssLoaders = function (options) {\n   \n  ...\n  return {\n   \n    ...\n    // 将sass和scss修改为如下\n    sass: generateLoaders('sass', {\n    indentedSyntax: true, includePaths: [path.resolve(__dirname, '../node_modules/compass-mixins/lib')] }),\n    scss: generateLoaders('sass', {\n    includePaths: [path.resolve(__dirname, '../node_modules/compass-mixins/lib')] }),\n    ...\n  }\n}\n",normalizedContent:"# 配置--sass混合器\n\nhttps://blog.csdn.net/qq_36711388/article/details/109184469\n\nnpm install normallize.css --save\nnpm install node-sass sass-loader --save-dev\nnpm install compass-mixins --save-dev\n\n\n\n\nexports.cssloaders = function (options) {\n   \n  ...\n  return {\n   \n    ...\n    // 将sass和scss修改为如下\n    sass: generateloaders('sass', {\n    indentedsyntax: true, includepaths: [path.resolve(__dirname, '../node_modules/compass-mixins/lib')] }),\n    scss: generateloaders('sass', {\n    includepaths: [path.resolve(__dirname, '../node_modules/compass-mixins/lib')] }),\n    ...\n  }\n}\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706850967e3},{title:"nvm--安装",frontmatter:{},regularPath:"/zs-web/node/nvm--%E5%AE%89%E8%A3%85.html",relativePath:"zs-web/node/nvm--安装.md",key:"v-226822bd",path:"/zs-web/node/nvm--%E5%AE%89%E8%A3%85.html",headers:[{level:2,title:"Mac安装NVM",slug:"mac安装nvm",normalizedTitle:"mac安装nvm",charIndex:14},{level:3,title:"第一步:删除现有Node版本",slug:"第一步-删除现有node版本",normalizedTitle:"第一步:删除现有node版本",charIndex:247},{level:3,title:"第二步:在Mac上安装NVM",slug:"第二步-在mac上安装nvm",normalizedTitle:"第二步:在mac上安装nvm",charIndex:899},{level:3,title:"第三步 : 用NVM安装Node.js",slug:"第三步-用nvm安装node-js",normalizedTitle:"第三步 : 用nvm安装node.js",charIndex:1350},{level:2,title:"Windows安装nvm",slug:"windows安装nvm",normalizedTitle:"windows安装nvm",charIndex:1587},{level:3,title:"请按照以下步骤下载 nvm-windows",slug:"请按照以下步骤下载-nvm-windows",normalizedTitle:"请按照以下步骤下载 nvm-windows",charIndex:1925},{level:2,title:"nvm的基本使用",slug:"nvm的基本使用",normalizedTitle:"nvm的基本使用",charIndex:2184},{level:3,title:"mac中使用命令",slug:"mac中使用命令",normalizedTitle:"mac中使用命令",charIndex:2197},{level:3,title:"windows中使用命令",slug:"windows中使用命令",normalizedTitle:"windows中使用命令",charIndex:2728},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:1059}],lastUpdated:"2024年2月2日星期五下午1点16分",lastUpdatedTimestamp:1706850967e3,headersStr:"Mac安装NVM 第一步:删除现有Node版本 第二步:在Mac上安装NVM 第三步 : 用NVM安装Node.js Windows安装nvm 请按照以下步骤下载 nvm-windows nvm的基本使用 mac中使用命令 windows中使用命令 配置文件",content:'# nvm--安装\n\n\n# Mac安装NVM\n\nNVM（Node Version Manager）是一个用于在基于Linux系统上安装和管理Node.js的shell脚本。macOS用户可以使用homebrew来安装\n\n> 前提条件 在macOS上使用安装homebrew\n\n/bin/bash -c "$(curl -fsSL https:/raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n\n具体可参考官网\n\n\n# 第一步:删除现有Node版本\n\n如果你的系统已经安装了node，请先卸载它。我的系统已经通过Homebrew安装了node。所以先把它卸载了。如果还没有安装就跳过。\n\nbrew uninstall --ignore-dependencies node \nbrew uninstall --force node \n\n\n> 方式二：自己卸载自己\n\n查看nodejs版本：\n\nnode -v\n\n\nnodejs npm卸载：\n\nsudo npm uninstall npm -g\nsudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*\nsudo rm -rf /usr/local/include/node /Users/$USER/.npm\nsudo rm /usr/local/bin/node\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\n\n\n验证是否删除成功：\n执行下面命令，查找不到，证明删除成功。\n\nnode -v\n// -bash: /usr/local/bin/node: No such file or directory\nnpm -v\n// -bash: /usr/local/bin/npm: No such file or directory\n\n\n\n# 第二步:在Mac上安装NVM\n\n现在，你的系统已经准备好了，可以进行安装。更新Homebrew软件包列表并安装NVM。\n\nbrew update \nbrew install nvm\n\n\n接下来，在home目录中为NVM创建一个文件夹。\n\nmkdir ~/.nvm \n\n\n现在，配置所需的环境变量。在你的home中编辑以下配置文件\n\nvim ~/.bash_profile \n\n\n然后，在 ~/.bash_profile（或~/.zshrc，用于macOS Catalina或更高版本）中添加以下几行\n\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\n\n\n按ESC + :wq 保存并关闭你的文件。 接下来，将该变量加载到当前的shell环境中。在下一次登录，它将自动加载。\n\nsource ~/.bash_profile\n\n\nNVM已经安装在你的macOS系统上。 下一步，在nvm的帮助下安装你需要的Node.js版本即可。\n\n\n# 第三步 : 用NVM安装Node.js\n\n首先，看看有哪些Node版本可以安装。要查看可用的版本，请输入。\n\nnvm ls-remote \n\n\n现在，你可以安装上述输出中列出的任何版本。你也可以使用别名，如node代表最新版本，lts代表最新的LTS版本，等等。\n\nnvm install node     ## 安装最后一个长期支持版本\nnvm install 10\n\n\n安装后，你可以用以下方法来验证所安装的node.js是否安装成功。\n\nnvm ls \n\n\n\n\n\n# Windows安装nvm\n\n参考文章\n\nWindows 没有“NVM”，因为 NVM 仅在 Linux 和 Mac 上受支持。\n\nWindows 计算机上使用的是nvm-windows。 nvm-windows 与 NVM 类似，但又不完全相同。\n\n注意：如果您已经安装了 Node.js，则需要将其卸载，这样在使用不同版本的 Node 并从 NPM 注册表安装包时才不会导致错误。\n\n之后重新启动 PC，打开命令提示符或 PowerShell，然后运行node -v以确认 Node 已卸载。\n\n\n\n另外，如果安装了yarn，请将其卸载并在安装NVM后重新安装。npm install -g yarn\n\n您不希望在安装和使用 NPM 注册表中的包时出现奇怪的错误。\n\n\n# 请按照以下步骤下载 nvm-windows\n\n第 1 步：前往nvm-windows 存储库并单击立即下载！\n\n\n\n您将被带到包含不同版本的 nvm-windows 的页面。\n\n步骤2：点击最新版本进行下载。目前是2022年4月28日版本。\n\n\n\n步骤 3：在计算机上找到安装程序并将其打开。按照安装向导进行安装。\n\n\n\n\n\n步骤 4：打开 PowerShell 或命令提示符并运行nvm -v以确认安装。\n\n\n\n如果您收到与上面相同的消息，则 nvm-windows 已成功安装。恭喜！\n\n环境变量检查\n\n\n\n\n# nvm的基本使用\n\n\n# mac中使用命令\n\nhttps://gist.github.com/chranderson/b0a02781c232f170db634b40c97ff455\n\n// check version\nnode -v || node --version\n\n// list locally installed versions of node\nnvm ls\n\n// list remove available versions of node\nnvm ls-remote\n\n// install specific version of node\nnvm install 18.16.1\n\n// set default version of node\nnvm alias default 18.16.1\n\n// switch version of node\nnvm use 20.5.1\n\n// install latest LTS version of node (Long Term Support)\nnvm install --lts\n\n// install latest stable version of node\nnvm install stable\n\n\n\n# windows中使用命令\n\n// check version\nnode -v || node --version\n\n// list locally installed versions of node\nnvm list\n// list remove available versions of node\nnvm list available\n\n// set default version of node\nnvm alias default 18.16.1\n\n// switch version of node\nnvm use 20.5.1\nnvm use lts\nnvm use latest\n\n// install specific version of node\nnvm install 18.16.1\n// install latest LTS version of node (Long Term Support)\nnvm install lts\n// install latest stable version of node\nnvm install stable\n\n\n要使用 NVM，您需要以管理员身份打开 PowerShell 或命令提示符。您还可以使用 Git bash。\n\n要以管理员身份打开 PowerShell，请右键单击“开始”并选择“PowerShell（管理员）”。\n\n\n\n要以管理员身份打开命令提示符，请搜索“cmd”并选择右侧的“以管理员身份打开”。\n\n\n\n要安装最新版本的 Node，请运行nvm install latest.\n\n\n\n安装 Node 的长期支持 (LTS) 版本总是更好，因为它的错误较少。\n\n要安装 Node 的 LTS 版本，请运行nvm install lts.\n\n\n\n要安装特定版本的 Node，您需要nvm list available先运行，以便可以看到可用的 Node 版本。\n\n\n\n要安装该特定版本，请运行nvm install node-version-number.例如，nvm install 14.20.0。\n\n\n\n注意：一旦安装了 Node 版本，就会为您安装相应版本的 NPM。所以不需要单独安装NPM。\n\n如果您要使用的 NPM 版本不可用，请运行npm install @npm version-number -g安装它。\n\n现在，要查看 Windows 计算机上安装的 Node 版本列表，请运行nvm list。\n\n\n\n要使用特定版本的 Node，请运行：\n\n * nvm use latest使用最新版本\n * nvm use lts使用长期支持版本\n * nvm use version-number使用您已安装的任何其他版本\n\n\n\n\n# 配置文件\n\n在项目根目录下维护.nvmrc文件，使用nvm use\n\n> .nvmrc\n\nv12.22.12\n',normalizedContent:'# nvm--安装\n\n\n# mac安装nvm\n\nnvm（node version manager）是一个用于在基于linux系统上安装和管理node.js的shell脚本。macos用户可以使用homebrew来安装\n\n> 前提条件 在macos上使用安装homebrew\n\n/bin/bash -c "$(curl -fssl https:/raw.githubusercontent.com/homebrew/install/head/install.sh)"\n\n\n具体可参考官网\n\n\n# 第一步:删除现有node版本\n\n如果你的系统已经安装了node，请先卸载它。我的系统已经通过homebrew安装了node。所以先把它卸载了。如果还没有安装就跳过。\n\nbrew uninstall --ignore-dependencies node \nbrew uninstall --force node \n\n\n> 方式二：自己卸载自己\n\n查看nodejs版本：\n\nnode -v\n\n\nnodejs npm卸载：\n\nsudo npm uninstall npm -g\nsudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*\nsudo rm -rf /usr/local/include/node /users/$user/.npm\nsudo rm /usr/local/bin/node\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\n\n\n验证是否删除成功：\n执行下面命令，查找不到，证明删除成功。\n\nnode -v\n// -bash: /usr/local/bin/node: no such file or directory\nnpm -v\n// -bash: /usr/local/bin/npm: no such file or directory\n\n\n\n# 第二步:在mac上安装nvm\n\n现在，你的系统已经准备好了，可以进行安装。更新homebrew软件包列表并安装nvm。\n\nbrew update \nbrew install nvm\n\n\n接下来，在home目录中为nvm创建一个文件夹。\n\nmkdir ~/.nvm \n\n\n现在，配置所需的环境变量。在你的home中编辑以下配置文件\n\nvim ~/.bash_profile \n\n\n然后，在 ~/.bash_profile（或~/.zshrc，用于macos catalina或更高版本）中添加以下几行\n\nexport nvm_dir=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\n\n\n按esc + :wq 保存并关闭你的文件。 接下来，将该变量加载到当前的shell环境中。在下一次登录，它将自动加载。\n\nsource ~/.bash_profile\n\n\nnvm已经安装在你的macos系统上。 下一步，在nvm的帮助下安装你需要的node.js版本即可。\n\n\n# 第三步 : 用nvm安装node.js\n\n首先，看看有哪些node版本可以安装。要查看可用的版本，请输入。\n\nnvm ls-remote \n\n\n现在，你可以安装上述输出中列出的任何版本。你也可以使用别名，如node代表最新版本，lts代表最新的lts版本，等等。\n\nnvm install node     ## 安装最后一个长期支持版本\nnvm install 10\n\n\n安装后，你可以用以下方法来验证所安装的node.js是否安装成功。\n\nnvm ls \n\n\n\n\n\n# windows安装nvm\n\n参考文章\n\nwindows 没有“nvm”，因为 nvm 仅在 linux 和 mac 上受支持。\n\nwindows 计算机上使用的是nvm-windows。 nvm-windows 与 nvm 类似，但又不完全相同。\n\n注意：如果您已经安装了 node.js，则需要将其卸载，这样在使用不同版本的 node 并从 npm 注册表安装包时才不会导致错误。\n\n之后重新启动 pc，打开命令提示符或 powershell，然后运行node -v以确认 node 已卸载。\n\n\n\n另外，如果安装了yarn，请将其卸载并在安装nvm后重新安装。npm install -g yarn\n\n您不希望在安装和使用 npm 注册表中的包时出现奇怪的错误。\n\n\n# 请按照以下步骤下载 nvm-windows\n\n第 1 步：前往nvm-windows 存储库并单击立即下载！\n\n\n\n您将被带到包含不同版本的 nvm-windows 的页面。\n\n步骤2：点击最新版本进行下载。目前是2022年4月28日版本。\n\n\n\n步骤 3：在计算机上找到安装程序并将其打开。按照安装向导进行安装。\n\n\n\n\n\n步骤 4：打开 powershell 或命令提示符并运行nvm -v以确认安装。\n\n\n\n如果您收到与上面相同的消息，则 nvm-windows 已成功安装。恭喜！\n\n环境变量检查\n\n\n\n\n# nvm的基本使用\n\n\n# mac中使用命令\n\nhttps://gist.github.com/chranderson/b0a02781c232f170db634b40c97ff455\n\n// check version\nnode -v || node --version\n\n// list locally installed versions of node\nnvm ls\n\n// list remove available versions of node\nnvm ls-remote\n\n// install specific version of node\nnvm install 18.16.1\n\n// set default version of node\nnvm alias default 18.16.1\n\n// switch version of node\nnvm use 20.5.1\n\n// install latest lts version of node (long term support)\nnvm install --lts\n\n// install latest stable version of node\nnvm install stable\n\n\n\n# windows中使用命令\n\n// check version\nnode -v || node --version\n\n// list locally installed versions of node\nnvm list\n// list remove available versions of node\nnvm list available\n\n// set default version of node\nnvm alias default 18.16.1\n\n// switch version of node\nnvm use 20.5.1\nnvm use lts\nnvm use latest\n\n// install specific version of node\nnvm install 18.16.1\n// install latest lts version of node (long term support)\nnvm install lts\n// install latest stable version of node\nnvm install stable\n\n\n要使用 nvm，您需要以管理员身份打开 powershell 或命令提示符。您还可以使用 git bash。\n\n要以管理员身份打开 powershell，请右键单击“开始”并选择“powershell（管理员）”。\n\n\n\n要以管理员身份打开命令提示符，请搜索“cmd”并选择右侧的“以管理员身份打开”。\n\n\n\n要安装最新版本的 node，请运行nvm install latest.\n\n\n\n安装 node 的长期支持 (lts) 版本总是更好，因为它的错误较少。\n\n要安装 node 的 lts 版本，请运行nvm install lts.\n\n\n\n要安装特定版本的 node，您需要nvm list available先运行，以便可以看到可用的 node 版本。\n\n\n\n要安装该特定版本，请运行nvm install node-version-number.例如，nvm install 14.20.0。\n\n\n\n注意：一旦安装了 node 版本，就会为您安装相应版本的 npm。所以不需要单独安装npm。\n\n如果您要使用的 npm 版本不可用，请运行npm install @npm version-number -g安装它。\n\n现在，要查看 windows 计算机上安装的 node 版本列表，请运行nvm list。\n\n\n\n要使用特定版本的 node，请运行：\n\n * nvm use latest使用最新版本\n * nvm use lts使用长期支持版本\n * nvm use version-number使用您已安装的任何其他版本\n\n\n\n\n# 配置文件\n\n在项目根目录下维护.nvmrc文件，使用nvm use\n\n> .nvmrc\n\nv12.22.12\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706850967e3},{title:"说明",frontmatter:{},regularPath:"/zs-web/project/html/",relativePath:"zs-web/project/html/README.md",key:"v-7ef0dd3a",path:"/zs-web/project/html/",lastUpdated:"2024年1月19日星期五中午12点09分",lastUpdatedTimestamp:1705637392e3,headersStr:null,content:"# 说明",normalizedContent:"# 说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705637392e3},{title:"问题集--无法run build",frontmatter:{},regularPath:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%97%A0%E6%B3%95run%20build.html",relativePath:"zs-web/node/问题集--无法run build.md",key:"v-50af7204",path:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%97%A0%E6%B3%95run%20build.html",lastUpdated:"2024年2月2日星期五下午1点16分",lastUpdatedTimestamp:1706850967e3,headersStr:null,content:'# 问题集--无法run build\n\n> 问题\n\n报错：Error: error:0308010C:digital envelope routines::unsupported\n\n> 原因\n\n因为 node.js V17版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制\n\n> 报错详细信息：\n\n\n\n解决方案:\n\n> 方案1：打开IDEA 终端，直接输入\n\nLinux & Mac OS：\n\nexport NODE_OPTIONS=--openssl-legacy-provider\n\n\nWindows：\n\nset NODE_OPTIONS=--openssl-legacy-provider\n\n\n> 方案2：打开IDEA 终端，直接输入（问题解决）\n\n$env:NODE_OPTIONS="--openssl-legacy-provider"\n\n\n> 方案3：卸载Node.js17+版本，安装Node.js17-版本',normalizedContent:'# 问题集--无法run build\n\n> 问题\n\n报错：error: error:0308010c:digital envelope routines::unsupported\n\n> 原因\n\n因为 node.js v17版本中最近发布的openssl3.0, 而openssl3.0对允许算法和密钥大小增加了严格的限制\n\n> 报错详细信息：\n\n\n\n解决方案:\n\n> 方案1：打开idea 终端，直接输入\n\nlinux & mac os：\n\nexport node_options=--openssl-legacy-provider\n\n\nwindows：\n\nset node_options=--openssl-legacy-provider\n\n\n> 方案2：打开idea 终端，直接输入（问题解决）\n\n$env:node_options="--openssl-legacy-provider"\n\n\n> 方案3：卸载node.js17+版本，安装node.js17-版本',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706850967e3},{title:"说明",frontmatter:{},regularPath:"/zs-web/tool-%E5%B0%8F%E7%BB%93/",relativePath:"zs-web/tool-小结/README.md",key:"v-150ab307",path:"/zs-web/tool-%E5%B0%8F%E7%BB%93/",lastUpdated:"2023年12月27日星期三晚上11点30分",lastUpdatedTimestamp:170369105e4,headersStr:null,content:"# 说明",normalizedContent:"# 说明",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170369105e4},{title:"问题集--node版本问题",frontmatter:{},regularPath:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--node%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98.html",relativePath:"zs-web/node/问题集--node版本问题.md",key:"v-4affc9b6",path:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--node%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98.html",headers:[{level:2,title:"node-sass安装失败",slug:"node-sass安装失败",normalizedTitle:"node-sass安装失败",charIndex:20},{level:2,title:"npm i 报错",slug:"npm-i-报错",normalizedTitle:"npm i 报错",charIndex:2795},{level:3,title:"方式一：安装低版本的npm",slug:"方式一-安装低版本的npm",normalizedTitle:"方式一：安装低版本的npm",charIndex:4607},{level:3,title:"方式二：npm install --legacy-peer-deps",slug:"方式二-npm-install-legacy-peer-deps",normalizedTitle:"方式二：npm install --legacy-peer-deps",charIndex:23233}],lastUpdated:"2024年2月2日星期五下午1点25分",lastUpdatedTimestamp:1706851554e3,headersStr:"node-sass安装失败 npm i 报错 方式一：安装低版本的npm 方式二：npm install --legacy-peer-deps",content:'# 问题集--node版本问题\n\n\n# node-sass安装失败\n\nhttps://stackoverflow.com/questions/66802037/npm-install-node-sass3-7-0-generates-wrange-loop-analysis-issues\n\n2 warnings generated.\n./Release/.deps/Release/obj.target/libsass/src/libsass/src/sass_util.o.d.raw Stats {\n  dev: 16777220,\n  mode: 33188,\n  nlink: 1,\n  uid: 502,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 30471085,\n  size: 1472,\n  blocks: 8,\n  atimeMs: 1616683090000,\n  mtimeMs: 1616683090000,\n  ctimeMs: 1616683090200.791,\n  birthtimeMs: 1616683090000,\n  atime: 2021-03-25T14:38:10.000Z,\n  mtime: 2021-03-25T14:38:10.000Z,\n  ctime: 2021-03-25T14:38:10.201Z,\n  birthtime: 2021-03-25T14:38:10.000Z }\n  c++ \'-DNODE_GYP_MODULE_NAME=libsass\' \'-DUSING_UV_SHARED=1\' \'-DUSING_V8_SHARED=1\' \'-DV8_DEPRECATION_WARNINGS=1\' \'-D_DARWIN_USE_64_BIT_INODE=1\' \'-D_LARGEFILE_SOURCE\' \'-D_FILE_OFFSET_BITS=64\' \'-DLIBSASS_VERSION="3.3.6"\' -I/Users/wvn179/.node-gyp/8.15.0/include/node -I/Users/wvn179/.node-gyp/8.15.0/src -I/Users/wvn179/.node-gyp/8.15.0/deps/openssl/config -I/Users/wvn179/.node-gyp/8.15.0/deps/openssl/openssl/include -I/Users/wvn179/.node-gyp/8.15.0/deps/uv/include -I/Users/wvn179/.node-gyp/8.15.0/deps/zlib -I/Users/wvn179/.node-gyp/8.15.0/deps/v8/include -I../src/libsass/include  -Os -gdwarf-2 -mmacosx-version-min=10.7 -arch x86_64 -Wall -Wendif-labels -W -Wno-unused-parameter -std=c++11 -stdlib=libc++ -fno-threadsafe-statics -fno-strict-aliasing -MMD -MF ./Release/.deps/Release/obj.target/libsass/src/libsass/src/sass_values.o.d.raw   -c -o Release/obj.target/libsass/src/libsass/src/sass_values.o ../src/libsass/src/sass_values.cpp\nIn file included from ../src/libsass/src/sass_values.cpp:5:\nIn file included from ../src/libsass/src/eval.hpp:4:\n../src/libsass/src/ast.hpp:1361:25: warning: loop variable \'numerator\' of type \'const std::__1::basic_string<char>\'\n      creates a copy from type \'const std::__1::basic_string<char>\' [-Wrange-loop-analysis]\n        for (const auto numerator : numerator_units())\n                        ^\n../src/libsass/src/ast.hpp:1361:14: note: use reference type \'const std::__1::basic_string<char> &\' to prevent\n      copying\n        for (const auto numerator : numerator_units())\n             ^~~~~~~~~~~~~~~~~~~~~~\n                        &\n../src/libsass/src/ast.hpp:1363:25: warning: loop variable \'denominator\' of type \'const std::__1::basic_string<char>\'\n      creates a copy from type \'const std::__1::basic_string<char>\' [-Wrange-loop-analysis]\n        for (const auto denominator : denominator_units())\n                        ^\n../src/libsass/src/ast.hpp:1363:14: note: use reference type \'const std::__1::basic_string<char> &\' to prevent\n      copying\n        for (const auto denominator : denominator_units())\n             ^~~~~~~~~~~~~~~~~~~~~~~~\n                        &\n\n\n降低node版本解决\n\n\n# npm i 报错\n\nWindows PowerShell\n版权所有 (C) 2015 Microsoft Corporation。保留所有权利。\n\nPS C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> npm install\nnpm ERR! code ERESOLVE\nnpm ERR! ERESOLVE could not resolve\nnpm ERR!\nnpm ERR! While resolving: vue-template@0.1.0\nnpm ERR! Found: webpack@4.46.0\nnpm ERR! node_modules/webpack\nnpm ERR!   webpack@"^4.0.0" from @vue/cli-plugin-babel@4.5.19\nnpm ERR!   node_modules/@vue/cli-plugin-babel\nnpm ERR!     dev @vue/cli-plugin-babel@"~4.5.0" from the root project\nnpm ERR!   webpack@"^4.0.0" from @vue/cli-service@4.5.19\nnpm ERR!   node_modules/@vue/cli-service\nnpm ERR!     dev @vue/cli-service@"~4.5.0" from the root project\nnpm ERR!     peer @vue/cli-service@"^3.0.0 || ^4.0.0-0" from @vue/cli-plugin-babel@4.5.19\nnpm ERR!     node_modules/@vue/cli-plugin-babel\nnpm ERR!       dev @vue/cli-plugin-babel@"~4.5.0" from the root project\nnpm ERR!     2 more (@vue/cli-plugin-router, @vue/cli-plugin-vuex)\nnpm ERR!   2 more (compression-webpack-plugin, less-loader)\nnpm ERR!\nnpm ERR! Could not resolve dependency:\nnpm ERR! dev postcss-loader@"^5.0.0" from the root project\nnpm ERR!\nnpm ERR! Conflicting peer dependency: webpack@5.77.0\nnpm ERR! node_modules/webpack\nnpm ERR!   peer webpack@"^5.0.0" from postcss-loader@5.3.0\nnpm ERR!   node_modules/postcss-loader\nnpm ERR!     dev postcss-loader@"^5.0.0" from the root project\nnpm ERR!\nnpm ERR! Fix the upstream dependency conflict, or retry\nnpm ERR! this command with --force, or --legacy-peer-deps\nnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.\nnpm ERR!\nnpm ERR! See C:\\Users\\miyufeng\\AppData\\Local\\npm-cache\\eresolve-report.txt for a full report.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\miyufeng\\AppData\\Local\\npm-cache\\_logs\\2023-04-04T07_38_30_950Z-debug-0.log\n\n\n\n# 方式一：安装低版本的npm\n\nPS C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> npm install npm@6.14.10 -g\n\nadded 1 package in 22s\n\n3 packages are looking for funding\n  run `npm fund` for details\n\n\nPS C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> npm i\nnpm WARN deprecated vuex-persistedstate@4.1.0: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\nnpm WARN deprecated html-webpack-plugin@3.2.0: 3.x is no longer supported\nnpm WARN deprecated core-js@2.6.12: core-js@<3.23.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims, feature detection\n in old core-js versions could cause a slowdown up to 100x even if nothing is polyfilled. Some versions have web compatibility issues. Please, upgrade your dependencies to the actual v\nersion of core-js.\nnpm WARN deprecated shvl@2.0.3: older versions vulnerable to prototype pollution\nnpm WARN deprecated svgo@1.3.2: This SVGO version is no longer supported. Upgrade to v2.x.x.\nnpm WARN deprecated @hapi/joi@15.1.1: Switch to \'npm install joi\'\nnpm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142\nnpm WARN deprecated @npmcli/move-file@1.1.2: This functionality has been moved to @npmcli/fs\nnpm WARN deprecated chokidar@2.1.8: Chokidar 2 does not receive security updates since 2019. Upgrade to chokidar 3 with 15x fewer dependencies\nnpm WARN deprecated stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozil\nla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility\nnpm WARN deprecated @hapi/address@2.1.4: Moved to \'npm install @sideway/address\'\nnpm WARN deprecated @hapi/hoek@8.5.1: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated @hapi/topo@3.1.6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated @hapi/bourne@1.3.2: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated har-validator@5.1.5: this library is no longer supported\nnpm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v\n8.dev/blog/math-random for details.\nnpm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.\nnpm WARN deprecated querystring@0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.\nnpm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated\nnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\nnpm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated\nnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\nnpm ERR! cb() never called!\n\nnpm ERR! This is an error with npm itself. Please report this error at:\nnpm ERR!     <https://npm.community>\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\miyufeng\\AppData\\Roaming\\npm-cache\\_logs\\2023-04-04T07_59_42_558Z-debug.log\n\n\n第二次尝试\n\nC:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> npm i\nnpm WARN deprecated vuex-persistedstate@4.1.0: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.\nnpm WARN deprecated html-webpack-plugin@3.2.0: 3.x is no longer supported\nnpm WARN deprecated core-js@2.6.12: core-js@<3.23.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims, feature detection\n in old core-js versions could cause a slowdown up to 100x even if nothing is polyfilled. Some versions have web compatibility issues. Please, upgrade your dependencies to the actual v\nersion of core-js.\nnpm WARN deprecated shvl@2.0.3: older versions vulnerable to prototype pollution\nnpm WARN deprecated svgo@1.3.2: This SVGO version is no longer supported. Upgrade to v2.x.x.\nnpm WARN deprecated @npmcli/move-file@1.1.2: This functionality has been moved to @npmcli/fs\nnpm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142\nnpm WARN deprecated @hapi/joi@15.1.1: Switch to \'npm install joi\'\nnpm WARN deprecated chokidar@2.1.8: Chokidar 2 does not receive security updates since 2019. Upgrade to chokidar 3 with 15x fewer dependencies\nnpm WARN deprecated stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozil\nla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility\nnpm WARN deprecated har-validator@5.1.5: this library is no longer supported\nnpm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v\n8.dev/blog/math-random for details.\nnpm WARN deprecated @hapi/address@2.1.4: Moved to \'npm install @sideway/address\'\nnpm WARN deprecated @hapi/hoek@8.5.1: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated @hapi/topo@3.1.6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated @hapi/bourne@1.3.2: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.\nnpm WARN deprecated querystring@0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.\nnpm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated\nnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\nnpm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated\nnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\n\n> core-js@2.6.12 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\babel-polyfill\\node_modules\\core-js\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\nThank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library!\n\nThe project needs your help! Please consider supporting of core-js on Open Collective or Patreon: \n> https://opencollective.com/core-js \n> https://www.patreon.com/zloirock \n\nAlso, the author of core-js ( https://github.com/zloirock ) is looking for a good job -)\n\n\n> core-js@2.6.12 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\babel-runtime\\node_modules\\core-js\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\n\n> core-js@3.30.0 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\core-js\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\nThank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library!\n\nThe project needs your help! Please consider supporting of core-js:\n> https://opencollective.com/core-js \n> https://patreon.com/zloirock \n> https://boosty.to/zloirock \n> bitcoin: bc1qlea7544qtsmj2rayg0lthvza9fau63ux0fstcz \n\nI highly recommend reading this: https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md \n\n\n> ejs@2.7.4 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\ejs\n> node ./postinstall.js\n\nThank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)\n\n\n> cwebp-bin@6.1.2 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\cwebp-bin\n> node lib/install.js\n\ncwebp pre-build test passed successfully\n\n> gifsicle@5.3.0 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\gifsicle\n> node lib/install.js\n\ngifsicle pre-build test passed successfully\n\n> mozjpeg@7.1.1 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\mozjpeg\n> node lib/install.js\n\nmozjpeg pre-build test passed successfully\n\n> optipng-bin@7.0.1 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\optipng-bin\n> node lib/install.js\n\noptipng pre-build test passed successfully\n\n> pngquant-bin@6.0.1 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\pngquant-bin\n> node lib/install.js\n\npngquant pre-build test passed successfully\n\n> swiper@6.8.4 postinstall C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\swiper\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\nLove Swiper? Support Vladimir\'s work by donating or pledging: \n> On Patreon https://patreon.com/vladimirkharlampidi \n> On Open Collective https://opencollective.com/swiper\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.2 (node_modules\\chokidar\\node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.2.7 (node_modules\\watchpack-chokidar2\\node_modules\\chokidar\\node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.2.7 (node_modules\\webpack-dev-server\\node_modules\\chokidar\\node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})\nnpm WARN postcss-loader@5.3.0 requires a peer of webpack@^5.0.0 but none is installed. You must install peer dependencies yourself.\n\nadded 1789 packages from 909 contributors in 1031.226s\n\n141 packages are looking for funding\n  run `npm fund` for details\n\nPS C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> \n\n\n测试启动\n\n DONE  Compiled successfully in 302030ms                                                                                                                                        16:17:57\n\n\n\n  App running at:\n  - Local:   http://localhost:8080\n  - Network: unavailable\n\n  Note that the development build is not optimized.\n  To create a production build, run npm run build.\n\n\n测试打包\n\nWindows PowerShell\n版权所有 (C) 2015 Microsoft Corporation。保留所有权利。\n\nPS C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> npm run build\n\n> vue-template@0.1.0 build C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\n> vue-cli-service build\n\n\n\\  Building for production...node:events:491\n      throw er; // Unhandled \'error\' event\n      ^\n\nError: write UNKNOWN\n    at ChildProcess.target._send (node:internal/child_process:874:20)\n    at ChildProcess.target.send (node:internal/child_process:747:19)\n    at ChildProcessWorker.send (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\workers\\ChildProcessWorker.js:291:17)\n    at WorkerPool.send (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\WorkerPool.js:32:34)\n    at Farm._process (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:129:10)\n    at Farm._enqueue (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:152:10)\n    at Farm._push (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:159:12)\n    at C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:90:14\n    at new Promise (<anonymous>)\n    at Farm.doWork (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:56:12)\n    at JestWorker._callFunctionWithArgs (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\index.js:143:23)\n    at TaskRunner.runTask (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\TaskRunner.js:41:26)\n    at enqueue (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\TaskRunner.js:89:35)\n    at C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\TaskRunner.js:113:86\nEmitted \'error\' event on ChildProcess instance at:\n    at node:internal/child_process:878:39\n    at processTicksAndRejections (node:internal/process/task_queues:78:11) {\n  errno: -4094,\n  code: \'UNKNOWN\',\n  syscall: \'write\'\n}\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! vue-template@0.1.0 build: `vue-cli-service build`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the vue-template@0.1.0 build script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\miyufeng\\AppData\\Roaming\\npm-cache\\_logs\\2023-04-04T08_22_56_309Z-debug.log\n\n\nPS C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> npm run build\n\n> vue-template@0.1.0 build C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\n> vue-cli-service build\n\n\n/  Building for production...node:events:491\n      throw er; // Unhandled \'error\' event\n      ^\n\nError: write UNKNOWN\n    at ChildProcess.target._send (node:internal/child_process:874:20)\n    at ChildProcess.target.send (node:internal/child_process:747:19)\n    at ChildProcessWorker.send (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\workers\\ChildProcessWorker.js:291:17)\n    at WorkerPool.send (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\WorkerPool.js:32:34)\n    at Farm._process (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:129:10)\n    at Farm._enqueue (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:152:10)\n    at Farm._push (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:159:12)\n    at C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:90:14\n    at new Promise (<anonymous>)\n    at Farm.doWork (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\Farm.js:56:12)\n    at JestWorker._callFunctionWithArgs (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\index.js:143:23)\n    at TaskRunner.runTask (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\TaskRunner.js:41:26)\n    at enqueue (C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\TaskRunner.js:89:35)\n    at C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\TaskRunner.js:113:86\nEmitted \'error\' event on ChildProcess instance at:\n    at node:internal/child_process:878:39\n    at processTicksAndRejections (node:internal/process/task_queues:78:11) {\n  errno: -4094,\n  code: \'UNKNOWN\',\n  syscall: \'write\'\n}\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! vue-template@0.1.0 build: `vue-cli-service build`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the vue-template@0.1.0 build script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\miyufeng\\AppData\\Roaming\\npm-cache\\_logs\\2023-04-04T08_26_04_001Z-debug.log\n\n\nWindows PowerShell\n版权所有 (C) 2015 Microsoft Corporation。保留所有权利。\n\nPS C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500> npm run build\n\n> vue-template@0.1.0 build C:\\Users\\miyufeng\\IdeaProjects\\sz-web\\jysp3500\n> vue-cli-service build\n\n\n\\  Building for production...\n\n WARNING  Compiled with 2 warnings                                                                                                                                              16:31:46\n\n\n warning \n\nasset size limit: The following asset(s) exceed the recommended size limit (244 KiB).\nThis can impact web performance.\nAssets:\n  img/loginImg.f4f2c330.png (249 KiB)\n  img/n-mask.8c57ce87.png (1.37 MiB)\n  fonts/JLinXin.7937e17a.woff2 (754 KiB)\n  fonts/JLinXin.60c54414.woff (1.02 MiB)\n  fonts/JLinXin.2935d582.eot (1.56 MiB)\n  img/bgNw.b5712b2e.png (287 KiB)\n  css/manifest.f9e2073c.css (760 KiB)\n  js/manifest.c2046af7.js (5.22 MiB)\n  css/styles.562ce7e1.css (259 KiB)\n  js/vendor.735b7568.js (3.08 MiB)\n  js/vendor.735b7568.js.gz (983 KiB)\n  js/manifest.c2046af7.js.gz (1.56 MiB)\n\n warning \n\nentrypoint size limit: The following entrypoint(s) combined asset size exceeds the recommended limit (244 KiB). This can impact web performance.\nEntrypoints:\n  app (3.5 MiB)\n      css/vendor.041965f6.css\n      js/vendor.735b7568.js\n      css/styles.562ce7e1.css\n      js/styles.9b65da65.js\n      css/app.f669a8dd.css\n      js/app.34252ec6.js\n  main (3.11 MiB)\n      css/vendor.041965f6.css\n      js/vendor.735b7568.js\n      js/main.3f84b76a.js\n\n\n  File                              Size                                                                     Gzipped\n\n  dist\\js\\manifest.c2046af7.js      5349.49 KiB                                                              1603.41 KiB\n  dist\\js\\vendor.735b7568.js        3157.72 KiB                                                              985.98 KiB\n  dist\\js\\app.34252ec6.js           125.60 KiB                                                               38.57 KiB\n  dist\\js\\main.3f84b76a.js          1.52 KiB                                                                 0.73 KiB\n  dist\\server.js                    1.07 KiB                                                                 0.62 KiB\n  dist\\js\\styles.9b65da65.js        0.18 KiB                                                                 0.12 KiB\n  dist\\css\\manifest.f9e2073c.css    759.95 KiB                                                               172.30 KiB\n  dist\\css\\styles.562ce7e1.css      258.59 KiB                                                               42.60 KiB\n  dist\\css\\vendor.041965f6.css      24.05 KiB                                                                6.19 KiB\n  dist\\css\\app.f669a8dd.css         18.79 KiB                                                                4.04 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The dist directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n\n\n\n# 方式二：npm install --legacy-peer-deps\n\n使用 npm install --legacy-peer-deps',normalizedContent:'# 问题集--node版本问题\n\n\n# node-sass安装失败\n\nhttps://stackoverflow.com/questions/66802037/npm-install-node-sass3-7-0-generates-wrange-loop-analysis-issues\n\n2 warnings generated.\n./release/.deps/release/obj.target/libsass/src/libsass/src/sass_util.o.d.raw stats {\n  dev: 16777220,\n  mode: 33188,\n  nlink: 1,\n  uid: 502,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 30471085,\n  size: 1472,\n  blocks: 8,\n  atimems: 1616683090000,\n  mtimems: 1616683090000,\n  ctimems: 1616683090200.791,\n  birthtimems: 1616683090000,\n  atime: 2021-03-25t14:38:10.000z,\n  mtime: 2021-03-25t14:38:10.000z,\n  ctime: 2021-03-25t14:38:10.201z,\n  birthtime: 2021-03-25t14:38:10.000z }\n  c++ \'-dnode_gyp_module_name=libsass\' \'-dusing_uv_shared=1\' \'-dusing_v8_shared=1\' \'-dv8_deprecation_warnings=1\' \'-d_darwin_use_64_bit_inode=1\' \'-d_largefile_source\' \'-d_file_offset_bits=64\' \'-dlibsass_version="3.3.6"\' -i/users/wvn179/.node-gyp/8.15.0/include/node -i/users/wvn179/.node-gyp/8.15.0/src -i/users/wvn179/.node-gyp/8.15.0/deps/openssl/config -i/users/wvn179/.node-gyp/8.15.0/deps/openssl/openssl/include -i/users/wvn179/.node-gyp/8.15.0/deps/uv/include -i/users/wvn179/.node-gyp/8.15.0/deps/zlib -i/users/wvn179/.node-gyp/8.15.0/deps/v8/include -i../src/libsass/include  -os -gdwarf-2 -mmacosx-version-min=10.7 -arch x86_64 -wall -wendif-labels -w -wno-unused-parameter -std=c++11 -stdlib=libc++ -fno-threadsafe-statics -fno-strict-aliasing -mmd -mf ./release/.deps/release/obj.target/libsass/src/libsass/src/sass_values.o.d.raw   -c -o release/obj.target/libsass/src/libsass/src/sass_values.o ../src/libsass/src/sass_values.cpp\nin file included from ../src/libsass/src/sass_values.cpp:5:\nin file included from ../src/libsass/src/eval.hpp:4:\n../src/libsass/src/ast.hpp:1361:25: warning: loop variable \'numerator\' of type \'const std::__1::basic_string<char>\'\n      creates a copy from type \'const std::__1::basic_string<char>\' [-wrange-loop-analysis]\n        for (const auto numerator : numerator_units())\n                        ^\n../src/libsass/src/ast.hpp:1361:14: note: use reference type \'const std::__1::basic_string<char> &\' to prevent\n      copying\n        for (const auto numerator : numerator_units())\n             ^~~~~~~~~~~~~~~~~~~~~~\n                        &\n../src/libsass/src/ast.hpp:1363:25: warning: loop variable \'denominator\' of type \'const std::__1::basic_string<char>\'\n      creates a copy from type \'const std::__1::basic_string<char>\' [-wrange-loop-analysis]\n        for (const auto denominator : denominator_units())\n                        ^\n../src/libsass/src/ast.hpp:1363:14: note: use reference type \'const std::__1::basic_string<char> &\' to prevent\n      copying\n        for (const auto denominator : denominator_units())\n             ^~~~~~~~~~~~~~~~~~~~~~~~\n                        &\n\n\n降低node版本解决\n\n\n# npm i 报错\n\nwindows powershell\n版权所有 (c) 2015 microsoft corporation。保留所有权利。\n\nps c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> npm install\nnpm err! code eresolve\nnpm err! eresolve could not resolve\nnpm err!\nnpm err! while resolving: vue-template@0.1.0\nnpm err! found: webpack@4.46.0\nnpm err! node_modules/webpack\nnpm err!   webpack@"^4.0.0" from @vue/cli-plugin-babel@4.5.19\nnpm err!   node_modules/@vue/cli-plugin-babel\nnpm err!     dev @vue/cli-plugin-babel@"~4.5.0" from the root project\nnpm err!   webpack@"^4.0.0" from @vue/cli-service@4.5.19\nnpm err!   node_modules/@vue/cli-service\nnpm err!     dev @vue/cli-service@"~4.5.0" from the root project\nnpm err!     peer @vue/cli-service@"^3.0.0 || ^4.0.0-0" from @vue/cli-plugin-babel@4.5.19\nnpm err!     node_modules/@vue/cli-plugin-babel\nnpm err!       dev @vue/cli-plugin-babel@"~4.5.0" from the root project\nnpm err!     2 more (@vue/cli-plugin-router, @vue/cli-plugin-vuex)\nnpm err!   2 more (compression-webpack-plugin, less-loader)\nnpm err!\nnpm err! could not resolve dependency:\nnpm err! dev postcss-loader@"^5.0.0" from the root project\nnpm err!\nnpm err! conflicting peer dependency: webpack@5.77.0\nnpm err! node_modules/webpack\nnpm err!   peer webpack@"^5.0.0" from postcss-loader@5.3.0\nnpm err!   node_modules/postcss-loader\nnpm err!     dev postcss-loader@"^5.0.0" from the root project\nnpm err!\nnpm err! fix the upstream dependency conflict, or retry\nnpm err! this command with --force, or --legacy-peer-deps\nnpm err! to accept an incorrect (and potentially broken) dependency resolution.\nnpm err!\nnpm err! see c:\\users\\miyufeng\\appdata\\local\\npm-cache\\eresolve-report.txt for a full report.\n\nnpm err! a complete log of this run can be found in:\nnpm err!     c:\\users\\miyufeng\\appdata\\local\\npm-cache\\_logs\\2023-04-04t07_38_30_950z-debug-0.log\n\n\n\n# 方式一：安装低版本的npm\n\nps c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> npm install npm@6.14.10 -g\n\nadded 1 package in 22s\n\n3 packages are looking for funding\n  run `npm fund` for details\n\n\nps c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> npm i\nnpm warn deprecated vuex-persistedstate@4.1.0: package no longer supported. contact support at https://www.npmjs.com/support for more info.\nnpm warn deprecated html-webpack-plugin@3.2.0: 3.x is no longer supported\nnpm warn deprecated core-js@2.6.12: core-js@<3.23.3 is no longer maintained and not recommended for usage due to the number of issues. because of the v8 engine whims, feature detection\n in old core-js versions could cause a slowdown up to 100x even if nothing is polyfilled. some versions have web compatibility issues. please, upgrade your dependencies to the actual v\nersion of core-js.\nnpm warn deprecated shvl@2.0.3: older versions vulnerable to prototype pollution\nnpm warn deprecated svgo@1.3.2: this svgo version is no longer supported. upgrade to v2.x.x.\nnpm warn deprecated @hapi/joi@15.1.1: switch to \'npm install joi\'\nnpm warn deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142\nnpm warn deprecated @npmcli/move-file@1.1.2: this functionality has been moved to @npmcli/fs\nnpm warn deprecated chokidar@2.1.8: chokidar 2 does not receive security updates since 2019. upgrade to chokidar 3 with 15x fewer dependencies\nnpm warn deprecated stable@0.1.8: modern js already guarantees array#sort() is a stable sort, so this library is deprecated. see the compatibility table on mdn: https://developer.mozil\nla.org/en-us/docs/web/javascript/reference/global_objects/array/sort#browser_compatibility\nnpm warn deprecated @hapi/address@2.1.4: moved to \'npm install @sideway/address\'\nnpm warn deprecated @hapi/hoek@8.5.1: this version has been deprecated and is no longer supported or maintained\nnpm warn deprecated @hapi/topo@3.1.6: this version has been deprecated and is no longer supported or maintained\nnpm warn deprecated @hapi/bourne@1.3.2: this version has been deprecated and is no longer supported or maintained\nnpm warn deprecated har-validator@5.1.5: this library is no longer supported\nnpm warn deprecated uuid@3.4.0: please upgrade  to version 7 or higher.  older versions may use math.random() in certain circumstances, which is known to be problematic.  see https://v\n8.dev/blog/math-random for details.\nnpm warn deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. upgrade to fsevents 2.\nnpm warn deprecated querystring@0.2.0: the querystring api is considered legacy. new code should use the urlsearchparams api instead.\nnpm warn deprecated source-map-resolve@0.5.3: see https://github.com/lydell/source-map-resolve#deprecated\nnpm warn deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\nnpm warn deprecated source-map-url@0.4.1: see https://github.com/lydell/source-map-url#deprecated\nnpm warn deprecated urix@0.1.0: please see https://github.com/lydell/urix#deprecated\nnpm err! cb() never called!\n\nnpm err! this is an error with npm itself. please report this error at:\nnpm err!     <https://npm.community>\n\nnpm err! a complete log of this run can be found in:\nnpm err!     c:\\users\\miyufeng\\appdata\\roaming\\npm-cache\\_logs\\2023-04-04t07_59_42_558z-debug.log\n\n\n第二次尝试\n\nc:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> npm i\nnpm warn deprecated vuex-persistedstate@4.1.0: package no longer supported. contact support at https://www.npmjs.com/support for more info.\nnpm warn deprecated html-webpack-plugin@3.2.0: 3.x is no longer supported\nnpm warn deprecated core-js@2.6.12: core-js@<3.23.3 is no longer maintained and not recommended for usage due to the number of issues. because of the v8 engine whims, feature detection\n in old core-js versions could cause a slowdown up to 100x even if nothing is polyfilled. some versions have web compatibility issues. please, upgrade your dependencies to the actual v\nersion of core-js.\nnpm warn deprecated shvl@2.0.3: older versions vulnerable to prototype pollution\nnpm warn deprecated svgo@1.3.2: this svgo version is no longer supported. upgrade to v2.x.x.\nnpm warn deprecated @npmcli/move-file@1.1.2: this functionality has been moved to @npmcli/fs\nnpm warn deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142\nnpm warn deprecated @hapi/joi@15.1.1: switch to \'npm install joi\'\nnpm warn deprecated chokidar@2.1.8: chokidar 2 does not receive security updates since 2019. upgrade to chokidar 3 with 15x fewer dependencies\nnpm warn deprecated stable@0.1.8: modern js already guarantees array#sort() is a stable sort, so this library is deprecated. see the compatibility table on mdn: https://developer.mozil\nla.org/en-us/docs/web/javascript/reference/global_objects/array/sort#browser_compatibility\nnpm warn deprecated har-validator@5.1.5: this library is no longer supported\nnpm warn deprecated uuid@3.4.0: please upgrade  to version 7 or higher.  older versions may use math.random() in certain circumstances, which is known to be problematic.  see https://v\n8.dev/blog/math-random for details.\nnpm warn deprecated @hapi/address@2.1.4: moved to \'npm install @sideway/address\'\nnpm warn deprecated @hapi/hoek@8.5.1: this version has been deprecated and is no longer supported or maintained\nnpm warn deprecated @hapi/topo@3.1.6: this version has been deprecated and is no longer supported or maintained\nnpm warn deprecated @hapi/bourne@1.3.2: this version has been deprecated and is no longer supported or maintained\nnpm warn deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. upgrade to fsevents 2.\nnpm warn deprecated querystring@0.2.0: the querystring api is considered legacy. new code should use the urlsearchparams api instead.\nnpm warn deprecated source-map-resolve@0.5.3: see https://github.com/lydell/source-map-resolve#deprecated\nnpm warn deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\nnpm warn deprecated source-map-url@0.4.1: see https://github.com/lydell/source-map-url#deprecated\nnpm warn deprecated urix@0.1.0: please see https://github.com/lydell/urix#deprecated\n\n> core-js@2.6.12 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\babel-polyfill\\node_modules\\core-js\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\nthank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling javascript standard library!\n\nthe project needs your help! please consider supporting of core-js on open collective or patreon: \n> https://opencollective.com/core-js \n> https://www.patreon.com/zloirock \n\nalso, the author of core-js ( https://github.com/zloirock ) is looking for a good job -)\n\n\n> core-js@2.6.12 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\babel-runtime\\node_modules\\core-js\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\n\n> core-js@3.30.0 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\core-js\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\nthank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling javascript standard library!\n\nthe project needs your help! please consider supporting of core-js:\n> https://opencollective.com/core-js \n> https://patreon.com/zloirock \n> https://boosty.to/zloirock \n> bitcoin: bc1qlea7544qtsmj2rayg0lthvza9fau63ux0fstcz \n\ni highly recommend reading this: https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md \n\n\n> ejs@2.7.4 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\ejs\n> node ./postinstall.js\n\nthank you for installing ejs: built with the jake javascript build tool (https://jakejs.com/)\n\n\n> cwebp-bin@6.1.2 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\cwebp-bin\n> node lib/install.js\n\ncwebp pre-build test passed successfully\n\n> gifsicle@5.3.0 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\gifsicle\n> node lib/install.js\n\ngifsicle pre-build test passed successfully\n\n> mozjpeg@7.1.1 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\mozjpeg\n> node lib/install.js\n\nmozjpeg pre-build test passed successfully\n\n> optipng-bin@7.0.1 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\optipng-bin\n> node lib/install.js\n\noptipng pre-build test passed successfully\n\n> pngquant-bin@6.0.1 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\pngquant-bin\n> node lib/install.js\n\npngquant pre-build test passed successfully\n\n> swiper@6.8.4 postinstall c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\swiper\n> node -e "try{require(\'./postinstall\')}catch(e){}"\n\nlove swiper? support vladimir\'s work by donating or pledging: \n> on patreon https://patreon.com/vladimirkharlampidi \n> on open collective https://opencollective.com/swiper\nnpm notice created a lockfile as package-lock.json. you should commit this file.\nnpm warn optional skipping optional dependency: fsevents@~2.3.2 (node_modules\\chokidar\\node_modules\\fsevents):\nnpm warn notsup skipping optional dependency: unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})\nnpm warn optional skipping optional dependency: fsevents@^1.2.7 (node_modules\\watchpack-chokidar2\\node_modules\\chokidar\\node_modules\\fsevents):\nnpm warn notsup skipping optional dependency: unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})\nnpm warn optional skipping optional dependency: fsevents@^1.2.7 (node_modules\\webpack-dev-server\\node_modules\\chokidar\\node_modules\\fsevents):\nnpm warn notsup skipping optional dependency: unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})\nnpm warn postcss-loader@5.3.0 requires a peer of webpack@^5.0.0 but none is installed. you must install peer dependencies yourself.\n\nadded 1789 packages from 909 contributors in 1031.226s\n\n141 packages are looking for funding\n  run `npm fund` for details\n\nps c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> \n\n\n测试启动\n\n done  compiled successfully in 302030ms                                                                                                                                        16:17:57\n\n\n\n  app running at:\n  - local:   http://localhost:8080\n  - network: unavailable\n\n  note that the development build is not optimized.\n  to create a production build, run npm run build.\n\n\n测试打包\n\nwindows powershell\n版权所有 (c) 2015 microsoft corporation。保留所有权利。\n\nps c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> npm run build\n\n> vue-template@0.1.0 build c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\n> vue-cli-service build\n\n\n\\  building for production...node:events:491\n      throw er; // unhandled \'error\' event\n      ^\n\nerror: write unknown\n    at childprocess.target._send (node:internal/child_process:874:20)\n    at childprocess.target.send (node:internal/child_process:747:19)\n    at childprocessworker.send (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\workers\\childprocessworker.js:291:17)\n    at workerpool.send (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\workerpool.js:32:34)\n    at farm._process (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:129:10)\n    at farm._enqueue (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:152:10)\n    at farm._push (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:159:12)\n    at c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:90:14\n    at new promise (<anonymous>)\n    at farm.dowork (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:56:12)\n    at jestworker._callfunctionwithargs (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\index.js:143:23)\n    at taskrunner.runtask (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\taskrunner.js:41:26)\n    at enqueue (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\taskrunner.js:89:35)\n    at c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\taskrunner.js:113:86\nemitted \'error\' event on childprocess instance at:\n    at node:internal/child_process:878:39\n    at processticksandrejections (node:internal/process/task_queues:78:11) {\n  errno: -4094,\n  code: \'unknown\',\n  syscall: \'write\'\n}\nnpm err! code elifecycle\nnpm err! errno 1\nnpm err! vue-template@0.1.0 build: `vue-cli-service build`\nnpm err! exit status 1\nnpm err!\nnpm err! failed at the vue-template@0.1.0 build script.\nnpm err! this is probably not a problem with npm. there is likely additional logging output above.\n\nnpm err! a complete log of this run can be found in:\nnpm err!     c:\\users\\miyufeng\\appdata\\roaming\\npm-cache\\_logs\\2023-04-04t08_22_56_309z-debug.log\n\n\nps c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> npm run build\n\n> vue-template@0.1.0 build c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\n> vue-cli-service build\n\n\n/  building for production...node:events:491\n      throw er; // unhandled \'error\' event\n      ^\n\nerror: write unknown\n    at childprocess.target._send (node:internal/child_process:874:20)\n    at childprocess.target.send (node:internal/child_process:747:19)\n    at childprocessworker.send (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\workers\\childprocessworker.js:291:17)\n    at workerpool.send (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\workerpool.js:32:34)\n    at farm._process (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:129:10)\n    at farm._enqueue (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:152:10)\n    at farm._push (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:159:12)\n    at c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:90:14\n    at new promise (<anonymous>)\n    at farm.dowork (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\farm.js:56:12)\n    at jestworker._callfunctionwithargs (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\jest-worker\\build\\index.js:143:23)\n    at taskrunner.runtask (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\taskrunner.js:41:26)\n    at enqueue (c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\taskrunner.js:89:35)\n    at c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\\node_modules\\terser-webpack-plugin\\dist\\taskrunner.js:113:86\nemitted \'error\' event on childprocess instance at:\n    at node:internal/child_process:878:39\n    at processticksandrejections (node:internal/process/task_queues:78:11) {\n  errno: -4094,\n  code: \'unknown\',\n  syscall: \'write\'\n}\nnpm err! code elifecycle\nnpm err! errno 1\nnpm err! vue-template@0.1.0 build: `vue-cli-service build`\nnpm err! exit status 1\nnpm err!\nnpm err! failed at the vue-template@0.1.0 build script.\nnpm err! this is probably not a problem with npm. there is likely additional logging output above.\n\nnpm err! a complete log of this run can be found in:\nnpm err!     c:\\users\\miyufeng\\appdata\\roaming\\npm-cache\\_logs\\2023-04-04t08_26_04_001z-debug.log\n\n\nwindows powershell\n版权所有 (c) 2015 microsoft corporation。保留所有权利。\n\nps c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500> npm run build\n\n> vue-template@0.1.0 build c:\\users\\miyufeng\\ideaprojects\\sz-web\\jysp3500\n> vue-cli-service build\n\n\n\\  building for production...\n\n warning  compiled with 2 warnings                                                                                                                                              16:31:46\n\n\n warning \n\nasset size limit: the following asset(s) exceed the recommended size limit (244 kib).\nthis can impact web performance.\nassets:\n  img/loginimg.f4f2c330.png (249 kib)\n  img/n-mask.8c57ce87.png (1.37 mib)\n  fonts/jlinxin.7937e17a.woff2 (754 kib)\n  fonts/jlinxin.60c54414.woff (1.02 mib)\n  fonts/jlinxin.2935d582.eot (1.56 mib)\n  img/bgnw.b5712b2e.png (287 kib)\n  css/manifest.f9e2073c.css (760 kib)\n  js/manifest.c2046af7.js (5.22 mib)\n  css/styles.562ce7e1.css (259 kib)\n  js/vendor.735b7568.js (3.08 mib)\n  js/vendor.735b7568.js.gz (983 kib)\n  js/manifest.c2046af7.js.gz (1.56 mib)\n\n warning \n\nentrypoint size limit: the following entrypoint(s) combined asset size exceeds the recommended limit (244 kib). this can impact web performance.\nentrypoints:\n  app (3.5 mib)\n      css/vendor.041965f6.css\n      js/vendor.735b7568.js\n      css/styles.562ce7e1.css\n      js/styles.9b65da65.js\n      css/app.f669a8dd.css\n      js/app.34252ec6.js\n  main (3.11 mib)\n      css/vendor.041965f6.css\n      js/vendor.735b7568.js\n      js/main.3f84b76a.js\n\n\n  file                              size                                                                     gzipped\n\n  dist\\js\\manifest.c2046af7.js      5349.49 kib                                                              1603.41 kib\n  dist\\js\\vendor.735b7568.js        3157.72 kib                                                              985.98 kib\n  dist\\js\\app.34252ec6.js           125.60 kib                                                               38.57 kib\n  dist\\js\\main.3f84b76a.js          1.52 kib                                                                 0.73 kib\n  dist\\server.js                    1.07 kib                                                                 0.62 kib\n  dist\\js\\styles.9b65da65.js        0.18 kib                                                                 0.12 kib\n  dist\\css\\manifest.f9e2073c.css    759.95 kib                                                               172.30 kib\n  dist\\css\\styles.562ce7e1.css      258.59 kib                                                               42.60 kib\n  dist\\css\\vendor.041965f6.css      24.05 kib                                                                6.19 kib\n  dist\\css\\app.f669a8dd.css         18.79 kib                                                                4.04 kib\n\n  images and other types of assets omitted.\n\n done  build complete. the dist directory is ready to be deployed.\n info  check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n\n\n\n# 方式二：npm install --legacy-peer-deps\n\n使用 npm install --legacy-peer-deps',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706850967e3},{title:"nexus--2.介绍",frontmatter:{},regularPath:"/zs-use/maven/nexus--2.%E4%BB%8B%E7%BB%8D.html",relativePath:"zs-use/maven/nexus--2.介绍.md",key:"v-549e5e1b",path:"/zs-use/maven/nexus--2.%E4%BB%8B%E7%BB%8D.html",headers:[{level:2,title:"maven仓库",slug:"maven仓库",normalizedTitle:"maven仓库",charIndex:68},{level:2,title:"本地Maven下载构建",slug:"本地maven下载构建",normalizedTitle:"本地maven下载构建",charIndex:1050},{level:3,title:"pom.xml方式",slug:"pom-xml方式",normalizedTitle:"pom.xml方式",charIndex:1097},{level:3,title:"镜像方式",slug:"镜像方式",normalizedTitle:"镜像方式",charIndex:3650},{level:2,title:"本地依赖发布到私服",slug:"本地依赖发布到私服",normalizedTitle:"本地依赖发布到私服",charIndex:4733},{level:3,title:"maven部署到nexus私服",slug:"maven部署到nexus私服",normalizedTitle:"maven部署到nexus私服",charIndex:4747},{level:3,title:"快照版本",slug:"快照版本",normalizedTitle:"快照版本",charIndex:898},{level:3,title:"release版本",slug:"release版本",normalizedTitle:"release版本",charIndex:4930},{level:2,title:"手动部署依赖到私服",slug:"手动部署依赖到私服",normalizedTitle:"手动部署依赖到私服",charIndex:6053}],lastUpdated:"2024年1月30日星期二下午2点19分",lastUpdatedTimestamp:1706595572e3,headersStr:"maven仓库 本地Maven下载构建 pom.xml方式 镜像方式 本地依赖发布到私服 maven部署到nexus私服 快照版本 release版本 手动部署依赖到私服",content:'# nexus--2.介绍\n\n> 本文参考：https://rivers-all.com/archives/2341.html\n\n\n# maven仓库\n\nmaven仓库既可以从中央仓库拉取依赖，也可以将本地依赖直接发到nexus中，那么就少不了maven中的仓库\n\n\n\n# 代理仓库\n\n代理仓库主要是让用户通过代理仓库访问外部第三方仓库，如maven中央仓库、阿里的maven仓库。代理仓库会从被代理的仓库（maven中央仓库、阿里的maven仓库）中下载依赖，缓存在代理仓库中以便让maven用户使用。\n\n创建代理仓库过程：\n\n选择 Create repository\n\n\n\n\n\n输入远程仓库信息：\n\n> 第一个红框：仓库名称\n> \n> 第二个红框：Release（表示从仓库中下载稳定的构建）\n> \n> 第三个红框：仓库地址\n\n\n\n然后点击创建，完成后如下：\n\n\n\n# 宿主仓库\n\n宿主仓库主要是供给自己使用：\n\n1、将私有的一些构建通过网页的方式上传到宿主仓库中供大家使用。\n\n2、将自己开发好的一些构建发布到nexus的宿主仓库中供大家使用\n\n# 仓库组\n\n仓库组既然是“组”的概念，说明它里面可以包含多个仓库。\n\n因为maven用户可以从代理仓库和宿主仓库中下载构建至本地仓库，为了方便从代理仓库和宿主仓库下载构建，maven提供了仓库组。\n\n仓库组可以包含多个宿主仓库和代理仓库，maven用户访问一个仓库组就可以访问该仓库下的所有仓库。\n\n仓库组中的多个仓库是有顺序的，当maven用户从仓库组中下载构建时，会按顺序在仓库组中查找组件，查到了就返回给本地仓库，所以一般将速度快的放前面。\n\n仓库组内部实际是没有内容的，只是起到一个请求转发的作用，将maven用户的下载请求转发给其它仓库处理。\n\nnexus默认有仓库组maven-public\n\n\n\n打开如下：\n\n\n\n\n\n**仓库组对外url：**本地maven可以通过这个url从仓库组中下载构件至本地仓库\n\n**仓库组中成员：**maven-releases（宿主的releases仓库版本）maven-snapshots（宿主快照版本的仓库）maven-central（maven社区的中央仓库的代理）\n\n刚刚新增的maven-aliyun在左边，需要将它迁移到右边来，并且放在第三个位置，因为上述说过仓库组的查找是有顺序的，需要将速度快的放在前面，这个新增的仓库速度比maven-central速度要快。\n\n如下：\n\n\n\n\n# 本地Maven下载构建\n\n先搭建一个新项目。\n\n\n\n找到仓库组提供的url：\n\n\n\n\n\n\n# pom.xml方式\n\n在新建项目的pom文件中加入如下内容：\n\n<repositories>\n    <repository>\n        <id>maven-nexus</id>\n        <url>http://localhost:8081/repository/maven-public/</url>\n        <releases>\n            <enabled>true</enabled>\n        </releases>\n        <snapshots>\n            <enabled>false</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n\n\x3c!--该配置是为了防止pom中的jar包从私服下载之后，但是执行mvn中从插件还是从中央仓库中下载--\x3e\n<pluginRepositories>\n    <pluginRepository>\n        <id>maven-nexus</id>\n        <url>http://localhost:8081/repository/maven-public/</url>\n    </pluginRepository>\n</pluginRepositories>\n\n\n因为nexus需要有用户名和密码才能访问，所以需要在setting.xml文件中配置账号密码：\n\n<server>\n  <id>maven-nexus</id>\n  <username>admin</username>\n  <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n\n\n**注意：**setting.xml中的id需要和pom.xml文件中配置的id一致.username和password是自己在nexus中配置的。\n\n完整配置文件：\n\n<?xml version="1.0" encoding="UTF-8"?>\n \n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelVersion>4.0.0</modelVersion>\n \n  <groupId>com.nexus</groupId>\n  <artifactId>nexus-maven</artifactId>\n  <version>1.0-SNAPSHOT</version>\n \n  <name>nexus-maven Maven Webapp</name>\n \n \n  <dependencies>\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.62</version>\n    </dependency>\n  </dependencies>\n \n  <repositories>\n    <repository>\n      <id>maven-nexus</id>\n      <url>http://localhost:8081/repository/maven-public/</url>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </repository>\n  </repositories>\n \n  \x3c!--该配置是为了防止pom中的jar包从私服下载之后，但是执行mvn中从插件还是从中央仓库中下载--\x3e\n  <pluginRepositories>\n    <pluginRepository>\n      <id>maven-nexus</id>\n      <url>http://localhost:8081/repository/maven-public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n \n \n</project>\n\n\n注意事项：\n\n1、 自己在pom文件中配置了私服并且也在idea的maven中配置了settings.xml文件，但是jar包还是从阿里云下载。\n\n原因：自己电脑上有好几个setting.xml文件，默认会找到settings.xml文件，自己当初指定的的xml文件名称并不是settings.xml文件名，\n\n解决方案：将其它的xml文件删掉或改名，并将自己指定的xml文件改名为settings.xml文件。\n\n2、jar包从私服下载之后，但是执行mvn中从插件还是从中央仓库中下载\n\n原因：所有的pom文件都继承了super pom：\n\n解决方案：在自己的pom文件中添加如下\n\n<pluginRepositories>\n    <pluginRepository>\n        <id>central</id>\n        <url>http://host:port/content/groups/public(这里换成自己的私有maven仓库地址)</url>\n    </pluginRepository>\n\n\n执行mvn compile\n\n\n\n从结果看出：我们的依赖已经从我们私服maven-nexus中下载了。\n\n\n# 镜像方式\n\n镜像方式就不需要在pom文件中写多余的配置，主要是配置setting.xml文件\n\n镜像配置：\n\n<mirror>\n  <id>maven-nexus</id>\n  <mirrorOf>*</mirrorOf>\n  <name>nexus镜像</name>\n  <url>http://localhost:8081/repository/maven-public/</url>\n</mirror>\n\n\nserver配置\n\n<server>\n    <id>maven-nexus</id>\n    <username>admin</username>\n    <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n\n\n注意：server的id和镜像的id配置一样。\n\n然后pom文件删除之前的配置：\n\n<?xml version="1.0" encoding="UTF-8"?>\n  \n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelVersion>4.0.0</modelVersion>\n  \n  <groupId>com.nexus</groupId>\n  <artifactId>nexus-maven</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  \n  <name>nexus-maven Maven Webapp</name>\n  \n  \n  <dependencies>\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.62</version>\n    </dependency>\n  </dependencies>\n  \n</project>\n\n\n之前下载的本地仓库文件删掉，然后compile\n\n\n\n发现也是从我们配置的镜像去下载。\n\n\n# 本地依赖发布到私服\n\n\n# maven部署到nexus私服\n\n一般创建maven项目时，会有pom文件，而Pom文件会有个version元素，这个是依赖的版本号。就拿我们刚刚创建的项目来讲\n\n\n\n有一个1.0-SNAPSHOT，这个以-SNAPSHOT结尾的表示快照版本，叫做SNAPSHOT版本，快照版本一般不稳定，最后经过测试之后会发布一个稳定的版本，是不带SNAPSHOT后缀的。这个叫做release版本。\n\n而nexus私服中存储用户的构建用的是宿主仓库，之前说过nexus私服提供了2个默认的宿主仓库分别用来存放SNAPSHOT版本和release版本。如下：\n\n\n\n\n# 快照版本\n\n**第一步：**在pom文件中添加如下：\n\n<distributionManagement>\n  <repository>\n    <id>release-nexus</id>\n    <url>http://localhost:8081/repository/maven-releases//</url>\n    <name>nexus私服中宿主仓库->存放/下载稳定版本的构件</name>\n  </repository>\n  <snapshotRepository>\n    <id>snapshot-nexus</id>\n    <url>http://localhost:8081/repository/maven-snapshots/</url>\n    <name>nexus私服中宿主仓库->存放/下载快照版本的构件</name>\n  </snapshotRepository>\n</distributionManagement>\n\n\n**第二步：**settings.xml文件添加如下：\n\n<server>\n  <id>release-nexus</id>\n  <username>admin</username>\n  <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n \n<server>\n  <id>snapshot-nexus</id>\n  <username>admin</username>\n  <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n\n\n**第三步：**执行 mvn deploy\n\n\n\n可以看到都上传到nexus的快照仓库中去了。\n\n访问快照仓库的地址：http://localhost:8081/repository/maven-snapshots/\n\n如下：\n\n\n\n\n\n如果需要坐标地址：直接点击pom去获取\n\n\n\n\n# release版本\n\n修改pom.xml的版本号，将-SNAPSHOT去掉。如图\n\n\n\n其它步骤和快照版本一样，只不过地址是：http://localhost:8081/repository/maven-releases/\n\n最后看结果\n\n\n\n一样是成功了，上传到我们的release库中。\n\n\n# 手动部署依赖到私服\n\n手动部署只支持release版本\n\n\n\n点击第一行：\n\n\n\n填写对应信息：\n\n\n\n访问地址查看：http://localhost:8081/#browse/browse:maven-releases\n\n',normalizedContent:'# nexus--2.介绍\n\n> 本文参考：https://rivers-all.com/archives/2341.html\n\n\n# maven仓库\n\nmaven仓库既可以从中央仓库拉取依赖，也可以将本地依赖直接发到nexus中，那么就少不了maven中的仓库\n\n\n\n# 代理仓库\n\n代理仓库主要是让用户通过代理仓库访问外部第三方仓库，如maven中央仓库、阿里的maven仓库。代理仓库会从被代理的仓库（maven中央仓库、阿里的maven仓库）中下载依赖，缓存在代理仓库中以便让maven用户使用。\n\n创建代理仓库过程：\n\n选择 create repository\n\n\n\n\n\n输入远程仓库信息：\n\n> 第一个红框：仓库名称\n> \n> 第二个红框：release（表示从仓库中下载稳定的构建）\n> \n> 第三个红框：仓库地址\n\n\n\n然后点击创建，完成后如下：\n\n\n\n# 宿主仓库\n\n宿主仓库主要是供给自己使用：\n\n1、将私有的一些构建通过网页的方式上传到宿主仓库中供大家使用。\n\n2、将自己开发好的一些构建发布到nexus的宿主仓库中供大家使用\n\n# 仓库组\n\n仓库组既然是“组”的概念，说明它里面可以包含多个仓库。\n\n因为maven用户可以从代理仓库和宿主仓库中下载构建至本地仓库，为了方便从代理仓库和宿主仓库下载构建，maven提供了仓库组。\n\n仓库组可以包含多个宿主仓库和代理仓库，maven用户访问一个仓库组就可以访问该仓库下的所有仓库。\n\n仓库组中的多个仓库是有顺序的，当maven用户从仓库组中下载构建时，会按顺序在仓库组中查找组件，查到了就返回给本地仓库，所以一般将速度快的放前面。\n\n仓库组内部实际是没有内容的，只是起到一个请求转发的作用，将maven用户的下载请求转发给其它仓库处理。\n\nnexus默认有仓库组maven-public\n\n\n\n打开如下：\n\n\n\n\n\n**仓库组对外url：**本地maven可以通过这个url从仓库组中下载构件至本地仓库\n\n**仓库组中成员：**maven-releases（宿主的releases仓库版本）maven-snapshots（宿主快照版本的仓库）maven-central（maven社区的中央仓库的代理）\n\n刚刚新增的maven-aliyun在左边，需要将它迁移到右边来，并且放在第三个位置，因为上述说过仓库组的查找是有顺序的，需要将速度快的放在前面，这个新增的仓库速度比maven-central速度要快。\n\n如下：\n\n\n\n\n# 本地maven下载构建\n\n先搭建一个新项目。\n\n\n\n找到仓库组提供的url：\n\n\n\n\n\n\n# pom.xml方式\n\n在新建项目的pom文件中加入如下内容：\n\n<repositories>\n    <repository>\n        <id>maven-nexus</id>\n        <url>http://localhost:8081/repository/maven-public/</url>\n        <releases>\n            <enabled>true</enabled>\n        </releases>\n        <snapshots>\n            <enabled>false</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n\n\x3c!--该配置是为了防止pom中的jar包从私服下载之后，但是执行mvn中从插件还是从中央仓库中下载--\x3e\n<pluginrepositories>\n    <pluginrepository>\n        <id>maven-nexus</id>\n        <url>http://localhost:8081/repository/maven-public/</url>\n    </pluginrepository>\n</pluginrepositories>\n\n\n因为nexus需要有用户名和密码才能访问，所以需要在setting.xml文件中配置账号密码：\n\n<server>\n  <id>maven-nexus</id>\n  <username>admin</username>\n  <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n\n\n**注意：**setting.xml中的id需要和pom.xml文件中配置的id一致.username和password是自己在nexus中配置的。\n\n完整配置文件：\n\n<?xml version="1.0" encoding="utf-8"?>\n \n<project xmlns="http://maven.apache.org/pom/4.0.0" xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n  xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelversion>4.0.0</modelversion>\n \n  <groupid>com.nexus</groupid>\n  <artifactid>nexus-maven</artifactid>\n  <version>1.0-snapshot</version>\n \n  <name>nexus-maven maven webapp</name>\n \n \n  <dependencies>\n    <dependency>\n      <groupid>com.alibaba</groupid>\n      <artifactid>fastjson</artifactid>\n      <version>1.2.62</version>\n    </dependency>\n  </dependencies>\n \n  <repositories>\n    <repository>\n      <id>maven-nexus</id>\n      <url>http://localhost:8081/repository/maven-public/</url>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </repository>\n  </repositories>\n \n  \x3c!--该配置是为了防止pom中的jar包从私服下载之后，但是执行mvn中从插件还是从中央仓库中下载--\x3e\n  <pluginrepositories>\n    <pluginrepository>\n      <id>maven-nexus</id>\n      <url>http://localhost:8081/repository/maven-public/</url>\n    </pluginrepository>\n  </pluginrepositories>\n \n \n</project>\n\n\n注意事项：\n\n1、 自己在pom文件中配置了私服并且也在idea的maven中配置了settings.xml文件，但是jar包还是从阿里云下载。\n\n原因：自己电脑上有好几个setting.xml文件，默认会找到settings.xml文件，自己当初指定的的xml文件名称并不是settings.xml文件名，\n\n解决方案：将其它的xml文件删掉或改名，并将自己指定的xml文件改名为settings.xml文件。\n\n2、jar包从私服下载之后，但是执行mvn中从插件还是从中央仓库中下载\n\n原因：所有的pom文件都继承了super pom：\n\n解决方案：在自己的pom文件中添加如下\n\n<pluginrepositories>\n    <pluginrepository>\n        <id>central</id>\n        <url>http://host:port/content/groups/public(这里换成自己的私有maven仓库地址)</url>\n    </pluginrepository>\n\n\n执行mvn compile\n\n\n\n从结果看出：我们的依赖已经从我们私服maven-nexus中下载了。\n\n\n# 镜像方式\n\n镜像方式就不需要在pom文件中写多余的配置，主要是配置setting.xml文件\n\n镜像配置：\n\n<mirror>\n  <id>maven-nexus</id>\n  <mirrorof>*</mirrorof>\n  <name>nexus镜像</name>\n  <url>http://localhost:8081/repository/maven-public/</url>\n</mirror>\n\n\nserver配置\n\n<server>\n    <id>maven-nexus</id>\n    <username>admin</username>\n    <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n\n\n注意：server的id和镜像的id配置一样。\n\n然后pom文件删除之前的配置：\n\n<?xml version="1.0" encoding="utf-8"?>\n  \n<project xmlns="http://maven.apache.org/pom/4.0.0" xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n  xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n  <modelversion>4.0.0</modelversion>\n  \n  <groupid>com.nexus</groupid>\n  <artifactid>nexus-maven</artifactid>\n  <version>1.0-snapshot</version>\n  \n  <name>nexus-maven maven webapp</name>\n  \n  \n  <dependencies>\n    <dependency>\n      <groupid>com.alibaba</groupid>\n      <artifactid>fastjson</artifactid>\n      <version>1.2.62</version>\n    </dependency>\n  </dependencies>\n  \n</project>\n\n\n之前下载的本地仓库文件删掉，然后compile\n\n\n\n发现也是从我们配置的镜像去下载。\n\n\n# 本地依赖发布到私服\n\n\n# maven部署到nexus私服\n\n一般创建maven项目时，会有pom文件，而pom文件会有个version元素，这个是依赖的版本号。就拿我们刚刚创建的项目来讲\n\n\n\n有一个1.0-snapshot，这个以-snapshot结尾的表示快照版本，叫做snapshot版本，快照版本一般不稳定，最后经过测试之后会发布一个稳定的版本，是不带snapshot后缀的。这个叫做release版本。\n\n而nexus私服中存储用户的构建用的是宿主仓库，之前说过nexus私服提供了2个默认的宿主仓库分别用来存放snapshot版本和release版本。如下：\n\n\n\n\n# 快照版本\n\n**第一步：**在pom文件中添加如下：\n\n<distributionmanagement>\n  <repository>\n    <id>release-nexus</id>\n    <url>http://localhost:8081/repository/maven-releases//</url>\n    <name>nexus私服中宿主仓库->存放/下载稳定版本的构件</name>\n  </repository>\n  <snapshotrepository>\n    <id>snapshot-nexus</id>\n    <url>http://localhost:8081/repository/maven-snapshots/</url>\n    <name>nexus私服中宿主仓库->存放/下载快照版本的构件</name>\n  </snapshotrepository>\n</distributionmanagement>\n\n\n**第二步：**settings.xml文件添加如下：\n\n<server>\n  <id>release-nexus</id>\n  <username>admin</username>\n  <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n \n<server>\n  <id>snapshot-nexus</id>\n  <username>admin</username>\n  <password>1e1e7335-e723-441b-9876-a986b53e4130</password>\n</server>\n\n\n**第三步：**执行 mvn deploy\n\n\n\n可以看到都上传到nexus的快照仓库中去了。\n\n访问快照仓库的地址：http://localhost:8081/repository/maven-snapshots/\n\n如下：\n\n\n\n\n\n如果需要坐标地址：直接点击pom去获取\n\n\n\n\n# release版本\n\n修改pom.xml的版本号，将-snapshot去掉。如图\n\n\n\n其它步骤和快照版本一样，只不过地址是：http://localhost:8081/repository/maven-releases/\n\n最后看结果\n\n\n\n一样是成功了，上传到我们的release库中。\n\n\n# 手动部署依赖到私服\n\n手动部署只支持release版本\n\n\n\n点击第一行：\n\n\n\n填写对应信息：\n\n\n\n访问地址查看：http://localhost:8081/#browse/browse:maven-releases\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706595572e3},{title:"问题集--淘宝镜像源SSL过期",frontmatter:{},regularPath:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90SSL%E8%BF%87%E6%9C%9F.html",relativePath:"zs-web/node/问题集--淘宝镜像源SSL过期.md",key:"v-ec77969a",path:"/zs-web/node/%E9%97%AE%E9%A2%98%E9%9B%86--%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90SSL%E8%BF%87%E6%9C%9F.html",headers:[{level:2,title:"解决方式",slug:"解决方式",normalizedTitle:"解决方式",charIndex:1311},{level:2,title:"config信息",slug:"config信息",normalizedTitle:"config信息",charIndex:1393},{level:3,title:"关闭strict-ssl",slug:"关闭strict-ssl",normalizedTitle:"关闭strict-ssl",charIndex:4008},{level:3,title:"直接修改配置文件",slug:"直接修改配置文件",normalizedTitle:"直接修改配置文件",charIndex:4296},{level:2,title:".npmrc",slug:"npmrc",normalizedTitle:".npmrc",charIndex:1665},{level:3,title:".npmrc配置文件的优先级",slug:"npmrc配置文件的优先级",normalizedTitle:".npmrc配置文件的优先级",charIndex:5175},{level:3,title:".npmrc设置的命令行",slug:"npmrc设置的命令行",normalizedTitle:".npmrc设置的命令行",charIndex:5733},{level:3,title:"如何设置.npmrc",slug:"如何设置-npmrc",normalizedTitle:"如何设置.npmrc",charIndex:5750},{level:2,title:"配置发布组件",slug:"配置发布组件",normalizedTitle:"配置发布组件",charIndex:7029},{level:2,title:"npm常用命令",slug:"npm常用命令",normalizedTitle:"npm常用命令",charIndex:7827},{level:2,title:"重要备注",slug:"重要备注",normalizedTitle:"重要备注",charIndex:8255},{level:3,title:"yarn",slug:"yarn",normalizedTitle:"yarn",charIndex:62},{level:3,title:"scope命名空间",slug:"scope命名空间",normalizedTitle:"scope命名空间",charIndex:8309},{level:3,title:"镜像出错",slug:"镜像出错",normalizedTitle:"镜像出错",charIndex:8554}],lastUpdated:"2024年2月2日星期五下午1点16分",lastUpdatedTimestamp:1706850967e3,headersStr:"解决方式 config信息 关闭strict-ssl 直接修改配置文件 .npmrc .npmrc配置文件的优先级 .npmrc设置的命令行 如何设置.npmrc 配置发布组件 npm常用命令 重要备注 yarn scope命名空间 镜像出错",content:'# 问题集--淘宝镜像源SSL过期\n\nxxx@MacBook-Pro xfg-dev-tech-blog-master % yarn\nyarn install v1.22.17\ninfo No lockfile found.\nwarning package-lock.json found. Your project contains lock files generated by tools other than Yarn. It is advised not to mix package managers in order to avoid resolution inconsistencies caused by unsynchronized lock files. To clear this warning, remove package-lock.json.\n[1/4] 🔍  Resolving packages...\nerror An unexpected error occurred: "https://registry.npm.taobao.org/@vuepress%2fclient: certificate has expired".\ninfo If you think this is a bug, please open a bug report with the information provided in "/Volumes/zs-2T/zs-study/zs-project/xfg-dev-tech-blog-master/yarn-error.log".\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n\n\n> yarn-error.log\n\nTrace: \n  Error: certificate has expired\n      at TLSSocket.onConnectSecure (node:_tls_wrap:1539:34)\n      at TLSSocket.emit (node:events:513:28)\n      at TLSSocket._finishInit (node:_tls_wrap:953:8)\n      at TLSWrap.ssl.onhandshakedone (node:_tls_wrap:734:12)\n      \n\n痕迹：\n   错误：证书已过期\n       在 TLSSocket.onConnectSecure （节点：_tls_wrap：1539：34）\n       在 TLSSocket.emit （节点：事件：513：28）\n       在 TLSSocket._finishInit （节点：_tls_wrap：953：8）\n       在 TLSWrap.ssl.onhandshakedone （节点：_tls_wrap：734：12）\n\n\n\n# 解决方式\n\nnpm config set strict-ssl false\n\nyarn config set "strict-ssl" false -g\n\n\n\n# config信息\n\nxxx@MacBook-Pro xfg-dev-tech-blog-master % npm config list\n; "global" config from /Users/miyufeng/.nvm/versions/node/v16.20.2/etc/npmrc\n\n; registry = "https://registry.npmmirror.com/" ; overridden by user\nstrict-ssl = true \n\n; "user" config from /Users/miyufeng/.npmrc\n\nchromedriver_cdnurl = "https://npm.taobao.org/mirrors/chromedriver" \nCHROMEDRIVER_CDNURL = "https://npm.taobao.org/mirrors/chromedriver" \nELECTRON_BUILDER_BINARIES_MIRROR = "https://npm.taobao.org/mirrors/electron-builder-binaries/" \nELECTRON_MIRROR = "https://npm.taobao.org/mirrors/electron/" \nglobal = true \nNVM_NODEJS_ORG_MIRROR = "https://npm.taobao.org/mirrors/node" \nOPERADRIVER = "https://npm.taobao.org/mirrors/operadriver" \nphantomjs_cdnurl = "https://npm.taobao.org/dist/phantomjs" \nPYTHON_MIRROR = "https://npm.taobao.org/mirrors/python" \nregistry = "https://registry.npm.taobao.org/" \nsass_binary_site = "https://npm.taobao.org/mirrors/node-sass" \n\n; node bin location = /Users/miyufeng/.nvm/versions/node/v16.20.2/bin/node\n; node version = v16.20.2\n; npm local prefix = /Volumes/zs-2T/zs-study/zs-project/xfg-dev-tech-blog-master\n; npm version = 8.19.4\n; cwd = /Volumes/zs-2T/zs-study/zs-project/xfg-dev-tech-blog-master\n; HOME = /Users/miyufeng\n; Run `npm config ls -l` to show all defaults.\n\n\nxxx@MacBook-Pro xfg-dev-tech-blog-master % yarn config list\nyarn config v1.22.17\ninfo yarn config\n{\n  \'version-tag-prefix\': \'v\',\n  \'version-git-tag\': true,\n  \'version-commit-hooks\': true,\n  \'version-git-sign\': false,\n  \'version-git-message\': \'v%s\',\n  \'init-version\': \'1.0.0\',\n  \'init-license\': \'MIT\',\n  \'save-prefix\': \'^\',\n  \'bin-links\': true,\n  \'ignore-scripts\': false,\n  \'ignore-optional\': false,\n  registry: \'https://registry.npmmirror.com\',\n  \'strict-ssl\': true,\n  \'user-agent\': \'yarn/1.22.17 npm/? node/v16.20.2 darwin x64\',\n  \'ignore-engines\': true,\n  lastUpdateCheck: 1706663282683\n}\ninfo npm config\n{\n  \'strict-ssl\': true,\n  registry: \'https://registry.npm.taobao.org/\',\n  phantomjs_cdnurl: \'https://npm.taobao.org/dist/phantomjs\',\n  chromedriver_cdnurl: \'https://npm.taobao.org/mirrors/chromedriver\',\n  sass_binary_site: \'https://npm.taobao.org/mirrors/node-sass\',\n  ELECTRON_MIRROR: \'https://npm.taobao.org/mirrors/electron/\',\n  NVM_NODEJS_ORG_MIRROR: \'https://npm.taobao.org/mirrors/node\',\n  CHROMEDRIVER_CDNURL: \'https://npm.taobao.org/mirrors/chromedriver\',\n  OPERADRIVER: \'https://npm.taobao.org/mirrors/operadriver\',\n  ELECTRON_BUILDER_BINARIES_MIRROR: \'https://npm.taobao.org/mirrors/electron-builder-binaries/\',\n  PYTHON_MIRROR: \'https://npm.taobao.org/mirrors/python\',\n  global: \'=\'\n}\n✨  Done in 0.37s.\n\n\n\n# 关闭strict-ssl\n\nnpm config set strict-ssl false\n\nyarn config set "strict-ssl" false\n\n\nxxx@MacBook-Pro xfg-dev-tech-blog-master % yarn config list                  \nyarn config v1.22.17\ninfo yarn config\n{\n...\n  \'strict-ssl\': false,\n ...\n}\ninfo npm config\n{\n  \'strict-ssl\': false,\n...\n}\n\n\n\n# 直接修改配置文件\n\n> /Users/用户名/.yarnrc\n\n# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\nregistry "https://registry.npmmirror.com"\nignore-engines true\nlastUpdateCheck 1706663282683\nstrict-ssl false\n\n\n\n> /Users/miyufeng/.npmrc\n\nregistry=https://registry.npm.taobao.org/\nphantomjs_cdnurl=https://npm.taobao.org/dist/phantomjs\nchromedriver_cdnurl=https://npm.taobao.org/mirrors/chromedriver\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass\nELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/\nNVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\nCHROMEDRIVER_CDNURL=https://npm.taobao.org/mirrors/chromedriver\nOPERADRIVER=https://npm.taobao.org/mirrors/operadriver\nELECTRON_BUILDER_BINARIES_MIRROR=https://npm.taobao.org/mirrors/electron-builder-binaries/\nPYTHON_MIRROR=https://npm.taobao.org/mirrors/python\nglobal="="\n\n\n\n# .npmrc\n\n\n# .npmrc配置文件的优先级\n\n.npmrc可以理解成npm running cnfiguration，即npm运行时配置文件。\n\n.npmrc可以设置package.json中依赖包的安装来源，即从哪里下载依赖包。\n\n一般情况下，我们的电脑中有多个.npmrc文件，我们在安装包时，npm按照如下顺序读取这些配置文件：\n\n 1. 项目配置文件: /project/.npmrc\n\n 2. 用户配置文件：~/.npmrc\n    \n    我们可以通过如下命令，来获取.npmrc用户配置文件路径： 如果想恢复默认配置，只需要将用户配置文件~/.npmrc删除即可。\n\n 3. 全局配置文件：$PREFIX/etc/npmrc 我们可以通过如下命令，来获取.npmrc 全局配置文件路径$PREFIX：\n    \n    npm config get prefix\n    \n    \n    【注意】如果你不曾配置过全局文件，该文件不存在。\n\n 4. npm内置配置文件/path/to/npm/npmrc\n    \n    我们可以通过如下命令，获取npmrc在npm的路径：\n    \n    which npm\n    \n    \n    与npm同级别, 使用which npm获取npm的路径。\n\n\n# .npmrc设置的命令行\n\n在讲解如何设置.npmrc之前，我们需要了解设置文件的命令行。\n\n我们一般使用key-value的方式来设置文件，如下所示：\n\nnpm config set key value\n\n\n例如，设置仓库信息，可以使用下述命令行：\n\nnpm config set registry https://repo.huaweicloud.com/repository/npm/\n\n\n\n# 如何设置.npmrc\n\n 1. 设置项目配置文件\n    \n    项目下.npmrc文件的优先级最高，可以给每个项目配置不同的镜像，项目之间的配置互不影响。\n    \n    在项目的根目录下新建.npmrc文件，在里面以key=value的格式进行配置。\n    \n    registry=https://registry.npm.taobao.org\n    \n    \n    也可以指定特殊的命名空间（scope）的来源。\n    \n    比如，以@testNpmRc开头的包从registry=https://npm.xx.com这里下载，其余全去淘宝镜像下载。\n    \n    registry=https://registry.npm.taobao.org/\n    @testNpmRc:registry = https://npm.xx.com\n    \n\n 2. 设置用户配置文件\n    \n    可以直接通过如下命令：\n    \n    npm config get userconfig\n    \n    \n    找到用户配置文件的路径，直接仿照上述方法修改该文件。\n    \n    当然，也可以通过npm config set命令继续设置，如下所示：\n    \n    npm config set registry https://registry.npm.taobao.org\n    \n    \n    如果想要删除一些配置，可以直接编辑.npmrc文件，也可以使用命令进行删除，例如：\n    \n    npm config delete registry\n    \n\n 3. 设置全局配置文件\n    \n    方法同设置用户配置文件一样，只不过在使用命令行时需要加上-g参数，如下所示：\n    \n    npm config set registry https://registry.npm.taobao.org -g\n    \n\n 4. 给npm命令添加注册源选项\n    \n    比如，临时使用淘宝镜像，如下所示：\n    \n    npm --registry=https://registry.npm.taobao.org [npm命令]\n    \n    \n    又比如，使用npm安装依赖包，如下所示：\n    \n    npm install  --registry https://registry.npmjs.org\n    \n    \n    但不推荐用这种做法，更推荐设置项目配置文件.npmrc。\n\n\n# 配置发布组件\n\nnpm配置组件发布的方式有如下两种：\n\n * 通过配置packege.json实现\n * 通过配置文件.npmrc实现\n\n 1. package.json配置方式\n    \n    # @aa是组件的scope。\n    # scope在模块名name中使用时，以@开头，后边跟一个/\n    {\n       "name": "@aa/xxx", // 发布npm包的名字\n       "version": "1.0.0", // 你的npm包版本\n       "description": "xxxx", // 包的描述\n       "main": "dist/btn.js", // 指定组件的主入口文件\n       "publishConfig": {\n           "registry": "要发布的私有仓库地址，然后在.npmrc配置用户名密码"\n       }\n       ......\n    }\n    \n\n 2. .npmrc配置方式\n    \n    # package.json不做任何仓库的配置:\n    {\n       "name": "@aa/xxx", // 发布npm包的名字\n       "version": "1.0.0", // 你的npm包版本\n       "description": "xxxx", // 包的描述\n       "main": "dist/btn.js", // 指定组件的主入口文件\n       ......\n    }\n    \n    # .npmrc配置仓库地址和用户名密码：\n    @aa:registry=私仓地址\n    \n    \n    配置好仓库信息后，执行如下发布命令，即可将打包好的组件发布到仓库中：\n    \n    npm publish\n    \n\n\n# npm常用命令\n\nnpm config set <key> <value> [-g|--global]  //给配置参数key设置值为value；\nnpm config get <key>                        //获取配置参数key的值；\nnpm config delete <key>  [-g|--global]      //删除置参数key及其值；\nnpm config list [-l]                \t\t//显示npm的所有配置参数的信息；\nnpm config edit                     \t\t//编辑用户配置文件\nnpm get <key>                           \t//获取配置参数 key 生效的值；\nnpm set <key> <value> [-g|--global]         //给配置参数key设置值为value；\n\n\n\n# 重要备注\n\n\n# yarn\n\nyarn会读取.npmrc的配置文件，所以不必为yarn再设置一次。\n\n\n# scope命名空间\n\n上文提到的指定特殊的命名空间（scope）的来源，如下代码所示：\n\n@aa:registry=https://repo.huaweicloud.com/repository/npm/\n\n\n其中，@aa是组件的scope，scope在模块名name中使用时，以@开头，比如：\n\n# 在package.json的dependencies标签中加上即可使用。\n"dependencies": {\n    "@test/mypackage": "^1.3.0"\n}\n\n\n\n# 镜像出错\n\n.npmrc文件配置了私有包registry源，但是当前的下载源是淘宝镜像，可能会报如下错误：\n\nerror Command failed with exit code 1\n\n\n可以将当前的下载源改成私有包registry源，如果改了之后还报错，可以尝试将lock文件，或者node_modules文件删掉，重新开始下载。',normalizedContent:'# 问题集--淘宝镜像源ssl过期\n\nxxx@macbook-pro xfg-dev-tech-blog-master % yarn\nyarn install v1.22.17\ninfo no lockfile found.\nwarning package-lock.json found. your project contains lock files generated by tools other than yarn. it is advised not to mix package managers in order to avoid resolution inconsistencies caused by unsynchronized lock files. to clear this warning, remove package-lock.json.\n[1/4] 🔍  resolving packages...\nerror an unexpected error occurred: "https://registry.npm.taobao.org/@vuepress%2fclient: certificate has expired".\ninfo if you think this is a bug, please open a bug report with the information provided in "/volumes/zs-2t/zs-study/zs-project/xfg-dev-tech-blog-master/yarn-error.log".\ninfo visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n\n\n> yarn-error.log\n\ntrace: \n  error: certificate has expired\n      at tlssocket.onconnectsecure (node:_tls_wrap:1539:34)\n      at tlssocket.emit (node:events:513:28)\n      at tlssocket._finishinit (node:_tls_wrap:953:8)\n      at tlswrap.ssl.onhandshakedone (node:_tls_wrap:734:12)\n      \n\n痕迹：\n   错误：证书已过期\n       在 tlssocket.onconnectsecure （节点：_tls_wrap：1539：34）\n       在 tlssocket.emit （节点：事件：513：28）\n       在 tlssocket._finishinit （节点：_tls_wrap：953：8）\n       在 tlswrap.ssl.onhandshakedone （节点：_tls_wrap：734：12）\n\n\n\n# 解决方式\n\nnpm config set strict-ssl false\n\nyarn config set "strict-ssl" false -g\n\n\n\n# config信息\n\nxxx@macbook-pro xfg-dev-tech-blog-master % npm config list\n; "global" config from /users/miyufeng/.nvm/versions/node/v16.20.2/etc/npmrc\n\n; registry = "https://registry.npmmirror.com/" ; overridden by user\nstrict-ssl = true \n\n; "user" config from /users/miyufeng/.npmrc\n\nchromedriver_cdnurl = "https://npm.taobao.org/mirrors/chromedriver" \nchromedriver_cdnurl = "https://npm.taobao.org/mirrors/chromedriver" \nelectron_builder_binaries_mirror = "https://npm.taobao.org/mirrors/electron-builder-binaries/" \nelectron_mirror = "https://npm.taobao.org/mirrors/electron/" \nglobal = true \nnvm_nodejs_org_mirror = "https://npm.taobao.org/mirrors/node" \noperadriver = "https://npm.taobao.org/mirrors/operadriver" \nphantomjs_cdnurl = "https://npm.taobao.org/dist/phantomjs" \npython_mirror = "https://npm.taobao.org/mirrors/python" \nregistry = "https://registry.npm.taobao.org/" \nsass_binary_site = "https://npm.taobao.org/mirrors/node-sass" \n\n; node bin location = /users/miyufeng/.nvm/versions/node/v16.20.2/bin/node\n; node version = v16.20.2\n; npm local prefix = /volumes/zs-2t/zs-study/zs-project/xfg-dev-tech-blog-master\n; npm version = 8.19.4\n; cwd = /volumes/zs-2t/zs-study/zs-project/xfg-dev-tech-blog-master\n; home = /users/miyufeng\n; run `npm config ls -l` to show all defaults.\n\n\nxxx@macbook-pro xfg-dev-tech-blog-master % yarn config list\nyarn config v1.22.17\ninfo yarn config\n{\n  \'version-tag-prefix\': \'v\',\n  \'version-git-tag\': true,\n  \'version-commit-hooks\': true,\n  \'version-git-sign\': false,\n  \'version-git-message\': \'v%s\',\n  \'init-version\': \'1.0.0\',\n  \'init-license\': \'mit\',\n  \'save-prefix\': \'^\',\n  \'bin-links\': true,\n  \'ignore-scripts\': false,\n  \'ignore-optional\': false,\n  registry: \'https://registry.npmmirror.com\',\n  \'strict-ssl\': true,\n  \'user-agent\': \'yarn/1.22.17 npm/? node/v16.20.2 darwin x64\',\n  \'ignore-engines\': true,\n  lastupdatecheck: 1706663282683\n}\ninfo npm config\n{\n  \'strict-ssl\': true,\n  registry: \'https://registry.npm.taobao.org/\',\n  phantomjs_cdnurl: \'https://npm.taobao.org/dist/phantomjs\',\n  chromedriver_cdnurl: \'https://npm.taobao.org/mirrors/chromedriver\',\n  sass_binary_site: \'https://npm.taobao.org/mirrors/node-sass\',\n  electron_mirror: \'https://npm.taobao.org/mirrors/electron/\',\n  nvm_nodejs_org_mirror: \'https://npm.taobao.org/mirrors/node\',\n  chromedriver_cdnurl: \'https://npm.taobao.org/mirrors/chromedriver\',\n  operadriver: \'https://npm.taobao.org/mirrors/operadriver\',\n  electron_builder_binaries_mirror: \'https://npm.taobao.org/mirrors/electron-builder-binaries/\',\n  python_mirror: \'https://npm.taobao.org/mirrors/python\',\n  global: \'=\'\n}\n✨  done in 0.37s.\n\n\n\n# 关闭strict-ssl\n\nnpm config set strict-ssl false\n\nyarn config set "strict-ssl" false\n\n\nxxx@macbook-pro xfg-dev-tech-blog-master % yarn config list                  \nyarn config v1.22.17\ninfo yarn config\n{\n...\n  \'strict-ssl\': false,\n ...\n}\ninfo npm config\n{\n  \'strict-ssl\': false,\n...\n}\n\n\n\n# 直接修改配置文件\n\n> /users/用户名/.yarnrc\n\n# this is an autogenerated file. do not edit this file directly.\n# yarn lockfile v1\n\n\nregistry "https://registry.npmmirror.com"\nignore-engines true\nlastupdatecheck 1706663282683\nstrict-ssl false\n\n\n\n> /users/miyufeng/.npmrc\n\nregistry=https://registry.npm.taobao.org/\nphantomjs_cdnurl=https://npm.taobao.org/dist/phantomjs\nchromedriver_cdnurl=https://npm.taobao.org/mirrors/chromedriver\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\nnvm_nodejs_org_mirror=https://npm.taobao.org/mirrors/node\nchromedriver_cdnurl=https://npm.taobao.org/mirrors/chromedriver\noperadriver=https://npm.taobao.org/mirrors/operadriver\nelectron_builder_binaries_mirror=https://npm.taobao.org/mirrors/electron-builder-binaries/\npython_mirror=https://npm.taobao.org/mirrors/python\nglobal="="\n\n\n\n# .npmrc\n\n\n# .npmrc配置文件的优先级\n\n.npmrc可以理解成npm running cnfiguration，即npm运行时配置文件。\n\n.npmrc可以设置package.json中依赖包的安装来源，即从哪里下载依赖包。\n\n一般情况下，我们的电脑中有多个.npmrc文件，我们在安装包时，npm按照如下顺序读取这些配置文件：\n\n 1. 项目配置文件: /project/.npmrc\n\n 2. 用户配置文件：~/.npmrc\n    \n    我们可以通过如下命令，来获取.npmrc用户配置文件路径： 如果想恢复默认配置，只需要将用户配置文件~/.npmrc删除即可。\n\n 3. 全局配置文件：$prefix/etc/npmrc 我们可以通过如下命令，来获取.npmrc 全局配置文件路径$prefix：\n    \n    npm config get prefix\n    \n    \n    【注意】如果你不曾配置过全局文件，该文件不存在。\n\n 4. npm内置配置文件/path/to/npm/npmrc\n    \n    我们可以通过如下命令，获取npmrc在npm的路径：\n    \n    which npm\n    \n    \n    与npm同级别, 使用which npm获取npm的路径。\n\n\n# .npmrc设置的命令行\n\n在讲解如何设置.npmrc之前，我们需要了解设置文件的命令行。\n\n我们一般使用key-value的方式来设置文件，如下所示：\n\nnpm config set key value\n\n\n例如，设置仓库信息，可以使用下述命令行：\n\nnpm config set registry https://repo.huaweicloud.com/repository/npm/\n\n\n\n# 如何设置.npmrc\n\n 1. 设置项目配置文件\n    \n    项目下.npmrc文件的优先级最高，可以给每个项目配置不同的镜像，项目之间的配置互不影响。\n    \n    在项目的根目录下新建.npmrc文件，在里面以key=value的格式进行配置。\n    \n    registry=https://registry.npm.taobao.org\n    \n    \n    也可以指定特殊的命名空间（scope）的来源。\n    \n    比如，以@testnpmrc开头的包从registry=https://npm.xx.com这里下载，其余全去淘宝镜像下载。\n    \n    registry=https://registry.npm.taobao.org/\n    @testnpmrc:registry = https://npm.xx.com\n    \n\n 2. 设置用户配置文件\n    \n    可以直接通过如下命令：\n    \n    npm config get userconfig\n    \n    \n    找到用户配置文件的路径，直接仿照上述方法修改该文件。\n    \n    当然，也可以通过npm config set命令继续设置，如下所示：\n    \n    npm config set registry https://registry.npm.taobao.org\n    \n    \n    如果想要删除一些配置，可以直接编辑.npmrc文件，也可以使用命令进行删除，例如：\n    \n    npm config delete registry\n    \n\n 3. 设置全局配置文件\n    \n    方法同设置用户配置文件一样，只不过在使用命令行时需要加上-g参数，如下所示：\n    \n    npm config set registry https://registry.npm.taobao.org -g\n    \n\n 4. 给npm命令添加注册源选项\n    \n    比如，临时使用淘宝镜像，如下所示：\n    \n    npm --registry=https://registry.npm.taobao.org [npm命令]\n    \n    \n    又比如，使用npm安装依赖包，如下所示：\n    \n    npm install  --registry https://registry.npmjs.org\n    \n    \n    但不推荐用这种做法，更推荐设置项目配置文件.npmrc。\n\n\n# 配置发布组件\n\nnpm配置组件发布的方式有如下两种：\n\n * 通过配置packege.json实现\n * 通过配置文件.npmrc实现\n\n 1. package.json配置方式\n    \n    # @aa是组件的scope。\n    # scope在模块名name中使用时，以@开头，后边跟一个/\n    {\n       "name": "@aa/xxx", // 发布npm包的名字\n       "version": "1.0.0", // 你的npm包版本\n       "description": "xxxx", // 包的描述\n       "main": "dist/btn.js", // 指定组件的主入口文件\n       "publishconfig": {\n           "registry": "要发布的私有仓库地址，然后在.npmrc配置用户名密码"\n       }\n       ......\n    }\n    \n\n 2. .npmrc配置方式\n    \n    # package.json不做任何仓库的配置:\n    {\n       "name": "@aa/xxx", // 发布npm包的名字\n       "version": "1.0.0", // 你的npm包版本\n       "description": "xxxx", // 包的描述\n       "main": "dist/btn.js", // 指定组件的主入口文件\n       ......\n    }\n    \n    # .npmrc配置仓库地址和用户名密码：\n    @aa:registry=私仓地址\n    \n    \n    配置好仓库信息后，执行如下发布命令，即可将打包好的组件发布到仓库中：\n    \n    npm publish\n    \n\n\n# npm常用命令\n\nnpm config set <key> <value> [-g|--global]  //给配置参数key设置值为value；\nnpm config get <key>                        //获取配置参数key的值；\nnpm config delete <key>  [-g|--global]      //删除置参数key及其值；\nnpm config list [-l]                \t\t//显示npm的所有配置参数的信息；\nnpm config edit                     \t\t//编辑用户配置文件\nnpm get <key>                           \t//获取配置参数 key 生效的值；\nnpm set <key> <value> [-g|--global]         //给配置参数key设置值为value；\n\n\n\n# 重要备注\n\n\n# yarn\n\nyarn会读取.npmrc的配置文件，所以不必为yarn再设置一次。\n\n\n# scope命名空间\n\n上文提到的指定特殊的命名空间（scope）的来源，如下代码所示：\n\n@aa:registry=https://repo.huaweicloud.com/repository/npm/\n\n\n其中，@aa是组件的scope，scope在模块名name中使用时，以@开头，比如：\n\n# 在package.json的dependencies标签中加上即可使用。\n"dependencies": {\n    "@test/mypackage": "^1.3.0"\n}\n\n\n\n# 镜像出错\n\n.npmrc文件配置了私有包registry源，但是当前的下载源是淘宝镜像，可能会报如下错误：\n\nerror command failed with exit code 1\n\n\n可以将当前的下载源改成私有包registry源，如果改了之后还报错，可以尝试将lock文件，或者node_modules文件删掉，重新开始下载。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706850967e3},{title:"html--0.魔术卡片",frontmatter:{},regularPath:"/zs-web/project/html/%E9%AD%94%E6%9C%AF%E5%8D%A1%E7%89%87.html",relativePath:"zs-web/project/html/魔术卡片.md",key:"v-63b6c8e0",path:"/zs-web/project/html/%E9%AD%94%E6%9C%AF%E5%8D%A1%E7%89%87.html",headers:[{level:2,title:"核心原理：屏幕坐标和窗口通信",slug:"核心原理-屏幕坐标和窗口通信",normalizedTitle:"核心原理：屏幕坐标和窗口通信",charIndex:21},{level:2,title:"元素移动",slug:"元素移动",normalizedTitle:"元素移动",charIndex:42},{level:3,title:"元素在浏览器中坐标",slug:"元素在浏览器中坐标",normalizedTitle:"元素在浏览器中坐标",charIndex:51},{level:3,title:"鼠标在浏览器中坐标",slug:"鼠标在浏览器中坐标",normalizedTitle:"鼠标在浏览器中坐标",charIndex:183},{level:3,title:"计算鼠标在元素中坐标",slug:"计算鼠标在元素中坐标",normalizedTitle:"计算鼠标在元素中坐标",charIndex:355},{level:3,title:"元素移动--\x3e计算元素在浏览器中坐标",slug:"元素移动-计算元素在浏览器中坐标",normalizedTitle:"元素移动--&gt;计算元素在浏览器中坐标",charIndex:null},{level:2,title:"浏览器在屏幕中坐标",slug:"浏览器在屏幕中坐标",normalizedTitle:"浏览器在屏幕中坐标",charIndex:1187},{level:3,title:"元素浏览器坐标元素屏幕坐标",slug:"元素浏览器坐标-元素屏幕坐标",normalizedTitle:"元素浏览器坐标元素屏幕坐标",charIndex:null},{level:2,title:"窗口通信",slug:"窗口通信",normalizedTitle:"窗口通信",charIndex:31},{level:2,title:"代码实现",slug:"代码实现",normalizedTitle:"代码实现",charIndex:2840}],lastUpdated:"2024年1月19日星期五中午11点37分",lastUpdatedTimestamp:1705635447e3,headersStr:"核心原理：屏幕坐标和窗口通信 元素移动 元素在浏览器中坐标 鼠标在浏览器中坐标 计算鼠标在元素中坐标 元素移动--\x3e计算元素在浏览器中坐标 浏览器在屏幕中坐标 元素浏览器坐标元素屏幕坐标 窗口通信 代码实现",content:"# html--0.魔术卡片\n\n\n\n\n# 核心原理：屏幕坐标和窗口通信\n\n\n\n\n# 元素移动\n\n\n# 元素在浏览器中坐标\n\n元素左上角在浏览器中的坐标\n\noffsetLeft offsetTop\n\nconst card = document.querySelector('.card');\ncard.offsetLeft;\ncard.offsetTop;\n\n\n\n# 鼠标在浏览器中坐标\n\n获取被点击元素，鼠标距离浏览器窗口的坐标\n\npageX pageY\n\nconst card = document.querySelector('.card');\ncard.onmousedown = (e) => {\n    //鼠标点击位置：浏览器窗口坐标\n    e.pageX\n    e.pageY\n}\n\n\n\n# 计算鼠标在元素中坐标\n\n鼠标在元素中坐标 = 浏览器坐标 - 元素坐标\n\nconst card = document.querySelector('.card');\ncard.onmousedown = (e) => {\n    //浏览器窗口中的坐标\n    let x = e.pageX - card.offsetLeft;\n    let y = e.pageY - card.offsetTop;\n}\n\n\n\n# 元素移动--\x3e计算元素在浏览器中坐标\n\n> 元素移动时\n> \n> 改变元素的绝对定位：left、top属性\n> \n> 核心原理：元素坐标 = 鼠标浏览器坐标 - 鼠标元素中坐标\n> \n> 具体步骤：\n> \n> （1）鼠标按下时： 计算出：鼠标在元素中的坐标\n> \n> （2）鼠标移动时：\n> \n> 元素坐标 = 鼠标浏览器坐标 - 鼠标在元素中坐标\n> \n> （3）鼠标抬起\n> \n> 取消：按下、移动 的事件\n\ncard.onmousedown = (e) => {\n    //浏览器窗口中的坐标\n    let x = e.pageX - card.offsetLeft;\n    let y = e.pageY - card.offsetTop;\n\n    window.onmousemove = (e) => {\n        const cx = e.pageX - x;\n        const cy = e.pageY - y;\n        card.style.left = cx + 'px';\n        card.style.top = cy + 'px';\n    };\n\n    window.onmouseup = () => {\n        window.onmousemove = null;\n        window.onmouseup = null;\n    };\n}\n\n\n\n# 浏览器在屏幕中坐标\n\n\n\n> 获取浏览器窗口在屏幕中的坐标\n\n// api一\nwindow.screenX\nwindow.screenY\n\n// api二\nwindow.screenLeft\nwindow.screenTop\n\n\n> 窗口可视区域大小\n\nvar windowInnerWidth = window.innerWidth;\nvar windowInnerHeight = window.innerHeight;\nconsole.log(\"浏览器窗口内部宽度\" + windowInnerWidth);\nconsole.log(\"浏览器窗口内部高度\" + windowInnerHeight);\n\nvar windowWidth = window.outerWidth;\nvar windowHeight = window.outerHeight;\nconsole.log(\"浏览器窗口宽度：\" + windowWidth);\nconsole.log(\"浏览器窗口高度：\" + windowHeight);\n\n\n\n# 元素浏览器坐标<==>元素屏幕坐标\n\n\n\n> 元素浏览器坐标==>元素屏幕坐标\n> \n> 元素_屏幕_X = 元素_浏览器_X + 浏览器_屏幕_X\n> \n> 元素_屏幕_Y = 元素_浏览器_Y + 浏览器_屏幕_Y + 工具栏高度 推导出==》 元素_屏幕_Y = 元素_浏览器_Y + 浏览器_屏幕_Y + (浏览器_外高度 - 浏览器_内高度)\n\nfunction getScreenPoint(clientX, clientY) {\n    //元素_屏幕_X = 元素_浏览器_X + 浏览器_屏幕_X\n    const screenX = clientX + window.screenX;\n    //元素_屏幕_Y = 元素_浏览器_Y + 浏览器_屏幕_Y + (浏览器_外高度 - 浏览器_内高度)\n    const screenY = clientY + window.screenY + (window.outerHeight - window.innerHeight);\n    return [screenX, screenY];\n}\n\n\n> 元素浏览器坐标<==元素屏幕坐标\n> \n> 同理换算可得\n> \n> 元素_浏览器_X = 元素_屏幕_X - 浏览器_屏幕_X\n> \n> 元素_浏览器_Y = 元素_屏幕_Y - 浏览器_屏幕_Y - (浏览器_外高度 - 浏览器_内高度)\n\nfunction getClientPoint(screenX, screenY) {\n    //元素_浏览器_X = 元素_屏幕_X - 浏览器_屏幕_X\n    const clientX = screenX - window.screenX;\n    //元素_浏览器_Y = 元素_屏幕_Y - 浏览器_屏幕_Y - (浏览器_外高度 - 浏览器_内高度)\n    const clientY = screenY - window.screenY - (window.outerHeight - window.innerHeight);\n    return [clientX, clientY];\n}\n\n\n\n# 窗口通信\n\n//订阅|创建\nconst channel = new BroadcastChannel('card');\n\n//发送\nchannel.postMessage(getScreenPoint(cx, cy));\n//接收\nchannel.onmessage = (e) => {\n    const [cx, cy] = getClientPoint(...e.data);\n    card.style.left = cx + 'px';\n    card.style.top = cy + 'px';\n}\n\n\n\n# 代码实现\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <style>\n        .card {\n            background-color: red;\n            width: 100px;\n            height: 100px;\n            border: 1px solid #000000;\n            display: flex;\n            position: absolute;\n            left: 0px;\n            top: 0px;\n        }\n    </style>\n</head>\n<body>\n\n\x3c!--卡片--\x3e\n<div class=\"card\"></div>\n\n\x3c!--实现--\x3e\n<script src=\"./index.js\"><\/script>\n</body>\n</html>\n\n\nconst card = document.querySelector('.card');\n\ncard.onmousedown = (e) => {\n    //浏览器窗口中的坐标\n    let x = e.pageX - card.offsetLeft;\n    let y = e.pageY - card.offsetTop;\n\n    window.onmousemove = (e) => {\n        const cx = e.pageX - x;\n        const cy = e.pageY - y;\n        card.style.left = cx + 'px';\n        card.style.top = cy + 'px';\n\n        channel.postMessage(getScreenPoint(cx, cy));\n    };\n\n    window.onmouseup = () => {\n        window.onmousemove = null;\n        window.onmouseup = null;\n    };\n}\n\nfunction init() {\n    if (location.search.includes('hidden')) {\n        card.style.left = '-1000px';\n    }\n}\n\ninit();\n\nfunction getClientPoint(screenX, screenY) {\n    const clientX = screenX - window.screenX;\n    const clientY = screenY - window.screenY - (window.outerHeight - window.innerHeight);\n    return [clientX, clientY];\n}\n\nfunction getScreenPoint(clientX, clientY) {\n    const screenX = clientX + window.screenX;\n    const screenY = clientY + window.screenY +  (window.outerHeight - window.innerHeight);\n    return [screenX, screenY];\n}\n\nconst channel = new BroadcastChannel('card');\n\n\n\nchannel.onmessage = (e) => {\n    const [cx, cy] = getClientPoint(...e.data);\n    card.style.left = cx + 'px';\n    card.style.top = cy + 'px';\n}\n\n",normalizedContent:"# html--0.魔术卡片\n\n\n\n\n# 核心原理：屏幕坐标和窗口通信\n\n\n\n\n# 元素移动\n\n\n# 元素在浏览器中坐标\n\n元素左上角在浏览器中的坐标\n\noffsetleft offsettop\n\nconst card = document.queryselector('.card');\ncard.offsetleft;\ncard.offsettop;\n\n\n\n# 鼠标在浏览器中坐标\n\n获取被点击元素，鼠标距离浏览器窗口的坐标\n\npagex pagey\n\nconst card = document.queryselector('.card');\ncard.onmousedown = (e) => {\n    //鼠标点击位置：浏览器窗口坐标\n    e.pagex\n    e.pagey\n}\n\n\n\n# 计算鼠标在元素中坐标\n\n鼠标在元素中坐标 = 浏览器坐标 - 元素坐标\n\nconst card = document.queryselector('.card');\ncard.onmousedown = (e) => {\n    //浏览器窗口中的坐标\n    let x = e.pagex - card.offsetleft;\n    let y = e.pagey - card.offsettop;\n}\n\n\n\n# 元素移动--\x3e计算元素在浏览器中坐标\n\n> 元素移动时\n> \n> 改变元素的绝对定位：left、top属性\n> \n> 核心原理：元素坐标 = 鼠标浏览器坐标 - 鼠标元素中坐标\n> \n> 具体步骤：\n> \n> （1）鼠标按下时： 计算出：鼠标在元素中的坐标\n> \n> （2）鼠标移动时：\n> \n> 元素坐标 = 鼠标浏览器坐标 - 鼠标在元素中坐标\n> \n> （3）鼠标抬起\n> \n> 取消：按下、移动 的事件\n\ncard.onmousedown = (e) => {\n    //浏览器窗口中的坐标\n    let x = e.pagex - card.offsetleft;\n    let y = e.pagey - card.offsettop;\n\n    window.onmousemove = (e) => {\n        const cx = e.pagex - x;\n        const cy = e.pagey - y;\n        card.style.left = cx + 'px';\n        card.style.top = cy + 'px';\n    };\n\n    window.onmouseup = () => {\n        window.onmousemove = null;\n        window.onmouseup = null;\n    };\n}\n\n\n\n# 浏览器在屏幕中坐标\n\n\n\n> 获取浏览器窗口在屏幕中的坐标\n\n// api一\nwindow.screenx\nwindow.screeny\n\n// api二\nwindow.screenleft\nwindow.screentop\n\n\n> 窗口可视区域大小\n\nvar windowinnerwidth = window.innerwidth;\nvar windowinnerheight = window.innerheight;\nconsole.log(\"浏览器窗口内部宽度\" + windowinnerwidth);\nconsole.log(\"浏览器窗口内部高度\" + windowinnerheight);\n\nvar windowwidth = window.outerwidth;\nvar windowheight = window.outerheight;\nconsole.log(\"浏览器窗口宽度：\" + windowwidth);\nconsole.log(\"浏览器窗口高度：\" + windowheight);\n\n\n\n# 元素浏览器坐标<==>元素屏幕坐标\n\n\n\n> 元素浏览器坐标==>元素屏幕坐标\n> \n> 元素_屏幕_x = 元素_浏览器_x + 浏览器_屏幕_x\n> \n> 元素_屏幕_y = 元素_浏览器_y + 浏览器_屏幕_y + 工具栏高度 推导出==》 元素_屏幕_y = 元素_浏览器_y + 浏览器_屏幕_y + (浏览器_外高度 - 浏览器_内高度)\n\nfunction getscreenpoint(clientx, clienty) {\n    //元素_屏幕_x = 元素_浏览器_x + 浏览器_屏幕_x\n    const screenx = clientx + window.screenx;\n    //元素_屏幕_y = 元素_浏览器_y + 浏览器_屏幕_y + (浏览器_外高度 - 浏览器_内高度)\n    const screeny = clienty + window.screeny + (window.outerheight - window.innerheight);\n    return [screenx, screeny];\n}\n\n\n> 元素浏览器坐标<==元素屏幕坐标\n> \n> 同理换算可得\n> \n> 元素_浏览器_x = 元素_屏幕_x - 浏览器_屏幕_x\n> \n> 元素_浏览器_y = 元素_屏幕_y - 浏览器_屏幕_y - (浏览器_外高度 - 浏览器_内高度)\n\nfunction getclientpoint(screenx, screeny) {\n    //元素_浏览器_x = 元素_屏幕_x - 浏览器_屏幕_x\n    const clientx = screenx - window.screenx;\n    //元素_浏览器_y = 元素_屏幕_y - 浏览器_屏幕_y - (浏览器_外高度 - 浏览器_内高度)\n    const clienty = screeny - window.screeny - (window.outerheight - window.innerheight);\n    return [clientx, clienty];\n}\n\n\n\n# 窗口通信\n\n//订阅|创建\nconst channel = new broadcastchannel('card');\n\n//发送\nchannel.postmessage(getscreenpoint(cx, cy));\n//接收\nchannel.onmessage = (e) => {\n    const [cx, cy] = getclientpoint(...e.data);\n    card.style.left = cx + 'px';\n    card.style.top = cy + 'px';\n}\n\n\n\n# 代码实现\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>title</title>\n\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <style>\n        .card {\n            background-color: red;\n            width: 100px;\n            height: 100px;\n            border: 1px solid #000000;\n            display: flex;\n            position: absolute;\n            left: 0px;\n            top: 0px;\n        }\n    </style>\n</head>\n<body>\n\n\x3c!--卡片--\x3e\n<div class=\"card\"></div>\n\n\x3c!--实现--\x3e\n<script src=\"./index.js\"><\/script>\n</body>\n</html>\n\n\nconst card = document.queryselector('.card');\n\ncard.onmousedown = (e) => {\n    //浏览器窗口中的坐标\n    let x = e.pagex - card.offsetleft;\n    let y = e.pagey - card.offsettop;\n\n    window.onmousemove = (e) => {\n        const cx = e.pagex - x;\n        const cy = e.pagey - y;\n        card.style.left = cx + 'px';\n        card.style.top = cy + 'px';\n\n        channel.postmessage(getscreenpoint(cx, cy));\n    };\n\n    window.onmouseup = () => {\n        window.onmousemove = null;\n        window.onmouseup = null;\n    };\n}\n\nfunction init() {\n    if (location.search.includes('hidden')) {\n        card.style.left = '-1000px';\n    }\n}\n\ninit();\n\nfunction getclientpoint(screenx, screeny) {\n    const clientx = screenx - window.screenx;\n    const clienty = screeny - window.screeny - (window.outerheight - window.innerheight);\n    return [clientx, clienty];\n}\n\nfunction getscreenpoint(clientx, clienty) {\n    const screenx = clientx + window.screenx;\n    const screeny = clienty + window.screeny +  (window.outerheight - window.innerheight);\n    return [screenx, screeny];\n}\n\nconst channel = new broadcastchannel('card');\n\n\n\nchannel.onmessage = (e) => {\n    const [cx, cy] = getclientpoint(...e.data);\n    card.style.left = cx + 'px';\n    card.style.top = cy + 'px';\n}\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1705635447e3},{title:"响应状态码",frontmatter:{},regularPath:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.html",relativePath:"zs-web/tool-小结/响应状态码.md",key:"v-e4fc2ace",path:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.html",headers:[{level:2,title:"成功响应",slug:"成功响应",normalizedTitle:"成功响应",charIndex:32},{level:3,title:"200 ok",slug:"_200-ok",normalizedTitle:"200 ok",charIndex:124},{level:3,title:"304  Not Modified",slug:"_304-not-modified",normalizedTitle:"304  not modified",charIndex:null},{level:2,title:"客户端错误响应",slug:"客户端错误响应",normalizedTitle:"客户端错误响应",charIndex:71},{level:3,title:"401 Unauthorized",slug:"_401-unauthorized",normalizedTitle:"401 unauthorized",charIndex:351},{level:3,title:"403 Forbidden",slug:"_403-forbidden",normalizedTitle:"403 forbidden",charIndex:464},{level:3,title:"404 Not Found",slug:"_404-not-found",normalizedTitle:"404 not found",charIndex:559},{level:2,title:"服务端错误响应",slug:"服务端错误响应",normalizedTitle:"服务端错误响应",charIndex:93},{level:3,title:"500 Internal Server Error",slug:"_500-internal-server-error",normalizedTitle:"500 internal server error",charIndex:727},{level:3,title:"502 Bad Gateway",slug:"_502-bad-gateway",normalizedTitle:"502 bad gateway",charIndex:776}],lastUpdated:"2024年1月26日星期五上午10点11分",lastUpdatedTimestamp:1706235081e3,headersStr:"成功响应 200 ok 304  Not Modified 客户端错误响应 401 Unauthorized 403 Forbidden 404 Not Found 服务端错误响应 500 Internal Server Error 502 Bad Gateway",content:'# 响应状态码\n\n 1. 信息响应 (100–199)\n 2. 成功响应 (200–299)\n 3. 重定向消息 (300–399)\n 4. 客户端错误响应 (400–499)\n 5. 服务端错误响应 (500–599)\n\n\n# 成功响应\n\n\n# 200 ok\n\n请求成功。成功的含义取决于 HTTP 方法：\n\n * GET: 资源已被提取并在消息正文中传输。\n * HEAD: 实体标头位于消息正文中。\n * PUT or POST: 描述动作结果的资源在消息体中传输。\n * TRACE: 消息正文包含服务器收到的请求消息。\n\n\n# 304 Not Modified\n\n这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。\n\n\n# 客户端错误响应\n\n\n# 401 Unauthorized\n\n虽然 HTTP 标准指定了"unauthorized"，但从语义上来说，这个响应意味着"unauthenticated"。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。\n\n\n# 403 Forbidden\n\n客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 401 Unauthorized 不同，服务器知道客户端的身份。\n\n\n# 404 Not Found\n\n服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 403 Forbidden，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。\n\n\n# 服务端错误响应\n\n\n# 500 Internal Server Error\n\n服务器遇到了不知道如何处理的情况。\n\n\n# 502 Bad Gateway\n\n此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。',normalizedContent:'# 响应状态码\n\n 1. 信息响应 (100–199)\n 2. 成功响应 (200–299)\n 3. 重定向消息 (300–399)\n 4. 客户端错误响应 (400–499)\n 5. 服务端错误响应 (500–599)\n\n\n# 成功响应\n\n\n# 200 ok\n\n请求成功。成功的含义取决于 http 方法：\n\n * get: 资源已被提取并在消息正文中传输。\n * head: 实体标头位于消息正文中。\n * put or post: 描述动作结果的资源在消息体中传输。\n * trace: 消息正文包含服务器收到的请求消息。\n\n\n# 304 not modified\n\n这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。\n\n\n# 客户端错误响应\n\n\n# 401 unauthorized\n\n虽然 http 标准指定了"unauthorized"，但从语义上来说，这个响应意味着"unauthenticated"。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。\n\n\n# 403 forbidden\n\n客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 401 unauthorized 不同，服务器知道客户端的身份。\n\n\n# 404 not found\n\n服务器找不到请求的资源。在浏览器中，这意味着无法识别 url。在 api 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 403 forbidden，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。\n\n\n# 服务端错误响应\n\n\n# 500 internal server error\n\n服务器遇到了不知道如何处理的情况。\n\n\n# 502 bad gateway\n\n此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706235081e3},{title:"页面修改",frontmatter:{},regularPath:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E9%A1%B5%E9%9D%A2%E4%BF%AE%E6%94%B9.html",relativePath:"zs-web/tool-小结/页面修改.md",key:"v-4aded80a",path:"/zs-web/tool-%E5%B0%8F%E7%BB%93/%E9%A1%B5%E9%9D%A2%E4%BF%AE%E6%94%B9.html",lastUpdated:"2023年12月27日星期三晚上11点30分",lastUpdatedTimestamp:170369105e4,headersStr:null,content:'# 页面修改\n\n> 可编辑页面内容\n\ndocument.body.contentEditable="true"\n\n\n> 关闭点击事件\n\n你可以使用JavaScript来临时关闭所有点击事件。以下是一种实现方式：\n\n// 获取所有的元素\nvar elements = document.getElementsByTagName("*");\n\n// 遍历所有元素\nfor (var i = 0; i < elements.length; i++) {\n  // 禁用点击事件\n  elements[i].onclick = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n}\n\n\n这段代码会获取页面上的所有元素，并将它们的点击事件禁用。通过遍历所有元素，并将点击事件的处理函数设置为一个空函数，可以达到临时关闭所有点击事件的效果。',normalizedContent:'# 页面修改\n\n> 可编辑页面内容\n\ndocument.body.contenteditable="true"\n\n\n> 关闭点击事件\n\n你可以使用javascript来临时关闭所有点击事件。以下是一种实现方式：\n\n// 获取所有的元素\nvar elements = document.getelementsbytagname("*");\n\n// 遍历所有元素\nfor (var i = 0; i < elements.length; i++) {\n  // 禁用点击事件\n  elements[i].onclick = function(event) {\n    event.preventdefault();\n    event.stoppropagation();\n  };\n}\n\n\n这段代码会获取页面上的所有元素，并将它们的点击事件禁用。通过遍历所有元素，并将点击事件的处理函数设置为一个空函数，可以达到临时关闭所有点击事件的效果。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:170369105e4},{title:"激活码",frontmatter:{},regularPath:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/idea/",relativePath:"大工具/idea/readme.md",key:"v-0030f45e",path:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/idea/",lastUpdated:"2024年8月14日星期三下午2点28分",lastUpdatedTimestamp:1723616886e3,headersStr:null,content:"# 激活码\n\nhttps://www.ajihuo.com/idea/5937.html\n\n",normalizedContent:"# 激活码\n\nhttps://www.ajihuo.com/idea/5937.html\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723616886e3},{title:"typroa1.6.7激活",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/typroa1.6.7%E6%BF%80%E6%B4%BB.html",relativePath:"小工具/markdown/typroa1.6.7激活.md",key:"v-d8dd6670",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/typroa1.6.7%E6%BF%80%E6%B4%BB.html",headersStr:null,content:"# typroa1.6.7激活\n\nhttps://github.com/shuhongfan/TyporaCrack\n\n",normalizedContent:"# typroa1.6.7激活\n\nhttps://github.com/shuhongfan/typoracrack\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1}},{title:"安装-win安装",frontmatter:{},regularPath:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/%E5%AE%89%E8%A3%85-win%E5%AE%89%E8%A3%85.html",relativePath:"中间件/docker/安装-win安装.md",key:"v-3570fadb",path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/%E5%AE%89%E8%A3%85-win%E5%AE%89%E8%A3%85.html",lastUpdated:"2024年8月12日星期一早上8点55分",lastUpdatedTimestamp:1723424126e3,headersStr:null,content:"# 安装-win安装\n\nhttps://www.bilibili.com/video/BV1vm421T7Kw\n\n\n\ngithub地址：https://github.com/tech-shrimp/docker_installer",normalizedContent:"# 安装-win安装\n\nhttps://www.bilibili.com/video/bv1vm421t7kw\n\n\n\ngithub地址：https://github.com/tech-shrimp/docker_installer",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723018985e3},{title:"git常见命令",frontmatter:{title:"git常见命令",markmap:{colorFreezeLevel:2}},regularPath:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"大工具/git/常用命令.md",key:"v-41d3c199",path:"/%E5%A4%A7%E5%B7%A5%E5%85%B7/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",headers:[{level:2,title:"生成ssh秘钥",slug:"生成ssh秘钥",normalizedTitle:"生成ssh秘钥",charIndex:2},{level:2,title:"克隆代码",slug:"克隆代码",normalizedTitle:"克隆代码",charIndex:108},{level:2,title:"本地分支",slug:"本地分支",normalizedTitle:"本地分支",charIndex:173},{level:2,title:"远程命令",slug:"远程命令",normalizedTitle:"远程命令",charIndex:216},{level:2,title:"推送",slug:"推送",normalizedTitle:"推送",charIndex:296}],lastUpdated:"2024年8月14日星期三下午2点28分",lastUpdatedTimestamp:1723616886e3,headersStr:"生成ssh秘钥 克隆代码 本地分支 远程命令 推送",content:'# 生成ssh秘钥\n\n# 检查ssh keys是否存在\nls -al ~/.ssh\n\n# 生成新的ssh key\nssh-keygen -t rsa -C "your_email@example.com"\n\n\n\n# 克隆代码\n\n# 不指定分支\ngit clone 仓库地址\n\n# 指定分支\ngit clone -b 分支名称 仓库地址\n\n\n\n# 本地分支\n\n# 分支重命名\ngit branch -m 旧分支名 新分支名\n\n\n\n# 远程命令\n\n# 添加远程地址\ngit remote add 远程别名 "远程仓库地址"\n\n# 删除远程地址\ngit remote remove 远程别名\n\n# 推送\ngit push -u origin 远程分支名\n\n\n\n# 推送\n\n# 格式\ngit push <远程主机名> <本地分支名>:<远程分支名>\n\n\n# 将本地的dev分支上的代码推送到远程主机名为origin中test的分支上。如果远程的test分支不存在，则会被创建\ngit push origin dev:test\n\n# 缺省分支写法\ngit push origin dev:dev\ngit push origin dev\n\n# 当只有一个远程分支时\ngit push\n\ngit push -u\n',normalizedContent:'# 生成ssh秘钥\n\n# 检查ssh keys是否存在\nls -al ~/.ssh\n\n# 生成新的ssh key\nssh-keygen -t rsa -c "your_email@example.com"\n\n\n\n# 克隆代码\n\n# 不指定分支\ngit clone 仓库地址\n\n# 指定分支\ngit clone -b 分支名称 仓库地址\n\n\n\n# 本地分支\n\n# 分支重命名\ngit branch -m 旧分支名 新分支名\n\n\n\n# 远程命令\n\n# 添加远程地址\ngit remote add 远程别名 "远程仓库地址"\n\n# 删除远程地址\ngit remote remove 远程别名\n\n# 推送\ngit push -u origin 远程分支名\n\n\n\n# 推送\n\n# 格式\ngit push <远程主机名> <本地分支名>:<远程分支名>\n\n\n# 将本地的dev分支上的代码推送到远程主机名为origin中test的分支上。如果远程的test分支不存在，则会被创建\ngit push origin dev:test\n\n# 缺省分支写法\ngit push origin dev:dev\ngit push origin dev\n\n# 当只有一个远程分支时\ngit push\n\ngit push -u\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723616886e3},{title:"Docker官方安装包",frontmatter:{},regularPath:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/",relativePath:"中间件/docker/README.md",key:"v-0d21c6f4",path:"/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/",headers:[{level:2,title:"解决Docker国内网络问题",slug:"解决docker国内网络问题",normalizedTitle:"解决docker国内网络问题",charIndex:18},{level:3,title:"特点：",slug:"特点",normalizedTitle:"特点：",charIndex:101},{level:2,title:"1. Docker安装",slug:"_1-docker安装",normalizedTitle:"1. docker安装",charIndex:242},{level:3,title:"1.1 Linux",slug:"_1-1-linux",normalizedTitle:"1.1 linux",charIndex:258},{level:3,title:"1.2 Windows",slug:"_1-2-windows",normalizedTitle:"1.2 windows",charIndex:627},{level:3,title:"1.3 Mac",slug:"_1-3-mac",normalizedTitle:"1.3 mac",charIndex:1039},{level:2,title:"2. Pull镜像",slug:"_2-pull镜像",normalizedTitle:"2. pull镜像",charIndex:1186},{level:3,title:"方案一  转存到阿里云",slug:"方案一-转存到阿里云",normalizedTitle:"方案一  转存到阿里云",charIndex:null},{level:3,title:"方案二 镜像站",slug:"方案二-镜像站",normalizedTitle:"方案二 镜像站",charIndex:1407},{level:3,title:"方案三 离线镜像",slug:"方案三-离线镜像",normalizedTitle:"方案三 离线镜像",charIndex:2204},{level:3,title:"方案四 使用一键脚本",slug:"方案四-使用一键脚本",normalizedTitle:"方案四 使用一键脚本",charIndex:2294},{level:3,title:"方案五 使用Cloudflare worker 自建镜像加速",slug:"方案五-使用cloudflare-worker-自建镜像加速",normalizedTitle:"方案五 使用cloudflare worker 自建镜像加速",charIndex:2383},{level:2,title:"3. 去哪里找镜像",slug:"_3-去哪里找镜像",normalizedTitle:"3. 去哪里找镜像",charIndex:2465}],lastUpdated:"2024年8月13日星期二晚上10点58分",lastUpdatedTimestamp:172356108e4,headersStr:"解决Docker国内网络问题 特点： 1. Docker安装 1.1 Linux 1.2 Windows 1.3 Mac 2. Pull镜像 方案一  转存到阿里云 方案二 镜像站 方案三 离线镜像 方案四 使用一键脚本 方案五 使用Cloudflare worker 自建镜像加速 3. 去哪里找镜像",content:'# Docker官方安装包\n\n\n# 解决Docker国内网络问题\n\n6月以来，大量Docker镜像网站停服，Docker无法下载安装\n本仓库致力于解决国内网络原因无法使用Docker的问题。\n\n\n\n# 特点：\n\n * 使用Github Action将官网的安装脚本/安装包定时下载到本项目Release，供国内使用\n   \n * 官方安装包，安全可靠\n   \n * 每天自动定时同步，保证最新\n   \n\n作者：技术爬爬虾\nB站，抖音，Youtube全网同名，转载请注明作者\n\n\n\n# 1. Docker安装\n\n\n# 1.1 Linux\n\n一键安装命令（每天自动从官网定时同步）\n\nsudo curl -fsSL https://github.com/tech-shrimp/docker_installer/releases/download/latest/linux.sh| bash -s docker --mirror Aliyun\n\n\n> 备用（如果Github访问不了，可以使用Gitee的链接）\n\nsudo curl -fsSL https://gitee.com/tech-shrimp/docker_installer/releases/download/latest/linux.sh| bash -s docker --mirror Aliyun\n\n\n启动docker\n\nsudo service docker start\n\n\n\n# 1.2 Windows\n\n任务栏搜索功能，启用"适用于Linux的Windows子系统" + "虚拟机平台"\n\n\n管理员权限打开命令提示符，安装wsl2\n\n\nwsl --set-default-version 2\nwsl --update --web-download\n\n\n等待wsl安装成功 下载Windows版本安装包，进入此项目的Release\nhttps://github.com/tech-shrimp/docker_installer/releases\n\n下载Windows版本安装包 双击安装即可\n\n> 可选: 如果想自己指定安装目录，可以使用命令行的方式 参数 --installation-dir=D:\\Docker可以指定安装位置\n\nstart /w "" "Docker Desktop Installer.exe" install --installation-dir=D:\\Docker\n\n\n\n# 1.3 Mac\n\n进入此项目的Release，下载Mac系统的安装包\nhttps://github.com/tech-shrimp/docker_installer/releases 注意区分CPU架构类型 Intel芯片选择x86_64, 苹果芯片选择arm64\n下载好双击安装即可\n\n\n# 2. Pull镜像\n\n\n# 方案一 转存到阿里云\n\n使用Github Action将国外的Docker镜像转存到阿里云私有仓库，供国内服务器使用，免费易用\n\n * 支持DockerHub, gcr.io, k8s.io, ghcr.io等任意仓库\n * 支持最大40GB的大型镜像\n * 使用阿里云的官方线路，速度快\n\n项目地址: https://github.com/tech-shrimp/docker_image_pusher\n\n\n# 方案二 镜像站\n\n现在只有很少的国内镜像站存活\n不保证镜像齐全,且用且珍惜\n以下三个镜像站背靠较大的开源项目，优先推荐\n\n\n项目名称       项目地址                                              加速地址\n1Panel     https://github.com/1Panel-dev/1Panel/             https://docker.1panel.live\nDaocloud   https://github.com/DaoCloud/public-image-mirror   https://docker.m.daocloud.io\n耗子面板       https://github.com/TheTNB/panel                   https://hub.rat.dev\n毫秒镜像       https://1ms.run/                                  https://docker.1ms.run\n\n# Linux配置镜像站\n\nsudo vi /etc/docker/daemon.json\n\n\n输入下列内容，最后按ESC，输入 :wq! 保存退出。\n\n{\n    "registry-mirrors": [\n        "https://docker.m.daocloud.io",\n        "https://docker.1panel.live",\n        "https://hub.rat.dev"\n    ]\n}\n\n\n重启docker\n\nsudo service docker restart\n\n\n# Windows/Mac配置镜像站\n\nSetting->Docker Engine->添加上换源的那一段，如下图\n\n\n# 方案三 离线镜像\n\n使用Github Action下载docker离线镜像 https://github.com/wukongdaily/DockerTarBuilder\n\n\n# 方案四 使用一键脚本\n\nbash -c "$(curl -sSLf https://xy.ggbond.org/xy/docker_pull.sh)" -s 完整镜像名\n\n\n# 方案五 使用Cloudflare worker 自建镜像加速\n\nhttps://github.com/cmliu/CF-Workers-docker.io\n\n\n# 3. 去哪里找镜像\n\nhttps://docker.fxxk.dedyn.io/',normalizedContent:'# docker官方安装包\n\n\n# 解决docker国内网络问题\n\n6月以来，大量docker镜像网站停服，docker无法下载安装\n本仓库致力于解决国内网络原因无法使用docker的问题。\n\n\n\n# 特点：\n\n * 使用github action将官网的安装脚本/安装包定时下载到本项目release，供国内使用\n   \n * 官方安装包，安全可靠\n   \n * 每天自动定时同步，保证最新\n   \n\n作者：技术爬爬虾\nb站，抖音，youtube全网同名，转载请注明作者\n\n\n\n# 1. docker安装\n\n\n# 1.1 linux\n\n一键安装命令（每天自动从官网定时同步）\n\nsudo curl -fssl https://github.com/tech-shrimp/docker_installer/releases/download/latest/linux.sh| bash -s docker --mirror aliyun\n\n\n> 备用（如果github访问不了，可以使用gitee的链接）\n\nsudo curl -fssl https://gitee.com/tech-shrimp/docker_installer/releases/download/latest/linux.sh| bash -s docker --mirror aliyun\n\n\n启动docker\n\nsudo service docker start\n\n\n\n# 1.2 windows\n\n任务栏搜索功能，启用"适用于linux的windows子系统" + "虚拟机平台"\n\n\n管理员权限打开命令提示符，安装wsl2\n\n\nwsl --set-default-version 2\nwsl --update --web-download\n\n\n等待wsl安装成功 下载windows版本安装包，进入此项目的release\nhttps://github.com/tech-shrimp/docker_installer/releases\n\n下载windows版本安装包 双击安装即可\n\n> 可选: 如果想自己指定安装目录，可以使用命令行的方式 参数 --installation-dir=d:\\docker可以指定安装位置\n\nstart /w "" "docker desktop installer.exe" install --installation-dir=d:\\docker\n\n\n\n# 1.3 mac\n\n进入此项目的release，下载mac系统的安装包\nhttps://github.com/tech-shrimp/docker_installer/releases 注意区分cpu架构类型 intel芯片选择x86_64, 苹果芯片选择arm64\n下载好双击安装即可\n\n\n# 2. pull镜像\n\n\n# 方案一 转存到阿里云\n\n使用github action将国外的docker镜像转存到阿里云私有仓库，供国内服务器使用，免费易用\n\n * 支持dockerhub, gcr.io, k8s.io, ghcr.io等任意仓库\n * 支持最大40gb的大型镜像\n * 使用阿里云的官方线路，速度快\n\n项目地址: https://github.com/tech-shrimp/docker_image_pusher\n\n\n# 方案二 镜像站\n\n现在只有很少的国内镜像站存活\n不保证镜像齐全,且用且珍惜\n以下三个镜像站背靠较大的开源项目，优先推荐\n\n\n项目名称       项目地址                                              加速地址\n1panel     https://github.com/1panel-dev/1panel/             https://docker.1panel.live\ndaocloud   https://github.com/daocloud/public-image-mirror   https://docker.m.daocloud.io\n耗子面板       https://github.com/thetnb/panel                   https://hub.rat.dev\n毫秒镜像       https://1ms.run/                                  https://docker.1ms.run\n\n# linux配置镜像站\n\nsudo vi /etc/docker/daemon.json\n\n\n输入下列内容，最后按esc，输入 :wq! 保存退出。\n\n{\n    "registry-mirrors": [\n        "https://docker.m.daocloud.io",\n        "https://docker.1panel.live",\n        "https://hub.rat.dev"\n    ]\n}\n\n\n重启docker\n\nsudo service docker restart\n\n\n# windows/mac配置镜像站\n\nsetting->docker engine->添加上换源的那一段，如下图\n\n\n# 方案三 离线镜像\n\n使用github action下载docker离线镜像 https://github.com/wukongdaily/dockertarbuilder\n\n\n# 方案四 使用一键脚本\n\nbash -c "$(curl -sslf https://xy.ggbond.org/xy/docker_pull.sh)" -s 完整镜像名\n\n\n# 方案五 使用cloudflare worker 自建镜像加速\n\nhttps://github.com/cmliu/cf-workers-docker.io\n\n\n# 3. 去哪里找镜像\n\nhttps://docker.fxxk.dedyn.io/',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723018985e3},{title:"Axure安装和续期使用",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/axure/",relativePath:"小工具/axure/readme.md",key:"v-f27a6fa4",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/axure/",lastUpdated:"2024年8月8日星期四上午9点49分",lastUpdatedTimestamp:1723081773e3,headersStr:null,content:"# Axure安装和续期使用\n\n首先去官网下载最新的axure，你没听错，就是最新的。\n\n下载网址：Axure RP - UX Prototypes, Specifications, and Diagrams in One Tool\n\n下载完后解压安装到本地，并注册属于你自己的账户，开始试用。可惜的是只有30天的试用日期。\n\n\n\n本次永久使用axure的方法就是修改axure的启动时间，以达到永久试用的效果。\n\n接下来介绍一款软件：RunAsDate\n\n官网：RunAsDate - Run a program with the specified date/time (nirsoft.net)\n\n选择适合你电脑的版本进行下载：\n\n\n打开你下载的压缩包，双击RunAsDate.exe：\n\n\n按图示设置相关参数（可自定义），然后点击新建快捷方式，我的命名跟原来的快捷方式命名一致：\n\n\n这下当你打开新的快捷方式（并且和原来的一模一样，可以选择删掉旧的），神奇的事情发生了，咱们还有两万多天的试用期：\n\n\n\n也就是说，永久使用axure成功了！\n\nps：以上方法仅供个人测试，还请低调试用，商业使用还请寻找官方渠道获得授权。若试用不成功请自行解决或购买授权，本人不会提供任何技术解答。\n\n本文转自 https://blog.csdn.net/m0_63230155/article/details/132581240，如有侵权，请联系删除。",normalizedContent:"# axure安装和续期使用\n\n首先去官网下载最新的axure，你没听错，就是最新的。\n\n下载网址：axure rp - ux prototypes, specifications, and diagrams in one tool\n\n下载完后解压安装到本地，并注册属于你自己的账户，开始试用。可惜的是只有30天的试用日期。\n\n\n\n本次永久使用axure的方法就是修改axure的启动时间，以达到永久试用的效果。\n\n接下来介绍一款软件：runasdate\n\n官网：runasdate - run a program with the specified date/time (nirsoft.net)\n\n选择适合你电脑的版本进行下载：\n\n\n打开你下载的压缩包，双击runasdate.exe：\n\n\n按图示设置相关参数（可自定义），然后点击新建快捷方式，我的命名跟原来的快捷方式命名一致：\n\n\n这下当你打开新的快捷方式（并且和原来的一模一样，可以选择删掉旧的），神奇的事情发生了，咱们还有两万多天的试用期：\n\n\n\n也就是说，永久使用axure成功了！\n\nps：以上方法仅供个人测试，还请低调试用，商业使用还请寻找官方渠道获得授权。若试用不成功请自行解决或购买授权，本人不会提供任何技术解答。\n\n本文转自 https://blog.csdn.net/m0_63230155/article/details/132581240，如有侵权，请联系删除。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723081773e3},{title:"简介",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/",relativePath:"小工具/markdown/readme.md",key:"v-7d6049e6",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markdown/",lastUpdated:"2024年8月12日星期一早上8点55分",lastUpdatedTimestamp:1723424126e3,headersStr:null,content:"# 简介\n\n详情：https://markdown.com.cn/",normalizedContent:"# 简介\n\n详情：https://markdown.com.cn/",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723424126e3},{title:"光标跟随效果--前端实现",frontmatter:{},regularPath:"/zs-web/project/html/%E5%85%89%E6%A0%87%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C--%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0.html",relativePath:"zs-web/project/html/光标跟随效果--前端实现.md",key:"v-21143feb",path:"/zs-web/project/html/%E5%85%89%E6%A0%87%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C--%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0.html",lastUpdated:"2024年1月23日星期二晚上7点53分",lastUpdatedTimestamp:1706010801e3,headersStr:null,content:"# 光标跟随效果--前端实现\n\n\n\n<body>\n  <div class=\"text-container\">\n    <div class=\"text\"></div>\n    <div class=\"cursor\"></div>\n  </div>\n  <script type=\"text/javascript\" src=\"./index.js\"><\/script>\n</body>\n\n\n> 光标绘制\n\n.cursor {\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(0px,0px);\n  width: 10px;\n  height: 10px;\n  background-color: black;\n  border-radius: 50%;\n  animation: blinking 1s infinite;\n}\n@keyframes blinking {\n  0% { opacity: 1; }\n  50% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n\n> 文本容器绘制\n\n.text-container {\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  min-height: 100px;\n}\n\n\n> 思路：\n> \n>  * 找到最后一个文本节点\n>  * js无法添加伪元素 在文本节点最后添加文字，获取文字在容器中的位置\n>  * 根据文字位置设置光标位置\n>  * 删除文字\n\nconst textContainer = document.querySelector('.text-container');\nconst textElem = document.querySelector('.text');\nconst cursor = document.querySelector('.cursor');\n\n\n> 解析截取的内容，更新光标位置\n\nfor (let i = 0; i < content.length; i++) {\n    //截取字符内容\n    let text = content.slice(0, i);\n    console.log(text,'==========');\n    //转换接收的内容\n    let result = transfer(text);\n    //将转换结果显示\n    textElem.innerHTML = result;\n    //更新光标位置\n    updateCursor();\n    //添加延迟\n    await delay(3);\n}\n\n\n> 延迟函数\n\nfunction delay(duration) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve();\n        }, duration);\n    });\n}\n\n\n> 格式显示核心方法：transfer将接收的内容展示为HTML格式内容\n> \n> 这个函数很难写，示例代码有很多bug\n\nfunction transfer(text) {\n    // 去除多余的空格和换行符\n    text = text.trim();\n\n    // 段落格式化\n    const paragraphs = text.split('\\n\\n');\n    const formattedText = paragraphs.map(paragraph => {\n        // 去除段落中的多余空格和换行符\n        paragraph = paragraph.trim();\n\n        // 提取代码段\n        const codeBlockRegex = /```[\\s\\S]+?```/g;\n        const codeBlocks = paragraph.match(codeBlockRegex);\n\n        if (codeBlocks) {\n            // 处理代码段\n            const codeBlocksWithHighlighting = codeBlocks.map(codeBlock => {\n                // 去除代码段的语法高亮标签（如果有的话）\n                const languageRegex = /```(\\w+)/;\n                const language = codeBlock.match(languageRegex)[1];\n                const code = codeBlock.replace(languageRegex, '').replace(/```/g, '');\n\n                // 使用highlight.js库进行语法高亮处理（需要引入该库）\n                const highlightedCode = hljs.highlight(language, code).value;\n                return `<pre><code class=\"language-${language}\">${highlightedCode}</code></pre>`;\n\n            });\n\n            // 将处理后的代码段插入段落中\n            paragraph = paragraph.replace(codeBlockRegex, codeBlocksWithHighlighting.join(''));\n        }\n\n        // 添加段落标签\n        return `<p>${paragraph}</p>`;\n    }).join('');\n\n    return formattedText;\n}\n\n\n> 改变光标位置：\n> \n> getLastTextNode核心方法：获取最后一个文本节点\n> \n> 在文本节点最后追加一个文本，创建选区对象，选中 临时文本对象\n> \n> 选区对象--\x3e获取文本对象浏览器视口坐标\n> \n> 移动光标元素到指定坐标，删除临时文本节点\n\nfunction getLastTextNode(node) {\n    //如果\n    if(node.nodeType === Node.TEXT_NODE) {\n        return node;\n    }\n    //不是文本节点，获取所有子节点，从最后一个节点循环\n    let children = node.childNodes;\n    for (let i = children.length - 1; i >= 0; i--) {\n        let result = getLastTextNode(children[i]);\n        if (result) {\n            return result;\n        }\n    }\n    return null;\n}\n\n\nfunction updateCursor() {\n    //找到最后一个文本节点\n    const lastTextNode = getLastTextNode(textElem);\n    //加文字\n    const tempText = document.createTextNode('*');\n\n    if(lastTextNode) {\n        //找到它的父节点\n        //lastTextNode.parentNode.insertBefore(tempText,lastTextNode.nextSibling );\n        lastTextNode.parentNode.appendChild(tempText);\n    } else {\n        textElem.appendChild(tempText);\n    }\n    //根据文字位置设置光标位置\n    //tempText.getBoundingClientRect(); 节点没有该api\n    const range = document.createRange();//表示选中文字的范围\n    range.setStart(tempText,0);\n    range.setEnd(tempText,0);\n    const rect = range.getBoundingClientRect();\n    // console.log(rect);//会打印文本的坐标，是相对于浏览器视口的\n    //光标位置，绝对定位，相对于父元素定位\n    //计算最后文字坐标在容器中的坐标\n    const textRect = textContainer.getBoundingClientRect();\n    const x = rect.left - textRect.left;\n    const y = rect.top - textRect.top;\n    // console.log(x,y,'========');\n    //设置光标元素位置\n    cursor.style.transform = `translate(${x}px, ${y}px)`;\n    // console.log(cursor,'=======');\n    console.log(`translate(${x}px, ${y}px)`);\n    //删除文字\n    tempText.remove();\n}\n",normalizedContent:"# 光标跟随效果--前端实现\n\n\n\n<body>\n  <div class=\"text-container\">\n    <div class=\"text\"></div>\n    <div class=\"cursor\"></div>\n  </div>\n  <script type=\"text/javascript\" src=\"./index.js\"><\/script>\n</body>\n\n\n> 光标绘制\n\n.cursor {\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(0px,0px);\n  width: 10px;\n  height: 10px;\n  background-color: black;\n  border-radius: 50%;\n  animation: blinking 1s infinite;\n}\n@keyframes blinking {\n  0% { opacity: 1; }\n  50% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n\n> 文本容器绘制\n\n.text-container {\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  min-height: 100px;\n}\n\n\n> 思路：\n> \n>  * 找到最后一个文本节点\n>  * js无法添加伪元素 在文本节点最后添加文字，获取文字在容器中的位置\n>  * 根据文字位置设置光标位置\n>  * 删除文字\n\nconst textcontainer = document.queryselector('.text-container');\nconst textelem = document.queryselector('.text');\nconst cursor = document.queryselector('.cursor');\n\n\n> 解析截取的内容，更新光标位置\n\nfor (let i = 0; i < content.length; i++) {\n    //截取字符内容\n    let text = content.slice(0, i);\n    console.log(text,'==========');\n    //转换接收的内容\n    let result = transfer(text);\n    //将转换结果显示\n    textelem.innerhtml = result;\n    //更新光标位置\n    updatecursor();\n    //添加延迟\n    await delay(3);\n}\n\n\n> 延迟函数\n\nfunction delay(duration) {\n    return new promise(resolve => {\n        settimeout(() => {\n            resolve();\n        }, duration);\n    });\n}\n\n\n> 格式显示核心方法：transfer将接收的内容展示为html格式内容\n> \n> 这个函数很难写，示例代码有很多bug\n\nfunction transfer(text) {\n    // 去除多余的空格和换行符\n    text = text.trim();\n\n    // 段落格式化\n    const paragraphs = text.split('\\n\\n');\n    const formattedtext = paragraphs.map(paragraph => {\n        // 去除段落中的多余空格和换行符\n        paragraph = paragraph.trim();\n\n        // 提取代码段\n        const codeblockregex = /```[\\s\\s]+?```/g;\n        const codeblocks = paragraph.match(codeblockregex);\n\n        if (codeblocks) {\n            // 处理代码段\n            const codeblockswithhighlighting = codeblocks.map(codeblock => {\n                // 去除代码段的语法高亮标签（如果有的话）\n                const languageregex = /```(\\w+)/;\n                const language = codeblock.match(languageregex)[1];\n                const code = codeblock.replace(languageregex, '').replace(/```/g, '');\n\n                // 使用highlight.js库进行语法高亮处理（需要引入该库）\n                const highlightedcode = hljs.highlight(language, code).value;\n                return `<pre><code class=\"language-${language}\">${highlightedcode}</code></pre>`;\n\n            });\n\n            // 将处理后的代码段插入段落中\n            paragraph = paragraph.replace(codeblockregex, codeblockswithhighlighting.join(''));\n        }\n\n        // 添加段落标签\n        return `<p>${paragraph}</p>`;\n    }).join('');\n\n    return formattedtext;\n}\n\n\n> 改变光标位置：\n> \n> getlasttextnode核心方法：获取最后一个文本节点\n> \n> 在文本节点最后追加一个文本，创建选区对象，选中 临时文本对象\n> \n> 选区对象--\x3e获取文本对象浏览器视口坐标\n> \n> 移动光标元素到指定坐标，删除临时文本节点\n\nfunction getlasttextnode(node) {\n    //如果\n    if(node.nodetype === node.text_node) {\n        return node;\n    }\n    //不是文本节点，获取所有子节点，从最后一个节点循环\n    let children = node.childnodes;\n    for (let i = children.length - 1; i >= 0; i--) {\n        let result = getlasttextnode(children[i]);\n        if (result) {\n            return result;\n        }\n    }\n    return null;\n}\n\n\nfunction updatecursor() {\n    //找到最后一个文本节点\n    const lasttextnode = getlasttextnode(textelem);\n    //加文字\n    const temptext = document.createtextnode('*');\n\n    if(lasttextnode) {\n        //找到它的父节点\n        //lasttextnode.parentnode.insertbefore(temptext,lasttextnode.nextsibling );\n        lasttextnode.parentnode.appendchild(temptext);\n    } else {\n        textelem.appendchild(temptext);\n    }\n    //根据文字位置设置光标位置\n    //temptext.getboundingclientrect(); 节点没有该api\n    const range = document.createrange();//表示选中文字的范围\n    range.setstart(temptext,0);\n    range.setend(temptext,0);\n    const rect = range.getboundingclientrect();\n    // console.log(rect);//会打印文本的坐标，是相对于浏览器视口的\n    //光标位置，绝对定位，相对于父元素定位\n    //计算最后文字坐标在容器中的坐标\n    const textrect = textcontainer.getboundingclientrect();\n    const x = rect.left - textrect.left;\n    const y = rect.top - textrect.top;\n    // console.log(x,y,'========');\n    //设置光标元素位置\n    cursor.style.transform = `translate(${x}px, ${y}px)`;\n    // console.log(cursor,'=======');\n    console.log(`translate(${x}px, ${y}px)`);\n    //删除文字\n    temptext.remove();\n}\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1706010801e3},{title:"Cygwin简单使用",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/cygwin/",relativePath:"小工具/cygwin/readme.md",key:"v-c282de34",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/cygwin/",headers:[{level:2,title:"cygwin下载",slug:"cygwin下载",normalizedTitle:"cygwin下载",charIndex:52},{level:2,title:"安装expect",slug:"安装expect",normalizedTitle:"安装expect",charIndex:104},{level:2,title:"idea配置终端",slug:"idea配置终端",normalizedTitle:"idea配置终端",charIndex:119}],lastUpdated:"2024年8月8日星期四上午9点49分",lastUpdatedTimestamp:1723081773e3,headersStr:"cygwin下载 安装expect idea配置终端",content:'# Cygwin简单使用\n\n使用目的：为了在windows中使用expect指令的一种方式之一\n\n\n# cygwin下载\n\nhttps://www.cygwin.com/install.html\n\n\n\n\n# 安装expect\n\n\n\n\n# idea配置终端\n\n设置位置 File->Setting->Tools->Terminal->Shell path\n\n设置位置 File->Setting->Tools->Terminal->Shell path\n\nCygwin\n\n"C:\\cygwin64\\bin\\sh" -lic "source ~/.bash_profile; cd ${OLDPWD-.}; bash"\n\n\nLinux子系统\n\n"C:\\Windows\\System32\\wsl.exe"\n\n\n完整配置\n\n"C:\\cygwin64\\bin\\sh" -lic "source ~/.bash_profile; cd ${OLDPWD-.}; bash" "C:\\Windows\\System32\\wsl.exe"\n\n\n\n\n效果\n\n',normalizedContent:'# cygwin简单使用\n\n使用目的：为了在windows中使用expect指令的一种方式之一\n\n\n# cygwin下载\n\nhttps://www.cygwin.com/install.html\n\n\n\n\n# 安装expect\n\n\n\n\n# idea配置终端\n\n设置位置 file->setting->tools->terminal->shell path\n\n设置位置 file->setting->tools->terminal->shell path\n\ncygwin\n\n"c:\\cygwin64\\bin\\sh" -lic "source ~/.bash_profile; cd ${oldpwd-.}; bash"\n\n\nlinux子系统\n\n"c:\\windows\\system32\\wsl.exe"\n\n\n完整配置\n\n"c:\\cygwin64\\bin\\sh" -lic "source ~/.bash_profile; cd ${oldpwd-.}; bash" "c:\\windows\\system32\\wsl.exe"\n\n\n\n\n效果\n\n',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723081773e3},{title:"🎉 Html2md 🥳",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/html2md/",relativePath:"小工具/html2md/readme.md",key:"v-b8bdb958",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/html2md/",headers:[{level:2,title:"教程，如下图",slug:"教程-如下图",normalizedTitle:"教程，如下图",charIndex:256},{level:2,title:"技术栈",slug:"技术栈",normalizedTitle:"技术栈",charIndex:269},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:480},{level:3,title:"第一步：下载",slug:"第一步-下载",normalizedTitle:"第一步：下载",charIndex:663},{level:3,title:"第二步：安装",slug:"第二步-安装",normalizedTitle:"第二步：安装",charIndex:740},{level:3,title:"第三步：启动",slug:"第三步-启动",normalizedTitle:"第三步：启动",charIndex:781},{level:2,title:"使用备注",slug:"使用备注",normalizedTitle:"使用备注",charIndex:818}],lastUpdated:"2024年8月8日星期四上午10点43分",lastUpdatedTimestamp:1723084989e3,headersStr:"教程，如下图 技术栈 使用 第一步：下载 第二步：安装 第三步：启动 使用备注",content:"# 🎉 Html2md 🥳\n\n在线网址：https://www.helloworld.net/html2md\n\ngithub仓库地址：https://github.com/helloworld-Co/html2md\n\nhtml2md 是由 helloworld开发者社区 开源的一款轻量级功能强大的html转md工具💪🏻，纯前端开发，不需要后端接口（ Node是我们前端的😗！），支持多平台，一键将文章链接转换为md，方便大家收藏和保存文章🤪。请勿做其它用途\n\nhtml2md地址 👈🏻\n\n\n# 教程，如下图\n\n\n\n\n# 技术栈\n\n * vue 前端三剑客之一，主张最少，具有高度灵活性的渐进式框架\n * nuxt 通过利用 Vue.js 和 Node.js最佳实践来构建高性能应用程序\n * express 基于 Node.js 平台，快速、开放、极简的 Web 开发框架\n * element-ui 宇宙第一 Vue 第三方组件库，有不服？\n * js-dom 一款可在 Node 环境下模拟浏览器的 API 的库\n * turndown 使用 JavaScript 将 HTML 转换为 Markdown\n * axios 易用、简洁且高效的 http库，支持浏览器和 Node 环境。\n * mavon-editor 一款基于 Vue 的 markdown 编辑器，支持所见即所得\n * sass 强大的 Css 预处理器之一\n\n\n# 使用\n\n> 注意：node 版本要求： v14.18.0\n\n\n# 第一步：下载\n\ngit clone git@github.com:helloworld-Co/html2md.git\ncd ./html2md\n\n\n\n# 第二步：安装\n\nnpm install\n或者\nyarn install\n\n\n\n# 第三步：启动\n\nnpm run dev\n或者\nyarn dev\n\n\n\n# 使用备注\n\n * 防盗链：由于各大网站的图片基本都会有防盗链机制，转换出来的 md 里的图片会无法正常预览，这个不慌 😳，把 md 内容复制到 helloworld开发者社区 的写作文本框中就能正常显示了👌🏻。\n * 微信文章：微信文章内容格式差异性比较大，不能保证 💯% 好使，如果一篇不能解决，那就换下一篇吧😏。",normalizedContent:"# 🎉 html2md 🥳\n\n在线网址：https://www.helloworld.net/html2md\n\ngithub仓库地址：https://github.com/helloworld-co/html2md\n\nhtml2md 是由 helloworld开发者社区 开源的一款轻量级功能强大的html转md工具💪🏻，纯前端开发，不需要后端接口（ node是我们前端的😗！），支持多平台，一键将文章链接转换为md，方便大家收藏和保存文章🤪。请勿做其它用途\n\nhtml2md地址 👈🏻\n\n\n# 教程，如下图\n\n\n\n\n# 技术栈\n\n * vue 前端三剑客之一，主张最少，具有高度灵活性的渐进式框架\n * nuxt 通过利用 vue.js 和 node.js最佳实践来构建高性能应用程序\n * express 基于 node.js 平台，快速、开放、极简的 web 开发框架\n * element-ui 宇宙第一 vue 第三方组件库，有不服？\n * js-dom 一款可在 node 环境下模拟浏览器的 api 的库\n * turndown 使用 javascript 将 html 转换为 markdown\n * axios 易用、简洁且高效的 http库，支持浏览器和 node 环境。\n * mavon-editor 一款基于 vue 的 markdown 编辑器，支持所见即所得\n * sass 强大的 css 预处理器之一\n\n\n# 使用\n\n> 注意：node 版本要求： v14.18.0\n\n\n# 第一步：下载\n\ngit clone git@github.com:helloworld-co/html2md.git\ncd ./html2md\n\n\n\n# 第二步：安装\n\nnpm install\n或者\nyarn install\n\n\n\n# 第三步：启动\n\nnpm run dev\n或者\nyarn dev\n\n\n\n# 使用备注\n\n * 防盗链：由于各大网站的图片基本都会有防盗链机制，转换出来的 md 里的图片会无法正常预览，这个不慌 😳，把 md 内容复制到 helloworld开发者社区 的写作文本框中就能正常显示了👌🏻。\n * 微信文章：微信文章内容格式差异性比较大，不能保证 💯% 好使，如果一篇不能解决，那就换下一篇吧😏。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723084989e3},{title:"CodeAi",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/codeAi/",relativePath:"小工具/codeAi/readme.md",key:"v-6b53d6b4",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/codeAi/",headers:[{level:2,title:"1 Amazon CodeWhisperer",slug:"_1-amazon-codewhisperer",normalizedTitle:"1 amazon codewhisperer",charIndex:221},{level:2,title:"2 Codeium",slug:"_2-codeium",normalizedTitle:"2 codeium",charIndex:375},{level:2,title:"3 CodeGeeX",slug:"_3-codegeex",normalizedTitle:"3 codegeex",charIndex:567}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"1 Amazon CodeWhisperer 2 Codeium 3 CodeGeeX",content:"# CodeAi\n\nGithub Copilot，作为Github研发的一款先进的编程辅助插件，它可以在我们日常编写代码的过程中，根据代码的上下文内容、注释等信息自动推断生成高质量的代码，很大程度上提升我们的代码编写效率。\n\n而自从去年8月Github Copilot公测结束开始收费后，很多同类型且面向个人免费的智能辅助插件就如雨后春笋般纷纷冒了出来，今天的文章中我就将为大家介绍其中比较主流的3款插件，从而丰富大家的可选择空间：\n\n\n# 1 Amazon CodeWhisperer\n\nAmazon CodeWhisperer是由亚马逊研发的一款免费的AI代码生成工具，面向个人用户提供无限制的代码智能生成服务：\n\n\n\n在vscode中我们可以通过安装插件AWS Toolkit，来使用集成在其内部的CodeWhisperer功能：\n\n\n\n\n# 2 Codeium\n\nCodeium是由初创公司研发的一款对标Github Copilot的代码智能生成插件，支持主流的各种编程语言，同样面向个人用户免费使用：\n\n\n\n我从其推出至今就一直在使用，使用体验非常接近Github Copilot，生成的代码质量很不错，并且还带有类似Cursor的代码对话解释功能，可以就你关心的代码片段进行提问和智能重构，功能相当丰富：\n\n\n\n\n\n\n# 3 CodeGeeX\n\nCodeGeeX跟前面两款插件相比要冷门一些，不过特别地是其是开源的，项目地址：https://github.com/THUDM/CodeGeeX：\n\n\n\n除了常规的根据上下文和提示生成代码的功能以外，CodeGeeX还特别地具有代码跨语言翻译功能，譬如下面的例子：\n\n\n\n本文转自 https://www.cnblogs.com/feffery/p/17428388.html，如有侵权，请联系删除。",normalizedContent:"# codeai\n\ngithub copilot，作为github研发的一款先进的编程辅助插件，它可以在我们日常编写代码的过程中，根据代码的上下文内容、注释等信息自动推断生成高质量的代码，很大程度上提升我们的代码编写效率。\n\n而自从去年8月github copilot公测结束开始收费后，很多同类型且面向个人免费的智能辅助插件就如雨后春笋般纷纷冒了出来，今天的文章中我就将为大家介绍其中比较主流的3款插件，从而丰富大家的可选择空间：\n\n\n# 1 amazon codewhisperer\n\namazon codewhisperer是由亚马逊研发的一款免费的ai代码生成工具，面向个人用户提供无限制的代码智能生成服务：\n\n\n\n在vscode中我们可以通过安装插件aws toolkit，来使用集成在其内部的codewhisperer功能：\n\n\n\n\n# 2 codeium\n\ncodeium是由初创公司研发的一款对标github copilot的代码智能生成插件，支持主流的各种编程语言，同样面向个人用户免费使用：\n\n\n\n我从其推出至今就一直在使用，使用体验非常接近github copilot，生成的代码质量很不错，并且还带有类似cursor的代码对话解释功能，可以就你关心的代码片段进行提问和智能重构，功能相当丰富：\n\n\n\n\n\n\n# 3 codegeex\n\ncodegeex跟前面两款插件相比要冷门一些，不过特别地是其是开源的，项目地址：https://github.com/thudm/codegeex：\n\n\n\n除了常规的根据上下文和提示生成代码的功能以外，codegeex还特别地具有代码跨语言翻译功能，譬如下面的例子：\n\n\n\n本文转自 https://www.cnblogs.com/feffery/p/17428388.html，如有侵权，请联系删除。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723441692e3},{title:"markmap简介",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markmap/",relativePath:"小工具/markmap/readme.md",key:"v-46ed7c1c",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/markmap/",lastUpdated:"2024年8月8日星期四上午9点49分",lastUpdatedTimestamp:1723081773e3,headersStr:null,content:"# markmap简介\n\n官网地址：https://markmap.js.org/\n\n\n\n视频分享：程序员郑清",normalizedContent:"# markmap简介\n\n官网地址：https://markmap.js.org/\n\n\n\n视频分享：程序员郑清",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723081773e3},{title:"图形绘制",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6.html",relativePath:"小工具/ppt/图形绘制.md",key:"v-070625d5",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6.html",headers:[{level:2,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:11},{level:2,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:23}],lastUpdated:"2024年8月14日星期三下午2点28分",lastUpdatedTimestamp:1723616886e3,headersStr:"方式一 方式二",content:"# 图形绘制\n\n\n# 方式一\n\n\n\n\n\n\n# 方式二\n\n",normalizedContent:"# 图形绘制\n\n\n# 方式一\n\n\n\n\n\n\n# 方式二\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723616886e3},{title:"图形填充",frontmatter:{},regularPath:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E5%A1%AB%E5%85%85.html",relativePath:"小工具/ppt/图形填充.md",key:"v-29dea1fd",path:"/%E5%B0%8F%E5%B7%A5%E5%85%B7/ppt/%E5%9B%BE%E5%BD%A2%E5%A1%AB%E5%85%85.html",headers:[{level:2,title:"渐变填充",slug:"渐变填充",normalizedTitle:"渐变填充",charIndex:11},{level:2,title:"图片填充",slug:"图片填充",normalizedTitle:"图片填充",charIndex:22}],lastUpdated:"2024年8月14日星期三下午2点28分",lastUpdatedTimestamp:1723616886e3,headersStr:"渐变填充 图片填充",content:"# 图形填充\n\n\n# 渐变填充\n\n\n\n\n# 图片填充\n\n",normalizedContent:"# 图形填充\n\n\n# 渐变填充\n\n\n\n\n# 图片填充\n\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723616886e3},{title:"缩放",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E9%A1%B5%E9%9D%A2%E7%BC%A9%E6%94%BE.html",relativePath:"小需求/iframe/iframe-页面缩放.md",key:"v-aeb113a2",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E9%A1%B5%E9%9D%A2%E7%BC%A9%E6%94%BE.html",lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:null,content:"# 缩放\n\n在屏幕尺寸更大的A系统中使用iframe嵌套B系统，需要等比例放大B系统页面填充iframe（缩小同理）。\n\niframe{\n    transform: scale(2, 2);\n    width: 50%;\n    height: 50%;\n    transform-origin: left top;\n}\n\n\n其中scale(X,Y)的值与width、height这样确定：width = 100 / X，height = 100 / Y。",normalizedContent:"# 缩放\n\n在屏幕尺寸更大的a系统中使用iframe嵌套b系统，需要等比例放大b系统页面填充iframe（缩小同理）。\n\niframe{\n    transform: scale(2, 2);\n    width: 50%;\n    height: 50%;\n    transform-origin: left top;\n}\n\n\n其中scale(x,y)的值与width、height这样确定：width = 100 / x，height = 100 / y。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"撑开高度",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/css/%E6%92%91%E5%BC%80%E9%AB%98%E5%BA%A6.html",relativePath:"小需求/css/撑开高度.md",key:"v-1b9042f4",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/css/%E6%92%91%E5%BC%80%E9%AB%98%E5%BA%A6.html",headers:[{level:2,title:"calc",slug:"calc",normalizedTitle:"calc",charIndex:552},{level:2,title:"flex",slug:"flex",normalizedTitle:"flex",charIndex:720},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:1664}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"calc flex 其他",content:'# 撑开高度\n\n我们画页面的时候有可能遇到一种情况，一上一下两个元素，其中一个固定高度，然后我们希望另一个占据纵向所有剩余的高度。因为高度默认是以实际容器内内容高度为准的，也就是说默认情况下我们的元素不会在内容不足的情况下自动撑开高度占满空间\n\n本文中元素位置如下，不做特殊说明的话本文的html结构不会有变化\n\n<div class="outside-box">\n\t<div class="top-box">这里是一个固定高度的组件, height: 100px;</div>\n\t<div class="bottom-box">这是不定高度的组件</div>\n</div>\n\n\n当前的CSS如下\n\n.outside-box{\n\twidth: 200px;\n\theight: 100vh;\n\tbackground-color: #eee;\n}\n.top-box{\n\theight: 100px;\n\tbackground-color: #ddd;\n}\n.bottom-box{\n\tbackground-color: #ccc;\n}\n\n\n当前的页面效果如下\n\n\n\n【背景颜色是特地加的方便大家看清】\n\n现在我们需要将那个不定高度的组件的高度撑开，占满纵向剩余的空间，要怎么做呢？ 我这里提供两种做法\n\n\n# calc\n\n我们可以用calc实时计算不定高度组件的高度\n\n.bottom-box{\n  height: calc(100% - 100px);\n  background-color: #ccc;\n}\n\n\n效果如下\n\n\n\n可以看到下面的不定高度组件的高度撑开占满了剩余的空间\n\n但是calc是实时计算，性能不是特别好，大家慎用\n\n\n# flex\n\n我们也可以使用flex来实现\n\n父组件要设置为flex，且设为纵向排布，然后子组件用flex-grow: 1占据所有剩余空间\n\n.outside-box{\n  width: 200px;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #eee;\n}\n.bottom-box{\n  flex-grow: 1;\n  background-color: #ccc;\n}\n\n\n\n效果如下\n\n\n\n可以看到，不定高度的组件也是撑开高度占据了剩余空间\n\n应该说，flex-grow这个属性，能够决定剩余空间的分配，他会将所有剩余空间在所有有这个属性的元素之间进行分配，分配的比例就是各组件该属性值占所有组件该属性值总和的比例\n\n比如我再加第三个组件在下面，并设置flex-grow为2，这时就会有两个元素带有该属性，且属性值总和为3，则此时，中间的组件【flex-grow值为1】会占据三分之一的空间，下面的组件【flex-grow值为2】会占据三分之二的空间\n\n具体如下\n\n<div class="outside-box">\n\t<div class="top-box">这里是一个固定高度的组件, height: 100px;</div>\n\t<div class="bottom-box">这是不定高度的组件</div>\n\t<div class="box3">这是第三个组件</div>\n</div>\n<style>\n.outside-box{\n  width: 200px;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #eee;\n}\n.top-box{\n  height: 100px;\n  background-color: #ddd;\n}\n.bottom-box{\n  flex-grow: 1;\n  background-color: #ccc;\n}\n.box3{\n  flex-grow: 2;\n}\n</style>\n\n\n效果如下图\n\n\n\n\n# 其他\n\n我这个时候又想了，那我如果在第一个元素上面加flex-grow属性会怎么样\n\n于是我将第一个元素的flex-grow设为10\n\n亲测没有任何事情发生\n\n所以，直接写明的height属性会覆盖flex-grow属性的效果，当有height又有flex-grow时，flex-grow属性会直接失效，甚至不参与flex-grow属性值总数的统计\n\n而flex-grow属性的效果不会挤占已有明确高度/宽度设置的元素占据的空间\n\n最后贴上完整代码，大家有需要的话自己拿去试试\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n    <style>\n        *{\n            margin: 0px;\n            padding: 0px;\n        }\n        .outside-box{\n            width: 200px;\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n            flex-grow: 10;\n            background-color: #eee;\n        }\n        .top-box{\n            height: 100px;\n            background-color: #ddd;\n        }\n        .bottom-box{\n            flex-grow: 1;\n            background-color: #ccc;\n        }\n        .box3{\n            flex-grow: 2;\n        }\n    </style>\n</head>\n<body>\n    <div class="outside-box">\n        <div class="top-box">这里是一个固定高度的组件, height: 100px;</div>\n        <div class="bottom-box">这是不定高度的组件</div>\n        <div class="box3">这是第三个组件</div>\n    </div>\n</body>\n</html>\n\n\n本文转自 https://juejin.cn/post/6966205043091603463，如有侵权，请联系删除。',normalizedContent:'# 撑开高度\n\n我们画页面的时候有可能遇到一种情况，一上一下两个元素，其中一个固定高度，然后我们希望另一个占据纵向所有剩余的高度。因为高度默认是以实际容器内内容高度为准的，也就是说默认情况下我们的元素不会在内容不足的情况下自动撑开高度占满空间\n\n本文中元素位置如下，不做特殊说明的话本文的html结构不会有变化\n\n<div class="outside-box">\n\t<div class="top-box">这里是一个固定高度的组件, height: 100px;</div>\n\t<div class="bottom-box">这是不定高度的组件</div>\n</div>\n\n\n当前的css如下\n\n.outside-box{\n\twidth: 200px;\n\theight: 100vh;\n\tbackground-color: #eee;\n}\n.top-box{\n\theight: 100px;\n\tbackground-color: #ddd;\n}\n.bottom-box{\n\tbackground-color: #ccc;\n}\n\n\n当前的页面效果如下\n\n\n\n【背景颜色是特地加的方便大家看清】\n\n现在我们需要将那个不定高度的组件的高度撑开，占满纵向剩余的空间，要怎么做呢？ 我这里提供两种做法\n\n\n# calc\n\n我们可以用calc实时计算不定高度组件的高度\n\n.bottom-box{\n  height: calc(100% - 100px);\n  background-color: #ccc;\n}\n\n\n效果如下\n\n\n\n可以看到下面的不定高度组件的高度撑开占满了剩余的空间\n\n但是calc是实时计算，性能不是特别好，大家慎用\n\n\n# flex\n\n我们也可以使用flex来实现\n\n父组件要设置为flex，且设为纵向排布，然后子组件用flex-grow: 1占据所有剩余空间\n\n.outside-box{\n  width: 200px;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #eee;\n}\n.bottom-box{\n  flex-grow: 1;\n  background-color: #ccc;\n}\n\n\n\n效果如下\n\n\n\n可以看到，不定高度的组件也是撑开高度占据了剩余空间\n\n应该说，flex-grow这个属性，能够决定剩余空间的分配，他会将所有剩余空间在所有有这个属性的元素之间进行分配，分配的比例就是各组件该属性值占所有组件该属性值总和的比例\n\n比如我再加第三个组件在下面，并设置flex-grow为2，这时就会有两个元素带有该属性，且属性值总和为3，则此时，中间的组件【flex-grow值为1】会占据三分之一的空间，下面的组件【flex-grow值为2】会占据三分之二的空间\n\n具体如下\n\n<div class="outside-box">\n\t<div class="top-box">这里是一个固定高度的组件, height: 100px;</div>\n\t<div class="bottom-box">这是不定高度的组件</div>\n\t<div class="box3">这是第三个组件</div>\n</div>\n<style>\n.outside-box{\n  width: 200px;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #eee;\n}\n.top-box{\n  height: 100px;\n  background-color: #ddd;\n}\n.bottom-box{\n  flex-grow: 1;\n  background-color: #ccc;\n}\n.box3{\n  flex-grow: 2;\n}\n</style>\n\n\n效果如下图\n\n\n\n\n# 其他\n\n我这个时候又想了，那我如果在第一个元素上面加flex-grow属性会怎么样\n\n于是我将第一个元素的flex-grow设为10\n\n亲测没有任何事情发生\n\n所以，直接写明的height属性会覆盖flex-grow属性的效果，当有height又有flex-grow时，flex-grow属性会直接失效，甚至不参与flex-grow属性值总数的统计\n\n而flex-grow属性的效果不会挤占已有明确高度/宽度设置的元素占据的空间\n\n最后贴上完整代码，大家有需要的话自己拿去试试\n\n<!doctype html>\n<html lang="en">\n<head>\n    <meta charset="utf-8">\n    <meta http-equiv="x-ua-compatible" content="ie=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>document</title>\n    <style>\n        *{\n            margin: 0px;\n            padding: 0px;\n        }\n        .outside-box{\n            width: 200px;\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n            flex-grow: 10;\n            background-color: #eee;\n        }\n        .top-box{\n            height: 100px;\n            background-color: #ddd;\n        }\n        .bottom-box{\n            flex-grow: 1;\n            background-color: #ccc;\n        }\n        .box3{\n            flex-grow: 2;\n        }\n    </style>\n</head>\n<body>\n    <div class="outside-box">\n        <div class="top-box">这里是一个固定高度的组件, height: 100px;</div>\n        <div class="bottom-box">这是不定高度的组件</div>\n        <div class="box3">这是第三个组件</div>\n    </div>\n</body>\n</html>\n\n\n本文转自 https://juejin.cn/post/6966205043091603463，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"kkfileview",frontmatter:{},regularPath:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/",relativePath:"小框架/kkFileView/readme.md",key:"v-df51b6ae",path:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:17},{level:2,title:"使用docker方式部署",slug:"使用docker方式部署",normalizedTitle:"使用docker方式部署",charIndex:77}],lastUpdated:"2024年8月13日星期二晚上10点58分",lastUpdatedTimestamp:172356108e4,headersStr:"介绍 使用docker方式部署",content:"# kkfileview\n\n\n# 介绍\n\nhttps://kkfileview.keking.cn/zh-cn/docs/home.html\n\n\n\n\n# 使用docker方式部署\n\n# 拉取镜像\n\n# 网络环境方便访问docker中央仓库\ndocker pull keking/kkfileview:4.1.0\n\n# 网络环境不方便访问docker中央仓库\nwget https://kkfileview.keking.cn/kkFileView-4.1.0-docker.tar\ndocker load -i kkFileView-4.1.0-docker.tar\n\n\n# 运行\n\ndocker run -it -p 8012:8012 keking/kkfileview:4.1.0\n\n\n浏览器访问容器8012端口 http://127.0.0.1:8012 即可看到项目演示用首页",normalizedContent:"# kkfileview\n\n\n# 介绍\n\nhttps://kkfileview.keking.cn/zh-cn/docs/home.html\n\n\n\n\n# 使用docker方式部署\n\n# 拉取镜像\n\n# 网络环境方便访问docker中央仓库\ndocker pull keking/kkfileview:4.1.0\n\n# 网络环境不方便访问docker中央仓库\nwget https://kkfileview.keking.cn/kkfileview-4.1.0-docker.tar\ndocker load -i kkfileview-4.1.0-docker.tar\n\n\n# 运行\n\ndocker run -it -p 8012:8012 keking/kkfileview:4.1.0\n\n\n浏览器访问容器8012端口 http://127.0.0.1:8012 即可看到项目演示用首页",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:172356108e4},{title:"自适应高度",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6.html",relativePath:"小需求/iframe/iframe-自适应高度.md",key:"v-49136d1b",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/iframe/iframe-%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6.html",headers:[{level:3,title:"跨域问题",slug:"跨域问题",normalizedTitle:"跨域问题",charIndex:982}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"跨域问题",content:"# 自适应高度\n\n使用iframe嵌入页面很方便，但必须在父页面指定iframe的高度。如果iframe页面内容的高度超过了指定高度，会出现滚动条，很难看。\n\n如何让iframe自适应自身高度，让整个页面看起来像一个整体？\n\n在HTML5之前，有很多使用JavaScript的Hack技巧，代码量大，而且很难通用。随着现代浏览器引入了新的ResizeObserver API[1]，解决iframe高度问题就变得简单了。\n\n我们假设父页面是index.html，要嵌入到iframe的子页面是target.html，在父页面中，先向页面添加一个iframe：\n\nconst iframe1 = document.createElement('iframe');\niframe1.src = 'target.html';\niframe1.onload = autoResize;\ndocument.getElementById('sameDomain').appendChild(iframe1);\n\n\n当iframe载入完成后，触发onload事件，然后自动调用autoResize()函数：\n\nfunction autoResize(event) {\n    // 获取iframe元素:\n    const iframeEle = event.target;\n    // 创建一个ResizeObserver:\n    const resizeRo = new ResizeObserver((entries) => {\n        let entry = entries[0];\n        let height = entry.contentRect.height;\n        iframeEle.style.height = height + 'px';\n    });\n    // 开始监控iframe的body元素:\n    resizeRo.observe(iframeEle.contentWindow.document.body);\n}\n\n\n通过创建ResizeObserver，我们就可以在iframe的body元素大小更改时获得回调，在回调函数中对iframe设置一个新的高度，就完成了iframe的自适应高度。\n\n\n# 跨域问题\n\nResizeObserver很好地解决了iframe的监控，但是，当我们引入跨域的iframe时，上述代码就失效了，原因是浏览器阻止了跨域获取iframe的body元素。\n\n要解决跨域的iframe自适应高度问题，我们需要使用postMessage机制，让iframe页面向父页面主动报告自身高度。\n\n假定父页面仍然是index.html，要嵌入到iframe的子页面是http://xyz/cross.html，在父页面中，先向页面添加一个跨域的iframe：\n\nconst iframe2 = document.createElement('iframe');\niframe2.src = 'http://xyz/cross.html';\niframe2.onload = autoResize;\ndocument.getElementById('crossDomain').appendChild(iframe2);\n\n\n在cross.html页面中，如何获取自身高度？\n\n我们需要现代浏览器引入的一个新的MutationObserver API[2]，它允许监控任意DOM树的修改。\n\n在cross.html页面中，使用以下代码监控body元素的修改（包括子元素）：\n\n// 创建MutationObserver:\nconst domMo = new MutationObserver(() => {\n    // 获取body的高度:\n    let currentHeight = body.scrollHeight;\n    // 向父页面发消息:\n    parent.postMessage({\n        type: 'resize',\n        height: currentHeight\n    }, '*');\n});\n// 开始监控body元素的修改:\ndomMo.observe(body, {\n    attributes: true,\n    childList: true,\n    subtree: true\n});\n\n\n当iframe页面的body有变化时，回调函数通过postMessage向父页面发送消息，消息内容是自定义的。在父页面中，我们给window添加一个message事件监听器，即可收取来自iframe页面的消息，然后自动更新iframe高度：\n\nwindow.addEventListener('message', function (event) {\n    let eventData = event.data;\n    if (eventData && eventData.type === 'resize') {\n        iframeEle.style.height = eventData.height + 'px';\n    }\n}, false);\n\n\n使用现代浏览器提供的ResizeObserver和MutationObserver API，我们就能轻松实现iframe的自适应高度。\n\n点击查看演示页面：\n\nhttps://github.com/michaelliao/auto-resize-iframe\n\n\n\nhttps://liaoxuefeng.com/blogs/all/2024-02-25-auto-resize-iframe/index.html",normalizedContent:"# 自适应高度\n\n使用iframe嵌入页面很方便，但必须在父页面指定iframe的高度。如果iframe页面内容的高度超过了指定高度，会出现滚动条，很难看。\n\n如何让iframe自适应自身高度，让整个页面看起来像一个整体？\n\n在html5之前，有很多使用javascript的hack技巧，代码量大，而且很难通用。随着现代浏览器引入了新的resizeobserver api[1]，解决iframe高度问题就变得简单了。\n\n我们假设父页面是index.html，要嵌入到iframe的子页面是target.html，在父页面中，先向页面添加一个iframe：\n\nconst iframe1 = document.createelement('iframe');\niframe1.src = 'target.html';\niframe1.onload = autoresize;\ndocument.getelementbyid('samedomain').appendchild(iframe1);\n\n\n当iframe载入完成后，触发onload事件，然后自动调用autoresize()函数：\n\nfunction autoresize(event) {\n    // 获取iframe元素:\n    const iframeele = event.target;\n    // 创建一个resizeobserver:\n    const resizero = new resizeobserver((entries) => {\n        let entry = entries[0];\n        let height = entry.contentrect.height;\n        iframeele.style.height = height + 'px';\n    });\n    // 开始监控iframe的body元素:\n    resizero.observe(iframeele.contentwindow.document.body);\n}\n\n\n通过创建resizeobserver，我们就可以在iframe的body元素大小更改时获得回调，在回调函数中对iframe设置一个新的高度，就完成了iframe的自适应高度。\n\n\n# 跨域问题\n\nresizeobserver很好地解决了iframe的监控，但是，当我们引入跨域的iframe时，上述代码就失效了，原因是浏览器阻止了跨域获取iframe的body元素。\n\n要解决跨域的iframe自适应高度问题，我们需要使用postmessage机制，让iframe页面向父页面主动报告自身高度。\n\n假定父页面仍然是index.html，要嵌入到iframe的子页面是http://xyz/cross.html，在父页面中，先向页面添加一个跨域的iframe：\n\nconst iframe2 = document.createelement('iframe');\niframe2.src = 'http://xyz/cross.html';\niframe2.onload = autoresize;\ndocument.getelementbyid('crossdomain').appendchild(iframe2);\n\n\n在cross.html页面中，如何获取自身高度？\n\n我们需要现代浏览器引入的一个新的mutationobserver api[2]，它允许监控任意dom树的修改。\n\n在cross.html页面中，使用以下代码监控body元素的修改（包括子元素）：\n\n// 创建mutationobserver:\nconst dommo = new mutationobserver(() => {\n    // 获取body的高度:\n    let currentheight = body.scrollheight;\n    // 向父页面发消息:\n    parent.postmessage({\n        type: 'resize',\n        height: currentheight\n    }, '*');\n});\n// 开始监控body元素的修改:\ndommo.observe(body, {\n    attributes: true,\n    childlist: true,\n    subtree: true\n});\n\n\n当iframe页面的body有变化时，回调函数通过postmessage向父页面发送消息，消息内容是自定义的。在父页面中，我们给window添加一个message事件监听器，即可收取来自iframe页面的消息，然后自动更新iframe高度：\n\nwindow.addeventlistener('message', function (event) {\n    let eventdata = event.data;\n    if (eventdata && eventdata.type === 'resize') {\n        iframeele.style.height = eventdata.height + 'px';\n    }\n}, false);\n\n\n使用现代浏览器提供的resizeobserver和mutationobserver api，我们就能轻松实现iframe的自适应高度。\n\n点击查看演示页面：\n\nhttps://github.com/michaelliao/auto-resize-iframe\n\n\n\nhttps://liaoxuefeng.com/blogs/all/2024-02-25-auto-resize-iframe/index.html",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"CentOS7.9部署kkfileview经验帖",frontmatter:{},regularPath:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/centos%E9%83%A8%E7%BD%B2.html",relativePath:"小框架/kkFileView/centos部署.md",key:"v-54089e5c",path:"/%E5%B0%8F%E6%A1%86%E6%9E%B6/kkFileView/centos%E9%83%A8%E7%BD%B2.html",headers:[{level:2,title:"安装介质版本",slug:"安装介质版本",normalizedTitle:"安装介质版本",charIndex:31},{level:2,title:"安装Office插件",slug:"安装office插件",normalizedTitle:"安装office插件",charIndex:141},{level:2,title:"安装字体",slug:"安装字体",normalizedTitle:"安装字体",charIndex:349},{level:2,title:"安装KKFILEVIEW",slug:"安装kkfileview",normalizedTitle:"安装kkfileview",charIndex:594},{level:3,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:611},{level:3,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:642},{level:2,title:"附录",slug:"附录",normalizedTitle:"附录",charIndex:6776}],lastUpdated:"2024年8月13日星期二晚上10点58分",lastUpdatedTimestamp:172356108e4,headersStr:"安装介质版本 安装Office插件 安装字体 安装KKFILEVIEW 方式一 方式二 附录",content:"# CentOS7.9部署kkfileview经验帖\n\n\n# 安装介质版本\n\n文件预览：KKFile V4.3.0 官网\n\nOFFICE插件：libreoffice7.6\n\n操作系统：CentOS Linux release 7.9.2009 (Core)\n\n字体包：字体\n\n\n# 安装Office插件\n\n下载好Office插件后，开始安装：\n\n解压压缩文件：\n\ntar -zxvf LibreOffice_7.6.2_Linux_x86-64_rpm.tar.gz\n\n\n进入RPM文件目录：\n\ncd LibreOffice_7.6.2.1_Linux_x86-64_rpm/RPM\n\n\n执行安装指令：\n\nrpm -ivh *.rpm\n或者\nyum localinstall *.rpm\n\n\n\n# 安装字体\n\n大部分Linux系统上并没有预装中文字体或字体不全，需要把常用字体拷贝到Linux服务器上，具体操作如下：\n下载如下字体包 http://kkfileview.keking.cn/fonts.zip 文件解压完整拷贝到Linux下的 /usr/share/fonts目录。\n然后依次执行mkfontscale 、mkfontdir 、fc-cache使字体生效。\n\ncd /usr/share/fonts\nmkfontscale\nmkfontdir\nfc-cache\n\n\n\n# 安装KKFILEVIEW\n\n\n# 方式一\n\n俩种方式，一是氪金，99米加入星球获取。\n\n\n\n# 方式二\n\n另外一种是，下载源代码，本地编译。\nhttps://gitee.com/kekingcn/file-online-preview\n\n1. 从码云仓库拉取代码 #\ngit clone https://gitee.com/kekingcn/file-online-preview.git\n2. 使用maven编译打包 #\ncd file-online-preview\nmvn clean package -DskipTests\n3. 使用docker构建镜像 #\ndocker build -t keking/kkfileview:v4.0.0 .\n\n\n不管是哪种方式，将得到的gz压缩包上传到服务器安装目录。\n切换到工作目录：\n\ninstall.sh 安装内置的office插件，听说有问题，笔者是用的独立下载的，office插件目录是：/opt/libreoffice7.6。\n\nshowlog.sh 查看日志\nshutdown.sh 停止服务\nstartup.sh 启动服务\n由于后期测试发现性能比较慢，且没有做GC的处理。因此笔者做了优化，供参考：\n-Xms6144m -Xmx6144m 建议设置为服务器内存的四分之一为最佳。\n\n nohup java -Xms6144m -Xmx6144m -Xmn512m -Xloggc:../log/kkfile_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M  -Dfile.encoding=UTF-8 -Dspring.config.location=../config/application.properties -jar kkFileView-4.3.0.jar > ../log/kkFileView.log 2>&1 &\n\n\n接下来修改下kkfile的配置文件：\n\nvim kkFileView-4.3.0/config/application.properties\n\n\n以下配置供参考：\n\n#######################################不可动态配置，需要重启生效#######################################\nserver.port = ${KK_SERVER_PORT:8012}\n#配合Nginx的配置修改\nserver.servlet.context-path=/preview\nserver.servlet.encoding.charset = utf-8\n#文件上传限制前端\nspring.servlet.multipart.max-file-size=500MB\n#文件上传限制\nspring.servlet.multipart.max-request-size=500MB\n## Freemarker 配置\nspring.freemarker.template-loader-path = classpath:/web/\nspring.freemarker.cache = false\nspring.freemarker.charset = UTF-8\nspring.freemarker.check-template-location = true\nspring.freemarker.content-type = text/html\nspring.freemarker.expose-request-attributes = true\nspring.freemarker.expose-session-attributes = true\nspring.freemarker.request-context-attribute = request\nspring.freemarker.suffix = .ftl\n\n# office-plugin\n## office转换服务的进程数，默认开启两个进程\noffice.plugin.server.ports = 2101,2102\n## office 转换服务 task 超时时间，默认五分钟\noffice.plugin.task.timeout = 5m\n\n#预览生成资源路径（默认为打包根路径下的file目录下）\n#file.dir = D:\\\\kkFileview\\\\\nfile.dir = ${KK_FILE_DIR:default}\n\n#允许预览的本地文件夹 默认不允许任何本地文件被预览\n#WINDOWS参考 local.preview.dir =  \\D:\\\\kkFileview\\\\1\\\\1.txt (注意前面必须添加反斜杠)\n#LINUX参考   local.preview.dir =  /opt/1.txt (注意前面必须是正斜杠)\n#使用方法 windows  file://d:/1/1.txt  linux file:/opt/1/1.txt\n#file 协议参考：https://datatracker.ietf.org/doc/html/rfc8089\n#把本地日志文件做个挂载\nlocal.preview.dir =/opt/logs/ \n\n#openoffice home路径,根据实际的路径来修改\n#office.home = C:\\\\Program Files (x86)\\\\OpenOffice 4\noffice.home =/opt/libreoffice7.6\n\n#缓存实现类型，不配默认为内嵌RocksDB(type = default)实现，可配置为redis(type = redis)实现（需要配置spring.redisson.address等参数）和 JDK 内置对象实现（type = jdk）,\ncache.type =  ${KK_CACHE_TYPE:jdk}\n#redis连接，只有当cache.type = redis时才有用\nspring.redisson.address = ${KK_SPRING_REDISSON_ADDRESS:127.0.0.1:6379}\nspring.redisson.password = ${KK_SPRING_REDISSON_PASSWORD:}\n#缓存是否自动清理 true 为开启，注释掉或其他值都为关闭\ncache.clean.enabled = ${KK_CACHE_CLEAN_ENABLED:true}\n#缓存自动清理时间，cache.clean.enabled = true时才有用，cron表达式，基于Quartz cron\ncache.clean.cron = ${KK_CACHE_CLEAN_CRON:0 0 3 * * ?}\n\n#######################################可在运行时动态配置#######################################\n#提供预览服务的地址，默认从请求url读，如果使用nginx等反向代理，需要手动设置\n#base.url = https://file.keking.cn\nbase.url =http://x.x.x.x:80/preview\n\n#信任站点，多个用','隔开，设置了之后，会限制只能预览来自信任站点列表的文件，默认不限制\n#trust.host = kkview.cn\ntrust.host = ${KK_TRUST_HOST:default}\n\n#是否启用缓存\ncache.enabled = ${KK_CACHE_ENABLED:true}\n\n#文本类型，默认如下，可自定义添加\nsimText = ${KK_SIMTEXT:txt,html,htm,asp,jsp,xml,json,properties,md,gitignore,log,java,py,c,cpp,sql,sh,bat,m,bas,prg,cmd}\n#多媒体类型，默认如下，可自定义添加\nmedia = ${KK_MEDIA:mp3,wav,mp4,flv}\n#是否开启多媒体类型转视频格式转换,目前可转换视频格式有：avi,mov,wmv,3gp,rm\n#请谨慎开启此功能，建议异步调用添加到处理队列，并且增加任务队列处理线程，防止视频转换占用完线程资源，转换比较耗费时间,并且控制了只能串行处理转换任务\nmedia.convert.disable = ${KK_MEDIA_CONVERT_DISABLE:false}\n#支持转换的视频类型\nconvertMedias = ${KK_CONVERTMEDIAS:avi,mov,wmv,mkv,3gp,rm}\n#office类型文档(word ppt)样式，默认为图片(image)，可配置为pdf（预览时也有按钮切换）\noffice.preview.type = ${KK_OFFICE_PREVIEW_TYPE:image}\n#是否关闭office预览切换开关，默认为false，可配置为true关闭\noffice.preview.switch.disabled = ${KK_OFFICE_PREVIEW_SWITCH_DISABLED:false}\n\n#是否禁止演示模式\npdf.presentationMode.disable = ${KK_PDF_PRESENTATION_MODE_DISABLE:true}\n#是否禁止打开文件\npdf.openFile.disable = ${KK_PDF_OPEN_FILE_DISABLE:true}\n#是否禁止打印转换生成的pdf文件\npdf.print.disable = ${KK_PDF_PRINT_DISABLE:true}\n#是否禁止下载转换生成的pdf文件\npdf.download.disable = ${KK_PDF_DOWNLOAD_DISABLE:false}\n#是否禁止bookmark\npdf.bookmark.disable = ${KK_PDF_BOOKMARK_DISABLE:true}\n#是否禁用首页文件上传\nfile.upload.disable = ${KK_FILE_UPLOAD_ENABLED:false}\n\n#预览源为FTP时 FTP用户名，可在ftp url后面加参数ftp.username=ftpuser指定，不指定默认用配置的\nftp.username = ${KK_FTP_USERNAME:ftpuser}\n#预览源为FTP时 FTP密码，可在ftp url后面加参数ftp.password=123456指定，不指定默认用配置的\nftp.password = ${KK_FTP_PASSWORD:123456}\n#预览源为FTP时, FTP连接默认ControlEncoding(根据FTP服务器操作系统选择，Linux一般为UTF-8，Windows一般为GBK)，可在ftp url后面加参数ftp.control.encoding=UTF-8指定，不指定默认用配置的\nftp.control.encoding = ${KK_FTP_CONTROL_ENCODING:UTF-8}\n\n#水印内容\n#例：watermark.txt = ${WATERMARK_TXT:凯京科技内部文件，严禁外泄}\n#如需取消水印，内容设置为空即可，例：watermark.txt = ${WATERMARK_TXT:}\nwatermark.txt = ${WATERMARK_TXT:}\n#水印x轴间隔\nwatermark.x.space = ${WATERMARK_X_SPACE:300}\n#水印y轴间隔\nwatermark.y.space = ${WATERMARK_Y_SPACE:300}\n#水印字体\nwatermark.font = ${WATERMARK_FONT:微软雅黑}\n#水印字体大小\nwatermark.fontsize = ${WATERMARK_FONTSIZE:18px}\n#水印字体颜色\nwatermark.color = ${WATERMARK_COLOR:black}\n#水印透明度，要求设置在大于等于0.005，小于1\nwatermark.alpha = ${WATERMARK_ALPHA:0.25}\n#水印宽度\nwatermark.width = ${WATERMARK_WIDTH:180}\n#水印高度\nwatermark.height = ${WATERMARK_HEIGHT:80}\n#水印倾斜度数，要求设置在大于等于0，小于90\nwatermark.angle = ${WATERMARK_ANGLE:30}\n\n#Tif类型图片浏览模式：tif（利用前端js插件浏览）；jpg（转换为jpg后前端显示）；pdf（转换为pdf后显示，便于打印）\ntif.preview.type = ${KK_TIF_PREVIEW_TYPE:tif}\n# 备案信息，默认为空\nbeian = ${KK_BEIAN:default}\n#禁止上传类型\nprohibit = ${KK_PROHIBIT:exe,dll,dat,sh}\n#删除密码\ndelete.password = ${KK_DELETE_PASSWORD:cestc@135246}\n#删除 转换后OFFICE、CAD、TIFF、压缩包源文件 默认开启 节约磁盘空间\ndelete.source.file = ${KK_DELETE_SOURCE_FILE:false}\n#配置PDF文件生成图片的像素大小，dpi 越高，图片质量越清晰，同时也会消耗更多的计算资源。\npdf2jpg.dpi = ${KK_PDF2JPG_DPI:144}\n#xlsx格式前端解析\noffice.type.web = ${KK_OFFICE_TYPE_WEB:web}\n\n\n\n\n配置文件修改好之后，就可以切换到bin目录下启动了：\n\n#启动\nsh startup.sh\n#查看日志\nsh showlog.sh\n\n\n最后配置下Nginx的conf文件\n在80端口（根据项目修改）的监听下增加以下路由，8012是KKFileView启动的默认端口\n\nlocation /preview {\n     proxy_pass http://x.x.x.x:8012;\n}\n\n\n官网帮助相关截图：\n\n\n最后效果图，可以根据实际的IP配置访问：\n\n\n\n# 附录\n\n示例DEMO\n\n<html>\n<script type=\"text/javascript\" src=\"http://x.x.x.x:80/preview/js/base64.min.js\"><\/script>\n<body>\n<script>\nvar previewUrl = 'http://y.y.y.y:81/lawAndRegulation/word/781923063709323264.doc'; //要预览文件的访问地址\nwindow.open('http://x.x.x.x:80/preview/onlinePreview?url='+encodeURIComponent(Base64.encode(previewUrl)));\n<\/script>\n</body>\n<html>\n\n\n本文转自 http://t.csdnimg.cn/AJhEx，如有侵权，请联系删除。",normalizedContent:"# centos7.9部署kkfileview经验帖\n\n\n# 安装介质版本\n\n文件预览：kkfile v4.3.0 官网\n\noffice插件：libreoffice7.6\n\n操作系统：centos linux release 7.9.2009 (core)\n\n字体包：字体\n\n\n# 安装office插件\n\n下载好office插件后，开始安装：\n\n解压压缩文件：\n\ntar -zxvf libreoffice_7.6.2_linux_x86-64_rpm.tar.gz\n\n\n进入rpm文件目录：\n\ncd libreoffice_7.6.2.1_linux_x86-64_rpm/rpm\n\n\n执行安装指令：\n\nrpm -ivh *.rpm\n或者\nyum localinstall *.rpm\n\n\n\n# 安装字体\n\n大部分linux系统上并没有预装中文字体或字体不全，需要把常用字体拷贝到linux服务器上，具体操作如下：\n下载如下字体包 http://kkfileview.keking.cn/fonts.zip 文件解压完整拷贝到linux下的 /usr/share/fonts目录。\n然后依次执行mkfontscale 、mkfontdir 、fc-cache使字体生效。\n\ncd /usr/share/fonts\nmkfontscale\nmkfontdir\nfc-cache\n\n\n\n# 安装kkfileview\n\n\n# 方式一\n\n俩种方式，一是氪金，99米加入星球获取。\n\n\n\n# 方式二\n\n另外一种是，下载源代码，本地编译。\nhttps://gitee.com/kekingcn/file-online-preview\n\n1. 从码云仓库拉取代码 #\ngit clone https://gitee.com/kekingcn/file-online-preview.git\n2. 使用maven编译打包 #\ncd file-online-preview\nmvn clean package -dskiptests\n3. 使用docker构建镜像 #\ndocker build -t keking/kkfileview:v4.0.0 .\n\n\n不管是哪种方式，将得到的gz压缩包上传到服务器安装目录。\n切换到工作目录：\n\ninstall.sh 安装内置的office插件，听说有问题，笔者是用的独立下载的，office插件目录是：/opt/libreoffice7.6。\n\nshowlog.sh 查看日志\nshutdown.sh 停止服务\nstartup.sh 启动服务\n由于后期测试发现性能比较慢，且没有做gc的处理。因此笔者做了优化，供参考：\n-xms6144m -xmx6144m 建议设置为服务器内存的四分之一为最佳。\n\n nohup java -xms6144m -xmx6144m -xmn512m -xloggc:../log/kkfile_gc.log -verbose:gc -xx:+printgcdetails -xx:+printgcdatestamps -xx:+printgctimestamps -xx:+usegclogfilerotation -xx:numberofgclogfiles=10 -xx:gclogfilesize=100m  -dfile.encoding=utf-8 -dspring.config.location=../config/application.properties -jar kkfileview-4.3.0.jar > ../log/kkfileview.log 2>&1 &\n\n\n接下来修改下kkfile的配置文件：\n\nvim kkfileview-4.3.0/config/application.properties\n\n\n以下配置供参考：\n\n#######################################不可动态配置，需要重启生效#######################################\nserver.port = ${kk_server_port:8012}\n#配合nginx的配置修改\nserver.servlet.context-path=/preview\nserver.servlet.encoding.charset = utf-8\n#文件上传限制前端\nspring.servlet.multipart.max-file-size=500mb\n#文件上传限制\nspring.servlet.multipart.max-request-size=500mb\n## freemarker 配置\nspring.freemarker.template-loader-path = classpath:/web/\nspring.freemarker.cache = false\nspring.freemarker.charset = utf-8\nspring.freemarker.check-template-location = true\nspring.freemarker.content-type = text/html\nspring.freemarker.expose-request-attributes = true\nspring.freemarker.expose-session-attributes = true\nspring.freemarker.request-context-attribute = request\nspring.freemarker.suffix = .ftl\n\n# office-plugin\n## office转换服务的进程数，默认开启两个进程\noffice.plugin.server.ports = 2101,2102\n## office 转换服务 task 超时时间，默认五分钟\noffice.plugin.task.timeout = 5m\n\n#预览生成资源路径（默认为打包根路径下的file目录下）\n#file.dir = d:\\\\kkfileview\\\\\nfile.dir = ${kk_file_dir:default}\n\n#允许预览的本地文件夹 默认不允许任何本地文件被预览\n#windows参考 local.preview.dir =  \\d:\\\\kkfileview\\\\1\\\\1.txt (注意前面必须添加反斜杠)\n#linux参考   local.preview.dir =  /opt/1.txt (注意前面必须是正斜杠)\n#使用方法 windows  file://d:/1/1.txt  linux file:/opt/1/1.txt\n#file 协议参考：https://datatracker.ietf.org/doc/html/rfc8089\n#把本地日志文件做个挂载\nlocal.preview.dir =/opt/logs/ \n\n#openoffice home路径,根据实际的路径来修改\n#office.home = c:\\\\program files (x86)\\\\openoffice 4\noffice.home =/opt/libreoffice7.6\n\n#缓存实现类型，不配默认为内嵌rocksdb(type = default)实现，可配置为redis(type = redis)实现（需要配置spring.redisson.address等参数）和 jdk 内置对象实现（type = jdk）,\ncache.type =  ${kk_cache_type:jdk}\n#redis连接，只有当cache.type = redis时才有用\nspring.redisson.address = ${kk_spring_redisson_address:127.0.0.1:6379}\nspring.redisson.password = ${kk_spring_redisson_password:}\n#缓存是否自动清理 true 为开启，注释掉或其他值都为关闭\ncache.clean.enabled = ${kk_cache_clean_enabled:true}\n#缓存自动清理时间，cache.clean.enabled = true时才有用，cron表达式，基于quartz cron\ncache.clean.cron = ${kk_cache_clean_cron:0 0 3 * * ?}\n\n#######################################可在运行时动态配置#######################################\n#提供预览服务的地址，默认从请求url读，如果使用nginx等反向代理，需要手动设置\n#base.url = https://file.keking.cn\nbase.url =http://x.x.x.x:80/preview\n\n#信任站点，多个用','隔开，设置了之后，会限制只能预览来自信任站点列表的文件，默认不限制\n#trust.host = kkview.cn\ntrust.host = ${kk_trust_host:default}\n\n#是否启用缓存\ncache.enabled = ${kk_cache_enabled:true}\n\n#文本类型，默认如下，可自定义添加\nsimtext = ${kk_simtext:txt,html,htm,asp,jsp,xml,json,properties,md,gitignore,log,java,py,c,cpp,sql,sh,bat,m,bas,prg,cmd}\n#多媒体类型，默认如下，可自定义添加\nmedia = ${kk_media:mp3,wav,mp4,flv}\n#是否开启多媒体类型转视频格式转换,目前可转换视频格式有：avi,mov,wmv,3gp,rm\n#请谨慎开启此功能，建议异步调用添加到处理队列，并且增加任务队列处理线程，防止视频转换占用完线程资源，转换比较耗费时间,并且控制了只能串行处理转换任务\nmedia.convert.disable = ${kk_media_convert_disable:false}\n#支持转换的视频类型\nconvertmedias = ${kk_convertmedias:avi,mov,wmv,mkv,3gp,rm}\n#office类型文档(word ppt)样式，默认为图片(image)，可配置为pdf（预览时也有按钮切换）\noffice.preview.type = ${kk_office_preview_type:image}\n#是否关闭office预览切换开关，默认为false，可配置为true关闭\noffice.preview.switch.disabled = ${kk_office_preview_switch_disabled:false}\n\n#是否禁止演示模式\npdf.presentationmode.disable = ${kk_pdf_presentation_mode_disable:true}\n#是否禁止打开文件\npdf.openfile.disable = ${kk_pdf_open_file_disable:true}\n#是否禁止打印转换生成的pdf文件\npdf.print.disable = ${kk_pdf_print_disable:true}\n#是否禁止下载转换生成的pdf文件\npdf.download.disable = ${kk_pdf_download_disable:false}\n#是否禁止bookmark\npdf.bookmark.disable = ${kk_pdf_bookmark_disable:true}\n#是否禁用首页文件上传\nfile.upload.disable = ${kk_file_upload_enabled:false}\n\n#预览源为ftp时 ftp用户名，可在ftp url后面加参数ftp.username=ftpuser指定，不指定默认用配置的\nftp.username = ${kk_ftp_username:ftpuser}\n#预览源为ftp时 ftp密码，可在ftp url后面加参数ftp.password=123456指定，不指定默认用配置的\nftp.password = ${kk_ftp_password:123456}\n#预览源为ftp时, ftp连接默认controlencoding(根据ftp服务器操作系统选择，linux一般为utf-8，windows一般为gbk)，可在ftp url后面加参数ftp.control.encoding=utf-8指定，不指定默认用配置的\nftp.control.encoding = ${kk_ftp_control_encoding:utf-8}\n\n#水印内容\n#例：watermark.txt = ${watermark_txt:凯京科技内部文件，严禁外泄}\n#如需取消水印，内容设置为空即可，例：watermark.txt = ${watermark_txt:}\nwatermark.txt = ${watermark_txt:}\n#水印x轴间隔\nwatermark.x.space = ${watermark_x_space:300}\n#水印y轴间隔\nwatermark.y.space = ${watermark_y_space:300}\n#水印字体\nwatermark.font = ${watermark_font:微软雅黑}\n#水印字体大小\nwatermark.fontsize = ${watermark_fontsize:18px}\n#水印字体颜色\nwatermark.color = ${watermark_color:black}\n#水印透明度，要求设置在大于等于0.005，小于1\nwatermark.alpha = ${watermark_alpha:0.25}\n#水印宽度\nwatermark.width = ${watermark_width:180}\n#水印高度\nwatermark.height = ${watermark_height:80}\n#水印倾斜度数，要求设置在大于等于0，小于90\nwatermark.angle = ${watermark_angle:30}\n\n#tif类型图片浏览模式：tif（利用前端js插件浏览）；jpg（转换为jpg后前端显示）；pdf（转换为pdf后显示，便于打印）\ntif.preview.type = ${kk_tif_preview_type:tif}\n# 备案信息，默认为空\nbeian = ${kk_beian:default}\n#禁止上传类型\nprohibit = ${kk_prohibit:exe,dll,dat,sh}\n#删除密码\ndelete.password = ${kk_delete_password:cestc@135246}\n#删除 转换后office、cad、tiff、压缩包源文件 默认开启 节约磁盘空间\ndelete.source.file = ${kk_delete_source_file:false}\n#配置pdf文件生成图片的像素大小，dpi 越高，图片质量越清晰，同时也会消耗更多的计算资源。\npdf2jpg.dpi = ${kk_pdf2jpg_dpi:144}\n#xlsx格式前端解析\noffice.type.web = ${kk_office_type_web:web}\n\n\n\n\n配置文件修改好之后，就可以切换到bin目录下启动了：\n\n#启动\nsh startup.sh\n#查看日志\nsh showlog.sh\n\n\n最后配置下nginx的conf文件\n在80端口（根据项目修改）的监听下增加以下路由，8012是kkfileview启动的默认端口\n\nlocation /preview {\n     proxy_pass http://x.x.x.x:8012;\n}\n\n\n官网帮助相关截图：\n\n\n最后效果图，可以根据实际的ip配置访问：\n\n\n\n# 附录\n\n示例demo\n\n<html>\n<script type=\"text/javascript\" src=\"http://x.x.x.x:80/preview/js/base64.min.js\"><\/script>\n<body>\n<script>\nvar previewurl = 'http://y.y.y.y:81/lawandregulation/word/781923063709323264.doc'; //要预览文件的访问地址\nwindow.open('http://x.x.x.x:80/preview/onlinepreview?url='+encodeuricomponent(base64.encode(previewurl)));\n<\/script>\n</body>\n<html>\n\n\n本文转自 http://t.csdnimg.cn/ajhex，如有侵权，请联系删除。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:172356108e4},{title:"video",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/html/video-%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91.html",relativePath:"小需求/html/video-播放视频.md",key:"v-7aa4809c",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/html/video-%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91.html",headers:[{level:2,title:"前言：",slug:"前言",normalizedTitle:"前言：",charIndex:12},{level:2,title:"1、 标签",slug:"_1、-标签",normalizedTitle:"1、 标签",charIndex:644},{level:2,title:"2、 标签",slug:"_2、-标签",normalizedTitle:"2、 标签",charIndex:1226},{level:2,title:"3、HTML5 <video> 标签",slug:"_3、html5-video-标签",normalizedTitle:"3、html5 <video> 标签",charIndex:2968},{level:2,title:"4.1、video+object+embed",slug:"_4-1、video-object-embed",normalizedTitle:"4.1、video+object+embed",charIndex:3566},{level:2,title:"4.2、使用超链接启动“辅助应用程序”播放",slug:"_4-2、使用超链接启动-辅助应用程序-播放",normalizedTitle:"4.2、使用超链接启动“辅助应用程序”播放",charIndex:4423},{level:2,title:"4.3、关于内联视频的说明",slug:"_4-3、关于内联视频的说明",normalizedTitle:"4.3、关于内联视频的说明",charIndex:4619},{level:2,title:"4.4、html5media.js插件:",slug:"_4-4、html5media-js插件",normalizedTitle:"4.4、html5media.js插件:",charIndex:4843},{level:2,title:"4.5、 hivideo.js ：",slug:"_4-5、-hivideo-js",normalizedTitle:"4.5、 hivideo.js ：",charIndex:5276},{level:2,title:"4.6、video.js:",slug:"_4-6、video-js",normalizedTitle:"4.6、video.js:",charIndex:5917},{level:2,title:"知识拓展：",slug:"知识拓展",normalizedTitle:"知识拓展：",charIndex:6944},{level:3,title:"1.1、常见视频格式有哪些？？",slug:"_1-1、常见视频格式有哪些",normalizedTitle:"1.1、常见视频格式有哪些？？",charIndex:6954},{level:3,title:"1.2、flash视频和 mp4 视频有什么区别？？",slug:"_1-2、flash视频和-mp4-视频有什么区别",normalizedTitle:"1.2、flash视频和 mp4 视频有什么区别？？",charIndex:7129},{level:3,title:"1.3、htnl5shiv.js概述",slug:"_1-3、htnl5shiv-js概述",normalizedTitle:"1.3、htnl5shiv.js概述",charIndex:7370},{level:2,title:"视频在浏览器播放格式，视频浏览器播放格式演示",slug:"视频在浏览器播放格式-视频浏览器播放格式演示",normalizedTitle:"视频在浏览器播放格式，视频浏览器播放格式演示",charIndex:8060},{level:3,title:"1\\. 什么是视频在浏览器播放格式",slug:"_1-什么是视频在浏览器播放格式",normalizedTitle:"1. 什么是视频在浏览器播放格式",charIndex:8087},{level:3,title:"2\\. 常见的视频浏览器播放格式",slug:"_2-常见的视频浏览器播放格式",normalizedTitle:"2. 常见的视频浏览器播放格式",charIndex:8218},{level:3,title:"3\\. 如何在浏览器中播放视频",slug:"_3-如何在浏览器中播放视频",normalizedTitle:"3. 如何在浏览器中播放视频",charIndex:8591},{level:3,title:"4\\. 如何优化视频播放体验",slug:"_4-如何优化视频播放体验",normalizedTitle:"4. 如何优化视频播放体验",charIndex:8813},{level:3,title:"5\\. 如何处理视频兼容性问题",slug:"_5-如何处理视频兼容性问题",normalizedTitle:"5. 如何处理视频兼容性问题",charIndex:9268}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"前言： 1、 标签 2、 标签 3、HTML5 <video> 标签 4.1、video+object+embed 4.2、使用超链接启动“辅助应用程序”播放 4.3、关于内联视频的说明 4.4、html5media.js插件: 4.5、 hivideo.js ： 4.6、video.js: 知识拓展： 1.1、常见视频格式有哪些？？ 1.2、flash视频和 mp4 视频有什么区别？？ 1.3、htnl5shiv.js概述 视频在浏览器播放格式，视频浏览器播放格式演示 1\\. 什么是视频在浏览器播放格式 2\\. 常见的视频浏览器播放格式 3\\. 如何在浏览器中播放视频 4\\. 如何优化视频播放体验 5\\. 如何处理视频兼容性问题",content:'# video\n\n\n# 前言：\n\n在 HTML 中播放视频并不容易！因为直到现在，仍然不存在一项旨在网页上显示视频的标准。今天，大多数视频是通过插件（比如 Flash）来显示的。然而，并非所有浏览器都拥有同样的插件。 比如windows平台的IE浏览器利用Activex控件来播放flash而其它的浏览器则使用Netscape插件技术来播放flash。而在HTML5 中规定了一种通过 video 元素来包含视频的标准方法，但 元素只支持三种视频格式：MP4、WebM、Ogg。\n\n开发中我们希望视频文件在所有浏览器中（Internet Explorer, Chrome, Firefox, Safari, Opera）和所有硬件上（PC, Mac , iPad, iPhone）都能够播放。有时候甚至需要保证在不同的浏览器上视频播放界面效果保持一致。\n\n在html内联视频中常用的多媒体视频文件格式是flash和mp4文件。flash视频内容可以使用或标签，mp4视频内容可以使用<embed> 、<object> 、<video>。但目前， 元素只支持三种视频格式：MP4、WebM、Ogg。标签是用于windows平台的IE浏览器的，而 是用于windows和Macintosh平台下的Netscape Navigator浏览器以及Macintosh平台下的IE浏览器。\n\n下面依次介绍<embed> 、<object> 、<video>各个标签的使用及视频播放的局限性，\n\n\n# 1、 标签\n\n概述： 标签是HTML5中新增的标签，定义一个容器，可以在页面中嵌入任何类型的文档。用户的机器上必须已经安装了能够正确显示文档内容的程序，一般常用于在网页中插入多媒体格式可以是 Midi、Wav、AIFF、AU、MP3等，IE、Firefox等最新浏览器都能支持。url为音频或视频文件及其路径，可以是相对路径和绝对路径。\n\n使用如下：\n\n<embed src="test.mp4" type="video/mp4" width="400px" height="300px">\n\n\n注意事项：\n\n * HTML4 无法识别 标签。\n * 如果浏览器不支持 Flash(如未安装)，那么视频将无法播放。\n * iPad 和 iPhone 苹果设备不支持Flash 视频。（ipad的浏览器属于HTML5技术构架，可以不依赖Flash播放视频。）\n\n补充：安卓系统从Android 2.1版本就开始部分支持flash，可下载安装flash插件播放视频。Adobe Flash Player 10.1.92.8已经支持所有android 2.2智能手机。目前主流的安卓智能机系统都在版本2.3以上，android4.0已大行其道。因此无须对安卓设备采用单独的视频处理方案，安卓系统和windows系统采用同样的方案，使用flash播放器即可实现。\n\n\n# 2、 标签\n\n概述：定义一个嵌入的对象。请使用此元素向您的 XHTML 页面添加多媒体。此元素允许您规定插入HTML 文档中的对象的数据和参数，以及可用来显示和操作数据的代码。\n\n<object> 标签用于包含对象，比如图像、音频、视频、Java applets、ActiveX、PDF 以及 Flash。\n\nobject 的初衷是取代 img 和 applet 元素。不过由于漏洞以及缺乏浏览器支持，这一点并未实现。\n\nobject 对象提供了解决方案。如果不支持 object 元素，就会执行位于 和 之间的代码。通过这种方式，我们能够嵌套多个 object 元素（每个对应一个浏览器）。object是H4元素\n\n使用：\n\n\x3c!--位于 form 表单外的 <object> 元素（但仍然属于 form 表单的一部分） --\x3e\n<object width="400" height="400" data="helloworld.swf" form="form1" name="obj1"></object>\n\n\n注意事项：\n\n如果浏览器不支持 Flash，将无法播放视频。iPad 和 iPhone 不支持Flash 视频播放。不要对图像使用 标签，请使用 标签 代替。\n\nembed和object标签综合使用\n\n两者都是用来播放多媒体文件的对象，object元素用于IE浏览器，embed元素用于非IE浏览器，为了保证兼容性，通常我们同时使用两个元素，浏览器会自动忽略它不支持的标签。同时使用两个元素时，应该把标签放在标签的内部。\n\n<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0" width="700" height="400">\n\t<param name="movie" value="flvplayer.swf" />\n\t<param name="quality" value="high" />\n\t<param name="allowFullScreen" value="true" />\n\t<param name="FlashVars" value="vcastr_file=12.flv&LogoText=description&BufferTime=3&IsAutoPlay=1">\n\t<embed src="flvplayer.swf" allowfullscreen="true" flashvars="vcastr_file=12.flv&IsAutoPlay=1&LogoUrl=images/logo.jpg" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" width="700" height="400"></embed>\n</object>\n\n\n上述代码详解： OBJECT标签是用于windows IE3.0及以后浏览器或者其它支持Activex控件的浏览器。“classid”和“codebase”属性必须要精确地按上例所示的写法写，它们告诉浏览器自动下载flash player的地址。如果你没有安装过flash player 那么IE3.0以后的浏览器会跳出一个提示框访问是否要自动安装flash player。当然，如果你不想让那些没有安装flash player的用户自动下载播放器，或许你可以省略掉这些代码。\nEMBED标签是用于Netscape Navigator2.0及以后的浏览器或其它支持Netscape插件的浏览器。“pluginspage”属性告诉浏览器下载flash player的地址，如果还没有安装flash player的话，用户安装完后需要重启浏览器才能正常使用。\n\n\n# 3、HTML5 <video> 标签\n\n概述： 标签定义视频，比如电影片段或其他视频流。\n\n使用：\n\n<video width="320" height="240" controls>\n  <source src="movie.mp4" type="video/mp4">\n  <source src="movie.ogg" type="video/ogg">\n  <source src="movie.webm" type="video/webm">\n您的浏览器不支持 video 标签。\nsource标签提供多个媒体资源供不同的浏览器根据它对媒体类型或者编解码器的支持进行选择\n</video>\n\n\n属性如下：\n\n\n\n注意事项：\n\n当前， <video> 元素支持三种视频格式： MP4, WebM, 和 Ogg:。\n\n须把视频转换为很多不同的格式。\n\n但是video、audio标签只在IE 9+、Safari 3+、FireFox 4+、Opera 10+、Chrome 3+的浏览器版本得到了支持，并且各浏览器对于视频编码格式的支持不一致，这就需要我们考虑一个综合的实现方案，使得视频在不同浏览器中都能顺利播放，而且在老版本的浏览器中也能得到支持。\n\n上述<embed> 、<object> 、<video>各个标签有各自的局限性，下面列出一些兼容各个浏览器视频播放的解决方式\n\n\n# 4.1、video+object+embed\n\n以下实例中使用了 4 种不同的视频格式。HTML 5 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。如果均失败，则回退到 元素。这样多种标签结合使用需要将视频转换为很多不同的格式。。webm格式是针对FF浏览器的视频播放格式。\n\n由于目前大多数设备的浏览器对flash支持的很好，所以考虑在不支持video标签时页面还是使用object/embed传统标签嵌入视频，用Adobe Flash Player播放。而对于不支持flash的苹果设备，可以制作另一个页面二。然后根据通过js程序对User-Agent的判断给不同的设备浏览器用户显示不同的页面\n\n使用如下：\n\n<video width="320" height="240" controls>\n  <source src="movie.mp4" type="video/mp4">\n  <source src="movie.ogg" type="video/ogg">\n  <source src="movie.webm" type="video/webm">\n  <object data="movie.mp4" width="320" height="240">\n    <embed src="movie.swf" width="320" height="240">\n  </object> \n</video>\n\n\n页面二针对mac设备代码：\n\n<script type="text/javascript">\n\tif ((/iPhone|iPad|iPod/i).test(navigator.userAgent) || (/Mac68K|MacPPC|Macintosh|MacIntel/i).test(navigator.platform)){\n\t\t window.location.href = "####page2.html"\n\t}\n<\/script> \n\n\n\n# 4.2、使用超链接启动“辅助应用程序”播放\n\n如果网页包含指向媒体文件的超链接，大多数浏览器会使用"辅助应用程序"来播放文件。\n\n以下代码片段显示指向 AVI 文件的链接。如果用户点击该链接，浏览器会启动"辅助应用程序"，比如 Windows Media Player 来播放这个 AVI 文件：\n\n<a href="test.mp4">Play a video file</a>\n\n\n\n# 4.3、关于内联视频的说明\n\n当视频被包含在网页中时，它被称为内联视频。\n\n如果您打算在 web 应用程序中使用内联视频，您需要意识到很多人都觉得内联视频令人恼火。\n\n同时请注意，用户可能已经关闭了浏览器中的内联视频选项。\n\n我们最好的建议是只在用户希望看到内联视频的地方包含它们。一个正面的例子是，在用户需要看到视频并点击某个链接时，会打开页面然后播放视频。\n\n可以将视频上传到视频网站或服务器，获取视频资源分享链接，然后进行src引用\n\n\n# 4.4、html5media.js插件:\n\n是一个让video、audio标签在旧版IE中全面兼容的JavaScript类库。实现的原理大致是使用了flash技术，使用flash播放器嵌入视频的方式，使得老版本IE及Firefox支持video标签。这个播放器称为flowplayer。。。\n\n使用步骤：\n\n<script src="html5media.min.js"><\/script>\n \n<video src="test.mp4" width="352" height="264" controls autobuffer></video>\n\n\n下载网址：链接：https://pan.baidu.com/s/1vRgCnY-wWNJ9BcfiMgOeXQ 提取码：ynw4\n\n注意事项：目前，这种多浏览器支持方法所支持的视频格式有限，为mp4和ogv格式，否则视频可能不会播放。使用video标签实现视频播放*在不同浏览器下video样式各不相同*\n\n\n# 4.5、 hivideo.js ：\n\n是一款基于html5的视频播放器，摒弃video原有的播放控制条样式，自己重写了一次,让播放器在各个浏览器下样式统一。支持暂停、播放进度控制、声音控制、全屏播放。如果是要在手机端使用hivideo，全屏播放时还支持横屏播放。几乎兼容所有的浏览器，并且优先使用html5，在不支持的浏览器中，会自动使用flash进行播放。\n\n使用步骤：\n\n<link rel="stylesheet" href="assets/hivideo.css" />\n<script src="assets/hivideo.js"><\/script>\n\n\n<div class="main-wrap">\n    <video ishivideo="true" autoplay isrotate="false" autoHide="true">\n        <source src="assets/test.mp4" type="video/mp4">\n    </video>\n</div>\n\n\n如果是后期动态添加的video元素，也可以通过hivideo动态加载。例如页面动态添加了一个id为”player”的video元素，可通过如下方式把video转换为hivideo播放器：\n\nhivideo(document.getElementById("player"));\n\n\n下载网址：https://github.com/heavis/hivideo\n\n\n# 4.6、video.js:\n\nVideo.js 是一个通用的在网页上嵌入视频播放器的 JS 库，它支持HTML5和Flash视频，Video.js 自动检测浏览器对 HTML5 的支持情况，如果不支持 HTML5 则自动使用 Flash 播放器。支持在桌面和移动设备上播放视频。\n\n详细使用可以参考 https://www.awaimai.com/2053.html\n\n<head>\n  <link href="https://vjs.zencdn.net/7.6.0/video-js.css" rel="stylesheet">\n \n  \x3c!-- If you\'d like to support IE8 (for Video.js versions prior to v7) --\x3e\n  <script src="https://vjs.zencdn.net/ie8/1.1.2/videojs-ie8.min.js"><\/script>\n</head>\n \n<body>\n  <video id=\'my-video\' class=\'video-js\' controls preload=\'auto\' width=\'640\' height=\'264\'\n  poster=\'MY_VIDEO_POSTER.jpg\' data-setup=\'{}\'>\n    <source src=\'MY_VIDEO.mp4\' type=\'video/mp4\'>\n    <source src=\'MY_VIDEO.webm\' type=\'video/webm\'>\n    <p class=\'vjs-no-js\'>\n      To view this video please enable JavaScript, and consider upgrading to a web browser that\n      <a href=\'https://videojs.com/html5-video-support/\' target=\'_blank\'>supports HTML5 video</a>\n    </p>\n  </video>\n \n  <script src=\'https://vjs.zencdn.net/7.6.0/video.js\'><\/script>\n</body>\n\n\n注意事项：要支持IE低版本就需要下载video.js低版本\n\n\n# 知识拓展：\n\n\n# 1.1、常见视频格式有哪些？？\n\n.AVI, .wma, .rmvb,.rm, .flash,.mp4,.mid, 3GP等视频格式是比较常见的。其中AVI一般比较大, 也是最清晰的一种,rmvb,wma中等清晰, rm格式小且清晰度稍微差些. .flash,.mp4,.mid, 3GP都是格式比较小的适合网络播放与移动媒体设备播放用的.\n\n\n# 1.2、flash视频和 mp4 视频有什么区别？？\n\nFlash是动画文件，是基于矢量图形的，是通过Flash软件制作的，使用 .swf的文件后缀。而Mp4是视频文件，是采用mpeg编码的一类多媒体影音混合文件，文件后缀为.mp4，是通过某些介质录制或者制作的，以储存数码音讯及数码视频为主。\n\n注意：Flash 成为嵌入网页中的小游戏、动画以及图形用户界面常用的格式。flash的播放需要使用flash player插件，有插件版和IE专用版本，就是浏览器的一种插件。\n\n\n# 1.3、htnl5shiv.js概述\n\n对于老版本的IE可以通过HTML5shiv来使不支持HTML5的浏览器支持HTML新标签video和audio标签。主要解决HTML5提出的新的元素不被IE6/IE7/IE8识别，这些新元素不能作为父节点包裹子元素，且不能应用CSS样式。让CSS 样式应用在未知元素只需执行 document.createElement(elementName) 即可实现。html5shiv的工作原理也就是基于此。html5shiv.js的网盘地址是：链接：https://pan.baidu.com/s/1Db9Gzqz66eYEz01BWhwAIQ 提取码：5vzk\n\n<!–[if lt IE 9]> \n\t<script type="text/javascript" src="html5shiv.js"><\/script> \n<![endif]–>\n\n\n参考学习网址：\n\nhttps://www.runoob.com/html/html-videos.html\n\nhttps://www.zhangxinxu.com/wordpress/2010/03/every-browser-support-html5-video/\n\nhttps://www.jianshu.com/p/16fa00a1ca8e\n\nhttps://blog.csdn.net/enweitech/article/details/80802677\n\nhttps://blog.csdn.net/freshlover/article/details/7535785#\n\n\n# 视频在浏览器播放格式，视频浏览器播放格式演示\n\n\n# 1. 什么是视频在浏览器播放格式\n\n视频在浏览器播放格式，通常指的是互联网上常见的视频文件格式，例如MP4、FLV、AVI等。这些格式通常被用于存储和传输视频内容，并且兼容多种不同的浏览器和设备。在播放视频时，浏览器需要一个播放器来解析和播放视频文件。\n\n\n# 2. 常见的视频浏览器播放格式\n\n2.1 MP4格式\n\nMP4是最常见的视频播放格式之一，它可以在大多数现代浏览器和设备上播放。MP4格式通常使用H.264编码，可以通过改变视频和音频的比特率来控制视频质量和文件大小。同时，MP4格式还支持字幕、元数据和章节信息等功能。\n\n2.2 FLV格式\n\nFLV格式是一种Adobe Flash Player所支持的视频格式。由于Flash Player广泛应用于互联网上的视频播放，因此FLV格式在许多网站上也被广泛使用。FLV格式的一个不足之处是它不能在iOS设备上直接播放。\n\n2.3 AVI格式\n\nAVI格式是一种由Microsoft开发的视频格式，它通常使用xvid或DivX编码。AVI文件较大，但播放器对它的支持很广泛。不过，AVI格式不能在Mac OS X和iOS设备上本地播放。\n\n\n# 3. 如何在浏览器中播放视频\n\n要在浏览器中播放视频，你需要一个适当的视频播放器。现在，许多浏览器都内置了HTML5视频播放器，例如Chrome、Firefox和Safari等。这些浏览器支持MP4、WebM和Ogg视频格式。\n\n如果你需要使用其他视频格式，你可以使用轻量级的嵌入式播放器，例如Video.js、JW Player和FlowPlayer等。这些播放器支持多种视频格式，并且可以通过JavaScript API进行控制。\n\n\n# 4. 如何优化视频播放体验\n\n4.1 选择合适的视频格式\n\n选择适当的视频格式可以大大提高视频播放的效率和用户体验。如果你需要在多个平台（例如桌面和移动设备）上播放视频，可以选择MP4格式。如果你的网站主要面向桌面用户，可以考虑使用FLV或AVI等其他格式。\n\n4.2 压缩视频文件\n\n视频文件的大小通常很大，这会影响视频加载速度和播放质量。因此，你可以使用视频压缩工具来缩小文件大小。例如，你可以使用 Handbrake、Adobe Media Encoder 等工具来压缩视频文件并降低视频文件的大小。\n\n4.3 选择适当的视频分辨率\n\n适当的分辨率可以提供良好的视频清晰度和流畅的播放。如果你的视频主要面向桌面用户，可以选择高分辨率的视频。但是，如果你的网站主要面向移动设备用户，可以选择较低分辨率的视频以提高播放效率和用户体验。\n\n4.4 使用流式传输\n\n流式传输是指在视频播放期间边下载边播放视频，以提高视频播放速度和流畅性。如果你的服务器支持流式传输，可以使用这种技术来改善视频播放体验。\n\n\n# 5. 如何处理视频兼容性问题\n\n5.1 浏览器兼容性问题\n\n不同的浏览器支持不同的视频格式和编解码器。为确保视频在不同浏览器上播放，你可以采取以下措施：\n\n- 检测浏览器的支持情况，并选择相应的视频格式\n\n- 提供备选格式，当用户的浏览器不支持主格式时使用备选格式\n\n5.2 设备兼容性问题\n\n不同设备和操作系统也支持不同的视频格式和编解码器。为确保视频在不同设备上的兼容性，你可以采取以下措施：\n\n- 提供多种视频格式，以便在不同设备上选择适当的格式\n\n- 针对具体设备和操作系统优化视频格式和编解码器\n\n总之，视频在浏览器播放格式是一个复杂的问题，需要考虑多种因素，例如兼容性、效率和用户体验等。在选择视频格式和播放器时，需要根据实际需求和用户群体做出适当的选择，以提供最佳的视频播放体验。\n\n本文转自 https://blog.csdn.net/qq_43842093/article/details/135893572，如有侵权，请联系删除。',normalizedContent:'# video\n\n\n# 前言：\n\n在 html 中播放视频并不容易！因为直到现在，仍然不存在一项旨在网页上显示视频的标准。今天，大多数视频是通过插件（比如 flash）来显示的。然而，并非所有浏览器都拥有同样的插件。 比如windows平台的ie浏览器利用activex控件来播放flash而其它的浏览器则使用netscape插件技术来播放flash。而在html5 中规定了一种通过 video 元素来包含视频的标准方法，但 元素只支持三种视频格式：mp4、webm、ogg。\n\n开发中我们希望视频文件在所有浏览器中（internet explorer, chrome, firefox, safari, opera）和所有硬件上（pc, mac , ipad, iphone）都能够播放。有时候甚至需要保证在不同的浏览器上视频播放界面效果保持一致。\n\n在html内联视频中常用的多媒体视频文件格式是flash和mp4文件。flash视频内容可以使用或标签，mp4视频内容可以使用<embed> 、<object> 、<video>。但目前， 元素只支持三种视频格式：mp4、webm、ogg。标签是用于windows平台的ie浏览器的，而 是用于windows和macintosh平台下的netscape navigator浏览器以及macintosh平台下的ie浏览器。\n\n下面依次介绍<embed> 、<object> 、<video>各个标签的使用及视频播放的局限性，\n\n\n# 1、 标签\n\n概述： 标签是html5中新增的标签，定义一个容器，可以在页面中嵌入任何类型的文档。用户的机器上必须已经安装了能够正确显示文档内容的程序，一般常用于在网页中插入多媒体格式可以是 midi、wav、aiff、au、mp3等，ie、firefox等最新浏览器都能支持。url为音频或视频文件及其路径，可以是相对路径和绝对路径。\n\n使用如下：\n\n<embed src="test.mp4" type="video/mp4" width="400px" height="300px">\n\n\n注意事项：\n\n * html4 无法识别 标签。\n * 如果浏览器不支持 flash(如未安装)，那么视频将无法播放。\n * ipad 和 iphone 苹果设备不支持flash 视频。（ipad的浏览器属于html5技术构架，可以不依赖flash播放视频。）\n\n补充：安卓系统从android 2.1版本就开始部分支持flash，可下载安装flash插件播放视频。adobe flash player 10.1.92.8已经支持所有android 2.2智能手机。目前主流的安卓智能机系统都在版本2.3以上，android4.0已大行其道。因此无须对安卓设备采用单独的视频处理方案，安卓系统和windows系统采用同样的方案，使用flash播放器即可实现。\n\n\n# 2、 标签\n\n概述：定义一个嵌入的对象。请使用此元素向您的 xhtml 页面添加多媒体。此元素允许您规定插入html 文档中的对象的数据和参数，以及可用来显示和操作数据的代码。\n\n<object> 标签用于包含对象，比如图像、音频、视频、java applets、activex、pdf 以及 flash。\n\nobject 的初衷是取代 img 和 applet 元素。不过由于漏洞以及缺乏浏览器支持，这一点并未实现。\n\nobject 对象提供了解决方案。如果不支持 object 元素，就会执行位于 和 之间的代码。通过这种方式，我们能够嵌套多个 object 元素（每个对应一个浏览器）。object是h4元素\n\n使用：\n\n\x3c!--位于 form 表单外的 <object> 元素（但仍然属于 form 表单的一部分） --\x3e\n<object width="400" height="400" data="helloworld.swf" form="form1" name="obj1"></object>\n\n\n注意事项：\n\n如果浏览器不支持 flash，将无法播放视频。ipad 和 iphone 不支持flash 视频播放。不要对图像使用 标签，请使用 标签 代替。\n\nembed和object标签综合使用\n\n两者都是用来播放多媒体文件的对象，object元素用于ie浏览器，embed元素用于非ie浏览器，为了保证兼容性，通常我们同时使用两个元素，浏览器会自动忽略它不支持的标签。同时使用两个元素时，应该把标签放在标签的内部。\n\n<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0" width="700" height="400">\n\t<param name="movie" value="flvplayer.swf" />\n\t<param name="quality" value="high" />\n\t<param name="allowfullscreen" value="true" />\n\t<param name="flashvars" value="vcastr_file=12.flv&logotext=description&buffertime=3&isautoplay=1">\n\t<embed src="flvplayer.swf" allowfullscreen="true" flashvars="vcastr_file=12.flv&isautoplay=1&logourl=images/logo.jpg" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" width="700" height="400"></embed>\n</object>\n\n\n上述代码详解： object标签是用于windows ie3.0及以后浏览器或者其它支持activex控件的浏览器。“classid”和“codebase”属性必须要精确地按上例所示的写法写，它们告诉浏览器自动下载flash player的地址。如果你没有安装过flash player 那么ie3.0以后的浏览器会跳出一个提示框访问是否要自动安装flash player。当然，如果你不想让那些没有安装flash player的用户自动下载播放器，或许你可以省略掉这些代码。\nembed标签是用于netscape navigator2.0及以后的浏览器或其它支持netscape插件的浏览器。“pluginspage”属性告诉浏览器下载flash player的地址，如果还没有安装flash player的话，用户安装完后需要重启浏览器才能正常使用。\n\n\n# 3、html5 <video> 标签\n\n概述： 标签定义视频，比如电影片段或其他视频流。\n\n使用：\n\n<video width="320" height="240" controls>\n  <source src="movie.mp4" type="video/mp4">\n  <source src="movie.ogg" type="video/ogg">\n  <source src="movie.webm" type="video/webm">\n您的浏览器不支持 video 标签。\nsource标签提供多个媒体资源供不同的浏览器根据它对媒体类型或者编解码器的支持进行选择\n</video>\n\n\n属性如下：\n\n\n\n注意事项：\n\n当前， <video> 元素支持三种视频格式： mp4, webm, 和 ogg:。\n\n须把视频转换为很多不同的格式。\n\n但是video、audio标签只在ie 9+、safari 3+、firefox 4+、opera 10+、chrome 3+的浏览器版本得到了支持，并且各浏览器对于视频编码格式的支持不一致，这就需要我们考虑一个综合的实现方案，使得视频在不同浏览器中都能顺利播放，而且在老版本的浏览器中也能得到支持。\n\n上述<embed> 、<object> 、<video>各个标签有各自的局限性，下面列出一些兼容各个浏览器视频播放的解决方式\n\n\n# 4.1、video+object+embed\n\n以下实例中使用了 4 种不同的视频格式。html 5 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。如果均失败，则回退到 元素。这样多种标签结合使用需要将视频转换为很多不同的格式。。webm格式是针对ff浏览器的视频播放格式。\n\n由于目前大多数设备的浏览器对flash支持的很好，所以考虑在不支持video标签时页面还是使用object/embed传统标签嵌入视频，用adobe flash player播放。而对于不支持flash的苹果设备，可以制作另一个页面二。然后根据通过js程序对user-agent的判断给不同的设备浏览器用户显示不同的页面\n\n使用如下：\n\n<video width="320" height="240" controls>\n  <source src="movie.mp4" type="video/mp4">\n  <source src="movie.ogg" type="video/ogg">\n  <source src="movie.webm" type="video/webm">\n  <object data="movie.mp4" width="320" height="240">\n    <embed src="movie.swf" width="320" height="240">\n  </object> \n</video>\n\n\n页面二针对mac设备代码：\n\n<script type="text/javascript">\n\tif ((/iphone|ipad|ipod/i).test(navigator.useragent) || (/mac68k|macppc|macintosh|macintel/i).test(navigator.platform)){\n\t\t window.location.href = "####page2.html"\n\t}\n<\/script> \n\n\n\n# 4.2、使用超链接启动“辅助应用程序”播放\n\n如果网页包含指向媒体文件的超链接，大多数浏览器会使用"辅助应用程序"来播放文件。\n\n以下代码片段显示指向 avi 文件的链接。如果用户点击该链接，浏览器会启动"辅助应用程序"，比如 windows media player 来播放这个 avi 文件：\n\n<a href="test.mp4">play a video file</a>\n\n\n\n# 4.3、关于内联视频的说明\n\n当视频被包含在网页中时，它被称为内联视频。\n\n如果您打算在 web 应用程序中使用内联视频，您需要意识到很多人都觉得内联视频令人恼火。\n\n同时请注意，用户可能已经关闭了浏览器中的内联视频选项。\n\n我们最好的建议是只在用户希望看到内联视频的地方包含它们。一个正面的例子是，在用户需要看到视频并点击某个链接时，会打开页面然后播放视频。\n\n可以将视频上传到视频网站或服务器，获取视频资源分享链接，然后进行src引用\n\n\n# 4.4、html5media.js插件:\n\n是一个让video、audio标签在旧版ie中全面兼容的javascript类库。实现的原理大致是使用了flash技术，使用flash播放器嵌入视频的方式，使得老版本ie及firefox支持video标签。这个播放器称为flowplayer。。。\n\n使用步骤：\n\n<script src="html5media.min.js"><\/script>\n \n<video src="test.mp4" width="352" height="264" controls autobuffer></video>\n\n\n下载网址：链接：https://pan.baidu.com/s/1vrgcny-wwnj9bcfimgoexq 提取码：ynw4\n\n注意事项：目前，这种多浏览器支持方法所支持的视频格式有限，为mp4和ogv格式，否则视频可能不会播放。使用video标签实现视频播放*在不同浏览器下video样式各不相同*\n\n\n# 4.5、 hivideo.js ：\n\n是一款基于html5的视频播放器，摒弃video原有的播放控制条样式，自己重写了一次,让播放器在各个浏览器下样式统一。支持暂停、播放进度控制、声音控制、全屏播放。如果是要在手机端使用hivideo，全屏播放时还支持横屏播放。几乎兼容所有的浏览器，并且优先使用html5，在不支持的浏览器中，会自动使用flash进行播放。\n\n使用步骤：\n\n<link rel="stylesheet" href="assets/hivideo.css" />\n<script src="assets/hivideo.js"><\/script>\n\n\n<div class="main-wrap">\n    <video ishivideo="true" autoplay isrotate="false" autohide="true">\n        <source src="assets/test.mp4" type="video/mp4">\n    </video>\n</div>\n\n\n如果是后期动态添加的video元素，也可以通过hivideo动态加载。例如页面动态添加了一个id为”player”的video元素，可通过如下方式把video转换为hivideo播放器：\n\nhivideo(document.getelementbyid("player"));\n\n\n下载网址：https://github.com/heavis/hivideo\n\n\n# 4.6、video.js:\n\nvideo.js 是一个通用的在网页上嵌入视频播放器的 js 库，它支持html5和flash视频，video.js 自动检测浏览器对 html5 的支持情况，如果不支持 html5 则自动使用 flash 播放器。支持在桌面和移动设备上播放视频。\n\n详细使用可以参考 https://www.awaimai.com/2053.html\n\n<head>\n  <link href="https://vjs.zencdn.net/7.6.0/video-js.css" rel="stylesheet">\n \n  \x3c!-- if you\'d like to support ie8 (for video.js versions prior to v7) --\x3e\n  <script src="https://vjs.zencdn.net/ie8/1.1.2/videojs-ie8.min.js"><\/script>\n</head>\n \n<body>\n  <video id=\'my-video\' class=\'video-js\' controls preload=\'auto\' width=\'640\' height=\'264\'\n  poster=\'my_video_poster.jpg\' data-setup=\'{}\'>\n    <source src=\'my_video.mp4\' type=\'video/mp4\'>\n    <source src=\'my_video.webm\' type=\'video/webm\'>\n    <p class=\'vjs-no-js\'>\n      to view this video please enable javascript, and consider upgrading to a web browser that\n      <a href=\'https://videojs.com/html5-video-support/\' target=\'_blank\'>supports html5 video</a>\n    </p>\n  </video>\n \n  <script src=\'https://vjs.zencdn.net/7.6.0/video.js\'><\/script>\n</body>\n\n\n注意事项：要支持ie低版本就需要下载video.js低版本\n\n\n# 知识拓展：\n\n\n# 1.1、常见视频格式有哪些？？\n\n.avi, .wma, .rmvb,.rm, .flash,.mp4,.mid, 3gp等视频格式是比较常见的。其中avi一般比较大, 也是最清晰的一种,rmvb,wma中等清晰, rm格式小且清晰度稍微差些. .flash,.mp4,.mid, 3gp都是格式比较小的适合网络播放与移动媒体设备播放用的.\n\n\n# 1.2、flash视频和 mp4 视频有什么区别？？\n\nflash是动画文件，是基于矢量图形的，是通过flash软件制作的，使用 .swf的文件后缀。而mp4是视频文件，是采用mpeg编码的一类多媒体影音混合文件，文件后缀为.mp4，是通过某些介质录制或者制作的，以储存数码音讯及数码视频为主。\n\n注意：flash 成为嵌入网页中的小游戏、动画以及图形用户界面常用的格式。flash的播放需要使用flash player插件，有插件版和ie专用版本，就是浏览器的一种插件。\n\n\n# 1.3、htnl5shiv.js概述\n\n对于老版本的ie可以通过html5shiv来使不支持html5的浏览器支持html新标签video和audio标签。主要解决html5提出的新的元素不被ie6/ie7/ie8识别，这些新元素不能作为父节点包裹子元素，且不能应用css样式。让css 样式应用在未知元素只需执行 document.createelement(elementname) 即可实现。html5shiv的工作原理也就是基于此。html5shiv.js的网盘地址是：链接：https://pan.baidu.com/s/1db9gzqz66eyez01bwhwaiq 提取码：5vzk\n\n<!–[if lt ie 9]> \n\t<script type="text/javascript" src="html5shiv.js"><\/script> \n<![endif]–>\n\n\n参考学习网址：\n\nhttps://www.runoob.com/html/html-videos.html\n\nhttps://www.zhangxinxu.com/wordpress/2010/03/every-browser-support-html5-video/\n\nhttps://www.jianshu.com/p/16fa00a1ca8e\n\nhttps://blog.csdn.net/enweitech/article/details/80802677\n\nhttps://blog.csdn.net/freshlover/article/details/7535785#\n\n\n# 视频在浏览器播放格式，视频浏览器播放格式演示\n\n\n# 1. 什么是视频在浏览器播放格式\n\n视频在浏览器播放格式，通常指的是互联网上常见的视频文件格式，例如mp4、flv、avi等。这些格式通常被用于存储和传输视频内容，并且兼容多种不同的浏览器和设备。在播放视频时，浏览器需要一个播放器来解析和播放视频文件。\n\n\n# 2. 常见的视频浏览器播放格式\n\n2.1 mp4格式\n\nmp4是最常见的视频播放格式之一，它可以在大多数现代浏览器和设备上播放。mp4格式通常使用h.264编码，可以通过改变视频和音频的比特率来控制视频质量和文件大小。同时，mp4格式还支持字幕、元数据和章节信息等功能。\n\n2.2 flv格式\n\nflv格式是一种adobe flash player所支持的视频格式。由于flash player广泛应用于互联网上的视频播放，因此flv格式在许多网站上也被广泛使用。flv格式的一个不足之处是它不能在ios设备上直接播放。\n\n2.3 avi格式\n\navi格式是一种由microsoft开发的视频格式，它通常使用xvid或divx编码。avi文件较大，但播放器对它的支持很广泛。不过，avi格式不能在mac os x和ios设备上本地播放。\n\n\n# 3. 如何在浏览器中播放视频\n\n要在浏览器中播放视频，你需要一个适当的视频播放器。现在，许多浏览器都内置了html5视频播放器，例如chrome、firefox和safari等。这些浏览器支持mp4、webm和ogg视频格式。\n\n如果你需要使用其他视频格式，你可以使用轻量级的嵌入式播放器，例如video.js、jw player和flowplayer等。这些播放器支持多种视频格式，并且可以通过javascript api进行控制。\n\n\n# 4. 如何优化视频播放体验\n\n4.1 选择合适的视频格式\n\n选择适当的视频格式可以大大提高视频播放的效率和用户体验。如果你需要在多个平台（例如桌面和移动设备）上播放视频，可以选择mp4格式。如果你的网站主要面向桌面用户，可以考虑使用flv或avi等其他格式。\n\n4.2 压缩视频文件\n\n视频文件的大小通常很大，这会影响视频加载速度和播放质量。因此，你可以使用视频压缩工具来缩小文件大小。例如，你可以使用 handbrake、adobe media encoder 等工具来压缩视频文件并降低视频文件的大小。\n\n4.3 选择适当的视频分辨率\n\n适当的分辨率可以提供良好的视频清晰度和流畅的播放。如果你的视频主要面向桌面用户，可以选择高分辨率的视频。但是，如果你的网站主要面向移动设备用户，可以选择较低分辨率的视频以提高播放效率和用户体验。\n\n4.4 使用流式传输\n\n流式传输是指在视频播放期间边下载边播放视频，以提高视频播放速度和流畅性。如果你的服务器支持流式传输，可以使用这种技术来改善视频播放体验。\n\n\n# 5. 如何处理视频兼容性问题\n\n5.1 浏览器兼容性问题\n\n不同的浏览器支持不同的视频格式和编解码器。为确保视频在不同浏览器上播放，你可以采取以下措施：\n\n- 检测浏览器的支持情况，并选择相应的视频格式\n\n- 提供备选格式，当用户的浏览器不支持主格式时使用备选格式\n\n5.2 设备兼容性问题\n\n不同设备和操作系统也支持不同的视频格式和编解码器。为确保视频在不同设备上的兼容性，你可以采取以下措施：\n\n- 提供多种视频格式，以便在不同设备上选择适当的格式\n\n- 针对具体设备和操作系统优化视频格式和编解码器\n\n总之，视频在浏览器播放格式是一个复杂的问题，需要考虑多种因素，例如兼容性、效率和用户体验等。在选择视频格式和播放器时，需要根据实际需求和用户群体做出适当的选择，以提供最佳的视频播放体验。\n\n本文转自 https://blog.csdn.net/qq_43842093/article/details/135893572，如有侵权，请联系删除。',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"常见库",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-lib-%E6%97%B6%E9%97%B4%E5%BA%93.html",relativePath:"小需求/js/js-lib-时间库.md",key:"v-66068ada",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-lib-%E6%97%B6%E9%97%B4%E5%BA%93.html",headers:[{level:2,title:"常见库",slug:"常见库",normalizedTitle:"常见库",charIndex:2},{level:2,title:"Day.js",slug:"day-js",normalizedTitle:"day.js",charIndex:248},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:46},{level:3,title:"使用方式",slug:"使用方式",normalizedTitle:"使用方式",charIndex:514},{level:2,title:"moment.js",slug:"moment-js",normalizedTitle:"moment.js",charIndex:74},{level:3,title:"moment.js 两大问题：",slug:"moment-js-两大问题",normalizedTitle:"moment.js 两大问题：",charIndex:725},{level:3,title:"1. 可变对象",slug:"_1-可变对象",normalizedTitle:"1. 可变对象",charIndex:745},{level:3,title:"2. 包体积过大",slug:"_2-包体积过大",normalizedTitle:"2. 包体积过大",charIndex:844}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"常见库 Day.js 特点 使用方式 moment.js moment.js 两大问题： 1. 可变对象 2. 包体积过大",content:"# 常见库\n\nmoment、dayjs、date-fns三个库都满足常见的需求，但是存在如下特点：\n\n * moment 的功能强大但是体积也最大，moment.js 的体积为 280.9 kB ，day.js 体积为7K，date-fns由于是模块化加载，体积可以最小化；\n\n * dayjs 和 moment 的接口几乎完全一致，相互切换的学习成本极低，date-fns接口风格差异较大；\n\n * 如果考虑的兼容性，可以优先考虑dayjs，喜欢模块化的朋友可以考虑date-fns。\n\n\n# Day.js\n\nDay.js 是一个轻量的处理时间和日期的 JavaScript 库。 Day.js被设计为Moment.js的极简替代品。API和用法几乎完全一致，相互切换的学习成本极低。\n\n（最新版本的 Chrome 开发者工具也开始建议用户更换 Moment.js 为同类更小的库。）\n\n\n# 特点\n\n * 和 Moment.js 相同的 API 和用法\n * 不可变数据 (Immutable)\n * 支持链式操作 (Chainable)\n * 国际化 I18n\n * 仅 2kb 大小的微型库\n * 全浏览器兼容\n\n\n# 使用方式\n\nAPI地址：day.js.org/docs/zh-CN/…\n\npython 代码解读复制代码npm install dayjs    \n\nimport dayjs from 'dayjs'  \n\ndayjs().format()\n\n\n\n# moment.js\n\n一个大而全的时间日期库，极大方便了我们在 JavaScript 中计算时间和日期，每周下载量超过 1200 万，已成功用于数百万个项目中。\n\n\n# moment.js 两大问题：\n\n\n# 1. 可变对象\n\nMoment 对象是可变对象（mutable），简单点说，任何时间上的加减等计算都改变了其本身。这种设计让代码变的十分不可控，而且很容易带来各种隐蔽且难以调试的 bug。\n\n\n# 2. 包体积过大\n\n因为 Momnet.js 将全部的功能和所有支持的语言都打到一个包里，包的大小也是到了 280.9 kB 这样一个夸张的数字，而且对于 Tree shaking 无效。如果要使用时区相关的功能，包体积更是有 467.6 kB 的大小。简单点说，我们可能只需要一个 .format 格式化时间的方法，用户就需要加载数百 kB 的库。",normalizedContent:"# 常见库\n\nmoment、dayjs、date-fns三个库都满足常见的需求，但是存在如下特点：\n\n * moment 的功能强大但是体积也最大，moment.js 的体积为 280.9 kb ，day.js 体积为7k，date-fns由于是模块化加载，体积可以最小化；\n\n * dayjs 和 moment 的接口几乎完全一致，相互切换的学习成本极低，date-fns接口风格差异较大；\n\n * 如果考虑的兼容性，可以优先考虑dayjs，喜欢模块化的朋友可以考虑date-fns。\n\n\n# day.js\n\nday.js 是一个轻量的处理时间和日期的 javascript 库。 day.js被设计为moment.js的极简替代品。api和用法几乎完全一致，相互切换的学习成本极低。\n\n（最新版本的 chrome 开发者工具也开始建议用户更换 moment.js 为同类更小的库。）\n\n\n# 特点\n\n * 和 moment.js 相同的 api 和用法\n * 不可变数据 (immutable)\n * 支持链式操作 (chainable)\n * 国际化 i18n\n * 仅 2kb 大小的微型库\n * 全浏览器兼容\n\n\n# 使用方式\n\napi地址：day.js.org/docs/zh-cn/…\n\npython 代码解读复制代码npm install dayjs    \n\nimport dayjs from 'dayjs'  \n\ndayjs().format()\n\n\n\n# moment.js\n\n一个大而全的时间日期库，极大方便了我们在 javascript 中计算时间和日期，每周下载量超过 1200 万，已成功用于数百万个项目中。\n\n\n# moment.js 两大问题：\n\n\n# 1. 可变对象\n\nmoment 对象是可变对象（mutable），简单点说，任何时间上的加减等计算都改变了其本身。这种设计让代码变的十分不可控，而且很容易带来各种隐蔽且难以调试的 bug。\n\n\n# 2. 包体积过大\n\n因为 momnet.js 将全部的功能和所有支持的语言都打到一个包里，包的大小也是到了 280.9 kb 这样一个夸张的数字，而且对于 tree shaking 无效。如果要使用时区相关的功能，包体积更是有 467.6 kb 的大小。简单点说，我们可能只需要一个 .format 格式化时间的方法，用户就需要加载数百 kb 的库。",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"stringify 搞砸了我的日期时间对象？",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-api-stringify%E6%90%9E%E7%A0%B8%E4%BA%86%E6%88%91%E7%9A%84%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1.html",relativePath:"小需求/js/js-api-stringify搞砸了我的时间对象.md",key:"v-5dda9bbf",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-api-stringify%E6%90%9E%E7%A0%B8%E4%BA%86%E6%88%91%E7%9A%84%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1.html",lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:null,content:'# stringify 搞砸了我的日期时间对象？\n\n{ \n    id: 1533,\n    story_type_id: 1,\n    content_id: 470,\n    created_at: Sun, 05 Feb 2012 07:02:43 GMT,\n    updated_at: Sun, 05 Feb 2012 07:02:43 GMT,\n    type_name: \'post\' \n}\n\n\n我有一个 JSON 对象，上面有“日期时间”字段。这是完美的。但是当我将它字符串化(我想将它存储在缓存中)时，我得到了这种格式:\n\n"created_at":"2012-02-05T07:02:43.000Z"\n\n\n这会导致问题，因为当我想要 JSON.parse 时，它突然不再是日期时间格式并且与我的其他格式不兼容。\n\n我该怎么做才能解决这个问题？在我的整个应用程序中，到处都是“created_at”。我不想手动更改每一个。\n\n最佳答案\n\n实际上可以修改将 Date 对象序列化为 JSON 的方式。结合 reviver 功能，可以创建一个双向解决方案，该解决方案将自动处理序列化，并且可以轻松地用于反序列化。\n\n首先像这样修改序列化:\n\nDate.prototype.toJSON = function() { return "{timestamp}+" . this.getTime() }\n\n\n这会将 Date 对象的表示更改为带有前缀作为标记的 UNIX 时间戳:\n\n> json = JSON.stringify({test:new Date()});\n"{"test":"{timestamp}1380164268633"}"\n\n\n然后你可以创建一个 reviver 函数，它会自动过滤掉这些值:\n\nfunction json_deserialize_helper(key,value) {\n  if ( typeof value === \'string\' ) {\n    var regexp;\n    regexp = /^{timestamp}(\\d*)$/.exec(value);\n    if ( regexp ) {\n      return new Date(+regexp[1]);\n    }\n  }\n  return value;\n}\n\n\n(来源:此代码基本上是从相关问题中的此答案复制而来:[https://stackoverflow.com/a/14509447/2572897](javascript:void()))\n\n现在有了这个设置，我们之前的结果的反序列化将再次产生一个 Date 对象:\n\n> JSON.parse(json, json_deserialize_helper);\nObject {test: Thu Sep 26 2013 04:57:48 GMT+0200 (CEST)}\n\n\n或者您可以选择不修改序列化，而是使用正则表达式来捕获标准序列化格式:\n\nfunction json_deserialize_helper(key,value) {\n  if ( typeof value === \'string\' ) {\n    var regexp;\n    regexp = /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d.\\d\\d\\dZ$/.exec(value);\n    if ( regexp ) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n\n例子:\n\n> json = JSON.stringify({test:new Date()})\n"{"test":"2013-09-26T03:05:26.563Z"}"\n> JSON.parse(json, json_deserialize_helper)\nObject {test: Thu Sep 26 2013 05:05:26 GMT+0200 (CEST)\n\n\nhttps://stackoverflow.com/questions/9194372/',normalizedContent:'# stringify 搞砸了我的日期时间对象？\n\n{ \n    id: 1533,\n    story_type_id: 1,\n    content_id: 470,\n    created_at: sun, 05 feb 2012 07:02:43 gmt,\n    updated_at: sun, 05 feb 2012 07:02:43 gmt,\n    type_name: \'post\' \n}\n\n\n我有一个 json 对象，上面有“日期时间”字段。这是完美的。但是当我将它字符串化(我想将它存储在缓存中)时，我得到了这种格式:\n\n"created_at":"2012-02-05t07:02:43.000z"\n\n\n这会导致问题，因为当我想要 json.parse 时，它突然不再是日期时间格式并且与我的其他格式不兼容。\n\n我该怎么做才能解决这个问题？在我的整个应用程序中，到处都是“created_at”。我不想手动更改每一个。\n\n最佳答案\n\n实际上可以修改将 date 对象序列化为 json 的方式。结合 reviver 功能，可以创建一个双向解决方案，该解决方案将自动处理序列化，并且可以轻松地用于反序列化。\n\n首先像这样修改序列化:\n\ndate.prototype.tojson = function() { return "{timestamp}+" . this.gettime() }\n\n\n这会将 date 对象的表示更改为带有前缀作为标记的 unix 时间戳:\n\n> json = json.stringify({test:new date()});\n"{"test":"{timestamp}1380164268633"}"\n\n\n然后你可以创建一个 reviver 函数，它会自动过滤掉这些值:\n\nfunction json_deserialize_helper(key,value) {\n  if ( typeof value === \'string\' ) {\n    var regexp;\n    regexp = /^{timestamp}(\\d*)$/.exec(value);\n    if ( regexp ) {\n      return new date(+regexp[1]);\n    }\n  }\n  return value;\n}\n\n\n(来源:此代码基本上是从相关问题中的此答案复制而来:[https://stackoverflow.com/a/14509447/2572897](javascript:void()))\n\n现在有了这个设置，我们之前的结果的反序列化将再次产生一个 date 对象:\n\n> json.parse(json, json_deserialize_helper);\nobject {test: thu sep 26 2013 04:57:48 gmt+0200 (cest)}\n\n\n或者您可以选择不修改序列化，而是使用正则表达式来捕获标准序列化格式:\n\nfunction json_deserialize_helper(key,value) {\n  if ( typeof value === \'string\' ) {\n    var regexp;\n    regexp = /^\\d\\d\\d\\d-\\d\\d-\\d\\dt\\d\\d:\\d\\d:\\d\\d.\\d\\d\\dz$/.exec(value);\n    if ( regexp ) {\n      return new date(value);\n    }\n  }\n  return value;\n}\n\n\n例子:\n\n> json = json.stringify({test:new date()})\n"{"test":"2013-09-26t03:05:26.563z"}"\n> json.parse(json, json_deserialize_helper)\nobject {test: thu sep 26 2013 05:05:26 gmt+0200 (cest)\n\n\nhttps://stackoverflow.com/questions/9194372/',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"stringify对Date格式化",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-stringify%E6%A0%BC%E5%BC%8F%E5%8C%96Date.html",relativePath:"小需求/js/js-stringify格式化Date.md",key:"v-08b9d524",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-stringify%E6%A0%BC%E5%BC%8F%E5%8C%96Date.html",lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:null,content:"# stringify对Date格式化\n\nfunction dateFormat(date, fmt) {\n    if (null == date || undefined == date) return '';\n    var o = {\n        \"M+\": date.getMonth() + 1, //月份\n        \"d+\": date.getDate(), //日\n        \"h+\": date.getHours(), //小时\n        \"m+\": date.getMinutes(), //分\n        \"s+\": date.getSeconds(), //秒\n        \"S\": date.getMilliseconds() //毫秒\n    };\n    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    for (var k in o)\n        if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n    return fmt;\n}\n\nDate.prototype.toJSON = function () { return dateFormat(this,'yyyy-MM-dd')}\nvar data = new Date()\nJSON.stringify(data)\n\n\n归一化格式化时间函数\n\nfunction _formatNormalize(formatter){\n    if(typeof formatter === 'function') {\n        return formatter;\n    }\n    if(typeof formatter !== 'string') {\n        throw new Error('formatter must be a string or a function');\n    }\n    if(formatter === 'date') {\n        formatter = 'yyyy-MM-dd';\n    }\n    else if(formatter === 'datetime') {\n        formatter = 'yyyy-MM-dd HH:mm:ss';\n    }\n\n    return (dateInfo)=>{\n        const {yyyy, MM, dd, HH, mm, ss} = dateInfo;\n        return formatter\n            .replace(/yyyy/g, yyyy)\n            .replace(/MM/g, MM)\n            .replace(/dd/g, dd)\n            .replace(/HH/g, HH)\n            .replace(/mm/g, mm)\n            .replace(/ss/g, ss);\n    }\n}\n\n\n/**\n * 格式化一个日期\n * @param {Date} date 日期对象 \n */\nfunction formate(date, formatter, isPad = false) {\n    formatter = _formatNormalize(formatter);\n    const dateInfo = {\n        yyyy: date.getFullYear(),\n        MM: (date.getMonth() + 1).toString().padStart(isPad ? 2 : 1, '0'),\n        dd: date.getDate().toString().padStart(isPad ? 2 : 1, '0'),\n        HH: date.getHours().toString().padStart(isPad ? 2 : 1, '0'),\n        mm: date.getMinutes().toString().padStart(isPad ? 2 : 1, '0'),\n        ss: date.getSeconds().toString().padStart(isPad ? 2 : 1, '0'),\n    }\n    return formatter(dateInfo)\n}\n\nvar date = formate(new Date(), 'yyyy-MM-dd HH:mm:ss', true);\nconsole.log(date);\n",normalizedContent:"# stringify对date格式化\n\nfunction dateformat(date, fmt) {\n    if (null == date || undefined == date) return '';\n    var o = {\n        \"m+\": date.getmonth() + 1, //月份\n        \"d+\": date.getdate(), //日\n        \"h+\": date.gethours(), //小时\n        \"m+\": date.getminutes(), //分\n        \"s+\": date.getseconds(), //秒\n        \"s\": date.getmilliseconds() //毫秒\n    };\n    if (/(y+)/.test(fmt)) fmt = fmt.replace(regexp.$1, (date.getfullyear() + \"\").substr(4 - regexp.$1.length));\n    for (var k in o)\n        if (new regexp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(regexp.$1, (regexp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n    return fmt;\n}\n\ndate.prototype.tojson = function () { return dateformat(this,'yyyy-mm-dd')}\nvar data = new date()\njson.stringify(data)\n\n\n归一化格式化时间函数\n\nfunction _formatnormalize(formatter){\n    if(typeof formatter === 'function') {\n        return formatter;\n    }\n    if(typeof formatter !== 'string') {\n        throw new error('formatter must be a string or a function');\n    }\n    if(formatter === 'date') {\n        formatter = 'yyyy-mm-dd';\n    }\n    else if(formatter === 'datetime') {\n        formatter = 'yyyy-mm-dd hh:mm:ss';\n    }\n\n    return (dateinfo)=>{\n        const {yyyy, mm, dd, hh, mm, ss} = dateinfo;\n        return formatter\n            .replace(/yyyy/g, yyyy)\n            .replace(/mm/g, mm)\n            .replace(/dd/g, dd)\n            .replace(/hh/g, hh)\n            .replace(/mm/g, mm)\n            .replace(/ss/g, ss);\n    }\n}\n\n\n/**\n * 格式化一个日期\n * @param {date} date 日期对象 \n */\nfunction formate(date, formatter, ispad = false) {\n    formatter = _formatnormalize(formatter);\n    const dateinfo = {\n        yyyy: date.getfullyear(),\n        mm: (date.getmonth() + 1).tostring().padstart(ispad ? 2 : 1, '0'),\n        dd: date.getdate().tostring().padstart(ispad ? 2 : 1, '0'),\n        hh: date.gethours().tostring().padstart(ispad ? 2 : 1, '0'),\n        mm: date.getminutes().tostring().padstart(ispad ? 2 : 1, '0'),\n        ss: date.getseconds().tostring().padstart(ispad ? 2 : 1, '0'),\n    }\n    return formatter(dateinfo)\n}\n\nvar date = formate(new date(), 'yyyy-mm-dd hh:mm:ss', true);\nconsole.log(date);\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"JSON.parse",frontmatter:{title:"JSON.parse","autoGroup-1":"api"},regularPath:"/web/js/api-JSON.parse%E5%87%BD%E6%95%B0.html",relativePath:"web/js/api-JSON.parse函数.md",key:"v-07918935",path:"/web/js/api-JSON.parse%E5%87%BD%E6%95%B0.html",headers:[{level:2,title:"JSON.parse 语法",slug:"json-parse-语法",normalizedTitle:"json.parse 语法",charIndex:2},{level:2,title:"JSON规范",slug:"json规范",normalizedTitle:"json规范",charIndex:239},{level:2,title:"异常处理方法",slug:"异常处理方法",normalizedTitle:"异常处理方法",charIndex:916},{level:2,title:"reviver 参数",slug:"reviver-参数",normalizedTitle:"reviver 参数",charIndex:1176},{level:2,title:"JSON.parse 特性",slug:"json-parse-特性",normalizedTitle:"json.parse 特性",charIndex:2579}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"JSON.parse 语法 JSON规范 异常处理方法 reviver 参数 JSON.parse 特性",content:"# JSON.parse 语法\n\nJSON.parse(text[, reviver])\n\n\n * text：要被解析成的字符串。 如果传入数字则会转换成十进制数字输出。 传入BigInt类型会忽略符号，将有效数字转为十进制。 如果传入布尔值则直接输出。 如果传入null则输出null。 不支持其他类型的值，否则报错。\n * reviver： 可选，转换器, 可以用来修改解析生成的原始值。 返回值： JavaScript对象/值, 对应给定JSON文本的对象/值。\n\n\n# JSON规范\n\nJSON是一种语法，用来序列化对象、数组、数值、字符串、布尔值和null，它是基于JavaScript语法，但是又与之不同。也就是说Javascript不是JSON，JSON也不是Javascript，两者不可等同。为了便于梳理JSON规范的具体细则，见下表：\n\n注：JSON字符串未说明，默认使用单引号\n\n\n\nJSON.parse(''); // SyntaxError，待解析的字符串不能为空\nJSON.parse('{\"x\": 1}'); // {x: 1}, 属性必须用双引号括起来\nJSON.parse('{\"x\": 1,}'); // SyntaxError,最后一个属性不能有逗号\nJSON.parse('[1,2,]'); // SyntaxError,最后一个属性不能有逗号\nJSON.parse('001'); // SyntaxError, 数字禁止有前导0\nJSON.parse('11a'); // SyntaxError,不符合数值格式\nJSON.parse('1.'); // SyntaxError，如果有小数点，则小数点后至少有一位数字\nJSON.parse('\"\\n\"'); // SyntaxError,控制字符不能被解析\nJSON.parse(null); // null\nJSON.parse(undefined); // SyntaxError\nJSON.parse(NaN); // SyntaxError\nJSON.parse(Infinity); // SyntaxError\n\n\n\n# 异常处理方法\n\n使用JSON.parse()是很可能遇到抛出异常的，js遇到异常，则会停止执行后面的代码，导致页面显示不正常。一般来说处理异常有两种方式：\n\n * 判断是否符合JSON规范。JSON规范还是有点多的，每个都判断不是很现实，一般判断是否为undefined以及字符串是否为空就能解决大多数不符合JSON规范的情况\n * 使用try/catch，将可能会产生异常的JSON.parse()使用try/catch代码块包裹，并在catch中处理异常情况。\n\n我们看看 JSON 的字符串解析规则：\n\n\n\n\n# reviver 参数\n\nreviver函数，用于转换处理解析到的JavaScript值，处理完后返回最终的结果。\n\n转换过程：\n\n * 解析的值本身和它可能包含的所有属性，按照一定遍历顺序分别调用reviver函数，属性名和值作为参数两个参数 key 和 value 传入。 遍历顺序：按照层级，从内往外遍历，最终到达最顶层，则是解析值本身。\n * reviver返回undefined，则删除该对象，如果返回了其他值，则该值会成为当前属性的新值。\n * 当遍历到最顶层时，因为没有属性了，参数key是空字符串''，参数value则是当前解析值。\n\n对于reviver函数的两个参数 key 和 value，不同的数据类型：\n\n * 基本值类型数据（string、number、boolean）和null，以及空对象{}和空数组[]： 则key是空字符串，value是对应解析值； 因为已经是最顶层，并没有别的属性。\n * Object对象： 则key和value都存在，与属性名和值各自对应； 最顶层会返回一个参数key为空的值。\n * 数组： key对应数组索引，value对应元素值； 最顶层会返回一个参数key为空的值。\n\n基本类型的转换：\n\nJSON.parse('5', function (key, value) {\n  console.log(`key:${key}, value:${value}`)\n})\n// key:, value:5\nJSON.parse('null', function (key, value) {\n  console.log(`key:${key}, value:${value}`)\n})\n// key:, value:null\nJSON.parse('{}', function (key, value) {\n  console.log(`key:${key}, value:`, value)\n})\n// key:, value:{}\n\n\nObject对象和数组：\n\nJSON.parse('[1, 2]', function (key, value) {\n  console.log(`key:${key}, value:`, value)\n})\n// key:0, value: 1\n// key:1, value: 2\n// key:, value: (2) [empty × 2]\n\nJSON.parse('{ \"user\": \"张三\", \"info\": { \"age\": 25, \"sex\": 1 } }', function (key, value) {\n  console.log(`key:${key}, value::`, value)\n})\n// key:user, value:: 张三\n// key:age, value:: 25\n// key:sex, value:: 1\n// key:info, value:: {}\n// key:, value:: {}\n\n\n\n数据处理：\n\nJSON.parse('[1, 2]', function (key, value) {\n  if(key === '') {\n    return value\n  }\n  return value + 3\n})\n// [4, 5]\n\n\n\n# JSON.parse 特性\n\n在解析JSON字符串的时候，需要注意到JSON格式的一些规范，不然就容易报错。 JSON数据对值的类型和格式，都有严格的规定，具体的规则如下：\n\n该方法使用字符串类型JSON格式数据。 该方法也支持数字、布尔值和null三个类型的值，转换出对应的字面值。 BigInt数值将忽略符号，将有效数字转为十进制。 不支持其他类型。\n\nJSON.parse('\"中国\"')\n// '中国'\nJSON.parse(null) // null\nJSON.parse(111.) // 111\nJSON.parse(0x12) // 18\nJSON.parse(22n) // 22\nJSON.parse(true) // true\nJSON.parse([])\n// Uncaught SyntaxError: Unexpected end of JSON input\n\n\n字符串必须使用双引号，不能使用单引号。\n\nJSON.parse('\"String\"')\n// 'String'\nJSON.parse('\\'String\\'')\n// Uncaught SyntaxError: Unexpected token ' in JSON at position 0\n\n\n只支持十进制的字符串，但小数点后必须跟上数字，其他进制、还有包括BigInt的字符串都不支持。\n\nJSON.parse('111') // 111\nJSON.parse('0x12')\n// Uncaught SyntaxError: Unexpected token x in JSON at position 1\nJSON.parse('111.232') // 111.232\nJSON.parse('111.')\n// Uncaught SyntaxError: Unexpected end of JSON input\nJSON.parse('12n')\n// Uncaught SyntaxError: Unexpected non-whitespace character after JSON at position 2\n\n\n不能使用undefined、Symbol，数字也不支持NaN、Infinity和-Infinity，都会报错。\n\nJSON.parse(undefined)\n// Uncaught SyntaxError: Unexpected token u in JSON at position 0\nJSON.parse(Symbol())\n// Uncaught TypeError: Cannot convert a Symbol value to a string\nJSON.parse(Infinity)\n// Uncaught SyntaxError: \"Infinity\" is not valid JSON\n\n\n复合类型，只能是：[] 和 {} 这样的字面量。 不能使用对象构造函数，因为会当作执行语句，不支持。 不能使用Object和Array，也不能是函数、RegExp对象、Date对象、Error对象等。\n\nJSON.parse('[]')\n// []\nJSON.parse('Object()')\n// Uncaught SyntaxError: Unexpected token O in JSON at position 0\n\n\n对象的属性名必须使用双引号。\n\nJSON.parse('{\"key\": 1 }')\n// {key: 1}\nJSON.parse('{key: 1 }')\n// Uncaught SyntaxError: Unexpected token k in JSON at position 1\n\n\n数组或对象最后一个成员的后面，不能加逗号。\n\n\nJSON.parse('[1, 2, 3, 4, ]')\n// VM2771:1 Uncaught SyntaxError: Unexpected token ] in JSON at position 13\nJSON.parse('{\"key\" : 1, }')\n// VM2779:1 Uncaught SyntaxError: Unexpected token } in JSON at position 12\n\n\n支持unicode转义。\n\nJSON.parse('{\"\\u0066\":333}')\n// {f: 333}\n\n\n部分控制字符、转义字符不支持，如’\\n’、'\\t’等。\n\nJSON.parse('\"\\n\"')\n// Uncaught SyntaxError: Unexpected token\nJSON.parse('\\n')\n// Uncaught SyntaxError: Unexpected end of JSON input\n\n\n解析的其他方法 将JSON字符串转成Javascript对象值，还可以使用其他方法，但是非安全代码。\n\nconst str = '{\"name\":\"json\",\"age\":18}'\nconst json = JSON.parse(str)\nconst json = eval(\"(\" + str + \")\")\nconst json = (new Function(\"return \" + str))()\n",normalizedContent:"# json.parse 语法\n\njson.parse(text[, reviver])\n\n\n * text：要被解析成的字符串。 如果传入数字则会转换成十进制数字输出。 传入bigint类型会忽略符号，将有效数字转为十进制。 如果传入布尔值则直接输出。 如果传入null则输出null。 不支持其他类型的值，否则报错。\n * reviver： 可选，转换器, 可以用来修改解析生成的原始值。 返回值： javascript对象/值, 对应给定json文本的对象/值。\n\n\n# json规范\n\njson是一种语法，用来序列化对象、数组、数值、字符串、布尔值和null，它是基于javascript语法，但是又与之不同。也就是说javascript不是json，json也不是javascript，两者不可等同。为了便于梳理json规范的具体细则，见下表：\n\n注：json字符串未说明，默认使用单引号\n\n\n\njson.parse(''); // syntaxerror，待解析的字符串不能为空\njson.parse('{\"x\": 1}'); // {x: 1}, 属性必须用双引号括起来\njson.parse('{\"x\": 1,}'); // syntaxerror,最后一个属性不能有逗号\njson.parse('[1,2,]'); // syntaxerror,最后一个属性不能有逗号\njson.parse('001'); // syntaxerror, 数字禁止有前导0\njson.parse('11a'); // syntaxerror,不符合数值格式\njson.parse('1.'); // syntaxerror，如果有小数点，则小数点后至少有一位数字\njson.parse('\"\\n\"'); // syntaxerror,控制字符不能被解析\njson.parse(null); // null\njson.parse(undefined); // syntaxerror\njson.parse(nan); // syntaxerror\njson.parse(infinity); // syntaxerror\n\n\n\n# 异常处理方法\n\n使用json.parse()是很可能遇到抛出异常的，js遇到异常，则会停止执行后面的代码，导致页面显示不正常。一般来说处理异常有两种方式：\n\n * 判断是否符合json规范。json规范还是有点多的，每个都判断不是很现实，一般判断是否为undefined以及字符串是否为空就能解决大多数不符合json规范的情况\n * 使用try/catch，将可能会产生异常的json.parse()使用try/catch代码块包裹，并在catch中处理异常情况。\n\n我们看看 json 的字符串解析规则：\n\n\n\n\n# reviver 参数\n\nreviver函数，用于转换处理解析到的javascript值，处理完后返回最终的结果。\n\n转换过程：\n\n * 解析的值本身和它可能包含的所有属性，按照一定遍历顺序分别调用reviver函数，属性名和值作为参数两个参数 key 和 value 传入。 遍历顺序：按照层级，从内往外遍历，最终到达最顶层，则是解析值本身。\n * reviver返回undefined，则删除该对象，如果返回了其他值，则该值会成为当前属性的新值。\n * 当遍历到最顶层时，因为没有属性了，参数key是空字符串''，参数value则是当前解析值。\n\n对于reviver函数的两个参数 key 和 value，不同的数据类型：\n\n * 基本值类型数据（string、number、boolean）和null，以及空对象{}和空数组[]： 则key是空字符串，value是对应解析值； 因为已经是最顶层，并没有别的属性。\n * object对象： 则key和value都存在，与属性名和值各自对应； 最顶层会返回一个参数key为空的值。\n * 数组： key对应数组索引，value对应元素值； 最顶层会返回一个参数key为空的值。\n\n基本类型的转换：\n\njson.parse('5', function (key, value) {\n  console.log(`key:${key}, value:${value}`)\n})\n// key:, value:5\njson.parse('null', function (key, value) {\n  console.log(`key:${key}, value:${value}`)\n})\n// key:, value:null\njson.parse('{}', function (key, value) {\n  console.log(`key:${key}, value:`, value)\n})\n// key:, value:{}\n\n\nobject对象和数组：\n\njson.parse('[1, 2]', function (key, value) {\n  console.log(`key:${key}, value:`, value)\n})\n// key:0, value: 1\n// key:1, value: 2\n// key:, value: (2) [empty × 2]\n\njson.parse('{ \"user\": \"张三\", \"info\": { \"age\": 25, \"sex\": 1 } }', function (key, value) {\n  console.log(`key:${key}, value::`, value)\n})\n// key:user, value:: 张三\n// key:age, value:: 25\n// key:sex, value:: 1\n// key:info, value:: {}\n// key:, value:: {}\n\n\n\n数据处理：\n\njson.parse('[1, 2]', function (key, value) {\n  if(key === '') {\n    return value\n  }\n  return value + 3\n})\n// [4, 5]\n\n\n\n# json.parse 特性\n\n在解析json字符串的时候，需要注意到json格式的一些规范，不然就容易报错。 json数据对值的类型和格式，都有严格的规定，具体的规则如下：\n\n该方法使用字符串类型json格式数据。 该方法也支持数字、布尔值和null三个类型的值，转换出对应的字面值。 bigint数值将忽略符号，将有效数字转为十进制。 不支持其他类型。\n\njson.parse('\"中国\"')\n// '中国'\njson.parse(null) // null\njson.parse(111.) // 111\njson.parse(0x12) // 18\njson.parse(22n) // 22\njson.parse(true) // true\njson.parse([])\n// uncaught syntaxerror: unexpected end of json input\n\n\n字符串必须使用双引号，不能使用单引号。\n\njson.parse('\"string\"')\n// 'string'\njson.parse('\\'string\\'')\n// uncaught syntaxerror: unexpected token ' in json at position 0\n\n\n只支持十进制的字符串，但小数点后必须跟上数字，其他进制、还有包括bigint的字符串都不支持。\n\njson.parse('111') // 111\njson.parse('0x12')\n// uncaught syntaxerror: unexpected token x in json at position 1\njson.parse('111.232') // 111.232\njson.parse('111.')\n// uncaught syntaxerror: unexpected end of json input\njson.parse('12n')\n// uncaught syntaxerror: unexpected non-whitespace character after json at position 2\n\n\n不能使用undefined、symbol，数字也不支持nan、infinity和-infinity，都会报错。\n\njson.parse(undefined)\n// uncaught syntaxerror: unexpected token u in json at position 0\njson.parse(symbol())\n// uncaught typeerror: cannot convert a symbol value to a string\njson.parse(infinity)\n// uncaught syntaxerror: \"infinity\" is not valid json\n\n\n复合类型，只能是：[] 和 {} 这样的字面量。 不能使用对象构造函数，因为会当作执行语句，不支持。 不能使用object和array，也不能是函数、regexp对象、date对象、error对象等。\n\njson.parse('[]')\n// []\njson.parse('object()')\n// uncaught syntaxerror: unexpected token o in json at position 0\n\n\n对象的属性名必须使用双引号。\n\njson.parse('{\"key\": 1 }')\n// {key: 1}\njson.parse('{key: 1 }')\n// uncaught syntaxerror: unexpected token k in json at position 1\n\n\n数组或对象最后一个成员的后面，不能加逗号。\n\n\njson.parse('[1, 2, 3, 4, ]')\n// vm2771:1 uncaught syntaxerror: unexpected token ] in json at position 13\njson.parse('{\"key\" : 1, }')\n// vm2779:1 uncaught syntaxerror: unexpected token } in json at position 12\n\n\n支持unicode转义。\n\njson.parse('{\"\\u0066\":333}')\n// {f: 333}\n\n\n部分控制字符、转义字符不支持，如’\\n’、'\\t’等。\n\njson.parse('\"\\n\"')\n// uncaught syntaxerror: unexpected token\njson.parse('\\n')\n// uncaught syntaxerror: unexpected end of json input\n\n\n解析的其他方法 将json字符串转成javascript对象值，还可以使用其他方法，但是非安全代码。\n\nconst str = '{\"name\":\"json\",\"age\":18}'\nconst json = json.parse(str)\nconst json = eval(\"(\" + str + \")\")\nconst json = (new function(\"return \" + str))()\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"参数归一化",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%8F%82%E6%95%B0%E5%BD%92%E4%B8%80%E5%8C%96.html",relativePath:"小需求/js/js-参数归一化.md",key:"v-399fa958",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%8F%82%E6%95%B0%E5%BD%92%E4%B8%80%E5%8C%96.html",lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:null,content:"# 参数归一化\n\n需求：将一下这些方法，进行归一化处理\n\n//2024-8-8 00:00:00\nformate(new Date(),'datetime');\n\n//2024-08-08\nformate(new Date(),'date',true);\n\n//2024-08-08 00:00:00\nformate(new Date(),'datetime',true);\n\n//2024年08月08日 00:00:00.000\nformate(new Date(),'yyyy年MM月dd日 HH:mm:ss.ms',true);\n\nformate(new Date('2022/1/1'),(dateInfo) => {\n    const { year } = dateInfo;\n    const thisYear = new Date().getFullYear();\n    if(year < thisYear) {\n        return `${thisYear - year}年前`;\n    } else if (year > thisYear) {\n        return `${year - thisYear}年后`;\n    } else {\n        return '今年';\n    }\n})\n\n\n归一化函数编写\n\nfunction _formatNormalize(formatter){\n    if(typeof formatter === 'function') {\n        return formatter;\n    }\n    if(typeof formatter !== 'string') {\n        throw new Error('formatter must be a string or a function');\n    }\n    if(formatter === 'date') {\n        formatter = 'yyyy-MM-dd';\n    }\n    else if(formatter === 'datetime') {\n        formatter = 'yyyy-MM-dd HH:mm:ss';\n    }\n\n    return (dateInfo)=>{\n        const {yyyy, MM, dd, HH, mm, ss} = dateInfo;\n        return formatter\n            .replace(/yyyy/g, yyyy)\n            .replace(/MM/g, MM)\n            .replace(/dd/g, dd)\n            .replace(/HH/g, HH)\n            .replace(/mm/g, mm)\n            .replace(/ss/g, ss);\n    }\n}\n\n\n/**\n * 格式化一个日期\n * @param {Date} date 日期对象 \n */\nfunction formate(date, formatter, isPad = false) {\n    formatter = _formatNormalize(formatter);\n    const dateInfo = {\n        yyyy: date.getFullYear(),\n        MM: (date.getMonth() + 1).toString().padStart(isPad ? 2 : 1, '0'),\n        dd: date.getDate().toString().padStart(isPad ? 2 : 1, '0'),\n        HH: date.getHours().toString().padStart(isPad ? 2 : 1, '0'),\n        mm: date.getMinutes().toString().padStart(isPad ? 2 : 1, '0'),\n        ss: date.getSeconds().toString().padStart(isPad ? 2 : 1, '0'),\n    }\n    return formatter(dateInfo)\n}\n\nvar date = formate(new Date(), 'yyyy-MM-dd HH:mm:ss', true);\nconsole.log(date);\n",normalizedContent:"# 参数归一化\n\n需求：将一下这些方法，进行归一化处理\n\n//2024-8-8 00:00:00\nformate(new date(),'datetime');\n\n//2024-08-08\nformate(new date(),'date',true);\n\n//2024-08-08 00:00:00\nformate(new date(),'datetime',true);\n\n//2024年08月08日 00:00:00.000\nformate(new date(),'yyyy年mm月dd日 hh:mm:ss.ms',true);\n\nformate(new date('2022/1/1'),(dateinfo) => {\n    const { year } = dateinfo;\n    const thisyear = new date().getfullyear();\n    if(year < thisyear) {\n        return `${thisyear - year}年前`;\n    } else if (year > thisyear) {\n        return `${year - thisyear}年后`;\n    } else {\n        return '今年';\n    }\n})\n\n\n归一化函数编写\n\nfunction _formatnormalize(formatter){\n    if(typeof formatter === 'function') {\n        return formatter;\n    }\n    if(typeof formatter !== 'string') {\n        throw new error('formatter must be a string or a function');\n    }\n    if(formatter === 'date') {\n        formatter = 'yyyy-mm-dd';\n    }\n    else if(formatter === 'datetime') {\n        formatter = 'yyyy-mm-dd hh:mm:ss';\n    }\n\n    return (dateinfo)=>{\n        const {yyyy, mm, dd, hh, mm, ss} = dateinfo;\n        return formatter\n            .replace(/yyyy/g, yyyy)\n            .replace(/mm/g, mm)\n            .replace(/dd/g, dd)\n            .replace(/hh/g, hh)\n            .replace(/mm/g, mm)\n            .replace(/ss/g, ss);\n    }\n}\n\n\n/**\n * 格式化一个日期\n * @param {date} date 日期对象 \n */\nfunction formate(date, formatter, ispad = false) {\n    formatter = _formatnormalize(formatter);\n    const dateinfo = {\n        yyyy: date.getfullyear(),\n        mm: (date.getmonth() + 1).tostring().padstart(ispad ? 2 : 1, '0'),\n        dd: date.getdate().tostring().padstart(ispad ? 2 : 1, '0'),\n        hh: date.gethours().tostring().padstart(ispad ? 2 : 1, '0'),\n        mm: date.getminutes().tostring().padstart(ispad ? 2 : 1, '0'),\n        ss: date.getseconds().tostring().padstart(ispad ? 2 : 1, '0'),\n    }\n    return formatter(dateinfo)\n}\n\nvar date = formate(new date(), 'yyyy-mm-dd hh:mm:ss', true);\nconsole.log(date);\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"js美化输出",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-json%E6%A0%BC%E5%BC%8F%E5%8C%96.html",relativePath:"小需求/js/js-json格式化.md",key:"v-71f9a1aa",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-json%E6%A0%BC%E5%BC%8F%E5%8C%96.html",lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:null,content:'# js美化输出\n\n官方文档 JSON.stringify()\n\n\n\nconst people = [\n    { name: \'Alice\', age: 30, sex: \'female\' },\n    { name: \'Bob\', age: 25, sex: \'male\' },\n    { name: \'Charlie\', age: 30, sex: \'male\' },\n    { name: \'Diana\', age: 25, sex: \'female\' },\n    { name: \'Eva\', age: 25, sex: \'female\' },\n    { name: \'Frank\', age: 25, sex: \'male\' },\n    { name: \'Grace\', age: 20, sex: \'female\' }\n];\n\nvar jsonstr = JSON.stringify(people,null,2);\n\n\n\n> [\n>   {\n>     "name": "Alice",\n>     "age": 30,\n>     "sex": "female"\n>   },\n>   {\n>     "name": "Bob",\n>     "age": 25,\n>     "sex": "male"\n>   },\n>   {\n>     "name": "Charlie",\n>     "age": 30,\n>     "sex": "male"\n>   },\n>   {\n>     "name": "Diana",\n>     "age": 25,\n>     "sex": "female"\n>   },\n>   {\n>     "name": "Eva",\n>     "age": 25,\n>     "sex": "female"\n>   },\n>   {\n>     "name": "Frank",\n>     "age": 25,\n>     "sex": "male"\n>   },\n>   {\n>     "name": "Grace",\n>     "age": 20,\n>     "sex": "female"\n>   }\n> ]',normalizedContent:'# js美化输出\n\n官方文档 json.stringify()\n\n\n\nconst people = [\n    { name: \'alice\', age: 30, sex: \'female\' },\n    { name: \'bob\', age: 25, sex: \'male\' },\n    { name: \'charlie\', age: 30, sex: \'male\' },\n    { name: \'diana\', age: 25, sex: \'female\' },\n    { name: \'eva\', age: 25, sex: \'female\' },\n    { name: \'frank\', age: 25, sex: \'male\' },\n    { name: \'grace\', age: 20, sex: \'female\' }\n];\n\nvar jsonstr = json.stringify(people,null,2);\n\n\n\n> [\n>   {\n>     "name": "alice",\n>     "age": 30,\n>     "sex": "female"\n>   },\n>   {\n>     "name": "bob",\n>     "age": 25,\n>     "sex": "male"\n>   },\n>   {\n>     "name": "charlie",\n>     "age": 30,\n>     "sex": "male"\n>   },\n>   {\n>     "name": "diana",\n>     "age": 25,\n>     "sex": "female"\n>   },\n>   {\n>     "name": "eva",\n>     "age": 25,\n>     "sex": "female"\n>   },\n>   {\n>     "name": "frank",\n>     "age": 25,\n>     "sex": "male"\n>   },\n>   {\n>     "name": "grace",\n>     "age": 20,\n>     "sex": "female"\n>   }\n> ]',charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3},{title:"js分组",frontmatter:{},regularPath:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%88%86%E7%BB%84.html",relativePath:"小需求/js/js-分组.md",key:"v-f324a4b4",path:"/%E5%B0%8F%E9%9C%80%E6%B1%82/js/js-%E5%88%86%E7%BB%84.html",headers:[{level:2,title:"需求",slug:"需求",normalizedTitle:"需求",charIndex:11},{level:2,title:"最佳实践",slug:"最佳实践",normalizedTitle:"最佳实践",charIndex:28},{level:2,title:"一代：",slug:"一代",normalizedTitle:"一代：",charIndex:1105},{level:2,title:"二代：封装函数",slug:"二代-封装函数",normalizedTitle:"二代：封装函数",charIndex:1349}],lastUpdated:"2024年8月13日星期二上午9点03分",lastUpdatedTimestamp:1723511022e3,headersStr:"需求 最佳实践 一代： 二代：封装函数",content:"# js分组\n\n\n# 需求\n\n对数组自定义分组\n\n\n# 最佳实践\n\n// 待分组数组\nconst people = [\n    { name: 'Alice', age: 30, sex: 'female' },\n    { name: 'Bob', age: 25, sex: 'male' },\n    { name: 'Charlie', age: 30, sex: 'male' },\n    { name: 'Diana', age: 25, sex: 'female' },\n    { name: 'Eva', age: 25, sex: 'female' },\n    { name: 'Frank', age: 25, sex: 'male' },\n    { name: 'Grace', age: 20, sex: 'female' }\n];\n\n\n//最佳实践：分组函数\nfunction groupBy(arr, generateKey) {\n    //参数归一化：类型为String\n    if (typeof generateKey === 'string') {\n        const propName = generateKey;\n        generateKey = (item) => item[propName];\n    }\n    const result = {};\n    for (let i = 0; i < arr.length; i++) {\n        const key = generateKey(arr[i], i, arr)\n        if (result[key]) {\n            result[key].push(arr[i]);\n        } else {\n            result[key] = [arr[i]];\n        }\n    }\n    return result;\n}\n\nconsole.log(groupBy(people, 'sex'))\nconsole.log(groupBy(people, (p) => p.age))\nconsole.log(groupBy(people, (p) => `${p.sex}-${p.age}`))\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(groupBy(arr, (n) => (n % 2 === 0 ? '偶' : '奇')));\n\n\n\n\n# 一代：\n\n//初版函数\nconst result = {}\nfor (let i = 0; i < people.length; i++) {\n    const key = people[i].sex;\n    if (result[key]) {\n        result[key].push(people[i]);\n    } else {\n        result[key] = [people[i]];\n    }\n}\nconsole.log(result)\n\n\n\n# 二代：封装函数\n\n\n//函数封装\nfunction groupBy(arr, propName) {\n    const result = {}\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i][propName];\n        if (result[key]) {\n            result[key].push(arr[i]);\n        } else {\n            result[key] = [arr[i]];\n        }\n    }\n    return result;\n}\nconsole.log(groupBy(people, \"sex\"))\n",normalizedContent:"# js分组\n\n\n# 需求\n\n对数组自定义分组\n\n\n# 最佳实践\n\n// 待分组数组\nconst people = [\n    { name: 'alice', age: 30, sex: 'female' },\n    { name: 'bob', age: 25, sex: 'male' },\n    { name: 'charlie', age: 30, sex: 'male' },\n    { name: 'diana', age: 25, sex: 'female' },\n    { name: 'eva', age: 25, sex: 'female' },\n    { name: 'frank', age: 25, sex: 'male' },\n    { name: 'grace', age: 20, sex: 'female' }\n];\n\n\n//最佳实践：分组函数\nfunction groupby(arr, generatekey) {\n    //参数归一化：类型为string\n    if (typeof generatekey === 'string') {\n        const propname = generatekey;\n        generatekey = (item) => item[propname];\n    }\n    const result = {};\n    for (let i = 0; i < arr.length; i++) {\n        const key = generatekey(arr[i], i, arr)\n        if (result[key]) {\n            result[key].push(arr[i]);\n        } else {\n            result[key] = [arr[i]];\n        }\n    }\n    return result;\n}\n\nconsole.log(groupby(people, 'sex'))\nconsole.log(groupby(people, (p) => p.age))\nconsole.log(groupby(people, (p) => `${p.sex}-${p.age}`))\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(groupby(arr, (n) => (n % 2 === 0 ? '偶' : '奇')));\n\n\n\n\n# 一代：\n\n//初版函数\nconst result = {}\nfor (let i = 0; i < people.length; i++) {\n    const key = people[i].sex;\n    if (result[key]) {\n        result[key].push(people[i]);\n    } else {\n        result[key] = [people[i]];\n    }\n}\nconsole.log(result)\n\n\n\n# 二代：封装函数\n\n\n//函数封装\nfunction groupby(arr, propname) {\n    const result = {}\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i][propname];\n        if (result[key]) {\n            result[key].push(arr[i]);\n        } else {\n            result[key] = [arr[i]];\n        }\n    }\n    return result;\n}\nconsole.log(groupby(people, \"sex\"))\n",charsets:{cjk:!0},rightAnchor:{expand:{trigger:"click",clickModeDefaultOpen:!0,showDepth:6},isIgnore:!1},createdTime:1723511022e3}],themeConfig:{nav:[{text:"linux",items:[{text:"基本使用",link:"/zs-use/linux/基本使用/"},{text:"常见问题",link:"/zs-use/linux/常见问题/"},{text:"shell编程",link:"/zs-use/linux/shell编程/"},{text:"虚拟化",link:"/zs-use/linux/虚拟化/"}]},{text:"中间件",items:[{text:"docker",link:"/中间件/docker/"},{text:"nginx",link:"/中间件/nginx/"}]},{text:"小工具",items:[{text:"axure",link:"/小工具/axure/"},{text:"cygwin",link:"/小工具/cygwin/"},{text:"markmap",link:"/小工具/markmap/"},{text:"html2md",link:"/小工具/html2md/"},{text:"markdown",link:"/小工具/markdown/"},{text:"codeAi",link:"/小工具/codeAi/"},{text:"ppt",link:"/小工具/ppt/图形绘制"}]},{text:"大工具",items:[{text:"git",link:"/大工具/git/常用命令"},{text:"idea",link:"/大工具/idea/"}]},{text:"小需求",items:[{text:"js",link:"/小需求/js/js-分组"},{text:"html",link:"/小需求/html/video-播放视频"},{text:"iframe",link:"/小需求/iframe/iframe-自适应高度"},{text:"css",link:"/小需求/css/撑开高度"}]},{text:"web",items:[{text:"js",link:"/web/js/JSON-stringify函数"},{text:"iframe",link:"/web/iframe/iframe-简单使用"}]},{text:"小框架",items:[{text:"kkFileView",link:"/小框架/kkfileview/"}]},{text:"zs-se",items:[{text:"基础",link:"/zs-se/基础/"},{text:"设计模式",link:"/zs-se/设计模式/"},{text:"io",link:"/zs-se/io/"}]},{text:"zs-ee-框架",items:[{text:"mybatis-plus",link:"/zs-ee-框架/mybatis-plus/"},{text:"spring",link:"/zs-ee-框架/spring/"},{text:"cloud-gateway",link:"/zs-ee-框架/cloud-gateway/"}]},{text:"zs-tool-小结",items:[{text:"面经手册",link:"/zs-tool-小结/面经手册/面试--0.开篇"},{text:"网址收藏",link:"/zs-tool-小结/网址收藏/实用网站"},{text:"文件",link:"/zs-tool-小结/文件/"}]},{text:"zs-tool-框架",items:[{text:"Vuepress",link:"/zs-tool-框架/vuepress/"},{text:"java报表",link:"/zs-tool-框架/java报表/"},{text:"消息推送",link:"/zs-tool-框架/消息推送/消息推送技术方案"}]},{text:"zs-use",items:[{text:"Linux",ariaLabel:"Linux分组",items:[{text:"基本使用",link:"/zs-use/linux/基本使用/"},{text:"常见问题",link:"/zs-use/linux/常见问题/"},{text:"shell编程",link:"/zs-use/linux/shell编程/"},{text:"虚拟化",link:"/zs-use/linux/虚拟化/"}]},{text:"IDEA",link:"/zs-use/idea/"},{text:"Git",link:"/zs-use/git/"},{text:"env",link:"/zs-use/env/"},{text:"maven",link:"/zs-use/maven/自定义archetype-01"},{text:"下载视频",link:"/zs-use/下载视频/下载器"}]},{text:"zs-web",items:[{text:"tool-小结",link:"/zs-web/tool-小结/"},{text:"project",link:"/zs-web/project/html/"},{text:"node",link:"/zs-web/node/nvm--安装"}]},{text:"zs-project",items:[{text:"mallchat",link:"/zs-project/mallchat/"}]}],search:!1,lastUpdated:"更新时间"}};t(31),t(268);r.a.component("CountUp",()=>t.e(163).then(t.bind(null,1326))),r.a.component("Badge",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,1327))),r.a.component("CodeGroup",()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,1321))),r.a.component("CodeBlock",()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,1320)));t(269);
/**
  * vue-class-component v7.2.6
  * (c) 2015-present Evan You
  * @license MIT
  */
function Ce(n){return(Ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function _e(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function Te(n){return function(n){if(Array.isArray(n)){for(var e=0,t=new Array(n.length);e<n.length;e++)t[e]=n[e];return t}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Fe(){return"undefined"!=typeof Reflect&&Reflect.defineMetadata&&Reflect.getOwnMetadataKeys}function Ie(n,e){De(n,e),Object.getOwnPropertyNames(e.prototype).forEach((function(t){De(n.prototype,e.prototype,t)})),Object.getOwnPropertyNames(e).forEach((function(t){De(n,e,t)}))}function De(n,e,t){(t?Reflect.getOwnMetadataKeys(e,t):Reflect.getOwnMetadataKeys(e)).forEach((function(r){var o=t?Reflect.getOwnMetadata(r,e,t):Reflect.getOwnMetadata(r,e);t?Reflect.defineMetadata(r,o,n,t):Reflect.defineMetadata(r,o,n)}))}var Pe={__proto__:[]}instanceof Array;function Le(n){return function(e,t,r){var o="function"==typeof e?e:e.constructor;o.__decorators__||(o.__decorators__=[]),"number"!=typeof r&&(r=void 0),o.__decorators__.push((function(e){return n(e,t,r)}))}}function Oe(n,e){var t=e.prototype._init;e.prototype._init=function(){var e=this,t=Object.getOwnPropertyNames(n);if(n.$options.props)for(var r in n.$options.props)n.hasOwnProperty(r)||t.push(r);t.forEach((function(t){Object.defineProperty(e,t,{get:function(){return n[t]},set:function(e){n[t]=e},configurable:!0})}))};var r=new e;e.prototype._init=t;var o={};return Object.keys(r).forEach((function(n){void 0!==r[n]&&(o[n]=r[n])})),o}var Me=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured","serverPrefetch"];function $e(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e.name=e.name||n._componentTag||n.name;var t=n.prototype;Object.getOwnPropertyNames(t).forEach((function(n){if("constructor"!==n)if(Me.indexOf(n)>-1)e[n]=t[n];else{var r=Object.getOwnPropertyDescriptor(t,n);void 0!==r.value?"function"==typeof r.value?(e.methods||(e.methods={}))[n]=r.value:(e.mixins||(e.mixins=[])).push({data:function(){return _e({},n,r.value)}}):(r.get||r.set)&&((e.computed||(e.computed={}))[n]={get:r.get,set:r.set})}})),(e.mixins||(e.mixins=[])).push({data:function(){return Oe(this,n)}});var o=n.__decorators__;o&&(o.forEach((function(n){return n(e)})),delete n.__decorators__);var s=Object.getPrototypeOf(n.prototype),a=s instanceof r.a?s.constructor:r.a,i=a.extend(e);return qe(i,n,a),Fe()&&Ie(i,n),i}var Re={prototype:!0,arguments:!0,callee:!0,caller:!0};function qe(n,e,t){Object.getOwnPropertyNames(e).forEach((function(r){if(!Re[r]){var o=Object.getOwnPropertyDescriptor(n,r);if(!o||o.configurable){var s,a,i=Object.getOwnPropertyDescriptor(e,r);if(!Pe){if("cid"===r)return;var l=Object.getOwnPropertyDescriptor(t,r);if(s=i.value,a=Ce(s),null!=s&&("object"===a||"function"===a)&&l&&l.value===i.value)return}0,Object.defineProperty(n,r,i)}}}))}function Ne(n){return"function"==typeof n?$e(n):function(e){return $e(e,n)}}Ne.registerHooks=function(n){Me.push.apply(Me,Te(n))};var He=Ne;function Ue(n){return Le((function(e,t){void 0===e.inject&&(e.inject={}),Array.isArray(e.inject)||(e.inject[t]=n||t)}))}function Ye(n){var e=function(){var t=this,r="function"==typeof n?n.call(this):n;for(var o in(r=Object.create(r||null)).__reactiveInject__=this.__reactiveInject__||{},e.managed)r[e.managed[o]]=this[o];var s=function(n){r[e.managedReactive[n]]=a[n],Object.defineProperty(r.__reactiveInject__,e.managedReactive[n],{enumerable:!0,get:function(){return t[n]}})},a=this;for(var o in e.managedReactive)s(o);return r};return e.managed={},e.managedReactive={},e}function Ze(n){return"function"!=typeof n||!n.managed&&!n.managedReactive}var Je="undefined"!=typeof Reflect&&void 0!==Reflect.getMetadata;function Xe(n,e,t){if(Je&&!Array.isArray(n)&&"function"!=typeof n&&void 0===n.type){var r=Reflect.getMetadata("design:type",e,t);r!==Object&&(n.type=r)}}function We(n){return void 0===n&&(n={}),function(e,t){Xe(n,e,t),Le((function(e,t){(e.props||(e.props={}))[t]=n}))(e,t)}}function Ge(n,e){void 0===e&&(e={});var t=e.deep,r=void 0!==t&&t,o=e.immediate,s=void 0!==o&&o;return Le((function(e,t){"object"!=typeof e.watch&&(e.watch=Object.create(null));var o=e.watch;"object"!=typeof o[n]||Array.isArray(o[n])?void 0===o[n]&&(o[n]=[]):o[n]=[o[n]],o[n].push({handler:t,deep:r,immediate:s})}))}var Qe=t(17);const Ke=(n,e)=>`${n}${Object(Qe.stringify)(e,{addQueryPrefix:!0})}`,Ve=(n,e)=>`${n.replace(/\/$/,"")}/${e.replace(/^\//,"")}`;var nt=t(119),et=t.n(nt);const tt=n=>et()(n,"YYYY-MM-DD HH:mm:ss"),rt=n=>(n.split("#")[0]||"").split("?")[0]||"";
/*!
 * vue-i18n v8.28.2 
 * (c) 2022 kazuya kawaguchi
 * Released under the MIT License.
 */
var ot=["compactDisplay","currency","currencyDisplay","currencySign","localeMatcher","notation","numberingSystem","signDisplay","style","unit","unitDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits"],st=["dateStyle","timeStyle","calendar","localeMatcher","hour12","hourCycle","timeZone","formatMatcher","weekday","era","year","month","day","hour","minute","second","timeZoneName"];function at(n,e){"undefined"!=typeof console&&(console.warn("[vue-i18n] "+n),e&&console.warn(e.stack))}var it=Array.isArray;function lt(n){return null!==n&&"object"==typeof n}function ct(n){return"string"==typeof n}var pt=Object.prototype.toString;function dt(n){return"[object Object]"===pt.call(n)}function ut(n){return null==n}function mt(n){return"function"==typeof n}function ht(){for(var n=[],e=arguments.length;e--;)n[e]=arguments[e];var t=null,r=null;return 1===n.length?lt(n[0])||it(n[0])?r=n[0]:"string"==typeof n[0]&&(t=n[0]):2===n.length&&("string"==typeof n[0]&&(t=n[0]),(lt(n[1])||it(n[1]))&&(r=n[1])),{locale:t,params:r}}function gt(n){return JSON.parse(JSON.stringify(n))}function ft(n,e){return!!~n.indexOf(e)}var bt=Object.prototype.hasOwnProperty;function yt(n,e){return bt.call(n,e)}function vt(n){for(var e=arguments,t=Object(n),r=1;r<arguments.length;r++){var o=e[r];if(null!=o){var s=void 0;for(s in o)yt(o,s)&&(lt(o[s])?t[s]=vt(t[s],o[s]):t[s]=o[s])}}return t}function xt(n,e){if(n===e)return!0;var t=lt(n),r=lt(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=it(n),s=it(e);if(o&&s)return n.length===e.length&&n.every((function(n,t){return xt(n,e[t])}));if(o||s)return!1;var a=Object.keys(n),i=Object.keys(e);return a.length===i.length&&a.every((function(t){return xt(n[t],e[t])}))}catch(n){return!1}}function wt(n){return null!=n&&Object.keys(n).forEach((function(e){"string"==typeof n[e]&&(n[e]=n[e].replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"))})),n}var Et={name:"i18n",functional:!0,props:{tag:{type:[String,Boolean,Object],default:"span"},path:{type:String,required:!0},locale:{type:String},places:{type:[Array,Object]}},render:function(n,e){var t=e.data,r=e.parent,o=e.props,s=e.slots,a=r.$i18n;if(a){var i=o.path,l=o.locale,c=o.places,p=s(),d=a.i(i,l,function(n){var e;for(e in n)if("default"!==e)return!1;return Boolean(e)}(p)||c?function(n,e){var t=e?function(n){0;return Array.isArray(n)?n.reduce(zt,{}):Object.assign({},n)}(e):{};if(!n)return t;var r=(n=n.filter((function(n){return n.tag||""!==n.text.trim()}))).every(St);0;return n.reduce(r?kt:zt,t)}(p.default,c):p),u=o.tag&&!0!==o.tag||!1===o.tag?o.tag:"span";return u?n(u,t,d):d}}};function kt(n,e){return e.data&&e.data.attrs&&e.data.attrs.place&&(n[e.data.attrs.place]=e),n}function zt(n,e,t){return n[t]=e,n}function St(n){return Boolean(n.data&&n.data.attrs&&n.data.attrs.place)}var At,Bt={name:"i18n-n",functional:!0,props:{tag:{type:[String,Boolean,Object],default:"span"},value:{type:Number,required:!0},format:{type:[String,Object]},locale:{type:String}},render:function(n,e){var t=e.props,r=e.parent,o=e.data,s=r.$i18n;if(!s)return null;var a=null,i=null;ct(t.format)?a=t.format:lt(t.format)&&(t.format.key&&(a=t.format.key),i=Object.keys(t.format).reduce((function(n,e){var r;return ft(ot,e)?Object.assign({},n,((r={})[e]=t.format[e],r)):n}),null));var l=t.locale||s.locale,c=s._ntp(t.value,l,a,i),p=c.map((function(n,e){var t,r=o.scopedSlots&&o.scopedSlots[n.type];return r?r(((t={})[n.type]=n.value,t.index=e,t.parts=c,t)):n.value})),d=t.tag&&!0!==t.tag||!1===t.tag?t.tag:"span";return d?n(d,{attrs:o.attrs,class:o.class,staticClass:o.staticClass},p):p}};function jt(n,e,t){Tt(n,t)&&Ft(n,e,t)}function Ct(n,e,t,r){if(Tt(n,t)){var o=t.context.$i18n;(function(n,e){var t=e.context;return n._locale===t.$i18n.locale})(n,t)&&xt(e.value,e.oldValue)&&xt(n._localeMessage,o.getLocaleMessage(o.locale))||Ft(n,e,t)}}function _t(n,e,t,r){if(t.context){var o=t.context.$i18n||{};e.modifiers.preserve||o.preserveDirectiveContent||(n.textContent=""),n._vt=void 0,delete n._vt,n._locale=void 0,delete n._locale,n._localeMessage=void 0,delete n._localeMessage}else at("Vue instance does not exists in VNode context")}function Tt(n,e){var t=e.context;return t?!!t.$i18n||(at("VueI18n instance does not exists in Vue instance"),!1):(at("Vue instance does not exists in VNode context"),!1)}function Ft(n,e,t){var r,o,s=function(n){var e,t,r,o;ct(n)?e=n:dt(n)&&(e=n.path,t=n.locale,r=n.args,o=n.choice);return{path:e,locale:t,args:r,choice:o}}(e.value),a=s.path,i=s.locale,l=s.args,c=s.choice;if(a||i||l)if(a){var p=t.context;n._vt=n.textContent=null!=c?(r=p.$i18n).tc.apply(r,[a,c].concat(It(i,l))):(o=p.$i18n).t.apply(o,[a].concat(It(i,l))),n._locale=p.$i18n.locale,n._localeMessage=p.$i18n.getLocaleMessage(p.$i18n.locale)}else at("`path` is required in v-t directive");else at("value type not supported")}function It(n,e){var t=[];return n&&t.push(n),e&&(Array.isArray(e)||dt(e))&&t.push(e),t}function Dt(n,e){void 0===e&&(e={bridge:!1}),Dt.installed=!0;var t;(At=n).version&&Number(At.version.split(".")[0]);(t=At).prototype.hasOwnProperty("$i18n")||Object.defineProperty(t.prototype,"$i18n",{get:function(){return this._i18n}}),t.prototype.$t=function(n){for(var e=[],t=arguments.length-1;t-- >0;)e[t]=arguments[t+1];var r=this.$i18n;return r._t.apply(r,[n,r.locale,r._getMessages(),this].concat(e))},t.prototype.$tc=function(n,e){for(var t=[],r=arguments.length-2;r-- >0;)t[r]=arguments[r+2];var o=this.$i18n;return o._tc.apply(o,[n,o.locale,o._getMessages(),this,e].concat(t))},t.prototype.$te=function(n,e){var t=this.$i18n;return t._te(n,t.locale,t._getMessages(),e)},t.prototype.$d=function(n){for(var e,t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return(e=this.$i18n).d.apply(e,[n].concat(t))},t.prototype.$n=function(n){for(var e,t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return(e=this.$i18n).n.apply(e,[n].concat(t))},At.mixin(function(n){function e(){this!==this.$root&&this.$options.__INTLIFY_META__&&this.$el&&this.$el.setAttribute("data-intlify",this.$options.__INTLIFY_META__)}return void 0===n&&(n=!1),n?{mounted:e}:{beforeCreate:function(){var n=this.$options;if(n.i18n=n.i18n||(n.__i18nBridge||n.__i18n?{}:null),n.i18n)if(n.i18n instanceof Gt){if(n.__i18nBridge||n.__i18n)try{var e=n.i18n&&n.i18n.messages?n.i18n.messages:{};(n.__i18nBridge||n.__i18n).forEach((function(n){e=vt(e,JSON.parse(n))})),Object.keys(e).forEach((function(t){n.i18n.mergeLocaleMessage(t,e[t])}))}catch(n){0}this._i18n=n.i18n,this._i18nWatcher=this._i18n.watchI18nData()}else if(dt(n.i18n)){var t=this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof Gt?this.$root.$i18n:null;if(t&&(n.i18n.root=this.$root,n.i18n.formatter=t.formatter,n.i18n.fallbackLocale=t.fallbackLocale,n.i18n.formatFallbackMessages=t.formatFallbackMessages,n.i18n.silentTranslationWarn=t.silentTranslationWarn,n.i18n.silentFallbackWarn=t.silentFallbackWarn,n.i18n.pluralizationRules=t.pluralizationRules,n.i18n.preserveDirectiveContent=t.preserveDirectiveContent),n.__i18nBridge||n.__i18n)try{var r=n.i18n&&n.i18n.messages?n.i18n.messages:{};(n.__i18nBridge||n.__i18n).forEach((function(n){r=vt(r,JSON.parse(n))})),n.i18n.messages=r}catch(n){0}var o=n.i18n.sharedMessages;o&&dt(o)&&(n.i18n.messages=vt(n.i18n.messages,o)),this._i18n=new Gt(n.i18n),this._i18nWatcher=this._i18n.watchI18nData(),(void 0===n.i18n.sync||n.i18n.sync)&&(this._localeWatcher=this.$i18n.watchLocale()),t&&t.onComponentInstanceCreated(this._i18n)}else 0;else this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof Gt?this._i18n=this.$root.$i18n:n.parent&&n.parent.$i18n&&n.parent.$i18n instanceof Gt&&(this._i18n=n.parent.$i18n)},beforeMount:function(){var n=this.$options;n.i18n=n.i18n||(n.__i18nBridge||n.__i18n?{}:null),n.i18n?(n.i18n instanceof Gt||dt(n.i18n))&&(this._i18n.subscribeDataChanging(this),this._subscribing=!0):(this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof Gt||n.parent&&n.parent.$i18n&&n.parent.$i18n instanceof Gt)&&(this._i18n.subscribeDataChanging(this),this._subscribing=!0)},mounted:e,beforeDestroy:function(){if(this._i18n){var n=this;this.$nextTick((function(){n._subscribing&&(n._i18n.unsubscribeDataChanging(n),delete n._subscribing),n._i18nWatcher&&(n._i18nWatcher(),n._i18n.destroyVM(),delete n._i18nWatcher),n._localeWatcher&&(n._localeWatcher(),delete n._localeWatcher)}))}}}}(e.bridge)),At.directive("t",{bind:jt,update:Ct,unbind:_t}),At.component(Et.name,Et),At.component(Bt.name,Bt),At.config.optionMergeStrategies.i18n=function(n,e){return void 0===e?n:e}}var Pt=function(){this._caches=Object.create(null)};Pt.prototype.interpolate=function(n,e){if(!e)return[n];var t=this._caches[n];return t||(t=function(n){var e=[],t=0,r="";for(;t<n.length;){var o=n[t++];if("{"===o){r&&e.push({type:"text",value:r}),r="";var s="";for(o=n[t++];void 0!==o&&"}"!==o;)s+=o,o=n[t++];var a="}"===o,i=Lt.test(s)?"list":a&&Ot.test(s)?"named":"unknown";e.push({value:s,type:i})}else"%"===o?"{"!==n[t]&&(r+=o):r+=o}return r&&e.push({type:"text",value:r}),e}(n),this._caches[n]=t),function(n,e){var t=[],r=0,o=Array.isArray(e)?"list":lt(e)?"named":"unknown";if("unknown"===o)return t;for(;r<n.length;){var s=n[r];switch(s.type){case"text":t.push(s.value);break;case"list":t.push(e[parseInt(s.value,10)]);break;case"named":"named"===o&&t.push(e[s.value]);break;case"unknown":0}r++}return t}(t,e)};var Lt=/^(?:\d)+/,Ot=/^(?:\w)+/;var Mt=[];Mt[0]={ws:[0],ident:[3,0],"[":[4],eof:[7]},Mt[1]={ws:[1],".":[2],"[":[4],eof:[7]},Mt[2]={ws:[2],ident:[3,0],0:[3,0],number:[3,0]},Mt[3]={ident:[3,0],0:[3,0],number:[3,0],ws:[1,1],".":[2,1],"[":[4,1],eof:[7,1]},Mt[4]={"'":[5,0],'"':[6,0],"[":[4,2],"]":[1,3],eof:8,else:[4,0]},Mt[5]={"'":[4,0],eof:8,else:[5,0]},Mt[6]={'"':[4,0],eof:8,else:[6,0]};var $t=/^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;function Rt(n){if(null==n)return"eof";switch(n.charCodeAt(0)){case 91:case 93:case 46:case 34:case 39:return n;case 95:case 36:case 45:return"ident";case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return"ident"}function qt(n){var e,t,r,o=n.trim();return("0"!==n.charAt(0)||!isNaN(n))&&(r=o,$t.test(r)?(t=(e=o).charCodeAt(0))!==e.charCodeAt(e.length-1)||34!==t&&39!==t?e:e.slice(1,-1):"*"+o)}var Nt=function(){this._cache=Object.create(null)};Nt.prototype.parsePath=function(n){var e=this._cache[n];return e||(e=function(n){var e,t,r,o,s,a,i,l=[],c=-1,p=0,d=0,u=[];function m(){var e=n[c+1];if(5===p&&"'"===e||6===p&&'"'===e)return c++,r="\\"+e,u[0](),!0}for(u[1]=function(){void 0!==t&&(l.push(t),t=void 0)},u[0]=function(){void 0===t?t=r:t+=r},u[2]=function(){u[0](),d++},u[3]=function(){if(d>0)d--,p=4,u[0]();else{if(d=0,void 0===t)return!1;if(!1===(t=qt(t)))return!1;u[1]()}};null!==p;)if(c++,"\\"!==(e=n[c])||!m()){if(o=Rt(e),8===(s=(i=Mt[p])[o]||i.else||8))return;if(p=s[0],(a=u[s[1]])&&(r=void 0===(r=s[2])?e:r,!1===a()))return;if(7===p)return l}}(n))&&(this._cache[n]=e),e||[]},Nt.prototype.getPathValue=function(n,e){if(!lt(n))return null;var t=this.parsePath(e);if(0===t.length)return null;for(var r=t.length,o=n,s=0;s<r;){var a=o[t[s]];if(null==a)return null;o=a,s++}return o};var Ht,Ut=/<\/?[\w\s="/.':;#-\/]+>/,Yt=/(?:@(?:\.[a-zA-Z]+)?:(?:[\w\-_|./]+|\([\w\-_:|./]+\)))/g,Zt=/^@(?:\.([a-zA-Z]+))?:/,Jt=/[()]/g,Xt={upper:function(n){return n.toLocaleUpperCase()},lower:function(n){return n.toLocaleLowerCase()},capitalize:function(n){return""+n.charAt(0).toLocaleUpperCase()+n.substr(1)}},Wt=new Pt,Gt=function(n){var e=this;void 0===n&&(n={}),!At&&"undefined"!=typeof window&&window.Vue&&Dt(window.Vue);var t=n.locale||"en-US",r=!1!==n.fallbackLocale&&(n.fallbackLocale||"en-US"),o=n.messages||{},s=n.dateTimeFormats||n.datetimeFormats||{},a=n.numberFormats||{};this._vm=null,this._formatter=n.formatter||Wt,this._modifiers=n.modifiers||{},this._missing=n.missing||null,this._root=n.root||null,this._sync=void 0===n.sync||!!n.sync,this._fallbackRoot=void 0===n.fallbackRoot||!!n.fallbackRoot,this._fallbackRootWithEmptyString=void 0===n.fallbackRootWithEmptyString||!!n.fallbackRootWithEmptyString,this._formatFallbackMessages=void 0!==n.formatFallbackMessages&&!!n.formatFallbackMessages,this._silentTranslationWarn=void 0!==n.silentTranslationWarn&&n.silentTranslationWarn,this._silentFallbackWarn=void 0!==n.silentFallbackWarn&&!!n.silentFallbackWarn,this._dateTimeFormatters={},this._numberFormatters={},this._path=new Nt,this._dataListeners=new Set,this._componentInstanceCreatedListener=n.componentInstanceCreatedListener||null,this._preserveDirectiveContent=void 0!==n.preserveDirectiveContent&&!!n.preserveDirectiveContent,this.pluralizationRules=n.pluralizationRules||{},this._warnHtmlInMessage=n.warnHtmlInMessage||"off",this._postTranslation=n.postTranslation||null,this._escapeParameterHtml=n.escapeParameterHtml||!1,"__VUE_I18N_BRIDGE__"in n&&(this.__VUE_I18N_BRIDGE__=n.__VUE_I18N_BRIDGE__),this.getChoiceIndex=function(n,t){var r=Object.getPrototypeOf(e);if(r&&r.getChoiceIndex)return r.getChoiceIndex.call(e,n,t);var o,s;return e.locale in e.pluralizationRules?e.pluralizationRules[e.locale].apply(e,[n,t]):(o=n,s=t,o=Math.abs(o),2===s?o?o>1?1:0:1:o?Math.min(o,2):0)},this._exist=function(n,t){return!(!n||!t)&&(!ut(e._path.getPathValue(n,t))||!!n[t])},"warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||Object.keys(o).forEach((function(n){e._checkLocaleMessage(n,e._warnHtmlInMessage,o[n])})),this._initVM({locale:t,fallbackLocale:r,messages:o,dateTimeFormats:s,numberFormats:a})},Qt={vm:{configurable:!0},messages:{configurable:!0},dateTimeFormats:{configurable:!0},numberFormats:{configurable:!0},availableLocales:{configurable:!0},locale:{configurable:!0},fallbackLocale:{configurable:!0},formatFallbackMessages:{configurable:!0},missing:{configurable:!0},formatter:{configurable:!0},silentTranslationWarn:{configurable:!0},silentFallbackWarn:{configurable:!0},preserveDirectiveContent:{configurable:!0},warnHtmlInMessage:{configurable:!0},postTranslation:{configurable:!0},sync:{configurable:!0}};Gt.prototype._checkLocaleMessage=function(n,e,t){var r=function(n,e,t,o){if(dt(t))Object.keys(t).forEach((function(s){var a=t[s];dt(a)?(o.push(s),o.push("."),r(n,e,a,o),o.pop(),o.pop()):(o.push(s),r(n,e,a,o),o.pop())}));else if(it(t))t.forEach((function(t,s){dt(t)?(o.push("["+s+"]"),o.push("."),r(n,e,t,o),o.pop(),o.pop()):(o.push("["+s+"]"),r(n,e,t,o),o.pop())}));else if(ct(t)){if(Ut.test(t)){var s="Detected HTML in message '"+t+"' of keypath '"+o.join("")+"' at '"+e+"'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";"warn"===n?at(s):"error"===n&&function(n,e){"undefined"!=typeof console&&(console.error("[vue-i18n] "+n),e&&console.error(e.stack))}(s)}}};r(e,n,t,[])},Gt.prototype._initVM=function(n){var e=At.config.silent;At.config.silent=!0,this._vm=new At({data:n,__VUE18N__INSTANCE__:!0}),At.config.silent=e},Gt.prototype.destroyVM=function(){this._vm.$destroy()},Gt.prototype.subscribeDataChanging=function(n){this._dataListeners.add(n)},Gt.prototype.unsubscribeDataChanging=function(n){!function(n,e){if(n.delete(e));}(this._dataListeners,n)},Gt.prototype.watchI18nData=function(){var n=this;return this._vm.$watch("$data",(function(){for(var e,t,r=(e=n._dataListeners,t=[],e.forEach((function(n){return t.push(n)})),t),o=r.length;o--;)At.nextTick((function(){r[o]&&r[o].$forceUpdate()}))}),{deep:!0})},Gt.prototype.watchLocale=function(n){if(n){if(!this.__VUE_I18N_BRIDGE__)return null;var e=this,t=this._vm;return this.vm.$watch("locale",(function(r){t.$set(t,"locale",r),e.__VUE_I18N_BRIDGE__&&n&&(n.locale.value=r),t.$forceUpdate()}),{immediate:!0})}if(!this._sync||!this._root)return null;var r=this._vm;return this._root.$i18n.vm.$watch("locale",(function(n){r.$set(r,"locale",n),r.$forceUpdate()}),{immediate:!0})},Gt.prototype.onComponentInstanceCreated=function(n){this._componentInstanceCreatedListener&&this._componentInstanceCreatedListener(n,this)},Qt.vm.get=function(){return this._vm},Qt.messages.get=function(){return gt(this._getMessages())},Qt.dateTimeFormats.get=function(){return gt(this._getDateTimeFormats())},Qt.numberFormats.get=function(){return gt(this._getNumberFormats())},Qt.availableLocales.get=function(){return Object.keys(this.messages).sort()},Qt.locale.get=function(){return this._vm.locale},Qt.locale.set=function(n){this._vm.$set(this._vm,"locale",n)},Qt.fallbackLocale.get=function(){return this._vm.fallbackLocale},Qt.fallbackLocale.set=function(n){this._localeChainCache={},this._vm.$set(this._vm,"fallbackLocale",n)},Qt.formatFallbackMessages.get=function(){return this._formatFallbackMessages},Qt.formatFallbackMessages.set=function(n){this._formatFallbackMessages=n},Qt.missing.get=function(){return this._missing},Qt.missing.set=function(n){this._missing=n},Qt.formatter.get=function(){return this._formatter},Qt.formatter.set=function(n){this._formatter=n},Qt.silentTranslationWarn.get=function(){return this._silentTranslationWarn},Qt.silentTranslationWarn.set=function(n){this._silentTranslationWarn=n},Qt.silentFallbackWarn.get=function(){return this._silentFallbackWarn},Qt.silentFallbackWarn.set=function(n){this._silentFallbackWarn=n},Qt.preserveDirectiveContent.get=function(){return this._preserveDirectiveContent},Qt.preserveDirectiveContent.set=function(n){this._preserveDirectiveContent=n},Qt.warnHtmlInMessage.get=function(){return this._warnHtmlInMessage},Qt.warnHtmlInMessage.set=function(n){var e=this,t=this._warnHtmlInMessage;if(this._warnHtmlInMessage=n,t!==n&&("warn"===n||"error"===n)){var r=this._getMessages();Object.keys(r).forEach((function(n){e._checkLocaleMessage(n,e._warnHtmlInMessage,r[n])}))}},Qt.postTranslation.get=function(){return this._postTranslation},Qt.postTranslation.set=function(n){this._postTranslation=n},Qt.sync.get=function(){return this._sync},Qt.sync.set=function(n){this._sync=n},Gt.prototype._getMessages=function(){return this._vm.messages},Gt.prototype._getDateTimeFormats=function(){return this._vm.dateTimeFormats},Gt.prototype._getNumberFormats=function(){return this._vm.numberFormats},Gt.prototype._warnDefault=function(n,e,t,r,o,s){if(!ut(t))return t;if(this._missing){var a=this._missing.apply(null,[n,e,r,o]);if(ct(a))return a}else 0;if(this._formatFallbackMessages){var i=ht.apply(void 0,o);return this._render(e,s,i.params,e)}return e},Gt.prototype._isFallbackRoot=function(n){return(this._fallbackRootWithEmptyString?!n:ut(n))&&!ut(this._root)&&this._fallbackRoot},Gt.prototype._isSilentFallbackWarn=function(n){return this._silentFallbackWarn instanceof RegExp?this._silentFallbackWarn.test(n):this._silentFallbackWarn},Gt.prototype._isSilentFallback=function(n,e){return this._isSilentFallbackWarn(e)&&(this._isFallbackRoot()||n!==this.fallbackLocale)},Gt.prototype._isSilentTranslationWarn=function(n){return this._silentTranslationWarn instanceof RegExp?this._silentTranslationWarn.test(n):this._silentTranslationWarn},Gt.prototype._interpolate=function(n,e,t,r,o,s,a){if(!e)return null;var i,l=this._path.getPathValue(e,t);if(it(l)||dt(l))return l;if(ut(l)){if(!dt(e))return null;if(!ct(i=e[t])&&!mt(i))return null}else{if(!ct(l)&&!mt(l))return null;i=l}return ct(i)&&(i.indexOf("@:")>=0||i.indexOf("@.")>=0)&&(i=this._link(n,e,i,r,"raw",s,a)),this._render(i,o,s,t)},Gt.prototype._link=function(n,e,t,r,o,s,a){var i=t,l=i.match(Yt);for(var c in l)if(l.hasOwnProperty(c)){var p=l[c],d=p.match(Zt),u=d[0],m=d[1],h=p.replace(u,"").replace(Jt,"");if(ft(a,h))return i;a.push(h);var g=this._interpolate(n,e,h,r,"raw"===o?"string":o,"raw"===o?void 0:s,a);if(this._isFallbackRoot(g)){if(!this._root)throw Error("unexpected error");var f=this._root.$i18n;g=f._translate(f._getMessages(),f.locale,f.fallbackLocale,h,r,o,s)}g=this._warnDefault(n,h,g,r,it(s)?s:[s],o),this._modifiers.hasOwnProperty(m)?g=this._modifiers[m](g):Xt.hasOwnProperty(m)&&(g=Xt[m](g)),a.pop(),i=g?i.replace(p,g):i}return i},Gt.prototype._createMessageContext=function(n,e,t,r){var o=this,s=it(n)?n:[],a=lt(n)?n:{},i=this._getMessages(),l=this.locale;return{list:function(n){return s[n]},named:function(n){return a[n]},values:n,formatter:e,path:t,messages:i,locale:l,linked:function(n){return o._interpolate(l,i[l]||{},n,null,r,void 0,[n])}}},Gt.prototype._render=function(n,e,t,r){if(mt(n))return n(this._createMessageContext(t,this._formatter||Wt,r,e));var o=this._formatter.interpolate(n,t,r);return o||(o=Wt.interpolate(n,t,r)),"string"!==e||ct(o)?o:o.join("")},Gt.prototype._appendItemToChain=function(n,e,t){var r=!1;return ft(n,e)||(r=!0,e&&(r="!"!==e[e.length-1],e=e.replace(/!/g,""),n.push(e),t&&t[e]&&(r=t[e]))),r},Gt.prototype._appendLocaleToChain=function(n,e,t){var r,o=e.split("-");do{var s=o.join("-");r=this._appendItemToChain(n,s,t),o.splice(-1,1)}while(o.length&&!0===r);return r},Gt.prototype._appendBlockToChain=function(n,e,t){for(var r=!0,o=0;o<e.length&&"boolean"==typeof r;o++){var s=e[o];ct(s)&&(r=this._appendLocaleToChain(n,s,t))}return r},Gt.prototype._getLocaleChain=function(n,e){if(""===n)return[];this._localeChainCache||(this._localeChainCache={});var t=this._localeChainCache[n];if(!t){e||(e=this.fallbackLocale),t=[];for(var r,o=[n];it(o);)o=this._appendBlockToChain(t,o,e);(o=ct(r=it(e)?e:lt(e)?e.default?e.default:null:e)?[r]:r)&&this._appendBlockToChain(t,o,null),this._localeChainCache[n]=t}return t},Gt.prototype._translate=function(n,e,t,r,o,s,a){for(var i,l=this._getLocaleChain(e,t),c=0;c<l.length;c++){var p=l[c];if(!ut(i=this._interpolate(p,n[p],r,o,s,a,[r])))return i}return null},Gt.prototype._t=function(n,e,t,r){for(var o,s=[],a=arguments.length-4;a-- >0;)s[a]=arguments[a+4];if(!n)return"";var i=ht.apply(void 0,s);this._escapeParameterHtml&&(i.params=wt(i.params));var l=i.locale||e,c=this._translate(t,l,this.fallbackLocale,n,r,"string",i.params);if(this._isFallbackRoot(c)){if(!this._root)throw Error("unexpected error");return(o=this._root).$t.apply(o,[n].concat(s))}return c=this._warnDefault(l,n,c,r,s,"string"),this._postTranslation&&null!=c&&(c=this._postTranslation(c,n)),c},Gt.prototype.t=function(n){for(var e,t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return(e=this)._t.apply(e,[n,this.locale,this._getMessages(),null].concat(t))},Gt.prototype._i=function(n,e,t,r,o){var s=this._translate(t,e,this.fallbackLocale,n,r,"raw",o);if(this._isFallbackRoot(s)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.i(n,e,o)}return this._warnDefault(e,n,s,r,[o],"raw")},Gt.prototype.i=function(n,e,t){return n?(ct(e)||(e=this.locale),this._i(n,e,this._getMessages(),null,t)):""},Gt.prototype._tc=function(n,e,t,r,o){for(var s,a=[],i=arguments.length-5;i-- >0;)a[i]=arguments[i+5];if(!n)return"";void 0===o&&(o=1);var l={count:o,n:o},c=ht.apply(void 0,a);return c.params=Object.assign(l,c.params),a=null===c.locale?[c.params]:[c.locale,c.params],this.fetchChoice((s=this)._t.apply(s,[n,e,t,r].concat(a)),o)},Gt.prototype.fetchChoice=function(n,e){if(!n||!ct(n))return null;var t=n.split("|");return t[e=this.getChoiceIndex(e,t.length)]?t[e].trim():n},Gt.prototype.tc=function(n,e){for(var t,r=[],o=arguments.length-2;o-- >0;)r[o]=arguments[o+2];return(t=this)._tc.apply(t,[n,this.locale,this._getMessages(),null,e].concat(r))},Gt.prototype._te=function(n,e,t){for(var r=[],o=arguments.length-3;o-- >0;)r[o]=arguments[o+3];var s=ht.apply(void 0,r).locale||e;return this._exist(t[s],n)},Gt.prototype.te=function(n,e){return this._te(n,this.locale,this._getMessages(),e)},Gt.prototype.getLocaleMessage=function(n){return gt(this._vm.messages[n]||{})},Gt.prototype.setLocaleMessage=function(n,e){"warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||this._checkLocaleMessage(n,this._warnHtmlInMessage,e),this._vm.$set(this._vm.messages,n,e)},Gt.prototype.mergeLocaleMessage=function(n,e){"warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||this._checkLocaleMessage(n,this._warnHtmlInMessage,e),this._vm.$set(this._vm.messages,n,vt(void 0!==this._vm.messages[n]&&Object.keys(this._vm.messages[n]).length?Object.assign({},this._vm.messages[n]):{},e))},Gt.prototype.getDateTimeFormat=function(n){return gt(this._vm.dateTimeFormats[n]||{})},Gt.prototype.setDateTimeFormat=function(n,e){this._vm.$set(this._vm.dateTimeFormats,n,e),this._clearDateTimeFormat(n,e)},Gt.prototype.mergeDateTimeFormat=function(n,e){this._vm.$set(this._vm.dateTimeFormats,n,vt(this._vm.dateTimeFormats[n]||{},e)),this._clearDateTimeFormat(n,e)},Gt.prototype._clearDateTimeFormat=function(n,e){for(var t in e){var r=n+"__"+t;this._dateTimeFormatters.hasOwnProperty(r)&&delete this._dateTimeFormatters[r]}},Gt.prototype._localizeDateTime=function(n,e,t,r,o,s){for(var a=e,i=r[a],l=this._getLocaleChain(e,t),c=0;c<l.length;c++){var p=l[c];if(a=p,!ut(i=r[p])&&!ut(i[o]))break}if(ut(i)||ut(i[o]))return null;var d,u=i[o];if(s)d=new Intl.DateTimeFormat(a,Object.assign({},u,s));else{var m=a+"__"+o;(d=this._dateTimeFormatters[m])||(d=this._dateTimeFormatters[m]=new Intl.DateTimeFormat(a,u))}return d.format(n)},Gt.prototype._d=function(n,e,t,r){if(!t)return(r?new Intl.DateTimeFormat(e,r):new Intl.DateTimeFormat(e)).format(n);var o=this._localizeDateTime(n,e,this.fallbackLocale,this._getDateTimeFormats(),t,r);if(this._isFallbackRoot(o)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.d(n,t,e)}return o||""},Gt.prototype.d=function(n){for(var e=[],t=arguments.length-1;t-- >0;)e[t]=arguments[t+1];var r=this.locale,o=null,s=null;return 1===e.length?(ct(e[0])?o=e[0]:lt(e[0])&&(e[0].locale&&(r=e[0].locale),e[0].key&&(o=e[0].key)),s=Object.keys(e[0]).reduce((function(n,t){var r;return ft(st,t)?Object.assign({},n,((r={})[t]=e[0][t],r)):n}),null)):2===e.length&&(ct(e[0])&&(o=e[0]),ct(e[1])&&(r=e[1])),this._d(n,r,o,s)},Gt.prototype.getNumberFormat=function(n){return gt(this._vm.numberFormats[n]||{})},Gt.prototype.setNumberFormat=function(n,e){this._vm.$set(this._vm.numberFormats,n,e),this._clearNumberFormat(n,e)},Gt.prototype.mergeNumberFormat=function(n,e){this._vm.$set(this._vm.numberFormats,n,vt(this._vm.numberFormats[n]||{},e)),this._clearNumberFormat(n,e)},Gt.prototype._clearNumberFormat=function(n,e){for(var t in e){var r=n+"__"+t;this._numberFormatters.hasOwnProperty(r)&&delete this._numberFormatters[r]}},Gt.prototype._getNumberFormatter=function(n,e,t,r,o,s){for(var a=e,i=r[a],l=this._getLocaleChain(e,t),c=0;c<l.length;c++){var p=l[c];if(a=p,!ut(i=r[p])&&!ut(i[o]))break}if(ut(i)||ut(i[o]))return null;var d,u=i[o];if(s)d=new Intl.NumberFormat(a,Object.assign({},u,s));else{var m=a+"__"+o;(d=this._numberFormatters[m])||(d=this._numberFormatters[m]=new Intl.NumberFormat(a,u))}return d},Gt.prototype._n=function(n,e,t,r){if(!Gt.availabilities.numberFormat)return"";if(!t)return(r?new Intl.NumberFormat(e,r):new Intl.NumberFormat(e)).format(n);var o=this._getNumberFormatter(n,e,this.fallbackLocale,this._getNumberFormats(),t,r),s=o&&o.format(n);if(this._isFallbackRoot(s)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.n(n,Object.assign({},{key:t,locale:e},r))}return s||""},Gt.prototype.n=function(n){for(var e=[],t=arguments.length-1;t-- >0;)e[t]=arguments[t+1];var r=this.locale,o=null,s=null;return 1===e.length?ct(e[0])?o=e[0]:lt(e[0])&&(e[0].locale&&(r=e[0].locale),e[0].key&&(o=e[0].key),s=Object.keys(e[0]).reduce((function(n,t){var r;return ft(ot,t)?Object.assign({},n,((r={})[t]=e[0][t],r)):n}),null)):2===e.length&&(ct(e[0])&&(o=e[0]),ct(e[1])&&(r=e[1])),this._n(n,r,o,s)},Gt.prototype._ntp=function(n,e,t,r){if(!Gt.availabilities.numberFormat)return[];if(!t)return(r?new Intl.NumberFormat(e,r):new Intl.NumberFormat(e)).formatToParts(n);var o=this._getNumberFormatter(n,e,this.fallbackLocale,this._getNumberFormats(),t,r),s=o&&o.formatToParts(n);if(this._isFallbackRoot(s)){if(!this._root)throw Error("unexpected error");return this._root.$i18n._ntp(n,e,t,r)}return s||[]},Object.defineProperties(Gt.prototype,Qt),Object.defineProperty(Gt,"availabilities",{get:function(){if(!Ht){var n="undefined"!=typeof Intl;Ht={dateTimeFormat:n&&void 0!==Intl.DateTimeFormat,numberFormat:n&&void 0!==Intl.NumberFormat}}return Ht}}),Gt.install=Dt,Gt.version="8.28.2";var Kt=Gt;
/*!
 * vssue - A vue-powered issue-based comment plugin
 *
 * @version v1.4.8
 * @link https://vssue.js.org
 * @license MIT
 * @copyright 2018-2021 meteorlxy
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function Vt(n,e,t,r){var o,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var i=n.length-1;i>=0;i--)(o=n[i])&&(a=(s<3?o(a):s>3?o(e,t,a):o(e,t))||a);return s>3&&a&&Object.defineProperty(e,t,a),a}var nr=r.a.extend({name:"Iconfont"});function er(n,e,t,r,o,s,a,i,l,c){"boolean"!=typeof a&&(l=i,i=a,a=!1);const p="function"==typeof t?t.options:t;let d;if(n&&n.render&&(p.render=n.render,p.staticRenderFns=n.staticRenderFns,p._compiled=!0,o&&(p.functional=!0)),r&&(p._scopeId=r),s?(d=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),e&&e.call(this,l(n)),n&&n._registeredComponents&&n._registeredComponents.add(s)},p._ssrRegister=d):e&&(d=a?function(n){e.call(this,c(n,this.$root.$options.shadowRoot))}:function(n){e.call(this,i(n))}),d)if(p.functional){const n=p.render;p.render=function(e,t){return d.call(t),n(e,t)}}else{const n=p.beforeCreate;p.beforeCreate=n?[].concat(n,d):[d]}return t}"undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());const tr=er({render:function(n,e){var t=e._c;return t("svg",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}]},[t("symbol",{attrs:{id:"vssue-icon-bitbucket",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M579.5522464 489.45249493q4.8371808 38.38537173-30.81752427 61.55702827t-67.95459093 3.66689493q-23.79580907-10.37653333-32.6119616-35.34262826t-0.31207573-50.01020907 31.67573333-35.34262827q21.92335253-11.00068587 44.1587808-7.33379093t39.00952427 21.61127573 16.77409493 41.1160384zM647.19476053 476.65737173q-8.50407573-65.22392427-68.8908192-99.9424t-120.07131413-7.9579424q-38.38537173 17.08617173-61.24495253 53.9111616t-21.0651424 78.95527574q2.41859093 55.4715424 47.20152426 94.48106666t100.87862827 34.1723424q55.4715424-4.8371808 92.60860907-51.18049493t30.50544746-102.43900907zM792.93434133 146.32472427q-12.17097173-16.4620192-34.1723424-27.15062827t-35.34262826-13.41927573-43.30057174-7.64586667q-177.33729493-28.63299093-345.00022826 1.24830507-26.2144 4.29104747-40.25782827 7.33379093t-33.54819093 13.41927573-30.50544747 26.2144q18.2564576 17.08617173 46.34331413 27.6967616t44.78293334 13.41927574 53.36502826 7.02171413q138.95192427 17.71032427 273.06666667 0.62415253 38.38537173-4.8371808 54.53531413-7.33379093t44.1587808-13.1072 45.7191616-28.32091413zM827.65281813 777.10872427q-4.8371808 15.83786667-9.44030506 46.65539093t-8.50407574 51.18049493-17.39824746 42.6764192-35.34262827 34.4064q-52.4288 29.2571424-115.46819093 43.61264747t-123.1140576 13.41927573-122.8019808-11.3127616q-28.0088384-4.8371808-49.69813334-11.00068586t-46.65539093-16.4620192-44.4708576-26.52647574-31.67573333-37.4491424q-15.21371413-58.51428587-34.71847574-177.96144746l3.66689494-9.7523808 11.00068586-5.46133334q135.9091808 90.1900192 308.72137174 90.1900192t309.34552426-90.1900192q12.79512427 3.66689493 14.5895616 14.04342827t-3.0427424 27.46270507-4.8371808 22.54750506zM937.97175147 191.41973333q-15.83786667 101.8148576-67.64251414 399.22346667-3.0427424 18.2564576-16.4620192 34.1723424t-26.52647573 24.3419424-33.23611413 18.88060907q-153.61950507 76.7707424-371.8387808 53.67710506-151.12289493-16.4620192-240.14262827-84.72868586-9.12822827-7.33379093-15.52579093-16.1499424t-10.37653334-21.2992-5.46133333-20.75306667-3.66689493-24.10788587-3.3548192-21.2992q-5.46133333-30.50544747-16.1499424-91.43832426t-17.08617174-98.4600384-14.35550506-89.8779424-13.41927574-96.27550507q1.7944384-15.83786667 10.68860907-29.5692192t19.19268587-22.8595808 27.46270506-18.2564576 28.0088384-13.73135253 29.2571424-11.3127616q76.22460907-28.0088384 190.75657174-39.00952427 231.0144-22.54750507 412.01859093 30.50544747 94.48106667 28.0088384 131.072 74.35215253 9.7523808 12.17097173 10.0644576 31.0515808t-3.3548192 32.9240384z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-gitea",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M184.31868985 236.10860742C106.94832667 235.94086648 3.32655508 285.13080468 9.02973665 408.46209936c8.93218827 192.65010787 206.32096845 210.5144844 285.20099725 212.06608453 8.63864186 36.14810496 101.48307766 160.77938883 170.21479898 167.32127321h301.09442177c180.57278288-11.99345499 315.77172611-546.07960359 215.54670217-548.09249109-165.7696721 7.79993906-264.02374305 11.74184405-348.27147151 12.41280591v166.69224585l-26.25140843-11.61603761-0.16773997-154.99233728c-96.70246985-0.04193548-181.83083757-4.52899687-343.4069947-12.49667687-20.21274496-0.12580547-48.39316992-3.5644886-78.67035236-3.64835859z m10.94507577 68.14462849h9.22573371c10.98701124 98.75729283 28.85138778 156.50200291 64.99949274 244.73357185-92.25734394-10.90314029-170.75995634-37.69970509-185.18564974-137.75698809-7.46445813-51.78991757 17.69663558-105.84433456 110.96042329-107.01851827z m358.83913087 97.07988723c6.29027343 0.08386999 12.70635233 1.25805468 18.74501482 4.02577499l31.40943263 13.54505513-22.51917887 41.05451824a28.18042496 25.03528825 0 0 0-10.10637297 1.59353561 28.18042496 25.03528825 0 0 0-16.98373825 32.038459 28.18042496 25.03528825 0 0 0 4.69673781 7.29671718l-38.83195528 70.70267333a28.18042496 25.03528825 0 0 0-9.30960467 1.59353659 28.18042496 25.03528825 0 0 0-16.98373825 32.038459 28.18042496 25.03528825 0 0 0 36.06423497 15.09665623 28.18042496 25.03528825 0 0 0 16.94180276-32.08039449 28.18042496 25.03528825 0 0 0-6.62575434-9.22573468l37.82551056-68.85752581a28.18042496 25.03528825 0 0 0 12.28700044-1.25805469 28.18042496 25.03528825 0 0 0 8.93218826-4.69673783c14.59343435 6.12253248 26.54495386 11.11281671 35.14166122 15.34826717 12.91602778 6.37414341 17.48696012 10.60959485 18.87082027 15.30633169 1.38386015 4.61286685-0.12580547 13.50312062-7.42252263 29.10299872-5.45157063 11.61603859-14.46762889 28.09655497-25.11915823 47.51253164a28.18042496 25.03528825 0 0 0-10.52572486 1.59353659 28.18042496 25.03528825 0 0 0-16.98373826 32.038459 28.18042496 25.03528825 0 0 0 36.06423498 15.09665623 28.18042496 25.03528825 0 0 0 16.94180278-32.03845901 28.18042496 25.03528825 0 0 0-5.74511608-8.47090188c10.52572388-19.20630122 19.58371762-35.72875308 25.41270465-48.14155897 7.88380904-16.85793279 11.99345499-29.39654416 8.38703091-41.51580463-3.60642311-12.11926046-14.67730434-20.0030695-29.35460966-27.25785217-9.6450856-4.73867233-21.68047607-9.77089106-36.06423399-15.80955357a28.18042496 25.03528825 0 0 0-1.59353562-10.022502 28.18042496 25.03528825 0 0 0-6.08059796-8.7644483l22.14176246-40.38355541 122.61839638 52.96410227c22.14176247 9.6031511 31.2836262 33.12877372 20.54822685 52.8382968l-84.28966393 154.32137544c-10.77733482 19.66758857-37.23841869 27.80300855-59.38018118 18.24179293l-173.48574115-74.98005927c-22.14176247-9.5612156-31.32556167-33.12877372-20.54822687-52.83829679l84.28966395-154.27943995c7.38058716-13.54505513 22.22563246-21.59660511 37.951317-22.22563246h2.68384935z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-gitee",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M978.404275 409.561604H455.061338c-25.117645 0-45.499734 20.382089-45.499734 45.499734l-0.031997 113.781333c0 25.117645 20.350092 45.499734 45.499734 45.531731h318.594132c25.117645 0 45.499734 20.382089 45.499734 45.499735v22.749867a136.5312 136.5312 0 0 1-136.5312 136.5312H250.248539a45.499734 45.499734 0 0 1-45.499734-45.499734V341.343999a136.5312 136.5312 0 0 1 136.5312-136.5312L978.308284 204.780802c25.117645 0 45.499734-20.350092 45.499734-45.467738L1023.904009 45.531731h0.031997A45.499734 45.499734 0 0 0 978.468269 0h-0.031997L341.343999 0.031997C152.84967 0.031997 0.031997 152.84967 0.031997 341.343999v637.092273c0 25.117645 20.382089 45.499734 45.499734 45.499734h671.233072a307.171203 307.171203 0 0 0 307.171203-307.171203v-261.671468c0-25.117645-20.382089-45.499734-45.499734-45.499734z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-github",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M512 20.4425c-278.334 0-504 225.6345-504 504 0 222.6735 144.4275 411.6105 344.673 478.233 25.2 4.662 34.461-10.9305 34.461-24.255 0-12.0015-0.4725-51.723-0.693-93.8385-140.238 30.492-169.8165-59.472-169.8165-59.472-22.932-58.2435-55.944-73.7415-55.944-73.7415-45.738-31.2795 3.465-30.6495 3.465-30.6495 50.589 3.5595 77.238 51.9435 77.238 51.9435 44.9505 77.049 117.9045 54.7785 146.664 41.895 4.5045-32.571 17.577-54.81 32.004-67.41-111.951-12.726-229.635-55.9755-229.635-249.0705 0-55.0305 19.6875-99.981 51.9435-135.2925-5.229-12.6945-22.491-63.945 4.8825-133.371 0 0 42.336-13.545 138.6315 51.66 40.194-11.1825 83.3175-16.758 126.1575-16.9785 42.8085 0.189 85.9635 5.796 126.252 16.9785 96.201-65.205 138.4425-51.66 138.4425-51.66 27.4365 69.426 10.1745 120.6765 4.9455 133.371 32.319 35.28 51.8805 80.262 51.8805 135.2925 0 193.5675-117.9045 236.187-230.139 248.6925 18.081 15.6555 34.1775 46.305 34.1775 93.3345 0 67.4415-0.5985 121.716-0.5985 138.3165 0 13.419 9.072 29.1375 34.6185 24.192 200.151-66.717 344.3895-255.5595 344.3895-478.17 0-278.3655-225.666-504-504-504z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-gitlab",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M66.61375986 405.11600042L512.11376028 976.03999972 23.84576 621.65599958a39.312 39.312 0 0 1-14.07600042-43.30799944l56.8080007-173.26800028z m259.88400014 0h371.26800014L512.14975986 976.03999972zM215.11376 60.88400042l111.384 344.232H66.61375986l111.384-344.232a19.72800014 19.72800014 0 0 1 37.11600014 0z m742.49999972 344.232l56.8080007 173.2679993a39.23999986 39.23999986 0 0 1-14.07600042 43.30800042l-488.26800028 354.38400014 445.50000042-570.92400028z m0 0h-259.88400014l111.384-344.232a19.72800014 19.72800014 0 0 1 37.11600014 0z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-loading",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M843.307 742.24c0 3.217 2.607 5.824 5.824 5.824s5.824-2.607 5.824-5.824a5.823 5.823 0 0 0-5.824-5.824 5.823 5.823 0 0 0-5.824 5.824zM714.731 874.912c0 6.398 5.186 11.584 11.584 11.584s11.584-5.186 11.584-11.584-5.186-11.584-11.584-11.584-11.584 5.186-11.584 11.584zM541.419 943.2c0 9.614 7.794 17.408 17.408 17.408s17.408-7.794 17.408-17.408-7.794-17.408-17.408-17.408-17.408 7.794-17.408 17.408z m-186.56-9.152c0 12.795 10.373 23.168 23.168 23.168s23.168-10.373 23.168-23.168-10.373-23.168-23.168-23.168-23.168 10.373-23.168 23.168zM189.355 849.12c0 16.012 12.98 28.992 28.992 28.992s28.992-12.98 28.992-28.992-12.98-28.992-28.992-28.992-28.992 12.98-28.992 28.992zM74.731 704.736c0 19.228 15.588 34.816 34.816 34.816s34.816-15.588 34.816-34.816-15.588-34.816-34.816-34.816-34.816 15.588-34.816 34.816z m-43.008-177.28c0 22.41 18.166 40.576 40.576 40.576s40.576-18.166 40.576-40.576-18.166-40.576-40.576-40.576-40.576 18.166-40.576 40.576z m35.392-176.128c0 25.626 20.774 46.4 46.4 46.4s46.4-20.774 46.4-46.4c0-25.626-20.774-46.4-46.4-46.4-25.626 0-46.4 20.774-46.4 46.4z m106.176-142.016c0 28.843 23.381 52.224 52.224 52.224s52.224-23.381 52.224-52.224c0-28.843-23.381-52.224-52.224-52.224-28.843 0-52.224 23.381-52.224 52.224z m155.904-81.344c0 32.024 25.96 57.984 57.984 57.984s57.984-25.96 57.984-57.984-25.96-57.984-57.984-57.984-57.984 25.96-57.984 57.984z m175.104-5.056c0 35.24 28.568 63.808 63.808 63.808s63.808-28.568 63.808-63.808c0-35.24-28.568-63.808-63.808-63.808-35.24 0-63.808 28.568-63.808 63.808z m160.32 72.128c0 38.421 31.147 69.568 69.568 69.568s69.568-31.147 69.568-69.568-31.147-69.568-69.568-69.568-69.568 31.147-69.568 69.568z m113.92 135.488c0 41.638 33.754 75.392 75.392 75.392s75.392-33.754 75.392-75.392-33.754-75.392-75.392-75.392-75.392 33.754-75.392 75.392z m45.312 175.488c0 44.854 36.362 81.216 81.216 81.216s81.216-36.362 81.216-81.216c0-44.854-36.362-81.216-81.216-81.216-44.854 0-81.216 36.362-81.216 81.216z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-like",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 0 0-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4-20.5-21.5-48.1-33.4-77.9-33.4-52 0-98 35-111.8 85.1l-85.9 311H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h601.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-0.2-12.6-2-25.1-5.6-37.1zM184 852V568h81v284h-81z m636.4-353l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 22.4-13.2 42.6-33.6 51.8H329V564.8l99.5-360.5c5.2-18.9 22.5-32.2 42.2-32.3 7.6 0 15.1 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.2 32.1-19.6 43z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-unlike",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M885.9 490.3c3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-51.6-30.7-98.1-78.3-118.4-8.3-3.6-17.2-5.4-26.5-5.4H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h129.3l85.8 310.8C372.9 889 418.9 924 470.9 924c29.7 0 57.4-11.8 77.9-33.4 20.5-21.5 31-49.7 29.5-79.4l-6-122.9h239.9c12.1 0 23.9-3.2 34.3-9.3 40.4-23.5 65.5-66.1 65.5-111 0-28.3-9.3-55.5-26.1-77.7zM184 456V172h81v284h-81z m627.2 160.4H496.8l9.6 198.4c0.6 11.9-4.7 23.1-14.6 30.5-6.1 4.5-13.6 6.8-21.1 6.7-19.6-0.1-36.9-13.4-42.2-32.3L329 459.2V172h415.4c20.4 9.2 33.6 29.4 33.6 51.8 0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 9.7-2.3 18.9-6.9 27.3l-14 25.5 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 19.1-11 37.5-28.8 48.4z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-heart",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9zM512 814.8S156 586.7 156 385.5C156 283.6 240.3 201 344.3 201c73.1 0 136.5 40.8 167.7 100.4C543.2 241.8 606.6 201 679.7 201c104 0 188.3 82.6 188.3 184.5 0 201.2-356 429.3-356 429.3z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-edit",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M723.2 917.76H286.72c-65.28 0-118.4-51.2-118.4-113.92V261.76C168.32 198.4 221.44 147.2 286.72 147.2h375.04c17.92 0 32 14.08 32 32s-14.08 32-32 32H286.72c-30.08 0-54.4 22.4-54.4 49.92v542.08c0 27.52 24.32 49.92 54.4 49.92H723.2c30.08 0 54.4-22.4 54.4-49.92V440.32c0-17.92 14.08-32 32-32s32 14.08 32 32v363.52c0 62.72-53.12 113.92-118.4 113.92z"}}),e._v(" "),t("path",{attrs:{d:"M499.84 602.24c-7.68 0-14.72-2.56-21.12-7.68-13.44-11.52-14.72-32-3.2-45.44L780.16 198.4c11.52-13.44 32-14.72 45.44-3.2s14.72 32 3.2 45.44L524.16 591.36c-6.4 7.04-15.36 10.88-24.32 10.88z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-delete",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M677.647059 256l0-90.352941c0-37.436235-23.461647-60.235294-61.771294-60.235294L408.094118 105.411765c-38.249412 0-61.741176 22.799059-61.741176 60.235294l0 90.352941-180.705882 0 0 60.235294 60.235294 0 0 512c0 54.272 33.972706 90.352941 90.352941 90.352941l391.529412 0c55.085176 0 90.352941-33.490824 90.352941-90.352941l0-512 60.235294 0 0-60.235294L677.647059 256zM406.588235 165.647059l210.823529 0-1.264941 90.352941L406.588235 256 406.588235 165.647059zM737.882353 858.352941l-451.764706 0 0-542.117647 451.764706 0L737.882353 858.352941zM466.823529 376.470588l-58.729412 0-1.505882 391.529412 60.235294 0L466.823529 376.470588zM617.411765 376.470588l-60.235294 0 0 391.529412 60.235294 0L617.411765 376.470588z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-reply",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M426.666667 384 426.666667 213.333333 128 512 426.666667 810.666667 426.666667 635.733333C640 635.733333 789.333333 704 896 853.333333 853.333333 640 725.333333 426.666667 426.666667 384Z"}})]),e._v(" "),t("symbol",{attrs:{id:"vssue-icon-error",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M512 720m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z"}}),e._v(" "),t("path",{attrs:{d:"M480 416v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8z"}}),e._v(" "),t("path",{attrs:{d:"M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48z m-783.5-27.9L512 239.9l339.8 588.2H172.2z"}})])])},staticRenderFns:[]},void 0,nr,void 0,!0,void 0,!1,void 0,void 0,void 0);const rr=er({},void 0,r.a.extend({name:"TransitionFade",functional:!0,props:{group:{type:Boolean,required:!1,default:!1},tag:{type:String,required:!1,default:"div"}},render:(n,{props:e,children:t})=>n(e.group?"TransitionGroup":"Transition",{props:{name:"fade",mode:"out-in",appear:!0,tag:e.tag}},t)}),void 0,void 0,void 0,!1,void 0,void 0,void 0);const or=er({},void 0,r.a.extend({name:"VssueIcon",functional:!0,props:{name:{type:String,required:!0},title:{type:String,required:!1,default:null}},render:(n,{props:e,data:t})=>n("svg",Object.assign(Object.assign({},t),{class:["vssue-icon","vssue-icon-"+e.name],attrs:{"aria-hidden":"true"}}),[n("title",e.title),n("use",{attrs:{"xlink:href":"#vssue-icon-"+e.name}})])}),void 0,void 0,void 0,!1,void 0,void 0,void 0);let sr=class extends r.a{constructor(){super(...arguments),this.editMode=!1,this.editContent=this.comment.contentRaw,this.creatingReactions=[],this.isPutingComment=!1,this.isDeletingComment=!1}get currentUser(){return this.vssue.user?this.vssue.user.username:null}get content(){return this.comment.content}get author(){return this.comment.author}get createdAt(){return tt(this.comment.createdAt)}get updatedAt(){return tt(this.comment.updatedAt)}get showReactions(){return Boolean(this.vssue.API&&this.vssue.API.platform.meta.reactable&&this.comment.reactions&&!this.editMode)}get reactionKeys(){return["heart","like","unlike"]}get editContentRows(){return this.editContent.split("\n").length-1}get editInputRows(){return this.editContentRows<3?5:this.editContentRows+2}async postReaction({reaction:n}){try{if(this.creatingReactions.includes(n))return;this.creatingReactions.push(n);await this.vssue.postCommentReaction({commentId:this.comment.id,reaction:n})||this.vssue.$emit("error",new Error(this.vssue.$t("reactionGiven",{reaction:this.vssue.$t(n)})));const e=await this.vssue.getCommentReactions({commentId:this.comment.id});e&&(this.comment.reactions=e)}finally{this.creatingReactions.splice(this.creatingReactions.findIndex(e=>e===n),1)}}enterEdit(){this.editMode=!0,this.$nextTick(()=>{this.$refs.input.focus()})}resetEdit(){this.editMode=!1,this.editContent=this.comment.contentRaw}async putComment(){try{if(this.vssue.isPending)return;if(this.editContent!==this.comment.contentRaw){this.isPutingComment=!0,this.vssue.isUpdatingComment=!0;const n=await this.vssue.putComment({commentId:this.comment.id,content:this.editContent});n&&this.vssue.comments.data.splice(this.vssue.comments.data.findIndex(n=>n.id===this.comment.id),1,n)}this.editMode=!1}finally{this.isPutingComment=!1,this.vssue.isUpdatingComment=!1}}async deleteComment(){try{if(this.vssue.isPending)return;if(!window.confirm(this.vssue.$t("deleteConfirm")))return;this.isDeletingComment=!0,this.vssue.isUpdatingComment=!0;await this.vssue.deleteComment({commentId:this.comment.id})?(this.vssue.comments.count-=1,this.vssue.comments.data.length>1&&this.vssue.comments.data.splice(this.vssue.comments.data.findIndex(n=>n.id===this.comment.id),1),this.vssue.query.page>1&&this.vssue.query.page>Math.ceil(this.vssue.comments.count/this.vssue.query.perPage)?this.vssue.query.page-=1:await this.vssue.getComments()):this.vssue.$emit("error",new Error(this.vssue.$t("deleteFailed")))}finally{this.isDeletingComment=!1,this.vssue.isUpdatingComment=!1}}};Vt([We({type:Object,required:!0})],sr.prototype,"comment",void 0),Vt([Ue()],sr.prototype,"vssue",void 0),sr=Vt([He({components:{VssueIcon:or}})],sr);const ar=er({render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"vssue-comment",class:{"vssue-comment-edit-mode":n.editMode,"vssue-comment-disabled":n.isDeletingComment||n.isPutingComment}},[t("div",{staticClass:"vssue-comment-avatar"},[t("a",{attrs:{href:n.author.homepage,title:n.author.username,target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:n.author.avatar,alt:n.author.username}})])]),n._v(" "),t("div",{staticClass:"vssue-comment-body"},[n._t("body",[t("div",{staticClass:"vssue-comment-header"},[t("span",{staticClass:"vssue-comment-author"},[t("a",{attrs:{href:n.author.homepage,title:n.author.username,target:"_blank",rel:"noopener noreferrer"}},[n._v("\n            "+n._s(n.author.username)+"\n          ")])]),n._v(" "),t("span",{staticClass:"vssue-comment-created-at"},[n._v("\n          "+n._s(n.createdAt)+"\n        ")])]),n._v(" "),t("div",{staticClass:"vssue-comment-main"},[n.editMode?t("textarea",{directives:[{name:"model",rawName:"v-model",value:n.editContent,expression:"editContent"}],ref:"input",staticClass:"vssue-edit-comment-input",attrs:{rows:n.editInputRows},domProps:{value:n.editContent},on:{keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:e.ctrlKey?n.putComment():null},input:function(e){e.target.composing||(n.editContent=e.target.value)}}}):t("article",{staticClass:"markdown-body",domProps:{innerHTML:n._s(n.content)}})]),n._v(" "),t("div",{staticClass:"vssue-comment-footer"},[n.editMode?t("span",{staticClass:"vssue-comment-hint"},[n._v("\n          "+n._s(n.vssue.$t("editMode"))+"\n        ")]):n._e(),n._v(" "),n.showReactions?t("span",{staticClass:"vssue-comment-reactions"},n._l(n.reactionKeys,(function(e){return t("span",{key:e,staticClass:"vssue-comment-reaction",attrs:{title:n.vssue.$t(n.creatingReactions.includes(e)?"loading":e)},on:{click:function(t){return n.postReaction({reaction:e})}}},[t("VssueIcon",{attrs:{name:n.creatingReactions.includes(e)?"loading":e,title:n.vssue.$t(n.creatingReactions.includes(e)?"loading":e)}}),n._v(" "),t("span",{staticClass:"vssue-comment-reaction-number"},[n._v("\n              "+n._s(n.comment.reactions[e])+"\n            ")])],1)})),0):n._e(),n._v(" "),t("span",{staticClass:"vssue-comment-operations"},[n.comment.author.username===n.currentUser&&n.editMode?t("span",{staticClass:"vssue-comment-operation",class:{"vssue-comment-operation-muted":n.isPutingComment},attrs:{title:n.vssue.$t(n.isPutingComment?"loading":"submit")},on:{click:function(e){return n.putComment()}}},[t("VssueIcon",{directives:[{name:"show",rawName:"v-show",value:n.isPutingComment,expression:"isPutingComment"}],attrs:{name:"loading",title:n.vssue.$t("loading")}}),n._v("\n\n            "+n._s(n.vssue.$t("submit"))+"\n          ")],1):n._e(),n._v(" "),n.comment.author.username===n.currentUser&&n.editMode?t("span",{staticClass:"vssue-comment-operation vssue-comment-operation-muted",attrs:{title:n.vssue.$t("cancel")},on:{click:function(e){return n.resetEdit()}}},[n._v("\n            "+n._s(n.vssue.$t("cancel"))+"\n          ")]):n._e(),n._v(" "),n.comment.author.username===n.currentUser?t("span",{directives:[{name:"show",rawName:"v-show",value:!n.editMode,expression:"!editMode"}],staticClass:"vssue-comment-operation",on:{click:function(e){return n.enterEdit()}}},[t("VssueIcon",{attrs:{name:"edit",title:n.vssue.$t("edit")}})],1):n._e(),n._v(" "),n.comment.author.username===n.currentUser||n.vssue.isAdmin?t("span",{directives:[{name:"show",rawName:"v-show",value:!n.editMode,expression:"!editMode"}],staticClass:"vssue-comment-operation",on:{click:function(e){return n.deleteComment()}}},[t("VssueIcon",{attrs:{name:n.isDeletingComment?"loading":"delete",title:n.vssue.$t(n.isDeletingComment?"loading":"delete")}})],1):n._e(),n._v(" "),t("span",{directives:[{name:"show",rawName:"v-show",value:!n.editMode,expression:"!editMode"}],staticClass:"vssue-comment-operation",on:{click:function(e){return n.vssue.$emit("reply-comment",n.comment)}}},[t("VssueIcon",{attrs:{name:"reply",title:n.vssue.$t("reply")}})],1)])])])],2)])},staticRenderFns:[]},void 0,sr,void 0,!1,void 0,!1,void 0,void 0,void 0);let ir=class extends r.a{get disabled(){return this.vssue.isPending}get pageCount(){const n=Math.ceil(this.vssue.comments.count/this.vssue.comments.perPage);return n>1?n:1}get perPageOptions(){const n=[5,10,20,50];return!n.includes(this.vssue.options.perPage)&&this.vssue.options.perPage<100&&n.push(this.vssue.options.perPage),n.sort((n,e)=>n-e)}get page(){return this.vssue.query.page>this.pageCount?this.pageCount:this.vssue.query.page}set page(n){n>0&&n<=this.pageCount&&(this.vssue.query.page=n)}get perPage(){return this.vssue.query.perPage}set perPage(n){this.perPageOptions.includes(n)&&(this.vssue.query.perPage=n)}};Vt([Ue()],ir.prototype,"vssue",void 0),ir=Vt([He({components:{VssueIcon:or}})],ir);const lr=er({render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"vssue-pagination"},[t("div",{staticClass:"vssue-pagination-per-page"},[t("label",[t("select",{directives:[{name:"model",rawName:"v-model",value:n.perPage,expression:"perPage"}],staticClass:"vssue-pagination-select",attrs:{disabled:n.disabled},on:{change:function(e){var t=Array.prototype.filter.call(e.target.options,(function(n){return n.selected})).map((function(n){return"_value"in n?n._value:n.value}));n.perPage=e.target.multiple?t:t[0]}}},n._l(n.perPageOptions,(function(e){return t("option",{key:e,domProps:{value:e}},[n._v("\n          "+n._s(e)+"\n        ")])})),0),n._v(" "),t("span",[n._v("\n        "+n._s(n.vssue.$t("perPage"))+"\n      ")])]),n._v(" "),n.vssue.API.platform.meta.sortable?t("span",{class:{"vssue-pagination-link":!0,disabled:n.disabled},attrs:{title:n.vssue.$t("sort")},on:{click:function(e){n.vssue.query.sort="asc"===n.vssue.query.sort?"desc":"asc"}}},[n._v("\n      "+n._s("asc"===n.vssue.query.sort?"↑":"↓")+"\n    ")]):n._e()]),n._v(" "),t("div",{staticClass:"vssue-pagination-page"},[t("span",{class:{"vssue-pagination-link":!0,disabled:1===n.page||n.disabled},attrs:{title:n.vssue.$t("prev")},domProps:{textContent:n._s("<")},on:{click:function(e){n.page-=1}}}),n._v(" "),t("label",[t("span",[n._v("\n        "+n._s(n.vssue.$t("page"))+"\n      ")]),n._v(" "),t("select",{directives:[{name:"show",rawName:"v-show",value:n.pageCount>1,expression:"pageCount > 1"},{name:"model",rawName:"v-model",value:n.page,expression:"page"}],staticClass:"vssue-pagination-select",attrs:{disabled:n.disabled},on:{change:function(e){var t=Array.prototype.filter.call(e.target.options,(function(n){return n.selected})).map((function(n){return"_value"in n?n._value:n.value}));n.page=e.target.multiple?t:t[0]}}},n._l(n.pageCount,(function(e){return t("option",{key:e,domProps:{value:e}},[n._v("\n          "+n._s(e)+"\n        ")])})),0),n._v(" "),t("span",{directives:[{name:"show",rawName:"v-show",value:n.pageCount<2,expression:"pageCount < 2"}],domProps:{textContent:n._s(n.page)}}),n._v(" "),t("span",{domProps:{textContent:n._s(" / "+n.pageCount+" ")}})]),n._v(" "),t("span",{class:{"vssue-pagination-link":!0,disabled:n.page===n.pageCount||n.disabled},attrs:{title:n.vssue.$t("next")},domProps:{textContent:n._s(">")},on:{click:function(e){n.page+=1}}})])])},staticRenderFns:[]},void 0,ir,void 0,!1,void 0,!1,void 0,void 0,void 0);let cr=class extends r.a{};Vt([Ue()],cr.prototype,"vssue",void 0),cr=Vt([He({components:{TransitionFade:rr,VssueComment:ar,VssuePagination:lr}})],cr);const pr=er({render:function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"vssue-comments"},[e("VssuePagination"),this._v(" "),e("TransitionFade",{attrs:{group:""}},this._l(this.vssue.comments.data,(function(n){return e("VssueComment",{key:n.id,attrs:{comment:n}})})),1),this._v(" "),e("VssuePagination",{directives:[{name:"show",rawName:"v-show",value:this.vssue.comments.data.length>5,expression:"vssue.comments.data.length > 5"}]})],1)},staticRenderFns:[]},void 0,cr,void 0,!1,void 0,!1,void 0,void 0,void 0);const dr=er({},void 0,r.a.extend({name:"VssueIcon",functional:!0,props:{type:{type:String,required:!1,default:"default"}},render:(n,{props:e,data:t,children:r})=>n("button",Object.assign(Object.assign({},t),{class:["vssue-button","vssue-button-"+e.type]}),r)}),void 0,void 0,void 0,!1,void 0,void 0,void 0);let ur=class extends r.a{constructor(){super(...arguments),this.content=""}get user(){return this.vssue.user}get platform(){return this.vssue.API&&this.vssue.API.platform.name}get isInputDisabled(){return this.loading||null===this.user||null===this.vssue.issue}get isSubmitDisabled(){return""===this.content||this.vssue.isPending||null===this.vssue.issue}get loading(){return this.vssue.isCreatingComment}get contentRows(){return this.content.split("\n").length-1}get inputRows(){return this.contentRows<3?5:this.contentRows+2}created(){this.vssue.$on("reply-comment",n=>{const e=n.contentRaw.replace(/\n/g,"\n> "),t=`@${n.author.username}\n\n> ${e}\n\n`;this.content=this.content.concat(t),this.focus()})}beforeDestroy(){this.vssue.$off("reply-comment")}focus(){this.$refs.input.focus()}async submit(){this.isSubmitDisabled||(await this.vssue.postComment({content:this.content}),this.content="",await this.vssue.getComments())}};Vt([Ue()],ur.prototype,"vssue",void 0),ur=Vt([He({components:{VssueButton:dr,VssueIcon:or}})],ur);const mr=er({render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"vssue-new-comment"},[t("div",{staticClass:"vssue-comment-avatar"},[n.user?t("a",{attrs:{href:n.user.homepage,title:n.user.username,target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:n.user.avatar,alt:n.user.username}})]):t("VssueIcon",{attrs:{name:n.platform.toLowerCase(),title:n.vssue.$t("loginToComment",{platform:n.platform})},on:{click:function(e){return n.vssue.login()}}})],1),n._v(" "),t("div",{staticClass:"vssue-new-comment-body"},[t("textarea",{directives:[{name:"model",rawName:"v-model",value:n.content,expression:"content"}],ref:"input",staticClass:"vssue-new-comment-input",attrs:{rows:n.inputRows,disabled:n.isInputDisabled,placeholder:n.vssue.$t(n.user?"placeholder":"noLoginPlaceHolder"),spellcheck:!1,"aria-label":"leave a comment"},domProps:{value:n.content},on:{keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:e.ctrlKey?n.submit():null},input:function(e){e.target.composing||(n.content=e.target.value)}}})]),n._v(" "),t("div",{staticClass:"vssue-new-comment-footer"},[n.user?t("span",{staticClass:"vssue-current-user"},[t("span",[n._v(n._s(n.vssue.$t("currentUser"))+" - "+n._s(n.user.username)+" - ")]),n._v(" "),t("a",{staticClass:"vssue-logout",on:{click:function(e){return n.vssue.logout()}}},[n._v("\n        "+n._s(n.vssue.$t("logout"))+"\n      ")])]):t("span",{staticClass:"vssue-current-user"},[n._v("\n      "+n._s(n.vssue.$t("loginToComment",{platform:n.platform}))+"\n    ")]),n._v(" "),t("div",{staticClass:"vssue-new-comment-operations"},[n.user?t("VssueButton",{staticClass:"vssue-button-submit-comment",attrs:{type:"primary",disabled:n.isSubmitDisabled},on:{click:function(e){return n.submit()}}},[t("VssueIcon",{directives:[{name:"show",rawName:"v-show",value:n.loading,expression:"loading"}],attrs:{name:"loading"}}),n._v("\n\n        "+n._s(n.vssue.$t(n.loading?"submitting":"submitComment"))+"\n      ")],1):t("VssueButton",{staticClass:"vssue-button-login",attrs:{type:"primary",title:n.vssue.$t("loginToComment",{platform:n.platform})},on:{click:function(e){return n.vssue.login()}}},[n._v("\n        "+n._s(n.vssue.$t("login",{platform:n.platform}))+"\n      ")])],1)])])},staticRenderFns:[]},void 0,ur,void 0,!1,void 0,!1,void 0,void 0,void 0);let hr=class extends r.a{constructor(){super(...arguments),this.progress={show:!1,percent:0,timer:null,speed:200},this.alert={show:!1,message:null,timer:null}}onLoadingCommentsChange(n){this.vssue.comments&&(n?this.progressStart():this.progressDone())}created(){this.vssue.$on("error",n=>this.alertShow(n.message))}beforeDestroy(){this.vssue.$off("error"),null!==this.progress.timer&&window.clearTimeout(this.progress.timer),null!==this.alert.timer&&window.clearTimeout(this.alert.timer)}progressStart(){this.progress.show=!0,this.progress.percent=0,this.progress.timer=window.setInterval(()=>{this.progress.percent+=5,this.progress.percent>94&&null!==this.progress.timer&&window.clearInterval(this.progress.timer)},this.progress.speed)}progressDone(){this.progress.percent=100,null!==this.progress.timer&&window.clearTimeout(this.progress.timer),this.progress.timer=null,window.setTimeout(()=>{this.progress.show=!1},this.progress.speed)}alertShow(n){this.alert.show=!0,this.alert.message=n,null!==this.alert.timer&&window.clearTimeout(this.alert.timer),this.alert.timer=window.setTimeout(()=>{this.alertHide()},3e3)}alertHide(){this.alert.show=!1,null!==this.alert.timer&&window.clearTimeout(this.alert.timer),this.alert.timer=null}};Vt([Ue()],hr.prototype,"vssue",void 0),Vt([Ge("vssue.isLoadingComments")],hr.prototype,"onLoadingCommentsChange",null),hr=Vt([He({components:{TransitionFade:rr}})],hr);const gr=er({render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"vssue-notice"},[t("div",{directives:[{name:"show",rawName:"v-show",value:n.progress.show,expression:"progress.show"}],staticClass:"vssue-progress",style:{width:n.progress.percent+"%",transition:"all "+n.progress.speed+"ms linear"}}),n._v(" "),t("TransitionFade",[t("div",{directives:[{name:"show",rawName:"v-show",value:n.alert.show,expression:"alert.show"}],staticClass:"vssue-alert",domProps:{textContent:n._s(n.alert.message)},on:{click:function(e){return n.alertHide()}}})])],1)},staticRenderFns:[]},void 0,hr,void 0,!1,void 0,!1,void 0,void 0,void 0);let fr=class extends r.a{get status(){return this.vssue.isFailed?"failed":this.vssue.isInitializing?"initializing":this.vssue.isIssueNotCreated&&!this.vssue.isCreatingIssue?this.vssue.isAdmin||!this.vssue.isLogined?"issueNotCreated":"failed":this.vssue.isLoginRequired?"loginRequired":!this.vssue.comments||this.vssue.isCreatingIssue?"loadingComments":0===this.vssue.comments.data.length?"noComments":null}handleClick(){"issueNotCreated"===this.status?this.vssue.postIssue():"loginRequired"===this.status&&this.vssue.login()}};Vt([Ue()],fr.prototype,"vssue",void 0),fr=Vt([He({components:{TransitionFade:rr,VssueIcon:or}})],fr);const br=er({render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("TransitionFade",[n.status?t("div",{key:n.status,staticClass:"vssue-status"},[["failed","loadingComments","initializing"].includes(n.status)?t("VssueIcon",{attrs:{name:"failed"===n.status?"error":"loading"}}):n._e(),n._v(" "),t("p",{staticClass:"vssue-status-info"},[t(["issueNotCreated","loginRequired"].includes(n.status)?"a":"span",{tag:"Component",on:{click:n.handleClick}},[n._v("\n        "+n._s(n.vssue.$t(n.status))+"\n      ")])],1)],1):n._e()])},staticRenderFns:[]},void 0,fr,void 0,!1,void 0,!1,void 0,void 0,void 0);let yr=class extends r.a{};Vt([Ue()],yr.prototype,"vssue",void 0),yr=Vt([He({components:{TransitionFade:rr,VssueIcon:or,VssueComments:pr,VssueNewComment:mr,VssueNotice:gr,VssueStatus:br}})],yr);const vr=er({render:function(){var n=this.$createElement,e=this._self._c||n;return e("TransitionFade",[this.vssue.isInitializing?e("VssueStatus"):e("div",{staticClass:"vssue-body"},[this.vssue.API?e("VssueNewComment"):this._e(),this._v(" "),e("VssueNotice"),this._v(" "),e("TransitionFade",[this.vssue.comments&&this.vssue.comments.data.length>0?e("VssueComments"):e("VssueStatus")],1)],1)],1)},staticRenderFns:[]},void 0,yr,void 0,!1,void 0,!1,void 0,void 0,void 0);let xr=class extends r.a{};Vt([Ue()],xr.prototype,"vssue",void 0),xr=Vt([He],xr);const wr=er({render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"vssue-header"},[t("a",{staticClass:"vssue-header-comments-count",attrs:{href:n.vssue.issue?n.vssue.issue.link:null,target:"_blank",rel:"noopener noreferrer"}},[t("span",[n._v("\n      "+n._s(n.vssue.comments?n.vssue.$tc("comments",n.vssue.comments.count,{count:n.vssue.comments.count}):n.vssue.$tc("comments",0))+"\n    ")])]),n._v(" "),t("span",{staticClass:"vssue-header-powered-by"},[t("span",[n._v("Powered by")]),n._v(" "),n.vssue.API?t("span",[t("a",{attrs:{href:n.vssue.API.platform.link,title:n.vssue.API.platform.name+" API "+n.vssue.API.platform.version,target:"_blank",rel:"noopener noreferrer"}},[n._v("\n        "+n._s(n.vssue.API.platform.name)+"\n      ")]),n._v(" "),t("span",[n._v("&")])]):n._e(),n._v(" "),t("a",{attrs:{href:"https://github.com/meteorlxy/vssue",title:"Vssue v"+n.vssue.version,target:"_blank",rel:"noopener noreferrer"}},[n._v("\n      Vssue\n    ")])])])},staticRenderFns:[]},void 0,xr,void 0,!1,void 0,!1,void 0,void 0,void 0),Er={login:"Login with {platform}",logout:"Logout",currentUser:"Current User",loading:"Loading",submit:"Submit",submitting:"Submitting",submitComment:"Submit Comment",cancel:"Cancel",edit:"Edit",editMode:"Edit Mode",delete:"Delete",reply:"Reply",heart:"Heart",like:"Like",unlike:"Unlike",perPage:"Comments per page",sort:"Click to change the sort direction",page:"Page",prev:"Previous Page",next:"Next Page",comments:"Comments | {count} Comment | {count} Comments",loginToComment:"Login with {platform} account to leave a comment",placeholder:"Leave a comment. Styling with Markdown is supported. Ctrl + Enter to submit.",noLoginPlaceHolder:"Login to leave a comment. Styling with Markdown is supported. ",failed:"Failed to load comments",initializing:"Initializing...",issueNotCreated:"Click to create issue",loadingComments:"Loading comments...",loginRequired:"Login to view comments",noComments:"No comments yet. Leave the first comment !",reactionGiven:"Already given '{reaction}' reaction",deleteConfirm:"Confirm to delete this comment ?",deleteFailed:"Failed to delete comment"},kr={login:"使用 {platform} 登录",logout:"退出登录",currentUser:"当前用户",loading:"加载中",submit:"提交",submitting:"发表中",submitComment:"发表评论",cancel:"取消",edit:"编辑",editMode:"编辑模式",delete:"删除",reply:"回复",heart:"喜欢",like:"赞",unlike:"踩",perPage:"每页评论数",sort:"点击改变排序方式",page:"页数",prev:"上一页",next:"下一页",comments:"评论 | {count} 条评论 | {count} 条评论",loginToComment:"使用 {platform} 帐号登录后发表评论",placeholder:"留下你的评论丨支持 Markdown 语法丨Ctrl + Enter 发表评论",noLoginPlaceHolder:"登录后才能发表评论丨支持 Markdown 语法",failed:"评论加载失败",initializing:"正在初始化...",issueNotCreated:"点击创建 Issue",loadingComments:"正在加载评论...",loginRequired:"登录后查看评论",noComments:"还没有评论，来发表第一条评论吧！",reactionGiven:"已经添加过 '{reaction}' 了",deleteConfirm:"确认要删除该评论吗？",deleteFailed:"评论删除失败"},zr={login:"Entrar com {platform}",logout:"Sair",currentUser:"Usuário Atual",loading:"Carregando",submit:"Enviar",submitting:"Enviando",submitComment:"Enviar Comentário",cancel:"Cancelar",edit:"Editar",editMode:"Modo de Edição",delete:"Apagar",reply:"Responder",heart:"Heart",like:"Like",unlike:"Unlike",perPage:"Comentários por página",sort:"Clique para alterar a ordenação",page:"Página",prev:"Página Anterior",next:"Próxima Página",comments:"Comentários | {count} Comentário | {count} Comentários",loginToComment:"Entre com uma conta {platform} para deixar um comentário",placeholder:"Deixe um comentário. Estilos com Markdown suportados. Ctrl + Enter para enviar.",noLoginPlaceHolder:"Entre para deixar um comentário. Estilos com Markdown suportados. ",failed:"Falha ao carregar comentários",initializing:"Inicializando...",issueNotCreated:"Click to create issue",loadingComments:"Carregando comentários...",loginRequired:"Entrar para visualizar comentários",noComments:"Nenhum comentário. Deixe o primeiro comentário!",reactionGiven:"Já reagiu com '{reaction}'",deleteConfirm:"Apagar este comentário?",deleteFailed:"Falha ao apagar comentário"},Sr={login:"{platform} でログイン",logout:"ログアウト",currentUser:"現在のユーザー",loading:"読み込み中",submit:"送信",submitting:"送信中",submitComment:"コメントを送信",cancel:"キャンセル",edit:"編集",editMode:"編集モード",delete:"削除",reply:"返信",heart:"ハート",like:"高評価",unlike:"低評価",perPage:"コメント/ページ",sort:"並び順を変更するにはクリックしてください",page:"ページ",prev:"前のページ",next:"次のページ",comments:"コメント | {count} コメント | {count} コメント",loginToComment:"コメントを残すには {platform} アカウントでログインしてください。",placeholder:"コメントを残してください。Markdown 記法をサポートしています。 Ctrl + Enter で送信できます。",noLoginPlaceHolder:"コメントを残すにはログインしてください。マークダウン記法をサポートしています。",failed:"コメントの読み込みに失敗しました",initializing:"初期化中...",issueNotCreated:"Click to create issue",loadingComments:"コメントの読み込み中...",loginRequired:"コメントを見るにはログインしてください",noComments:"まだコメントがありません。最初のコメントを残しましょう！",reactionGiven:"既に '{reaction}' のリアクションをしています",deleteConfirm:"本当にコメントを削除してもいいですか？",deleteFailed:"コメントの削除に失敗しました"},Ar={login:"התחברו עם {platform}",logout:"התנתקו",currentUser:"משתמש/ת נוכחי/ת",loading:"טוען",submit:"שליחה",submitting:"שולח",submitComment:"שליחת תגובה",cancel:"ביטל",edit:"עריכה",editMode:"מצב עריכה",delete:"מחיקה",reply:"תשובה",heart:"לב",like:"לייק",unlike:"אנלייק",perPage:"תגובות לדף",sort:"לחצו כדי לשנות את כיוון המיון",page:"דף",prev:"הדף הקודם",next:"הדף הבא",comments:"תגובות | {count} תגובה | {count} תגובות",loginToComment:"התחברו עם חשבון {platform} כדי להשאיר תגובה",placeholder:"השאירו תגובה. יש תמיכה בעיצוב בעזרת Markdown. Ctrl + Enter כדי לשלוח.",noLoginPlaceHolder:"התחברו כדי להשאיר תגובה. יש תמיכה בעיצוב בעזרת Markdown. ",failed:"כשלון בטעינת התגובות",initializing:"מאתחל...",issueNotCreated:"לחצו ליצירת issue",loadingComments:"טוען תגובות...",loginRequired:"התחברו כדי לצפות בתגובות",noComments:"עדיין אין תגובות. השאירו תגובה ראשונה !",reactionGiven:"כבר ניתן חיווי '{reaction}'",deleteConfirm:"בטוחים במחיקת התגובה ?",deleteFailed:"כשלון במחיקת התגובה"};Object.prototype.hasOwnProperty.call(r.a,"$i18n")||r.a.use(Kt);const Br=new Kt({locale:"en",fallbackLocale:"en",messages:{en:Er,"en-US":Er,zh:kr,"zh-CN":kr,pt:zr,"pt-BR":zr,ja:Sr,"ja-JP":Sr,he:Ar,"he-IL":Ar}});let jr=class extends r.a{constructor(){super(...arguments),this.title=n=>`${n.prefix}${document.title}`,this.issueId=null,this.options=null,this.API=null,this.accessToken=null,this.user=null,this.issue=null,this.comments=null,this.query={page:1,perPage:10,sort:"desc"},this.isInitializing=!0,this.isIssueNotCreated=!1,this.isLoginRequired=!1,this.isFailed=!1,this.isCreatingIssue=!1,this.isLoadingComments=!1,this.isCreatingComment=!1,this.isUpdatingComment=!1}get version(){return"1.4.8"}get issueTitle(){return null===this.options?"":"function"==typeof this.title?this.title(this.options):`${this.options.prefix}${this.title}`}get isPending(){return this.isLoadingComments||this.isCreatingComment||this.isUpdatingComment}get isLogined(){return null!==this.accessToken&&null!==this.user}get isAdmin(){return null!==this.options&&null!==this.accessToken&&null!==this.user&&(this.user.username===this.options.owner||this.options.admins.includes(this.user.username))}get accessTokenKey(){return this.API?`Vssue.${this.API.platform.name.toLowerCase()}.access_token`:""}onQueryPerPageChange(){this.query.page=1,this.getComments()}onQueryChange(){this.getComments()}setOptions(n){this.options=Object.assign({labels:["Vssue"],state:"Vssue",prefix:"[Vssue]",admins:[],perPage:10,proxy:n=>"https://cors-anywhere.azm.workers.dev/"+n,issueContent:({url:n})=>n,autoCreateIssue:!1},n);const e=["api","owner","repo","clientId"];for(const n of e)this.options[n]||console.warn(`[Vssue] the option '${n}' is required`);if(this.options.locale)this.$i18n.locale=this.options.locale;else{const n=Object.keys(this.$i18n.messages),e=window.navigator.languages;this.$i18n.locale=e.filter(e=>n.includes(e)).shift()||"en"}}async init(){try{await this.initStore(),await this.initComments()}catch(n){n.response&&[401,403].includes(n.response.status)?this.isLoginRequired=!0:this.isFailed=!0,console.error(n)}}async initStore(){try{if(!this.options)throw new Error("Options are required to initialize Vssue");this.API=null,this.accessToken=null,this.user=null,this.issue=null,this.comments=null,this.query={page:1,perPage:this.options.perPage,sort:"desc"},this.isInitializing=!0,this.isIssueNotCreated=!1,this.isLoginRequired=!1,this.isFailed=!1,this.isCreatingIssue=!1,this.isLoadingComments=!1,this.isCreatingComment=!1,this.isUpdatingComment=!1;const n=this.options.api;this.API=new n({baseURL:this.options.baseURL,labels:this.options.labels,state:this.options.state,owner:this.options.owner,repo:this.options.repo,clientId:this.options.clientId,clientSecret:this.options.clientSecret,proxy:this.options.proxy}),await this.handleAuth()}finally{this.isInitializing=!1}}async initComments(){if(this.API&&this.options)if(this.issueId){const[n,e]=await Promise.all([this.API.getIssue({accessToken:this.accessToken,issueId:this.issueId}),this.API.getComments({accessToken:this.accessToken,issueId:this.issueId,query:this.query})]);this.issue=n,this.comments=e}else this.issue=await this.API.getIssue({accessToken:this.accessToken,issueTitle:this.issueTitle}),null===this.issue?(this.isIssueNotCreated=!0,this.options.autoCreateIssue&&await this.postIssue()):await this.getComments()}async postIssue(){if(this.API&&this.options&&!this.issue&&!this.issueId&&(this.isLogined||this.login(),this.isAdmin))try{this.isCreatingIssue=!0;const n=await this.API.postIssue({title:this.issueTitle,content:await this.options.issueContent({options:this.options,url:rt(window.location.href)}),accessToken:this.accessToken});this.issue=n,this.isIssueNotCreated=!1,await this.getComments()}catch(n){this.isFailed=!0}finally{this.isCreatingIssue=!1}}async getComments(){try{if(!this.API||!this.issue||this.isLoadingComments)return;this.isLoadingComments=!0;const n=await this.API.getComments({accessToken:this.accessToken,issueId:this.issue.id,query:this.query});return this.comments=n,this.query.page!==n.page&&(this.query.page=n.page),this.query.perPage!==n.perPage&&(this.query.perPage=n.perPage),n}catch(n){if(!n.response||![401,403].includes(n.response.status)||this.isLogined)throw this.$emit("error",n),n;this.isLoginRequired=!0}finally{this.isLoadingComments=!1}}async postComment({content:n}){try{if(!this.API||!this.issue||this.isCreatingComment)return;this.isCreatingComment=!0;return await this.API.postComment({accessToken:this.accessToken,content:n,issueId:this.issue.id})}catch(n){throw this.$emit("error",n),n}finally{this.isCreatingComment=!1}}async putComment({commentId:n,content:e}){try{if(!this.API||!this.issue)return;return await this.API.putComment({accessToken:this.accessToken,issueId:this.issue.id,commentId:n,content:e})}catch(n){throw this.$emit("error",n),n}}async deleteComment({commentId:n}){try{if(!this.API||!this.issue)return;return await this.API.deleteComment({accessToken:this.accessToken,issueId:this.issue.id,commentId:n})}catch(n){throw this.$emit("error",n),n}}async getCommentReactions({commentId:n}){try{if(!this.API||!this.issue)return;return await this.API.getCommentReactions({accessToken:this.accessToken,issueId:this.issue.id,commentId:n})}catch(n){throw this.$emit("error",n),n}}async postCommentReaction({commentId:n,reaction:e}){try{if(!this.API||!this.issue)return!1;return await this.API.postCommentReaction({accessToken:this.accessToken,issueId:this.issue.id,commentId:n,reaction:e})}catch(n){throw this.$emit("error",n),n}}login(){this.API&&this.API.redirectAuth()}logout(){this.setAccessToken(null),this.user=null}async handleAuth(){if(!this.API)return;const n=await this.API.handleAuth();n?(this.setAccessToken(n),this.user=await this.API.getUser({accessToken:n})):this.getAccessToken()?this.user=await this.API.getUser({accessToken:this.accessToken}):(this.setAccessToken(null),this.user=null)}getAccessToken(){return this.accessToken=window.localStorage.getItem(this.accessTokenKey),this.accessToken}setAccessToken(n){null===n?window.localStorage.removeItem(this.accessTokenKey):window.localStorage.setItem(this.accessTokenKey,n),this.accessToken=n}};Vt([Ge("query.perPage")],jr.prototype,"onQueryPerPageChange",null),Vt([Ge("query.page"),Ge("query.sort")],jr.prototype,"onQueryChange",null),jr=Vt([He({i18n:Br})],jr);var Cr=jr;let _r=class extends r.a{constructor(){super(...arguments),this.vssue=new Cr}onOptionsChange(n){this.vssue.setOptions(n)}mounted(){null!==this.title&&(this.vssue.title=this.title),null!==this.issueId&&(this.vssue.issueId=this.issueId),this.vssue.setOptions(this.options),this.vssue.init()}};var Tr;Vt([We({type:[String,Function],required:!1,default:null})],_r.prototype,"title",void 0),Vt([We({type:[String,Number],required:!1,default:null})],_r.prototype,"issueId",void 0),Vt([We({type:Object,required:!1,default:()=>({})})],_r.prototype,"options",void 0),Vt([(Tr="vssue",Le((function(n,e){var t=n.provide;Ze(t)&&(t=n.provide=Ye(t)),t.managed[e]=Tr||e})))],_r.prototype,"vssue",void 0),Vt([Ge("options",{deep:!0})],_r.prototype,"onOptionsChange",null),_r=Vt([He({components:{Iconfont:tr,VssueBody:vr,VssueHeader:wr}})],_r);const Fr=er({render:function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"vssue"},[e("Iconfont"),this._v(" "),e("VssueHeader"),this._v(" "),e("VssueBody")],1)},staticRenderFns:[]},void 0,_r,void 0,!1,void 0,!1,void 0,void 0,void 0);var Ir={get version(){return"1.4.8"},installed:!1,install(n,e){if(this.installed)return!1;this.installed=!0,n.component("Vssue",{functional:!0,props:{title:{type:String,required:!1,default:void 0},issueId:{type:[Number,String],required:!1,default:void 0},options:{type:Object,required:!1,default:void 0}},render:(n,{data:t,props:r})=>n(Fr,Object.assign(Object.assign({},t),{props:{title:r.title,issueId:r.issueId,options:Object.assign({},e,r.options)}}))})},VssueComponent:Fr},Dr=t(120),Pr=t.n(Dr);function Lr(n){return null===n?{username:"ghost",avatar:"https://avatars3.githubusercontent.com/u/10137?v=4",homepage:"https://github.com/ghost"}:{username:n.login,avatar:n.avatarUrl,homepage:n.url}}function Or(n){return{id:n.number,title:n.title,content:n.body,link:n.url}}function Mr(n){return{like:n.find(n=>"THUMBS_UP"===n.content).users.totalCount,unlike:n.find(n=>"THUMBS_DOWN"===n.content).users.totalCount,heart:n.find(n=>"HEART"===n.content).users.totalCount}}function $r(n){return{id:n.id,content:n.bodyHTML,contentRaw:n.body,author:Lr(n.author),createdAt:n.createdAt,updatedAt:n.updatedAt,reactions:Mr(n.reactionGroups)}}function Rr(n){return"like"===n?"THUMBS_UP":"unlike"===n?"THUMBS_DOWN":"heart"===n?"HEART":n}class qr{constructor({baseURL:n="https://github.com",owner:e,repo:t,labels:r,clientId:o,clientSecret:s,state:a,proxy:i}){if(void 0===s||void 0===i)throw new Error("clientSecret and proxy is required for GitHub V4");this.baseURL=n,this.owner=e,this.repo=t,this.labels=r,this.clientId=o,this.clientSecret=s,this.state=a,this.proxy=i,this._pageInfo={page:1,startCursor:null,endCursor:null,sort:null,perPage:null},this._issueNodeId=null,this.$http=Pr.a.create({baseURL:"https://github.com"===n?"https://api.github.com":Ve(n,"api"),headers:{Accept:"application/vnd.github.v3+json"}}),this.$http.interceptors.response.use(n=>n.data.error?Promise.reject(n.data.error_description):n.data.errors?Promise.reject(n.data.errors[0].message):n)}get platform(){return{name:"GitHub",link:this.baseURL,version:"v4",meta:{reactable:!0,sortable:!0}}}redirectAuth(){window.location.href=Ke(Ve(this.baseURL,"login/oauth/authorize"),{client_id:this.clientId,redirect_uri:window.location.href,scope:"public_repo",state:this.state})}async handleAuth(){const n=(e=window.location.search,Object(Qe.parse)(e,{ignoreQueryPrefix:!0}));var e;if(n.code){if(n.state!==this.state)return null;const e=n.code;delete n.code,delete n.state;const t=Ke(rt(window.location.href),n)+window.location.hash;window.history.replaceState(null,"",t);return await this.getAccessToken({code:e})}return null}async getAccessToken({code:n}){const e=Ve(this.baseURL,"login/oauth/access_token"),t="function"==typeof this.proxy?this.proxy(e):this.proxy,{data:r}=await this.$http.post(t,{client_id:this.clientId,client_secret:this.clientSecret,code:n},{headers:{Accept:"application/json"}});return r.access_token}async getUser({accessToken:n}){const{data:e}=await this.$http.post("graphql",{query:"query getUser {\n  viewer {\n    login\n    avatarUrl\n    url\n  }\n}"},{headers:{Authorization:"token "+n}});return Lr(e.data.viewer)}async getIssue({accessToken:n,issueId:e,issueTitle:t}){const r={};if(n&&(r.headers={Authorization:"token "+n}),!e){const n=[`"${t}"`,"in:title",`repo:${this.owner}/${this.repo}`,"is:public",...this.labels.map(n=>"label:"+n)].join(" "),{data:e}=await this.$http.post("graphql",{variables:{query:n},query:"query getIssueByTitle(\n  $query: String!\n) {\n  search(\n    query: $query\n    type: ISSUE\n    first: 20\n    ) {\n      nodes {\n      ... on Issue {\n        id\n        number\n        title\n        body\n        url\n      }\n    }\n  }\n}"},r),o=e.data.search.nodes.find(n=>n.title===t);return o?(this._issueNodeId=o.id,Or(o)):null}try{const{data:n}=await this.$http.post("graphql",{query:`query getIssueById {\n  repository(owner: "${this.owner}", name: "${this.repo}") {\n    issue (number: ${e}) {\n      id\n      number\n      title\n      body\n      url\n    }\n  }\n}`},r);return this._issueNodeId=n.data.repository.issue.id,Or(n.data.repository.issue)}catch(n){if(n.response&&404===n.response.status)return null;throw n}}async postIssue({accessToken:n,title:e,content:t}){const{data:r}=await this.$http.post(`repos/${this.owner}/${this.repo}/issues`,{title:e,body:t,labels:this.labels},{headers:{Authorization:"token "+n}});return r.url=r.html_url,this._issueNodeId=r.node_id,Or(r)}async getComments({accessToken:n,issueId:e,query:{page:t=1,perPage:r=10,sort:o="desc"}={}}){const s={};n&&(s.headers={Authorization:"token "+n}),null!==this._pageInfo.sort&&o!==this._pageInfo.sort&&(t=1);const{firstOrLast:a,afterOrBefore:i,cursor:l}=this._getQueryParams({page:t,sort:o}),{data:c}=await this.$http.post("graphql",{variables:{owner:this.owner,repo:this.repo,issueId:e,perPage:r},query:`query getComments(\n  $owner: String!\n  $repo: String!\n  $issueId: Int!\n  $perPage: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    issue(number: $issueId) {\n      comments(\n        ${a}: $perPage\n        ${null===i?"":`${i}: "${l}"`}\n      ) {\n        totalCount\n        pageInfo {\n          endCursor\n          startCursor\n        }\n        nodes {\n          id\n          body\n          bodyHTML\n          createdAt\n          updatedAt\n          author {\n            avatarUrl\n            login\n            url\n          }\n          reactionGroups {\n            users (first: 0) {\n              totalCount\n            }\n            content\n          }\n        }\n      }\n    }\n  }\n}`},s),p=c.data.repository.issue.comments;return"desc"===o&&p.nodes.reverse(),this._pageInfo={page:t,startCursor:p.pageInfo.startCursor,endCursor:p.pageInfo.endCursor,sort:o,perPage:r},{count:p.totalCount,page:t,perPage:r,data:p.nodes.map($r)}}async postComment({accessToken:n,content:e}){const{data:t}=await this.$http.post("graphql",{variables:{issueNodeId:this._issueNodeId,content:e},query:"mutation postComment(\n  $issueNodeId: ID!\n  $content: String!\n) {\n  addComment(\n    input: {\n      subjectId: $issueNodeId\n      body: $content\n    }\n  ) {\n    commentEdge {\n      node {\n        id\n        body\n        bodyHTML\n        createdAt\n        updatedAt\n        author {\n          avatarUrl\n          login\n          url\n        }\n        reactionGroups {\n          users (first: 0) {\n            totalCount\n          }\n          content\n        }\n      }\n    }\n  }\n}"},{headers:{Authorization:"token "+n}});return $r(t.data.addComment.commentEdge.node)}async putComment({accessToken:n,commentId:e,content:t}){const{data:r}=await this.$http.post("graphql",{variables:{commentId:e,content:t},query:"mutation putComment(\n  $commentId: ID!,\n  $content: String!,\n) {\n  updateIssueComment(input: {\n    id: $commentId\n    body: $content\n  }) {\n    issueComment {\n      id\n      body\n      bodyHTML\n      createdAt\n      updatedAt\n      author {\n        avatarUrl\n        login\n        url\n      }\n      reactionGroups {\n        users (first: 0) {\n          totalCount\n        }\n        content\n      }\n    }\n  }\n}"},{headers:{Authorization:"token "+n}});return $r(r.data.updateIssueComment.issueComment)}async deleteComment({accessToken:n,commentId:e}){return await this.$http.post("graphql",{variables:{commentId:e},query:"mutation deleteComment(\n  $commentId: ID!,\n) {\n  deleteIssueComment(input: {\n    id: $commentId\n  }) {\n    clientMutationId\n  }\n}"},{headers:{Authorization:"token "+n}}),!0}async getCommentReactions({accessToken:n,issueId:e,commentId:t}){const{firstOrLast:r,afterOrBefore:o,cursor:s}=this._getQueryParams(),{data:a}=await this.$http.post("graphql",{variables:{owner:this.owner,repo:this.repo,issueId:e,perPage:this._pageInfo.perPage},query:`query getComments(\n  $owner: String!\n  $repo: String!\n  $issueId: Int!\n  $perPage: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    issue(number: $issueId) {\n      comments(\n        ${r}: $perPage\n        ${null===o?"":`${o}: "${s}"`}\n      ) {\n        nodes {\n          id\n          reactionGroups {\n            users (first: 0) {\n              totalCount\n            }\n            content\n          }\n        }\n      }\n    }\n  }\n}`},{headers:{Authorization:"token "+n}});return Mr(a.data.repository.issue.comments.nodes.find(n=>n.id===t).reactionGroups)}async postCommentReaction({accessToken:n,commentId:e,reaction:t}){return await this.$http.post("graphql",{variables:{commentId:e,content:Rr(t)},query:"mutation postCommentReaction(\n  $commentId: ID!,\n  $content: ReactionContent!,\n) {\n  addReaction(input: {\n    subjectId: $commentId\n    content: $content\n  }) {\n    reaction {\n      databaseId\n    }\n  }\n}"},{headers:{Authorization:"token "+n}}),!0}_getQueryParams({page:n=this._pageInfo.page,sort:e=this._pageInfo.sort}={}){let t,r,o;return 1===n?(t="asc"===e?"first":"last",r=null,o=null):"asc"===e?n>this._pageInfo.page?(t="first",r="after",o=this._pageInfo.endCursor):(t="last",r="before",o=this._pageInfo.startCursor):n>this._pageInfo.page?(t="last",r="before",o=this._pageInfo.startCursor):(t="first",r="after",o=this._pageInfo.endCursor),{firstOrLast:t,afterOrBefore:r,cursor:o}}}t(315);class Nr{constructor(n){Object.defineProperty(this,"registration",{value:n,configurable:!0,writable:!0})}update(){return this.registration.update()}skipWaiting(){const n=this.registration.waiting;return n?(console.log("[vuepress:sw] Doing worker.skipWaiting()."),new Promise((e,t)=>{const r=new MessageChannel;r.port1.onmessage=n=>{console.log("[vuepress:sw] Done worker.skipWaiting()."),n.data.error?t(n.data.error):e(n.data)},n.postMessage({type:"skip-waiting"},[r.port2])})):Promise.resolve()}}var Hr=t(18);r.a.component("SWUpdatePopup",()=>Promise.all([t.e(0),t.e(104)]).then(t.bind(null,1318)));var Ur={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",ae()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},Yr=(t(316),Object(Ee.a)(Ur,(function(){var n=this._self._c;return n("transition",{attrs:{name:"fade"}},[this.show?n("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[n("g",{attrs:{transform:"translate(-229 -126.358)"}},[n("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),n("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports),Zr=t(121),Jr=t.n(Zr),Xr={name:"right-anchor",props:{global:Boolean},data:()=>({listData:[],activeIndex:null,opened:!1}),watch:{"$page.regularPath"(){this.filterDataByLevel()}},computed:{visible(){return this.listData&&this.listData.length&&!(this.rightAnchorOptions.disableGlobalUI&&this.global)},rightAnchorOptions(){return this.$page.rightAnchor},expandOptions(){var n;return null===(n=this.$page.rightAnchor)||void 0===n?void 0:n.expand}},methods:{mouseover(){"hover"===this.expandOptions.trigger&&(this.opened=!0)},mouseleave(){"hover"===this.expandOptions.trigger&&(this.opened=!1)},btnClick(){"click"===this.expandOptions.trigger&&(this.opened=!this.opened)},itemClick(n,e){var t;this.activeIndex=n,window.scrollTo({top:(null===(t=document.getElementById(e))||void 0===t?void 0:t.offsetTop)||0,behavior:"smooth"})},filterDataByLevel(){this.listData=[];const{headers:n}=this.$page,{isIgnore:e,showDepth:t}=this.rightAnchorOptions;!e&&0!==t&&n&&(this.listData=t?n.filter(n=>n.level<=t+1):[...n])},getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},mounted(){var n,e;(this.filterDataByLevel(),"click"===(null===(n=this.expandOptions)||void 0===n?void 0:n.trigger))&&(this.opened=null===(e=this.expandOptions)||void 0===e?void 0:e.clickModeDefaultOpen);window.addEventListener("scroll",Jr()(()=>{const n=this.getScrollTop();this.listData.forEach((e,t)=>{var r;const o=null===(r=document.getElementById(e.slug))||void 0===r?void 0:r.offsetTop;o&&(0===t&&n<o?this.activeIndex=0:n>=o&&(this.activeIndex=t))})},100))}},Wr=(t(317),Object(Ee.a)(Xr,(function(){var n=this,e=n._self._c;return n.visible?e("div",{staticClass:"ra-wrapper",class:[n.rightAnchorOptions.customClass,n.global&&"is-global"],on:{mouseover:n.mouseover,mouseleave:n.mouseleave}},[e("div",{staticClass:"ra-button",on:{click:n.btnClick}},[e("svg",{staticClass:"icon",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",viewBox:"0 0 448 512"}},[e("path",{attrs:{fill:"currentColor",d:"M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"}})])]),n._v(" "),e("ul",{directives:[{name:"show",rawName:"v-show",value:n.opened,expression:"opened"}],staticClass:"ra-menu"},n._l(n.listData,(function(t,r){return e("li",{key:r,staticClass:"ra-menu-item",class:[r===n.activeIndex?"active":"",t.level>2?"sub":"","h"+t.level],on:{click:function(e){return n.itemClick(r,t.slug)}}},[n._v(n._s(t.title))])})),0)]):n._e()}),[],!1,null,"c2c6b790",null).exports),Gr={props:{color:{required:!1,default:"rgb(66, 185, 131)"}}},Qr=(t(318),Object(Ee.a)(Gr,(function(){return(0,this._self._c)("div",{staticClass:"spinner",style:{background:this.color}})}),[],!1,null,"1bbcb91a",null).exports);const Kr={name:"Mermaid",props:{id:{type:String,required:!1,default:()=>"diagram_"+Date.now()},graph:{type:String,required:!1}},data:()=>({svg:void 0}),computed:{graphData(){return this.graph?this.graph:this.$slots.default[0].text}},render(n){return void 0===this.svg?n("Loading"):n("div",{class:["mermaid-diagram"],domProps:{innerHTML:this.svg,style:"width: 100%"}})},mounted(){t.e(269).then(t.t.bind(null,1314,7)).then(n=>{n.initialize({startOnLoad:!0}),n.render(this.id,this.graphData,n=>{this.svg=n})})},components:{Loading:Qr}};var Vr=[({router:n})=>{n.beforeEach((n,e,t)=>{"undefined"!=typeof _hmt&&n.path&&_hmt.push(["_trackPageview",n.fullPath]),t()})},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({siteData:n,options:e})=>{n.themeConfig.sidebar={"/zs-ee-框架/cloud-gateway/":[{title:"Cloud Gateway",collapsable:!0,sidebarDepth:1,children:["","概述--介绍","配置--0.断言工厂","配置--1.过滤器工厂","配置--2.全局过滤器"]}],"/zs-ee-框架/mybatis-plus/":[{title:"Mybatis Plus",collapsable:!0,sidebarDepth:1,children:["","mybatis-plus日志"]}],"/zs-use/linux/shell编程/":[{title:"shell编程",collapsable:!0,sidebarDepth:1,children:["","1、hello world","2、base基本功能","3、变量和运算符","4、条件判断","5、流程控制","6、数组","工具--cut","实战脚本简述01","实战脚本示例01","实战脚本示例02","实战脚本示例03","实战脚本示例04","实战脚本示例05","实战脚本示例06"]}],"/zs-project/mallchat/":[{title:"Mallchat",collapsable:!0,sidebarDepth:1,children:["","项目整体介绍【必读】"]}],"/zs-tool-框架/vuepress/":[{title:"Vuepress",collapsable:!0,sidebarDepth:1,children:["","1、快速开始","2、初体验","3、导航栏","4、侧边栏","5、SEO","6、时间更新","7、发布在GitHub","8、自定义域名","9、PWA","10、vssue评论","11、back-to-top","12、谷歌分析","13、分割config","14、保护隐私信息","15、md用法进阶","18、图片缩放","19.1、自动生成侧边栏","19.2、自动生成侧边栏--自定义排序规则","20、全文搜索","21、代码块拷贝插件","22、其他评论方案","23、百度分析","24、侧边栏广告位","25、右侧目录","26、渲染 Mermaid 绘图"]},{title:"附录",collapsable:!0,sidebarDepth:1,children:["附录1、vuepress，Markdown语法","附录2、vuepress自定义home页"]}],"/zs-web/project/html/":[{title:"Html",collapsable:!0,sidebarDepth:1,children:["","光标跟随效果--前端实现","魔术卡片"]}],"/zs-tool-框架/java报表/":[{title:"java报表",collapsable:!0,sidebarDepth:1,children:["","JXL--0.了解","POI--1.基础api","POI--导出图片-0.文章说明","POI--读取图片","POI--工具类封装3-17使用文档","报表--0.环境说明-Excel说明"]}],"/zs-use/linux/基本使用/":[{title:"Linux概述",collapsable:!0,sidebarDepth:1,children:["","Linux概述--1.初识Linux","Linux概述--2.虚拟机安装Linux","Linux概述--3.物理机安装Linux","Linux概述--4.文件系统"]},{title:"基本使用",collapsable:!0,sidebarDepth:1,children:["shell--alias","shell--history","shell--grep和管道符","shell--相关符号","命令--0.简易版","命令--1.基本格式","命令--2.关机、重启","命令--3.Linux帮助文档","命令--4.文件操作管理","命令--5.查找命令","命令--7.1.文件权限（普通）","命令--7.2.文件权限（高级）","命令--8.网络配置","命令--9.1.文件系统（查看）","命令--10.挂载","命令--11.包管理工具","命令--12.打包压缩","命令--13.时间日期","命令--14.痕迹","命令--15.echo","命令--16.vim编辑器","系统管理--1.启动引导与修复","系统管理--3.1.系统管理","系统管理--3.2.系统管理-定时任务"]},{title:"服务管理",collapsable:!0,sidebarDepth:1,children:["服务管理--NFS"]}],"/zs-use/linux/常见问题/":[{title:"常见问题",collapsable:!0,sidebarDepth:1,children:["","CentOS7.9显卡驱动安装","ssh免密登录","错误--没有子进程","查找命令所在包","服务器安装手册","小功能","主机名修改"]}],"/zs-use/linux/虚拟化/":[{title:"虚拟化",collapsable:!0,sidebarDepth:1,children:["docker--faq--磁盘空间不足",""]}],"/zs-ee-框架/spring/":[{title:"Spring",collapsable:!0,sidebarDepth:1,children:["","aop","spring--1.1.xml_bean的配置","spring--1.2.xml_应用","spring--1.3.bean实例化基本流程","Spring--3.1.webflux","Spring--3.2.webflux_security","概述--01.spring是什么"]},{title:"手撕spring",collapsable:!0,sidebarDepth:1,children:["spring--6.0手写spring","spring--6.1.ioc-创建简单的容器","spring--6.2.ioc-定义池和单例池"]}],"/zs-tool-小结/网址收藏/":[{title:"网址收藏",collapsable:!0,sidebarDepth:1,children:["前端实用","实用网站","优秀开源"]}],"/zs-tool-框架/消息推送/":[{title:"消息推送",collapsable:!0,sidebarDepth:1,children:["websocket--3.0.技术选型","websocket--3.1.介绍","websocket--3.2.springboot集成--接口方式","websocket--3.2.springboot集成--注解方式","websocket--3.3.stomp方式01-spring官方案例","websocket--3.4.stomp方式02","websocket--3.5.netty方式01","websocket--3.5.netty方式02","websocket--3.5.netty方式03","websocket--3.6.redis发布订阅广播集群","websocket--3.7.java客户端","websocket--3.xx集群方案","fetch--0.1.入门案例01","SSE--1.1.入门案例01","短轮询--不推荐使用","长轮询--2.1.入门案例01","消息推送技术方案"]}],"/zs-tool-小结/面经手册/":[{title:"面经手册",collapsable:!0,sidebarDepth:1,children:["面试--0.开篇"]}],"/zs-use/idea/插件/":[{title:"插件",collapsable:!0,sidebarDepth:1,children:["","plantUML--问题"]}],"/zs-use/windows/":[{title:"Windows",collapsable:!0,sidebarDepth:1,children:["CMD--不是内部或外部命令","CMD--查找在用IP","浏览器--内存溢出"]}],"/zs-web/tool-小结/":[{title:"tool-小结",collapsable:!0,sidebarDepth:1,children:["","响应状态码","页面修改"]}],"/小框架/kkFileView/":[{title:"Kk File View",collapsable:!0,sidebarDepth:1,children:["centos部署",""]}],"/zs-tool-小结/文件/":[{title:"文件",collapsable:!0,sidebarDepth:1,children:["","1、普通文件下载","2、普通文件上传"]},{title:"附录",collapsable:!0,sidebarDepth:1,children:["multipartFile相关方法","常见的response参数","获取文件ContentType"]}],"/zs-use/linux/":[{title:"Linux",collapsable:!0,sidebarDepth:1,children:[""]}],"/zs-use/maven/":[{title:"Maven",collapsable:!0,sidebarDepth:1,children:["nexus--1.安装","nexus--2.介绍","自定义archetype-01","自定义archetype-02-插件"]}],"/小工具/markdown/":[{title:"Markdown",collapsable:!0,sidebarDepth:1,children:["","typroa1.6.7激活"]}],"/zs-use/idea/":[{title:"Idea",collapsable:!0,sidebarDepth:1,children:["","源码阅读快捷键"]}],"/zs-use/下载视频/":[{title:"下载视频",collapsable:!0,sidebarDepth:1,children:["下载youtube视频--0","下载b站视频--0","下载抖音视频--0","下载微信视频号视频--0","下载器"]}],"/zs-web/node/":[{title:"Node",collapsable:!0,sidebarDepth:1,children:["node--卸载","nvm--安装","配置--sass混合器","问题集--node版本问题","问题集--淘宝镜像源SSL过期","问题集--无法run build"]}],"/小工具/html2md/":[{title:"Html2 Md",collapsable:!0,sidebarDepth:1,children:[""]}],"/小工具/markmap/":[{title:"Markmap",collapsable:!0,sidebarDepth:1,children:[""]}],"/web/iframe/":[{title:"Iframe",collapsable:!0,sidebarDepth:1,children:["iframe-标签属性","iframe-简单使用","iframe-通信"]}],"/zs-se/设计模式/":[{title:"设计模式",collapsable:!0,sidebarDepth:1,children:["","设计模式--0.Java 设计模式内容介绍","设计模式--1.UML类图","设计模式--2.设计模式概述","设计模式--3.2.7.结构型--代理模式","设计模式--3.3.1.行为型--模板方法","设计模式--3.3.2.行为型--命令模式","设计模式--3.3.3.行为型--访问者模式","设计模式--3.3.9.行为型--状态模式"]}],"/zs-use/env/":[{title:"Env",collapsable:!0,sidebarDepth:1,children:["","Linux--postgresql","Linux--python3安装","mac软件安装"]}],"/zs-use/git/":[{title:"Git",collapsable:!0,sidebarDepth:1,children:["","FAQ","附录1、Git替换远程仓库地址"]}],"/中间件/docker/":[{title:"Docker",collapsable:!0,sidebarDepth:1,children:["","安装-win安装"]}],"/小工具/cygwin/":[{title:"Cygwin",collapsable:!0,sidebarDepth:1,children:[""]}],"/小工具/codeAi/":[{title:"Code Ai",collapsable:!0,sidebarDepth:1,children:[""]}],"/小需求/iframe/":[{title:"Iframe",collapsable:!0,sidebarDepth:1,children:["iframe-页面缩放","iframe-自适应高度"]}],"/zs-resume/":[{title:"Zs Resume",collapsable:!0,sidebarDepth:1,children:[""]}],"/中间件/nginx/":[{title:"Nginx",collapsable:!0,sidebarDepth:1,children:[""]}],"/小工具/axure/":[{title:"Axure",collapsable:!0,sidebarDepth:1,children:[""]}],"/zs-se/io/":[{title:"Io",collapsable:!0,sidebarDepth:1,children:["","1、IO流概述","2、字节流","3、字符流","4、IO异常处理","5、缓冲流","6、转换流","7、序列化流","8、打印流","9、压缩和解压缩流","工具包","综合练习"]},{title:"经典白学",collapsable:!0,sidebarDepth:1,children:["commons-io整理的文档","hutool整理文档"]}],"/zs-ee-框架/":[{title:"zs-ee-框架",collapsable:!0,sidebarDepth:1,children:[""]}],"/zs-se/基础/":[{title:"基础",collapsable:!0,sidebarDepth:1,children:["","JUC--CompletableFuture-01","JUC--CompletableFuture-02","se基础--反射机制--1.反射","se基础--反射机制--2.Class信息","se基础--反射机制--3.动态代理","se基础--类的成员--5.内部类"]}],"/大工具/idea/":[{title:"Idea",collapsable:!0,sidebarDepth:1,children:[""]}],"/小需求/html/":[{title:"Html",collapsable:!0,sidebarDepth:1,children:["video-播放视频"]}],"/大工具/git/":[{title:"Git",collapsable:!0,sidebarDepth:1,children:["常用命令"]}],"/小工具/ppt/":[{title:"Ppt",collapsable:!0,sidebarDepth:1,children:["图形绘制","图形填充"]}],"/小需求/css/":[{title:"Css",collapsable:!0,sidebarDepth:1,children:["撑开高度"]}],"/web/js/":[{title:"Js",collapsable:!0,sidebarDepth:1,children:["js-精度"]},{title:"api",collapsable:!0,sidebarDepth:1,children:["api-JSON.parse函数","JSON-stringify函数"]}],"/zs-web/":[{title:"Zs Web",collapsable:!0,sidebarDepth:1,children:[""]}],"/小需求/js/":[{title:"Js",collapsable:!0,sidebarDepth:1,children:["js-api-stringify搞砸了我的时间对象","js-stringify格式化Date","js-json格式化","js-lib-时间库","js-分组","js-参数归一化"]}],"/guide/":[{title:"Guide",collapsable:!0,sidebarDepth:1,children:[""]}]}},({Vue:n})=>{const e=JSON.parse('{"owner":"zs-mcu","repo":"docs","clientId":"09b48aa193526adeb1a8","clientSecret":"e3bfa36d814f2a4cc89ebefbb42858d714b4091e","autoCreateIssue":true,"locale":"zh"}');n.use(Ir,Object.assign({},e,{api:qr}));const t=n.component("Vssue");n.component("Vssue",{functional:!0,render(n,{parent:r,data:o}){if(e.locale||(o.attrs||(o.attrs={}),o.attrs.options||(o.attrs.options={}),o.attrs.options.locale||(o.attrs.options=Object.assign({locale:r.$lang||"en"},o.attrs.options))),r._isMounted)return n(t,o);r.$once("hook:mounted",()=>{r.$forceUpdate()})}})},async({router:n,isServer:e})=>{if(!e){const{register:e}=await t.e(270).then(t.bind(null,1313));n.onReady(()=>{e("/service-worker.js",{registrationOptions:{},ready(){console.log("[vuepress:sw] Service worker is active."),Hr.a.$emit("sw-ready")},cached(n){console.log("[vuepress:sw] Content has been cached for offline use."),Hr.a.$emit("sw-cached",new Nr(n))},updated(n){console.log("[vuepress:sw] Content updated."),Hr.a.$emit("sw-updated",new Nr(n))},offline(){console.log("[vuepress:sw] No internet connection found. App is running in offline mode."),Hr.a.$emit("sw-offline")},error(n){console.error("[vuepress:sw] Error during service worker registration:",n),Hr.a.$emit("sw-error",n),ga("send","exception",{exDescription:n.message,exFatal:!1})}})})}},({Vue:n})=>{n.component("BackToTop",Yr)},({router:n})=>{var e,t,r,o,s,a;"undefined"!=typeof window&&(e=window,t=document,r="script",o="ga",e.GoogleAnalyticsObject=o,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,s=t.createElement(r),a=t.getElementsByTagName(r)[0],s.async=1,s.src="https://www.google-analytics.com/analytics.js",a.parentNode.insertBefore(s,a),ga("create","G-T7NT3KCE4T","auto"),ga("set","anonymizeIp",!0),n.afterEach((function(e){ga("set","page",n.app.$withBase(e.fullPath)),ga("send","pageview")})))},({Vue:n})=>{n.component("CodeCopy",ke)},({Vue:n})=>{n.component("RightAnchor",Wr),n.component("GlobalRightAnchor",{name:"GlobalRightAnchor",functional:!0,render(){return(0,arguments[0])(Wr,{attrs:{global:!0}})}})},({Vue:n})=>{n.component(Kr.name,Kr)}],no=["SWUpdatePopup","BackToTop","GlobalRightAnchor"];class eo extends class{constructor(){this.store=new r.a({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){r.a.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(eo.prototype,{getPageAsyncComponent:Wn.d,getLayoutAsyncComponent:Wn.c,getAsyncComponent:Wn.b,getVueComponent:Wn.e});var to={install(n){const e=new eo;n.$vuepress=e,n.prototype.$vuepress=e}};function ro(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var oo={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return Object(Wn.h)("pageKey",e),r.a.component(e)||r.a.component(e,Object(Wn.d)(e)),r.a.component(e)?n(e):n("")}},so={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},ao={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},io=(t(319),t(320),Object(Ee.a)(ao,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),lo={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};r.a.config.productionTip=!1,r.a.use(Jn),r.a.use(to),r.a.mixin(function(n,e,t=r.a){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const o=new(n(t.$vuepress.$get("siteData"))),s=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(s).reduce((n,e)=>(e.startsWith("$")&&(n[e]=s[e].get),n),a),{computed:a}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},je)),r.a.component("Content",oo),r.a.component("ContentSlotsDistributor",so),r.a.component("OutboundLink",io),r.a.component("ClientOnly",lo),r.a.component("Layout",Object(Wn.c)("Layout")),r.a.component("NotFound",Object(Wn.c)("NotFound")),r.a.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.10",hash:"e86a8d1"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:je.routerBase||je.base,t=new Jn({base:e,mode:"history",fallback:!1,routes:Be,scrollBehavior:(n,e,t)=>t||(n.hash?!r.a.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(ro(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";ro(n,t)?r(t):r()}else r();else{const t=e.path+"/",o=e.path+".html";ro(n,o)?r(o):ro(n,t)?r(t):r()}})}(t);const o={};try{await Promise.all(Vr.filter(n=>"function"==typeof n).map(e=>e({Vue:r.a,options:o,router:t,siteData:je,isServer:n})))}catch(n){console.error(n)}return{app:new r.a(Object.assign(o,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},no.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);